[

    {
        "Lab scenario": "CSRF vulnerability with no defenses",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF.\nTo solve the lab, craft some HTML that uses a CSRF attack to change the viewer's email address and upload it to your exploit server.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const newEmail = req.body.email;\n    res.send(`Email changed to ${newEmail}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Easy"
      },
      {
        "Lab scenario": "CSRF where token validation depends on request method",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF. It attempts to block CSRF attacks, but only applies defenses to certain types of requests.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\nlet csrfToken = 'random-csrf-token';\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email, csrf } = req.body;\n    if (csrf === csrfToken) {\n        res.send(`Email changed to ${email}`);\n    } else {\n        res.status(403).send('Invalid CSRF token');\n    }\n});\n\napp.put('/change-email', (req, res) => {\n    const { email } = req.body;\n    res.send(`Email changed to ${email}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Intermediate"
      },
      {
        "Lab scenario": "CSRF where token validation depends on token being present",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\nlet csrfToken = 'random-csrf-token';\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email, csrf } = req.body;\n    if (csrf) {\n        res.send(`Email changed to ${email}`);\n    } else {\n        res.status(403).send('CSRF token is missing');\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Medium"
      },
      {
        "Lab scenario": "CSRF where token is not tied to user session",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren't integrated into the site's session handling system.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou have two accounts on the application that you can use to help design your attack. The credentials are as follows:",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
      "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\nlet csrfToken = 'static-csrf-token';\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email, csrf } = req.body;\n    if (csrf === csrfToken) {\n        res.send(`Email changed to ${email}`);\n    } else {\n        res.status(403).send('Invalid CSRF token');\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
      "lab level": "Medium"
      },
      {
        "Lab scenario": "CSRF where token is tied to non-session cookie",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren't fully integrated into the site's session handling system.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou have two accounts on the application that you can use to help design your attack. The credentials are as follows:",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    const csrfToken = req.cookies.csrfToken || 'default-csrf-token';\n    res.cookie('csrfToken', csrfToken, { httpOnly: false });\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email, csrf } = req.body;\n    const csrfToken = req.cookies.csrfToken;\n    if (csrf === csrfToken) {\n        res.send(`Email changed to ${email}`);\n    } else {\n        res.status(403).send('Invalid CSRF token');\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Medium"
      },
      {
        "Lab scenario": "CSRF where token is duplicated in cookie",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF. It attempts to use the insecure \"double submit\" CSRF prevention technique.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n    const csrfToken = req.cookies.csrfToken || 'default-csrf-token';\n    res.cookie('csrfToken', csrfToken, { httpOnly: false });\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <input type=\"hidden\" name=\"csrf\" value=\"${csrfToken}\">\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email, csrf } = req.body;\n    const csrfToken = req.cookies.csrfToken;\n    if (csrf === csrfToken) {\n        res.send(`Email changed to ${email}`);\n    } else {\n        res.status(403).send('Invalid CSRF token');\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Medium"
      },
      {
        "Lab scenario": "SameSite Lax bypass via method override",
        "Lab Description": "This lab's change email function is vulnerable to CSRF. To solve the lab, perform a CSRF attack that changes the victim's email address. You should use the provided exploit server to host your attack.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\nconst methodOverride = require('method-override');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\napp.use(methodOverride('_method'));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email } = req.body;\n    res.send(`Email changed to ${email}`);\n});\n\napp.put('/change-email', (req, res) => {\n    const { email } = req.body;\n    res.send(`Email changed to ${email}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Hard"
      },
      {
        "Lab scenario": "SameSite Strict bypass via client-side redirect",
        "Lab Description": "This lab's change email function is vulnerable to CSRF. To solve the lab, perform a CSRF attack that changes the victim's email address. You should use the provided exploit server to host your attack.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email } = req.body;\n    res.send(`Email changed to ${email}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Hard"
      },
      {
        "Lab scenario": "SameSite Strict bypass via sibling domain",
        "Lab Description": "This lab's live chat feature is vulnerable to cross-site WebSocket hijacking (CSWSH). To solve the lab, log in to the victim's account.\nTo do this, use the provided exploit server to perform a CSWSH attack that exfiltrates the victim's chat history to the default Burp Collaborator server. The chat history contains the login credentials in plain text.\nIf you haven't done so already, we recommend completing our topic on WebSocket vulnerabilities before attempting this lab.",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\nconst WebSocket = require('ws');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n    ws.on('message', (message) => {\n        console.log(`Received: ${message}`);\n        ws.send(`Echo: ${message}`);\n    });\n});\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>Live Chat</h1>\n        <div id=\"chat\"></div>\n        <input type=\"text\" id=\"message\" placeholder=\"Type a message...\">\n        <button onclick=\"sendMessage()\">Send</button>\n        <script>\n            const ws = new WebSocket('ws://localhost:8080');\n            ws.onmessage = (event) => {\n                document.getElementById('chat').innerHTML += `<p>${event.data}</p>`;\n            };\n            function sendMessage() {\n                const message = document.getElementById('message').value;\n                ws.send(message);\n            }\n        </script>\n    `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Hard"
      },
      {
        "Lab scenario": "SameSite Lax bypass via cookie refresh",
        "Lab Description": "This lab's change email function is vulnerable to CSRF. To solve the lab, perform a CSRF attack that changes the victim's email address. You should use the provided exploit server to host your attack.\nThe lab supports OAuth-based login. You can log in via your social media account with the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email } = req.body;\n    res.send(`Email changed to ${email}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Hard"
      },
      {
        "Lab scenario": "CSRF where Referer validation depends on header being present",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF. It attempts to block cross domain requests but has an insecure fallback.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email } = req.body;\n    const referer = req.get('Referer');\n    if (referer && !referer.includes('localhost')) {\n        res.status(403).send('Invalid Referer');\n    } else {\n        res.send(`Email changed to ${email}`);\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Medium"
      },
      {
        "Lab scenario": "CSRF with broken Referer validation",
        "Lab Description": "This lab's email change functionality is vulnerable to CSRF. It attempts to detect and block cross domain requests, but the detection mechanism can be bypassed.\nTo solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Cross-site request forgery (CSRF)",
        "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>CSRF Lab</h1>\n        <form action=\"/change-email\" method=\"POST\">\n            <label for=\"email\">New Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n            <button type=\"submit\">Change Email</button>\n        </form>\n    `);\n});\n\napp.post('/change-email', (req, res) => {\n    const { email } = req.body;\n    const referer = req.get('Referer');\n    if (referer && !referer.includes('localhost')) {\n        res.status(403).send('Invalid Referer');\n    } else {\n        res.send(`Email changed to ${email}`);\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
        "lab level": "Medium"
      }
]