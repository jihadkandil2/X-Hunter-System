[
  {
    "Lab scenario": "Username enumeration via different responses",
    "Lab Description": "This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.",
    "Vulnerability name": "Authentication"
  },
  {
    "Lab scenario": "2FA simple bypass",
    "Lab Description": "This lab's two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, access Carlos's account page.",
    "Vulnerability name": "Authentication",
    "lab level": "Easy",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const users = [{ username: 'carlos', password: 'password123', is2FAEnabled: true }]; app.post('/login', (req, res) => { const { username, password, code } = req.body; const user = users.find(u => u.username === username && u.password === password); if (!user) return res.status(401).send('Invalid credentials'); if (user.is2FAEnabled && !code) return res.status(200).send('2FA code required'); res.send(`Welcome, ${username}!`); }); const PORT = 4000; app.listen(PORT, () => console.log(`2FA Bypass Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Password reset broken logic",
    "Lab Description": "This lab's password reset functionality is vulnerable. To solve the lab, reset Carlos's password then log in and access his \"My account\" page.",
    "Vulnerability name": "Authentication",
    "lab level": "Medium",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const users = [{ username: 'carlos', password: 'oldpassword' }]; app.post('/reset-password', (req, res) => { const { username } = req.body; const user = users.find(u => u.username === username); if (user) { res.send('Password reset link sent to your email'); } else { res.status(400).send('User not found'); } }); app.post('/set-new-password', (req, res) => { const { username, newPassword } = req.body; const user = users.find(u => u.username === username); if (user) { user.password = newPassword; res.send('Password changed successfully'); } else { res.status(400).send('User not found'); } }); app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username && u.password === password); if (user) { res.send(`Welcome, ${username}!`); } else { res.status(401).send('Invalid credentials'); } }); app.get('/my-account', (req, res) => { res.send('Account details for carlos'); }); const PORT = 4000; app.listen(PORT, () => console.log(`Password Reset Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Username enumeration via subtly different responses",
    "Lab Description": "This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.",
    "Vulnerability name": "Authentication",
    "lab level": "Medium",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const users = [{ username: 'carlos', password: 'password123' }]; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username); if (!user) { res.status(401).send('Invalid username'); return; } if (user.password !== password) { res.status(401).send('Invalid password'); return; } res.send(`Welcome, ${username}!`); }); app.get('/my-account', (req, res) => { res.send('Account details for carlos'); }); const PORT = 4000; app.listen(PORT, () => console.log(`Username Enumeration Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Username enumeration via response timing",
    "Lab Description": "This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.",
    "Vulnerability name": "Authentication",
    "lab level": "Medium",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const users = [{ username: 'carlos', password: 'password123' }]; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username); if (!user) { setTimeout(() => res.status(401).send('Invalid username'), 1000); return; } if (user.password !== password) { res.status(401).send('Invalid password'); return; } res.send(`Welcome, ${username}!`); }); app.get('/my-account', (req, res) => { res.send('Account details for carlos'); }); const PORT = 4000; app.listen(PORT, () => console.log(`Username Enumeration via Timing Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Broken brute-force protection, IP block",
    "Lab Description": "This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim's password, then log in and access their account page.",
    "Vulnerability name": "Authentication"
  },
  {
    "Lab scenario": "Username enumeration via account lock",
    "Lab Description": "This lab is vulnerable to username enumeration. It uses account locking, but this contains a logic flaw. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.",
    "Vulnerability name": "Authentication",
    "lab level": "Medium",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); let users = [{ username: 'carlos', password: 'securepassword', attempts: 0, locked: false }]; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username); if (!user) { return res.status(401).json({ error: 'Invalid credentials' }); } if (user.locked) { return res.status(403).json({ error: 'Account locked' }); } if (user.password === password) { user.attempts = 0; res.json({ message: 'Login successful' }); } else { user.attempts++; if (user.attempts >= 3) { user.locked = true; } res.status(401).json({ error: 'Invalid credentials' }); } }); const PORT = 4000; app.listen(PORT, () => console.log(`Username Enumeration Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "2FA broken logic",
    "Lab Description": "This lab's two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos's account page.\nYou also have access to the email server to receive your 2FA verification code.",
    "Vulnerability name": "Authentication",
    "lab level": "Medium",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); let users = [{ username: 'carlos', password: 'securepassword', verified: false }]; let verificationCodes = {}; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username && u.password === password); if (!user) { return res.status(401).json({ error: 'Invalid credentials' }); } verificationCodes[username] = '123456'; res.json({ message: '2FA code sent' }); }); app.post('/verify-2fa', (req, res) => { const { username, code } = req.body; if (verificationCodes[username] === code || !code) { users.find(u => u.username === username).verified = true; res.json({ message: '2FA verification bypassed' }); } else { res.status(403).json({ error: 'Invalid 2FA code' }); } }); const PORT = 4000; app.listen(PORT, () => console.log(`2FA Broken Logic Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Brute-forcing a stay-logged-in cookie",
    "Lab Description": "This lab allows users to stay logged in even after they close their browser session. The cookie used to provide this functionality is vulnerable to brute-forcing.\nTo solve the lab, brute-force Carlos's cookie to gain access to his My account page.",
    "Vulnerability name": "Authentication",
    "lab level": "hard",
    "src code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\napp.use(cookieParser());\n\nconst users = {\n  'carlos': { password: 'secure123', session: 'abcd1234' },\n  'admin': { password: 'admin123', session: 'xyz9876' }\n};\n\napp.get('/login', (req, res) => {\n  const { username, password } = req.query;\n  if (users[username] && users[username].password === password) {\n    res.cookie('session', users[username].session);\n    res.send('Logged in');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/account', (req, res) => {\n  const session = req.cookies.session;\n  const user = Object.keys(users).find(u => users[u].session === session);\n  if (user) {\n    res.send(`Welcome ${user}`);\n  } else {\n    res.send('Access denied');\n  }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
  },
  {
    "Lab scenario": "Offline password cracking",
    "Lab Description": "This lab stores the user's password hash in a cookie. The lab also contains an XSS vulnerability in the comment functionality. To solve the lab, obtain Carlos's stay-logged-in cookie and use it to crack his password. Then, log in as carlos and delete his account from the \"My account\" page.",
    "Vulnerability name": "Authentication",
    "lab level": "Hard",
    "src code": "const express=require('express'),sqlite3=require('sqlite3').verbose(),bodyParser=require('body-parser'),crypto=require('crypto'),app=express();app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended:true}));const db=new sqlite3.Database(':memory:');db.serialize(()=>{db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password_hash TEXT)\");db.run(\"INSERT INTO users (username, password_hash) VALUES ('carlos', '5f4dcc3b5aa765d61d8327deb882cf99')\");});app.get('/comments',(req,res)=>{const comment=req.query.comment;res.send(`<p>${comment}</p>`);});app.get('/cookie',(req,res)=>{res.cookie('session','carlos_cookie_hash');res.send(\"Cookie set for Carlos.\");});app.post('/login',(req,res)=>{const{username,password}=req.body;if(!username||!password){return res.status(400).send(\"Username and password are required.\");}const hashedPassword=crypto.createHash('md5').update(password).digest('hex');const query=`SELECT * FROM users WHERE username='${username}' AND password_hash='${hashedPassword}'`;db.all(query,[],(err,rows)=>{if(err){res.status(500).send(\"Error occurred during login.\");}else if(rows.length>0){res.send(\"Login successful!\");}else{res.send(\"Invalid credentials.\");}});});const PORT=3000;app.listen(PORT,()=>console.log(`Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Password reset poisoning via middleware",
    "Lab Description": "This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos's account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.",
    "Vulnerability name": "Authentication",
    "lab level": "medium",
    "src code": "const express=require('express'),bodyParser=require('body-parser'),app=express();app.use(bodyParser.json());const users={\"carlos\":{email:\"carlos@example.com\",password:\"securepassword\"},\"wiener\":{email:\"wiener@example.com\",password:\"peter\"}};app.post('/reset-password',(req,res)=>{const{email}=req.body;if(!email||!users[email.split('@')[0]]){return res.status(400).send(\"User not found.\");}const resetLink=`${req.headers.host}/reset?user=${email.split('@')[0]}`;console.log(\"Password reset link:\",resetLink);res.send(`Password reset link sent to ${email}: <a href=\"http://${resetLink}\">${resetLink}</a>`);});app.listen(3000,()=>console.log(\"Lab running on http://localhost:3000\"));"
  },
  {
    "Lab scenario": "Password brute-force via password change",
    "Lab Description": "This lab's password change functionality makes it vulnerable to brute-force attacks. To solve the lab, use the list of candidate passwords to brute-force Carlos's account and access his \"My account\" page.",
    "Vulnerability name": "Authentication",
    "lab level": "hard",
    "src code": "const express=require('express'),bodyParser=require('body-parser'),app=express();app.use(bodyParser.json());const users={\"carlos\":{password:\"securepassword\"},\"wiener\":{password:\"peter\"}};app.post('/change-password',(req,res)=>{const{username,oldPassword,newPassword}=req.body;if(!users[username]||users[username].password!==oldPassword){return res.status(401).send(\"Invalid credentials.\");}users[username].password=newPassword;console.log(`Password changed for ${username}`);res.send(\"Password changed successfully.\");});app.listen(3000,()=>console.log(\"Lab running on http://localhost:3000\"));"
  },
  {
    "Lab scenario": "Broken brute-force protection, multiple credentials per request",
    "Lab Description": "This lab is vulnerable due to a logic flaw in its brute-force protection. To solve the lab, brute-force Carlos's password, then access his account page.",
    "Vulnerability name": "Authentication",
    "lab level": "medium",
    "src code": "const express=require('express'),bodyParser=require('body-parser'),app=express();app.use(bodyParser.json());const users={'carlos':{password:'securepassword'},'wiener':{password:'peter'}};app.post('/login',(req,res)=>{const{credentials}=req.body;let success=false;credentials.forEach(({username,password})=>{if(users[username]&&users[username].password===password)success=true;});if(success)return res.send('Login successful!');else return res.status(401).send('Invalid credentials.');});app.listen(3000,()=>console.log('Lab running on http://localhost:3000'));"
  },
  {
    "Lab scenario": "2FA bypass using a brute-force attack",
    "Lab Description": "This lab's two-factor authentication is vulnerable to brute-forcing. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, brute-force the 2FA code and access Carlos's account page.\nVictim's credentials: carlos:montoya",
    "Vulnerability name": "Authentication",
    "lab level": "hard",
    "src code": "const express=require('express'),bodyParser=require('body-parser'),app=express();app.use(bodyParser.json());const users={'carlos':{password:'montoya',otp:'0000'}};let attempts={};app.post('/login',(req,res)=>{const{username,password}=req.body;if(users[username]&&users[username].password===password)return res.json({message:'Enter 2FA code',user:username});else return res.status(401).send('Invalid credentials.');});app.post('/verify-2fa',(req,res)=>{const{username,otp}=req.body;if(!attempts[username])attempts[username]=0;attempts[username]++;if(users[username]&&users[username].otp===otp)return res.send('Login successful!');else return res.status(401).send('Invalid 2FA code.');});app.listen(3000,()=>console.log('Lab running on http://localhost:3000'));"
  }
]