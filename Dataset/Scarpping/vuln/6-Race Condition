[
    {
        "Lab scenario": "Exploiting time-sensitive vulnerabilities",
        "Lab Description": "This lab contains a password reset mechanism. Although it doesn't contain a race condition, you can exploit the mechanism's broken cryptography by sending carefully timed requests.\nTo solve the lab:\nYou can log into your account with the following credentials: wiener:peter.",
        "Vulnerability name": "Race conditions",
        "lab level": "Medium",
          "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// In-memory user database\nlet users = {\n  \"wiener\": { password: \"peter\" },\n  \"carlos\": { password: \"oldpass\" }\n};\n\n// Weak reset token generator based on current minute (vulnerable to timing attacks)\nfunction generateResetToken() {\n  const minute = new Date().getMinutes();\n  return \"reset\" + minute;\n}\n\n// Endpoint to request a password reset (token is returned in the response)\napp.get('/request-reset', (req, res) => {\n  const username = req.query.username;\n  if (users[username]) {\n    const token = generateResetToken();\n    res.send(`Password reset token for ${username}: ${token}`);\n  } else {\n    res.send(\"User not found.\");\n  }\n});\n\n// Vulnerable password reset endpoint\napp.post('/reset-password', (req, res) => {\n  const { username, token, newPassword } = req.body;\n  if (users[username] && token === generateResetToken()) {\n    users[username].password = newPassword;\n    res.send(`Password reset successful for ${username}.`);\n  } else {\n    res.send(\"Invalid token or username.\");\n  }\n});\n\n// Login form route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] && users[username].password === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.send(\"Invalid credentials.\");\n  }\n});\n\n// Root route with instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Password Reset Lab - Exploiting Time-Sensitive Vulnerabilities</h1>\n    <p>This lab demonstrates a vulnerability in a password reset mechanism due to weak, time-based token generation.</p>\n    <ul>\n      <li>Request a reset token at: <code>/request-reset?username=wiener</code></li>\n      <li>The token is generated as <code>reset</code> + current minute (e.g., if it's 15 minutes past the hour, token = <code>reset15</code>).</li>\n      <li>Reset the password by POSTing to <code>/reset-password</code> with parameters: username, token, newPassword</li>\n      <li>Then log in using: <strong>wiener</strong> / <strong>peter</strong> (<a href=\"/login\">Login Here</a>)</li>\n    </ul>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Partial construction race conditions",
        "Lab Description": "This lab contains a user registration mechanism. A race condition enables you to bypass email verification and register with an arbitrary email address that you do not own.\nTo solve the lab, exploit this race condition to create an account, then log in and delete the user carlos.",
        "Vulnerability name": "Race conditions",
        "lab level": "Hard",
          "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Simulated in-memory user database\nlet users = [];\n\n// Simulated email verification process with delay (introducing a race condition)\nfunction verifyEmail(email, callback) {\n  // Simulate an asynchronous email verification delay (e.g., sending an email)\n  setTimeout(() => {\n    // For lab purposes, email is marked as verified after delay\n    callback(true);\n  }, 2000); // 2-second delay\n}\n\n// Registration endpoint vulnerable to race conditions\napp.post('/register', (req, res) => {\n  const email = req.body.email;\n  const username = req.body.username;\n  \n  // Check if the email is already registered\n  if (users.find(u => u.email === email)) {\n    return res.send(\"Email already registered.\");\n  }\n  \n  // Begin email verification asynchronously\n  verifyEmail(email, (verified) => {\n    if (verified) {\n      // Race condition: if multiple requests arrive concurrently,\n      // this check may be bypassed\n      if (!users.find(u => u.email === email)) {\n        users.push({ email, username });\n        res.send(`User registered with email: ${email}`);\n      } else {\n        res.send(\"Registration already processed.\");\n      }\n    } else {\n      res.send(\"Email verification failed.\");\n    }\n  });\n});\n\n// Login endpoint (for simplicity, no password here)\napp.post('/login', (req, res) => {\n  const { email, username } = req.body;\n  const user = users.find(u => u.email === email && u.username === username);\n  if (user) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.send(\"Invalid credentials.\");\n  }\n});\n\n// Admin endpoint to delete user 'carlos'\napp.post('/admin/delete-carlos', (req, res) => {\n  users = users.filter(u => u.username !== 'carlos');\n  res.send(\"User carlos has been deleted.\");\n});\n\n// Root route with instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>User Registration Race Condition Lab</h1>\n    <p>This lab simulates a race condition in a user registration mechanism. A delay in email verification allows an attacker to bypass the check and register with an arbitrary email address.</p>\n    <ul>\n      <li>To solve the lab, exploit the race condition to register with an arbitrary email address, then log in and delete user carlos.</li>\n      <li>Registration endpoint: POST /register with parameters: email, username</li>\n      <li>Login endpoint: POST /login with parameters: email, username</li>\n      <li>Admin deletion endpoint: POST /admin/delete-carlos</li>\n    </ul>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
    {
        "Lab scenario": "Limit overrun race conditions",
        "Lab Description": "This lab's purchasing flow contains a race condition that enables you to purchase items for an unintended price. To solve the lab, successfully purchase a Lightweight L33t Leather Jacket. You can log in to your account with the following credentials: wiener:peter.",
        "Vulnerability name": "Race conditions",
        "lab level": "Hard",
        "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); let inventory = [{ id: 1, name: 'Lightweight L33t Leather Jacket', price: 200, stock: 1 }]; let userBalance = 500; app.post('/purchase', (req, res) => { const itemId = req.body.itemId; if (!itemId) { return res.status(400).json({ error: 'Missing item ID' }); } const item = inventory.find(i => i.id === itemId); if (!item || item.stock <= 0) { return res.status(400).json({ error: 'Item not available' }); } if (userBalance < item.price) { return res.status(400).json({ error: 'Insufficient balance' }); } setTimeout(() => { item.stock -= 1; userBalance -= item.price; res.json({ message: `Successfully purchased ${item.name} for $${item.price}`, remainingBalance: userBalance }); }, Math.random() * 100); }); const PORT = 4000; app.listen(PORT, () => console.log(`Race Condition Lab running on http://localhost:${PORT}`));"
      },
      {
        "Lab scenario": "Bypassing rate limits via race conditions",
        "Lab Description": "This lab's login mechanism uses rate limiting to defend against brute-force attacks. However, this can be bypassed due to a race condition. To solve the lab, you can log in to your account with the following credentials: wiener:peter. You should use the following list of potential passwords.",
        "Vulnerability name": "Race conditions",
        "lab level": "Hard",
        "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); const users = [{ username: 'wiener', password: 'peter' }]; const loginAttempts = {}; app.post('/login', (req, res) => { const { username, password } = req.body; if (!username || !password) { return res.status(400).json({ error: 'Username and password required' }); } if (!loginAttempts[username]) { loginAttempts[username] = { attempts: 0, lastAttempt: Date.now() }; } const attemptWindow = Date.now() - loginAttempts[username].lastAttempt; if (attemptWindow < 1000) { loginAttempts[username].attempts++; } else { loginAttempts[username] = { attempts: 1, lastAttempt: Date.now() }; } if (loginAttempts[username].attempts > 3) { return res.status(429).json({ error: 'Too many login attempts. Please try again later.' }); } if (users.find(user => user.username === username && user.password === password)) { res.json({ message: `Welcome, ${username}` }); } else { res.status(401).json({ error: 'Invalid credentials' }); } }); const PORT = 4000; app.listen(PORT, () => console.log(`Race Condition Lab with rate limit running on http://localhost:${PORT}`));"
      },
      {
        "Lab scenario": "Multi-endpoint race conditions",
        "Lab Description": "This lab's purchasing flow contains a race condition that enables you to purchase items for an unintended price. To solve the lab, successfully purchase a Lightweight L33t Leather Jacket. You can log into your account with the following credentials: wiener:peter.",
        "Vulnerability name": "Race conditions",
        "lab level": "Hard",
        "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); const products = [{ id: 1, name: 'Lightweight L33t Leather Jacket', price: 200 }]; const users = [{ username: 'wiener', password: 'peter', balance: 500 }]; const purchaseRequests = {}; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username && u.password === password); if (user) { res.json({ message: `Welcome, ${username}`, balance: user.balance }); } else { res.status(401).json({ error: 'Invalid credentials' }); } }); app.post('/purchase', (req, res) => { const { username, productId } = req.body; const user = users.find(u => u.username === username); const product = products.find(p => p.id === productId); if (!user || !product) { return res.status(400).json({ error: 'Invalid product or user' }); } if (purchaseRequests[username]) { return res.status(429).json({ error: 'Pending purchase request. Please wait.' }); }  purchaseRequests[username] = true; if (user.balance >= product.price) { user.balance -= product.price; res.json({ message: `Successfully purchased ${product.name} for $${product.price}`, remainingBalance: user.balance }); } else { res.status(400).json({ error: 'Insufficient funds' }); } delete purchaseRequests[username]; }); const PORT = 4000; app.listen(PORT, () => console.log(`Race Condition Lab running on http://localhost:${PORT}`));"
      },
      {
        "Lab scenario": "Single-endpoint race conditions",
        "Lab Description": "This lab's email change feature contains a race condition that enables you to associate an arbitrary email address with your account. Someone with the address carlos@ginandjuice.shop has a pending invite to be an administrator for the site, but they have not yet created an account. Therefore, any user who successfully claims this address will automatically inherit admin privileges. To solve the lab, you can log in to your own account with the following credentials: wiener:peter. You also have access to an email client, where you can view all emails sent to @exploit-<YOUR-EXPLOIT-SERVER-ID>.exploit-server.net addresses.",
        "Vulnerability name": "Race conditions",
        "lab level": "Hard",
        "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); const users = [{ username: 'wiener', password: 'peter', email: 'wiener@exploit-server.net', isAdmin: false }]; const pendingInvites = [{ email: 'carlos@ginandjuice.shop', username: 'carlos', isAdmin: true }]; const changeEmailRequests = {}; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username && u.password === password); if (user) { res.json({ message: `Welcome, ${username}`, email: user.email, isAdmin: user.isAdmin }); } else { res.status(401).json({ error: 'Invalid credentials' }); } }); app.post('/change-email', (req, res) => { const { username, newEmail } = req.body; const user = users.find(u => u.username === username); const invite = pendingInvites.find(i => i.email === newEmail); if (!user || !invite) { return res.status(400).json({ error: 'Invalid user or email address' }); } if (changeEmailRequests[username]) { return res.status(429).json({ error: 'Pending email change request. Please wait.' }); } changeEmailRequests[username] = true; if (user.email === newEmail) { return res.status(400).json({ error: 'Email is already set' }); } user.email = newEmail; if (invite.isAdmin) { user.isAdmin = true; } res.json({ message: `Email changed to ${newEmail}`, isAdmin: user.isAdmin }); delete changeEmailRequests[username]; }); const PORT = 4000; app.listen(PORT, () => console.log(`Race Condition Lab running on http://localhost:${PORT}`));"
      }
    
]