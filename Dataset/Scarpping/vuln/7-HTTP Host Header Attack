[
  {
    "Lab scenario": "Basic password reset poisoning",
    "Lab Description": "This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos's account.\nYou can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "medium",
    "src code": "app.post('/reset-password', (req, res) => {\n  const { email } = req.body;\n  const resetLink = `http://${req.headers.host}/reset?token=abc123`;\n  sendEmail(email, `Reset your password: ${resetLink}`);\n  res.send('Password reset email sent');\n});"
  },
  {
    "Lab scenario": "Host header authentication bypass",
    "Lab Description": "This lab makes an assumption about the privilege level of the user based on the HTTP Host header.\nTo solve the lab, access the admin panel and delete the user carlos.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "medium",
    "src code": "app.get('/admin', (req, res) => {\n  if (req.headers.host === 'admin.victim.com') {\n    res.send('Welcome to the admin panel. <a href=\"/delete-carlos\">Delete Carlos</a>');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});"
  },
  {
    "Lab scenario": "Web cache poisoning via ambiguous requests",
    "Lab Description": "This lab is vulnerable to web cache poisoning due to discrepancies in how the cache and the back-end application handle ambiguous requests. An unsuspecting user regularly visits the site's home page.\nTo solve the lab, poison the cache so the home page executes alert(document.cookie) in the victim's browser.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "hard",
    "src code": "app.get('/', (req, res) => {\n  const injectedScript = req.query.xss ? `<script>alert(document.cookie)</script>` : '';\n  res.set('Cache-Control', 'public, max-age=600');\n  res.send(`<html><body>Welcome! ${injectedScript}</body></html>`);\n});"
  },
  {
    "Lab scenario": "Routing-based SSRF",
    "Lab Description": "This lab is vulnerable to routing-based SSRF via the Host header. You can exploit this to access an insecure intranet admin panel located on an internal IP address.\nTo solve the lab, access the internal admin panel located in the 192.168.0.0/24 range, then delete the user carlos.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "hard",
    "src code": "app.get('/admin', (req, res) => {\n  if (req.headers.host.startsWith('192.168.')) {\n    res.send('Internal Admin Panel - <a href=\"/delete-carlos\">Delete Carlos</a>');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});"
  },
  {
    "Lab scenario": "SSRF via flawed request parsing",
    "Lab Description": "This lab is vulnerable to routing-based SSRF due to its flawed parsing of the request's intended host. You can exploit this to access an insecure intranet admin panel located at an internal IP address.\nTo solve the lab, access the internal admin panel located in the 192.168.0.0/24 range, then delete the user carlos.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "hard",
    "src code": "app.get('/admin', (req, res) => {\n  const host = (req.headers['x-forwarded-host'] || req.headers.host).split(':')[0];\n  if (host.startsWith('192.168.')) {\n    res.send('Internal Admin Panel - <a href=\"/delete-carlos\">Delete Carlos</a>');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});"
  },
  {
    "Lab scenario": "Host validation bypass via connection state attack",
    "Lab Description": "This lab is vulnerable to routing-based SSRF via the Host header. Although the front-end server may initially appear to perform robust validation of the Host header, it makes assumptions about all requests on a connection based on the first request it receives.\nTo solve the lab, exploit this behavior to access an internal admin panel located at 192.168.0.1/admin, then delete the user carlos.\nThis lab is based on real-world vulnerabilities discovered by PortSwigger Research. For more details, check out Browser-Powered Desync Attacks: A New Frontier in HTTP Request Smuggling.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "Hard",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); app.use((req, res, next) => { if (req.headers.host !== 'trusted.com') { return res.status(403).json({ error: 'Invalid Host header' }); } next(); }); app.get('/admin', (req, res) => { res.json({ message: 'Admin panel accessed. Delete user carlos to solve the lab.' }); }); app.post('/admin/delete', (req, res) => { if (req.body.username === 'carlos') { res.json({ message: 'User carlos deleted' }); } else { res.status(400).json({ error: 'Invalid user' }); } }); const PORT = 4000; app.listen(PORT, () => console.log(`Host Header Attack Lab running on http://localhost:${PORT}`));"
  },
  {
    "Lab scenario": "Password reset poisoning via dangling markup",
    "Lab Description": "This lab is vulnerable to password reset poisoning via dangling markup. To solve the lab, log in to Carlos's account.\nYou can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.",
    "Vulnerability name": "HTTP Host header attacks",
    "lab level": "Medium",
    "src code":"const express=require('express'),bodyParser=require('body-parser'),app=express();app.use(bodyParser.json());app.post('/reset-password',(req,res)=>{const email=req.body.email,resetLink=`http://${req.headers.host}/reset?token=1234<img src='x' onerror='alert(1)'>`;console.log(`Password reset link sent to ${email}: ${resetLink}`);res.json({message:'Password reset email sent'});});app.get('/reset',(req,res)=>{res.send(`<h1>Reset your password</h1><p>Token: ${req.query.token}</p>`);});const PORT=4000;app.listen(PORT,()=>console.log(`Password Reset Poisoning Lab running on http://localhost:${PORT}`));"
  }
]