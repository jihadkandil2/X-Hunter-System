{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following:\nSELECT * FROM products WHERE category = 'Gifts' AND released = 1\nTo solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products.", "target": "{\"Lab scenario\": \"SQL injection vulnerability in WHERE clause allowing retrieval of hidden data\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following:\\nSELECT * FROM products WHERE category = 'Gifts' AND released = 1\\nTo solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection vulnerability allowing login bypass", "target": "{\"Lab scenario\": \"SQL injection vulnerability allowing login bypass\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the login function.\\nTo solve the lab, perform a SQL injection attack that logs in to the application as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection attack, querying the database type and version on oracle", "target": "{\"Lab scenario\": \"SQL injection attack, querying the database type and version on Oracle\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.\\nTo solve the lab, display the database version string.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection attack, querying the database type and version on MySQL and Microsoft", "target": "{\"Lab scenario\": \"SQL injection attack, querying the database type and version on MySQL and Microsoft\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.\\nTo solve the lab, display the database version string.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\nTo solve the lab, log in as the administrator user.", "target": "{\"Lab scenario\": \"SQL injection attack, listing the database contents on non-Oracle databases\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection attack, listing the database contents on oracle", "target": "{\"Lab scenario\": \"SQL injection attack, listing the database contents on Oracle\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.\nTo solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.", "target": "{\"Lab scenario\": \"SQL injection UNION attack, determining the number of columns returned by the query\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.\\nTo solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.\nThe lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.", "target": "{\"Lab scenario\": \"SQL injection UNION attack, finding a column containing text\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.\\nThe lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection UNION attack, retrieving data from other tables", "target": "{\"Lab scenario\": \"SQL injection UNION attack, retrieving data from other tables\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.\\nThe database contains a different table called users, with columns called username and password.\\nTo solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection UNION attack, retrieving multiple values in a single column", "target": "{\"Lab scenario\": \"SQL injection UNION attack, retrieving multiple values in a single column\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\\nThe database contains a different table called users, with columns called username and password.\\nTo solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where blind sql injection with conditional responses", "target": "{\"Lab scenario\": \"Blind SQL injection with conditional responses\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and no error messages are displayed. But the application includes a Welcome back message in the page if the query returns any rows.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Blind SQL injection with conditional errors", "target": "{\"Lab scenario\": \"Blind SQL injection with conditional errors\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows. If the SQL query causes an error, then the application returns a custom error message.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie. The results of the SQL query are not returned.\nThe database contains a different table called users, with columns called username and password. To solve the lab, find a way to leak the password for the administrator user, then log in to their account.", "target": "{\"Lab scenario\": \"Visible error-based SQL injection\", \"Lab Description\": \"This lab contains a SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie. The results of the SQL query are not returned.\\nThe database contains a different table called users, with columns called username and password. To solve the lab, find a way to leak the password for the administrator user, then log in to their account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: blind sql injection with time delays", "target": "{\"Lab scenario\": \"Blind SQL injection with time delays\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.\\nTo solve the lab, exploit the SQL injection vulnerability to cause a 10 second delay.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Blind SQL injection with time delays and information retrieval", "target": "{\"Lab scenario\": \"Blind SQL injection with time delays and information retrieval\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe SQL query is executed asynchronously and has no effect on the application's response. However, you can trigger out-of-band interactions with an external domain.\nTo solve the lab, exploit the SQL injection vulnerability to cause a DNS lookup to Burp Collaborator.", "target": "{\"Lab scenario\": \"Blind SQL injection with out-of-band interaction\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe SQL query is executed asynchronously and has no effect on the application's response. However, you can trigger out-of-band interactions with an external domain.\\nTo solve the lab, exploit the SQL injection vulnerability to cause a DNS lookup to Burp Collaborator.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: blind sql injection with out-of-band data exfiltration", "target": "{\"Lab scenario\": \"Blind SQL injection with out-of-band data exfiltration\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe SQL query is executed asynchronously and has no effect on the application's response. However, you can trigger out-of-band interactions with an external domain.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in its stock check feature. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables.\nThe database contains a users table, which contains the usernames and passwords of registered users. To solve the lab, perform a SQL injection attack to retrieve the admin user's credentials, then log in to their account.", "target": "{\"Lab scenario\": \"SQL injection with filter bypass via XML encoding\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in its stock check feature. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables.\\nThe database contains a users table, which contains the usernames and passwords of registered users. To solve the lab, perform a SQL injection attack to retrieve the admin user's credentials, then log in to their account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss into html context with nothing encoded", "target": "{\"Lab scenario\": \"Reflected XSS into HTML context with nothing encoded\", \"Lab Description\": \"This lab contains a simple reflected cross-site scripting vulnerability in the search functionality.\\nTo solve the lab, perform a cross-site scripting attack that calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS into HTML context with nothing encoded", "target": "{\"Lab scenario\": \"Stored XSS into HTML context with nothing encoded\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in the comment functionality.\\nTo solve this lab, submit a comment that calls the alert function when the blog post is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss in document.write sink using source location.search", "target": "{\"Lab scenario\": \"DOM XSS in document.write sink using source location.search\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search, which you can control using the website URL.\\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search.\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.", "target": "{\"Lab scenario\": \"DOM XSS in innerHTML sink using source location.search\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search.\\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in jQuery anchor href attribute sink using location.search source", "target": "{\"Lab scenario\": \"DOM XSS in jQuery anchor href attribute sink using location.search source\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library's $ selector function to find an anchor element, and changes its href attribute using data from location.search.\\nTo solve this lab, make the \\\"back\\\" link alert document.cookie.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in jQuery selector sink using a hashchange event", "target": "{\"Lab scenario\": \"DOM XSS in jQuery selector sink using a hashchange event\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery's $() selector function to auto-scroll to a given post, whose title is passed via the location.hash property.\\nTo solve the lab, deliver an exploit to the victim that calls the print() function in their browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function.", "target": "{\"Lab scenario\": \"Reflected XSS into attribute with angle brackets HTML-encoded\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: stored xss into anchor href attribute with double quotes html-encoded", "target": "{\"Lab scenario\": \"Stored XSS into anchor href attribute with double quotes HTML-encoded\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the comment author name is clicked.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss into a javascript string with angle brackets html encoded", "target": "{\"Lab scenario\": \"Reflected XSS into a JavaScript string with angle brackets HTML encoded\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. The reflection occurs inside a JavaScript string. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss in document.write sink using source location.search inside a select element", "target": "{\"Lab scenario\": \"DOM XSS in document.write sink using source location.search inside a select element\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search which you can control using the website URL. The data is enclosed within a select element.\\nTo solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss in angularjs expression with angle brackets and double quotes html-encoded", "target": "{\"Lab scenario\": \"DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in a AngularJS expression within the search functionality.\\nAngularJS is a popular JavaScript library, which scans the contents of HTML nodes containing the ng-app attribute (also known as an AngularJS directive). When a directive is added to the HTML code, you can execute JavaScript expressions within double curly braces. This technique is useful when angle brackets are being encoded.\\nTo solve this lab, perform a cross-site scripting attack that executes an AngularJS expression and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected dom xss", "target": "{\"Lab scenario\": \"Reflected DOM XSS\", \"Lab Description\": \"This lab demonstrates a reflected DOM vulnerability. Reflected DOM vulnerabilities occur when the server-side application processes data from a request and echoes the data in the response. A script on the page then processes the reflected data in an unsafe way, ultimately writing it to a dangerous sink.\\nTo solve this lab, create an injection that calls the alert() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored dom xss", "target": "{\"Lab scenario\": \"Stored DOM XSS\", \"Lab Description\": \"This lab demonstrates a stored DOM vulnerability in the blog comment functionality. To solve this lab, exploit this vulnerability to call the alert() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS into HTML context with most tags and attributes blocked", "target": "{\"Lab scenario\": \"Reflected XSS into HTML context with most tags and attributes blocked\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in the search functionality but uses a web application firewall (WAF) to protect against common XSS vectors.\\nTo solve the lab, perform a cross-site scripting attack that bypasses the WAF and calls the print() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS into HTML context with all tags blocked except custom ones", "target": "{\"Lab scenario\": \"Reflected XSS into HTML context with all tags blocked except custom ones\", \"Lab Description\": \"This lab blocks all HTML tags except custom ones.\\nTo solve the lab, perform a cross-site scripting attack that injects a custom tag and automatically alerts document.cookie.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss with some svg markup allowed", "target": "{\"Lab scenario\": \"Reflected XSS with some SVG markup allowed\", \"Lab Description\": \"This lab has a simple reflected XSS vulnerability. The site is blocking common tags but misses some SVG tags and events.\\nTo solve the lab, perform a cross-site scripting attack that calls the alert() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in canonical link tag", "target": "{\"Lab scenario\": \"Reflected XSS in canonical link tag\", \"Lab Description\": \"This lab reflects user input in a canonical link tag and escapes angle brackets.\\nTo solve the lab, perform a cross-site scripting attack on the home page that injects an attribute that calls the alert function.\\nTo assist with your exploit, you can assume that the simulated user will press the following key combinations:\\nPlease note that the intended solution to this lab is only possible in Chrome.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss into a javascript string with single quote and backslash escaped", "target": "{\"Lab scenario\": \"Reflected XSS into a JavaScript string with single quote and backslash escaped\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality. The reflection occurs inside a JavaScript string with single quotes and backslashes escaped.\\nTo solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss into a javascript string with angle brackets and double quotes html-encoded and single quotes escaped", "target": "{\"Lab scenario\": \"Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets and double are HTML encoded and single quotes are escaped.\\nTo solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss into onclick event with angle brackets and double quotes html-encoded and single quotes and backslash escaped", "target": "{\"Lab scenario\": \"Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in the comment functionality.\\nTo solve this lab, submit a comment that calls the alert function when the comment author name is clicked.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped", "target": "{\"Lab scenario\": \"Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search blog functionality. The reflection occurs inside a template string with angle brackets, single, and double quotes HTML encoded, and backticks escaped. To solve this lab, perform a cross-site scripting attack that calls the alert function inside the template string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: exploiting cross-site scripting to steal cookies", "target": "{\"Lab scenario\": \"Exploiting cross-site scripting to steal cookies\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim's session cookie, then use this cookie to impersonate the victim.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim's username and password then use these credentials to log in to the victim's account.", "target": "{\"Lab scenario\": \"Exploiting cross-site scripting to capture passwords\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim's username and password then use these credentials to log in to the victim's account.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Exploiting XSS to bypass CSRF defenses", "target": "{\"Lab scenario\": \"Exploiting XSS to bypass CSRF defenses\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the blog comments function. To solve the lab, exploit the vulnerability to steal a CSRF token, which you can then use to change the email address of someone who views the blog post comments.\\nYou can log in to your own account using the following credentials: wiener:peter\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS with AngularJS sandbox escape without strings", "target": "{\"Lab scenario\": \"Reflected XSS with AngularJS sandbox escape without strings\", \"Lab Description\": \"This lab uses AngularJS in an unusual way where the $eval function is not available and you will be unable to use any strings in AngularJS.\\nTo solve the lab, perform a cross-site scripting attack that escapes the sandbox and executes the alert function without using the $eval function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses CSP and AngularJS.\nTo solve the lab, perform a cross-site scripting attack that bypasses CSP, escapes the AngularJS sandbox, and alerts document.cookie.", "target": "{\"Lab scenario\": \"Reflected XSS with AngularJS sandbox escape and CSP\", \"Lab Description\": \"This lab uses CSP and AngularJS.\\nTo solve the lab, perform a cross-site scripting attack that bypasses CSP, escapes the AngularJS sandbox, and alerts document.cookie.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss with event handlers and href attributes blocked", "target": "{\"Lab scenario\": \"Reflected XSS with event handlers and href attributes blocked\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability with some whitelisted tags, but all events and anchor href attributes are blocked.\\nTo solve the lab, perform a cross-site scripting attack that injects a vector that, when clicked, calls the alert function.\\nNote that you need to label your vector with the word \\\"Click\\\" in order to induce the simulated lab user to click your vector. For example:\\n<a href=\\\"\\\">Click me</a>\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: reflected xss in a javascript url with some characters blocked", "target": "{\"Lab scenario\": \"Reflected XSS in a JavaScript URL with some characters blocked\", \"Lab Description\": \"This lab reflects your input in a JavaScript URL, but all is not as it seems. This initially seems like a trivial challenge; however, the application is blocking some characters in an attempt to prevent XSS attacks.\\nTo solve the lab, perform a cross-site scripting attack that calls the alert function with the string 1337 contained somewhere in the alert message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss protected by very strict csp, with dangling markup attack", "target": "{\"Lab scenario\": \"Reflected XSS protected by very strict CSP, with dangling markup attack\", \"Lab Description\": \"This lab using a strict CSP that blocks outgoing requests to external web sites.\\nTo solve the lab, first perform a cross-site scripting attack that bypasses the CSP and exfiltrates a simulated victim user's CSRF token using Burp Collaborator. You then need to change the simulated user's email address to hacker@evil-user.net.\\nYou must label your vector with the word \\\"Click\\\" in order to induce the simulated user to click it. For example:\\n<a href=\\\"\\\">Click me</a>\\nYou can log in to your own account using the following credentials: wiener:peter\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: reflected xss protected by csp, with csp bypass", "target": "{\"Lab scenario\": \"Reflected XSS protected by CSP, with CSP bypass\", \"Lab Description\": \"This lab uses CSP and contains a reflected XSS vulnerability.\\nTo solve the lab, perform a cross-site scripting attack that bypasses the CSP and calls the alert function.\\nPlease note that the intended solution to this lab is only possible in Chrome.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.", "target": "{\"Lab scenario\": \"Username enumeration via different responses\", \"Lab Description\": \"This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where 2fa simple bypass", "target": "{\"Lab scenario\": \"2FA simple bypass\", \"Lab Description\": \"This lab's two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Password reset broken logic", "target": "{\"Lab scenario\": \"Password reset broken logic\", \"Lab Description\": \"This lab's password reset functionality is vulnerable. To solve the lab, reset Carlos's password then log in and access his \\\"My account\\\" page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.", "target": "{\"Lab scenario\": \"Username enumeration via subtly different responses\", \"Lab Description\": \"This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: username enumeration via response timing", "target": "{\"Lab scenario\": \"Username enumeration via response timing\", \"Lab Description\": \"This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim's password, then log in and access their account page.", "target": "{\"Lab scenario\": \"Broken brute-force protection, IP block\", \"Lab Description\": \"This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim's password, then log in and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where username enumeration via account lock", "target": "{\"Lab scenario\": \"Username enumeration via account lock\", \"Lab Description\": \"This lab is vulnerable to username enumeration. It uses account locking, but this contains a logic flaw. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos's account page.\nYou also have access to the email server to receive your 2FA verification code.", "target": "{\"Lab scenario\": \"2FA broken logic\", \"Lab Description\": \"This lab's two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos's account page.\\nYou also have access to the email server to receive your 2FA verification code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where brute-forcing a stay-logged-in cookie", "target": "{\"Lab scenario\": \"Brute-forcing a stay-logged-in cookie\", \"Lab Description\": \"This lab allows users to stay logged in even after they close their browser session. The cookie used to provide this functionality is vulnerable to brute-forcing.\\nTo solve the lab, brute-force Carlos's cookie to gain access to his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Offline password cracking", "target": "{\"Lab scenario\": \"Offline password cracking\", \"Lab Description\": \"This lab stores the user's password hash in a cookie. The lab also contains an XSS vulnerability in the comment functionality. To solve the lab, obtain Carlos's stay-logged-in cookie and use it to crack his password. Then, log in as carlos and delete his account from the \\\"My account\\\" page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where password reset poisoning via middleware", "target": "{\"Lab scenario\": \"Password reset poisoning via middleware\", \"Lab Description\": \"This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos's account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Password brute-force via password change", "target": "{\"Lab scenario\": \"Password brute-force via password change\", \"Lab Description\": \"This lab's password change functionality makes it vulnerable to brute-force attacks. To solve the lab, use the list of candidate passwords to brute-force Carlos's account and access his \\\"My account\\\" page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: broken brute-force protection, multiple credentials per request", "target": "{\"Lab scenario\": \"Broken brute-force protection, multiple credentials per request\", \"Lab Description\": \"This lab is vulnerable due to a logic flaw in its brute-force protection. To solve the lab, brute-force Carlos's password, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's two-factor authentication is vulnerable to brute-forcing. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, brute-force the 2FA code and access Carlos's account page.\nVictim's credentials: carlos:montoya", "target": "{\"Lab scenario\": \"2FA bypass using a brute-force attack\", \"Lab Description\": \"This lab's two-factor authentication is vulnerable to brute-forcing. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, brute-force the 2FA code and access Carlos's account page.\\nVictim's credentials: carlos:montoya\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in pdf generator's metadata", "target": "{\"Lab scenario\": \"Stored XSS in PDF Generator's Metadata\", \"Lab Description\": \"The application allows users to upload documents and generates downloadable PDFs. However, the PDF metadata fields (e.g., title, author) are not sanitized. The application directly embeds user input into the PDF metadata.\\nTo solve: Inject a JavaScript payload into the metadata field and trigger execution upon opening the document in a web viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in WebSocket Chat Application", "target": "{\"Lab scenario\": \"DOM-based XSS in WebSocket Chat Application\", \"Lab Description\": \"A WebSocket-based chat application dynamically updates messages on the page using JavaScript innerHTML. User input is passed directly to the DOM without sanitization.\\nTo solve: Inject a JavaScript payload into the chat input and trigger it upon rendering the received message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss via http header in error logging", "target": "{\"Lab scenario\": \"Reflected XSS via HTTP Header in Error Logging\", \"Lab Description\": \"An API exposes an error page that reflects user-controlled data from the 'Referer' header without encoding. Attackers can inject JavaScript payloads via crafted HTTP requests.\\nTo solve: Inject a payload into the 'Referer' header and trigger execution on the error page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-based XSS via Form Autofill", "target": "{\"Lab scenario\": \"Mutation-based XSS via Form Autofill\", \"Lab Description\": \"The web application includes an autofill mechanism that modifies DOM elements dynamically based on user input. However, it fails to properly sanitize input before updating the DOM, allowing attackers to execute malicious scripts.\\nTo solve: Exploit the mutation event handler to trigger XSS upon autofill activation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in jsonp callback parameter", "target": "{\"Lab scenario\": \"Reflected XSS in JSONP Callback Parameter\", \"Lab Description\": \"An API endpoint provides JSONP responses and accepts a user-supplied callback parameter without proper sanitization. This vulnerability allows an attacker to inject malicious JavaScript code that is executed in the context of the victim's browser when the response is loaded.\\nTo solve: Craft a request with a malicious callback value that triggers script execution upon the JSONP response being processed by the browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in comment system with emoji rendering", "target": "{\"Lab scenario\": \"Stored XSS in Comment System with Emoji Rendering\", \"Lab Description\": \"The application's comment system supports emoji rendering, but fails to properly sanitize user input before processing. Attackers can inject JavaScript payloads disguised as emoji text.\\nTo solve: Inject a payload inside a comment and trigger execution upon rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in JSON API Response", "target": "{\"Lab scenario\": \"Reflected XSS in JSON API Response\", \"Lab Description\": \"The API returns user-provided input directly in a JSON response without encoding. JavaScript code injected into the 'message' parameter executes when viewed in certain browsers.\\nTo solve: Inject a JavaScript payload into the 'message' parameter and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A GraphQL API endpoint echoes user-controlled input in responses without sanitization. Attackers can inject malicious JavaScript that executes when another user queries the API.\nTo solve: Inject an XSS payload in a stored query field and retrieve it through another API call.", "target": "{\"Lab scenario\": \"Stored XSS in GraphQL Query Response\", \"Lab Description\": \"A GraphQL API endpoint echoes user-controlled input in responses without sanitization. Attackers can inject malicious JavaScript that executes when another user queries the API.\\nTo solve: Inject an XSS payload in a stored query field and retrieve it through another API call.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation-based xss in event listener", "target": "{\"Lab scenario\": \"Mutation-based XSS in Event Listener\", \"Lab Description\": \"The application listens for user input events and updates the DOM dynamically. Malicious input can modify the event handler to execute arbitrary JavaScript.\\nTo solve: Inject an XSS payload using an unexpected mutation event and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A WebSocket-based chat application broadcasts user messages without proper sanitization, allowing stored XSS. The application directly inserts unsanitized messages into the DOM of connected clients.\nTo solve: Inject a JavaScript payload into a chat message and trigger execution on another client.", "target": "{\"Lab scenario\": \"Stored XSS in WebSocket Chat Application\", \"Lab Description\": \"A WebSocket-based chat application broadcasts user messages without proper sanitization, allowing stored XSS. The application directly inserts unsanitized messages into the DOM of connected clients.\\nTo solve: Inject a JavaScript payload into a chat message and trigger execution on another client.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom-based xss via window.name property", "target": "{\"Lab scenario\": \"DOM-based XSS via window.name Property\", \"Lab Description\": \"This lab demonstrates a DOM-based XSS vulnerability where the application reads the window.name property and injects its value into the HTML without sanitization.\\nTo solve: Modify window.name with a JavaScript payload and trigger its execution on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-Based XSS in Content Editable Element", "target": "{\"Lab scenario\": \"Mutation-Based XSS in Content Editable Element\", \"Lab Description\": \"The application provides a contenteditable div for user input without proper sanitization, allowing an attacker to inject malicious scripts. The vulnerability lies in the dynamic mutation of the DOM based on user input.\\nTo solve: Inject a JavaScript payload into the contenteditable area and trigger its execution upon re-rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in http response header", "target": "{\"Lab scenario\": \"Reflected XSS in HTTP Response Header\", \"Lab Description\": \"This lab targets a vulnerability where the application reflects data from a custom HTTP header into the response header without sanitization. Attackers can inject malicious scripts that execute in the browser.\\nTo solve: Inject an XSS payload in a custom header and observe its execution when the response header is processed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in GraphQL Comment Field", "target": "{\"Lab scenario\": \"Stored XSS in GraphQL Comment Field\", \"Lab Description\": \"A GraphQL API endpoint accepts and stores user comments without proper sanitization. When these comments are later rendered on a web page, the unsanitized content triggers an XSS attack.\\nTo solve: Inject a JavaScript payload via a GraphQL mutation and trigger its execution during comment retrieval.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application maintains a notification panel where server-stored messages are rendered on the client without proper sanitization. Attackers can inject JavaScript payloads into notification messages that persist and execute when viewed.\nTo solve: Inject a payload into the notification submission and trigger its execution when the panel reloads.", "target": "{\"Lab scenario\": \"Stored XSS in Notification Panel\", \"Lab Description\": \"The application maintains a notification panel where server-stored messages are rendered on the client without proper sanitization. Attackers can inject JavaScript payloads into notification messages that persist and execute when viewed.\\nTo solve: Inject a payload into the notification submission and trigger its execution when the panel reloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in GraphQL Subscription Display", "target": "{\"Lab scenario\": \"DOM-based XSS in GraphQL Subscription Display\", \"Lab Description\": \"This lab involves a GraphQL subscription that delivers real-time updates to a client-side dashboard. The subscription data is inserted into the DOM without proper encoding, allowing an attacker to deliver a malicious payload via the subscription stream.\\nTo solve: Inject a payload through the subscription endpoint and trigger it when the client renders the data.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The client-side script extracts the URL fragment (window.location.hash) and injects it into the DOM without proper sanitization. An attacker can craft a URL with a malicious hash that executes arbitrary JavaScript when the page loads.\nTo solve: Modify the URL fragment to include a payload and trigger its execution in the browser.", "target": "{\"Lab scenario\": \"Reflected XSS in URL Fragment Parsing\", \"Lab Description\": \"The client-side script extracts the URL fragment (window.location.hash) and injects it into the DOM without proper sanitization. An attacker can craft a URL with a malicious hash that executes arbitrary JavaScript when the page loads.\\nTo solve: Modify the URL fragment to include a payload and trigger its execution in the browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user profile update section", "target": "{\"Lab scenario\": \"Stored XSS in User Profile Update Section\", \"Lab Description\": \"Users can update their profile information, including a bio, which is stored on the server and rendered on their profile page. Lack of sanitization allows malicious scripts to persist and execute in the profile view.\\nTo solve: Inject a JavaScript payload in the bio update and verify execution when the profile is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation-based xss via drag-and-drop file upload", "target": "{\"Lab scenario\": \"Mutation-based XSS via Drag-and-Drop File Upload\", \"Lab Description\": \"The application supports drag-and-drop file uploads and displays file metadata in a preview panel. The preview code unsafely uses innerHTML to render metadata, allowing mutation-based XSS when an attacker uploads a file with a maliciously crafted metadata field.\\nTo solve: Modify the file metadata to include a payload and trigger its execution when the preview is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS via Local Storage Injection", "target": "{\"Lab scenario\": \"DOM-based XSS via Local Storage Injection\", \"Lab Description\": \"The application saves user preferences in the browser's localStorage and later reads them to personalize the UI. However, it fails to sanitize the stored values before inserting them into the DOM, allowing attackers to inject malicious scripts.\\nTo solve: Inject a JavaScript payload into localStorage using browser DevTools and trigger its execution when the page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in rest api error message", "target": "{\"Lab scenario\": \"Reflected XSS in REST API Error Message\", \"Lab Description\": \"An API endpoint designed to handle user requests returns error messages containing the unsanitized user input. An attacker can supply a malicious value that gets reflected in the error message, leading to XSS when the error is displayed in the browser.\\nTo solve: Craft a request with a payload in the input parameter and trigger the reflected error message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in online forum post", "target": "{\"Lab scenario\": \"Stored XSS in Online Forum Post\", \"Lab Description\": \"The forum application allows users to post messages that are stored on the server and later rendered on forum threads. The posts are not sanitized before display, letting attackers inject malicious scripts that persist across sessions.\\nTo solve: Submit a forum post containing a payload and verify that it executes when the thread is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A widget loader dynamically generates content using document.write based on a URL parameter. The parameter is not sanitized, allowing an attacker to supply a malicious payload that executes when the widget is loaded.\nTo solve: Modify the URL parameter to include a script payload and trigger its execution in the widget's output.", "target": "{\"Lab scenario\": \"DOM-based XSS via document.write in Widget Loader\", \"Lab Description\": \"A widget loader dynamically generates content using document.write based on a URL parameter. The parameter is not sanitized, allowing an attacker to supply a malicious payload that executes when the widget is loaded.\\nTo solve: Modify the URL parameter to include a script payload and trigger its execution in the widget's output.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-based XSS in Dynamic Theme Editor", "target": "{\"Lab scenario\": \"Mutation-based XSS in Dynamic Theme Editor\", \"Lab Description\": \"The application provides a dynamic theme editor that allows users to customize the website's appearance by updating CSS stored on the server. The editor applies the submitted CSS directly into a style tag without sanitization, permitting XSS via malicious CSS payloads.\\nTo solve: Inject a CSS-based payload using mutation events that triggers JavaScript execution when the theme is applied.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in search query parameter", "target": "{\"Lab scenario\": \"Reflected XSS in Search Query Parameter\", \"Lab Description\": \"The application provides a search feature where user input is reflected back into the page without proper sanitization. Attackers can inject scripts through the search parameter to achieve XSS.\\nTo solve: Craft a malicious payload in the search query and observe if it executes on the response page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in product review system", "target": "{\"Lab scenario\": \"Stored XSS in Product Review System\", \"Lab Description\": \"Users can leave reviews on product pages. The application does not sanitize or escape the user-submitted content before rendering it, leading to stored XSS.\\nTo solve: Submit a malicious script in the review form and revisit the product page to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses `location.hash` to dynamically update content on the page without sanitization. This allows attackers to inject scripts that execute when the hash is processed.\nTo solve: Inject a script payload into the URL hash and observe its execution in the page.", "target": "{\"Lab scenario\": \"DOM-based XSS in Location Hash\", \"Lab Description\": \"The application uses `location.hash` to dynamically update content on the page without sanitization. This allows attackers to inject scripts that execute when the hash is processed.\\nTo solve: Inject a script payload into the URL hash and observe its execution in the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user profile bio", "target": "{\"Lab scenario\": \"Stored XSS in User Profile Bio\", \"Lab Description\": \"Users can update their profile bio. The application displays this information without escaping HTML content, leading to persistent XSS on profile pages.\\nTo solve: Insert a payload in the bio field and revisit your profile page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via JavaScript URL in HREF Attribute", "target": "{\"Lab scenario\": \"XSS via JavaScript URL in HREF Attribute\", \"Lab Description\": \"The application includes user-controlled links using anchor tags where the href is directly set to user input. This allows attackers to inject `javascript:` URLs to execute code when the link is clicked.\\nTo solve: Inject a `javascript:` payload and click the link to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in client-side comment preview feature", "target": "{\"Lab scenario\": \"XSS in Client-Side Comment Preview Feature\", \"Lab Description\": \"The application has a live comment preview implemented entirely on the client-side. User input is inserted into the DOM using `innerHTML` without sanitization, allowing for DOM-based XSS.\\nTo solve: Inject a payload in the comment box and observe the live preview triggering script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in admin feedback viewer", "target": "{\"Lab scenario\": \"Stored XSS in Admin Feedback Viewer\", \"Lab Description\": \"Users can submit feedback via a contact form. The feedback is stored and later viewed by an admin. Since the admin interface renders raw HTML from stored feedback, it's vulnerable to stored XSS.\\nTo solve: Submit a feedback with a payload and wait for the admin to view it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in unescaped error message", "target": "{\"Lab scenario\": \"XSS in Unescaped Error Message\", \"Lab Description\": \"The application displays error messages using unsanitized user input. If the user submits malformed input, it is echoed in the error output, enabling reflected XSS.\\nTo solve: Trigger an error that includes a payload in the message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss via unescaped url parameter in template", "target": "{\"Lab scenario\": \"DOM XSS via Unescaped URL Parameter in Template\", \"Lab Description\": \"The application loads a `title` parameter from the URL and inserts it directly into a DOM template using `innerHTML`. If not escaped, this allows DOM-based XSS via the `title` parameter.\\nTo solve: Inject a payload into the title parameter and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via File Name in File Upload Confirmation Page", "target": "{\"Lab scenario\": \"XSS via File Name in File Upload Confirmation Page\", \"Lab Description\": \"When users upload a file, the server reflects the original filename back into the confirmation message without sanitization. This allows attackers to upload files with malicious names containing XSS payloads.\\nTo solve: Upload a file with a filename containing a script and confirm that it executes on the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Search Query Parameter", "target": "{\"Lab scenario\": \"Reflected XSS via Search Query Parameter\", \"Lab Description\": \"The application has a search functionality that reflects user input directly into the results page without encoding or sanitization. An attacker can inject malicious scripts via the search query.\\nTo solve: Inject a payload in the search parameter and confirm its execution in the results page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user profile bio", "target": "{\"Lab scenario\": \"Stored XSS in User Profile Bio\", \"Lab Description\": \"Users can update their profile including a 'bio' field. The bio is displayed on their public profile page without escaping HTML. An attacker can store a payload in the bio that executes whenever someone views their profile.\\nTo solve: Submit a malicious bio and visit the profile to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in javascript context via url parameter", "target": "{\"Lab scenario\": \"XSS in JavaScript Context via URL Parameter\", \"Lab Description\": \"The page dynamically sets a JavaScript variable using a URL parameter without proper sanitization. Injecting unescaped characters allows breaking out of the script context and executing arbitrary code.\\nTo solve: Inject a payload that escapes the JavaScript string and executes your code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The page uses JavaScript to read the URL fragment (`location.hash`) and inserts it into the page using `innerHTML`. This allows attackers to craft a malicious link that executes code when opened.\nTo solve: Craft a URL with a malicious hash and verify code execution.", "target": "{\"Lab scenario\": \"DOM XSS via Fragment Identifier Injection\", \"Lab Description\": \"The page uses JavaScript to read the URL fragment (`location.hash`) and inserts it into the page using `innerHTML`. This allows attackers to craft a malicious link that executes code when opened.\\nTo solve: Craft a URL with a malicious hash and verify code execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Product Review Rendering", "target": "{\"Lab scenario\": \"XSS in Product Review Rendering\", \"Lab Description\": \"Users can leave reviews on products. These reviews are displayed on the product page without sanitization. Malicious users can inject HTML/JavaScript into the review content.\\nTo solve: Submit a review containing a script and reload the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application fetches a user profile via JSON and renders fields like 'nickname' using `innerHTML`. A malicious user can inject a script in their nickname, which is then executed when another user views the profile.", "target": "{\"Lab scenario\": \"XSS in JSON Response Rendered via innerHTML\", \"Lab Description\": \"The application fetches a user profile via JSON and renders fields like 'nickname' using `innerHTML`. A malicious user can inject a script in their nickname, which is then executed when another user views the profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in comment section with markdown parsing", "target": "{\"Lab scenario\": \"XSS in Comment Section with Markdown Parsing\", \"Lab Description\": \"The app allows Markdown-formatted comments but doesnâ€™t properly sanitize embedded HTML. Attackers can bypass Markdown rendering with raw HTML containing XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in support ticket system", "target": "{\"Lab scenario\": \"Stored XSS in Support Ticket System\", \"Lab Description\": \"Users can submit support tickets with titles and descriptions. These values are later reviewed by admins. The input is rendered without encoding, allowing attackers to inject stored XSS payloads into ticket fields.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Event Handler Injection in User Settings", "target": "{\"Lab scenario\": \"XSS via Event Handler Injection in User Settings\", \"Lab Description\": \"The app displays user settings including a customizable profile badge with attributes like color and label. Input is reflected in HTML attributes without validation, allowing injection of `onmouseover`, `onclick`, etc.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss in history pushstate injection", "target": "{\"Lab scenario\": \"DOM XSS in History PushState Injection\", \"Lab Description\": \"The page uses `history.pushState` to change the visible URL and then updates part of the DOM using the value of `location.pathname`. An attacker can inject crafted content into the DOM by manipulating the path.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Error Message Parameter", "target": "{\"Lab scenario\": \"Reflected XSS via Error Message Parameter\", \"Lab Description\": \"The application reflects an error message from a query parameter directly into the page without sanitization. Attackers can inject JavaScript payloads through the `error` query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS via Location Hash Injection", "target": "{\"Lab scenario\": \"DOM XSS via Location Hash Injection\", \"Lab Description\": \"The app uses `location.hash` to dynamically insert content into the page using `innerHTML`. This allows attackers to trigger XSS by modifying the fragment identifier.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The search feature displays autocomplete suggestions fetched from the server and rendered using `innerHTML`. Malicious input from the query is reflected without sanitization.", "target": "{\"Lab scenario\": \"XSS in Search Autocomplete Suggestions\", \"Lab Description\": \"The search feature displays autocomplete suggestions fetched from the server and rendered using `innerHTML`. Malicious input from the query is reflected without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in user bio with unsafe render", "target": "{\"Lab scenario\": \"Stored XSS in User Bio with Unsafe Render\", \"Lab Description\": \"Users can set their bio on their profile. The server stores this content and later displays it without escaping or sanitizing, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via unsanitized image caption in gallery", "target": "{\"Lab scenario\": \"XSS via Unsanitized Image Caption in Gallery\", \"Lab Description\": \"Users upload images with optional captions. These captions are rendered directly into the gallery view using `innerHTML`. Attackers can upload a benign image with a malicious caption.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in email preview template", "target": "{\"Lab scenario\": \"Reflected XSS in Email Preview Template\", \"Lab Description\": \"The webmail client has a preview feature for incoming emails. It takes query parameters like subject and body to render a mock preview. However, user-supplied values are injected into the DOM without sanitization, leading to reflected XSS.\\nTo solve: Inject a script in the body parameter to trigger an alert when the preview is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An image gallery allows users to comment on pictures. These comments are stored and displayed under the images. The input is not sanitized, leading to persistent XSS on image pages.\nTo solve: Submit a comment with a script payload and revisit the image page to see the script execute.", "target": "{\"Lab scenario\": \"Stored XSS in Comment Section of Image Gallery\", \"Lab Description\": \"An image gallery allows users to comment on pictures. These comments are stored and displayed under the images. The input is not sanitized, leading to persistent XSS on image pages.\\nTo solve: Submit a comment with a script payload and revisit the image page to see the script execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in notification renderer", "target": "{\"Lab scenario\": \"DOM-based XSS in Notification Renderer\", \"Lab Description\": \"The application fetches notifications from localStorage and renders them inside an alert panel. The values are inserted into the DOM with innerHTML, making it vulnerable to DOM-based XSS.\\nTo solve: Inject a malicious payload via localStorage and reload the app to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in redirect url", "target": "{\"Lab scenario\": \"Reflected XSS in Redirect URL\", \"Lab Description\": \"The login page accepts a `redirect` parameter in the URL to know where to send users after login. However, the parameter is directly embedded in the page without sanitization, enabling reflected XSS.\\nTo solve: Craft a redirect value containing a script and observe it executing when the login page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Profile Bio Field", "target": "{\"Lab scenario\": \"Stored XSS in Profile Bio Field\", \"Lab Description\": \"The application lets users customize their profile bio. However, the bio is rendered using innerHTML on the profile page without sanitization. An attacker can inject a persistent XSS payload into their own bio.\\nTo solve: Update your profile with a script payload and view your profile page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via jsonp callback in analytics dashboard", "target": "{\"Lab scenario\": \"DOM XSS via JSONP Callback in Analytics Dashboard\", \"Lab Description\": \"A marketing dashboard loads analytics from a third-party endpoint using a JSONP callback. The callback name is passed via the URL and dynamically injected into a script tag using innerHTML. This leads to DOM-based XSS if a malicious callback name is passed.\\nTo solve: Inject a payload in the `callback` parameter to execute JavaScript when the page loads the script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A file upload endpoint returns a success message including the file name, which is reflected into the HTML without escaping. An attacker can upload a file with a crafted name containing script code to trigger XSS when users view the upload confirmation.\nTo solve: Upload a file with an XSS payload in the filename.", "target": "{\"Lab scenario\": \"XSS via File Name Injection in File Upload Success Page\", \"Lab Description\": \"A file upload endpoint returns a success message including the file name, which is reflected into the HTML without escaping. An attacker can upload a file with a crafted name containing script code to trigger XSS when users view the upload confirmation.\\nTo solve: Upload a file with an XSS payload in the filename.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via websocket chat broadcast", "target": "{\"Lab scenario\": \"XSS via WebSocket Chat Broadcast\", \"Lab Description\": \"A real-time chat system uses WebSocket to broadcast messages. The server relays all messages to connected clients without any sanitization, and the frontend renders them using `innerHTML`. This leads to reflected XSS through chat messages.\\nTo solve: Send a message containing a script payload through WebSocket and observe execution on other clients.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in pdf viewer via document title injection", "target": "{\"Lab scenario\": \"XSS in PDF Viewer via Document Title Injection\", \"Lab Description\": \"The app uses an embedded PDF viewer that shows the document title in the page header. The title is passed via URL query and injected into the DOM without escaping. XSS is triggered when users view a document with a malicious title.\\nTo solve: Craft a malicious URL with a script in the `title` parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in dynamic survey system", "target": "{\"Lab scenario\": \"Stored XSS in Dynamic Survey System\", \"Lab Description\": \"A feedback survey stores user responses, including free-text answers, and displays them to admins for review. The stored answers are rendered without sanitization, allowing stored XSS if a malicious user submits a script payload.\\nTo solve: Submit a survey response with a script, then view the results as an admin.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via svg image editor export feature", "target": "{\"Lab scenario\": \"XSS via SVG Image Editor Export Feature\", \"Lab Description\": \"The application includes a browser-based SVG image editor that allows users to export their work. The exported SVG is displayed directly using innerHTML without validation. An attacker can craft a malicious SVG file with embedded JavaScript to trigger XSS when previewed.\\nTo solve: Craft an SVG with an embedded script and upload it, then trigger the preview feature.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss via custom 404 page search reflection", "target": "{\"Lab scenario\": \"Reflected XSS via Custom 404 Page Search Reflection\", \"Lab Description\": \"A custom 404 error page reflects the missing URL into the response body for debugging purposes. The application fails to sanitize the reflected path, allowing attackers to inject scripts via the URL, leading to reflected XSS when users land on an invalid link.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application includes an email verification link with a `next` parameter that dictates where the user will be redirected after confirming their email. This value is also shown as a tooltip or confirmation. An attacker can inject HTML/JS into this parameter, resulting in XSS.", "target": "{\"Lab scenario\": \"XSS via Redirect URL in Email Verification\", \"Lab Description\": \"The application includes an email verification link with a `next` parameter that dictates where the user will be redirected after confirming their email. This value is also shown as a tooltip or confirmation. An attacker can inject HTML/JS into this parameter, resulting in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Misconfigured React dangerouslySetInnerHTML", "target": "{\"Lab scenario\": \"XSS via Misconfigured React dangerouslySetInnerHTML\", \"Lab Description\": \"A React-based application uses `dangerouslySetInnerHTML` to render dynamic content for FAQs. An admin can submit new FAQs through a CMS, but the rendered content is not sanitized. An attacker with access to the CMS submits a malicious FAQ that executes code for all frontend users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Webhook Tester via Reflected Webhook Event", "target": "{\"Lab scenario\": \"XSS in Webhook Tester via Reflected Webhook Event\", \"Lab Description\": \"A webhook testing tool reflects incoming event data on a dashboard for debugging. It renders event contents in real-time using innerHTML without escaping, allowing attackers to trigger XSS by sending malicious event payloads.\\nTo solve: Send a crafted webhook payload with HTML or script tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Drag-and-Drop HTML Builder", "target": "{\"Lab scenario\": \"XSS via Drag-and-Drop HTML Builder\", \"Lab Description\": \"The application includes a WYSIWYG HTML page builder that allows users to drag and drop elements (like images, buttons, text blocks) to create pages. The builder saves the generated HTML and renders it using innerHTML for previews. This allows attackers to inject malicious elements that execute scripts when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Real-time Chat Notification Tooltip", "target": "{\"Lab scenario\": \"XSS via Real-time Chat Notification Tooltip\", \"Lab Description\": \"A chat app notifies users of new messages via tooltips on message previews. The tooltips use message content and are rendered using innerHTML for formatting. An attacker can send a specially crafted message to another user that contains an XSS payload executed when the tooltip shows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via third-party comment embed with markup support", "target": "{\"Lab scenario\": \"XSS via Third-Party Comment Embed with Markup Support\", \"Lab Description\": \"A news site uses a third-party comment plugin that allows limited HTML tags for formatting. However, the sanitization process fails to properly strip event handlers in allowed tags. This can be exploited to inject XSS via seemingly allowed markup like `<b onmouseover>`.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: dom xss via dynamic profile tabs", "target": "{\"Lab scenario\": \"DOM XSS via Dynamic Profile Tabs\", \"Lab Description\": \"The user profile page uses client-side JavaScript to dynamically switch between tabs (Posts, Info, Settings). Tab names are passed via URL hash and directly injected into the DOM without validation. An attacker can craft a malicious URL that injects a script through the hash.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in language switcher via localized json injection", "target": "{\"Lab scenario\": \"XSS in Language Switcher via Localized JSON Injection\", \"Lab Description\": \"The web app supports multiple languages and loads localized JSON files dynamically based on a `lang` parameter in the URL. The chosen language file is parsed and rendered into the DOM without filtering. An attacker can inject malicious content by tampering with the language file or abusing the input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Markdown Rendering in Internal Wiki", "target": "{\"Lab scenario\": \"XSS via Markdown Rendering in Internal Wiki\", \"Lab Description\": \"An internal documentation tool allows employees to create wiki pages using Markdown. The Markdown parser supports raw HTML for flexibility, but no sanitization is applied before rendering. This allows attackers to inject raw HTML and JavaScript, leading to stored XSS across internal teams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Interactive Data Dashboard Filters", "target": "{\"Lab scenario\": \"XSS in Interactive Data Dashboard Filters\", \"Lab Description\": \"A financial dashboard allows users to create custom filters for viewing metrics. These filters are stored and reflected into a dynamic URL fragment and into the DOM for preview. Due to improper escaping, attackers can create malicious filters that result in DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Error Logging Endpoint", "target": "{\"Lab scenario\": \"Reflected XSS via Error Logging Endpoint\", \"Lab Description\": \"A developer debugging panel reflects error messages in real-time using query parameters. When a script fails, the message is passed via the URL and rendered without sanitization into the page. This can be exploited by injecting JavaScript into the `msg` parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in survey form builder preview", "target": "{\"Lab scenario\": \"XSS in Survey Form Builder Preview\", \"Lab Description\": \"A survey creation tool lets users preview their forms. The form fields are built dynamically from user inputs (question titles, button labels, etc.) and rendered using innerHTML. This exposes the system to XSS if a malicious input is added in the preview stage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Admin Report Export Viewer", "target": "{\"Lab scenario\": \"XSS via Admin Report Export Viewer\", \"Lab Description\": \"An internal admin panel allows exported report files (JSON) to be viewed in the browser. The system parses the JSON and injects the content directly into the page. Malicious entries inside the JSON can lead to XSS if not properly escaped before rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in email template preview with merge tags", "target": "{\"Lab scenario\": \"XSS in Email Template Preview with Merge Tags\", \"Lab Description\": \"A marketing automation platform allows users to build email templates using merge tags like {{user.name}}. When previewing an email, the system renders these values using innerHTML without escaping. If an attacker injects HTML or JavaScript in the name field, it leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Third-Party Widget Configuration Interface", "target": "{\"Lab scenario\": \"XSS via Third-Party Widget Configuration Interface\", \"Lab Description\": \"A SaaS dashboard allows users to embed third-party widgets by providing a custom name and HTML snippet. The snippet is injected into an iframe for rendering, but the widget name is rendered directly in the parent DOM. Improper sanitization of the name field causes a reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in ai chatbot response rendering", "target": "{\"Lab scenario\": \"XSS in AI Chatbot Response Rendering\", \"Lab Description\": \"An internal HR portal integrates an AI assistant that displays formatted chatbot responses. The backend sends responses as HTML to support formatting. Due to lack of sanitization, specially crafted user questions can poison the output with malicious script, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in resume parser tool for job portal", "target": "{\"Lab scenario\": \"XSS in Resume Parser Tool for Job Portal\", \"Lab Description\": \"An online recruitment portal parses resumes and shows key fields (name, title, skills) in a review panel. If a user uploads a resume with a malicious name or skill value, the data is rendered into the DOM via innerHTML during the recruiter review phase.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Event Tracking Dashboard Tooltip", "target": "{\"Lab scenario\": \"XSS via Event Tracking Dashboard Tooltip\", \"Lab Description\": \"An analytics tool shows live user activity on a map. Hovering over a session point displays user-agent and location in a tooltip. If user-agent is not sanitized, a malicious user can inject payloads via browser headers to trigger XSS in the map UI.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An internal feedback tool allows managers to print submitted feedback for offline review. When a feedback entry is selected, the system loads it into a print preview modal using innerHTML. Input from users is not sanitized, allowing stored XSS when feedback is rendered for printing.", "target": "{\"Lab scenario\": \"XSS in User Feedback Print Preview Panel\", \"Lab Description\": \"An internal feedback tool allows managers to print submitted feedback for offline review. When a feedback entry is selected, the system loads it into a print preview modal using innerHTML. Input from users is not sanitized, allowing stored XSS when feedback is rendered for printing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A project management system includes a Markdown editor with a live preview for issue descriptions. The server renders Markdown to HTML without sanitizing raw HTML inside the input, allowing script tags and event handlers to be injected through formatted issue reports.", "target": "{\"Lab scenario\": \"XSS in Issue Tracker Markdown Preview Panel\", \"Lab Description\": \"A project management system includes a Markdown editor with a live preview for issue descriptions. The server renders Markdown to HTML without sanitizing raw HTML inside the input, allowing script tags and event handlers to be injected through formatted issue reports.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Notification Message Renderer via API Hook", "target": "{\"Lab scenario\": \"XSS in Notification Message Renderer via API Hook\", \"Lab Description\": \"An internal platform allows third-party services to send messages to a notification widget using a POST API. These messages are shown in the UI using `.innerHTML`. An attacker exploiting an API integration can send malicious HTML that triggers XSS when a user views their notifications.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in E-Commerce Order Notes Renderer", "target": "{\"Lab scenario\": \"XSS in E-Commerce Order Notes Renderer\", \"Lab Description\": \"A back-office admin panel for an e-commerce store allows customers to add order notes. These notes are later displayed to the admin using innerHTML. An attacker can place a payload in the note during checkout that results in stored XSS when the admin views the order.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Chat System Mention Renderer", "target": "{\"Lab scenario\": \"XSS in Chat System Mention Renderer\", \"Lab Description\": \"A real-time chat system allows users to mention others using @username. Mentions are converted into profile links and displayed via innerHTML in the message thread. If a malicious user sets their username to a payload, it can result in stored XSS when others view the message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in real-time task board via websocket broadcast", "target": "{\"Lab scenario\": \"XSS in Real-Time Task Board via WebSocket Broadcast\", \"Lab Description\": \"A team collaboration tool uses WebSockets to broadcast real-time task updates. When a task is updated, the title is sent to all clients and rendered using innerHTML in the task board. No input validation is performed, allowing an attacker to send a task update with a script payload that executes on all clients.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in drag-and-drop file uploader preview", "target": "{\"Lab scenario\": \"XSS in Drag-and-Drop File Uploader Preview\", \"Lab Description\": \"A media management app previews filenames uploaded through a drag-and-drop interface. The filenames are directly rendered into the DOM via innerHTML without sanitization. A specially crafted filename with HTML/JS can trigger XSS during preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Email Template Editor with Dynamic Variables", "target": "{\"Lab scenario\": \"XSS via Email Template Editor with Dynamic Variables\", \"Lab Description\": \"An email marketing platform allows users to design templates and preview them with dynamic variables like {{user.name}}. A preview engine substitutes variables with user-provided data and renders the email content with innerHTML. If user data includes malicious HTML, XSS occurs in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Dynamic Tooltip Library with Data Attributes", "target": "{\"Lab scenario\": \"XSS in Dynamic Tooltip Library with Data Attributes\", \"Lab Description\": \"A dashboard uses a tooltip library that reads content from `data-tooltip` attributes and sets it using `.innerHTML` inside a floating div. An attacker can inject HTML content into the `data-tooltip` attribute via an input field, leading to XSS when the user hovers over the element.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via video player custom subtitle track", "target": "{\"Lab scenario\": \"XSS via Video Player Custom Subtitle Track\", \"Lab Description\": \"A video streaming platform allows users to upload custom subtitle files which are rendered as captions. When rendering the caption preview, the system uses innerHTML to inject the subtitle line directly into a DOM element. A malicious subtitle line can inject and execute arbitrary scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in ai chatbot summary feature", "target": "{\"Lab scenario\": \"XSS in AI Chatbot Summary Feature\", \"Lab Description\": \"A SaaS application integrates an AI chatbot that summarizes user conversations and stores them in a dashboard. The summary text is rendered using innerHTML for rich formatting. If a malicious input is added to the chat and reflected in the summary, it can trigger XSS in the dashboard view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An e-commerce admin panel allows staff to add internal notes to invoices. These notes are later rendered inside a modal popup using innerHTML when the invoice is viewed. A malicious staff user can inject an XSS payload via the note field, affecting any admin who views the invoice.", "target": "{\"Lab scenario\": \"XSS in E-commerce Invoice Note Field\", \"Lab Description\": \"An e-commerce admin panel allows staff to add internal notes to invoices. These notes are later rendered inside a modal popup using innerHTML when the invoice is viewed. A malicious staff user can inject an XSS payload via the note field, affecting any admin who views the invoice.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Project Management Mention System", "target": "{\"Lab scenario\": \"XSS in Project Management Mention System\", \"Lab Description\": \"A project management tool allows users to tag teammates using `@username` in comments. Mentions are converted to HTML spans with innerHTML for profile popups. An attacker can bypass mention sanitization by including HTML in their comment, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in lms code submission feedback section", "target": "{\"Lab scenario\": \"XSS in LMS Code Submission Feedback Section\", \"Lab Description\": \"A Learning Management System (LMS) lets students submit code assignments and receive feedback. Instructor comments are shown next to the code using innerHTML. If an instructor accidentally includes unsafe HTML or JavaScript in the feedback, XSS can be triggered when students view it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A collaborative documentation tool uses a Markdown editor and allows users to preview the rendered HTML. The Markdown engine fails to sanitize raw HTML tags, so a user can insert `<script>` tags directly. When another collaborator opens the preview, XSS is triggered.", "target": "{\"Lab scenario\": \"XSS in Collaborative Markdown Editor with Preview\", \"Lab Description\": \"A collaborative documentation tool uses a Markdown editor and allows users to preview the rendered HTML. The Markdown engine fails to sanitize raw HTML tags, so a user can insert `<script>` tags directly. When another collaborator opens the preview, XSS is triggered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Custom CRM Search Autocomplete", "target": "{\"Lab scenario\": \"XSS in Custom CRM Search Autocomplete\", \"Lab Description\": \"A custom-built CRM system includes a search bar with autocomplete suggestions for contacts. The suggestions are injected via JavaScript into the DOM without proper sanitization. An attacker can inject malicious scripts via a contactâ€™s name, which is then shown as part of the autocomplete dropdown.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in saas admin analytics embed tool", "target": "{\"Lab scenario\": \"XSS in SaaS Admin Analytics Embed Tool\", \"Lab Description\": \"A SaaS platform allows admins to embed custom analytics widgets using raw HTML snippets. These snippets are stored and injected into the dashboard. If an attacker saves a malicious script in the embed HTML, it will execute when the dashboard loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in mobile push notification preview", "target": "{\"Lab scenario\": \"XSS in Mobile Push Notification Preview\", \"Lab Description\": \"An admin interface for sending mobile push notifications displays a preview before sending. The message is rendered using innerHTML to simulate what users would see. If the admin inserts an HTML payload, it executes in the preview, causing an XSS vulnerability.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in email template test renderer", "target": "{\"Lab scenario\": \"XSS in Email Template Test Renderer\", \"Lab Description\": \"A web platform lets users build and preview email templates. When testing, the email content is rendered using innerHTML to simulate appearance. If malicious HTML is added to the content body, it results in XSS during the test render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Product Customizer Live Preview", "target": "{\"Lab scenario\": \"XSS in Product Customizer Live Preview\", \"Lab Description\": \"An online merchandise store includes a live preview feature for customizing t-shirts with text. The text input is rendered into the preview using innerHTML. Injecting HTML tags in the input results in XSS execution during live preview rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss in user feedback preview", "target": "{\"Lab scenario\": \"Reflected XSS in User Feedback Preview\", \"Lab Description\": \"The application allows users to preview their feedback before submission. The preview is rendered using innerHTML without sanitization, making it vulnerable to reflected XSS. The feedback text is taken from a query parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss via contact form rendering in admin panel", "target": "{\"Lab scenario\": \"Stored XSS via Contact Form Rendering in Admin Panel\", \"Lab Description\": \"The application stores contact form messages in a database. The admin panel renders these messages without encoding, resulting in stored XSS when a message contains malicious JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in Search Suggestion Autocomplete", "target": "{\"Lab scenario\": \"DOM-based XSS in Search Suggestion Autocomplete\", \"Lab Description\": \"The app provides live search suggestions using JavaScript and appends search terms directly to the DOM using innerHTML. If the search term is attacker-controlled, this introduces DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in blog comment section", "target": "{\"Lab scenario\": \"Stored XSS in Blog Comment Section\", \"Lab Description\": \"Users can leave comments on blog posts. Comments are stored and displayed using innerHTML without sanitization, allowing stored XSS if an attacker injects a malicious script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The app includes a debug mode that shows detailed error messages with user input echoed back on failure. The error is printed inside the HTML body using unsanitized user data, leading to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Error Message Display\", \"Lab Description\": \"The app includes a debug mode that shows detailed error messages with user input echoed back on failure. The error is printed inside the HTML body using unsanitized user data, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS via Profile Settings JSON Reflection", "target": "{\"Lab scenario\": \"DOM XSS via Profile Settings JSON Reflection\", \"Lab Description\": \"The app allows users to update their profile settings via a JSON-based endpoint. The server reflects user input into the page using a script block and JSON.parse without escaping. This allows XSS when crafted JSON is interpreted as script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Custom Status Messages", "target": "{\"Lab scenario\": \"Stored XSS in Custom Status Messages\", \"Lab Description\": \"Users can set a custom status message. The message is displayed in their profile and stored server-side. When other users visit the profile, the unsanitized message renders as HTML, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app shows a welcome notification popup if a `msg` parameter is passed in the URL. The message is injected into the DOM using innerHTML, allowing reflected XSS via the query string.", "target": "{\"Lab scenario\": \"Reflected XSS in Notification Popup via Query Parameter\", \"Lab Description\": \"The app shows a welcome notification popup if a `msg` parameter is passed in the URL. The message is injected into the DOM using innerHTML, allowing reflected XSS via the query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss via username in public posts", "target": "{\"Lab scenario\": \"Stored XSS via Username in Public Posts\", \"Lab Description\": \"Users can publish short posts under their usernames. The app displays the posts along with the username, but does not sanitize it, allowing stored XSS via username injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss via hash fragment injection", "target": "{\"Lab scenario\": \"DOM-based XSS via Hash Fragment Injection\", \"Lab Description\": \"The app reads the `location.hash` value and writes it directly into the DOM using innerHTML to simulate tab switching. An attacker can craft a malicious link with a script in the hash fragment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app includes an email reset form that returns an error message if the email is invalid. The error is reflected in the page without proper encoding, leading to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS via Error Message in Email Reset\", \"Lab Description\": \"The app includes an email reset form that returns an error message if the email is invalid. The error is reflected in the page without proper encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in event title on calendar app", "target": "{\"Lab scenario\": \"Stored XSS in Event Title on Calendar App\", \"Lab Description\": \"A calendar app allows users to add events with a title and description. The event title is displayed without sanitization, making the app vulnerable to stored XSS when a malicious title is entered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via search suggestion rendering", "target": "{\"Lab scenario\": \"DOM XSS via Search Suggestion Rendering\", \"Lab Description\": \"As users type into the search bar, the app fetches and renders suggestions directly from the server. Suggestions are injected using innerHTML, leading to DOM-based XSS when malicious entries are returned.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A forum application includes a search page that displays the search query as part of the results heading. The query is injected directly into the HTML without encoding, allowing reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Forum Search Results\", \"Lab Description\": \"A forum application includes a search page that displays the search query as part of the results heading. The query is injected directly into the HTML without encoding, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can leave feedback using a widget that displays the most recent comments on the homepage. The app fails to sanitize input before rendering, leading to persistent XSS.", "target": "{\"Lab scenario\": \"Stored XSS via Feedback Widget\", \"Lab Description\": \"Users can leave feedback using a widget that displays the most recent comments on the homepage. The app fails to sanitize input before rendering, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in Chat Mention Highlighting", "target": "{\"Lab scenario\": \"DOM XSS in Chat Mention Highlighting\", \"Lab Description\": \"A real-time chat application highlights mentions (e.g., @username) by wrapping them with a span. The replacement is done using innerHTML without escaping, which can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user badge label", "target": "{\"Lab scenario\": \"Stored XSS in User Badge Label\", \"Lab Description\": \"The platform lets users set a badge label that appears next to their name. The label is rendered without output encoding, which leads to stored XSS when a malicious label is saved.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app lets users send invite links with custom messages. The message is reflected in the invite preview without encoding, which leads to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS via Invite Link Preview\", \"Lab Description\": \"The app lets users send invite links with custom messages. The message is reflected in the invite preview without encoding, which leads to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss via public link description", "target": "{\"Lab scenario\": \"Stored XSS via Public Link Description\", \"Lab Description\": \"Users can share public links with descriptions. These are displayed in a shared gallery. The description field is vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in document viewer page name", "target": "{\"Lab scenario\": \"Reflected XSS in Document Viewer Page Name\", \"Lab Description\": \"A document viewer allows previewing documents with a custom page name set via a query parameter. The page name is used in a heading without sanitization, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via hash-based router in single page app", "target": "{\"Lab scenario\": \"DOM XSS via Hash-Based Router in Single Page App\", \"Lab Description\": \"The application uses a hash-based router to load views in a single-page application. The router reads `window.location.hash` and uses `innerHTML` to insert dynamic content, allowing for DOM-based XSS via crafted URL fragments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS via Product FAQ Answer Field", "target": "{\"Lab scenario\": \"Stored XSS via Product FAQ Answer Field\", \"Lab Description\": \"Users can submit FAQs for products. The answer field is stored and later rendered without escaping. This allows persistent XSS via the answer field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Order Confirmation Message", "target": "{\"Lab scenario\": \"Reflected XSS in Order Confirmation Message\", \"Lab Description\": \"After placing an order, the app displays a custom message using a `msg` query parameter. This parameter is reflected without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss via email signature setting", "target": "{\"Lab scenario\": \"Stored XSS via Email Signature Setting\", \"Lab Description\": \"Users can customize an email signature that appears on every message they send. The signature is rendered as HTML without sanitization, allowing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in JSONP Callback Parameter", "target": "{\"Lab scenario\": \"Reflected XSS in JSONP Callback Parameter\", \"Lab Description\": \"An endpoint supports JSONP responses using a `callback` parameter. The callback name is not validated or sanitized, allowing XSS if script tags are injected.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The web calendar allows users to add events with custom titles and descriptions. Titles are rendered on the main calendar interface without sanitization, enabling persistent XSS.", "target": "{\"Lab scenario\": \"Stored XSS in User-Generated Calendar Event Titles\", \"Lab Description\": \"The web calendar allows users to add events with custom titles and descriptions. Titles are rendered on the main calendar interface without sanitization, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Feedback Search Query", "target": "{\"Lab scenario\": \"Reflected XSS in Feedback Search Query\", \"Lab Description\": \"The feedback search feature reflects the user query directly into the results page title without proper escaping, allowing reflected XSS through the query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user-supplied video titles", "target": "{\"Lab scenario\": \"Stored XSS in User-Supplied Video Titles\", \"Lab Description\": \"The video sharing platform allows users to upload videos and provide a title. These titles are rendered in the homepage feed without escaping, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A dynamic viewer loads content based on the `window.location.hash` and directly injects it into the DOM. This leads to a DOM-based XSS vulnerability via the URL fragment.", "target": "{\"Lab scenario\": \"DOM XSS via URL Fragment Injection in Dynamic Viewer\", \"Lab Description\": \"A dynamic viewer loads content based on the `window.location.hash` and directly injects it into the DOM. This leads to a DOM-based XSS vulnerability via the URL fragment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in poll option text", "target": "{\"Lab scenario\": \"Stored XSS in Poll Option Text\", \"Lab Description\": \"Users can create polls and define custom options. Option text is rendered into a voting form without escaping, making the app vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in ticket support system - message preview", "target": "{\"Lab scenario\": \"XSS in Ticket Support System - Message Preview\", \"Lab Description\": \"A customer support portal displays a preview of a message before submitting a ticket. The message content is rendered in real-time on the preview panel without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in search page with dynamic breadcrumb", "target": "{\"Lab scenario\": \"Reflected XSS in Search Page with Dynamic Breadcrumb\", \"Lab Description\": \"The search feature updates the page breadcrumb dynamically based on the search query. The search term is reflected into an innerHTML context without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss via client-side parsed json data", "target": "{\"Lab scenario\": \"DOM XSS via Client-side Parsed JSON Data\", \"Lab Description\": \"A blog site loads post content from a JSON file and injects it into the DOM using `innerHTML`. Malicious script in the JSON data can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A forum app renders user comments using JavaScript template literals without escaping content, allowing injection of script tags.", "target": "{\"Lab scenario\": \"XSS in User Comments with Template Literals\", \"Lab Description\": \"A forum app renders user comments using JavaScript template literals without escaping content, allowing injection of script tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A blogging platform allows users to post content using Markdown. The Markdown is rendered client-side, but HTML tags inside the Markdown are not sanitized.", "target": "{\"Lab scenario\": \"Stored XSS in Markdown Blog Renderer\", \"Lab Description\": \"A blogging platform allows users to post content using Markdown. The Markdown is rendered client-side, but HTML tags inside the Markdown are not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Email Verification Error Message", "target": "{\"Lab scenario\": \"Reflected XSS in Email Verification Error Message\", \"Lab Description\": \"An email verification system reflects the email address directly into an error message when a malformed email is entered. The input is rendered unsanitized into an HTML element.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A shopping site allows users to leave reviews on products. Reviews are displayed on the product page without sanitizing HTML tags.", "target": "{\"Lab scenario\": \"Stored XSS in Product Reviews Section\", \"Lab Description\": \"A shopping site allows users to leave reviews on products. Reviews are displayed on the product page without sanitizing HTML tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss via url fragment injection", "target": "{\"Lab scenario\": \"DOM XSS via URL Fragment Injection\", \"Lab Description\": \"A single-page app reads the URL hash fragment and displays it in the interface without validation. This allows an attacker to inject JavaScript that executes in the DOM context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in admin-only notes panel (privilege escalation risk)", "target": "{\"Lab scenario\": \"XSS in Admin-only Notes Panel (Privilege Escalation Risk)\", \"Lab Description\": \"Admin panel loads user notes stored in a database and renders them into a dashboard using innerHTML. Users can insert stored notes which, if viewed by admin, execute XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Image Upload Preview using FileReader", "target": "{\"Lab scenario\": \"XSS in Image Upload Preview using FileReader\", \"Lab Description\": \"The application previews uploaded image filenames using FileReader and injects the name into the DOM without sanitization, allowing for payloads in fake image names.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via profile avatar upload preview", "target": "{\"Lab scenario\": \"XSS via Profile Avatar Upload Preview\", \"Lab Description\": \"The web application allows users to upload profile pictures. It provides an immediate preview by rendering the uploaded image file name into an `img` tag using client-side JavaScript. However, no sanitization is applied to the file name, leading to potential script injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in search auto-completion suggestions", "target": "{\"Lab scenario\": \"XSS in Search Auto-Completion Suggestions\", \"Lab Description\": \"The application returns dynamic auto-suggestions for search input. The response is built using unsanitized input directly rendered into a dropdown list without escaping, allowing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application reflects submitted data in a confirmation page after the user fills out the contact form. The input is echoed back without encoding, leading to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Contact Us Confirmation\", \"Lab Description\": \"The application reflects submitted data in a confirmation page after the user fills out the contact form. The input is echoed back without encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in e-commerce coupon feedback", "target": "{\"Lab scenario\": \"XSS in E-Commerce Coupon Feedback\", \"Lab Description\": \"An e-commerce site allows users to submit coupon feedback. The feedback is stored and displayed on a page using innerHTML without sanitization, introducing a DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Newsletter Subscription Confirmation Page", "target": "{\"Lab scenario\": \"XSS in Newsletter Subscription Confirmation Page\", \"Lab Description\": \"After signing up for a newsletter, the application reflects the submitted email on a confirmation page using innerHTML. No sanitization is applied.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via redirect message in oauth flow", "target": "{\"Lab scenario\": \"XSS via Redirect Message in OAuth Flow\", \"Lab Description\": \"An application uses a message passed in the redirect URL during OAuth flow to display feedback. The message is inserted into the DOM without sanitization, leading to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can submit images with custom captions. The captions are rendered under the image using innerHTML without sanitization, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"XSS in Image Gallery Caption\", \"Lab Description\": \"Users can submit images with custom captions. The captions are rendered under the image using innerHTML without sanitization, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admin panel shows alert messages based on URL parameters. This is inserted directly into the page using innerHTML.", "target": "{\"Lab scenario\": \"XSS via Admin Panel Alert Message\", \"Lab Description\": \"Admin panel shows alert messages based on URL parameters. This is inserted directly into the page using innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Blog allows filtering posts by tag using a `tag` URL parameter. The tag name is echoed on the page title and body unsanitized.", "target": "{\"Lab scenario\": \"XSS in Tag-Based Blog Filtering\", \"Lab Description\": \"Blog allows filtering posts by tag using a `tag` URL parameter. The tag name is echoed on the page title and body unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in live chat widget", "target": "{\"Lab scenario\": \"XSS in Live Chat Widget\", \"Lab Description\": \"The live chat widget reflects user input messages using innerHTML without sanitization. This leads to real-time DOM-based XSS for other users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in newsletter archive viewer", "target": "{\"Lab scenario\": \"XSS in Newsletter Archive Viewer\", \"Lab Description\": \"The application archives past newsletters and displays them via an ID in the URL. The raw HTML content of the newsletter is rendered without sanitization, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: After placing an order, the application reflects the user's full name in the confirmation message via a GET parameter. This reflection happens directly in the HTML response without escaping.", "target": "{\"Lab scenario\": \"Reflected XSS via Order Confirmation Message\", \"Lab Description\": \"After placing an order, the application reflects the user's full name in the confirmation message via a GET parameter. This reflection happens directly in the HTML response without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Dynamic FAQ Generator", "target": "{\"Lab scenario\": \"XSS in Dynamic FAQ Generator\", \"Lab Description\": \"The FAQ page allows admins to update questions and answers dynamically. These entries are stored and rendered as HTML blocks without escaping user input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in job application portal", "target": "{\"Lab scenario\": \"Stored XSS in Job Application Portal\", \"Lab Description\": \"Applicants can submit resumes along with a cover letter. The letter is stored and displayed to HR staff using unsafe innerHTML rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application allows users to preview markdown content. However, certain HTML is not stripped properly, enabling attackers to inject malicious scripts.", "target": "{\"Lab scenario\": \"XSS in Markdown Previewer\", \"Lab Description\": \"The application allows users to preview markdown content. However, certain HTML is not stripped properly, enabling attackers to inject malicious scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A SaaS accounting platform allows users to add internal comments on invoices. These comments are rendered using raw HTML without sanitization when the invoice is viewed by managers.", "target": "{\"Lab scenario\": \"XSS in Invoice Comments Section\", \"Lab Description\": \"A SaaS accounting platform allows users to add internal comments on invoices. These comments are rendered using raw HTML without sanitization when the invoice is viewed by managers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Chat Message Formatting", "target": "{\"Lab scenario\": \"XSS in Chat Message Formatting\", \"Lab Description\": \"A real-time support chat allows users to format their messages using pseudo-HTML tags. These tags are not properly parsed or sanitized before rendering, leading to script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in project collaboration comments", "target": "{\"Lab scenario\": \"Stored XSS in Project Collaboration Comments\", \"Lab Description\": \"Team members can leave comments on shared tasks within a collaboration platform. These comments are stored in plain text but rendered as HTML without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application displays summary results of a public survey. One of the questions allows free text input and is rendered in the admin dashboard without escaping.", "target": "{\"Lab scenario\": \"XSS in Survey Answer Summary\", \"Lab Description\": \"The application displays summary results of a public survey. One of the questions allows free text input and is rendered in the admin dashboard without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in payment status checker", "target": "{\"Lab scenario\": \"Reflected XSS in Payment Status Checker\", \"Lab Description\": \"The application shows payment status based on user input via a GET parameter. The input is reflected into the page directly, introducing a reflected XSS vulnerability.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Product Feedback Widget", "target": "{\"Lab scenario\": \"Stored XSS in Product Feedback Widget\", \"Lab Description\": \"An e-commerce site includes a feedback widget where users can share thoughts about products. These inputs are stored and displayed in the admin review page without proper sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in document preview tool", "target": "{\"Lab scenario\": \"Reflected XSS in Document Preview Tool\", \"Lab Description\": \"An internal document preview tool reflects filename input from a query parameter without escaping. Malicious users can inject scripts through this input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A calendar app allows users to create public events with descriptions. The description field is rendered as raw HTML when attendees view the event details.", "target": "{\"Lab scenario\": \"Stored XSS in Event Description Field\", \"Lab Description\": \"A calendar app allows users to create public events with descriptions. The description field is rendered as raw HTML when attendees view the event details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Job Application Message", "target": "{\"Lab scenario\": \"Stored XSS in Job Application Message\", \"Lab Description\": \"A job portal allows applicants to write a personal message to recruiters. These messages are displayed directly in the recruiter's dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in report generator title", "target": "{\"Lab scenario\": \"Reflected XSS in Report Generator Title\", \"Lab Description\": \"A business intelligence tool takes a title input via URL to label generated reports. This input is reflected on the report view page without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: An internal support tool allows users to send messages to support agents. Messages are stored and rendered directly in the agent's inbox dashboard, exposing them to stored XSS.", "target": "{\"Lab scenario\": \"Stored XSS in Internal Support Chat System\", \"Lab Description\": \"An internal support tool allows users to send messages to support agents. Messages are stored and rendered directly in the agent's inbox dashboard, exposing them to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A billing portal reflects user-provided invoice notes in the invoice preview URL without escaping input. Attackers can trick users into opening a crafted preview link.", "target": "{\"Lab scenario\": \"Reflected XSS in Customer Invoice Preview\", \"Lab Description\": \"A billing portal reflects user-provided invoice notes in the invoice preview URL without escaping input. Attackers can trick users into opening a crafted preview link.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in course review submissions", "target": "{\"Lab scenario\": \"Stored XSS in Course Review Submissions\", \"Lab Description\": \"An online learning platform lets students write course reviews. Reviews are shown to instructors and future students without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The contact form includes the user's submitted name and subject in error messages when validation fails. These inputs are reflected without sanitization.", "target": "{\"Lab scenario\": \"Reflected XSS in Contact Form Error Display\", \"Lab Description\": \"The contact form includes the user's submitted name and subject in error messages when validation fails. These inputs are reflected without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in custom profile badge generator", "target": "{\"Lab scenario\": \"Stored XSS in Custom Profile Badge Generator\", \"Lab Description\": \"A developer forum allows users to design profile badges using HTML snippets. These snippets are rendered as-is in member profiles, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in project description field", "target": "{\"Lab scenario\": \"Stored XSS in Project Description Field\", \"Lab Description\": \"A project management tool allows users to update project descriptions. The input is rendered in the project dashboard without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss in job search portal", "target": "{\"Lab scenario\": \"Reflected XSS in Job Search Portal\", \"Lab Description\": \"A job board reflects user-provided keywords in the search results page title without encoding. This creates a vector for reflected XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in e-commerce order notes", "target": "{\"Lab scenario\": \"Stored XSS in E-commerce Order Notes\", \"Lab Description\": \"An e-commerce platform allows customers to leave optional notes on orders. These notes are shown to admins in the order panel without any sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A survey tool displays answers in the result page directly using query parameters. Inputs are not escaped properly, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Survey Result Page\", \"Lab Description\": \"A survey tool displays answers in the result page directly using query parameters. Inputs are not escaped properly, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in File Sharing App File Titles", "target": "{\"Lab scenario\": \"Stored XSS in File Sharing App File Titles\", \"Lab Description\": \"A file sharing service allows users to upload files and set custom titles. The titles are rendered in other usersâ€™ dashboards without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An event platform allows users to create events and specify the location. The location is displayed on the public event page without sanitization, making it vulnerable to stored XSS.", "target": "{\"Lab scenario\": \"Stored XSS in Event Management App Location Field\", \"Lab Description\": \"An event platform allows users to create events and specify the location. The location is displayed on the public event page without sanitization, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An admin portal allows previewing an invitation email before sending. The name field is directly injected into the email preview without proper encoding.", "target": "{\"Lab scenario\": \"Reflected XSS in User Invitation Email Preview\", \"Lab Description\": \"An admin portal allows previewing an invitation email before sending. The name field is directly injected into the email preview without proper encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in video platform commenting system", "target": "{\"Lab scenario\": \"Stored XSS in Video Platform Commenting System\", \"Lab Description\": \"A video-sharing platform allows users to comment under videos. Comments are rendered using innerHTML without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A support dashboard reads the ticket title from the URL hash and injects it using innerHTML into the page header without validation.", "target": "{\"Lab scenario\": \"DOM-based XSS in Support Ticket Viewer\", \"Lab Description\": \"A support dashboard reads the ticket title from the URL hash and injects it using innerHTML into the page header without validation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in portfolio site testimonial submission", "target": "{\"Lab scenario\": \"Stored XSS in Portfolio Site Testimonial Submission\", \"Lab Description\": \"A personal portfolio website allows visitors to submit testimonials. Submissions are stored and displayed in the testimonials section without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An e-commerce site reflects the coupon code directly into the cart confirmation page. The input is inserted into the DOM without escaping, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Shopping Cart Coupon Code Input\", \"Lab Description\": \"An e-commerce site reflects the coupon code directly into the cart confirmation page. The input is inserted into the DOM without escaping, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A learning platform lets students leave reviews on courses. Reviews are rendered using raw HTML, and no sanitization is applied to the input.", "target": "{\"Lab scenario\": \"Stored XSS in Online Course Review\", \"Lab Description\": \"A learning platform lets students leave reviews on courses. Reviews are rendered using raw HTML, and no sanitization is applied to the input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A blog viewer script displays additional notes from the URL fragment. The content is inserted using innerHTML, making it exploitable for DOM-based XSS.", "target": "{\"Lab scenario\": \"DOM-based XSS in Blog Article Viewer via Location Fragment\", \"Lab Description\": \"A blog viewer script displays additional notes from the URL fragment. The content is inserted using innerHTML, making it exploitable for DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in team collaboration chat", "target": "{\"Lab scenario\": \"Stored XSS in Team Collaboration Chat\", \"Lab Description\": \"A collaboration tool allows users to send chat messages in a team workspace. Messages are rendered using innerHTML without sanitization, making the system vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Travel Booking Confirmation Page", "target": "{\"Lab scenario\": \"Reflected XSS in Travel Booking Confirmation Page\", \"Lab Description\": \"A travel site reflects user names from query parameters on the booking confirmation page. The name is displayed in raw HTML, enabling XSS if not properly encoded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss in password reset token display", "target": "{\"Lab scenario\": \"Reflected XSS in Password Reset Token Display\", \"Lab Description\": \"A password reset tool echoes the token from the URL onto the page for debugging. The token is inserted into the DOM using innerHTML, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in e-Learning Quiz Feedback", "target": "{\"Lab scenario\": \"Stored XSS in e-Learning Quiz Feedback\", \"Lab Description\": \"An online quiz system lets users leave feedback on questions. Feedback is rendered without escaping input, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Survey System Result Page", "target": "{\"Lab scenario\": \"Reflected XSS in Survey System Result Page\", \"Lab Description\": \"A survey result page reflects survey answers from the URL query. The answer is written to the DOM directly using innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in issue tracker comment section", "target": "{\"Lab scenario\": \"Stored XSS in Issue Tracker Comment Section\", \"Lab Description\": \"An internal issue tracker allows engineers to leave comments. The comments are rendered using raw HTML, enabling XSS via stored payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom-based xss in url-based search filter", "target": "{\"Lab scenario\": \"DOM-based XSS in URL-Based Search Filter\", \"Lab Description\": \"A product listing page updates the search term from the URL hash and injects it into the DOM using innerHTML without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in blog comment reply system", "target": "{\"Lab scenario\": \"Stored XSS in Blog Comment Reply System\", \"Lab Description\": \"A blogging platform allows users to reply to comments. Replies are displayed without escaping user input, leading to stored XSS when viewing blog posts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in newsletter preview", "target": "{\"Lab scenario\": \"Reflected XSS in Newsletter Preview\", \"Lab Description\": \"The admin panel of a newsletter system previews email content by reflecting a `preview` parameter in the response. The content is injected directly into a content block using innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in job portal search", "target": "{\"Lab scenario\": \"DOM-based XSS in Job Portal Search\", \"Lab Description\": \"A job search page updates a results heading based on a keyword from the URL fragment. It inserts the value into the DOM via innerHTML, making it vulnerable to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in event management comments", "target": "{\"Lab scenario\": \"Stored XSS in Event Management Comments\", \"Lab Description\": \"An event platform allows users to comment on event pages. Comments are stored and rendered without escaping, leading to persistent XSS when others view the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A web-based calculator reflects the input expression in the output panel using innerHTML without sanitization. This allows reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Online Calculator Input Echo\", \"Lab Description\": \"A web-based calculator reflects the input expression in the output panel using innerHTML without sanitization. This allows reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in online ticket booking summary", "target": "{\"Lab scenario\": \"Reflected XSS in Online Ticket Booking Summary\", \"Lab Description\": \"A travel site reflects ticket details from the query string into the booking summary using innerHTML without sanitization, exposing a reflected XSS vector.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in team collaboration notes", "target": "{\"Lab scenario\": \"Stored XSS in Team Collaboration Notes\", \"Lab Description\": \"A collaboration app lets team members add notes to shared boards. Notes are stored and rendered using raw HTML without escaping, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in forum topic preview", "target": "{\"Lab scenario\": \"DOM-based XSS in Forum Topic Preview\", \"Lab Description\": \"A forum allows previewing a topic by parsing the `#preview` hash and inserting it via innerHTML. JavaScript in the hash executes due to no sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A discount preview feature reflects the coupon code from the query string into a message without sanitization. JavaScript payloads in the parameter result in XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in E-commerce Discount Preview\", \"Lab Description\": \"A discount preview feature reflects the coupon code from the query string into a message without sanitization. JavaScript payloads in the parameter result in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in custom badge generator", "target": "{\"Lab scenario\": \"Stored XSS in Custom Badge Generator\", \"Lab Description\": \"Users can create custom badges with titles. These titles are stored and rendered across the platform using innerHTML, allowing XSS if script tags are submitted.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An e-commerce site integrates a third-party payment gateway that redirects users back to a user-specified return URL after payment. The application reflects the `returnUrl` parameter on the payment status page without proper encoding, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"XSS in Payment Gateway Redirect URL\", \"Lab Description\": \"An e-commerce site integrates a third-party payment gateway that redirects users back to a user-specified return URL after payment. The application reflects the `returnUrl` parameter on the payment status page without proper encoding, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A blog platform dynamically creates modal dialogs using data from query parameters for showing user-submitted alerts. The `message` parameter is inserted directly into the modal content without sanitization, allowing XSS.", "target": "{\"Lab scenario\": \"XSS in Dynamic Modal Dialog\", \"Lab Description\": \"A blog platform dynamically creates modal dialogs using data from query parameters for showing user-submitted alerts. The `message` parameter is inserted directly into the modal content without sanitization, allowing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application retrieves notifications from user profiles and inserts them directly into DOM via innerHTML to display popups. The notification content is not sanitized server-side, leading to a stored XSS vulnerability.", "target": "{\"Lab scenario\": \"XSS in Notification Popups\", \"Lab Description\": \"The application retrieves notifications from user profiles and inserts them directly into DOM via innerHTML to display popups. The notification content is not sanitized server-side, leading to a stored XSS vulnerability.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Survey Preview Feature", "target": "{\"Lab scenario\": \"XSS in Survey Preview Feature\", \"Lab Description\": \"The survey builder feature allows users to preview their questions before submission. The preview uses unescaped question text provided in a query string parameter, which is directly embedded in the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Document Title in Analytics Dashboard", "target": "{\"Lab scenario\": \"XSS via Document Title in Analytics Dashboard\", \"Lab Description\": \"An analytics dashboard generates a custom report title from user input and reflects it in the document title. The title is inserted using template literals in a script block, allowing DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An internal tool allows team members to preview email invitations before sending. The email message is reflected directly from the `message` query parameter into the email body preview page without encoding.", "target": "{\"Lab scenario\": \"Reflected XSS in Email Invitation Preview\", \"Lab Description\": \"An internal tool allows team members to preview email invitations before sending. The email message is reflected directly from the `message` query parameter into the email body preview page without encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Job Application Confirmation Page", "target": "{\"Lab scenario\": \"XSS in Job Application Confirmation Page\", \"Lab Description\": \"After submitting a job application, users are redirected to a confirmation page that shows their submitted name. The name is reflected into the DOM without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A discussion forum allows users to set custom signatures. These signatures are displayed under every post without being sanitized, making it a vector for stored XSS.", "target": "{\"Lab scenario\": \"Stored XSS in Forum Signature\", \"Lab Description\": \"A discussion forum allows users to set custom signatures. These signatures are displayed under every post without being sanitized, making it a vector for stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss via fragment identifier injection", "target": "{\"Lab scenario\": \"DOM XSS via Fragment Identifier Injection\", \"Lab Description\": \"A client-side script reads the URL fragment (`window.location.hash`) and writes it directly to the DOM to display a section title. No sanitization is performed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Help Center Feedback Box", "target": "{\"Lab scenario\": \"XSS in Help Center Feedback Box\", \"Lab Description\": \"A help center page allows users to submit feedback. Submitted messages are displayed to admins without proper encoding, allowing a stored XSS attack via the feedback box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Bug Tracker Ticket Title", "target": "{\"Lab scenario\": \"XSS in Bug Tracker Ticket Title\", \"Lab Description\": \"A bug tracking system displays ticket titles in the admin dashboard without sanitizing user input. Attackers can exploit this by creating a ticket with an XSS payload as the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in file sharing platform filename", "target": "{\"Lab scenario\": \"XSS in File Sharing Platform Filename\", \"Lab Description\": \"A file sharing platform shows uploaded filenames in a list. Filenames containing scripts are rendered directly into the page without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in blog comment timestamp field", "target": "{\"Lab scenario\": \"XSS in Blog Comment Timestamp Field\", \"Lab Description\": \"A blogging platform allows users to specify the time of their comment. The timestamp is rendered directly into the HTML without encoding, which allows for a reflected XSS attack.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss in search filter category", "target": "{\"Lab scenario\": \"DOM XSS in Search Filter Category\", \"Lab Description\": \"An e-commerce site uses JavaScript to display the selected category from the URL hash (e.g., `#category=shoes`). The value is injected directly into the DOM without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A newsletter subscription endpoint reflects the user's email in the response message. This reflection is done insecurely, allowing attackers to inject scripts via the email field.", "target": "{\"Lab scenario\": \"XSS in Newsletter Subscription Response\", \"Lab Description\": \"A newsletter subscription endpoint reflects the user's email in the response message. This reflection is done insecurely, allowing attackers to inject scripts via the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in help desk ticket notes", "target": "{\"Lab scenario\": \"XSS in Help Desk Ticket Notes\", \"Lab Description\": \"A help desk application allows support agents to add notes to user tickets. These notes are rendered in the admin panel without sanitization, leading to stored XSS when a malicious note is added.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Job Application Search", "target": "{\"Lab scenario\": \"Reflected XSS in Job Application Search\", \"Lab Description\": \"A job portal allows searching applicants using a keyword in the query string. The search term is reflected back into the page without proper escaping, making it vulnerable to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A community platform lets organizers create events and input the event location. The location is displayed on the event page without sanitization, leading to stored XSS.", "target": "{\"Lab scenario\": \"XSS in Community Event Organizer Location Input\", \"Lab Description\": \"A community platform lets organizers create events and input the event location. The location is displayed on the event page without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Banking admins can view past support chat transcripts. If a malicious user injects a script into a chat message, it is displayed in the admin panel without sanitization.", "target": "{\"Lab scenario\": \"XSS in Banking Support Chat Transcript Viewer\", \"Lab Description\": \"Banking admins can view past support chat transcripts. If a malicious user injects a script into a chat message, it is displayed in the admin panel without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in real estate listing description", "target": "{\"Lab scenario\": \"XSS in Real Estate Listing Description\", \"Lab Description\": \"A real estate portal allows sellers to add property listings with descriptions. Malicious users can inject scripts into the description, which are executed when viewed by others.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss in social media hashtag search", "target": "{\"Lab scenario\": \"XSS in Social Media Hashtag Search\", \"Lab Description\": \"A social media platform allows users to search for hashtags. The searched term is directly reflected in the page content without sanitization, making it vulnerable to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in product inventory notes", "target": "{\"Lab scenario\": \"Stored XSS in Product Inventory Notes\", \"Lab Description\": \"Warehouse staff can leave notes on products. These notes are shown on the inventory dashboard, which renders unsanitized HTML, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in developer forum signature", "target": "{\"Lab scenario\": \"XSS in Developer Forum Signature\", \"Lab Description\": \"Developers can add signatures to their forum profile. These signatures are shown in each post and are rendered as HTML without sanitization, introducing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in real-time auction comments", "target": "{\"Lab scenario\": \"Stored XSS in Real-Time Auction Comments\", \"Lab Description\": \"Users can comment on live auction items. These comments are stored and displayed on the bidding page without any sanitization, allowing persistent XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Academic Portal Feedback Form", "target": "{\"Lab scenario\": \"XSS in Academic Portal Feedback Form\", \"Lab Description\": \"A university feedback form allows students to submit anonymous reviews. These reviews are shown to lecturers in their dashboard without proper escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application shows a list of recently viewed items using local storage values. These values are injected directly into the DOM on page load without proper sanitization, allowing DOM-based XSS.", "target": "{\"Lab scenario\": \"XSS in Recently Viewed Items Feature\", \"Lab Description\": \"The application shows a list of recently viewed items using local storage values. These values are injected directly into the DOM on page load without proper sanitization, allowing DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: User bios are displayed as tooltips when hovering over usernames. The bios are rendered using the title attribute directly from unescaped user input, enabling stored XSS via malicious bios.", "target": "{\"Lab scenario\": \"XSS in User Bio Tooltip Feature\", \"Lab Description\": \"User bios are displayed as tooltips when hovering over usernames. The bios are rendered using the title attribute directly from unescaped user input, enabling stored XSS via malicious bios.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in email subscription confirmation", "target": "{\"Lab scenario\": \"Reflected XSS in Email Subscription Confirmation\", \"Lab Description\": \"When users subscribe to the newsletter, the system reflects their email in the confirmation message without encoding it properly, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in Profile Settings Preview", "target": "{\"Lab scenario\": \"DOM XSS in Profile Settings Preview\", \"Lab Description\": \"The application allows users to preview changes to their profile, including custom signatures. The signature is rendered inside innerHTML without sanitization, leading to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in announcement banner from admin panel", "target": "{\"Lab scenario\": \"XSS in Announcement Banner from Admin Panel\", \"Lab Description\": \"The admin panel allows adding an announcement banner. Content entered is saved and injected directly into the homepage without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where online course platform stored xss in assignment feedback", "target": "{\"Lab scenario\": \"Online Course Platform Stored XSS in Assignment Feedback\", \"Lab Description\": \"The application allows instructors to leave feedback on student assignments. This feedback is rendered inside an HTML template without sanitization. The feedback field directly renders stored content, leading to stored XSS. To solve: Craft and submit a feedback entry that triggers JavaScript execution when a student views the assignment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in custom tooltip renderer of crm application", "target": "{\"Lab scenario\": \"XSS in Custom Tooltip Renderer of CRM Application\", \"Lab Description\": \"The CRM system renders tooltips with dynamic content from query parameters. The tooltip content is directly injected into a JavaScript handler that updates innerHTML, introducing a DOM-based XSS vector. To solve: Inject a payload into the tooltip parameter that leads to JavaScript execution when hovering over a contact name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in project management chat mention renderer", "target": "{\"Lab scenario\": \"XSS in Project Management Chat Mention Renderer\", \"Lab Description\": \"A project management tool parses mentions (e.g. @username) from chat messages and renders them as HTML. The parser fails to sanitize HTML tags embedded in usernames, enabling XSS through crafted mentions. To solve: Inject a mention that breaks out of the renderer logic and executes JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The e-commerce product page includes a Q&A section where users can submit questions. The submitted content is rendered in HTML without encoding. This allows attackers to submit script payloads which are then displayed to future users. To solve: Inject an XSS payload in a new question and trigger it by revisiting the product page.", "target": "{\"Lab scenario\": \"Stored XSS in Product Q&A Module of E-Commerce Platform\", \"Lab Description\": \"The e-commerce product page includes a Q&A section where users can submit questions. The submitted content is rendered in HTML without encoding. This allows attackers to submit script payloads which are then displayed to future users. To solve: Inject an XSS payload in a new question and trigger it by revisiting the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The image gallery application generates preview content using a hash value in the URL. The hash is parsed and injected into the DOM using innerHTML without validation. To solve: Manipulate the hash value in the URL to inject an XSS payload that executes JavaScript in the context of the gallery.", "target": "{\"Lab scenario\": \"DOM XSS in Image Gallery Preview Generator\", \"Lab Description\": \"The image gallery application generates preview content using a hash value in the URL. The hash is parsed and injected into the DOM using innerHTML without validation. To solve: Manipulate the hash value in the URL to inject an XSS payload that executes JavaScript in the context of the gallery.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: profile update xss via avatar url in gaming community", "target": "{\"Lab scenario\": \"Profile Update XSS via Avatar URL in Gaming Community\", \"Lab Description\": \"The application allows users to update their profile including avatar image URL. The backend does not validate the URL format and embeds it directly into an <img> tag, enabling XSS via crafted image URLs. To solve: Inject a malicious image source that executes JavaScript when rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A support chat widget stores and reflects recent messages without sanitization. HTML tags are allowed to style messages but scripts are not filtered effectively. To solve: Inject a hidden script that triggers when a staff member views chat history.", "target": "{\"Lab scenario\": \"XSS in Support Chat via Hidden HTML Injection\", \"Lab Description\": \"A support chat widget stores and reflects recent messages without sanitization. HTML tags are allowed to style messages but scripts are not filtered effectively. To solve: Inject a hidden script that triggers when a staff member views chat history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in tag suggestions feature via json injection", "target": "{\"Lab scenario\": \"XSS in Tag Suggestions Feature via JSON Injection\", \"Lab Description\": \"The blog platform provides real-time tag suggestions. A user's custom tag input is embedded in a JavaScript array without escaping, causing JSON context injection. To solve: Inject a payload that breaks out of the array and executes JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: embedded poll widget xss in news portal", "target": "{\"Lab scenario\": \"Embedded Poll Widget XSS in News Portal\", \"Lab Description\": \"The news website embeds a poll widget that reflects the poll question in HTML. The question text comes from a GET parameter, which is inserted without sanitization. To solve: Inject an HTML-breaking payload that leads to script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where markdown preview xss via link rendering", "target": "{\"Lab scenario\": \"Markdown Preview XSS via Link Rendering\", \"Lab Description\": \"A markdown editor allows users to preview their formatted content. Links are rendered as HTML <a> tags without validating the href, enabling JavaScript URIs to be injected. To solve: Inject a markdown link with JavaScript URI and trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A community forum allows users to post comments under articles. The submitted comment content is rendered on the page without proper HTML sanitization. To solve: Inject a script in the comment field and confirm it runs when viewed.", "target": "{\"Lab scenario\": \"User Comment System XSS via Unfiltered Input in Forum Post\", \"Lab Description\": \"A community forum allows users to post comments under articles. The submitted comment content is rendered on the page without proper HTML sanitization. To solve: Inject a script in the comment field and confirm it runs when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Search Result Page XSS via Reflected Query Parameter", "target": "{\"Lab scenario\": \"Search Result Page XSS via Reflected Query Parameter\", \"Lab Description\": \"The search functionality on the travel website displays the query term directly on the results page without encoding. This allows attackers to inject JavaScript through the search parameter. To solve: Inject a script in the query parameter and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in custom greeting card preview via template injection", "target": "{\"Lab scenario\": \"XSS in Custom Greeting Card Preview via Template Injection\", \"Lab Description\": \"An online greeting card maker allows users to preview a card with a custom message. The message is inserted into the HTML using template literals without escaping, allowing DOM-based XSS. To solve: Inject a payload into the message to break out of the template and execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in helpdesk ticket viewer via subject reflection", "target": "{\"Lab scenario\": \"XSS in Helpdesk Ticket Viewer via Subject Reflection\", \"Lab Description\": \"The helpdesk interface displays the subject of a ticket by reflecting a query parameter directly in HTML. No encoding or escaping is applied. To solve: Inject a script into the subject and trigger XSS on the ticket view page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in notification dropdown via stored alert text", "target": "{\"Lab scenario\": \"XSS in Notification Dropdown via Stored Alert Text\", \"Lab Description\": \"The web app stores notification alerts entered by users, such as system warnings or admin announcements. When rendering, the alert text is inserted into a dropdown using innerHTML, allowing stored XSS. To solve: Inject a malicious string into the alert and trigger it when the dropdown is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via image caption injection in photography portfolio", "target": "{\"Lab scenario\": \"XSS via Image Caption Injection in Photography Portfolio\", \"Lab Description\": \"A photography site allows photographers to submit captions for their images. These captions are rendered in the gallery without HTML escaping. This allows an attacker to inject HTML or scripts into the gallery view. To solve: Inject a payload as a caption and verify it executes in the gallery.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in FAQ Accordion via Question Parameter", "target": "{\"Lab scenario\": \"XSS in FAQ Accordion via Question Parameter\", \"Lab Description\": \"An FAQ section loads question data dynamically based on a query parameter and reflects it inside expandable accordion elements. The input is not sanitized before being injected into the HTML, enabling DOM-based XSS. To solve: Inject a script via the question parameter and trigger it when the accordion renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Feedback Summary on Admin Dashboard", "target": "{\"Lab scenario\": \"XSS via Feedback Summary on Admin Dashboard\", \"Lab Description\": \"A user feedback form collects input and stores it in a database. The admin dashboard displays recent feedback using innerHTML without encoding. Attackers can submit malicious input that is rendered when the admin views the dashboard. To solve: Submit a payload as feedback and trigger stored XSS on admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in User Badge Description Field on Profile Page", "target": "{\"Lab scenario\": \"XSS in User Badge Description Field on Profile Page\", \"Lab Description\": \"Users can earn badges and set custom badge descriptions. These descriptions are rendered directly in profile pages using dangerouslySetInnerHTML. Without proper validation, this leads to stored XSS. To solve: Submit a badge description with an XSS payload and view it from another profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.", "target": "{\"Lab scenario\": \"XSS in Admin Announcement Viewer via Stored HTML\", \"Lab Description\": \"An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Image Caption Injection in Photography Portfolio", "target": "{\"Lab scenario\": \"XSS via Image Caption Injection in Photography Portfolio\", \"Lab Description\": \"A photography site allows photographers to submit captions for their images. These captions are rendered in the gallery without HTML escaping. This allows an attacker to inject HTML or scripts into the gallery view. To solve: Inject a payload as a caption and verify it executes in the gallery.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in FAQ Accordion via Question Parameter", "target": "{\"Lab scenario\": \"XSS in FAQ Accordion via Question Parameter\", \"Lab Description\": \"An FAQ section loads question data dynamically based on a query parameter and reflects it inside expandable accordion elements. The input is not sanitized before being injected into the HTML, enabling DOM-based XSS. To solve: Inject a script via the question parameter and trigger it when the accordion renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via feedback summary on admin dashboard", "target": "{\"Lab scenario\": \"XSS via Feedback Summary on Admin Dashboard\", \"Lab Description\": \"A user feedback form collects input and stores it in a database. The admin dashboard displays recent feedback using innerHTML without encoding. Attackers can submit malicious input that is rendered when the admin views the dashboard. To solve: Submit a payload as feedback and trigger stored XSS on admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in User Badge Description Field on Profile Page", "target": "{\"Lab scenario\": \"XSS in User Badge Description Field on Profile Page\", \"Lab Description\": \"Users can earn badges and set custom badge descriptions. These descriptions are rendered directly in profile pages using dangerouslySetInnerHTML. Without proper validation, this leads to stored XSS. To solve: Submit a badge description with an XSS payload and view it from another profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in admin announcement viewer via stored html", "target": "{\"Lab scenario\": \"XSS in Admin Announcement Viewer via Stored HTML\", \"Lab Description\": \"An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where webmail xss in subject preview tooltip", "target": "{\"Lab scenario\": \"Webmail XSS in Subject Preview Tooltip\", \"Lab Description\": \"A webmail client shows incoming emails with subject preview tooltips. The subject is stored and directly reflected inside a tooltip using an HTML attribute without proper encoding. To solve: Inject an XSS payload in the email subject that executes JavaScript when the tooltip renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in qr code generator text field", "target": "{\"Lab scenario\": \"XSS in QR Code Generator Text Field\", \"Lab Description\": \"An online QR generator embeds the text input directly into a JavaScript function to generate the code. It fails to escape special characters in the input. To solve: Inject a payload that breaks out of the JS string and executes a script when generating the QR code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via URL Metadata Preview in Bookmark Manager", "target": "{\"Lab scenario\": \"XSS via URL Metadata Preview in Bookmark Manager\", \"Lab Description\": \"The app lets users save URLs and fetches a metadata preview using Open Graph scraping. However, the meta description is injected directly into the page without sanitization. To solve: Host a URL with malicious meta content and save it to the app.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A polling application shows poll results where labels are user-generated. These labels are rendered inside the DOM using innerHTML in a script block, leading to DOM-based XSS. To solve: Inject malicious HTML as a label to execute script when viewing results.", "target": "{\"Lab scenario\": \"XSS in Dynamic Poll Result Label\", \"Lab Description\": \"A polling application shows poll results where labels are user-generated. These labels are rendered inside the DOM using innerHTML in a script block, leading to DOM-based XSS. To solve: Inject malicious HTML as a label to execute script when viewing results.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in E-Commerce Product Comparison Table", "target": "{\"Lab scenario\": \"XSS in E-Commerce Product Comparison Table\", \"Lab Description\": \"The platform allows users to compare products and attach notes to each item. These notes are reflected in a table and injected using raw HTML. No sanitization is done on note content. To solve: Inject a note that executes JavaScript when the table loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where banking portal stored xss in internal messaging system", "target": "{\"Lab scenario\": \"Banking Portal Stored XSS in Internal Messaging System\", \"Lab Description\": \"A banking web application includes a secure internal messaging feature for communication between users and bank staff. The message content is rendered using `innerHTML` without sanitization, allowing stored XSS. To solve: Inject a message with a payload and trigger it by visiting the inbox.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where e-commerce xss in wishlist notes feature", "target": "{\"Lab scenario\": \"E-commerce XSS in Wishlist Notes Feature\", \"Lab Description\": \"An e-commerce site allows users to attach notes to wishlist items. The notes are reflected using innerHTML when viewing the wishlist. Due to missing sanitization, this leads to reflected XSS. To solve: Inject a crafted payload into the note and revisit the wishlist.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Project Management Tool XSS in Task Description", "target": "{\"Lab scenario\": \"Project Management Tool XSS in Task Description\", \"Lab Description\": \"A project management tool allows users to describe tasks with detailed HTML content. Task descriptions are rendered without sanitization in the dashboard. To solve: Create a task with a malicious description that triggers XSS when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where healthcare portal reflected xss in appointment notes", "target": "{\"Lab scenario\": \"Healthcare Portal Reflected XSS in Appointment Notes\", \"Lab Description\": \"A healthcare scheduling portal allows patients to add optional notes when booking appointments. These notes are echoed in the confirmation screen without encoding. This leads to reflected XSS. To solve: Inject a crafted payload in the notes field and reach the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where learning management system xss in forum post preview", "target": "{\"Lab scenario\": \"Learning Management System XSS in Forum Post Preview\", \"Lab Description\": \"A learning platform includes a forum where users can preview their posts before submitting. The preview feature renders HTML from user input using innerHTML. Thereâ€™s no output encoding, leading to reflected XSS. To solve: Inject an XSS payload in a forum post preview and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: job application portal reflected xss in search suggestions", "target": "{\"Lab scenario\": \"Job Application Portal Reflected XSS in Search Suggestions\", \"Lab Description\": \"A job portal includes a search bar with live suggestions based on user input. The search term is reflected directly into the DOM using innerHTML without sanitization. This introduces DOM-based XSS. To solve: Inject a payload into the search query that executes when suggestions render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: travel booking app xss in hotel feedback submission", "target": "{\"Lab scenario\": \"Travel Booking App XSS in Hotel Feedback Submission\", \"Lab Description\": \"Users of a travel booking app can submit feedback for hotels. Feedback comments are shown to future visitors. Since input is rendered without escaping, stored XSS is possible. To solve: Submit a malicious comment and confirm it executes when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A gamified e-learning dashboard shows pop-up notifications using dynamic HTML when users earn badges. Badge names are inserted directly into HTML via template strings without encoding. To solve: Inject a payload into a badge name and wait for the notification to appear.", "target": "{\"Lab scenario\": \"Learning Dashboard XSS in Achievement Notification\", \"Lab Description\": \"A gamified e-learning dashboard shows pop-up notifications using dynamic HTML when users earn badges. Badge names are inserted directly into HTML via template strings without encoding. To solve: Inject a payload into a badge name and wait for the notification to appear.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: recipe sharing platform reflected xss in title preview", "target": "{\"Lab scenario\": \"Recipe Sharing Platform Reflected XSS in Title Preview\", \"Lab Description\": \"Users writing a new recipe can preview the recipe title before submission. The preview is done via client-side rendering using innerHTML with unescaped user input. This introduces reflected XSS. To solve: Inject a payload into the title field and preview the recipe.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where online survey tool xss in response review panel", "target": "{\"Lab scenario\": \"Online Survey Tool XSS in Response Review Panel\", \"Lab Description\": \"Survey results in this tool are shown in an admin panel where user-submitted answers are rendered as HTML. Lack of sanitization introduces a stored XSS vector. To solve: Inject a malicious answer and trigger it by viewing the admin review panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can set a custom username which appears on the public leaderboard. The application renders usernames directly using innerHTML, creating a stored XSS vector. To solve: Inject a payload into the username and trigger its execution from the leaderboard page.", "target": "{\"Lab scenario\": \"Fitness App Leaderboard XSS in Custom Username Field\", \"Lab Description\": \"Users can set a custom username which appears on the public leaderboard. The application renders usernames directly using innerHTML, creating a stored XSS vector. To solve: Inject a payload into the username and trigger its execution from the leaderboard page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where education platform xss in quiz result summary", "target": "{\"Lab scenario\": \"Education Platform XSS in Quiz Result Summary\", \"Lab Description\": \"After completing a quiz, users receive a result summary that includes their name and score. The summary page renders these details using template literals inside script tags, allowing DOM-based XSS via the name field. To solve: Inject a payload in the name field to execute a script upon result viewing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Support agents can view user-submitted ticket notes in the admin dashboard. The application renders notes directly into the DOM using dangerouslySetInnerHTML in a templated admin UI. This leads to stored XSS. To solve: Submit a malicious note and verify execution upon admin view.", "target": "{\"Lab scenario\": \"Customer Support Ticketing XSS in Ticket Notes Viewer\", \"Lab Description\": \"Support agents can view user-submitted ticket notes in the admin dashboard. The application renders notes directly into the DOM using dangerouslySetInnerHTML in a templated admin UI. This leads to stored XSS. To solve: Submit a malicious note and verify execution upon admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where project management tool xss in task title preview modal", "target": "{\"Lab scenario\": \"Project Management Tool XSS in Task Title Preview Modal\", \"Lab Description\": \"A project management tool provides a modal preview for task titles. User input is passed directly into innerHTML within the modal. Lack of sanitization introduces reflected XSS. To solve: Inject an XSS payload into the task title field and preview it to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Bookstore Review Section Stored XSS via Star Rating Comments", "target": "{\"Lab scenario\": \"Bookstore Review Section Stored XSS via Star Rating Comments\", \"Lab Description\": \"A review section in a bookstore web app allows users to leave comments with star ratings. These are rendered without escaping, introducing stored XSS. To solve: Submit a crafted review that triggers script execution when other users view it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The collaboration platform provides a live Markdown preview panel. The application fails to sanitize embedded HTML within Markdown content and renders it directly inside an iframe. This opens up the possibility of script injection via raw HTML. To solve: Inject a script payload wrapped in Markdown and verify execution inside the preview pane.", "target": "{\"Lab scenario\": \"Content Collaboration XSS in Markdown Preview Panel\", \"Lab Description\": \"The collaboration platform provides a live Markdown preview panel. The application fails to sanitize embedded HTML within Markdown content and renders it directly inside an iframe. This opens up the possibility of script injection via raw HTML. To solve: Inject a script payload wrapped in Markdown and verify execution inside the preview pane.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where order tracking xss via invoice id in print preview", "target": "{\"Lab scenario\": \"Order Tracking XSS via Invoice ID in Print Preview\", \"Lab Description\": \"The order tracking system allows users to view a print-friendly version of their invoices. The invoice ID is reflected without encoding inside the HTML title and print header. To solve: Inject a payload into the invoice ID parameter and trigger script execution on the print preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a high Cross-site scripting lab for: xss in social sharing metadata injection", "target": "{\"Lab scenario\": \"XSS in Social Sharing Metadata Injection\", \"Lab Description\": \"The blogging platform generates dynamic Open Graph and Twitter meta tags for each post based on user-defined titles and summaries. These values are not properly escaped, resulting in XSS when malicious scripts are injected via post titles. To solve: Inject an XSS payload into a new post title and visit its social sharing preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via shopping cart notes on order confirmation page", "target": "{\"Lab scenario\": \"XSS via Shopping Cart Notes on Order Confirmation Page\", \"Lab Description\": \"The e-commerce platform allows customers to leave 'special notes' in their cart before checkout. These notes are injected into the order confirmation page without sanitization. To solve: Inject a malicious payload in the note field, complete the order, and trigger script execution on the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via project tag input in task management app", "target": "{\"Lab scenario\": \"XSS via Project Tag Input in Task Management App\", \"Lab Description\": \"A task management tool supports project-specific tags entered by users. These tags are displayed as interactive HTML elements but are not encoded before being rendered. To solve: Create a tag with embedded JavaScript and verify execution when the tag list is displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Feedback Subject in Support Portal Email Preview", "target": "{\"Lab scenario\": \"XSS via Feedback Subject in Support Portal Email Preview\", \"Lab Description\": \"A support portal allows users to submit feedback with a subject line that is shown in the email preview pane. The subject is not sanitized and is inserted inside the HTML body of the preview. To solve: Inject a payload in the subject field, then view the email preview as support staff and trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via profile tagline in social networking site", "target": "{\"Lab scenario\": \"XSS via Profile Tagline in Social Networking Site\", \"Lab Description\": \"A social networking platform lets users write a short 'tagline' that appears below their username. The tagline is stored and rendered without escaping, making it possible to inject JavaScript. To solve: Inject a payload in the tagline field and visit the user profile page to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A travel booking app allows users to leave optional notes for hotel staff. These notes appear unfiltered in the booking confirmation page after checkout. The system fails to sanitize HTML or JavaScript in this field. To solve: Inject a payload as the note, complete the booking, and confirm script execution.", "target": "{\"Lab scenario\": \"XSS in Booking Notes on Travel Confirmation Page\", \"Lab Description\": \"A travel booking app allows users to leave optional notes for hotel staff. These notes appear unfiltered in the booking confirmation page after checkout. The system fails to sanitize HTML or JavaScript in this field. To solve: Inject a payload as the note, complete the booking, and confirm script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Internal Chat Mentions Feature", "target": "{\"Lab scenario\": \"XSS in Internal Chat Mentions Feature\", \"Lab Description\": \"An internal messaging system auto-links @mentions in chat messages. However, it processes message content using a replace function without escaping dangerous characters, allowing injection of script tags. To solve: Send a chat message containing an XSS payload that gets executed in the chat history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via address field in delivery tracking app", "target": "{\"Lab scenario\": \"XSS via Address Field in Delivery Tracking App\", \"Lab Description\": \"A delivery tracking platform displays user-supplied addresses on a tracking page. The address input is not encoded before being inserted into a div container, allowing attackers to inject HTML or JavaScript. To solve: Inject a payload into the address field and trigger it via the tracking page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A project management tool allows users to add tasks, and the task name is rendered directly in the dashboard without output encoding. The dashboard uses a JavaScript templating engine that does not sanitize content. To solve: Inject a script into the task name and confirm execution in the rendered dashboard view.", "target": "{\"Lab scenario\": \"XSS in Task Name Field of Project Management Dashboard\", \"Lab Description\": \"A project management tool allows users to add tasks, and the task name is rendered directly in the dashboard without output encoding. The dashboard uses a JavaScript templating engine that does not sanitize content. To solve: Inject a script into the task name and confirm execution in the rendered dashboard view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in 'Company Bio' Field of Job Posting Portal", "target": "{\"Lab scenario\": \"XSS in 'Company Bio' Field of Job Posting Portal\", \"Lab Description\": \"A job portal allows companies to publish job listings with a 'company bio' field that is reflected unescaped in the job description page. This bio is stored as-is and injected directly into the HTML body. To solve: Craft a malicious bio, view the job post page, and confirm payload execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via comment field on online course reviews", "target": "{\"Lab scenario\": \"XSS via Comment Field on Online Course Reviews\", \"Lab Description\": \"An educational platform allows users to leave reviews. The comment content is rendered directly without sanitization on the course page. This results in stored XSS if malicious input is submitted. To solve: Submit a malicious comment and view it on the course detail page to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in newsletter preview feature using user bio", "target": "{\"Lab scenario\": \"XSS in Newsletter Preview Feature Using User Bio\", \"Lab Description\": \"A newsletter creation tool allows insertion of dynamic user bios into the newsletter preview. The bio is fetched and embedded without encoding, leading to XSS if a user injects malicious content. To solve: Modify your bio with a payload and generate a preview that triggers the XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Search Query Parameter on Product Listing Page", "target": "{\"Lab scenario\": \"XSS in Search Query Parameter on Product Listing Page\", \"Lab Description\": \"An e-commerce website reflects the search query parameter in the product listing title. The query is injected without proper sanitization inside a heading tag. To solve: Inject a payload through the search box and confirm its execution when the search results page is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in 'Name' Field of Event Registration Confirmation Page", "target": "{\"Lab scenario\": \"XSS in 'Name' Field of Event Registration Confirmation Page\", \"Lab Description\": \"An event management system takes the user's name from the registration form and reflects it directly in the confirmation message. The message is built using string concatenation in the HTML response without encoding. To solve: Inject a payload through the name field and confirm script execution on the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A community site lists public events and includes the location submitted by the event organizer. The location is rendered without HTML encoding in a map tooltip. To solve: Inject a script into the location field and confirm its execution in the tooltip.", "target": "{\"Lab scenario\": \"XSS in 'Location' Field on Public Event Listings\", \"Lab Description\": \"A community site lists public events and includes the location submitted by the event organizer. The location is rendered without HTML encoding in a map tooltip. To solve: Inject a script into the location field and confirm its execution in the tooltip.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a high Cross-site scripting lab for: xss via embedded message in internal messaging system", "target": "{\"Lab scenario\": \"XSS via Embedded Message in Internal Messaging System\", \"Lab Description\": \"An internal messaging tool allows users to send HTML messages. These are rendered as-is without sanitization, allowing stored XSS. To solve: Send a crafted message to another user, then view the inbox to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A feedback widget on a documentation portal takes user input and displays it immediately for confirmation without any encoding. The feedback preview reflects unescaped HTML. To solve: Submit a script in the feedback and confirm it executes on the preview page.", "target": "{\"Lab scenario\": \"XSS in Feedback Widget on Documentation Portal\", \"Lab Description\": \"A feedback widget on a documentation portal takes user input and displays it immediately for confirmation without any encoding. The feedback preview reflects unescaped HTML. To solve: Submit a script in the feedback and confirm it executes on the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in 'favorite quote' section of user profile", "target": "{\"Lab scenario\": \"XSS in 'Favorite Quote' Section of User Profile\", \"Lab Description\": \"A social platform allows users to save and display a favorite quote in their profile. The quote is stored and rendered without escaping, resulting in stored XSS. To solve: Set a quote with a script tag, visit your profile, and observe payload execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via 'company' field on job posting portal", "target": "{\"Lab scenario\": \"XSS via 'Company' Field on Job Posting Portal\", \"Lab Description\": \"A job posting form allows employers to specify a company name that is displayed on job listings. The company name is rendered using raw HTML with no sanitization. To solve: Inject a script in the company name and confirm it executes on the listing page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Product Review Section of E-commerce Platform", "target": "{\"Lab scenario\": \"XSS in Product Review Section of E-commerce Platform\", \"Lab Description\": \"A review form on an e-commerce product page allows users to leave feedback that is displayed publicly. The review content is rendered as HTML without escaping. To solve: Submit a review containing a script payload and observe its execution on the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A single-page help center loads content dynamically based on the URL hash and injects it into the page using `innerHTML`. This allows attackers to inject scripts by manipulating the hash. To solve: Craft a URL with a malicious hash and confirm script execution.", "target": "{\"Lab scenario\": \"DOM XSS via Hash Fragment Injection in Help Page\", \"Lab Description\": \"A single-page help center loads content dynamically based on the URL hash and injects it into the page using `innerHTML`. This allows attackers to inject scripts by manipulating the hash. To solve: Craft a URL with a malicious hash and confirm script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in url parameter reflected in error message", "target": "{\"Lab scenario\": \"XSS in URL Parameter Reflected in Error Message\", \"Lab Description\": \"An application displays error messages using a URL parameter for user input. The input is reflected in the message directly without escaping. To solve: Inject a payload in the query parameter and trigger the error message to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Notes Feature of Task Manager App", "target": "{\"Lab scenario\": \"Stored XSS in Notes Feature of Task Manager App\", \"Lab Description\": \"Users can add custom notes to their tasks. The notes are stored and rendered without HTML sanitization. This allows stored XSS. To solve: Save a malicious script in the note, reload the tasks page, and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: cms plugin store xss in plugin preview renderer", "target": "{\"Lab scenario\": \"CMS Plugin Store XSS in Plugin Preview Renderer\", \"Lab Description\": \"The CMS provides a plugin marketplace where users can preview plugin UI before installation. The preview renders server-fetched plugin metadata including the 'description' field directly into the DOM using innerHTML. No sanitization is applied, allowing attackers to inject scripts via a crafted plugin.json file. To solve: Upload a malicious plugin and trigger preview rendering to execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: event management panel xss in attendee name", "target": "{\"Lab scenario\": \"Event Management Panel XSS in Attendee Name\", \"Lab Description\": \"An event admin panel allows CSV import of attendee data, which includes names and contact details. The imported names are rendered using innerHTML inside a table. No validation is applied during parsing, permitting injection through the 'name' field. To solve: Craft a malicious CSV and upload it to trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Chatbot Integration XSS via User Alias", "target": "{\"Lab scenario\": \"Chatbot Integration XSS via User Alias\", \"Lab Description\": \"A helpdesk chatbot uses user-defined aliases to personalize responses. These aliases are stored in local storage and rendered in the chat window using innerHTML. The alias input is not sanitized, enabling XSS through alias injection. To solve: Inject a payload into the alias field and trigger it by sending a message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Online Resume Builder via Experience Field", "target": "{\"Lab scenario\": \"XSS in Online Resume Builder via Experience Field\", \"Lab Description\": \"The application provides a live preview of resumes, rendering JSON input fields like 'experience' into a preview section. The server returns these fields directly, and the frontend uses dangerouslySetInnerHTML to render them. The 'experience' field allows injected markup. To solve: Inject JavaScript via this field and observe execution on preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: knowledge base editor xss in markdown preview", "target": "{\"Lab scenario\": \"Knowledge Base Editor XSS in Markdown Preview\", \"Lab Description\": \"The internal knowledge base editor supports Markdown preview, rendering raw HTML if included in markdown. The editor does not sanitize input before rendering preview, allowing embedded scripts. To solve: Craft malicious markdown and trigger preview to confirm script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A university portal allows students to submit course feedback, which is displayed to professors via a dashboard. The feedback content is inserted directly into a DOM container using innerHTML without sanitization. To solve: Inject a payload through the feedback field and trigger execution when a professor views it.", "target": "{\"Lab scenario\": \"Student Portal XSS in Course Feedback Field\", \"Lab Description\": \"A university portal allows students to submit course feedback, which is displayed to professors via a dashboard. The feedback content is inserted directly into a DOM container using innerHTML without sanitization. To solve: Inject a payload through the feedback field and trigger execution when a professor views it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: project management tool xss via project title", "target": "{\"Lab scenario\": \"Project Management Tool XSS via Project Title\", \"Lab Description\": \"In a collaborative project tool, users can name projects and view them in a list. Project titles are rendered with innerHTML directly into the interface. Input is not sanitized, leading to potential DOM XSS. To solve: Create a project with a malicious title and view it on the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where file tracker xss via filename display", "target": "{\"Lab scenario\": \"File Tracker XSS via Filename Display\", \"Lab Description\": \"A file management tool displays recently uploaded filenames using dangerouslySetInnerHTML in a React component. The backend does not sanitize filenames, and attackers can upload files with embedded scripts. To solve: Upload a file with a malicious name and view it in the recent uploads panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: bug tracker xss in issue description field", "target": "{\"Lab scenario\": \"Bug Tracker XSS in Issue Description Field\", \"Lab Description\": \"A bug tracker application allows users to report issues. Issue descriptions are rendered using innerHTML when browsing the list of open tickets. Improper handling allows attackers to inject scripts into the description. To solve: Create a bug report with a malicious description and visit the issue list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Support agents can add internal notes to customer tickets, which are rendered with innerHTML when viewed later. The input form allows arbitrary HTML, leading to stored XSS. To solve: Inject a script into a ticket note and revisit it to trigger execution.", "target": "{\"Lab scenario\": \"Customer Support Portal XSS in Ticket Notes\", \"Lab Description\": \"Support agents can add internal notes to customer tickets, which are rendered with innerHTML when viewed later. The input form allows arbitrary HTML, leading to stored XSS. To solve: Inject a script into a ticket note and revisit it to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A job board lets recruiters post job listings with a company name field. The listings are displayed using innerHTML without input sanitization. The application trusts the company name input. To solve: Inject a payload into the company name and view the listing to trigger execution.", "target": "{\"Lab scenario\": \"Job Board Platform XSS in Company Name Field\", \"Lab Description\": \"A job board lets recruiters post job listings with a company name field. The listings are displayed using innerHTML without input sanitization. The application trusts the company name input. To solve: Inject a payload into the company name and view the listing to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where e-commerce review system xss in review content", "target": "{\"Lab scenario\": \"E-commerce Review System XSS in Review Content\", \"Lab Description\": \"An online store allows users to post reviews on products. The review content is displayed via innerHTML in product pages without escaping special characters. Attackers can exploit this to run arbitrary scripts. To solve: Submit a crafted review and trigger execution on the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where support chat application xss in message body", "target": "{\"Lab scenario\": \"Support Chat Application XSS in Message Body\", \"Lab Description\": \"A live support chat displays incoming messages in real-time by appending message content via innerHTML. Inputs are not sanitized before rendering. Malicious users can send messages containing scripts. To solve: Send a crafted message to support and confirm script execution in agent's browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where travel blog xss in comment field", "target": "{\"Lab scenario\": \"Travel Blog XSS in Comment Field\", \"Lab Description\": \"Users can comment on blog posts in a travel site. The comment is displayed with innerHTML and stored unsanitized. An attacker can inject scripts that execute when comments are viewed. To solve: Submit a comment containing XSS and visit the blog to trigger it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where music sharing site xss in playlist name", "target": "{\"Lab scenario\": \"Music Sharing Site XSS in Playlist Name\", \"Lab Description\": \"A music-sharing app allows users to create playlists. Playlist names are displayed using innerHTML on the main dashboard. No input sanitization is applied to the names. Attackers can use this to inject scripts. To solve: Create a malicious playlist name and view it on the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: fitness tracker app xss in goal title", "target": "{\"Lab scenario\": \"Fitness Tracker App XSS in Goal Title\", \"Lab Description\": \"A fitness tracker allows users to set custom goals with a title. The title is displayed on the user's dashboard using innerHTML without sanitization. The application reflects the goal title directly. To solve: Inject a script into a goal title and trigger it on the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: movie review site xss in reviewer name", "target": "{\"Lab scenario\": \"Movie Review Site XSS in Reviewer Name\", \"Lab Description\": \"A movie site displays reviews and includes the reviewer's name using innerHTML. The name field is not sanitized, and malicious input is rendered into the DOM. To solve: Submit a crafted reviewer name and view the reviews page to execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: education portal xss in assignment title", "target": "{\"Lab scenario\": \"Education Portal XSS in Assignment Title\", \"Lab Description\": \"Teachers can post assignments with a title that is shown to students via innerHTML. The title field is not escaped or sanitized. This allows a teacher or attacker to inject scripts. To solve: Create an assignment with a payload in the title and view it as a student.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: developer forum xss in thread title", "target": "{\"Lab scenario\": \"Developer Forum XSS in Thread Title\", \"Lab Description\": \"A coding forum allows users to create discussion threads with a title. The title is displayed on the homepage using innerHTML. No sanitization is done on input. To solve: Inject a payload into a thread title and verify execution when browsing the forum.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Photography Sharing Site XSS in Album Description", "target": "{\"Lab scenario\": \"Photography Sharing Site XSS in Album Description\", \"Lab Description\": \"A photo-sharing site allows users to add a description to their albums. The description is shown using innerHTML on the album page. Input is not sanitized, allowing XSS. To solve: Submit a malicious description and trigger the payload by visiting the album.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: e-commerce platform xss in wishlist item name", "target": "{\"Lab scenario\": \"E-Commerce Platform XSS in Wishlist Item Name\", \"Lab Description\": \"An e-commerce site allows users to add custom item names to their wishlist. These names are rendered using innerHTML on the wishlist page without sanitization. The application does not validate HTML/JS input. To solve: Inject a script payload into the item name and trigger it via the wishlist display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A social media platform allows users to update their bio. This bio is reflected on the user's public profile page using innerHTML without escaping tags. Malicious scripts can be embedded and executed. To solve: Inject a payload into the bio and trigger it on the profile page.", "target": "{\"Lab scenario\": \"Social Media App XSS in Bio Field\", \"Lab Description\": \"A social media platform allows users to update their bio. This bio is reflected on the user's public profile page using innerHTML without escaping tags. Malicious scripts can be embedded and executed. To solve: Inject a payload into the bio and trigger it on the profile page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Travel Booking Portal XSS in Destination Notes", "target": "{\"Lab scenario\": \"Travel Booking Portal XSS in Destination Notes\", \"Lab Description\": \"A travel app lets users add 'notes' for destinations they plan to visit. These notes are shown on a trip summary page using innerHTML. No escaping is applied, allowing JavaScript injection. To solve: Add an XSS payload to a note and access the summary page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where food delivery app xss in feedback comments", "target": "{\"Lab scenario\": \"Food Delivery App XSS in Feedback Comments\", \"Lab Description\": \"Customers submit feedback with optional comments. These are displayed to admins using innerHTML. Since comments are not sanitized, a malicious user can inject JavaScript. To solve: Inject an XSS payload in the comment and trigger it in the admin interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where healthcare portal xss in appointment notes", "target": "{\"Lab scenario\": \"Healthcare Portal XSS in Appointment Notes\", \"Lab Description\": \"Doctors can leave notes for each appointment. These notes are shown on the appointment review page using innerHTML. The application does not sanitize or encode user input. To solve: Insert a script payload into a doctor's note and execute it on the review page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Product Customization XSS in E-Commerce Configurator", "target": "{\"Lab scenario\": \"Product Customization XSS in E-Commerce Configurator\", \"Lab Description\": \"An e-commerce site allows users to customize products before adding them to the cart. Custom text (e.g., engraved message) is previewed live using innerHTML inside a product detail component. The preview renderer fails to sanitize user-supplied input, leading to DOM-based XSS. To solve: Inject malicious input via the customization field to execute arbitrary JavaScript in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via contact info display in job applicant portal", "target": "{\"Lab scenario\": \"XSS via Contact Info Display in Job Applicant Portal\", \"Lab Description\": \"A job portal allows applicants to preview how their submitted contact info will appear to recruiters. The application reflects submitted form values directly into a DOM container without encoding. To solve: Craft a malicious payload in the contact info form that leads to script execution when previewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A real estate platform offers search suggestions as users type queries. The suggestions are dynamically inserted into the page without escaping, using string concatenation with innerHTML. To solve: Inject a payload via search input that executes JavaScript when the suggestion dropdown renders.", "target": "{\"Lab scenario\": \"XSS in Search Suggestions for Real Estate Listings\", \"Lab Description\": \"A real estate platform offers search suggestions as users type queries. The suggestions are dynamically inserted into the page without escaping, using string concatenation with innerHTML. To solve: Inject a payload via search input that executes JavaScript when the suggestion dropdown renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An admin interface allows configuration of notification templates using custom text fields. The custom message is rendered directly into a preview area using innerHTML. Due to lack of sanitization, arbitrary HTML/JS can be injected. To solve: Exploit the preview system by crafting an XSS payload as the custom message.", "target": "{\"Lab scenario\": \"XSS via Custom Notification Templates in Admin Panel\", \"Lab Description\": \"An admin interface allows configuration of notification templates using custom text fields. The custom message is rendered directly into a preview area using innerHTML. Due to lack of sanitization, arbitrary HTML/JS can be injected. To solve: Exploit the preview system by crafting an XSS payload as the custom message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via meta description injection in blog cms", "target": "{\"Lab scenario\": \"DOM XSS via Meta Description Injection in Blog CMS\", \"Lab Description\": \"A blog CMS allows post authors to add custom meta descriptions. These descriptions are inserted into the DOM using JavaScript after loading the post. Due to lack of escaping, this allows DOM-based XSS. To solve: Inject a payload in the meta description that leads to execution on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in personalized finance news feed", "target": "{\"Lab scenario\": \"XSS in Personalized Finance News Feed\", \"Lab Description\": \"The financial application offers personalized news feeds based on user preferences. These preferences are reflected directly into the HTML without proper sanitization, allowing attackers to inject JavaScript into news headlines. To solve: Exploit the unsanitized headline rendering to execute arbitrary script when the page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in openid redirect parameter", "target": "{\"Lab scenario\": \"Reflected XSS in OpenID Redirect Parameter\", \"Lab Description\": \"An OpenID login endpoint reflects the redirect URL back to the page during error handling. Improper validation of the redirect parameter leads to an XSS sink in a script context. To solve: Inject a payload into the redirect query string and trigger script execution during login failure.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in avatar preview generator", "target": "{\"Lab scenario\": \"XSS in Avatar Preview Generator\", \"Lab Description\": \"Users can customize avatars using a generator that displays a live preview. The avatar preview is rendered with user-submitted data directly placed into an innerHTML attribute, making it vulnerable to DOM-based XSS. To solve: Inject a malicious payload in the avatar name field that results in script execution inside the preview box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A bug tracker application allows users to submit bug reports. The admin panel renders submitted summaries into a table with no sanitization. This enables attackers to inject JavaScript payloads that execute when an admin opens the panel. To solve: Submit a bug report with a crafted summary field that executes a script on the /admin-bugs page.", "target": "{\"Lab scenario\": \"XSS via Bug Report Summary in Admin Panel\", \"Lab Description\": \"A bug tracker application allows users to submit bug reports. The admin panel renders submitted summaries into a table with no sanitization. This enables attackers to inject JavaScript payloads that execute when an admin opens the panel. To solve: Submit a bug report with a crafted summary field that executes a script on the /admin-bugs page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in shared task description", "target": "{\"Lab scenario\": \"Stored XSS in Shared Task Description\", \"Lab Description\": \"A collaborative to-do app allows users to share task descriptions publicly. The application renders task descriptions in the shared view using dangerouslySetInnerHTML-style rendering without sanitization. To solve: Inject a stored XSS payload in a task and access the public share page to trigger it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: The application's search feature includes a tooltip showing the last searched term. The tooltip is updated using innerHTML directly from the URL parameter without proper encoding. To solve: Inject a payload via the `term` query string to trigger JavaScript execution when the tooltip renders.", "target": "{\"Lab scenario\": \"DOM XSS in Search Suggestion Tooltip\", \"Lab Description\": \"The application's search feature includes a tooltip showing the last searched term. The tooltip is updated using innerHTML directly from the URL parameter without proper encoding. To solve: Inject a payload via the `term` query string to trigger JavaScript execution when the tooltip renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in feedback form subject", "target": "{\"Lab scenario\": \"Reflected XSS in Feedback Form Subject\", \"Lab Description\": \"The feedback page echoes the submitted subject value back in a confirmation message. It does so by embedding the subject value directly into HTML without escaping. To solve: Inject a payload in the subject input to execute code when the confirmation is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in forum post title", "target": "{\"Lab scenario\": \"Stored XSS in Forum Post Title\", \"Lab Description\": \"A forum allows users to post discussion threads. The thread titles are stored and displayed in a list on the homepage. Titles are rendered into the DOM without sanitization. To solve: Submit a new post with an XSS payload in the title and verify that it executes on homepage load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Profile Badge Generator", "target": "{\"Lab scenario\": \"XSS in Profile Badge Generator\", \"Lab Description\": \"The application lets users generate HTML badges for embedding in external blogs. The badge content includes user-provided name and is rendered with innerHTML. To solve: Inject a payload in the name and view the generated badge HTML to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom-based xss in hash-based routing", "target": "{\"Lab scenario\": \"DOM-based XSS in Hash-Based Routing\", \"Lab Description\": \"A single-page application reads the hash part of the URL to render navigation state. It updates the DOM using `document.getElementById('view').innerHTML = location.hash`. This leads to DOM-based XSS if the hash includes script or dangerous HTML. To solve: Inject a payload in the URL hash to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Task Manager Note Field", "target": "{\"Lab scenario\": \"Stored XSS in Task Manager Note Field\", \"Lab Description\": \"The task manager app allows users to add notes to tasks. These notes are stored and later displayed without sanitization in the task detail page using innerHTML. The application directly injects note content into a div. To solve: Inject a script payload into the note field and view the task to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An email client renders previews of received emails by injecting subject lines using innerHTML. If the subject includes HTML tags, they are interpreted without sanitization. To solve: Inject a payload into the subject query parameter and confirm execution in the preview.", "target": "{\"Lab scenario\": \"DOM XSS in Email Preview Feature\", \"Lab Description\": \"An email client renders previews of received emails by injecting subject lines using innerHTML. If the subject includes HTML tags, they are interpreted without sanitization. To solve: Inject a payload into the subject query parameter and confirm execution in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in product search filter", "target": "{\"Lab scenario\": \"Reflected XSS in Product Search Filter\", \"Lab Description\": \"The product search page reflects the `category` parameter in a JavaScript variable to customize the UI. The category value is embedded in a script tag via template literal. To solve: Inject a payload that escapes the JS context and triggers script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Commenting System", "target": "{\"Lab scenario\": \"Stored XSS in Commenting System\", \"Lab Description\": \"A commenting system allows users to post comments, which are displayed below blog posts. The content is rendered without sanitization using raw HTML. To solve: Submit a comment with an XSS payload and revisit the blog to observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS via Location Hash in Navigation Tab", "target": "{\"Lab scenario\": \"DOM XSS via Location Hash in Navigation Tab\", \"Lab Description\": \"The app reads the URL hash and uses it to dynamically highlight a tab in the navigation bar. The tab name is inserted into the DOM using innerHTML without validation. To solve: Inject a malicious payload in the hash to trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user bio field on profile page", "target": "{\"Lab scenario\": \"Stored XSS in User Bio Field on Profile Page\", \"Lab Description\": \"A user profile page displays the bio field submitted during registration. The content is rendered with innerHTML when another user views the profile. The application stores and reflects this bio without escaping. To solve: Submit a script payload in the bio and visit the profile to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The search input reflects the user query in a JavaScript variable using template literals. This is vulnerable because the search query is not escaped before being included in a script tag. To solve: Inject a payload that breaks out of the JS context and executes code.", "target": "{\"Lab scenario\": \"DOM XSS via Search Input Reflection in Script Block\", \"Lab Description\": \"The search input reflects the user query in a JavaScript variable using template literals. This is vulnerable because the search query is not escaped before being included in a script tag. To solve: Inject a payload that breaks out of the JS context and executes code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The password reset feature reflects the email query parameter in an error message when an invalid email is submitted. The message is rendered via innerHTML in the frontend. To solve: Inject a script in the email parameter and submit it to trigger XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Error Message of Password Reset\", \"Lab Description\": \"The password reset feature reflects the email query parameter in an error message when an invalid email is submitted. The message is rendered via innerHTML in the frontend. To solve: Inject a script in the email parameter and submit it to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Feedback Message Panel", "target": "{\"Lab scenario\": \"Stored XSS in Feedback Message Panel\", \"Lab Description\": \"The application allows users to submit feedback that is stored and shown to admins in a panel. The feedback is rendered with raw HTML inside a review box. To solve: Submit a payload as feedback and access the admin panel to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The chat app sets a user's name via a query parameter and reflects it in a greeting using innerHTML. If the name contains HTML or scripts, they are rendered without sanitization. To solve: Inject a script in the name parameter to execute code on page load.", "target": "{\"Lab scenario\": \"DOM XSS in Real-Time Chat Name Binding\", \"Lab Description\": \"The chat app sets a user's name via a query parameter and reflects it in a greeting using innerHTML. If the name contains HTML or scripts, they are rendered without sanitization. To solve: Inject a script in the name parameter to execute code on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can earn badges and customize their labels. These labels are rendered with innerHTML on the profile page. A crafted label can trigger XSS in the profile viewer.", "target": "{\"Lab scenario\": \"XSS via user badge label in gamified profile\", \"Lab Description\": \"Users can earn badges and customize their labels. These labels are rendered with innerHTML on the profile page. A crafted label can trigger XSS in the profile viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave comments on invoices, which are rendered in a PDF-like preview using innerHTML. A malicious comment results in XSS.", "target": "{\"Lab scenario\": \"XSS via invoice comment in PDF viewer\", \"Lab Description\": \"Users can leave comments on invoices, which are rendered in a PDF-like preview using innerHTML. A malicious comment results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Poll creators can define custom answer options. These options are displayed as HTML radio buttons using innerHTML. A crafted option label causes XSS.", "target": "{\"Lab scenario\": \"XSS via poll answer option rendering\", \"Lab Description\": \"Poll creators can define custom answer options. These options are displayed as HTML radio buttons using innerHTML. A crafted option label causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via webhook response rendering", "target": "{\"Lab scenario\": \"XSS via webhook response rendering\", \"Lab Description\": \"The admin dashboard logs webhook responses for debugging. If a webhook includes attacker-controlled content, it is rendered via innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via chatroom room name injection", "target": "{\"Lab scenario\": \"XSS via chatroom room name injection\", \"Lab Description\": \"Users can create chatrooms with custom names. Room names are rendered into the chat interface using innerHTML. A malicious name triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via transaction category labels in expense tracker", "target": "{\"Lab scenario\": \"XSS via transaction category labels in expense tracker\", \"Lab Description\": \"The financial tracker allows custom labels for spending categories. These are rendered using innerHTML in charts and summaries.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via delivery note comment on order receipt", "target": "{\"Lab scenario\": \"XSS via delivery note comment on order receipt\", \"Lab Description\": \"The order confirmation page reflects delivery notes added by the customer. These are rendered with innerHTML and may trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via iframe-embedded error reporting message", "target": "{\"Lab scenario\": \"XSS via iframe-embedded error reporting message\", \"Lab Description\": \"A support widget displays error messages submitted via URL. These are injected into an iframe via srcdoc using user input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via push notification content in preview mode", "target": "{\"Lab scenario\": \"XSS via push notification content in preview mode\", \"Lab Description\": \"Admins can preview a push notification before sending. The content is injected into a simulation UI using innerHTML. XSS is possible via payloads in notification text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Player aliases are shown on leaderboards and profile pages. When displayed using innerHTML, a crafted alias can lead to script execution.", "target": "{\"Lab scenario\": \"XSS via leaderboard player alias\", \"Lab Description\": \"Player aliases are shown on leaderboards and profile pages. When displayed using innerHTML, a crafted alias can lead to script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic tab title in workspace manager", "target": "{\"Lab scenario\": \"XSS via dynamic tab title in workspace manager\", \"Lab Description\": \"Each user workspace tab allows setting a custom title. The title is rendered in the UI using innerHTML. Injecting a script into the title triggers XSS upon switching tabs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app logs all user-issued voice commands. These commands are displayed via innerHTML in a console view. Injecting HTML into a command triggers XSS.", "target": "{\"Lab scenario\": \"XSS via voice assistant command history log\", \"Lab Description\": \"The app logs all user-issued voice commands. These commands are displayed via innerHTML in a console view. Injecting HTML into a command triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via timeline entry in project journal", "target": "{\"Lab scenario\": \"XSS via timeline entry in project journal\", \"Lab Description\": \"The journal logs project updates as timeline entries. Each entry is displayed using innerHTML. A crafted entry leads to script injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via search history tag cloud", "target": "{\"Lab scenario\": \"XSS via search history tag cloud\", \"Lab Description\": \"The app builds a visual tag cloud from users' past search terms. Terms are rendered via innerHTML. Injected HTML in a search term executes code on render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via custom error message in form validation override", "target": "{\"Lab scenario\": \"XSS via custom error message in form validation override\", \"Lab Description\": \"Admins can define custom error messages for failed validations. These are rendered via innerHTML in form fields. Malicious input causes script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via blog post tag rendering", "target": "{\"Lab scenario\": \"XSS via blog post tag rendering\", \"Lab Description\": \"The blog platform allows users to assign custom tags to posts. These tags are rendered using innerHTML. A malicious tag can trigger XSS when viewed on the blog post page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via RSS feed item title injection", "target": "{\"Lab scenario\": \"XSS via RSS feed item title injection\", \"Lab Description\": \"The application displays titles from external RSS feeds. If an attacker controls a feed item title and it is rendered via innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via dynamic avatar tooltip description", "target": "{\"Lab scenario\": \"XSS via dynamic avatar tooltip description\", \"Lab Description\": \"The app shows a tooltip with user bio when hovering over avatars. Bios are inserted into the tooltip container using innerHTML. A malicious bio can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via autocomplete address suggestions", "target": "{\"Lab scenario\": \"XSS via autocomplete address suggestions\", \"Lab Description\": \"The checkout form provides address suggestions based on previous inputs. These are rendered using innerHTML in a datalist. A malicious address triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via forum thread subject preview", "target": "{\"Lab scenario\": \"XSS via forum thread subject preview\", \"Lab Description\": \"The forum displays a preview of the latest thread titles. These are injected into the page using innerHTML. A malicious subject line can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via product review headline", "target": "{\"Lab scenario\": \"XSS via product review headline\", \"Lab Description\": \"Users can submit reviews with headlines. These headlines are shown on product pages using innerHTML. A malicious headline can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via interactive onboarding tip content", "target": "{\"Lab scenario\": \"XSS via interactive onboarding tip content\", \"Lab Description\": \"The onboarding tutorial system displays tips from server-configured content. These tips are rendered into a floating box using innerHTML. If a tip is compromised, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via invoice line-item notes", "target": "{\"Lab scenario\": \"XSS via invoice line-item notes\", \"Lab Description\": \"Line items in invoices can have custom notes. These are rendered with innerHTML in the invoice breakdown. A malicious note results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Kanban cards include editable status fields. These values are rendered with innerHTML. A crafted status text allows XSS injection in the task board.", "target": "{\"Lab scenario\": \"XSS via project status field in kanban board\", \"Lab Description\": \"Kanban cards include editable status fields. These values are rendered with innerHTML. A crafted status text allows XSS injection in the task board.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via calendar event description popup", "target": "{\"Lab scenario\": \"XSS via calendar event description popup\", \"Lab Description\": \"Calendar events show descriptions in a popup when clicked. If the description is rendered using innerHTML, a crafted value can lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via dynamic faq answer content", "target": "{\"Lab scenario\": \"XSS via dynamic FAQ answer content\", \"Lab Description\": \"The FAQ section allows administrators to write answers in rich text. These answers are rendered using innerHTML. A malicious answer content leads to stored XSS when a user visits the FAQ page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via job application cover letter preview", "target": "{\"Lab scenario\": \"XSS via job application cover letter preview\", \"Lab Description\": \"Applicants can enter a cover letter that’s previewed before submission. If the content is injected using innerHTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via editable survey question title", "target": "{\"Lab scenario\": \"XSS via editable survey question title\", \"Lab Description\": \"Admins can add and edit survey questions. The titles are rendered directly into the page. A crafted title allows stored XSS execution when the survey is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via live chat username rendering", "target": "{\"Lab scenario\": \"XSS via live chat username rendering\", \"Lab Description\": \"In the live chat system, usernames are rendered with innerHTML when they join the chat. An attacker can inject script via the username.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via file upload success message", "target": "{\"Lab scenario\": \"XSS via file upload success message\", \"Lab Description\": \"When users upload files, the file name is reflected back in the success message. If rendered unsanitized, this can result in reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via app notification message rendering", "target": "{\"Lab scenario\": \"XSS via app notification message rendering\", \"Lab Description\": \"System-generated notifications may include user-generated content such as names or messages. These are displayed using innerHTML, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via contest entry title", "target": "{\"Lab scenario\": \"XSS via contest entry title\", \"Lab Description\": \"Users can submit creative titles for a contest. These are rendered for public voting using innerHTML. Malicious entries lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic welcome banner", "target": "{\"Lab scenario\": \"XSS via dynamic welcome banner\", \"Lab Description\": \"The homepage shows a personalized welcome message using the user's name. If the name is rendered unsanitized, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via email template custom footer", "target": "{\"Lab scenario\": \"XSS via email template custom footer\", \"Lab Description\": \"Marketing users can set a footer message in the email builder. If rendered in the preview or final email without escaping, stored XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via group chat topic title", "target": "{\"Lab scenario\": \"XSS via group chat topic title\", \"Lab Description\": \"Group chats allow setting a topic. The topic is rendered on top of the chatroom using innerHTML. XSS can occur if the title is unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via custom 404 error message rendering", "target": "{\"Lab scenario\": \"XSS via custom 404 error message rendering\", \"Lab Description\": \"The application allows admins to configure custom 404 error messages. If the message is rendered using innerHTML, attackers can inject a script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via poll results graph labels", "target": "{\"Lab scenario\": \"XSS via poll results graph labels\", \"Lab Description\": \"Poll results are shown using a bar graph. Each bar has a label sourced from user-submitted answers. If labels are rendered using innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via profile 'about me' html bio field", "target": "{\"Lab scenario\": \"XSS via profile 'about me' HTML bio field\", \"Lab Description\": \"The profile page includes an 'about me' field which supports limited HTML. If not sanitized properly, a malicious script can be stored and executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via project feedback suggestion text", "target": "{\"Lab scenario\": \"XSS via project feedback suggestion text\", \"Lab Description\": \"Feedback on projects includes a suggestion text field. These are displayed to admins using innerHTML. XSS is possible through malicious suggestion input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via team dashboard widget name", "target": "{\"Lab scenario\": \"XSS via team dashboard widget name\", \"Lab Description\": \"Teams can customize widget names on their dashboard. These names are injected into the UI using innerHTML. A crafted name results in persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via comment system reply preview", "target": "{\"Lab scenario\": \"XSS via comment system reply preview\", \"Lab Description\": \"When replying to a comment, a live preview is shown using the input. If the content is reflected using innerHTML, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via bug tracker issue title", "target": "{\"Lab scenario\": \"XSS via bug tracker issue title\", \"Lab Description\": \"Bug reports include titles that are rendered in an issue tracker. If innerHTML is used for rendering without escaping, a malicious title triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The activity log renders user actions using innerHTML. A manipulated action message can result in persistent XSS when viewed by an admin.", "target": "{\"Lab scenario\": \"XSS via activity log detail description\", \"Lab Description\": \"The activity log renders user actions using innerHTML. A manipulated action message can result in persistent XSS when viewed by an admin.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via calendar invite title preview", "target": "{\"Lab scenario\": \"XSS via calendar invite title preview\", \"Lab Description\": \"Users can preview the title of a calendar invite before sending it. The title is rendered in a header using innerHTML. If not sanitized, this can lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via webhook configuration name", "target": "{\"Lab scenario\": \"XSS via webhook configuration name\", \"Lab Description\": \"Users can configure and name webhooks. These names are listed in the webhook dashboard using innerHTML. A malicious name triggers XSS in the list view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can set a short status message on their profile. This message is displayed using innerHTML on various pages like friends list and search results. A malicious message leads to XSS.", "target": "{\"Lab scenario\": \"XSS via profile status message rendering\", \"Lab Description\": \"Users can set a short status message on their profile. This message is displayed using innerHTML on various pages like friends list and search results. A malicious message leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via newsletter unsubscribe confirmation page", "target": "{\"Lab scenario\": \"XSS via newsletter unsubscribe confirmation page\", \"Lab Description\": \"After clicking an unsubscribe link, users are shown a confirmation message that includes their email address. The email is reflected using innerHTML. Malicious parameters can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via invoice recipient name rendering", "target": "{\"Lab scenario\": \"XSS via invoice recipient name rendering\", \"Lab Description\": \"Invoices display the recipient's name in the header. If this field is user-controlled and rendered with innerHTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Incoming chat messages are previewed in pop-up notifications. If messages are rendered using innerHTML without filtering, stored XSS is possible.", "target": "{\"Lab scenario\": \"XSS via chat message preview notification\", \"Lab Description\": \"Incoming chat messages are previewed in pop-up notifications. If messages are rendered using innerHTML without filtering, stored XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via music playlist description rendering", "target": "{\"Lab scenario\": \"XSS via music playlist description rendering\", \"Lab Description\": \"Users can add descriptions to playlists. These descriptions are rendered using innerHTML. A malicious description triggers stored XSS on playlist load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via customer support ticket subject line", "target": "{\"Lab scenario\": \"XSS via customer support ticket subject line\", \"Lab Description\": \"Support tickets include a subject line set by the user. If this is rendered in the dashboard with innerHTML, stored XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via event rsvp name rendering", "target": "{\"Lab scenario\": \"XSS via event RSVP name rendering\", \"Lab Description\": \"The RSVP list displays attendee names on the public event page. If names are rendered unsanitized via innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via blog archive post snippet rendering", "target": "{\"Lab scenario\": \"XSS via blog archive post snippet rendering\", \"Lab Description\": \"The blog archive displays a snippet of each post. If the snippet is rendered using innerHTML and contains user-controlled content, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via shipping instruction note", "target": "{\"Lab scenario\": \"XSS via shipping instruction note\", \"Lab Description\": \"Customers can leave special instructions during checkout. These are rendered using innerHTML on the order summary. Malicious notes lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via announcement banner title", "target": "{\"Lab scenario\": \"XSS via announcement banner title\", \"Lab Description\": \"Admins can create banners to be shown site-wide. Banner titles are rendered using innerHTML on all pages. A malicious banner title results in persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via task board column title", "target": "{\"Lab scenario\": \"XSS via task board column title\", \"Lab Description\": \"In the task board view, users can rename column titles (e.g. 'To Do', 'In Progress'). These titles are injected using innerHTML. A malicious title leads to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via file manager folder name", "target": "{\"Lab scenario\": \"XSS via file manager folder name\", \"Lab Description\": \"The web-based file manager allows users to name folders. If the folder name is displayed using innerHTML, it can be abused to execute arbitrary scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via custom footer message in landing page builder", "target": "{\"Lab scenario\": \"XSS via custom footer message in landing page builder\", \"Lab Description\": \"The landing page builder allows setting custom footer text. If rendered without sanitization using innerHTML, this opens the door for stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via e-learning module title input", "target": "{\"Lab scenario\": \"XSS via e-learning module title input\", \"Lab Description\": \"Course creators can enter module titles in the LMS. These titles are rendered in the course overview using innerHTML. XSS occurs when a malicious title is entered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via code snippet filename in ide preview", "target": "{\"Lab scenario\": \"XSS via code snippet filename in IDE preview\", \"Lab Description\": \"The in-browser IDE displays filenames next to code snippets. If the name is unsanitized and rendered with innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Job posters can specify custom locations. These locations are displayed using innerHTML on job listings. A malicious location results in stored XSS.", "target": "{\"Lab scenario\": \"XSS via job listing custom location field\", \"Lab Description\": \"Job posters can specify custom locations. These locations are displayed using innerHTML on job listings. A malicious location results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via personal goal title in productivity app", "target": "{\"Lab scenario\": \"XSS via personal goal title in productivity app\", \"Lab Description\": \"Users can set personal goals with titles. These titles are rendered in the dashboard via innerHTML. A crafted title leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via document annotation popup content", "target": "{\"Lab scenario\": \"XSS via document annotation popup content\", \"Lab Description\": \"The document viewer displays popup annotations on hover. If annotations are stored using innerHTML, XSS can be triggered via crafted annotation content.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The financial dashboard allows tracking stock tickers. If the symbol is reflected in the UI using innerHTML, attackers can inject XSS via the ticker name.", "target": "{\"Lab scenario\": \"XSS via stock ticker symbol display\", \"Lab Description\": \"The financial dashboard allows tracking stock tickers. If the symbol is reflected in the UI using innerHTML, attackers can inject XSS via the ticker name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: System administrators can configure custom alert messages. If the message is reflected using innerHTML, XSS may occur in global alert modals.", "target": "{\"Lab scenario\": \"XSS via system alert configuration message\", \"Lab Description\": \"System administrators can configure custom alert messages. If the message is reflected using innerHTML, XSS may occur in global alert modals.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via api key description in developer dashboard", "target": "{\"Lab scenario\": \"XSS via API key description in developer dashboard\", \"Lab Description\": \"The developer dashboard allows users to label their API keys with custom descriptions. These labels are rendered using innerHTML. A malicious description leads to persistent XSS when viewing the key list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via event log tag entry in admin panel", "target": "{\"Lab scenario\": \"XSS via event log tag entry in admin panel\", \"Lab Description\": \"Event logs are tagged for easier filtering. Tags are rendered into filter dropdowns using innerHTML. A malicious tag name can lead to XSS when admins browse filters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via user's 'current mood' status", "target": "{\"Lab scenario\": \"XSS via user's 'current mood' status\", \"Lab Description\": \"Social profiles display a 'current mood' message submitted by users. The message is shown using innerHTML, and a malicious payload can lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via custom bookmark folder name", "target": "{\"Lab scenario\": \"XSS via custom bookmark folder name\", \"Lab Description\": \"Users can organize saved pages into folders with custom names. If the folder name is rendered using innerHTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can assign custom text labels to emoji reactions. These labels are shown in tooltips using innerHTML. A crafted label triggers XSS on hover.", "target": "{\"Lab scenario\": \"XSS via comment system reaction emoji label\", \"Lab Description\": \"Users can assign custom text labels to emoji reactions. These labels are shown in tooltips using innerHTML. A crafted label triggers XSS on hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via account deletion reason", "target": "{\"Lab scenario\": \"XSS via account deletion reason\", \"Lab Description\": \"When a user deletes their account, they can submit a reason. Admins review this input in a panel that uses innerHTML, allowing for persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Sales agents can log notes on client records. If these notes are rendered using innerHTML, a malicious note can trigger XSS.", "target": "{\"Lab scenario\": \"XSS via CRM contact note rendering\", \"Lab Description\": \"Sales agents can log notes on client records. If these notes are rendered using innerHTML, a malicious note can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Vendors can define custom shipping method names. If rendered unsanitized, these names can introduce XSS in the checkout interface.", "target": "{\"Lab scenario\": \"XSS via online store shipping method label\", \"Lab Description\": \"Vendors can define custom shipping method names. If rendered unsanitized, these names can introduce XSS in the checkout interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via appointment title in calendar tooltip", "target": "{\"Lab scenario\": \"XSS via appointment title in calendar tooltip\", \"Lab Description\": \"Calendar events display their titles in tooltips. If the title includes a malicious payload and is rendered with innerHTML, XSS can occur on hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via live auction item name", "target": "{\"Lab scenario\": \"XSS via live auction item name\", \"Lab Description\": \"The auction platform allows sellers to name items freely. These names are rendered in real-time to all viewers using innerHTML. A crafted name results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via profile badge custom label", "target": "{\"Lab scenario\": \"XSS via profile badge custom label\", \"Lab Description\": \"Users can customize labels for their profile badges. These labels are rendered using innerHTML on profile visits. A malicious label can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Team pages allow admins to add an intro blurb. This is shown on public team profiles using innerHTML. Unsanitized input leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via team introduction blurb\", \"Lab Description\": \"Team pages allow admins to add an intro blurb. This is shown on public team profiles using innerHTML. Unsanitized input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via meeting agenda topic title", "target": "{\"Lab scenario\": \"XSS via meeting agenda topic title\", \"Lab Description\": \"Meeting organizers can define custom agenda topics. These are shown on shared pages using innerHTML. A malicious title results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via job applicant cover letter filename", "target": "{\"Lab scenario\": \"XSS via job applicant cover letter filename\", \"Lab Description\": \"HR portal displays uploaded cover letter filenames. These are inserted into HTML using innerHTML. If filenames are not sanitized, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via food delivery special instruction field", "target": "{\"Lab scenario\": \"XSS via food delivery special instruction field\", \"Lab Description\": \"The app allows customers to provide delivery instructions. These are shown to the courier using innerHTML. A malicious instruction leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via transaction note in personal finance tracker", "target": "{\"Lab scenario\": \"XSS via transaction note in personal finance tracker\", \"Lab Description\": \"Users can tag transactions with notes. These are rendered in reports using innerHTML. A crafted note results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via user-submitted bug reproduction steps", "target": "{\"Lab scenario\": \"XSS via user-submitted bug reproduction steps\", \"Lab Description\": \"Bug reporters can enter reproduction steps. These are shown to developers in HTML view. A malicious step can trigger XSS if innerHTML is used.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via recipe comment in cooking platform", "target": "{\"Lab scenario\": \"XSS via recipe comment in cooking platform\", \"Lab Description\": \"Users can leave comments under recipes. These are rendered using innerHTML. A malicious comment results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via payment failure reason on checkout", "target": "{\"Lab scenario\": \"XSS via payment failure reason on checkout\", \"Lab Description\": \"If a payment fails, the gateway may include a failure reason in the redirect. This is reflected using innerHTML, allowing for reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via resume headline field in job portal", "target": "{\"Lab scenario\": \"XSS via resume headline field in job portal\", \"Lab Description\": \"Job seekers can add a headline to their resume. This field is displayed on search results using innerHTML. A malicious headline leads to stored XSS when viewed by recruiters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via calendar event location field", "target": "{\"Lab scenario\": \"XSS via calendar event location field\", \"Lab Description\": \"Users can add a location to calendar events. The location is rendered using innerHTML in the event details panel. A crafted location can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via social media post caption", "target": "{\"Lab scenario\": \"XSS via social media post caption\", \"Lab Description\": \"Users can create posts with captions. These are rendered using innerHTML on public feeds. A malicious caption leads to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via iot device label in smart home dashboard", "target": "{\"Lab scenario\": \"XSS via IoT device label in smart home dashboard\", \"Lab Description\": \"Users can assign custom names to their IoT devices. These names are rendered using innerHTML in the dashboard. A crafted name can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can report posts with a reason. These reasons are shown to moderators using innerHTML. A malicious reason can cause stored XSS in the mod view.", "target": "{\"Lab scenario\": \"XSS via user report description in moderation panel\", \"Lab Description\": \"Users can report posts with a reason. These reasons are shown to moderators using innerHTML. A malicious reason can cause stored XSS in the mod view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can create custom playlists on a video platform. Playlist titles are rendered using innerHTML. A malicious title can lead to stored XSS on the playlist viewer page.", "target": "{\"Lab scenario\": \"XSS via video playlist title in streaming platform\", \"Lab Description\": \"Users can create custom playlists on a video platform. Playlist titles are rendered using innerHTML. A malicious title can lead to stored XSS on the playlist viewer page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via friend group name in messaging app", "target": "{\"Lab scenario\": \"XSS via friend group name in messaging app\", \"Lab Description\": \"The app allows grouping contacts under custom labels. Group names are rendered using innerHTML in the sidebar. A crafted group name causes XSS when the group is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can assign labels to QR codes. These labels are rendered using innerHTML in dashboards. A malicious label can trigger XSS in QR viewer.", "target": "{\"Lab scenario\": \"XSS via QR code label in scanner dashboard\", \"Lab Description\": \"Admins can assign labels to QR codes. These labels are rendered using innerHTML in dashboards. A malicious label can trigger XSS in QR viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can tag images with custom text. Tag names are rendered using innerHTML below each image. A malicious tag can cause XSS.", "target": "{\"Lab scenario\": \"XSS via image gallery tag name\", \"Lab Description\": \"Users can tag images with custom text. Tag names are rendered using innerHTML below each image. A malicious tag can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via donation message in charity platform", "target": "{\"Lab scenario\": \"XSS via donation message in charity platform\", \"Lab Description\": \"Supporters can leave a message with their donations. Messages are rendered using innerHTML in public feed. Malicious input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Multiplayer games allow custom lobby names. These are broadcasted live to all players using innerHTML. A crafted name leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via real-time game lobby name\", \"Lab Description\": \"Multiplayer games allow custom lobby names. These are broadcasted live to all players using innerHTML. A crafted name leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via auction bid comment field", "target": "{\"Lab scenario\": \"XSS via auction bid comment field\", \"Lab Description\": \"Bidders can leave a comment with their bids. These comments are shown using innerHTML. A malicious comment triggers stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via shipping provider name in tracking system", "target": "{\"Lab scenario\": \"XSS via shipping provider name in tracking system\", \"Lab Description\": \"Admins can add shipping provider names manually. These are rendered via innerHTML in the tracking status page. A malicious name leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via leaderboard player nickname", "target": "{\"Lab scenario\": \"XSS via leaderboard player nickname\", \"Lab Description\": \"Players can set nicknames in leaderboards. If rendered via innerHTML, a crafted name leads to persistent XSS for viewers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via code review comment in dev collaboration tool", "target": "{\"Lab scenario\": \"XSS via code review comment in dev collaboration tool\", \"Lab Description\": \"Reviewers can comment on code snippets. Comments are rendered with innerHTML next to code. A crafted comment triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via onboarding welcome message customization", "target": "{\"Lab scenario\": \"XSS via onboarding welcome message customization\", \"Lab Description\": \"Admins can customize the welcome message shown to new users during onboarding. If this message is rendered using innerHTML, a malicious input can result in stored XSS for every new user.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via refund reason field in e-commerce admin", "target": "{\"Lab scenario\": \"XSS via refund reason field in e-commerce admin\", \"Lab Description\": \"When a refund is issued, admins can specify a reason which is displayed to the user. If the input is rendered without sanitization, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via fitness challenge team name", "target": "{\"Lab scenario\": \"XSS via fitness challenge team name\", \"Lab Description\": \"Users can create fitness challenges and assign their own team names. These are rendered on challenge pages via innerHTML. A crafted name results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via CMS plugin configuration field", "target": "{\"Lab scenario\": \"XSS via CMS plugin configuration field\", \"Lab Description\": \"A CMS plugin allows user-defined descriptions to appear in its output. These fields are rendered with innerHTML. A malicious input can lead to stored XSS on the frontend.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via guestbook entry on public page", "target": "{\"Lab scenario\": \"XSS via guestbook entry on public page\", \"Lab Description\": \"A public-facing guestbook allows anonymous users to leave messages. Entries are rendered using innerHTML without proper escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via banking memo field in transaction list", "target": "{\"Lab scenario\": \"XSS via banking memo field in transaction list\", \"Lab Description\": \"Bank customers can attach memos to transfers. These are displayed in the transaction history using innerHTML. XSS is possible if input is not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via email alias name in mailbox overview", "target": "{\"Lab scenario\": \"XSS via email alias name in mailbox overview\", \"Lab Description\": \"Users can create email aliases with custom names. These are rendered in the UI using innerHTML. XSS occurs if input is not escaped.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via survey title in analytics dashboard", "target": "{\"Lab scenario\": \"XSS via survey title in analytics dashboard\", \"Lab Description\": \"Survey creators can name their surveys. These titles appear in dashboards using innerHTML. A malicious title leads to stored XSS for admins.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Developers can add descriptions to API routes. These are rendered in the API gateway UI using innerHTML. If not sanitized, they are vulnerable to XSS.", "target": "{\"Lab scenario\": \"XSS via API gateway route description\", \"Lab Description\": \"Developers can add descriptions to API routes. These are rendered in the API gateway UI using innerHTML. If not sanitized, they are vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via education platform lesson subtitle", "target": "{\"Lab scenario\": \"XSS via education platform lesson subtitle\", \"Lab Description\": \"Lesson creators can provide subtitles. These appear under videos using innerHTML. A malicious subtitle leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via job title in internal HR portal", "target": "{\"Lab scenario\": \"XSS via job title in internal HR portal\", \"Lab Description\": \"Employees can submit custom job titles that appear in internal directories. These titles are rendered with innerHTML. A crafted title causes stored XSS when viewed by other employees.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can submit custom answers in live polls. These answers are displayed live using innerHTML. If not sanitized, this can lead to DOM-based XSS.", "target": "{\"Lab scenario\": \"XSS via live polling answer text\", \"Lab Description\": \"Users can submit custom answers in live polls. These answers are displayed live using innerHTML. If not sanitized, this can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via feedback category label in support portal", "target": "{\"Lab scenario\": \"XSS via feedback category label in support portal\", \"Lab Description\": \"Users can suggest custom feedback categories. These are displayed to all users using innerHTML. A malicious label causes persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via weather widget city name", "target": "{\"Lab scenario\": \"XSS via weather widget city name\", \"Lab Description\": \"Users can add custom cities to their weather widgets. If the city name is injected unsanitized into innerHTML, XSS can occur in the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via mobile app push notification title", "target": "{\"Lab scenario\": \"XSS via mobile app push notification title\", \"Lab Description\": \"Admins can create push notifications. If the title is displayed using innerHTML in the web version, an XSS attack can be triggered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can set nicknames for contacts in their address book. These nicknames are rendered in the UI using innerHTML. XSS occurs if input is not sanitized.", "target": "{\"Lab scenario\": \"XSS via address book contact nickname\", \"Lab Description\": \"Users can set nicknames for contacts in their address book. These nicknames are rendered in the UI using innerHTML. XSS occurs if input is not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via conference attendee badge title", "target": "{\"Lab scenario\": \"XSS via conference attendee badge title\", \"Lab Description\": \"Attendees can enter a badge title. This title is rendered in the live event viewer using innerHTML. XSS is possible if not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via custom reaction label in messaging platform", "target": "{\"Lab scenario\": \"XSS via custom reaction label in messaging platform\", \"Lab Description\": \"Users can add custom labels to emoji reactions. Labels are rendered in tooltips via innerHTML. A crafted label can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can add descriptions to their music playlists. These are rendered in the app UI using innerHTML. If not escaped, a malicious description can cause XSS.", "target": "{\"Lab scenario\": \"XSS via playlist description in music app\", \"Lab Description\": \"Users can add descriptions to their music playlists. These are rendered in the app UI using innerHTML. If not escaped, a malicious description can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via virtual classroom whiteboard notes", "target": "{\"Lab scenario\": \"XSS via virtual classroom whiteboard notes\", \"Lab Description\": \"Teachers can push quick notes to a virtual whiteboard. These notes are rendered in student browsers using innerHTML. A malicious note results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via live chat channel topic", "target": "{\"Lab scenario\": \"XSS via live chat channel topic\", \"Lab Description\": \"Users can set topics for chat channels. These topics are rendered in the chat header using innerHTML. If unsanitized, a crafted topic results in persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via expense report note field", "target": "{\"Lab scenario\": \"XSS via expense report note field\", \"Lab Description\": \"Employees can attach notes to expense reports. These notes are rendered in finance dashboards using innerHTML. A malicious note can cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via smart device custom label in iot platform", "target": "{\"Lab scenario\": \"XSS via smart device custom label in IoT platform\", \"Lab Description\": \"Users can rename their devices. Labels are rendered via innerHTML in dashboards. A crafted name leads to XSS when the device is displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Instructors can create custom quiz questions. If these are rendered with innerHTML, a malicious question text can result in stored XSS.", "target": "{\"Lab scenario\": \"XSS via e-learning quiz question field\", \"Lab Description\": \"Instructors can create custom quiz questions. If these are rendered with innerHTML, a malicious question text can result in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via booking confirmation message", "target": "{\"Lab scenario\": \"XSS via booking confirmation message\", \"Lab Description\": \"Users receive confirmation messages for bookings. These are constructed with innerHTML using submitted notes. A crafted note can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via project tag in team management tool", "target": "{\"Lab scenario\": \"XSS via project tag in team management tool\", \"Lab Description\": \"Project managers can add custom tags to projects. Tags are displayed using innerHTML. If unsanitized, a crafted tag causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users sign documents with a typed signature. The name is rendered using innerHTML in the final preview. A crafted name triggers XSS.", "target": "{\"Lab scenario\": \"XSS via digital signature name in approval system\", \"Lab Description\": \"Users sign documents with a typed signature. The name is rendered using innerHTML in the final preview. A crafted name triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via bug tracker issue label", "target": "{\"Lab scenario\": \"XSS via bug tracker issue label\", \"Lab Description\": \"Developers can label issues with custom text. If rendered via innerHTML, a crafted label causes stored XSS in the issue list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can assign nicknames to vehicles. These are rendered in dashboards via innerHTML. If unsanitized, XSS occurs.", "target": "{\"Lab scenario\": \"XSS via vehicle nickname in fleet management\", \"Lab Description\": \"Admins can assign nicknames to vehicles. These are rendered in dashboards via innerHTML. If unsanitized, XSS occurs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Top reviews are highlighted with a custom title. If rendered unsanitized using innerHTML, XSS occurs on product detail view.", "target": "{\"Lab scenario\": \"XSS via featured review title on product page\", \"Lab Description\": \"Top reviews are highlighted with a custom title. If rendered unsanitized using innerHTML, XSS occurs on product detail view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via invoice note in billing platform", "target": "{\"Lab scenario\": \"XSS via invoice note in billing platform\", \"Lab Description\": \"Clients can attach notes to invoices. These notes are displayed in the client portal using innerHTML. If unsanitized, the note can cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Marketing teams can name newsletter campaigns. Campaign names appear in the dashboard via innerHTML. Malicious names trigger XSS.", "target": "{\"Lab scenario\": \"XSS via newsletter campaign name\", \"Lab Description\": \"Marketing teams can name newsletter campaigns. Campaign names appear in the dashboard via innerHTML. Malicious names trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via virtual event room name", "target": "{\"Lab scenario\": \"XSS via virtual event room name\", \"Lab Description\": \"Event organizers can name virtual rooms. These names are reflected into the frontend using innerHTML. A malicious name results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can add books with custom titles. These are rendered via innerHTML on the catalog page. Unsanitized input causes XSS.", "target": "{\"Lab scenario\": \"XSS via book title in online library system\", \"Lab Description\": \"Admins can add books with custom titles. These are rendered via innerHTML on the catalog page. Unsanitized input causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via system announcement title", "target": "{\"Lab scenario\": \"XSS via system announcement title\", \"Lab Description\": \"Admins can post announcements. The title is displayed on the homepage using innerHTML. If not sanitized, XSS occurs for all users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can build travel itineraries with named stops. These names are rendered in the app using innerHTML. A crafted name results in XSS.", "target": "{\"Lab scenario\": \"XSS via travel itinerary stop name\", \"Lab Description\": \"Users can build travel itineraries with named stops. These names are rendered in the app using innerHTML. A crafted name results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via personal goal title in productivity tracker", "target": "{\"Lab scenario\": \"XSS via personal goal title in productivity tracker\", \"Lab Description\": \"Users can set personal goals with titles. Titles are rendered in goal overviews using innerHTML. Malicious input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via virtual workspace tab name", "target": "{\"Lab scenario\": \"XSS via virtual workspace tab name\", \"Lab Description\": \"Users can create tabs within their workspace. Tab names are displayed in the interface using innerHTML. A malicious name causes DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via clinic appointment reason text", "target": "{\"Lab scenario\": \"XSS via clinic appointment reason text\", \"Lab Description\": \"Patients can provide appointment reasons. These are rendered in the doctor dashboard using innerHTML. XSS is possible if unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via warehouse product bin label", "target": "{\"Lab scenario\": \"XSS via warehouse product bin label\", \"Lab Description\": \"Warehouse managers can label storage bins. Labels are rendered via innerHTML in the inventory app. A malicious label can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via forum signature field", "target": "{\"Lab scenario\": \"XSS via forum signature field\", \"Lab Description\": \"Users can add signatures to their forum profiles. These are displayed under every post using innerHTML. A malicious signature causes stored XSS on every thread visit.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via peer review comment title", "target": "{\"Lab scenario\": \"XSS via peer review comment title\", \"Lab Description\": \"Students can leave peer reviews with custom titles. These titles are rendered in the review summary using innerHTML. A crafted title results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via emergency alert title in control dashboard", "target": "{\"Lab scenario\": \"XSS via emergency alert title in control dashboard\", \"Lab Description\": \"Admins can broadcast emergency alerts. Alert titles are rendered with innerHTML in a dashboard. If unsanitized, this results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via code snippet title in sharing platform", "target": "{\"Lab scenario\": \"XSS via code snippet title in sharing platform\", \"Lab Description\": \"Users can share code snippets with titles. These titles are shown in listings using innerHTML. A malicious title results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via bug bounty report summary", "target": "{\"Lab scenario\": \"XSS via bug bounty report summary\", \"Lab Description\": \"Researchers submit summaries for their bug reports. These are displayed to the security team using innerHTML. Unsanitized input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via comment section username", "target": "{\"Lab scenario\": \"XSS via comment section username\", \"Lab Description\": \"Usernames are displayed beside comments using innerHTML. If usernames are not sanitized, stored XSS can be executed by simply posting a comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via product category name in inventory app", "target": "{\"Lab scenario\": \"XSS via product category name in inventory app\", \"Lab Description\": \"Admins can create custom product categories. Category names appear in dropdowns using innerHTML. A malicious name results in DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via meeting agenda point in scheduler", "target": "{\"Lab scenario\": \"XSS via meeting agenda point in scheduler\", \"Lab Description\": \"Team leads can set meeting points. Points are rendered via innerHTML in the scheduler. A crafted point triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Log entries include a user-supplied detail field. These are rendered using innerHTML in the admin log viewer. Unsanitized values allow stored XSS.", "target": "{\"Lab scenario\": \"XSS via log entry detail field in admin panel\", \"Lab Description\": \"Log entries include a user-supplied detail field. These are rendered using innerHTML in the admin log viewer. Unsanitized values allow stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via ai assistant custom command label", "target": "{\"Lab scenario\": \"XSS via AI assistant custom command label\", \"Lab Description\": \"Users can name their custom AI assistant commands. These names are rendered using innerHTML in the assistant UI. A malicious name results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via contact form department selector label", "target": "{\"Lab scenario\": \"XSS via contact form department selector label\", \"Lab Description\": \"The contact form dynamically displays the selected department name using innerHTML. A maliciously crafted department name can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The chatbot suggests reply labels, generated from prior messages. These are inserted into the page using innerHTML. Malicious content can cause XSS.", "target": "{\"Lab scenario\": \"XSS via chatbot suggested reply label\", \"Lab Description\": \"The chatbot suggests reply labels, generated from prior messages. These are inserted into the page using innerHTML. Malicious content can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via audio track title in music playlist viewer", "target": "{\"Lab scenario\": \"XSS via audio track title in music playlist viewer\", \"Lab Description\": \"Users can add audio tracks with custom titles. These titles appear in playlists using innerHTML. A malicious title results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via reviewer's position in testimonial section", "target": "{\"Lab scenario\": \"XSS via reviewer's position in testimonial section\", \"Lab Description\": \"Users providing testimonials can specify a position. This appears on the public site using innerHTML. A crafted position causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The system stores responses from webhook targets and renders titles using innerHTML. A malicious response payload can trigger stored XSS.", "target": "{\"Lab scenario\": \"XSS via webhook response preview title\", \"Lab Description\": \"The system stores responses from webhook targets and renders titles using innerHTML. A malicious response payload can trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via remote config key name in devops dashboard", "target": "{\"Lab scenario\": \"XSS via remote config key name in DevOps dashboard\", \"Lab Description\": \"DevOps users can define remote config keys. Key names are rendered in real-time using innerHTML. A malicious name can result in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can define aliases for travel destinations. These appear in confirmations using innerHTML. A crafted alias causes XSS.", "target": "{\"Lab scenario\": \"XSS via booking location alias in travel system\", \"Lab Description\": \"Users can define aliases for travel destinations. These appear in confirmations using innerHTML. A crafted alias causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Project milestones can be named by users. These names are rendered in task boards using innerHTML. Unsanitized names cause stored XSS.", "target": "{\"Lab scenario\": \"XSS via project milestone name in Kanban board\", \"Lab Description\": \"Project milestones can be named by users. These names are rendered in task boards using innerHTML. Unsanitized names cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can place custom markers with labels. These labels are rendered using innerHTML. A malicious label causes XSS when the map is loaded.", "target": "{\"Lab scenario\": \"XSS via map marker label in geo-tracking app\", \"Lab Description\": \"Users can place custom markers with labels. These labels are rendered using innerHTML. A malicious label causes XSS when the map is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via payment reference note in invoice preview", "target": "{\"Lab scenario\": \"XSS via payment reference note in invoice preview\", \"Lab Description\": \"Users can add a reference note when paying invoices. These are displayed in preview using innerHTML. Unsanitized input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via file upload label name in document management system", "target": "{\"Lab scenario\": \"XSS via file upload label name in document management system\", \"Lab Description\": \"Users can assign custom labels to uploaded files. These labels are rendered using innerHTML in the file listing panel. A crafted label can result in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via product customization field in checkout form", "target": "{\"Lab scenario\": \"XSS via product customization field in checkout form\", \"Lab Description\": \"Users can add customization notes for products. These are rendered in the order summary using innerHTML. Unsanitized notes cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via bug tracker component name", "target": "{\"Lab scenario\": \"XSS via bug tracker component name\", \"Lab Description\": \"Bug reports allow setting the affected component name. This is displayed in listings using innerHTML. A crafted name leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can name API clients. These names appear next to tokens using innerHTML. Malicious input leads to stored XSS in the panel.", "target": "{\"Lab scenario\": \"XSS via API client name in token manager\", \"Lab Description\": \"Admins can name API clients. These names appear next to tokens using innerHTML. Malicious input leads to stored XSS in the panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via chat bot trigger word display", "target": "{\"Lab scenario\": \"XSS via chat bot trigger word display\", \"Lab Description\": \"Custom trigger words for bots are shown in logs. These are rendered using innerHTML. A malicious trigger word results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via email subject line preview", "target": "{\"Lab scenario\": \"XSS via email subject line preview\", \"Lab Description\": \"The email preview interface displays the subject via innerHTML. A crafted subject line can result in reflected XSS when loaded from query parameters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: After importing CSV data, confirmation screen renders raw values via innerHTML. A crafted CSV cell value can trigger stored XSS.", "target": "{\"Lab scenario\": \"XSS via CSV import confirmation screen\", \"Lab Description\": \"After importing CSV data, confirmation screen renders raw values via innerHTML. A crafted CSV cell value can trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Developers can write changelogs. Entries are rendered via innerHTML in the version viewer. A malicious changelog causes persistent XSS.", "target": "{\"Lab scenario\": \"XSS via app update changelog entry\", \"Lab Description\": \"Developers can write changelogs. Entries are rendered via innerHTML in the version viewer. A malicious changelog causes persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via social media group description", "target": "{\"Lab scenario\": \"XSS via social media group description\", \"Lab Description\": \"Group creators can set descriptions. Descriptions are shown via innerHTML in group pages. A crafted description causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave suggestions via a floating widget. Suggestions appear in the admin panel using innerHTML. Unsanitized input triggers stored XSS.", "target": "{\"Lab scenario\": \"XSS via feedback widget suggestion field\", \"Lab Description\": \"Users can leave suggestions via a floating widget. Suggestions appear in the admin panel using innerHTML. Unsanitized input triggers stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave timestamp-tagged comments on videos. These timestamps are rendered using innerHTML. A malicious timestamp tag can trigger stored XSS.", "target": "{\"Lab scenario\": \"XSS via video comment timestamp tag\", \"Lab Description\": \"Users can leave timestamp-tagged comments on videos. These timestamps are rendered using innerHTML. A malicious timestamp tag can trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: IoT logs allow custom tags. These tags are reflected in logs using innerHTML. Malicious tags can trigger stored XSS in admin dashboards.", "target": "{\"Lab scenario\": \"XSS via IoT device debug log tag\", \"Lab Description\": \"IoT logs allow custom tags. These tags are reflected in logs using innerHTML. Malicious tags can trigger stored XSS in admin dashboards.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via qr code label in asset management system", "target": "{\"Lab scenario\": \"XSS via QR code label in asset management system\", \"Lab Description\": \"Labels assigned to assets are shown with the QR code using innerHTML. A malicious label can cause XSS on asset inspection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Live polls in stream chats allow user-submitted options. These are inserted via innerHTML. A crafted poll option causes stored XSS.", "target": "{\"Lab scenario\": \"XSS via live stream chat poll option text\", \"Lab Description\": \"Live polls in stream chats allow user-submitted options. These are inserted via innerHTML. A crafted poll option causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: DevOps users can write release notes. These are rendered in dashboards using innerHTML. Unsanitized notes trigger persistent XSS.", "target": "{\"Lab scenario\": \"XSS via release note entry in CI/CD tool\", \"Lab Description\": \"DevOps users can write release notes. These are rendered in dashboards using innerHTML. Unsanitized notes trigger persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via game character nickname field", "target": "{\"Lab scenario\": \"XSS via game character nickname field\", \"Lab Description\": \"Players can assign nicknames to characters. These names are shown in the scoreboard using innerHTML. A malicious nickname causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via virtual tour stop title", "target": "{\"Lab scenario\": \"XSS via virtual tour stop title\", \"Lab Description\": \"Admins can name virtual stops in a tour. Titles are rendered via innerHTML. Unsanitized input causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Prompt history is saved and rendered using innerHTML. A crafted prompt string can result in stored XSS when revisiting history.", "target": "{\"Lab scenario\": \"XSS via AI prompt history entry\", \"Lab Description\": \"Prompt history is saved and rendered using innerHTML. A crafted prompt string can result in stored XSS when revisiting history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via external service alias in integrations dashboard", "target": "{\"Lab scenario\": \"XSS via external service alias in integrations dashboard\", \"Lab Description\": \"Users can create aliases for external services. These aliases are rendered via innerHTML in the integrations panel. A malicious alias causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via user-created playlist folder name", "target": "{\"Lab scenario\": \"XSS via user-created playlist folder name\", \"Lab Description\": \"Users can group playlists into folders. Folder names are rendered via innerHTML. A crafted folder name causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can create calendar events with titles. These titles are rendered using innerHTML in event popups. A crafted title causes stored XSS.", "target": "{\"Lab scenario\": \"XSS via custom calendar event title\", \"Lab Description\": \"Users can create calendar events with titles. These titles are rendered using innerHTML in event popups. A crafted title causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via invoice recipient name in billing dashboard", "target": "{\"Lab scenario\": \"XSS via invoice recipient name in billing dashboard\", \"Lab Description\": \"Invoices include recipient names displayed using innerHTML. A crafted name can trigger XSS when viewing invoice history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via push notification preview content", "target": "{\"Lab scenario\": \"XSS via push notification preview content\", \"Lab Description\": \"Push notifications can be previewed before sending. The content is rendered using innerHTML. Malicious content triggers reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via voice assistant custom command name", "target": "{\"Lab scenario\": \"XSS via voice assistant custom command name\", \"Lab Description\": \"Users can define voice commands. These names are rendered using innerHTML in the web dashboard. A crafted command causes persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can add survey questions. Questions are rendered via innerHTML in response forms. A crafted question leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via survey question field in feedback system\", \"Lab Description\": \"Admins can add survey questions. Questions are rendered via innerHTML in response forms. A crafted question leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in feedback widget", "target": "{\"Lab scenario\": \"Stored XSS in Feedback Widget\", \"Lab Description\": \"The feedback widget stores user-submitted feedback and displays it for admin review. The text is injected into the DOM using innerHTML without escaping, allowing stored XSS.\\nTo solve: Submit a feedback entry with script code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in newsletter signup confirmation", "target": "{\"Lab scenario\": \"Reflected XSS in Newsletter Signup Confirmation\", \"Lab Description\": \"After a newsletter signup, the server reflects the name parameter in a confirmation message. This allows reflected XSS via the URL.\\nTo solve: Inject script in the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in Chat Preview", "target": "{\"Lab scenario\": \"DOM-based XSS in Chat Preview\", \"Lab Description\": \"A chat preview interface uses localStorage to show the last message in the DOM via innerHTML. A crafted value can execute code when the preview is loaded.\\nTo solve: Inject XSS via localStorage and refresh the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in blog post comments", "target": "{\"Lab scenario\": \"Stored XSS in Blog Post Comments\", \"Lab Description\": \"A blog page lets users comment on posts. Comments are stored in memory and rendered directly on the blog without sanitization, allowing stored XSS.\\nTo solve: Submit a comment containing a script and refresh the blog to see it execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in support ticket viewer", "target": "{\"Lab scenario\": \"Reflected XSS in Support Ticket Viewer\", \"Lab Description\": \"The support dashboard displays ticket previews by taking `title` and `desc` as query parameters. These are inserted into the DOM without escaping, allowing reflected XSS via the `desc` field.\\nTo solve: Inject a script in the desc parameter to trigger an alert on preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS via Drag-and-Drop Upload Preview", "target": "{\"Lab scenario\": \"DOM-based XSS via Drag-and-Drop Upload Preview\", \"Lab Description\": \"The dashboard includes a drag-and-drop file upload zone with preview text. The application sets the preview using `innerHTML` from the dragged file name without sanitization.\\nTo solve: Simulate a drag-drop event with a crafted filename triggering script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A web-based chatbot logs previous interactions and loads them from local storage using `innerHTML`. Messages are not encoded before rendering, allowing injection.\nTo solve: Inject a payload into localStorage and reload to trigger XSS.", "target": "{\"Lab scenario\": \"Stored XSS in ChatBot Interaction History\", \"Lab Description\": \"A web-based chatbot logs previous interactions and loads them from local storage using `innerHTML`. Messages are not encoded before rendering, allowing injection.\\nTo solve: Inject a payload into localStorage and reload to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Username in WebSocket Debug Echo", "target": "{\"Lab scenario\": \"Reflected XSS via Username in WebSocket Debug Echo\", \"Lab Description\": \"A debug tool sends WebSocket messages with a username in the query string. The page reflects the username using `document.write`, exposing it to XSS.\\nTo solve: Craft a URL with a payload in the `user` parameter that executes in real-time.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in theme name for admin preview", "target": "{\"Lab scenario\": \"Stored XSS in Theme Name for Admin Preview\", \"Lab Description\": \"Admin panel allows creating custom UI themes. The theme name is stored and reflected without escaping in a preview panel using `innerHTML`.\\nTo solve: Inject a payload as a theme name, save it, and preview to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in url fragment-based loader", "target": "{\"Lab scenario\": \"DOM-based XSS in URL Fragment-based Loader\", \"Lab Description\": \"A documentation site loads pages based on the URL fragment and injects it into the DOM using `innerHTML`. No validation is done on the hash, enabling XSS.\\nTo solve: Craft a URL with a malicious hash and observe DOM execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Search Suggestion Parameter", "target": "{\"Lab scenario\": \"Reflected XSS via Search Suggestion Parameter\", \"Lab Description\": \"The search page accepts a `suggest` parameter that is reflected directly into a live suggestion box using `innerHTML`. There is no sanitization, and script injection is possible.\\nTo solve: Inject a payload via the suggest parameter and trigger execution in the suggestion box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in comment system avatar field", "target": "{\"Lab scenario\": \"Stored XSS in Comment System Avatar Field\", \"Lab Description\": \"Users can leave comments with a custom avatar URL. The server stores the avatar field and renders it in an <img> tag without validation.\\nTo solve: Submit a comment with an avatar containing a malicious payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss via dynamic faq loader", "target": "{\"Lab scenario\": \"DOM XSS via Dynamic FAQ Loader\", \"Lab Description\": \"The FAQ page loads answers based on the question ID from the URL and inserts content using `innerHTML`. It trusts hash fragments and does not sanitize them.\\nTo solve: Inject a payload into the fragment and observe script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in email invitation link", "target": "{\"Lab scenario\": \"Reflected XSS in Email Invitation Link\", \"Lab Description\": \"A collaboration tool sends invitation links with a `ref` parameter that gets rendered on the join page using `document.write`. There’s no escaping.\\nTo solve: Craft a malicious `ref` that executes JavaScript when opened.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An image gallery allows uploading a picture with a title. The title is rendered with `innerHTML` and stored without sanitization, allowing persistent XSS.\nTo solve: Upload an image with a malicious title payload.", "target": "{\"Lab scenario\": \"Stored XSS in Image Gallery Title Field\", \"Lab Description\": \"An image gallery allows uploading a picture with a title. The title is rendered with `innerHTML` and stored without sanitization, allowing persistent XSS.\\nTo solve: Upload an image with a malicious title payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via mathml inside svg", "target": "{\"Lab scenario\": \"XSS via MathML inside SVG\", \"Lab Description\": \"The app allows users to upload and preview SVG content. When MathML is embedded within the SVG and improperly sanitized, script execution becomes possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via jsonp callback reflection", "target": "{\"Lab scenario\": \"XSS via JSONP callback reflection\", \"Lab Description\": \"The app provides JSONP API for legacy support. The callback parameter is not sanitized, allowing injection of arbitrary scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via base64 decoded input injection", "target": "{\"Lab scenario\": \"XSS via base64 decoded input injection\", \"Lab Description\": \"User input is expected to be base64 encoded. App decodes it and renders it directly without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app generates email previews using user input for testing. Email body is inserted directly into the preview with no output encoding.", "target": "{\"Lab scenario\": \"XSS via email template injection\", \"Lab Description\": \"The app generates email previews using user input for testing. Email body is inserted directly into the preview with no output encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a high Cross-site scripting lab for: xss via pdf annotation preview", "target": "{\"Lab scenario\": \"XSS via PDF annotation preview\", \"Lab Description\": \"The app previews PDF annotation content in HTML. Malicious input in annotation text gets rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via JavaScript URI in dynamically created script tag", "target": "{\"Lab scenario\": \"XSS via JavaScript URI in dynamically created script tag\", \"Lab Description\": \"The application allows users to submit URLs that are later injected into dynamically created script tags. JavaScript URIs are not filtered, allowing for immediate execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in real-time log console via WebSocket echo", "target": "{\"Lab scenario\": \"XSS in real-time log console via WebSocket echo\", \"Lab Description\": \"Admin panel shows logs via WebSocket. Logs reflect user actions in real-time. Injecting a script into the action message causes script execution on admin’s panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via open redirect preview page", "target": "{\"Lab scenario\": \"XSS via open redirect preview page\", \"Lab Description\": \"User can preview a redirect destination. The redirect URL is rendered in a sandboxed iframe. Improper escaping in `srcdoc` leads to JS execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via `<object>` tag with data attribute", "target": "{\"Lab scenario\": \"XSS via `<object>` tag with data attribute\", \"Lab Description\": \"App uses `<object>` tags to display user-provided content from the `data` attribute. Improper validation of data leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app renders user comments using innerHTML, but accepts malformed tags. Browsers correct the tag structure, allowing execution of orphaned scripts.", "target": "{\"Lab scenario\": \"XSS via malformed comment rendering\", \"Lab Description\": \"The app renders user comments using innerHTML, but accepts malformed tags. Browsers correct the tag structure, allowing execution of orphaned scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Low\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via CSS `attr()` Injection", "target": "{\"Lab scenario\": \"XSS via CSS `attr()` Injection\", \"Lab Description\": \"The application reflects user input in a custom attribute used in CSS `content: attr(...)`, leading to script execution via `expression()` in legacy browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss through `svg` foreignobject execution", "target": "{\"Lab scenario\": \"XSS through `svg` ForeignObject Execution\", \"Lab Description\": \"App renders user input inside an `<svg>` tag. Malicious `<foreignObject>` embedded allows HTML + JS inside SVG context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss inside event handler json-to-html rendering", "target": "{\"Lab scenario\": \"XSS inside Event Handler JSON-to-HTML Rendering\", \"Lab Description\": \"Application parses user-submitted JSON and injects values into event handler attributes (`onclick`, etc.), allowing code injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in `srcdoc` Attribute of iframe", "target": "{\"Lab scenario\": \"XSS in `srcdoc` Attribute of iframe\", \"Lab Description\": \"App allows user input inside iframe `srcdoc`, which is directly rendered as inline HTML and JS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via `details` and `summary` Expansion", "target": "{\"Lab scenario\": \"XSS via `details` and `summary` Expansion\", \"Lab Description\": \"User input rendered inside a `details` block gets interpreted as full HTML, including executable scripts or event handlers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Low\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via misused `meta` refresh tag", "target": "{\"Lab scenario\": \"XSS via Misused `meta` Refresh Tag\", \"Lab Description\": \"Application allows user input inside a meta refresh tag, enabling injection of JavaScript via `URL` attribute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss through data uri in iframe source", "target": "{\"Lab scenario\": \"XSS through Data URI in iframe Source\", \"Lab Description\": \"User input is embedded directly into an iframe `src`, allowing crafted `data:text/html` URIs with embedded scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in `<math>` tag with malicious `href`", "target": "{\"Lab scenario\": \"XSS in `<math>` Tag with Malicious `href`\", \"Lab Description\": \"The app allows mathML rendering but doesn’t sanitize attributes. Injecting an `href` with `javascript:` scheme executes code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Object `data` Attribute", "target": "{\"Lab scenario\": \"XSS via Object `data` Attribute\", \"Lab Description\": \"User input is embedded into an `<object>` tag’s `data` attribute, allowing attacker to inject `data:` URLs with malicious HTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: App includes a `<template>` element and clones its content via JS. Injected script inside template gets executed after cloning.", "target": "{\"Lab scenario\": \"XSS inside `template` Element via DOM Cloning\", \"Lab Description\": \"App includes a `<template>` element and clones its content via JS. Injected script inside template gets executed after cloning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via CSS Expression in Legacy Quirks Mode", "target": "{\"Lab scenario\": \"XSS via CSS Expression in Legacy Quirks Mode\", \"Lab Description\": \"A legacy page renders in quirks mode and allows inline styles. Internet Explorer interprets CSS expressions as JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in svg <animate> element injection", "target": "{\"Lab scenario\": \"XSS in SVG <animate> Element Injection\", \"Lab Description\": \"User-submitted SVG is embedded without sanitization. The attacker abuses <animate> and other SVG elements to trigger JavaScript execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in URL Path via 404 Handler", "target": "{\"Lab scenario\": \"Reflected XSS in URL Path via 404 Handler\", \"Lab Description\": \"The 404 error handler reflects the requested URL back to the page. By crafting the URL with script tags, the attacker injects code into the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The app uses custom elements but doesn't filter content before setting innerHTML. Even without event attributes, inserting <script> can trigger parsing.", "target": "{\"Lab scenario\": \"Mutation XSS in innerHTML with Event-less Custom Elements\", \"Lab Description\": \"The app uses custom elements but doesn't filter content before setting innerHTML. Even without event attributes, inserting <script> can trigger parsing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in JSONP Callback Parameter", "target": "{\"Lab scenario\": \"XSS in JSONP Callback Parameter\", \"Lab Description\": \"The API provides JSONP support with a callback parameter. An attacker injects a malicious callback function to execute arbitrary JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via javascript url in clickable breadcrumb", "target": "{\"Lab scenario\": \"XSS via JavaScript URL in clickable breadcrumb\", \"Lab Description\": \"The breadcrumb component builds navigation paths using query parameters and sets them in anchor `href` attributes. Supplying a `javascript:` link causes execution on click.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via clipboard injection in paste event", "target": "{\"Lab scenario\": \"XSS via clipboard injection in paste event\", \"Lab Description\": \"The web app handles `paste` events and directly injects clipboard content into the DOM using innerHTML. If an attacker copies malicious HTML, pasting triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in tag suggestions dropdown", "target": "{\"Lab scenario\": \"XSS in tag suggestions dropdown\", \"Lab Description\": \"User-created tags are stored and rendered in a tag suggestions dropdown using innerHTML. A malicious tag name leads to XSS when suggestions are shown.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via SVG title tooltip injection", "target": "{\"Lab scenario\": \"XSS via SVG title tooltip injection\", \"Lab Description\": \"User-submitted content appears in the `<title>` element of inline SVG. Some browsers render this as tooltips, and malformed SVG titles can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via username in audio transcript captions", "target": "{\"Lab scenario\": \"XSS via username in audio transcript captions\", \"Lab Description\": \"The app generates captions for audio recordings. Usernames are shown in speaker labels inside the transcript, inserted via innerHTML. Injected scripts run in the captions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application receives postMessage events from an iframe and injects the message into the DOM without validation. An attacker can craft a malicious iframe that sends a script payload via postMessage.", "target": "{\"Lab scenario\": \"XSS via postMessage Reflection in Parent Window\", \"Lab Description\": \"The application receives postMessage events from an iframe and injects the message into the DOM without validation. An attacker can craft a malicious iframe that sends a script payload via postMessage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via template tag cloning in shadow dom", "target": "{\"Lab scenario\": \"XSS via template tag cloning in shadow DOM\", \"Lab Description\": \"The app uses a `<template>` tag within a shadow DOM to dynamically clone and inject HTML. Injected HTML inside the template escapes default sanitizers and executes upon cloning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The app attempts to render user HTML input, and on failure falls back to innerText. However, if the original input remains in the DOM, some browsers may parse and execute delayed scripts.", "target": "{\"Lab scenario\": \"XSS via innerText fallback after failed rendering\", \"Lab Description\": \"The app attempts to render user HTML input, and on failure falls back to innerText. However, if the original input remains in the DOM, some browsers may parse and execute delayed scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via localization translation key injection", "target": "{\"Lab scenario\": \"XSS via localization translation key injection\", \"Lab Description\": \"The app supports multilingual labels stored in a key-value object. If a user can manipulate keys, injecting HTML in a translation value leads to XSS when rendered via innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via `onanimationstart` in CSS keyframes", "target": "{\"Lab scenario\": \"XSS via `onanimationstart` in CSS keyframes\", \"Lab Description\": \"Some browsers allow triggering JS via `onanimationstart` events in HTML tags. If an element uses an animation with JS in event handler, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application includes a public message board with a content-editable area for writing. When malicious HTML is copied and pasted, it executes instantly because the app trusts clipboard HTML and injects it using `insertAdjacentHTML`.", "target": "{\"Lab scenario\": \"XSS via clipboard hijack on content-editable element\", \"Lab Description\": \"The application includes a public message board with a content-editable area for writing. When malicious HTML is copied and pasted, it executes instantly because the app trusts clipboard HTML and injects it using `insertAdjacentHTML`.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in csv export rendered as html preview", "target": "{\"Lab scenario\": \"XSS in CSV export rendered as HTML preview\", \"Lab Description\": \"The web application offers a CSV preview feature before download. Malicious cells with formula-like payloads are rendered using `innerHTML`, allowing execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss through malformed image alt attribute in cms", "target": "{\"Lab scenario\": \"XSS through malformed image alt attribute in CMS\", \"Lab Description\": \"The CMS allows editors to insert images with custom `alt` text. If the `alt` text contains malformed attributes or tags, it's rendered inside an image preview tooltip, which is injected with innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via `aria-label` reflection in accessibility component", "target": "{\"Lab scenario\": \"XSS via `aria-label` reflection in accessibility component\", \"Lab Description\": \"The site supports screen readers with `aria-label` attributes on buttons and links. User-controlled values are inserted without escaping, allowing JS injection inside the DOM structure.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via css variable injection inside style tag", "target": "{\"Lab scenario\": \"XSS via CSS variable injection inside style tag\", \"Lab Description\": \"Users can define CSS variables (e.g., for themes), but values are interpolated directly into a `<style>` tag, allowing for JS injection in some browsers via `url(javascript:...)`.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via dynamic script injection in error stack trace viewer", "target": "{\"Lab scenario\": \"XSS via dynamic script injection in error stack trace viewer\", \"Lab Description\": \"The application displays backend error stack traces for debugging. User input is sometimes logged and reflected in the error message, which is rendered with innerHTML for styling. An attacker can trigger an error with a crafted payload that executes in the trace viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Markdown input is rendered to HTML using a parser that does not escape special characters in image `alt` attributes. A payload in the alt text leads to DOM injection.", "target": "{\"Lab scenario\": \"XSS via Markdown image alt injection in preview pane\", \"Lab Description\": \"Markdown input is rendered to HTML using a parser that does not escape special characters in image `alt` attributes. A payload in the alt text leads to DOM injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Keyboard shortcuts are rendered from user-defined actions. The key description is inserted into tooltip HTML using innerHTML, leading to XSS when hovering.", "target": "{\"Lab scenario\": \"XSS via keyboard shortcut tooltip injection\", \"Lab Description\": \"Keyboard shortcuts are rendered from user-defined actions. The key description is inserted into tooltip HTML using innerHTML, leading to XSS when hovering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via video player subtitle track injection", "target": "{\"Lab scenario\": \"XSS via video player subtitle track injection\", \"Lab Description\": \"The platform allows uploading subtitle (VTT) tracks that are rendered as HTML in a caption viewer. Malicious captions can contain script tags or on-event attributes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application lazy-loads components by injecting script and HTML fragments based on user input. A payload in the load path is inserted into an `img` tag as `src`, allowing `onerror` to execute.", "target": "{\"Lab scenario\": \"XSS via dynamic `onload` injection in lazy-loaded components\", \"Lab Description\": \"The application lazy-loads components by injecting script and HTML fragments based on user input. A payload in the load path is inserted into an `img` tag as `src`, allowing `onerror` to execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via QR Code data reflection in preview screen", "target": "{\"Lab scenario\": \"XSS via QR Code data reflection in preview screen\", \"Lab Description\": \"The application allows users to generate QR codes and preview the data embedded inside. The raw data is reflected in the preview window using innerHTML without escaping. If the data contains HTML, it will be executed in the browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via voice assistant command transcript display", "target": "{\"Lab scenario\": \"XSS via voice assistant command transcript display\", \"Lab Description\": \"The application includes a voice command recognition system that transcribes spoken input and displays it on the interface. If an attacker controls the input (e.g., via audio injection), the transcript can include executable HTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via image gallery caption rendering", "target": "{\"Lab scenario\": \"XSS via image gallery caption rendering\", \"Lab Description\": \"Users can upload images and add captions. The captions are rendered using innerHTML below the images. If a caption contains a script or event handler, it will be executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The web-based CLI interface reflects command results using innerHTML. If a command returns crafted HTML, it gets executed in the terminal output.", "target": "{\"Lab scenario\": \"XSS via terminal output rendering in web-based CLI\", \"Lab Description\": \"The web-based CLI interface reflects command results using innerHTML. If a command returns crafted HTML, it gets executed in the terminal output.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via chat bot training phrase injection", "target": "{\"Lab scenario\": \"XSS via chat bot training phrase injection\", \"Lab Description\": \"The app allows users to submit new training phrases for a chat bot. These phrases are listed in the UI for review, and are rendered via innerHTML. A malicious phrase can execute script code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via toast notification rendering", "target": "{\"Lab scenario\": \"XSS via toast notification rendering\", \"Lab Description\": \"The application uses custom toast notifications to show user feedback messages. These messages are rendered using innerHTML. If attacker input is reflected in the message, arbitrary HTML can be injected and executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The calendar app displays event titles in hover tooltips. These titles are user-controlled and inserted into the DOM without sanitization. JavaScript can be injected via the title.", "target": "{\"Lab scenario\": \"XSS via calendar event title injection\", \"Lab Description\": \"The calendar app displays event titles in hover tooltips. These titles are user-controlled and inserted into the DOM without sanitization. JavaScript can be injected via the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via file rename form field", "target": "{\"Lab scenario\": \"XSS via file rename form field\", \"Lab Description\": \"The file manager allows renaming files via a form. The new name is displayed as a label using innerHTML. Malicious input as filename can inject HTML or script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via chat emoji replacement feature", "target": "{\"Lab scenario\": \"XSS via chat emoji replacement feature\", \"Lab Description\": \"The chat system replaces emoji shortcodes (e.g., :smile:) with images using innerHTML. If an attacker injects a pseudo-emoji string that contains HTML, it is directly parsed and executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via html5 draggable attribute content", "target": "{\"Lab scenario\": \"XSS via HTML5 draggable attribute content\", \"Lab Description\": \"The application allows creating draggable items with custom labels. Labels are rendered using innerHTML. An attacker can inject script via a draggable item.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via dynamic favicon generator", "target": "{\"Lab scenario\": \"XSS via dynamic favicon generator\", \"Lab Description\": \"The application lets users generate custom favicon previews from submitted SVG code. The SVG is directly rendered as a favicon and also previewed in a full-size viewer using innerHTML, making it vulnerable to script injection via SVG tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The 3D viewer app allows users to add annotations to models. These annotations are shown as tooltips rendered using innerHTML. Malicious input leads to XSS when hovering over annotation points.", "target": "{\"Lab scenario\": \"XSS via 3D model annotation tooltips\", \"Lab Description\": \"The 3D viewer app allows users to add annotations to models. These annotations are shown as tooltips rendered using innerHTML. Malicious input leads to XSS when hovering over annotation points.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via music playlist name rendering", "target": "{\"Lab scenario\": \"XSS via music playlist name rendering\", \"Lab Description\": \"The music app allows users to create custom playlist names. These names are rendered in the DOM using innerHTML when displaying playlists. A malicious name results in script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via real-time poll voting labels", "target": "{\"Lab scenario\": \"XSS via real-time poll voting labels\", \"Lab Description\": \"The poll app displays live results and includes user-submitted vote labels. These are rendered using innerHTML, and malicious labels can trigger XSS when displayed in the poll chart.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app allows switching between multiple languages. If a language label is attacker-controlled and reflected directly in a dropdown using innerHTML, it leads to XSS.", "target": "{\"Lab scenario\": \"XSS via language switcher label reflection\", \"Lab Description\": \"The app allows switching between multiple languages. If a language label is attacker-controlled and reflected directly in a dropdown using innerHTML, it leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via user-generated page title injection", "target": "{\"Lab scenario\": \"XSS via user-generated page title injection\", \"Lab Description\": \"The app allows users to set custom titles for pages they create. These titles are inserted into the `<title>` tag of the HTML document without sanitization, enabling XSS through script injection in the title context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via user-submitted avatar preview filename", "target": "{\"Lab scenario\": \"XSS via user-submitted avatar preview filename\", \"Lab Description\": \"Users can upload avatar images and preview them. The preview includes the uploaded file name as a caption. If the file name contains script, and is rendered without escaping, it triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via iframe sandbox escape with malformed srcdoc", "target": "{\"Lab scenario\": \"XSS via iframe sandbox escape with malformed srcdoc\", \"Lab Description\": \"The app loads user input into an iframe using the `srcdoc` attribute. When the input contains malformed tags or escaping characters, browsers may incorrectly parse and execute embedded scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via search autocomplete history rendering", "target": "{\"Lab scenario\": \"XSS via search autocomplete history rendering\", \"Lab Description\": \"The app stores user search terms and displays them as autocomplete suggestions in a dropdown. If search history includes injected HTML, it is rendered via innerHTML in the suggestion box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via embedded comment in html rendering", "target": "{\"Lab scenario\": \"XSS via embedded comment in HTML rendering\", \"Lab Description\": \"The app displays article comments and allows HTML-like formatting. It uses innerHTML to render comments. An attacker can inject malformed comments with script inside a fake HTML comment, which may be parsed and executed in certain browsers or contexts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via dynamic meta tag content injection", "target": "{\"Lab scenario\": \"XSS via dynamic meta tag content injection\", \"Lab Description\": \"The application sets meta tags dynamically based on user input, such as `<meta name='description'>`. The content attribute is directly populated from unescaped input, which allows for injection inside the HTML head.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app previews file names in a table using innerHTML. Maliciously crafted filenames with script or malformed tags get executed when previewed.", "target": "{\"Lab scenario\": \"XSS via file preview in filename-based viewer\", \"Lab Description\": \"The app previews file names in a table using innerHTML. Maliciously crafted filenames with script or malformed tags get executed when previewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via browser notification content injection", "target": "{\"Lab scenario\": \"XSS via browser notification content injection\", \"Lab Description\": \"The app generates browser notifications based on user actions. Notification body content is passed via user input and used directly without sanitization, enabling payload injection that can trigger via the Notification API.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via modal dialog dynamic content", "target": "{\"Lab scenario\": \"XSS via modal dialog dynamic content\", \"Lab Description\": \"The application opens modal dialogs with content fetched from user-controlled sources. This content is injected into the modal body using innerHTML, allowing for script execution if malicious HTML is provided.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app provides printable reports and allows users to insert text blocks. These are rendered in a print preview window using innerHTML. Injected HTML leads to XSS on load or print.", "target": "{\"Lab scenario\": \"XSS via print preview injection in report builder\", \"Lab Description\": \"The app provides printable reports and allows users to insert text blocks. These are rendered in a print preview window using innerHTML. Injected HTML leads to XSS on load or print.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic breadcrumb trail rendering", "target": "{\"Lab scenario\": \"XSS via dynamic breadcrumb trail rendering\", \"Lab Description\": \"The application constructs breadcrumb navigation based on the current path or user input. The labels are rendered using innerHTML without proper sanitization, allowing script injection through crafted breadcrumb segments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via survey builder preview text", "target": "{\"Lab scenario\": \"XSS via survey builder preview text\", \"Lab Description\": \"The app allows users to build surveys with custom questions and preview them. The question text is rendered using innerHTML, allowing an attacker to inject script in a question label.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via system log viewer with user input reflection", "target": "{\"Lab scenario\": \"XSS via system log viewer with user input reflection\", \"Lab Description\": \"The log viewer displays server logs that include some user input (e.g., usernames, actions). If the log output is rendered using innerHTML without sanitization, attackers can inject malicious HTML into logs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app generates a tag cloud based on user-defined tags for images. The tags are inserted directly into the DOM using innerHTML, leading to XSS when a tag contains executable HTML.", "target": "{\"Lab scenario\": \"XSS via photo album tag cloud rendering\", \"Lab Description\": \"The app generates a tag cloud based on user-defined tags for images. The tags are inserted directly into the DOM using innerHTML, leading to XSS when a tag contains executable HTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can set a custom status on their profile. This value is displayed as a badge using innerHTML. If the input is not sanitized, it enables arbitrary HTML injection.", "target": "{\"Lab scenario\": \"XSS via dynamic status badge on profile\", \"Lab Description\": \"Users can set a custom status on their profile. This value is displayed as a badge using innerHTML. If the input is not sanitized, it enables arbitrary HTML injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via live preview of social media post", "target": "{\"Lab scenario\": \"XSS via live preview of social media post\", \"Lab Description\": \"The app allows users to draft social media posts and preview them before publishing. The preview panel renders the post using innerHTML. If the input contains HTML or scripts, it executes in the preview pane.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via status message in real-time activity feed", "target": "{\"Lab scenario\": \"XSS via status message in real-time activity feed\", \"Lab Description\": \"User status updates are broadcast to a real-time feed using WebSocket. Messages are injected into the feed container via innerHTML. A crafted message can include HTML that executes instantly.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via theme color name in CSS injection", "target": "{\"Lab scenario\": \"XSS via theme color name in CSS injection\", \"Lab Description\": \"Users can define theme settings including color names. These names are injected into a `<style>` tag for live theming. Malicious names can break out of CSS and inject HTML or JS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via forum quote reply injection", "target": "{\"Lab scenario\": \"XSS via forum quote reply injection\", \"Lab Description\": \"In the forum, replying to a post quotes the original message. The quote content is copied and rendered with innerHTML. If the original contains a payload, the reply will include executable code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The platform supports embedding widgets via iframe or script snippet. The widget accepts parameters via query string. If these values are reflected in the widget HTML, XSS can occur.", "target": "{\"Lab scenario\": \"XSS via embedded widget parameter injection\", \"Lab Description\": \"The platform supports embedding widgets via iframe or script snippet. The widget accepts parameters via query string. If these values are reflected in the widget HTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via notification sound name in audio tag", "target": "{\"Lab scenario\": \"XSS via notification sound name in audio tag\", \"Lab Description\": \"The app allows users to customize their notification sound by selecting a named sound file. The selected name is inserted into an `<audio>` tag’s `src` attribute using innerHTML. A malicious name can break out of the attribute and inject script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via tooltip for user reaction emoji", "target": "{\"Lab scenario\": \"XSS via tooltip for user reaction emoji\", \"Lab Description\": \"The app shows emoji reactions with user tooltips. When hovering over a reaction, a tooltip displays the user’s name. If names are rendered using innerHTML, XSS can be triggered via a malicious username.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app allows users to set a custom email signature. The signature is rendered as-is in the compose window using innerHTML. A malicious payload in the signature leads to XSS.", "target": "{\"Lab scenario\": \"XSS via email signature HTML rendering\", \"Lab Description\": \"The app allows users to set a custom email signature. The signature is rendered as-is in the compose window using innerHTML. A malicious payload in the signature leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app auto-saves drafts from a rich text editor and previews the last saved content using innerHTML. If an attacker injects a payload, it executes when the preview is shown.", "target": "{\"Lab scenario\": \"XSS via rich text editor auto-save preview\", \"Lab Description\": \"The app auto-saves drafts from a rich text editor and previews the last saved content using innerHTML. If an attacker injects a payload, it executes when the preview is shown.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The login page displays an error message when authentication fails. If the username is reflected in the error using innerHTML, an attacker can inject a payload to be executed after failed login.", "target": "{\"Lab scenario\": \"XSS via failed login error message\", \"Lab Description\": \"The login page displays an error message when authentication fails. If the username is reflected in the error using innerHTML, an attacker can inject a payload to be executed after failed login.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via feedback form confirmation message", "target": "{\"Lab scenario\": \"XSS via feedback form confirmation message\", \"Lab Description\": \"The feedback form displays a confirmation message after submission that includes the user’s name. The name is rendered using innerHTML without sanitization, allowing XSS via crafted input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application renders progress bars with custom labels provided by users. These labels are injected into innerHTML of progress components. A malicious label leads to XSS.", "target": "{\"Lab scenario\": \"XSS via custom label in dynamic progress bar\", \"Lab Description\": \"The application renders progress bars with custom labels provided by users. These labels are injected into innerHTML of progress components. A malicious label leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The image gallery shows the `alt` text of images in a lightbox preview. If the `alt` attribute is set by the user and rendered using innerHTML, it enables XSS.", "target": "{\"Lab scenario\": \"XSS via image alt-text in gallery lightbox viewer\", \"Lab Description\": \"The image gallery shows the `alt` text of images in a lightbox preview. If the `alt` attribute is set by the user and rendered using innerHTML, it enables XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via url shortening preview page", "target": "{\"Lab scenario\": \"XSS via URL shortening preview page\", \"Lab Description\": \"The app generates previews for shortened URLs by displaying the destination page title. If the destination includes attacker-controlled HTML in its title, it can be injected into the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via custom dashboard widget title", "target": "{\"Lab scenario\": \"XSS via custom dashboard widget title\", \"Lab Description\": \"Users can add widgets to a customizable dashboard and set titles for them. These titles are rendered in cards using innerHTML. If malicious content is set as title, it leads to XSS on render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic breadcrumb JSON injection in SPA routing", "target": "{\"Lab scenario\": \"XSS via dynamic breadcrumb JSON injection in SPA routing\", \"Lab Description\": \"The app uses client-side JavaScript to generate breadcrumb navigation from a JSON structure passed via query parameters. The values are inserted into the DOM using innerHTML. If attackers inject script via breadcrumb labels, it results in DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via chart label injection in analytics dashboard", "target": "{\"Lab scenario\": \"XSS via chart label injection in analytics dashboard\", \"Lab Description\": \"The dashboard allows users to label chart segments (like pie slices). Labels are rendered in the legend via innerHTML. If a label contains HTML, it gets executed when the chart renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via newsletter topic selection preview", "target": "{\"Lab scenario\": \"XSS via newsletter topic selection preview\", \"Lab Description\": \"Users can choose newsletter topics and preview their newsletter. Topic names are displayed using innerHTML. Injected topic names result in XSS inside the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via browser tab title injection from form field", "target": "{\"Lab scenario\": \"XSS via browser tab title injection from form field\", \"Lab Description\": \"The site allows setting a custom browser tab title using input from a form. The title is inserted using `document.title = ...`, and if the value contains HTML with closing tags, script can escape and execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via form autofill memory viewer", "target": "{\"Lab scenario\": \"XSS via form autofill memory viewer\", \"Lab Description\": \"The app allows users to see recently submitted values for form inputs as suggestions. These values are rendered via innerHTML inside a dropdown. If user input is stored unsanitized, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application displays a podcast playlist with user-defined episode titles. Titles are rendered using innerHTML in a list. A malicious title can inject and execute scripts when the list is loaded.", "target": "{\"Lab scenario\": \"XSS via podcast episode title in media playlist\", \"Lab Description\": \"The application displays a podcast playlist with user-defined episode titles. Titles are rendered using innerHTML in a list. A malicious title can inject and execute scripts when the list is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can set a global notification banner that appears on every page. The message is stored and injected into a top banner using innerHTML. Malicious content leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via custom notification banner text\", \"Lab Description\": \"Admins can set a global notification banner that appears on every page. The message is stored and injected into a top banner using innerHTML. Malicious content leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave custom notes per item in their cart. These notes are rendered inside the cart summary using innerHTML. A malicious note can trigger script execution.", "target": "{\"Lab scenario\": \"XSS via shopping cart item customization note\", \"Lab Description\": \"Users can leave custom notes per item in their cart. These notes are rendered inside the cart summary using innerHTML. A malicious note can trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via video player caption editor", "target": "{\"Lab scenario\": \"XSS via video player caption editor\", \"Lab Description\": \"Users can upload or edit captions for videos. These captions are rendered under the video using innerHTML. A caption line with HTML triggers script execution when played or displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via project milestone label in timeline", "target": "{\"Lab scenario\": \"XSS via project milestone label in timeline\", \"Lab Description\": \"The project management interface allows naming milestones. The names appear in a visual timeline using innerHTML. A malicious name results in DOM-based XSS when the timeline loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: cms stored xss in blog post title rendering", "target": "{\"Lab scenario\": \"CMS Stored XSS in blog post title rendering\", \"Lab Description\": \"This lab simulates a CMS where blog post titles are stored and displayed without sanitization. The application displays the post title directly in the HTML document title tag. To solve: Inject a JavaScript payload that executes when any user opens the blog post.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: api gateway dom-based xss in error message handling", "target": "{\"Lab scenario\": \"API gateway DOM-based XSS in error message handling\", \"Lab Description\": \"This lab simulates a DOM-based XSS vulnerability in an API gateway's debug interface. Client-side JavaScript updates error messages dynamically using `innerHTML`. To solve: Exploit an error endpoint to inject a DOM-based XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab mimics an IoT dashboard where widgets can be renamed inline. The application uses a mutation observer to react to DOM changes but fails to sanitize new content. To solve: Inject malicious content that gets executed when the dashboard mutates the DOM.", "target": "{\"Lab scenario\": \"IoT dashboard Mutation-based XSS via dynamic widget rename\", \"Lab Description\": \"This lab mimics an IoT dashboard where widgets can be renamed inline. The application uses a mutation observer to react to DOM changes but fails to sanitize new content. To solve: Inject malicious content that gets executed when the dashboard mutates the DOM.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where banking portal reflected xss in http error page", "target": "{\"Lab scenario\": \"Banking portal Reflected XSS in HTTP error page\", \"Lab Description\": \"This lab exposes a reflected XSS flaw in the 404 error page of a banking portal. The URL path is reflected into the error template without encoding. To solve: Inject a JavaScript payload in the URL that causes a popup when visiting a broken link.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: cms dom-based xss via live preview panel", "target": "{\"Lab scenario\": \"CMS DOM-based XSS via live preview panel\", \"Lab Description\": \"This lab simulates a WYSIWYG editor in a CMS where user content is shown in a live preview using `innerHTML`. The editor does not strip script tags before rendering. To solve: Inject a script that executes inside the live preview panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab mimics a hospital portal where doctors can save notes on patients. These notes are rendered in the admin dashboard without sanitization. The application stores the note input directly and renders it as HTML. To solve: Inject a script in the patient notes to trigger when an admin reviews them.", "target": "{\"Lab scenario\": \"Healthcare portal Stored XSS in patient notes\", \"Lab Description\": \"This lab mimics a hospital portal where doctors can save notes on patients. These notes are rendered in the admin dashboard without sanitization. The application stores the note input directly and renders it as HTML. To solve: Inject a script in the patient notes to trigger when an admin reviews them.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: E-learning platform DOM-based XSS in quiz result summary", "target": "{\"Lab scenario\": \"E-learning platform DOM-based XSS in quiz result summary\", \"Lab Description\": \"This lab features a DOM-based XSS vulnerability where quiz scores are reflected on the result page without escaping. The application uses location.hash to read and write data via innerHTML. To solve: Inject a malicious script in the fragment that executes in the DOM context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where online forum reflected xss in topic preview tooltip", "target": "{\"Lab scenario\": \"Online forum Reflected XSS in topic preview tooltip\", \"Lab Description\": \"This lab simulates a forum where hovering over a topic shows a preview using query parameters. The content is not sanitized before insertion into an HTML attribute, leading to reflected XSS. To solve: Inject payload via URL to trigger alert on hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Admin panel Stored XSS in system notification editor", "target": "{\"Lab scenario\": \"Admin panel Stored XSS in system notification editor\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in a system where admins post internal notifications to all users. The input is saved and directly rendered on user dashboards. To solve: Inject a payload as an admin that triggers a script when a user logs in.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: IoT smart home DOM-based XSS in log viewer tab", "target": "{\"Lab scenario\": \"IoT smart home DOM-based XSS in log viewer tab\", \"Lab Description\": \"This lab simulates a smart home dashboard that shows device logs. Logs are appended to the DOM using `innerHTML` from localStorage, allowing injection. To solve: Inject a payload into localStorage and reload the page to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where job portal stored xss in resume upload notes", "target": "{\"Lab scenario\": \"Job portal Stored XSS in resume upload notes\", \"Lab Description\": \"The application allows job seekers to upload resumes with optional notes. These notes are displayed to employers reviewing applications. However, the notes field is stored and rendered without sanitization. To solve: Inject a malicious script into the notes field to execute when the employer views it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app generates HTML <img> tags from user-provided image URLs and returns them in a preview. The input is not properly sanitized, and special characters can break out of the tag context. To solve: Inject JavaScript into the image URL parameter and force execution.", "target": "{\"Lab scenario\": \"Social media app Reflected XSS in image tag generator\", \"Lab Description\": \"The app generates HTML <img> tags from user-provided image URLs and returns them in a preview. The input is not properly sanitized, and special characters can break out of the tag context. To solve: Inject JavaScript into the image URL parameter and force execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: customer support platform stored xss in ticket subject field", "target": "{\"Lab scenario\": \"Customer support platform Stored XSS in ticket subject field\", \"Lab Description\": \"A support ticketing system logs user-submitted issues. The subject of the ticket is directly rendered in the admin panel without escaping, resulting in a stored XSS risk. To solve: Inject a script in the subject field to trigger on admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: API documentation tool DOM-based XSS via hash injection", "target": "{\"Lab scenario\": \"API documentation tool DOM-based XSS via hash injection\", \"Lab Description\": \"A JavaScript-powered API doc site uses the URL fragment to display endpoint-specific documentation. The fragment is parsed and inserted into a div via innerHTML. This allows DOM-based XSS when a malicious hash value is used. To solve: Inject a payload into the hash and reload to trigger the XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: CMS Mutation-based XSS via JavaScript content injection", "target": "{\"Lab scenario\": \"CMS Mutation-based XSS via JavaScript content injection\", \"Lab Description\": \"A custom CMS allows inline content editing and uses DOM mutation observers to re-parse user input. Malicious HTML with embedded event handlers is not sanitized before being reinjected. To solve: Use mutation-based injection to trigger execution during DOM parsing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where e-commerce dashboard stored xss in product review system", "target": "{\"Lab scenario\": \"E-commerce dashboard Stored XSS in product review system\", \"Lab Description\": \"The application allows users to leave product reviews, which are rendered on product pages. The review text is not sanitized or escaped before rendering. To solve: Inject a stored XSS payload into a review and trigger it on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where forum platform reflected xss in search suggestion api", "target": "{\"Lab scenario\": \"Forum platform Reflected XSS in search suggestion API\", \"Lab Description\": \"The forum uses a live search suggestion endpoint that echoes input directly into a JavaScript-rendered dropdown. No escaping is done on the reflected value. To solve: Inject a script payload into the search box and trigger execution through the live results.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: IoT dashboard DOM-based XSS in device label field", "target": "{\"Lab scenario\": \"IoT dashboard DOM-based XSS in device label field\", \"Lab Description\": \"An IoT device management panel allows setting custom labels for devices. These labels are read from `localStorage` and rendered using `innerHTML` in the dashboard. There's no sanitization before rendering, leading to DOM-based XSS. To solve: Inject a payload into localStorage and reload the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: online invoice app reflected xss via pdf generation name field", "target": "{\"Lab scenario\": \"Online invoice app Reflected XSS via PDF generation name field\", \"Lab Description\": \"The invoice generator embeds user input directly into an HTML-based invoice that is rendered then converted into a PDF. No sanitization is applied before rendering. To solve: Inject a script that executes during the preview phase of invoice generation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where chat widget dom-based xss via dynamic welcome message", "target": "{\"Lab scenario\": \"Chat widget DOM-based XSS via dynamic welcome message\", \"Lab Description\": \"A customer support chat widget includes a dynamic welcome message based on the current user. This message is inserted using `innerHTML` from a URL query param. There's no sanitization, enabling DOM-based XSS. To solve: Craft a URL with a payload in the query parameter and trigger the widget.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A content management system allows contributors to tag articles with arbitrary labels. These tags are rendered without sanitization on the article view page. To solve: Inject a script as a tag and verify it executes when the article is opened.", "target": "{\"Lab scenario\": \"CMS plugin Stored XSS in article tags\", \"Lab Description\": \"A content management system allows contributors to tag articles with arbitrary labels. These tags are rendered without sanitization on the article view page. To solve: Inject a script as a tag and verify it executes when the article is opened.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The blog's custom 404 page reflects the requested URL path directly into the error page without encoding. This allows attackers to inject scripts into the error message display. To solve: Craft a malicious URL path that triggers script execution on error.", "target": "{\"Lab scenario\": \"Blog engine Reflected XSS in 404 error message\", \"Lab Description\": \"The blog's custom 404 page reflects the requested URL path directly into the error page without encoding. This allows attackers to inject scripts into the error message display. To solve: Craft a malicious URL path that triggers script execution on error.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The dashboard lets users create custom charts and label them with titles stored in `sessionStorage`. These are later rendered with innerHTML for display without validation. To solve: Inject a payload into `sessionStorage` and reload the page to trigger.", "target": "{\"Lab scenario\": \"Analytics dashboard DOM-based XSS via chart titles\", \"Lab Description\": \"The dashboard lets users create custom charts and label them with titles stored in `sessionStorage`. These are later rendered with innerHTML for display without validation. To solve: Inject a payload into `sessionStorage` and reload the page to trigger.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: event registration app mutation-based xss in live form preview", "target": "{\"Lab scenario\": \"Event registration app Mutation-based XSS in live form preview\", \"Lab Description\": \"The registration app provides a live preview of custom HTML invitations. The preview renderer mutates and appends the user's raw HTML input, enabling event-based script injection. To solve: Inject a script via onmouseover or onclick and observe execution in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: job board reflected xss via email contact form", "target": "{\"Lab scenario\": \"Job board Reflected XSS via email contact form\", \"Lab Description\": \"A job posting site includes a contact form that displays submitted data back to the user in a confirmation message. The name field is reflected into the DOM without escaping. To solve: Inject XSS payloads into the name input and submit the form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: support ticket system stored xss in issue title", "target": "{\"Lab scenario\": \"Support ticket system Stored XSS in issue title\", \"Lab Description\": \"The support system allows users to submit tickets with custom titles. These titles are rendered on the admin dashboard without sanitization. To solve: Inject an XSS payload in the title field and trigger execution when viewed by an admin.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: IoT dashboard DOM-based XSS in log viewer", "target": "{\"Lab scenario\": \"IoT dashboard DOM-based XSS in log viewer\", \"Lab Description\": \"The IoT device dashboard pulls log messages from local storage and renders them using `innerHTML`. Malicious content injected into localStorage can lead to XSS. To solve: Store a malicious payload in localStorage and reload the logs view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: online quiz app reflected xss in question preview", "target": "{\"Lab scenario\": \"Online quiz app Reflected XSS in question preview\", \"Lab Description\": \"Instructors can preview custom questions by appending content to a preview URL. The question content is reflected into the HTML without escaping. To solve: Inject a payload into the question text parameter and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: e-commerce product manager stored xss in custom attributes", "target": "{\"Lab scenario\": \"E-commerce product manager Stored XSS in custom attributes\", \"Lab Description\": \"Vendors can add custom HTML attributes to product cards, which are rendered in the admin dashboard. These attributes aren't sanitized, allowing script injection. To solve: Inject JavaScript into a custom attribute and trigger execution when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where marketing email preview mutation-based xss in dynamic editor", "target": "{\"Lab scenario\": \"Marketing email preview Mutation-based XSS in dynamic editor\", \"Lab Description\": \"The dynamic email editor allows marketing staff to preview raw HTML email content. The content is rendered with `innerHTML`, allowing injected payloads to mutate the DOM. To solve: Inject a script via onerror or <svg> and observe execution in preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss in websocket message handling", "target": "{\"Lab scenario\": \"DOM XSS in WebSocket message handling\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in a WebSocket-based chat application. The application dynamically updates messages without proper sanitization, allowing attackers to inject malicious scripts. To solve: Inject an XSS payload via WebSocket and execute JavaScript in the victim's browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in CMS user profile", "target": "{\"Lab scenario\": \"Stored XSS in CMS user profile\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in a CMS profile update feature. The application does not properly escape user input before rendering it on the dashboard. To solve: Inject a persistent XSS payload in the profile description and trigger script execution for other users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via HTTP header manipulation", "target": "{\"Lab scenario\": \"Reflected XSS via HTTP header manipulation\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in an HTTP response header. The application echoes back user-supplied data without encoding it properly. To solve: Inject a JavaScript payload in a request header and execute an alert().\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation xss via dom property injection", "target": "{\"Lab scenario\": \"Mutation XSS via DOM property injection\", \"Lab Description\": \"This lab demonstrates a mutation-based XSS vulnerability. The application modifies DOM properties dynamically based on user input. To solve: Inject an XSS payload that mutates into an executable script after DOM manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability via an SVG file upload feature. The application fails to sanitize embedded JavaScript inside SVG images. To solve: Upload a malicious SVG file containing an XSS payload and trigger script execution when an administrator views it.", "target": "{\"Lab scenario\": \"Stored XSS via SVG file upload\", \"Lab Description\": \"This lab contains a stored XSS vulnerability via an SVG file upload feature. The application fails to sanitize embedded JavaScript inside SVG images. To solve: Upload a malicious SVG file containing an XSS payload and trigger script execution when an administrator views it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab contains a DOM-based XSS vulnerability in an iframe source attribute assignment. The application sets the iframe src dynamically based on user input without sanitization. To solve: Inject an XSS payload in the URL parameter to execute JavaScript inside the iframe.", "target": "{\"Lab scenario\": \"DOM XSS via dynamically generated iframe src attribute\", \"Lab Description\": \"This lab contains a DOM-based XSS vulnerability in an iframe source attribute assignment. The application sets the iframe src dynamically based on user input without sanitization. To solve: Inject an XSS payload in the URL parameter to execute JavaScript inside the iframe.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in comment section with markdown processing", "target": "{\"Lab scenario\": \"Stored XSS in comment section with Markdown processing\", \"Lab Description\": \"This lab contains a stored XSS vulnerability due to improper sanitization in a Markdown-based comment system. The application incorrectly allows JavaScript execution within user-submitted comments. To solve: Submit a crafted Markdown payload that executes JavaScript when rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via vulnerable JSON endpoint", "target": "{\"Lab scenario\": \"Reflected XSS via vulnerable JSON endpoint\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in a JSON API response. The application returns user input directly in the response without encoding. To solve: Inject an XSS payload in a query parameter and execute JavaScript when parsing the JSON response.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation xss via attribute-based event handler injection", "target": "{\"Lab scenario\": \"Mutation XSS via attribute-based event handler injection\", \"Lab Description\": \"This lab demonstrates a mutation-based XSS vulnerability where user input is inserted into an attribute, mutating into an event handler. The application improperly handles attribute-based user input, allowing execution of JavaScript. To solve: Inject an XSS payload that mutates and executes JavaScript after DOM modification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS via JSON Web Token (JWT) payload", "target": "{\"Lab scenario\": \"Stored XSS via JSON Web Token (JWT) payload\", \"Lab Description\": \"This lab contains a stored XSS vulnerability where an attacker can inject malicious JavaScript into a JWT payload. The application decodes and reflects the JWT payload in an admin dashboard without proper sanitization. To solve: Modify the JWT payload to include a stored XSS attack.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability in the user profile bio field. The application allows users to enter bio descriptions, which are displayed on their profile pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the profile.", "target": "{\"Lab scenario\": \"Stored XSS in user profile bio field\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the user profile bio field. The application allows users to enter bio descriptions, which are displayed on their profile pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in dynamic comment rendering", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic comment rendering\", \"Lab Description\": \"This lab contains a DOM-based XSS vulnerability in a comment rendering feature. The application updates comments dynamically in the DOM using innerHTML without proper sanitization. To solve: Inject JavaScript code that executes in another user's browser when they load comments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-based XSS via event handlers in chat application", "target": "{\"Lab scenario\": \"Mutation-based XSS via event handlers in chat application\", \"Lab Description\": \"This lab contains a mutation-based XSS vulnerability where user-generated content is manipulated by client-side scripts. The application modifies chat messages, allowing attackers to inject event-based malicious scripts. To solve: Exploit DOM mutation to inject an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in search query results", "target": "{\"Lab scenario\": \"Reflected XSS in search query results\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in the search functionality. The application dynamically displays user input without proper encoding. To solve: Craft a malicious search query that triggers JavaScript execution in the user's browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab contains an XSS vulnerability in a WebSocket-based messaging system. The application broadcasts user messages to all connected clients without validation. To solve: Inject a malicious payload into the WebSocket message stream to trigger execution.", "target": "{\"Lab scenario\": \"XSS via WebSocket message injection\", \"Lab Description\": \"This lab contains an XSS vulnerability in a WebSocket-based messaging system. The application broadcasts user messages to all connected clients without validation. To solve: Inject a malicious payload into the WebSocket message stream to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability in the product review section. The application allows users to submit reviews, which are displayed on product pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the product review.", "target": "{\"Lab scenario\": \"Stored XSS in product review section\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the product review section. The application allows users to submit reviews, which are displayed on product pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the product review.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in real-time notifications", "target": "{\"Lab scenario\": \"DOM-based XSS in real-time notifications\", \"Lab Description\": \"This lab contains a DOM-based XSS vulnerability in the real-time notifications feature. Notifications are inserted into the DOM dynamically using innerHTML without proper sanitization. To solve: Inject a script that executes when another user receives a notification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in feedback form submission", "target": "{\"Lab scenario\": \"Reflected XSS in feedback form submission\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in the feedback submission form. The application includes user input in the response page without proper encoding. To solve: Inject a script that executes when the form submission result is displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via manipulated url parameters in image preview", "target": "{\"Lab scenario\": \"XSS via manipulated URL parameters in image preview\", \"Lab Description\": \"This lab contains an XSS vulnerability in an image preview feature where the image URL is taken directly from a URL parameter and displayed without sanitization. To solve: Inject a payload that triggers JavaScript execution when an image is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via injected script in WebSocket chat application", "target": "{\"Lab scenario\": \"XSS via injected script in WebSocket chat application\", \"Lab Description\": \"This lab contains an XSS vulnerability in a WebSocket-based chat application where user messages are broadcast to all connected clients without validation. To solve: Inject a malicious script that executes when another user receives the message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Portal SQL injection in ORDER BY Clause via UNION Attack", "target": "{\"Lab scenario\": \"Banking Portal SQL injection in ORDER BY Clause via UNION Attack\", \"Lab Description\": \"The transaction sorting feature in a banking portal directly concatenates user input into ORDER BY clauses. The application leaks database errors through verbose logging. To solve: Extract account balances using UNION-based injection while bypassing column type restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager boolean-based blind sqli in having clause", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based Blind SQLi in HAVING Clause\", \"Lab Description\": \"An IoT device management dashboard filters sensor data using vulnerable HAVING conditions. No direct output is shown, but HTTP 200/500 status codes indicate query truthiness. To solve: Determine admin API key through binary search of character space.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: cms user search time-based injection via graphql", "target": "{\"Lab scenario\": \"CMS User Search Time-Based Injection via GraphQL\", \"Lab Description\": \"A headless CMS exposes GraphQL endpoint with vulnerable user search. Responses show identical success/failure states. To solve: Exfiltrate password hashes through conditional response delays using DNS over HTTP.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where rest api gateway union injection through json parameter", "target": "{\"Lab scenario\": \"REST API Gateway UNION Injection Through JSON Parameter\", \"Lab Description\": \"An inventory management API processes JSON payloads without type validation. The /search endpoint concatenates JSON array values directly into SELECT. To solve: Dump user credentials through type juggling attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Payment Processor Error-Based Injection in GROUP BY", "target": "{\"Lab scenario\": \"Payment Processor Error-Based Injection in GROUP BY\", \"Lab Description\": \"A payment analytics dashboard leaks PostgreSQL errors through misconfigured grouping. To solve: Extract PCI-compliant credit card numbers using verbose error messages with CTE injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal second-order sqli in user registration", "target": "{\"Lab scenario\": \"Healthcare Portal Second-Order SQLi in User Registration\", \"Lab Description\": \"Patient registration form stores unsanitized input later used in batch reports. To solve: Trigger delayed injection during nightly report generation using temp table pollution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce Platform JSON Array Injection in WHERE Clause", "target": "{\"Lab scenario\": \"E-Commerce Platform JSON Array Injection in WHERE Clause\", \"Lab Description\": \"Product search feature parses JSON arrays directly into SQL conditions. To solve: Bypass parameterized queries through JSON nesting and type confusion attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy SQL injection lab for: inventory management union injection with column padding", "target": "{\"Lab scenario\": \"Inventory Management UNION Injection with Column Padding\", \"Lab Description\": \"Legacy inventory system uses fixed column counts in UNION queries. To solve: Bypass column count validation through NULL padding and type coercion.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where crm system blind injection via websocket messages", "target": "{\"Lab scenario\": \"CRM System Blind Injection via WebSocket Messages\", \"Lab Description\": \"Real-time contact search uses WebSockets with no input validation. To solve: Perform blind boolean injection through response message ordering.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Grade export feature vulnerable to injection through CSV formula fields. To solve: Execute operating system commands through SQL injection with PostgreSQL large object imports.", "target": "{\"Lab scenario\": \"Learning Management System Polyglot Injection in CSV Export\", \"Lab Description\": \"Grade export feature vulnerable to injection through CSV formula fields. To solve: Execute operating system commands through SQL injection with PostgreSQL large object imports.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where rest api boolean-based blind sqli in login", "target": "{\"Lab scenario\": \"REST API Boolean-Based Blind SQLi in Login\", \"Lab Description\": \"A REST API login endpoint uses dynamic SQL without sanitization. No error messages are returned, but a JWT token is issued on success. To solve: Perform boolean-based blind SQLi to extract the admin password character-by-character.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: GraphQL Union-Based SQLi in IoT Device Query", "target": "{\"Lab scenario\": \"GraphQL Union-Based SQLi in IoT Device Query\", \"Lab Description\": \"A GraphQL resolver for IoT devices concatenates user input into a SQL query. Results are returned as JSON. To solve: Use UNION injection to retrieve device API keys from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms header-based blind sqli with boolean inference", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi with Boolean Inference\", \"Lab Description\": \"A CMS logs HTTP headers into a SQL database. A log preview feature reflects entries matching boolean conditions. To solve: Extract admin email via boolean-based blind SQLi in the X-Search-Token header.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: soap api time-based sqli with xml input", "target": "{\"Lab scenario\": \"SOAP API Time-Based SQLi with XML Input\", \"Lab Description\": \"A SOAP login service uses XML input in dynamic SQL. Responses lack feedback, but delays indicate query truthiness. To solve: Extract admin password via time-based delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A product grouping feature uses unsanitized input in GROUP BY. The application returns grouped results as JSON. To solve: Extract database schema via UNION-based injection.", "target": "{\"Lab scenario\": \"E-Commerce GROUP BY SQLi with UNION Payloads\", \"Lab Description\": \"A product grouping feature uses unsanitized input in GROUP BY. The application returns grouped results as JSON. To solve: Extract database schema via UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where newsletter signup error-based sqli with url encoding", "target": "{\"Lab scenario\": \"Newsletter Signup Error-Based SQLi with URL Encoding\", \"Lab Description\": \"A newsletter endpoint uses URL parameters directly in SQL. Verbose errors leak database information. To solve: Extract subscriber emails via UNION-based error injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where sqlite stacked queries in login form", "target": "{\"Lab scenario\": \"SQLite Stacked Queries in Login Form\", \"Lab Description\": \"A login form allows stacked queries in SQLite. To solve: Update the admin password and authenticate.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An autocomplete endpoint uses unsanitized input in a LIKE clause. To solve: Extract user emails via UNION injection.", "target": "{\"Lab scenario\": \"AJAX Autocomplete UNION SQLi in LIKE Clause\", \"Lab Description\": \"An autocomplete endpoint uses unsanitized input in a LIKE clause. To solve: Extract user emails via UNION injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where blog comment form insert-based sqli with error extraction", "target": "{\"Lab scenario\": \"Blog Comment Form INSERT-Based SQLi with Error Extraction\", \"Lab Description\": \"The blog comment system directly interpolates user input into an INSERT statement. While UNION injection isn't possible, error messages leak schema information. To solve: Extract table names via error-based SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where cookie-based authentication bypass with tautology", "target": "{\"Lab scenario\": \"Cookie-Based Authentication Bypass with Tautology\", \"Lab Description\": \"Session validation uses cookies in a WHERE clause without sanitization. To solve: Bypass authentication using boolean logic and access admin profile.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API Key Validation UNION SQLi with Column Matching", "target": "{\"Lab scenario\": \"API Key Validation UNION SQLi with Column Matching\", \"Lab Description\": \"API key validation vulnerable to UNION injection. To solve: Determine column count and extract user credentials through careful UNION payload construction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where second-order sqli in analytics report generation", "target": "{\"Lab scenario\": \"Second-Order SQLi in Analytics Report Generation\", \"Lab Description\": \"Bio field stored without sanitization and later used in admin reports. To solve: Poison bio field with SQL that executes during report generation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: dynamic table name sqli with system table access", "target": "{\"Lab scenario\": \"Dynamic Table Name SQLi with System Table Access\", \"Lab Description\": \"Table parameter vulnerable to schema enumeration. To solve: Extract database structure through controlled UNION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where json body sqli with content-type bypass", "target": "{\"Lab scenario\": \"JSON Body SQLi with Content-Type Bypass\", \"Lab Description\": \"API endpoint vulnerable through JSON parameter injection. To solve: Bypass Content-Type validation and extract sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Error-Based Password Recovery SQLi", "target": "{\"Lab scenario\": \"Error-Based Password Recovery SQLi\", \"Lab Description\": \"Password recovery form leaks schema through verbose errors. To solve: Extract table structure via type conversion errors.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where verification token sqli with stacked queries", "target": "{\"Lab scenario\": \"Verification Token SQLi with Stacked Queries\", \"Lab Description\": \"Verification endpoint vulnerable to stacked queries in PostgreSQL. To solve: Escalate privileges through batched SQL commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Pagination logic vulnerable through OFFSET parameter. To solve: Inject UNION payload into numeric parameter to extract database version.", "target": "{\"Lab scenario\": \"Pagination SQLi with OFFSET Clause Manipulation\", \"Lab Description\": \"Pagination logic vulnerable through OFFSET parameter. To solve: Inject UNION payload into numeric parameter to extract database version.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce portal union-based sqli in order by clause", "target": "{\"Lab scenario\": \"E-Commerce Portal UNION-Based SQLi in ORDER BY Clause\", \"Lab Description\": \"Product sorting feature in Node.js application directly concatenates user input into ORDER BY clause. The application returns full query errors. To solve: Extract user credentials through UNION attack requiring column type matching.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare api boolean-based blind sqli in where clause", "target": "{\"Lab scenario\": \"Healthcare API Boolean-Based Blind SQLi in WHERE Clause\", \"Lab Description\": \"Patient lookup API returns HTTP 200/404 status codes based on query results. No error messages. To solve: Determine sensitive patient SSN through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager time-based sqli in group by clause", "target": "{\"Lab scenario\": \"IoT Device Manager Time-Based SQLi in GROUP BY Clause\", \"Lab Description\": \"Device analytics dashboard vulnerable to blind injection through GROUP BY parameter. Responses identical but delay observable. To solve: Exfiltrate API keys through conditional response delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where cms platform error-based sqli in having clause", "target": "{\"Lab scenario\": \"CMS Platform Error-Based SQLi in HAVING Clause\", \"Lab Description\": \"Content analytics page leaks PostgreSQL errors through misconfigured HAVING clause. To solve: Extract admin credentials through verbose error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where banking portal second-order sqli in user registration", "target": "{\"Lab scenario\": \"Banking Portal Second-Order SQLi in User Registration\", \"Lab Description\": \"User registration stores unsanitized input used in batch reports. To solve: Trigger scheduled report generation to exfiltrate account balances.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where rest api gateway union sqli in json parameter", "target": "{\"Lab scenario\": \"REST API Gateway UNION SQLi in JSON Parameter\", \"Lab Description\": \"Inventory API processes JSON array input without validation. To solve: Bypass WAF protections and extract database schema through UNION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: government portal out-of-band sqli in pdf generator", "target": "{\"Lab scenario\": \"Government Portal Out-of-Band SQLi in PDF Generator\", \"Lab Description\": \"Report generation feature allows DNS exfiltration through malicious SQL queries. To solve: Extract sensitive records using OOB techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: search feature with waf blocking common sqli patterns. to solve: bypass filters using alternative syntax and encoding.", "target": "{\"Lab scenario\": \"Search feature with WAF blocking common SQLi patterns. To solve: Bypass filters using alternative syntax and encoding.\", \"Lab Description\": \"The application uses a web application firewall blocking UNION and SELECT keywords. To solve: Extract user emails using alternative syntax and comment bypasses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Education Platform JWT-Triggered SQLi", "target": "{\"Lab scenario\": \"Education Platform JWT-Triggered SQLi\", \"Lab Description\": \"User dashboard vulnerable to SQLi through JWT claims. To solve: Modify JWT to inject SQL payloads through user ID claim.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Logistics Tracking System Polyglot SQLi in XML Parameter", "target": "{\"Lab scenario\": \"Logistics Tracking System Polyglot SQLi in XML Parameter\", \"Lab Description\": \"Shipment tracking API vulnerable through XML/SQL polyglot payloads. To solve: Achieve RCE via stacked queries and COPY FROM PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal error-based sqli in having clause", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in HAVING Clause\", \"Lab Description\": \"A hospital's patient statistics dashboard allows filtering by department and uses the user input directly in the HAVING clause of a SQL query. Due to lack of input sanitization, attackers can trigger error-based SQL injection to extract sensitive database metadata. This lab demonstrates exploitation using PostgreSQL type casting errors and common table expressions (CTEs) to enumerate tables and leak medical record IDs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device time-based sqli via mqtt protocol", "target": "{\"Lab scenario\": \"IoT Device Time-Based SQLi via MQTT Protocol\", \"Lab Description\": \"An MQTT broker receives JSON-encoded telemetry data from smart devices and writes it to a SQL database. Since the MQTT handler does not sanitize incoming values, attackers can inject SQL into the `device_id` field. This lab explores time-based SQL injection to exfiltrate API keys from the database by measuring conditional delays caused by `pg_sleep`.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: cms second-order sqli in user registration", "target": "{\"Lab scenario\": \"CMS Second-Order SQLi in User Registration\", \"Lab Description\": \"A content management system stores user input during registration and later uses it unsanitized during scheduled report generation. This lab demonstrates second-order SQL injection, where malicious data triggers SQL execution not during entry, but during later backend processing (e.g., admin reporting or logs).\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: banking portal boolean-blind sqli in transaction search", "target": "{\"Lab scenario\": \"Banking Portal Boolean-Blind SQLi in Transaction Search\", \"Lab Description\": \"The transaction search feature returns true/false based on user-defined queries. Since there's no direct error or output, Boolean-based blind SQL injection is needed. Attackers can infer information like account balances by manipulating the query logic and observing application behavior.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce filter evasion sqli with unicode bypass", "target": "{\"Lab scenario\": \"E-Commerce Filter Evasion SQLi with Unicode Bypass\", \"Lab Description\": \"The product search field filters user input by stripping single quotes, but it fails to detect alternate encodings. Attackers can exploit this by using Unicode-encoded apostrophes to bypass the sanitization and extract payment data from the backend.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: logistics tracking out-of-band sqli via dns", "target": "{\"Lab scenario\": \"Logistics Tracking Out-of-Band SQLi via DNS\", \"Lab Description\": \"A vulnerable shipment tracker constructs SQL queries from user input and allows attackers to trigger out-of-band SQLi using DNS exfiltration. This lab illustrates exfiltrating AWS keys via DNS queries using the `LOAD_FILE` or `MAKE_SET` functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT tokens and places the 'sub' claim directly into SQL queries to load user profiles. An attacker can forge a token and manipulate the claim to perform SQL injection. This lab demonstrates bypassing authentication and accessing another user's messages.", "target": "{\"Lab scenario\": \"Social Media JWT-Triggered SQLi in Profile Load\", \"Lab Description\": \"The application uses JWT tokens and places the 'sub' claim directly into SQL queries to load user profiles. An attacker can forge a token and manipulate the claim to perform SQL injection. This lab demonstrates bypassing authentication and accessing another user's messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An export feature accepts filtering criteria in a query used in PostgreSQL's COPY command. Lack of sanitization allows stacked SQL queries. This lab shows how attackers can chain malicious SQL to perform remote command execution (RCE) via COPY FROM PROGRAM.", "target": "{\"Lab scenario\": \"Education Platform Stacked SQLi in CSV Export\", \"Lab Description\": \"An export feature accepts filtering criteria in a query used in PostgreSQL's COPY command. Lack of sanitization allows stacked SQL queries. This lab shows how attackers can chain malicious SQL to perform remote command execution (RCE) via COPY FROM PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal XML SQLi in SOAP Service", "target": "{\"Lab scenario\": \"Government Portal XML SQLi in SOAP Service\", \"Lab Description\": \"A SOAP endpoint accepts XML input and uses XPath to extract user input before inserting it into a SQL query. This allows hybrid XML-SQL injection. Attackers can use CDATA or entity expansion to inject SQL and retrieve citizen SSNs from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where pharmacy management system error-based sqli in having clause", "target": "{\"Lab scenario\": \"Pharmacy Management System Error-Based SQLi in HAVING Clause\", \"Lab Description\": \"A medication inventory system generates reports using vulnerable HAVING conditions. The PostgreSQL backend returns verbose type conversion errors containing sensitive data. The application aggregates results from multiple tables but fails to sanitize the 'threshold' parameter. To solve: Extract patient SSNs by forcing mismatched data type errors through controlled CAST operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where insurance claim system union-based sqli with type juggling", "target": "{\"Lab scenario\": \"Insurance Claim System UNION-Based SQLi with Type Juggling\", \"Lab Description\": \"A claims processing portal constructs dynamic UNION queries using unsanitized user input in the 'document_type' parameter. The MySQL backend performs implicit type conversion between JSON and string types. To solve: Bypass column type checks using JSON_ARRAY and extract adjuster credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: e-commerce platform second-order sqli in product reviews", "target": "{\"Lab scenario\": \"E-Commerce Platform Second-Order SQLi in Product Reviews\", \"Lab Description\": \"A product review system stores unsanitized user comments that later get used in inventory management SQL queries. The Node.js backend escapes output but not storage. To solve: Poison the review system with delayed payloads that trigger during stock reconciliation cron jobs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Telemedicine Platform JSON Path SQLi in Patient Search", "target": "{\"Lab scenario\": \"Telemedicine Platform JSON Path SQLi in Patient Search\", \"Lab Description\": \"A patient lookup feature uses JSONB path expressions in PostgreSQL with unsanitized input. The system allows path traversal via lateral joins. To solve: Extract mental health records by abusing jsonb_to_recordset function in WHERE clause.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A financial auditing feature generates CSV reports using unsanitized input in ORDER BY clauses. The Oracle backend allows UNION injection through numeric column manipulation. Error messages reveal full query structure but are masked in production. To solve: Extract SWIFT codes from international_transfers table while maintaining column type consistency and bypassing CSV escaping mechanisms.", "target": "{\"Lab scenario\": \"Banking Transaction Audit System - UNION-Based SQLi in CSV Export\", \"Lab Description\": \"A financial auditing feature generates CSV reports using unsanitized input in ORDER BY clauses. The Oracle backend allows UNION injection through numeric column manipulation. Error messages reveal full query structure but are masked in production. To solve: Extract SWIFT codes from international_transfers table while maintaining column type consistency and bypassing CSV escaping mechanisms.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Time-Based SQLi in User Registration", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi in User Registration\", \"Lab Description\": \"The user registration form stores unsanitized input used in password reset emails. The MySQL backend allows time-based injection through delayed query execution. To solve: Extract administrator password hash through conditional SLEEP operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal Error-Based SQLi in GROUP BY", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in GROUP BY\", \"Lab Description\": \"Patient statistics dashboard leaks PostgreSQL errors through vulnerable GROUP BY clause. The application displays full query syntax in debug mode. To solve: Extract medical record IDs using type conversion errors and CTE injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: e-commerce platform boolean-based sqli in search", "target": "{\"Lab scenario\": \"E-Commerce Platform Boolean-Based SQLi in Search\", \"Lab Description\": \"Product search feature returns different HTTP status codes based on query truthiness. The SQLite backend allows boolean inference through response variation. To solve: Extract credit card numbers through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Platform JWT-SQLi in Profile Load", "target": "{\"Lab scenario\": \"Social Media Platform JWT-SQLi in Profile Load\", \"Lab Description\": \"User profile endpoint uses JWT claims directly in SQL queries. The application allows JWT algorithm none and has broken signature validation. To solve: Forge admin token and extract private messages through UNION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform union-based sqli in product filter", "target": "{\"Lab scenario\": \"E-Commerce Platform UNION-Based SQLi in Product Filter\", \"Lab Description\": \"The product search feature directly concatenates user input into a WHERE clause with no parameterization. The MySQL backend returns verbose errors containing database structure details. The application executes: SELECT * FROM products WHERE category = '${input}' AND status = 1. To solve: Extract customer credit card numbers through UNION attacks while bypassing column type restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal Boolean-Blind SQLi in Document Search", "target": "{\"Lab scenario\": \"Government Portal Boolean-Blind SQLi in Document Search\", \"Lab Description\": \"The public records search feature uses unsanitized input in a HAVING clause with identical 200/404 responses. The PostgreSQL backend allows boolean inference through response existence checks. The application executes: SELECT doc_id FROM archives GROUP BY doc_id HAVING ${input}. To solve: Extract classified document titles through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Platform Second-Order SQLi in Comments", "target": "{\"Lab scenario\": \"Social Media Platform Second-Order SQLi in Comments\", \"Lab Description\": \"Comment storage system escapes output but not input validation, allowing second-order injection in analytics reports. The application executes: INSERT INTO comments (text) VALUES ('${input}') and later SELECT * FROM comments WHERE ${reportFilter}. To solve: Poison comment system to execute malicious payloads during report generation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Online gradebook system leaks MySQL errors through vulnerable GROUP BY clause. The application executes: SELECT student_id FROM grades GROUP BY ${input}. To solve: Extract hashed passwords through type conversion errors and UNION payloads.", "target": "{\"Lab scenario\": \"Education Platform Error-Based SQLi in Gradebook\", \"Lab Description\": \"Online gradebook system leaks MySQL errors through vulnerable GROUP BY clause. The application executes: SELECT student_id FROM grades GROUP BY ${input}. To solve: Extract hashed passwords through type conversion errors and UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Package tracking system incorporates user input directly into ORDER BY clauses. The application executes: SELECT * FROM shipments ORDER BY ${input}. To solve: Extract sensitive customer addresses through UNION attacks with explicit type casting.", "target": "{\"Lab scenario\": \"Shipping Logistics UNION SQLi in Tracking API\", \"Lab Description\": \"Package tracking system incorporates user input directly into ORDER BY clauses. The application executes: SELECT * FROM shipments ORDER BY ${input}. To solve: Extract sensitive customer addresses through UNION attacks with explicit type casting.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Device control API uses JWT claims directly in SQL queries with broken signature validation. The application executes: SELECT * FROM devices WHERE owner = '${jwt.sub}'. To solve: Forge admin JWT and takeover all smart devices.", "target": "{\"Lab scenario\": \"Smart Home Controller JWT-SQLi in Device Management\", \"Lab Description\": \"Device control API uses JWT claims directly in SQL queries with broken signature validation. The application executes: SELECT * FROM devices WHERE owner = '${jwt.sub}'. To solve: Forge admin JWT and takeover all smart devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An online voting application displays poll results aggregated via SQL. The `poll_id` is taken from a GET parameter and directly injected into a GROUP BY query without sanitization. By leveraging error-based SQL injection with improper type casting, an attacker can extract database names and user tables using verbose PostgreSQL error messages. This lab demonstrates how misusing numeric casting in error messages can lead to data disclosure.", "target": "{\"Lab scenario\": \"Voting System - Error-Based SQL Injection in Poll Results\", \"Lab Description\": \"An online voting application displays poll results aggregated via SQL. The `poll_id` is taken from a GET parameter and directly injected into a GROUP BY query without sanitization. By leveraging error-based SQL injection with improper type casting, an attacker can extract database names and user tables using verbose PostgreSQL error messages. This lab demonstrates how misusing numeric casting in error messages can lead to data disclosure.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CRM Application - Time-Based SQL Injection in Login Form", "target": "{\"Lab scenario\": \"CRM Application - Time-Based SQL Injection in Login Form\", \"Lab Description\": \"A Customer Relationship Management (CRM) application has a vulnerable login system. Although errors are suppressed, an attacker can infer SQL injection by measuring time delays. This lab uses PostgreSQL's `pg_sleep` to demonstrate blind SQL injection through the username field, allowing attackers to brute-force credentials using conditional delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A payment platform allows filtering logs via a query string parameter. The system only returns a status of 'true' or 'false', but the backend query is injectable. Attackers can infer sensitive payment info like card digits by manipulating boolean logic within the WHERE clause and observing the true/false behavior.", "target": "{\"Lab scenario\": \"Payment Processor - Boolean-Blind SQLi in Transaction Logs\", \"Lab Description\": \"A payment platform allows filtering logs via a query string parameter. The system only returns a status of 'true' or 'false', but the backend query is injectable. Attackers can infer sensitive payment info like card digits by manipulating boolean logic within the WHERE clause and observing the true/false behavior.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: iot device dashboard - sqli via mqtt message injection", "target": "{\"Lab scenario\": \"IoT Device Dashboard - SQLi via MQTT Message Injection\", \"Lab Description\": \"IoT telemetry data sent over MQTT is processed into a PostgreSQL database. The message handler lacks proper validation, allowing SQL injection via MQTT payloads. This lab focuses on out-of-band time-based attacks and showcases how IoT protocols can become attack surfaces.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: support portal - second-order sql injection in ticket system", "target": "{\"Lab scenario\": \"Support Portal - Second-Order SQL Injection in Ticket System\", \"Lab Description\": \"The application stores user-submitted tickets that are later used in admin SQL queries. The stored malicious data becomes effective only after a separate action triggers it, demonstrating second-order SQL injection. The attacker poisons input via the ticket submission page and waits for it to be processed in a vulnerable report generation feature.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: saas analytics - sqli in export feature using stacked queries", "target": "{\"Lab scenario\": \"SaaS Analytics - SQLi in Export Feature Using Stacked Queries\", \"Lab Description\": \"The export CSV feature builds a dynamic query based on filters and directly executes it. Attackers can append stacked queries using semicolons to create new tables, copy data, or trigger remote command execution (PostgreSQL COPY FROM PROGRAM). This lab simulates privilege escalation via SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A mobile app sends JSON bodies to an API endpoint that joins JSON values into SQL filters. An attacker can exploit this by inserting SQL logic within array elements, bypassing filters and leaking authentication tokens. The vulnerability stems from improper concatenation of JSON strings into SQL clauses.", "target": "{\"Lab scenario\": \"Mobile App Backend - JSON-Based SQLi via REST API\", \"Lab Description\": \"A mobile app sends JSON bodies to an API endpoint that joins JSON values into SQL filters. An attacker can exploit this by inserting SQL logic within array elements, bypassing filters and leaking authentication tokens. The vulnerability stems from improper concatenation of JSON strings into SQL clauses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where blog engine - union sqli via tag search", "target": "{\"Lab scenario\": \"Blog Engine - Union SQLi via Tag Search\", \"Lab Description\": \"The blog application offers tag-based article filtering. Tags are concatenated into a WHERE clause with no sanitization, leading to a UNION-based SQL injection vulnerability. An attacker can extract full user records by appending a secondary query into the tag filter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where admin panel - sqli via cookie injection", "target": "{\"Lab scenario\": \"Admin Panel - SQLi via Cookie Injection\", \"Lab Description\": \"The admin dashboard uses cookie-based authentication, which is parsed and inserted into a query without sanitization. A malicious user can modify their cookie value to execute SQL injection and access admin-only resources or dump data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where banking portal union-based sqli in csv export order clause", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in CSV Export Order Clause\", \"Lab Description\": \"A financial report export feature in a banking portal directly concatenates user-controlled sorting parameters into an ORDER BY clause within a PostgreSQL COPY command. The application leaks verbose errors containing sensitive database metadata. Attackers can exploit this to exfiltrate account balances and transaction histories by bypassing column type checks through explicit casting and UNION payloads. The vulnerability stems from improper input sanitization and debug-mode error reporting in production.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform json array injection with type confusion", "target": "{\"Lab scenario\": \"E-Commerce Platform JSON Array Injection with Type Confusion\", \"Lab Description\": \"A product search API processes JSON arrays containing filter conditions without type validation. Attackers can bypass parameterized queries by nesting objects and exploiting SQLite's dynamic typing system. This lab demonstrates credential extraction through type juggling and JSON aggregation functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: social media platform jwt-sqli in notifications", "target": "{\"Lab scenario\": \"Social Media Platform JWT-SQLi in Notifications\", \"Lab Description\": \"A notification system inserts JWT 'sub' claims directly into SQL queries without validation. Attackers can forge tokens with UNION payloads to hijack user sessions and exfiltrate private messages through malformed JSON responses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where telemedicine platform xml/sql polyglot injection", "target": "{\"Lab scenario\": \"Telemedicine Platform XML/SQL Polyglot Injection\", \"Lab Description\": \"A patient portal processes XML input containing CDATA-wrapped SQL fragments. Attackers can bypass XML entity encoding through hybrid polyglot payloads to extract sensitive medical records using PostgreSQL's xmlagg() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: smart home dashboard – sqli in device group aggregation", "target": "{\"Lab scenario\": \"Smart Home Dashboard – SQLi in Device Group Aggregation\", \"Lab Description\": \"The smart home admin dashboard allows users to aggregate device energy usage by group. The server-side logic dynamically builds the SQL `GROUP BY` and `ORDER BY` clauses based on user-supplied parameters. An attacker can exploit this by injecting a UNION-based payload through the group query, exfiltrating device secrets or configuration files. The vulnerability arises due to lack of input validation and direct string interpolation into SQL clauses. This mimics real-world attacks in IoT management platforms.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: library search engine – sqli via boolean conditions in search filter", "target": "{\"Lab scenario\": \"Library Search Engine – SQLi via Boolean Conditions in Search Filter\", \"Lab Description\": \"A digital library platform allows users to search books using various filters including author and genre. The search input is vulnerable to Boolean-based blind SQL injection due to its dynamic usage in the `WHERE` clause without sanitization. By leveraging timing functions such as `pg_sleep` or `SLEEP`, an attacker can enumerate database content even when no output is directly returned. The challenge highlights data inference via blind channels and can simulate real-world research archive systems.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where insurance claim portal – sqli in policy id lookup", "target": "{\"Lab scenario\": \"Insurance Claim Portal – SQLi in Policy ID Lookup\", \"Lab Description\": \"An insurance web portal allows users to track claim status by providing a policy ID. The policy ID is directly concatenated into a SQL `WHERE` clause without proper escaping. This enables classic SQL injection attacks, allowing attackers to enumerate policy details, retrieve confidential claim attachments, and bypass access controls. This scenario mimics legacy financial services APIs that rely on ID-based filtering.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The course feedback system in a university's e-learning portal is vulnerable to stacked SQL injection. When students submit feedback, the comments are concatenated into a SQL statement used in administrative analysis reports. A malicious student can exploit this by submitting a comment that injects multiple SQL statements, enabling unauthorized access to staff tables or privilege escalation. The lab simulates real-world educational platforms that rely on weak report generators.", "target": "{\"Lab scenario\": \"Online Education Platform – SQLi via Feedback System\", \"Lab Description\": \"The course feedback system in a university's e-learning portal is vulnerable to stacked SQL injection. When students submit feedback, the comments are concatenated into a SQL statement used in administrative analysis reports. A malicious student can exploit this by submitting a comment that injects multiple SQL statements, enabling unauthorized access to staff tables or privilege escalation. The lab simulates real-world educational platforms that rely on weak report generators.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: medical record app – sqli in filtered lab test results", "target": "{\"Lab scenario\": \"Medical Record App – SQLi in Filtered Lab Test Results\", \"Lab Description\": \"A hospital management system provides an endpoint for querying lab test results filtered by test type. The SQL query uses the user input in a dynamic string with no validation, making it vulnerable to error-based SQL injection. The attacker can leverage PostgreSQL's error reporting to infer the structure of underlying tables and extract lab results or patient identifiers. This scenario is based on actual flaws seen in healthcare reporting interfaces.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Retail Chain API – SQLi via Internal Analytics Dashboard", "target": "{\"Lab scenario\": \"Retail Chain API – SQLi via Internal Analytics Dashboard\", \"Lab Description\": \"A retail chain's internal dashboard accepts analytics queries via a web UI, where filter strings are passed to a SQL backend. Due to weak validation, attackers can inject time-based SQL payloads to exfiltrate sensitive inventory and sales data, especially when UNION-based methods are blocked. The attack vector uses PostgreSQL's `pg_sleep` and conditional subqueries, ideal for time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: university login panel – sqli bypass via cookie manipulation", "target": "{\"Lab scenario\": \"University Login Panel – SQLi Bypass via Cookie Manipulation\", \"Lab Description\": \"The login system of a university portal relies on a user-supplied `auth_token` cookie, which is directly included in a SQL query. An attacker can forge the token to include a SQLi payload, bypassing authentication checks. This lab simulates real-world flaws in legacy systems where session data is not validated cryptographically.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An internal admin panel allows assigning roles to users through a vulnerable SQL query concatenated with user-controlled input. The input is directly passed to the SQL `UPDATE` query without proper sanitization. An attacker with limited access can escalate privileges by injecting into the role assignment input field. This scenario simulates a common misconfiguration where admin interfaces are assumed safe and are poorly validated.", "target": "{\"Lab scenario\": \"Internal Admin Panel – SQLi in Role Assignment\", \"Lab Description\": \"An internal admin panel allows assigning roles to users through a vulnerable SQL query concatenated with user-controlled input. The input is directly passed to the SQL `UPDATE` query without proper sanitization. An attacker with limited access can escalate privileges by injecting into the role assignment input field. This scenario simulates a common misconfiguration where admin interfaces are assumed safe and are poorly validated.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Payment History Portal – SQLi in Dynamic Column Filter", "target": "{\"Lab scenario\": \"Payment History Portal – SQLi in Dynamic Column Filter\", \"Lab Description\": \"The application backend allows users to search their payment history by various columns like `amount`, `status`, or `method`. The filter column name is user-controlled and directly used in the SQL query, leading to a classic SQLi vulnerability through the `ORDER BY` clause. An attacker can exploit this to inject malicious SQL and dump the full transaction history or manipulate sorting logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: NGO Donor Portal – SQLi via Search Field with LIKE", "target": "{\"Lab scenario\": \"NGO Donor Portal – SQLi via Search Field with LIKE\", \"Lab Description\": \"The NGO's donation search feature is vulnerable due to unsanitized use of user input in a `LIKE` clause. Attackers can inject SQL using special characters and extract sensitive donor information such as email addresses, donation amount, and messages. This is a common real-world vulnerability due to poor filter design in keyword searches.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: graphql backend – sql injection in resolver function", "target": "{\"Lab scenario\": \"GraphQL Backend – SQL Injection in Resolver Function\", \"Lab Description\": \"A GraphQL resolver directly includes user input from a search query in the SQL statement, making it vulnerable to SQL injection. The injection point is in the GraphQL `searchProducts(term: String)` operation. Exploiting this can lead to arbitrary SQL execution and access to sensitive product inventory details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application lets users filter travel packages by country. However, the country parameter is unsanitized and directly included in the SQL query. This allows attackers to enumerate packages in other users’ accounts by bypassing country-level access control using injection in the filter parameter.", "target": "{\"Lab scenario\": \"Travel Booking – SQLi in Country Filter with Enumeration\", \"Lab Description\": \"This application lets users filter travel packages by country. However, the country parameter is unsanitized and directly included in the SQL query. This allows attackers to enumerate packages in other users’ accounts by bypassing country-level access control using injection in the filter parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A cloud service uses a weak implementation for API key lookup. It concatenates the `x-api-key` header value directly into a query. A malicious actor could modify the header and extract data from other tenants’ records or even bypass authentication altogether.", "target": "{\"Lab scenario\": \"Cloud Service – SQL Injection in API Key Authorization\", \"Lab Description\": \"A cloud service uses a weak implementation for API key lookup. It concatenates the `x-api-key` header value directly into a query. A malicious actor could modify the header and extract data from other tenants’ records or even bypass authentication altogether.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a SQL injection lab where employee portal – sql injection in login field", "target": "{\"Lab scenario\": \"Employee Portal – SQL Injection in Login Field\", \"Lab Description\": \"The login form for internal employee authentication takes the username and password and embeds them directly into a SQL query. There is no use of prepared statements or sanitization, making it highly vulnerable. This classic injection can be used to bypass login and access internal records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Mobile API – SQL Injection in JSON Body Parameter", "target": "{\"Lab scenario\": \"Mobile API – SQL Injection in JSON Body Parameter\", \"Lab Description\": \"The mobile application sends JSON data containing search filters. The backend fails to validate or sanitize the `title` parameter in the JSON body. An attacker could send a malicious JSON payload to inject arbitrary SQL into the backend and retrieve internal documents.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Support Chat System – SQL Injection via Cookie Parameter", "target": "{\"Lab scenario\": \"Support Chat System – SQL Injection via Cookie Parameter\", \"Lab Description\": \"The application identifies users using a session cookie that is directly passed to a SQL query. If an attacker modifies the cookie value to include SQL, it can be used to retrieve or manipulate chat history, impersonate another user, or drop session tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking api union-based sqli with column padding", "target": "{\"Lab scenario\": \"Banking API UNION-Based SQLi with Column Padding\", \"Lab Description\": \"A financial transactions API endpoint directly incorporates unsanitized user input into ORDER BY clauses of PostgreSQL queries. The application returns verbose errors containing full query syntax and database structure. Attackers can bypass column count restrictions through NULL padding and explicit type casting to extract SHA-256 hashed PIN codes from the accounts table. The vulnerability stems from debug-mode error handling in production and lack of parameterized queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Medical Imaging System Error-Based SQLi in DICOM Metadata", "target": "{\"Lab scenario\": \"Medical Imaging System Error-Based SQLi in DICOM Metadata\", \"Lab Description\": \"A hospital PACS system improperly handles DICOM metadata fields in MySQL INSERT statements. PatientName tags (0010,0010) containing SQL fragments trigger type conversion errors that leak radiation therapy records through verbose database exceptions. Attackers can exfiltrate treatment plans containing sensitive Protected Health Information (PHI) by manipulating VR (Value Representation) fields.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where blockchain oracle sqli with signature bypass", "target": "{\"Lab scenario\": \"Blockchain Oracle SQLi with Signature Bypass\", \"Lab Description\": \"A DeFi price oracle using EIP-712 signatures fails to validate query parameters in PostgreSQL. Attackers can forge signed requests to manipulate token prices through UNION injections in symbol parameterization. Vulnerability arises from improper separation of signing logic and SQL construction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: industrial plc code injection via modbus", "target": "{\"Lab scenario\": \"Industrial PLC Code Injection via Modbus\", \"Lab Description\": \"A PLC management interface processes Modbus FC23 messages with unsanitized register values in SQLite. Attackers can overwrite ladder logic through stacked queries containing CODESYS compiler commands. Vulnerability stems from mixing control logic storage with operational telemetry.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Telecom SS7 MAP Protocol SQLi", "target": "{\"Lab scenario\": \"Telecom SS7 MAP Protocol SQLi\", \"Lab Description\": \"Mobile core network MAP interface improperly handles IMSI values in Oracle PL/SQL. Attackers can inject UNION payloads in UpdateLocation requests to exfiltrate subscriber SMS contents through SCCP routing bypass. Combines SS7 protocol weaknesses with dynamic SQL execution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where smart contract metadata sqli", "target": "{\"Lab scenario\": \"Smart Contract Metadata SQLi\", \"Lab Description\": \"NFT marketplace processes ERC-721 metadata with vulnerable JSONB queries in PostgreSQL. Attackers exploit JSON concatenation precedence to exfiltrate wallet keys through corrupted rarity scores. Vulnerability combines JSON operator precedence with lack of parameterization.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where drone navigation sqli via mavlink", "target": "{\"Lab scenario\": \"Drone Navigation SQLi via MAVLink\", \"Lab Description\": \"UAV ground control system processes MAVLink mission items with unsanitized parameters. Attackers inject coordinate updates through stacked queries to modify flight paths. Vulnerability stems from mixing navigation data storage with real-time control.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Quantum compiler processes OpenQASM files with vulnerable creg names. Attackers inject SQL payloads to exfiltrate IBMQ credentials through transpilation errors. Combines quantum programming syntax with traditional SQLi.", "target": "{\"Lab scenario\": \"Quantum Circuit SQLi in QASM\", \"Lab Description\": \"Quantum compiler processes OpenQASM files with vulnerable creg names. Attackers inject SQL payloads to exfiltrate IBMQ credentials through transpilation errors. Combines quantum programming syntax with traditional SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare radiology sqli", "target": "{\"Lab scenario\": \"Healthcare Radiology SQLi\", \"Lab Description\": \"Medical imaging system stores radiology notes in PostgreSQL with vulnerable plv8 functions. Attackers chain SQLi with JavaScript execution to leak DICOM files. Combines improper output encoding with excessive DB privileges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where vehicle can bus sqli", "target": "{\"Lab scenario\": \"Vehicle CAN Bus SQLi\", \"Lab Description\": \"Telematics system processes J1939 messages with unsanitized PIDs in SQLite. Attackers forge OBD-II packets to overwrite firmware hashes. Vulnerability arises from mixing diagnostic data with update logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Decentralized organization uses vulnerable JSONB queries for Snapshot voting. Attackers manipulate delegation power through ENS record injections. Combines Web3 technologies with traditional SQLi.", "target": "{\"Lab scenario\": \"DAO Governance SQLi\", \"Lab Description\": \"Decentralized organization uses vulnerable JSONB queries for Snapshot voting. Attackers manipulate delegation power through ENS record injections. Combines Web3 technologies with traditional SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce product filter sql injection via json parameter", "target": "{\"Lab scenario\": \"E-Commerce Product Filter SQL Injection via JSON Parameter\", \"Lab Description\": \"An e-commerce platform's product filtering API accepts JSON-formatted filter parameters that are directly concatenated into SQL WHERE clauses. The Node.js backend fails to validate array types, allowing attackers to bypass input sanitization and execute UNION-based injections. The PostgreSQL database returns full query errors in production, leaking column structures. To solve: Extract SHA-256 hashed admin credentials and credit card tokenization keys from the payment_gateway_config table while evading WAF rules using Unicode-encoded quotes.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Patient Portal Boolean-Based Blind SQLi", "target": "{\"Lab scenario\": \"Healthcare Patient Portal Boolean-Based Blind SQLi\", \"Lab Description\": \"A hospital patient portal uses unsanitized input in medication lookup queries. The Oracle backend suppresses errors but returns HTTP 200/404 status codes based on query validity. To solve: Determine sensitive patient allergy records through bitwise binary search of ASCII values using DBMS_PIPE packaged functions. The challenge requires precise timing analysis and evasion of request throttling mechanisms.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot device management union-based sqli in api endpoint", "target": "{\"Lab scenario\": \"IoT Device Management UNION-Based SQLi in API Endpoint\", \"Lab Description\": \"An industrial IoT dashboard constructs SQL queries using unsanitized device IDs from REST parameters. The MySQL backend allows stacked queries but blocks UNION unless column counts match exactly. To solve: Extract AWS IoT Core certificates by forcing JSON type coercion through CONCAT(0x7b,private_key) and bypassing TLS fingerprint validation in the management API.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where social media platform error-based sqli in comment section", "target": "{\"Lab scenario\": \"Social Media Platform Error-Based SQLi in Comment Section\", \"Lab Description\": \"A social media platform's comment moderation system directly interpolates user input into DELETE statements. The Microsoft SQL Server leaks full query plans through verbose errors when invalid type conversions occur. To solve: Exfiltrate OAuth tokens and DM conversations by forcing arithmetic overflow errors in XML PATH queries containing secret data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Application Second-Order SQLi in User Registration", "target": "{\"Lab scenario\": \"Banking Application Second-Order SQLi in User Registration\", \"Lab Description\": \"A neo-banking app stores unsanitized occupation fields that get used in nightly KYC report generation. The PostgreSQL cron job runs with elevated privileges, allowing attackers to overwrite audit logs. To solve: Poison user profiles with CTE expressions containing pg_cancel_backend() and COPY TO PROGRAM calls to establish reverse shells through delayed job execution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Educational Platform Time-Based SQLi in Course Enrollment", "target": "{\"Lab scenario\": \"Educational Platform Time-Based SQLi in Course Enrollment\", \"Lab Description\": \"A university course enrollment system uses unsanitized student IDs in SQLite queries. The system returns identical error pages but allows time-based inference through randomblob() function calls. To solve: Extract exam answers and grade curves by measuring response delays when querying encrypted BLOB columns in the course_materials table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: government portal union sqli in document search", "target": "{\"Lab scenario\": \"Government Portal UNION SQLi in Document Search\", \"Lab Description\": \"A classified document search portal concatenates user input into ORDER BY clauses of Oracle queries. The application uses APEX authentication but leaks execution plans through utl_http calls. To solve: Exfiltrate nuclear facility blueprints by bypassing ORA-00904 errors through OUTER JOIN payloads and converting BFILEs to Base64-encoded strings in UNION SELECT clauses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A freight tracking system's CSV export feature uses unsanitized input in COPY TO statements. Attackers can execute OS commands through PostgreSQL's COPY FROM PROGRAM and create reverse shells using Python subprocesses encoded in hex. The vulnerability is compounded by the application running as root with NOPASSWD sudo privileges.", "target": "{\"Lab scenario\": \"Logistics Management System Stacked Queries via CSV Export\", \"Lab Description\": \"A freight tracking system's CSV export feature uses unsanitized input in COPY TO statements. Attackers can execute OS commands through PostgreSQL's COPY FROM PROGRAM and create reverse shells using Python subprocesses encoded in hex. The vulnerability is compounded by the application running as root with NOPASSWD sudo privileges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Telemedicine App JWT-Triggered SQLi in Patient Records", "target": "{\"Lab scenario\": \"Telemedicine App JWT-Triggered SQLi in Patient Records\", \"Lab Description\": \"A HIPAA-compliant telemedicine platform embeds JWT claims in SQL WHERE clauses without validation. Attackers can forge tokens with UNION payloads containing XPath expressions to extract radiology images stored as PostgreSQL BYTEA. The challenge requires bypassing Content Security Policies and reconstructing DICOM files from hex-encoded binary chunks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cloud storage api sql injection via metadata field", "target": "{\"Lab scenario\": \"Cloud Storage API SQL Injection via Metadata Field\", \"Lab Description\": \"A cloud storage service processes file metadata using vulnerable JSONB path queries in PostgreSQL. Attackers can exploit jsonb_set() function to overwrite IAM policies and exfiltrate S3 pre-signed URLs through malformed JSON responses containing UNION-injected bucket permissions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The search functionality does not properly sanitize user input, allowing for SQL injection. The application uses user-supplied search terms directly in SQL queries, exposing it to attack. To solve: Inject malicious SQL to retrieve sensitive data or modify the database.", "target": "{\"Lab scenario\": \"SQL Injection in Search Functionality\", \"Lab Description\": \"The search functionality does not properly sanitize user input, allowing for SQL injection. The application uses user-supplied search terms directly in SQL queries, exposing it to attack. To solve: Inject malicious SQL to retrieve sensitive data or modify the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in a REST API's product search query", "target": "{\"Lab scenario\": \"SQL injection in a REST API's product search query\", \"Lab Description\": \"This lab demonstrates a UNION-based SQL injection vulnerability in a product search query of a REST API. The API takes a product name as a query parameter and executes a direct SQL query without sanitization. To solve the lab, exploit this vulnerability to enumerate the database version.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a boolean-based blind SQL injection vulnerability in a login form. The application uses a vulnerable query that doesn't provide direct error messages but does change the page content based on the result. To solve the lab, infer the administrator's password length using boolean conditions.", "target": "{\"Lab scenario\": \"Boolean-based blind SQL injection in login form\", \"Lab Description\": \"This lab demonstrates a boolean-based blind SQL injection vulnerability in a login form. The application uses a vulnerable query that doesn't provide direct error messages but does change the page content based on the result. To solve the lab, infer the administrator's password length using boolean conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Time-based SQL injection in account balance query", "target": "{\"Lab scenario\": \"Time-based SQL injection in account balance query\", \"Lab Description\": \"This lab demonstrates a time-based SQL injection vulnerability in an account balance query. The application performs a delay in response when an invalid query is executed. To solve the lab, infer the balance of a target account by sending time-delayed SQL injection queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a SQL injection vulnerability where input filters only allow certain characters. The application sanitizes input but does not properly handle case differences. To solve the lab, bypass the filter and perform a UNION-based SQL injection attack.", "target": "{\"Lab scenario\": \"SQL injection bypassing input filters with case manipulation\", \"Lab Description\": \"This lab demonstrates a SQL injection vulnerability where input filters only allow certain characters. The application sanitizes input but does not properly handle case differences. To solve the lab, bypass the filter and perform a UNION-based SQL injection attack.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a SQL injection vulnerability in a SOAP API. The API accepts parameters through XML input, which is not sanitized properly. To solve the lab, perform an SQL injection attack using UNION to retrieve sensitive data from the database.", "target": "{\"Lab scenario\": \"SQL injection in SOAP API\", \"Lab Description\": \"This lab demonstrates a SQL injection vulnerability in a SOAP API. The API accepts parameters through XML input, which is not sanitized properly. To solve the lab, perform an SQL injection attack using UNION to retrieve sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Blockchain Oracle SQLi with Smart Contract Trigger", "target": "{\"Lab scenario\": \"Blockchain Oracle SQLi with Smart Contract Trigger\", \"Lab Description\": \"A DeFi price oracle executes SQL queries based on Ethereum smart contract events stored in PostgreSQL. The Node.js listener fails to validate calldata parameters, allowing attackers to inject UNION payloads through forged ERC-721 Transfer events. The vulnerability enables manipulation of token price feeds by concatenating malicious WHERE clauses containing arithmetic overflow conditions. To solve: Exploit the Chainlink external adapter interface to overwrite ETH/USD rates using hex-encoded byte32 payloads containing pg_notify() calls.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Surgical Robot Control System Time-Based SQLi", "target": "{\"Lab scenario\": \"Surgical Robot Control System Time-Based SQLi\", \"Lab Description\": \"A ROS2-based surgical interface stores procedure logs in SQLite with unsanitized JSON metadata. The C++ middleware allows time-based inference through std::this_thread::sleep_for() calls in WHERE clauses. To solve: Exfiltrate patient biometric encryption keys by measuring 50ms response delay variances using SUBSTR(SHA3-256(ecg_data),1,4) comparisons and bypass CRC32 checksum validation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Satellite Ground Station UNION SQLi via CCSDS Telemetry", "target": "{\"Lab scenario\": \"Satellite Ground Station UNION SQLi via CCSDS Telemetry\", \"Lab Description\": \"A satellite command system processes CCSDS packet APIDs through vulnerable PostgreSQL stored procedures. Attackers can inject frame_count parameters containing UNION SELECT payloads to overwrite NORAD TLE data. The challenge requires bypassing Reed-Solomon error correction and aligning columns using SPIREnt test equipment timing.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where quantum database error-based sqli in shor's algorithm", "target": "{\"Lab scenario\": \"Quantum Database Error-Based SQLi in Shor's Algorithm\", \"Lab Description\": \"A post-quantum cryptography system implements Grover's algorithm for SQL optimization, leaking error states through IBM Qiskit backend exceptions. Attackers can force modulus overflow errors in WHERE clauses containing factored primes. To solve: Extract RSA-4096 private keys by solving discrete logarithm problems revealed in amplitude amplification error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where 5g core network sqli in amf registration", "target": "{\"Lab scenario\": \"5G Core Network SQLi in AMF Registration\", \"Lab Description\": \"A 5G Access and Mobility Management Function (AMF) stores UE contexts in MariaDB with unsanitized SUPI parameters. Attackers can inject Handover Required messages containing GTP-U extensions with UNION payloads to disclose Kseaf derivation keys. Requires bypassing PFCP session validation and aligning column counts using NAS encryption type offsets.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Industrial SCADA SQLi via Modbus/TCP", "target": "{\"Lab scenario\": \"Industrial SCADA SQLi via Modbus/TCP\", \"Lab Description\": \"A SCADA system maps Modbus holding registers to SQLite queries using function code 0x17. Attackers can overwrite PID controller setpoints through injected WHERE clauses containing IEEE-754 floating point exploits. The challenge requires precise timing to bypass CRC checks and align payloads with RTU poll cycles.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A UAV ground control system stores flight paths in PostgreSQL with unsanitized MAVLink MISSION_ITEM_INT parameters. Attackers can inject arbitrary SRID transformations through UNION payloads containing ST_Transform() calls to redirect drones. Requires bypassing packet sequence validation and aligning column counts with PG_GEOMETRY metadata.", "target": "{\"Lab scenario\": \"Military Drone SQLi in MAVLink Mission Protocol\", \"Lab Description\": \"A UAV ground control system stores flight paths in PostgreSQL with unsanitized MAVLink MISSION_ITEM_INT parameters. Attackers can inject arbitrary SRID transformations through UNION payloads containing ST_Transform() calls to redirect drones. Requires bypassing packet sequence validation and aligning column counts with PG_GEOMETRY metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A power distribution system maps IEC 61850 GOOSE messages to MySQL queries. Attackers can inject Logical Node names containing boolean-based payloads to disable circuit breakers. The challenge requires precise timing to bypass SMV sampling synchronization and manipulate CURRENT_TAP_SETTING values.", "target": "{\"Lab scenario\": \"Smart Grid SQLi via IEC 61850 GOOSE\", \"Lab Description\": \"A power distribution system maps IEC 61850 GOOSE messages to MySQL queries. Attackers can inject Logical Node names containing boolean-based payloads to disable circuit breakers. The challenge requires precise timing to bypass SMV sampling synchronization and manipulate CURRENT_TAP_SETTING values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where nuclear plant sqli in opc ua historian", "target": "{\"Lab scenario\": \"Nuclear Plant SQLi in OPC UA Historian\", \"Lab Description\": \"A reactor monitoring system stores OPC UA historized data in TimescaleDB. Attackers can inject malformed NodeIds containing UNION payloads to falsify core temperature readings. Requires bypassing UA SecureChannel nonce validation and aligning column types using IEEE-754 DOUBLE conversions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where submarine cable sqli via otn framing", "target": "{\"Lab scenario\": \"Submarine Cable SQLi via OTN Framing\", \"Lab Description\": \"An undersea DWDM network maps OTN OPU payloads to PostgreSQL BLOB queries. Attackers can inject GFP-T frames containing hex-encoded UNION payloads to exfiltrate BGP peering keys. Requires precise alignment with ODUflex containers and bypassing FEC checks using soft-decision decoding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Time-Based SQLi via GraphQL Batch Query", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi via GraphQL Batch Query\", \"Lab Description\": \"Headless CMS implements vulnerable GraphQL resolvers that concatenate user input into PostgreSQL pg_sleep() calls. The Java backend suppresses errors but leaks timing differentials through N+1 query patterns. To solve: Exfiltrate admin API keys through conditional response delays using DNS-over-HTTPS tunneling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks full error messages containing AWS RDS instance metadata through verbose logging. To solve: Extract DynamoDB access keys using geometry type conversion errors in MULTIPOINT() functions.", "target": "{\"Lab scenario\": \"API Gateway Error-Based SQLi in JSON Array\", \"Lab Description\": \"Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks full error messages containing AWS RDS instance metadata through verbose logging. To solve: Extract DynamoDB access keys using geometry type conversion errors in MULTIPOINT() functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce union-based sqli with column padding", "target": "{\"Lab scenario\": \"E-Commerce UNION-Based SQLi with Column Padding\", \"Lab Description\": \"Product search feature uses fixed-width UNION column validation in MySQL. The application truncates overflow data but leaks information through JSON encoding errors. To solve: Bypass column count restrictions using NULL padding and extract PCI-compliant credit card numbers through CONCAT(LPAD()) length exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: social media boolean-based blind sqli in dm search", "target": "{\"Lab scenario\": \"Social Media Boolean-Based Blind SQLi in DM Search\", \"Lab Description\": \"Direct message search functionality uses unsanitized input in SQL Server FULLTEXT predicates. The .NET backend suppresses errors but reveals truthiness through emoji reaction counts. To solve: Exfiltrate OAuth tokens through BITAND() comparisons of UNICODE() values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: User profile endpoint incorporates JWT 'sub' claim directly into SQL Server OPENJSON queries. The application leaks decrypted sensitive columns through XML FOR JSON PATH conversion errors. To solve: Extract encrypted SSNs by forcing type mismatches in JSON_VALUE() path expressions.", "target": "{\"Lab scenario\": \"REST API Error-Based SQLi in JWT Claims\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' claim directly into SQL Server OPENJSON queries. The application leaks decrypted sensitive columns through XML FOR JSON PATH conversion errors. To solve: Extract encrypted SSNs by forcing type mismatches in JSON_VALUE() path expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Header-Based Blind SQLi in Audit Logs", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi in Audit Logs\", \"Lab Description\": \"User activity tracking system incorporates X-Forwarded-For headers into MySQL INSERT statements. The PHP backend suppresses errors but reveals query success through UUID generation patterns. To solve: Extract admin password hashes using BENCHMARK() timing attacks and rainbow table reversal.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking App Time-Based SQLi in OAuth Callback", "target": "{\"Lab scenario\": \"Banking App Time-Based SQLi in OAuth Callback\", \"Lab Description\": \"OAuth 2.0 token exchange endpoint incorporates state parameters into SQLite queries. The Go backend leaks query execution time through improperly batched database transactions. To solve: Exfiltrate transaction PINs using CASE WHEN delays and statistical timing analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Medical imaging system stores DICOM tags in MySQL GEOMETRY columns. The Python backend leaks patient diagnoses through invalid WKB format exceptions. To solve: Extract radiation therapy records using POLYGON() type conversion attacks and ST_AsText() function exploitation.", "target": "{\"Lab scenario\": \"Telemedicine Platform Error-Based SQLi in DICOM Metadata\", \"Lab Description\": \"Medical imaging system stores DICOM tags in MySQL GEOMETRY columns. The Python backend leaks patient diagnoses through invalid WKB format exceptions. To solve: Extract radiation therapy records using POLYGON() type conversion attacks and ST_AsText() function exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal second-order sqli in patient notes", "target": "{\"Lab scenario\": \"Healthcare Portal Second-Order SQLi in Patient Notes\", \"Lab Description\": \"A patient record system stores unsanitized medical notes that get concatenated into nightly backup SQL queries. The MySQL backend allows attackers to poison audit logs through delayed payload execution. This lab demonstrates how to leak sensitive diagnoses via batch job error messages using time-triggered subqueries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The device analytics page uses unsanitized input in HAVING conditions with identical success/failure responses. The SQLite backend allows boolean inference through HTTP status codes. To solve: Determine device API keys through binary search character extraction.", "target": "{\"Lab scenario\": \"IoT Dashboard Boolean-Blind SQLi in HAVING Clause\", \"Lab Description\": \"The device analytics page uses unsanitized input in HAVING conditions with identical success/failure responses. The SQLite backend allows boolean inference through HTTP status codes. To solve: Determine device API keys through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking portal union-based sqli in transaction sorting", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in Transaction Sorting\", \"Lab Description\": \"The transaction history page directly incorporates user-controlled parameters into PostgreSQL ORDER BY clauses without sanitization. The application leaks column count through verbose error messages in debug mode. To solve: Extract account numbers and balances using NULL-padded UNION payloads while evading WAF restrictions with whitespace obfuscation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot device manager boolean-based blind sqli in sensor filter", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based Blind SQLi in Sensor Filter\", \"Lab Description\": \"Device telemetry dashboard uses unsanitized HAVING clauses in SQLite queries. The application returns HTTP 200/404 status codes through misconfigured REST error handling. To solve: Extract device API keys through bitwise binary search of SUBSTR(hex(key),1,1) comparisons.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Time-Based SQLi via GraphQL Batch Query", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi via GraphQL Batch Query\", \"Lab Description\": \"Headless CMS implements vulnerable resolver that concatenates user input into PostgreSQL pg_sleep() calls. The Java backend leaks timing differentials through N+1 query patterns. To solve: Exfiltrate admin credentials through conditional response delays using DNS-over-HTTPS tunneling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks AWS RDS metadata through geometry function conversion errors. To solve: Extract S3 credentials using ST_GeomFromText() type juggling attacks.", "target": "{\"Lab scenario\": \"API Gateway Error-Based SQLi in JSON Parameter\", \"Lab Description\": \"Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks AWS RDS metadata through geometry function conversion errors. To solve: Extract S3 credentials using ST_GeomFromText() type juggling attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal second-order sqli in patient notes", "target": "{\"Lab scenario\": \"Healthcare Portal Second-Order SQLi in Patient Notes\", \"Lab Description\": \"Patient registration system stores unsanitized notes used in nightly HL7 report generation. The PostgreSQL backend allows stacked queries through JDBC batch updates. To solve: Execute reverse shell via COPY FROM PROGRAM during report generation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce union-based sqli with type juggling", "target": "{\"Lab scenario\": \"E-Commerce UNION-Based SQLi with Type Juggling\", \"Lab Description\": \"Product filter uses strict column type validation in MySQL. The application leaks truncated data through JSON encoding errors. To solve: Extract credit card numbers using CONCAT(LPAD()) length exploitation and NULL padding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Boolean-Blind SQLi in Direct Messages", "target": "{\"Lab scenario\": \"Social Media Boolean-Blind SQLi in Direct Messages\", \"Lab Description\": \"Message search functionality uses unsanitized input in SQL Server CONTAINS predicates. The .NET backend reveals query truthiness through emoji reaction counts. To solve: Extract OAuth tokens through BITAND() ASCII comparisons.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: REST API Error-Based SQLi in JWT Claims", "target": "{\"Lab scenario\": \"REST API Error-Based SQLi in JWT Claims\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' directly into SQL Server OPENJSON queries. The application leaks SSNs through XML conversion errors. To solve: Extract encrypted SSNs using JSON_VALUE() type mismatches.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager stacked queries via mqtt", "target": "{\"Lab scenario\": \"IoT Device Manager Stacked Queries via MQTT\", \"Lab Description\": \"Device config updates process MQTT payloads in PostgreSQL without validation. The C++ backend allows stacked queries through libpq's PQexec(). To solve: Execute reverse shell via COPY FROM PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Audit logging system incorporates X-Forwarded-For headers into MySQL INSERTs. The PHP backend reveals query success through UUID patterns. To solve: Extract password hashes using BENCHMARK() timing attacks.", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi in Audit Logs\", \"Lab Description\": \"Audit logging system incorporates X-Forwarded-For headers into MySQL INSERTs. The PHP backend reveals query success through UUID patterns. To solve: Extract password hashes using BENCHMARK() timing attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal UNION-Based SQLi in PDF Export", "target": "{\"Lab scenario\": \"Government Portal UNION-Based SQLi in PDF Export\", \"Lab Description\": \"Report generation feature concatenates user input into PostgreSQL COPY TO statements. The Java backend allows UNION injections in CSV headers. To solve: Exfiltrate classified docs via hex-encoded LOAD_FILE().\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Device telemetry aggregation uses unsanitized HAVING conditions in SQLite queries. The REST API returns HTTP 200 for true conditions and 404 for false through misconfigured rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based Blind SQLi in HAVING Clause\", \"Lab Description\": \"Device telemetry aggregation uses unsanitized HAVING conditions in SQLite queries. The REST API returns HTTP 200 for true conditions and 404 for false through misconfigured rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal time-based sqli in patient lookup", "target": "{\"Lab scenario\": \"Healthcare Portal Time-Based SQLi in Patient Lookup\", \"Lab Description\": \"Patient search functionality uses unsanitized input in MySQL WHERE clauses with identical error pages. The application leaks query truthiness through response timing variations in JSON Web Token generation. To solve: Exfiltrate medical record IDs through conditional SLEEP(3) delays correlated with ASCII value ranges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Product search API processes JSON array filters directly in PostgreSQL WHERE clauses. The Node.js backend allows type confusion attacks through improper array validation. To solve: Bypass parameterized queries using nested JSON objects and extract credit card tokens through base64-encoded UNION payloads.", "target": "{\"Lab scenario\": \"E-Commerce Platform UNION-Based SQLi in JSON Filter\", \"Lab Description\": \"Product search API processes JSON array filters directly in PostgreSQL WHERE clauses. The Node.js backend allows type confusion attacks through improper array validation. To solve: Bypass parameterized queries using nested JSON objects and extract credit card tokens through base64-encoded UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Report generation feature constructs vulnerable COPY queries with user-controlled ORDER BY clauses. The Java backend leaks AWS credentials through verbose PostgreSQL errors containing IAM role details. To solve: Exfiltrate access keys using CTE expressions and forced geometry conversion errors.", "target": "{\"Lab scenario\": \"Government Portal Error-Based SQLi in PDF Export\", \"Lab Description\": \"Report generation feature constructs vulnerable COPY queries with user-controlled ORDER BY clauses. The Java backend leaks AWS credentials through verbose PostgreSQL errors containing IAM role details. To solve: Exfiltrate access keys using CTE expressions and forced geometry conversion errors.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Second-Order SQLi in User Registration", "target": "{\"Lab scenario\": \"CMS Second-Order SQLi in User Registration\", \"Lab Description\": \"User registration stores unsanitized input used in nightly report generation. The MySQL backend allows stacked queries through batched statement execution. To solve: Trigger delayed reverse shell during batch processing using temp table creation and LOAD_FILE() exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where api gateway union sqli in jwt claim processing", "target": "{\"Lab scenario\": \"API Gateway UNION SQLi in JWT Claim Processing\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' claims directly into SQL Server OPENJSON queries. The .NET backend leaks encrypted SSNs through XML conversion errors. To solve: Extract sensitive data using forced type mismatches in JSON_VALUE() path expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: IoT Sensor Network Boolean-Based SQLi in Data Filtering", "target": "{\"Lab scenario\": \"IoT Sensor Network Boolean-Based SQLi in Data Filtering\", \"Lab Description\": \"Sensor data dashboard uses unsanitized input in HAVING clauses with SQLite. The REST API returns HTTP 200 for true queries through misconfigured row existence checks. To solve: Extract device encryption keys through BITAND() comparisons of SUBSTR(hex(key),1,1) values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal UNION SQLi in Radiology Reports", "target": "{\"Lab scenario\": \"Healthcare Portal UNION SQLi in Radiology Reports\", \"Lab Description\": \"DICOM report viewer concatenates user input into PostgreSQL ORDER BY clauses. The application leaks sensitive metadata through verbose COPY command errors. To solve: Extract encrypted patient diagnoses using NULL-padded UNION payloads and hex encoding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform error-based sqli in product filter", "target": "{\"Lab scenario\": \"E-Commerce Platform Error-Based SQLi in Product Filter\", \"Lab Description\": \"Product search feature uses unsanitized input in MySQL WHERE clauses. The application leaks database structure through GEOMETRY type conversion errors in MariaDB. To solve: Extract PCI-compliant credit card numbers using ST_GeomFromText() function exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: SOAP endpoint processes XML input with vulnerable XPath extraction into PostgreSQL queries. The Java backend allows UNION injections through CDATA section bypasses. To solve: Exfiltrate classified documents using xmlagg() and base64 encoding.", "target": "{\"Lab scenario\": \"Government API Gateway UNION SQLi in XML Processing\", \"Lab Description\": \"SOAP endpoint processes XML input with vulnerable XPath extraction into PostgreSQL queries. The Java backend allows UNION injections through CDATA section bypasses. To solve: Exfiltrate classified documents using xmlagg() and base64 encoding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Vehicle telemetry system processes MQTT payloads in PostgreSQL without input validation. The C++ backend allows stacked queries through PQexec() non-atomic execution. To solve: Execute remote code via COPY FROM PROGRAM and establish persistent access.", "target": "{\"Lab scenario\": \"IoT Fleet Management Stacked SQLi via MQTT\", \"Lab Description\": \"Vehicle telemetry system processes MQTT payloads in PostgreSQL without input validation. The C++ backend allows stacked queries through PQexec() non-atomic execution. To solve: Execute remote code via COPY FROM PROGRAM and establish persistent access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Zigbee device management interface constructs SQLite queries with unsanitized HAVING clauses in sensor aggregation reports. The REST API returns HTTP 200/404 status codes through misconfigurened rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.", "target": "{\"Lab scenario\": \"IoT Dashboard Boolean-Blind SQLi in Sensor Filtering\", \"Lab Description\": \"A Zigbee device management interface constructs SQLite queries with unsanitized HAVING clauses in sensor aggregation reports. The REST API returns HTTP 200/404 status codes through misconfigurened rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform union sqli in json filter", "target": "{\"Lab scenario\": \"E-Commerce Platform UNION SQLi in JSON Filter\", \"Lab Description\": \"A product search API processes JSON array filters directly in PostgreSQL WHERE clauses through vulnerable Node.js middleware. The application allows type confusion attacks through improper array validation. To solve: Bypass parameterized queries using nested JSON objects and extract PCI tokens through base64-encoded UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where government portal error-based sqli in pdf export", "target": "{\"Lab scenario\": \"Government Portal Error-Based SQLi in PDF Export\", \"Lab Description\": \"A classified document export feature constructs vulnerable COPY queries with user-controlled ORDER BY clauses in PostgreSQL. The Java backend leaks AWS credentials through verbose error messages containing IAM role details. To solve: Exfiltrate access keys using CTE expressions and forced geometry conversion errors.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API Gateway JWT-Based SQLi in Profile Endpoint", "target": "{\"Lab scenario\": \"API Gateway JWT-Based SQLi in Profile Endpoint\", \"Lab Description\": \"A user profile endpoint incorporates JWT 'sub' claims directly into SQL Server OPENJSON queries. The .NET backend leaks encrypted SSNs through XML conversion errors. To solve: Extract sensitive data using forced type mismatches in JSON_VALUE() path expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms platform second-order sqli in scheduled report generation", "target": "{\"Lab scenario\": \"CMS Platform Second-Order SQLi in Scheduled Report Generation\", \"Lab Description\": \"A content management system stores unsanitized user comments that are later used in PostgreSQL queries during nightly report generation. The Node.js backend executes vulnerable SQL statements through a cron job without input validation. To solve: Inject a payload during comment submission that triggers remote code execution via database functions during report processing.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare API Gateway UNION-Based SQLi in Patient Search Endpoint", "target": "{\"Lab scenario\": \"Healthcare API Gateway UNION-Based SQLi in Patient Search Endpoint\", \"Lab Description\": \"A HIPAA-compliant healthcare API contains vulnerable patient search functionality using unsanitized JSON input in WHERE clause construction. The application returns detailed error messages through debug headers and allows UNION operators. To solve: Extract Social Security Numbers from the 'patients' table while bypassing input sanitization that strips quotes and spaces. Successful exploitation requires content-type manipulation and NULL byte injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An online marketplace's product filtering system concatenates user-controlled parameters into GROUP BY clauses without validation. The application provides no direct error feedback but returns HTTP 200 when queries succeed. To solve: Determine administrator password hash through boolean response analysis using bit-shifting techniques and conditional error triggers.", "target": "{\"Lab scenario\": \"E-Commerce Platform Boolean-Blind SQLi in Product Filter GROUP BY\", \"Lab Description\": \"An online marketplace's product filtering system concatenates user-controlled parameters into GROUP BY clauses without validation. The application provides no direct error feedback but returns HTTP 200 when queries succeed. To solve: Determine administrator password hash through boolean response analysis using bit-shifting techniques and conditional error triggers.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A municipal document archive system contains vulnerable LIMIT/OFFSET parameters in its PostgreSQL backend. The application provides no visual feedback but allows stacked queries. To solve: Exfiltrate sensitive tax records through DNS-based out-of-band channel using pg_sleep() conditional delays and COPY TO PROGRAM vector.", "target": "{\"Lab scenario\": \"Government Portal Time-Based SQLi in Document Search Pagination\", \"Lab Description\": \"A municipal document archive system contains vulnerable LIMIT/OFFSET parameters in its PostgreSQL backend. The application provides no visual feedback but allows stacked queries. To solve: Exfiltrate sensitive tax records through DNS-based out-of-band channel using pg_sleep() conditional delays and COPY TO PROGRAM vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A dating application's friend recommendation feature constructs ORDER BY clauses directly from user input. The MySQL backend returns unionized results in JSON responses. To solve: Extract OAuth tokens from the 'sessions' table using column type-matching and hex-encoded payloads while bypassing JSON escaping filters.", "target": "{\"Lab scenario\": \"Social Media Platform UNION SQLi in Friend Search ORDER BY\", \"Lab Description\": \"A dating application's friend recommendation feature constructs ORDER BY clauses directly from user input. The MySQL backend returns unionized results in JSON responses. To solve: Extract OAuth tokens from the 'sessions' table using column type-matching and hex-encoded payloads while bypassing JSON escaping filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking App Error-Based SQLi in Account Balance HAVING Clause", "target": "{\"Lab scenario\": \"Banking App Error-Based SQLi in Account Balance HAVING Clause\", \"Lab Description\": \"A mobile banking web interface contains vulnerable HAVING clause construction in its balance aggregation feature. The Microsoft SQL Server backend returns detailed error messages through verbose logging. To solve: Extract account numbers and balances using error-induced data exfiltration and second-order injection via scheduled transactions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager blind sqli in sensor group filter", "target": "{\"Lab scenario\": \"IoT Device Manager Blind SQLi in Sensor Group Filter\", \"Lab Description\": \"An industrial IoT control panel contains vulnerable input handling in sensor grouping parameters. The SQLite backend provides no error feedback but returns HTTP 404 when queries fail. To solve: Map database schema through boolean response analysis and timing attacks using nested CASE statements and WAL journal analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: REST API UNION SQLi in User Search Endpoint", "target": "{\"Lab scenario\": \"REST API UNION SQLi in User Search Endpoint\", \"Lab Description\": \"A user management REST API contains vulnerable parameter binding in search queries. The PostgreSQL backend allows UNION operators but requires explicit type casting. To solve: Extract bcrypt password hashes using column type coercion and array_agg() functions while bypassing input length restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms time-based sqli in article comment filter", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi in Article Comment Filter\", \"Lab Description\": \"A WordPress-based CMS contains vulnerable comment filtering that allows stacked time-based injections. The MySQL backend has FILE privileges but blocks UNION operators. To solve: Write web shell to server using INTO OUTFILE and execute commands through User-Agent validation bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Inventory System Second-Order SQLi in CSV Export", "target": "{\"Lab scenario\": \"Inventory System Second-Order SQLi in CSV Export\", \"Lab Description\": \"A retail inventory system stores unsanitized user input that gets used in later CSV export queries. The Oracle backend allows PL/SQL injection but filters semicolons. To solve: Poison product descriptions with time-based payloads and trigger export job to execute OS commands via DBMS_SCHEDULER.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: travel booking system out-of-band sqli in loyalty points", "target": "{\"Lab scenario\": \"Travel Booking System Out-of-Band SQLi in Loyalty Points\", \"Lab Description\": \"An airline loyalty program contains vulnerable points redemption logic with MSSQL xp_cmdshell access. The application blocks direct error output but allows DNS-based exfiltration. To solve: Execute reverse shell via SQL injection chain and pivot to internal payment systems using cracked service account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Internal Admin Panel – SQLi in Role Assignment", "target": "{\"Lab scenario\": \"Internal Admin Panel – SQLi in Role Assignment\", \"Lab Description\": \"An internal admin panel allows assigning roles to users through a vulnerable SQL query concatenated with user-controlled input. The input is directly passed to the SQL `UPDATE` query without proper sanitization. An attacker with limited access can escalate privileges by injecting into the role assignment input field. This scenario simulates a common misconfiguration where admin interfaces are assumed safe and are poorly validated.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: payment history portal – sqli in dynamic column filter", "target": "{\"Lab scenario\": \"Payment History Portal – SQLi in Dynamic Column Filter\", \"Lab Description\": \"The application backend allows users to search their payment history by various columns like `amount`, `status`, or `method`. The filter column name is user-controlled and directly used in the SQL query, leading to a classic SQLi vulnerability through the `ORDER BY` clause. An attacker can exploit this to inject malicious SQL and dump the full transaction history or manipulate sorting logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The NGO's donation search feature is vulnerable due to unsanitized use of user input in a `LIKE` clause. Attackers can inject SQL using special characters and extract sensitive donor information such as email addresses, donation amount, and messages. This is a common real-world vulnerability due to poor filter design in keyword searches.", "target": "{\"Lab scenario\": \"NGO Donor Portal – SQLi via Search Field with LIKE\", \"Lab Description\": \"The NGO's donation search feature is vulnerable due to unsanitized use of user input in a `LIKE` clause. Attackers can inject SQL using special characters and extract sensitive donor information such as email addresses, donation amount, and messages. This is a common real-world vulnerability due to poor filter design in keyword searches.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where graphql backend – sql injection in resolver function", "target": "{\"Lab scenario\": \"GraphQL Backend – SQL Injection in Resolver Function\", \"Lab Description\": \"A GraphQL resolver directly includes user input from a search query in the SQL statement, making it vulnerable to SQL injection. The injection point is in the GraphQL `searchProducts(term: String)` operation. Exploiting this can lead to arbitrary SQL execution and access to sensitive product inventory details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Travel Booking – SQLi in Country Filter with Enumeration", "target": "{\"Lab scenario\": \"Travel Booking – SQLi in Country Filter with Enumeration\", \"Lab Description\": \"This application lets users filter travel packages by country. However, the country parameter is unsanitized and directly included in the SQL query. This allows attackers to enumerate packages in other users’ accounts by bypassing country-level access control using injection in the filter parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a high SQL injection lab for: cloud service - sql injection in api key authorization", "target": "{\"Lab scenario\": \"Cloud Service - SQL Injection in API Key Authorization\", \"Lab Description\": \"A cloud service uses a weak implementation for API key lookup. It concatenates the `x-api-key` header value directly into a query. A malicious actor could modify the header and extract data from other tenants’ records or even bypass authentication altogether.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Employee Portal - SQL Injection in Login Field", "target": "{\"Lab scenario\": \"Employee Portal - SQL Injection in Login Field\", \"Lab Description\": \"The login form for internal employee authentication takes the username and password and embeds them directly into a SQL query. There is no use of prepared statements or sanitization, making it highly vulnerable. This classic injection can be used to bypass login and access internal records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where mobile api - sql injection in json body parameter", "target": "{\"Lab scenario\": \"Mobile API - SQL Injection in JSON Body Parameter\", \"Lab Description\": \"The mobile application sends JSON data containing search filters. The backend fails to validate or sanitize the `title` parameter in the JSON body. An attacker could send a malicious JSON payload to inject arbitrary SQL into the backend and retrieve internal documents.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: support chat system - sql injection via cookie parameter", "target": "{\"Lab scenario\": \"Support Chat System - SQL Injection via Cookie Parameter\", \"Lab Description\": \"The application identifies users using a session cookie that is directly passed to a SQL query. If an attacker modifies the cookie value to include SQL, it can be used to retrieve or manipulate chat history, impersonate another user, or drop session tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce API Gateway UNION-Based SQLi in Product Filtering", "target": "{\"Lab scenario\": \"E-Commerce API Gateway UNION-Based SQLi in Product Filtering\", \"Lab Description\": \"A REST API for an online marketplace constructs SQL queries using unsanitized JSON input in WHERE clause parameters. The vulnerable endpoint returns detailed error messages through debug headers and allows UNION operators with explicit type casting. To solve: Extract credit card tokens from the 'payments' table using hex-encoded payloads while bypassing WAF filters that block quote characters and whitespace.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A HIPAA-compliant patient management system constructs HAVING clauses using unsanitized user input with boolean response patterns. The application provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract sensitive medical record IDs using bitwise brute-force techniques and response timing analysis while evading rate limiting controls.", "target": "{\"Lab scenario\": \"Healthcare Portal Blind SQLi in Patient Search HAVING Clause\", \"Lab Description\": \"A HIPAA-compliant patient management system constructs HAVING clauses using unsanitized user input with boolean response patterns. The application provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract sensitive medical record IDs using bitwise brute-force techniques and response timing analysis while evading rate limiting controls.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: banking app error-based sqli in transaction sorting", "target": "{\"Lab scenario\": \"Banking App Error-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A mobile banking application constructs ORDER BY clauses using unsanitized user input with verbose error logging enabled. The Microsoft SQL Server backend leaks database schema information through type conversion errors. To solve: Extract account numbers and balances using nested error-induced data exfiltration and second-order injection via scheduled transaction comments.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot dashboard time-based sqli in device telemetry", "target": "{\"Lab scenario\": \"IoT Dashboard Time-Based SQLi in Device Telemetry\", \"Lab Description\": \"An industrial IoT monitoring system constructs SQL queries using unsanitized device IDs in WHERE clauses. The PostgreSQL backend allows stacked queries with pg_sleep() function access but provides no direct output. To solve: Exfiltrate admin credentials through DNS-based out-of-band channel using conditional time delays and COPY TO PROGRAM vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A content management system constructs SQL queries using unsanitized comment IDs with boolean response patterns. The MySQL backend provides no error messages but returns different HTML templates for true/false conditions. To solve: Extract administrator API keys through bit-shifting brute-force techniques and differential response analysis.", "target": "{\"Lab scenario\": \"CMS Boolean-Based Blind SQLi in Article Comments\", \"Lab Description\": \"A content management system constructs SQL queries using unsanitized comment IDs with boolean response patterns. The MySQL backend provides no error messages but returns different HTML templates for true/false conditions. To solve: Extract administrator API keys through bit-shifting brute-force techniques and differential response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: government portal union sqli in document metadata", "target": "{\"Lab scenario\": \"Government Portal UNION SQLi in Document Metadata\", \"Lab Description\": \"A municipal document archive system constructs SQL queries using unsanitized document IDs with UNION operator support. The Oracle backend requires explicit NULL type casting and provides detailed error messages. To solve: Extract sensitive tax records through multi-stage UNION attacks with column type matching and XML encoding bypasses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where social media platform out-of-band sqli in notifications", "target": "{\"Lab scenario\": \"Social Media Platform Out-of-Band SQLi in Notifications\", \"Lab Description\": \"A social media platform constructs SQL queries using unsanitized notification IDs with MSSQL xp_cmdshell access. The application blocks direct error output but allows DNS-based exfiltration. To solve: Execute reverse shell via SQL injection chain and pivot to internal chat systems using cracked service account credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: education portal second-order sqli in course registration", "target": "{\"Lab scenario\": \"Education Portal Second-Order SQLi in Course Registration\", \"Lab Description\": \"A university portal stores unsanitized user input in course enrollment records that later gets used in batch processing queries. The PostgreSQL backend allows prepared statement bypass through JSON encoding. To solve: Poison course descriptions with time-based payloads and trigger nightly batch job to execute OS commands via COPY TO PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Logistics System Time-Based SQLi in Shipment Tracking", "target": "{\"Lab scenario\": \"Logistics System Time-Based SQLi in Shipment Tracking\", \"Lab Description\": \"A global logistics platform constructs SQL queries using unsanitized tracking numbers in WHERE clauses. The MariaDB backend allows stacked queries with SLEEP() function access but provides no direct output. To solve: Exfiltrate shipment manifests through DNS-based out-of-band channel using conditional time delays and LOAD_FILE() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where hr system union-based sqli in employee search", "target": "{\"Lab scenario\": \"HR System Union-Based SQLi in Employee Search\", \"Lab Description\": \"A corporate HR platform constructs SQL queries using unsanitized search parameters in ORDER BY clauses. The MySQL backend returns unionized results in JSON format with type validation. To solve: Extract salary information and SSNs through multi-stage UNION attacks with explicit type casting and JSON array bypass techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab features a login form in a banking portal that uses unsafe string concatenation to authenticate users. It is vulnerable to time-based blind SQL injection using conditional delays. The application does not return errors or success messages clearly, but response delay can be used to infer success or failure. To solve: Exploit the time delay vulnerability to enumerate the administrator password one character at a time using tools like sqlmap or a custom Python script.", "target": "{\"Lab scenario\": \"Banking Portal Time-Based SQL Injection in Login Authentication\", \"Lab Description\": \"This lab features a login form in a banking portal that uses unsafe string concatenation to authenticate users. It is vulnerable to time-based blind SQL injection using conditional delays. The application does not return errors or success messages clearly, but response delay can be used to infer success or failure. To solve: Exploit the time delay vulnerability to enumerate the administrator password one character at a time using tools like sqlmap or a custom Python script.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking api graphql union-based sqli in transaction history", "target": "{\"Lab scenario\": \"Banking API GraphQL Union-Based SQLi in Transaction History\", \"Lab Description\": \"A financial institution's GraphQL endpoint constructs SQL queries using unsanitized input from 'orderBy' arguments in transaction history requests. The vulnerable implementation uses string concatenation for field sorting and returns full query errors through debug headers. To solve: Exfiltrate account PIN hashes using multi-stage UNION attacks with type coercion and GraphQL alias bypass techniques while evading special character filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An industrial sensor monitoring system constructs HAVING clauses using unsanitized group IDs with boolean response patterns. The SQLite backend provides no direct error feedback but returns HTTP 204 for valid queries. To solve: Extract device admin credentials using bitwise brute-force techniques and differential timing analysis while bypassing request throttling limits.", "target": "{\"Lab scenario\": \"IoT Device Boolean-Blind SQLi in Sensor Group HAVING Clause\", \"Lab Description\": \"An industrial sensor monitoring system constructs HAVING clauses using unsanitized group IDs with boolean response patterns. The SQLite backend provides no direct error feedback but returns HTTP 204 for valid queries. To solve: Extract device admin credentials using bitwise brute-force techniques and differential timing analysis while bypassing request throttling limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal time-based sqli in patient search limit clause", "target": "{\"Lab scenario\": \"Healthcare Portal Time-Based SQLi in Patient Search LIMIT Clause\", \"Lab Description\": \"A medical records system constructs LIMIT/OFFSET clauses using unsanitized pagination parameters with PostgreSQL backend. The application provides no visual feedback but allows stacked queries with pg_sleep(). To solve: Exfiltrate sensitive diagnosis codes through DNS-based out-of-band channel using conditional time delays and COPY TO PROGRAM vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce Platform Union-Based SQLi in Product Filter ORDER BY", "target": "{\"Lab scenario\": \"E-Commerce Platform Union-Based SQLi in Product Filter ORDER BY\", \"Lab Description\": \"An online marketplace constructs ORDER BY clauses using unsanitized JSON input parameters with MSSQL backend. The vulnerable endpoint returns detailed type conversion errors through debug headers. To solve: Extract credit card tokens using multi-stage UNION attacks with explicit type casting and FOR JSON PATH output bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where government portal second-order sqli in document comments", "target": "{\"Lab scenario\": \"Government Portal Second-Order SQLi in Document Comments\", \"Lab Description\": \"A municipal document system stores unsanitized user input in comment metadata that later gets used in report generation queries. The Oracle backend allows DBMS_SCHEDULER access but filters semicolons. To solve: Poison document metadata with time-based payloads and trigger PDF export to execute OS commands via external tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A financial REST API endpoint vulnerable to SQL injection in the 'sort' parameter of transaction history requests. The application constructs ORDER BY clauses using unsanitized user input and returns detailed error messages through debug headers. The Microsoft SQL Server backend requires precise type matching for UNION attacks. To solve: Extract account numbers and balances using column type coercion and error-based data exfiltration while bypassing WAF filters that block UNION operators.", "target": "{\"Lab scenario\": \"Banking API UNION-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A financial REST API endpoint vulnerable to SQL injection in the 'sort' parameter of transaction history requests. The application constructs ORDER BY clauses using unsanitized user input and returns detailed error messages through debug headers. The Microsoft SQL Server backend requires precise type matching for UNION attacks. To solve: Extract account numbers and balances using column type coercion and error-based data exfiltration while bypassing WAF filters that block UNION operators.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An industrial control system vulnerable to boolean-based blind SQL injection in the device grouping parameter. The PostgreSQL backend provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract admin credentials through bitwise brute-force techniques and differential response analysis while evading HTTP request throttling limits.", "target": "{\"Lab scenario\": \"IoT Dashboard Blind SQLi in Device Group Filter\", \"Lab Description\": \"An industrial control system vulnerable to boolean-based blind SQL injection in the device grouping parameter. The PostgreSQL backend provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract admin credentials through bitwise brute-force techniques and differential response analysis while evading HTTP request throttling limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal Time-Based SQLi in Patient Search", "target": "{\"Lab scenario\": \"Healthcare Portal Time-Based SQLi in Patient Search\", \"Lab Description\": \"A medical records system vulnerable to stacked time-based SQL injection in pagination parameters. The MySQL backend allows delayed query execution but filters UNION operators. To solve: Exfiltrate sensitive diagnosis codes through DNS-based out-of-band channel using conditional SLEEP() statements and LOAD_FILE() function while bypassing file privilege restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An online marketplace vulnerable to verbose error-based SQL injection in JSON search parameters. The Oracle backend leaks database schema through unhandled type conversion errors. To solve: Extract credit card tokens using nested error-induced data exfiltration and second-order injection via product review comments.", "target": "{\"Lab scenario\": \"E-Commerce Platform Error-Based SQLi in Product Filter\", \"Lab Description\": \"An online marketplace vulnerable to verbose error-based SQL injection in JSON search parameters. The Oracle backend leaks database schema through unhandled type conversion errors. To solve: Extract credit card tokens using nested error-induced data exfiltration and second-order injection via product review comments.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms second-order sqli in user registration", "target": "{\"Lab scenario\": \"CMS Second-Order SQLi in User Registration\", \"Lab Description\": \"A content management system stores unsanitized user input during registration that later gets used in password reset queries. The SQLite backend allows stacked queries but filters semicolons. To solve: Poison user metadata with time-based payloads and trigger password reset to execute OS commands via ATTACH DATABASE vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal Union-Based SQLi in Document Metadata", "target": "{\"Lab scenario\": \"Government Portal Union-Based SQLi in Document Metadata\", \"Lab Description\": \"A municipal records system constructs SQL queries using unsanitized document IDs in SELECT clauses. The PostgreSQL backend requires explicit type casting for UNION operators and returns JSON-formatted results. To solve: Extract sensitive tax records through multi-stage type-coerced UNION attacks and XML encoding bypasses while evading content security policies.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where social media platform time-based sqli in notifications", "target": "{\"Lab scenario\": \"Social Media Platform Time-Based SQLi in Notifications\", \"Lab Description\": \"A social network vulnerable to stacked time-based injection in notification tracking parameters. The MySQL backend allows delayed query execution but filters UNION operators. To solve: Exfiltrate private messages through DNS-based out-of-band channel using conditional BENCHMARK() delays and INTO OUTFILE vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare api boolean-blind sqli in patient search", "target": "{\"Lab scenario\": \"Healthcare API Boolean-Blind SQLi in Patient Search\", \"Lab Description\": \"A HIPAA-compliant patient portal vulnerable to boolean-based blind injection in JSON search parameters. The Microsoft SQL Server backend provides no error feedback but returns different HTTP status codes. To solve: Extract medical record numbers through bitwise brute-force techniques and differential header analysis while bypassing request rate limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce Platform Second-Order SQLi in Product Reviews", "target": "{\"Lab scenario\": \"E-Commerce Platform Second-Order SQLi in Product Reviews\", \"Lab Description\": \"An online marketplace stores unsanitized user input in product reviews that later gets used in inventory queries. The SQLite backend allows stacked queries through multiple statement execution. To solve: Poison review content with time-based payloads and trigger inventory export to execute OS commands via ATTACH DATABASE vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An industrial IoT controller vulnerable to verbose error-based injection in firmware version parameters. The MySQL backend leaks schema information through unhandled constraint violations. To solve: Extract device credentials through nested error-induced data exfiltration and second-order injection via configuration backups.", "target": "{\"Lab scenario\": \"IoT Device Error-Based SQLi in Firmware Updates\", \"Lab Description\": \"An industrial IoT controller vulnerable to verbose error-based injection in firmware version parameters. The MySQL backend leaks schema information through unhandled constraint violations. To solve: Extract device credentials through nested error-induced data exfiltration and second-order injection via configuration backups.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: education portal boolean-based sqli in gradebook having clause", "target": "{\"Lab scenario\": \"Education Portal Boolean-Based SQLi in Gradebook HAVING Clause\", \"Lab Description\": \"A university grading system vulnerable to boolean-based injection in assignment grouping parameters. The MySQL backend provides no direct error feedback but returns different CSV formats for true/false conditions. To solve: Extract student SSNs through differential response analysis and bit-shifting brute-force techniques while evading request throttling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Logistics System Time-Based SQLi in Shipment Tracking", "target": "{\"Lab scenario\": \"Logistics System Time-Based SQLi in Shipment Tracking\", \"Lab Description\": \"A package tracking system vulnerable to stacked time-based injection in tracking number parameters. The SQLite backend allows delayed query execution through randomblob() function. To solve: Exfiltrate shipment manifests through response timing analysis and filesystem operations via LOAD_EXTENSION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare iot device blind sqli in sensor calibration", "target": "{\"Lab scenario\": \"Healthcare IoT Device Blind SQLi in Sensor Calibration\", \"Lab Description\": \"A medical device calibration interface vulnerable to boolean-based blind injection in firmware version parameters. The SQLite backend provides no error feedback but returns different calibration status codes. To solve: Extract device admin credentials through bitwise brute-force and statistical response analysis while bypassing HMAC validation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: e-commerce cms second-order sqli in product imports", "target": "{\"Lab scenario\": \"E-Commerce CMS Second-Order SQLi in Product Imports\", \"Lab Description\": \"A product management system vulnerable to second-order injection through CSV import functionality. The MySQL backend executes stored procedures using unsanitized import metadata. To solve: Poison product descriptions with stacked query payloads and trigger inventory sync to execute OS commands via sys_exec() UDF.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Mobile App Union-Based SQLi in Transaction Sorting", "target": "{\"Lab scenario\": \"Banking Mobile App Union-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A mobile banking application vulnerable to UNION-based injection in the transaction history sorting parameter. The MySQL backend returns verbose errors through debug build flags. To solve: Extract account PIN hashes using multi-phase type coercion and JSON array bypass techniques while evading mobile API signature checks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: healthcare iot device blind sqli in patient monitoring", "target": "{\"Lab scenario\": \"Healthcare IoT Device Blind SQLi in Patient Monitoring\", \"Lab Description\": \"A medical IoT hub vulnerable to time-based blind injection in patient vital aggregation. The SQLite backend allows stacked queries through firmware debugging interfaces. To solve: Exfiltrate PHI data through differential power analysis of query execution times and EMF side-channel leakage.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Transaction history endpoint concatenates the user‑supplied `sort` parameter directly into the SQL `ORDER BY` clause without any sanitization. Due to verbose debug logging and error leakage, failed injections reveal column counts and types. The application fails open, returning query results even when extra columns are included. To solve: retrieve the database version string by injecting a UNION SELECT payload into the `sort` parameter.", "target": "{\"Lab scenario\": \"Banking portal UNION-based SQL injection in transaction history ORDER BY clause\", \"Lab Description\": \"Transaction history endpoint concatenates the user‑supplied `sort` parameter directly into the SQL `ORDER BY` clause without any sanitization. Due to verbose debug logging and error leakage, failed injections reveal column counts and types. The application fails open, returning query results even when extra columns are included. To solve: retrieve the database version string by injecting a UNION SELECT payload into the `sort` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS UNION-based SQL injection in article analytics GROUP BY clause", "target": "{\"Lab scenario\": \"CMS UNION-based SQL injection in article analytics GROUP BY clause\", \"Lab Description\": \"Article analytics endpoint groups pageviews by an unsanitized `group` parameter in the `GROUP BY` clause. Error leakage reveals grouping errors and allowed column names. The application logs full stack traces. To solve: extract administrator email from `users` table via UNION SELECT in the `group` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: api gateway union-based sql injection in graphql resolver", "target": "{\"Lab scenario\": \"API gateway UNION-based SQL injection in GraphQL resolver\", \"Lab Description\": \"A GraphQL `posts(filter)` resolver directly interpolates the `filter` argument into a PostgreSQL query without sanitization. Failed injections leak timing and errors. To solve: enumerate database tables by injecting a UNION SELECT in the `filter` argument.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot dashboard union-based sql injection in device status rest endpoint", "target": "{\"Lab scenario\": \"IoT dashboard UNION-based SQL injection in device status REST endpoint\", \"Lab Description\": \"The `/devices/:id/status` REST endpoint interpolates the `id` path parameter into a MySQL query without sanitization. Error messages reveal file paths. To solve: extract device secret key from `iot_keys` table via UNION SELECT in the `id` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: enterprise soap api union-based sql injection in getuserdetails", "target": "{\"Lab scenario\": \"Enterprise SOAP API UNION-based SQL injection in getUserDetails\", \"Lab Description\": \"A SOAP API `/soap` endpoint parses XML input and directly concatenates the `<userId>` element into an SQL query without sanitization. Verbose XML parser errors leak SQL. To solve: retrieve the list of roles from `user_roles` via a UNION SELECT injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social media platform UNION-based SQL injection in comment search", "target": "{\"Lab scenario\": \"Social media platform UNION-based SQL injection in comment search\", \"Lab Description\": \"The comment search feature accepts a `q` parameter which is directly used in a DELETE statement for moderation logs. Error-based feedback leaks query syntax. To solve: exfiltrate OAuth tokens from `oauth_tokens` via UNION SELECT injection in the `q` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Cloud storage API UNION-based SQL injection in JSONB metadata", "target": "{\"Lab scenario\": \"Cloud storage API UNION-based SQL injection in JSONB metadata\", \"Lab Description\": \"File metadata endpoint accepts a JSON payload and uses `jsonb_extract_path_text()` directly in an SQL query without sanitization. Error leakage reveals JSON path errors. To solve: extract AWS credentials from `aws_creds` via UNION SELECT injection in the JSON path.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: government portal union-based sql injection in document search order by", "target": "{\"Lab scenario\": \"Government portal UNION-based SQL injection in document search ORDER BY\", \"Lab Description\": \"Classified document search uses the `sort` parameter unsafely in an Oracle `ORDER BY` clause. Verbose errors leak OOB function calls. To solve: exfiltrate `blueprints` table filenames via UNION SELECT injection in the `sort` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E‑commerce REST API UNION-based SQL injection in product search", "target": "{\"Lab scenario\": \"E‑commerce REST API UNION-based SQL injection in product search\", \"Lab Description\": \"Product search endpoint uses the `name` query parameter directly in an SQLite query. Error messages leak schema. To solve: enumerate table names via UNION SELECT injection in the `name` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking portal OOB UNION-based SQL injection in audit logs", "target": "{\"Lab scenario\": \"Banking portal OOB UNION-based SQL injection in audit logs\", \"Lab Description\": \"Audit log retrieval endpoint uses the `id` parameter in a MySQL query unsafely. OOB DNS exfiltration is possible via `LOAD_FILE` and a DNS-triggered webhook. To solve: exfiltrate administrator password hash using out-of-band injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Login endpoint uses unsanitized `username` and `password` in an SQLite query. No error messages are shown, but login success/failure differs. To solve: infer the administrator's password length and characters via Boolean-based blind SQL injections.", "target": "{\"Lab scenario\": \"User login Boolean-based blind SQL injection in banking portal\", \"Lab Description\": \"Login endpoint uses unsanitized `username` and `password` in an SQLite query. No error messages are shown, but login success/failure differs. To solve: infer the administrator's password length and characters via Boolean-based blind SQL injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium SQL injection lab for: iot dashboard boolean-based blind sql injection in having clause", "target": "{\"Lab scenario\": \"IoT dashboard Boolean-based blind SQL injection in HAVING clause\", \"Lab Description\": \"Device analytics endpoint uses a `HAVING` clause with unsanitized input. Responses return HTTP 200 if rows exist and 404 otherwise, without errors. To solve: extract API keys via Boolean-based blind injections in the `having` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Audit middleware logs the `X-Forwarded-For` header directly into an INSERT without sanitization. It suppresses errors but uses UUID generation time as a proxy: longer insertion times indicate true conditions. To solve: extract admin password hash using Boolean blind injections and timing side channels.", "target": "{\"Lab scenario\": \"CMS header-based Boolean blind SQL injection in audit logs\", \"Lab Description\": \"Audit middleware logs the `X-Forwarded-For` header directly into an INSERT without sanitization. It suppresses errors but uses UUID generation time as a proxy: longer insertion times indicate true conditions. To solve: extract admin password hash using Boolean blind injections and timing side channels.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social media Boolean-based blind SQL injection in DM search", "target": "{\"Lab scenario\": \"Social media Boolean-based blind SQL injection in DM search\", \"Lab Description\": \"Direct message search uses unsanitized input in a SQL Server `CONTAINS` predicate. No errors are shown, but the number of emoji reactions in responses indicate true/false. To solve: extract OAuth token characters via Boolean blind injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API gateway Boolean-based blind SQL injection in JSON filters", "target": "{\"Lab scenario\": \"API gateway Boolean-based blind SQL injection in JSON filters\", \"Lab Description\": \"Inventory search endpoint takes a JSON array of filter strings, concatenates them into a MySQL `WHERE` clause, and leaks full error messages. No direct errors are shown, but differing HTTP status codes indicate true/false. To solve: extract AWS secret key characters via Boolean blind injections in JSON filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Course enrollment endpoint takes `student_id` unsafely in an SQLite query. The application returns identical pages, but time delays (via `randomblob`) reveal true conditions. To solve: extract exam answer characters via time-based inference.", "target": "{\"Lab scenario\": \"Educational platform time-based SQL injection in enrollment\", \"Lab Description\": \"Course enrollment endpoint takes `student_id` unsafely in an SQLite query. The application returns identical pages, but time delays (via `randomblob`) reveal true conditions. To solve: extract exam answer characters via time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: healthcare portal time-based sql injection in get-medications", "target": "{\"Lab scenario\": \"Healthcare portal time-based SQL injection in get-medications\", \"Lab Description\": \"Patient portal uses an Oracle query to retrieve medications by `patientId` without sanitization. Responses return HTTP 200 or 404 based on row count; time delays (via `DBMS_PIPE.RECEIVE_MESSAGE`) reveal true conditions. To solve: extract allergy info characters via time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: banking portal time-based sql injection in account balance query", "target": "{\"Lab scenario\": \"Banking portal time-based SQL injection in account balance query\", \"Lab Description\": \"Balance check endpoint takes `id` unsafely into an SQLite query. Identical responses are returned except for time delay when `SLEEP` is invoked. To solve: infer account balance digits via time-based injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: oauth callback time-based sql injection in banking app", "target": "{\"Lab scenario\": \"OAuth callback time-based SQL injection in banking app\", \"Lab Description\": \"OAuth callback endpoint uses `state` directly in an SQLite query. Identical redirects occur, but time delays (via `randomblob`) reveal true conditions. To solve: extract user PIN digits via time-based inference on the `state` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Portal UNION-Based SQLi in Transaction Sorting", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A financial application constructs ORDER BY clauses using unsanitized user input in transaction history queries. The PostgreSQL backend leaks column types through verbose error messages containing full query syntax. To solve: Extract SHA-256 hashed account PINs from the vault table while bypassing JSON output encoding using explicit type casting and NULL padding in UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: iot device manager boolean-based sqli in sensor filter", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based SQLi in Sensor Filter\", \"Lab Description\": \"An industrial control system processes unsanitized group IDs in HAVING clauses of SQLite queries. The REST API returns HTTP 200/404 status codes through misconfigured row existence checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Modbus-TCP sensor network dashboard uses unsanitized HAVING clauses in SQLite queries. The REST API returns HTTP 200/404 through row existence checks. To solve: Extract encryption keys via BITAND() comparisons of SUBSTR(hex(key),1,1) values with Python automation.", "target": "{\"Lab scenario\": \"Industrial IoT Boolean-Based SQLi in Sensor Filter\", \"Lab Description\": \"A Modbus-TCP sensor network dashboard uses unsanitized HAVING clauses in SQLite queries. The REST API returns HTTP 200/404 through row existence checks. To solve: Extract encryption keys via BITAND() comparisons of SUBSTR(hex(key),1,1) values with Python automation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An OAuth 2.0 handler incorporates state parameters directly into SQLite queries. The Go backend leaks query execution time through improper transaction timing. To solve: Exfiltrate transaction PINs using CASE WHEN delays and statistical response analysis.", "target": "{\"Lab scenario\": \"Banking App Time-Based SQLi in OAuth Flow\", \"Lab Description\": \"An OAuth 2.0 handler incorporates state parameters directly into SQLite queries. The Go backend leaks query execution time through improper transaction timing. To solve: Exfiltrate transaction PINs using CASE WHEN delays and statistical response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A DICOM report viewer concatenates user input into PostgreSQL ORDER BY clauses. The application leaks sensitive metadata through verbose COPY errors. To solve: Extract encrypted diagnoses using NULL-padded UNION payloads and hex encoding with CHR(9) bypass.", "target": "{\"Lab scenario\": \"Healthcare Portal UNION SQLi in Radiology Export\", \"Lab Description\": \"A DICOM report viewer concatenates user input into PostgreSQL ORDER BY clauses. The application leaks sensitive metadata through verbose COPY errors. To solve: Extract encrypted diagnoses using NULL-padded UNION payloads and hex encoding with CHR(9) bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: User profile endpoint incorporates JWT 'sub' directly into SQL Server OPENJSON queries. The application leaks SSNs through XML conversion errors. To solve: Extract encrypted SSNs using JSON_VALUE() type mismatches and 'none' algorithm bypass.", "target": "{\"Lab scenario\": \"REST API Error-Based SQLi in JWT Claims\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' directly into SQL Server OPENJSON queries. The application leaks SSNs through XML conversion errors. To solve: Extract encrypted SSNs using JSON_VALUE() type mismatches and 'none' algorithm bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cms header-based blind sqli in audit logs", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi in Audit Logs\", \"Lab Description\": \"Audit logging system incorporates X-Forwarded-For headers into MySQL INSERTs. The PHP backend reveals query success through UUID patterns. To solve: Extract password hashes using BENCHMARK() timing attacks and rainbow table reversal.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A telecommunications REST API vulnerable to SQL injection in 'orderBy' arguments. The PostgreSQL backend requires type coercion for UNION attacks. To solve: Extract SMS content using json_agg() and hstore_to_json() conversions with CSP bypass.", "target": "{\"Lab scenario\": \"Telecom API Gateway UNION-Based SQLi in Call Log Sorting\", \"Lab Description\": \"A telecommunications REST API vulnerable to SQL injection in 'orderBy' arguments. The PostgreSQL backend requires type coercion for UNION attacks. To solve: Extract SMS content using json_agg() and hstore_to_json() conversions with CSP bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A university grading system processes unsanitized group IDs in HAVING clauses. The MySQL backend returns different CSV headers for true/false conditions. To solve: Extract student SSNs through bitwise brute-force and aiohttp parallel requests.", "target": "{\"Lab scenario\": \"Education Portal Boolean-Based SQLi in Gradebook\", \"Lab Description\": \"A university grading system processes unsanitized group IDs in HAVING clauses. The MySQL backend returns different CSV headers for true/false conditions. To solve: Extract student SSNs through bitwise brute-force and aiohttp parallel requests.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare iot device error-based sqli in firmware", "target": "{\"Lab scenario\": \"Healthcare IoT Device Error-Based SQLi in Firmware\", \"Lab Description\": \"A medical device calibration interface vulnerable to verbose error-based injection. The MySQL backend leaks schema through constraint violations. To solve: Extract credentials through nested error-induced exfiltration and HMAC bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where banking portal union-based sql injection in order by clause with waf bypass", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQL Injection in ORDER BY Clause with WAF Bypass\", \"Lab Description\": \"The vulnerable banking application uses dynamic SQL queries in transaction sorting functionality without input validation. The `GET /transactions` endpoint concatenates user-controlled `sort` parameter directly into an ORDER BY clause. The WAF filters common UNION and WAITFOR DELAY keywords. To solve: 1) Bypass WAF using JSON unicode escaping 2) Determine column count with null-byte termination 3) Extract IBAN numbers from hidden accounts table 4) Maintain stealth using time-delayed exfiltration.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: IoT Dashboard Boolean-Based Blind SQLi in HAVING Clause with JSON Input", "target": "{\"Lab scenario\": \"IoT Dashboard Boolean-Based Blind SQLi in HAVING Clause with JSON Input\", \"Lab Description\": \"A smart home management system vulnerable to blind SQL injection through JSON-encoded device filter parameters. The application constructs dynamic HAVING clauses from unvalidated user input. No direct error feedback but returns HTTP 204 when queries return empty. Target: Extract admin API keys from device_config table using boolean inference. Constraints: WAF blocks 'UNION' and 'SLEEP' keywords.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A document management system vulnerable to out-of-band SQL injection through SOAP-based PDF generation. The application concatenates user-controlled CSS selectors into XML-style queries. No direct output but supports stacked queries. Target: Extract SMTP credentials through DNS exfiltration. Constraints: 10ms time delay threshold for detection systems.", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi in PDF Export Function (SOAP API)\", \"Lab Description\": \"A document management system vulnerable to out-of-band SQL injection through SOAP-based PDF generation. The application concatenates user-controlled CSS selectors into XML-style queries. No direct output but supports stacked queries. Target: Extract SMTP credentials through DNS exfiltration. Constraints: 10ms time delay threshold for detection systems.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a hard SQL injection lab for: banking api union-based sqli in graphql query parameter with type validation", "target": "{\"Lab scenario\": \"Banking API UNION-Based SQLi in GraphQL Query Parameter with Type Validation\", \"Lab Description\": \"A financial service GraphQL endpoint vulnerable to type confusion SQL injection. The application uses weak type validation on transaction search parameters. Target: Extract SWIFT codes through nested UNION queries. Constraints: Strict Content-Type validation (application/graphql+json) and per-query complexity limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: healthcare portal error-based sqli in xml export function", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in XML Export Function\", \"Lab Description\": \"A patient record system vulnerable to error-based injection through malformed XML namespace declarations. The application uses XQuery with improper input sanitization. Target: Extract PHI data through verbose error messages. Constraints: Limited to 512-byte error messages and filtered quote characters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A product review moderation interface vulnerable to second-order injection through scheduled batch processing. Malicious payloads stored in review comments get executed during nightly aggregation. Target: Poison product rating calculations. Constraints: Input filtered through OWASP Java Encoder in web layer.", "target": "{\"Lab scenario\": \"E-Commerce Platform Second-Order SQLi in Product Review System\", \"Lab Description\": \"A product review moderation interface vulnerable to second-order injection through scheduled batch processing. Malicious payloads stored in review comments get executed during nightly aggregation. Target: Poison product rating calculations. Constraints: Input filtered through OWASP Java Encoder in web layer.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where government portal stacked query sqli in csv export function", "target": "{\"Lab scenario\": \"Government Portal Stacked Query SQLi in CSV Export Function\", \"Lab Description\": \"A public records system vulnerable to stacked queries through unparameterized CSV header processing. Attackers can execute multiple statements via malicious column names. Target: Modify voter registration records through UPDATE injection. Constraints: 30-second query timeout.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where social media platform boolean-based blind sqli in websocket handshake", "target": "{\"Lab scenario\": \"Social Media Platform Boolean-Based Blind SQLi in WebSocket Handshake\", \"Lab Description\": \"A chat application vulnerable to blind injection through WebSocket protocol headers. The application validates JWT tokens via unsafe SQL queries. Target: Extract OAuth client secrets through bitwise response analysis. Constraints: 512-byte WebSocket frame limit.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a medium SQL injection lab for: university system time-based sqli in exam scheduling", "target": "{\"Lab scenario\": \"University System Time-Based SQLi in Exam Scheduling\", \"Lab Description\": \"A course management portal vulnerable to blind time-based injection through iCal export parameters. The application uses PostgreSQL's pg_sleep() for rate limiting. Target: Extract exam answers through conditional delays. Constraints: Maximum 3 parallel database connections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: retail pos system union-based sqli in barcode lookup", "target": "{\"Lab scenario\": \"Retail POS System UNION-Based SQLi in Barcode Lookup\", \"Lab Description\": \"A point-of-sale terminal vulnerable to UNION injection through padded barcode values. The application truncates input after 12 digits but allows hex encoding. Target: Export daily transaction totals. Constraints: MariaDB strict_mode enabled.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Airline Booking System Out-of-Band SQLi in Seat Selection", "target": "{\"Lab scenario\": \"Airline Booking System Out-of-Band SQLi in Seat Selection\", \"Lab Description\": \"A flight reservation interface vulnerable to DNS exfiltration through XML seat map processing. The application uses SQL Server's OPENROWSET for third-party integrations. Target: Steal passenger passport numbers. Constraints: Outbound ICMP blocking.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where cryptocurrency exchange error-based sqli in tradingview webhook", "target": "{\"Lab scenario\": \"Cryptocurrency Exchange Error-Based SQLi in TradingView Webhook\", \"Lab Description\": \"A digital asset platform vulnerable to verbose error injection through TradingView alert webhooks. The application uses MongoDB $where clauses with SQL emulation. Target: Extract cold wallet addresses through intentional type errors. Constraints: Disabled xp_cmdshell.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where medical device http header sqli in firmware update", "target": "{\"Lab scenario\": \"Medical Device HTTP Header SQLi in Firmware Update\", \"Lab Description\": \"An IoT insulin pump vulnerable to header injection through malformed X-Device-ID values. The application uses unsanitized headers in diagnostic queries. Target: Modify dosage thresholds through UPDATE statements. Constraints: 8KB maximum header size.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Video Platform JWT Claim SQLi in Recommendation Engine", "target": "{\"Lab scenario\": \"Video Platform JWT Claim SQLi in Recommendation Engine\", \"Lab Description\": \"A streaming service vulnerable to JWT claim injection in personalized content queries. The application decodes JWT without validation and uses claims in SQL. Target: Manipulate recommendation algorithms. Constraints: HMAC signature verification enabled.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: A logistics platform vulnerable to injection via malformed CSV metadata headers during bulk uploads. The application uses user-provided column names in dynamic ORDER BY clauses. Target: Exfiltrate shipment manifests to attacker-controlled FTP. Constraints: Input sanitized with regex [A-Za-z0-9_].", "target": "{\"Lab scenario\": \"Supply Chain Management UNION-Based SQLi in CSV Import Validation\", \"Lab Description\": \"A logistics platform vulnerable to injection via malformed CSV metadata headers during bulk uploads. The application uses user-provided column names in dynamic ORDER BY clauses. Target: Exfiltrate shipment manifests to attacker-controlled FTP. Constraints: Input sanitized with regex [A-Za-z0-9_].\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: quantum computing lab blind sqli in qubit calibration api", "target": "{\"Lab scenario\": \"Quantum Computing Lab Blind SQLi in Qubit Calibration API\", \"Lab Description\": \"A quantum research interface vulnerable to time-based injection through qubit measurement parameters. The application uses PostgreSQL geometric functions for calibration. Target: Steal experimental data through conditional Grover's algorithm delays. Constraints: 5ms quantum processor jitter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: 5G Core Network Out-of-Band SQLi in UE Configuration", "target": "{\"Lab scenario\": \"5G Core Network Out-of-Band SQLi in UE Configuration\", \"Lab Description\": \"A mobile core AMF vulnerable to DNS exfiltration through invalid SUPI format handling. The application uses SQL to validate subscriber equipment. Target: Extract IMSI/K values through GTP-C echo requests. Constraints: 128-byte DNS TXT record limit.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: blockchain oracle time-based sqli in price feed consensus", "target": "{\"Lab scenario\": \"Blockchain Oracle Time-Based SQLi in Price Feed Consensus\", \"Lab Description\": \"A DeFi price oracle vulnerable to blind injection through TCR consensus parameters. The application uses SQL to calculate median prices across nodes. Target: Manipulate ETH/USD pricing through conditional response delays. Constraints: Byzantine fault tolerance checks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Military Drone Controller SQLi in Geofence Validation", "target": "{\"Lab scenario\": \"Military Drone Controller SQLi in Geofence Validation\", \"Lab Description\": \"A UAV navigation system vulnerable to injection through MGRS coordinate parameters. The application uses spatial SQL queries for no-fly zone checks. Target: Disable geofencing through WHERE clause poisoning. Constraints: Embedded SQLite with write-ahead logging.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: ai voice assistant boolean-based sqli in wake word processing", "target": "{\"Lab scenario\": \"AI Voice Assistant Boolean-Based SQLi in Wake Word Processing\", \"Lab Description\": \"A smart speaker system vulnerable to injection through manipulated phoneme analysis results. The application converts speech to text using vulnerable regex patterns. Target: Extract voice profile hashes through differential response timing. Constraints: Limited to 16-bit audio sampling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A DeFi protocol vulnerable to nested queries through Ethereum event log parsing. The application stores approval events in SQL using Web3.js callbacks. Target: Drain liquidity pools through recursive balance updates. Constraints: Gas limit restrictions.", "target": "{\"Lab scenario\": \"Smart Contract Reentrancy SQLi in ERC-20 Approval Event\", \"Lab Description\": \"A DeFi protocol vulnerable to nested queries through Ethereum event log parsing. The application stores approval events in SQL using Web3.js callbacks. Target: Drain liquidity pools through recursive balance updates. Constraints: Gas limit restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where mars rover blind sqli in telemetry compression", "target": "{\"Lab scenario\": \"Mars Rover Blind SQLi in Telemetry Compression\", \"Lab Description\": \"A planetary exploration system vulnerable to time-based injection through lossy data compression parameters. The application uses SQLite for storing sensor readings. Target: Exfiltrate mineral analysis results through conditional CRC errors. Constraints: 22-minute light delay.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Holographic Display UNION-Based SQLi in 3D Vertex Processing", "target": "{\"Lab scenario\": \"Holographic Display UNION-Based SQLi in 3D Vertex Processing\", \"Lab Description\": \"A volumetric display system vulnerable to injection through manipulated mesh coordinates. The application uses PostgreSQL geometric types for hologram rendering. Target: Project database contents through RGB vertex encoding. Constraints: 30fps rendering pipeline.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A neural implant system vulnerable to injection through manipulated alpha wave patterns. The application uses SQL to map brain signals to commands. Target: Extract research participant PII through induced visual cortex stimulation. Constraints: 256Hz sampling rate limit.", "target": "{\"Lab scenario\": \"Brain-Computer Interface Time-Based SQLi in EEG Pattern Matching\", \"Lab Description\": \"A neural implant system vulnerable to injection through manipulated alpha wave patterns. The application uses SQL to map brain signals to commands. Target: Extract research participant PII through induced visual cortex stimulation. Constraints: 256Hz sampling rate limit.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal Error-Based SQLi in XML Export", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in XML Export\", \"Lab Description\": \"Exploit XQuery injection through malformed XML namespaces to extract PHI data via verbose errors\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Manipulate ETH/USD pricing via conditional delays in DeFi median calculations", "target": "{\"Lab scenario\": \"Blockchain Oracle Time-Based SQLi\", \"Lab Description\": \"Manipulate ETH/USD pricing via conditional delays in DeFi median calculations\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Military Drone Geofence SQLi", "target": "{\"Lab scenario\": \"Military Drone Geofence SQLi\", \"Lab Description\": \"Bypass UAV no-fly zones through MGRS coordinate injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: AI Voice Assistant Boolean SQLi", "target": "{\"Lab scenario\": \"AI Voice Assistant Boolean SQLi\", \"Lab Description\": \"Exfiltrate voice profiles through phoneme pattern analysis\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Skim royalties through metadata injection in tokenURI", "target": "{\"Lab scenario\": \"NFT Royalty ERC-721 SQLi\", \"Lab Description\": \"Skim royalties through metadata injection in tokenURI\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a expert SQL injection lab for: smart grid modbus sqli", "target": "{\"Lab scenario\": \"Smart Grid MODBUS SQLi\", \"Lab Description\": \"Bypass PLC safety via register writes in power management\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where metaverse avatar sqli", "target": "{\"Lab scenario\": \"Metaverse Avatar SQLi\", \"Lab Description\": \"Steal crypto wallets via UV coordinate manipulation\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: covid variant alignment sqli", "target": "{\"Lab scenario\": \"COVID Variant Alignment SQLi\", \"Lab Description\": \"Exfiltrate patient zero data via FASTA header injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Autonomous Vehicle OBD-II SQLi", "target": "{\"Lab scenario\": \"Autonomous Vehicle OBD-II SQLi\", \"Lab Description\": \"Exfiltrate location history via CAN bus injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Vertical Farming SQLi", "target": "{\"Lab scenario\": \"Vertical Farming SQLi\", \"Lab Description\": \"Steal nutrient formulas via PH sensor injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where smart city traffic sqli", "target": "{\"Lab scenario\": \"Smart City Traffic SQLi\", \"Lab Description\": \"Exploit license plate OCR via ANPR camera bypass\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: drone delivery weight sqli", "target": "{\"Lab scenario\": \"Drone Delivery Weight SQLi\", \"Lab Description\": \"Manipulate logistics via floating-point injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-learning jwt sqli", "target": "{\"Lab scenario\": \"E-Learning JWT SQLi\", \"Lab Description\": \"Bypass enrollment checks via JWT claim injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where food delivery geolocation sqli", "target": "{\"Lab scenario\": \"Food Delivery Geolocation SQLi\", \"Lab Description\": \"Exfiltrate driver credentials via GPS spoofing\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where smart mirror xss/sqli hybrid", "target": "{\"Lab scenario\": \"Smart Mirror XSS/SQLi Hybrid\", \"Lab Description\": \"Chain voice command injection with DOM XSS\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Induce structural failure via nanotube tension injection", "target": "{\"Lab scenario\": \"Space Elevator SQLi\", \"Lab Description\": \"Induce structural failure via nanotube tension injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where brain-computer sqli", "target": "{\"Lab scenario\": \"Brain-Computer SQLi\", \"Lab Description\": \"Extract neural data via EEG pattern injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Quantum SQLi", "target": "{\"Lab scenario\": \"Quantum SQLi\", \"Lab Description\": \"Exfiltrate data via Grover's algorithm delays\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: 5G Core SQLi", "target": "{\"Lab scenario\": \"5G Core SQLi\", \"Lab Description\": \"Exfiltrate IMSI via invalid SUPI formatting\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: AI Art Generator SQLi", "target": "{\"Lab scenario\": \"AI Art Generator SQLi\", \"Lab Description\": \"Poison diffusion models via prompt injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce UNION-Based SQLi in Product Sorting", "target": "{\"Lab scenario\": \"E-Commerce UNION-Based SQLi in Product Sorting\", \"Lab Description\": \"Online store vulnerable through unvalidated 'sort' parameter in product listings\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Account balance check vulnerable to boolean inference attacks", "target": "{\"Lab scenario\": \"Banking Boolean-Based Blind SQLi in Balance Check\", \"Lab Description\": \"Account balance check vulnerable to boolean inference attacks\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Time-Based SQLi in Patient Lookup", "target": "{\"Lab scenario\": \"Healthcare Time-Based SQLi in Patient Lookup\", \"Lab Description\": \"Patient search vulnerable to time delays in PostgreSQL\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Device management portal leaks DB errors through invalid HAVING clauses", "target": "{\"Lab scenario\": \"IoT Dashboard Error-Based SQLi in Device Filtering\", \"Lab Description\": \"Device management portal leaks DB errors through invalid HAVING clauses\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a expert SQL injection lab for: social media out-of-band sqli in profile export", "target": "{\"Lab scenario\": \"Social Media Out-of-Band SQLi in Profile Export\", \"Lab Description\": \"Profile export feature vulnerable to DNS exfiltration\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where university portal second-order sqli in course registration", "target": "{\"Lab scenario\": \"University Portal Second-Order SQLi in Course Registration\", \"Lab Description\": \"Course registration system processes malicious data from previous sessions\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: government website stacked queries in document search", "target": "{\"Lab scenario\": \"Government Website Stacked Queries in Document Search\", \"Lab Description\": \"Public document search allows stacked queries through unparameterized input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a medium SQL injection lab for: ride-sharing app json-based sqli in location tracking", "target": "{\"Lab scenario\": \"Ride-Sharing App JSON-Based SQLi in Location Tracking\", \"Lab Description\": \"Location tracking API vulnerable through JSON-encoded coordinates\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Withdrawal validation vulnerable to boolean-based blind injection", "target": "{\"Lab scenario\": \"Cryptocurrency Exchange Blind SQLi in Withdrawal API\", \"Lab Description\": \"Withdrawal validation vulnerable to boolean-based blind injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where smart home union-based sqli in device naming", "target": "{\"Lab scenario\": \"Smart Home UNION-Based SQLi in Device Naming\", \"Lab Description\": \"Device naming feature vulnerable to UNION injection through nickname field\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Travel Booking Error-Based SQLi in Flight Search", "target": "{\"Lab scenario\": \"Travel Booking Error-Based SQLi in Flight Search\", \"Lab Description\": \"Flight search function leaks DB errors through invalid input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Order tracking system vulnerable to time delays in MySQL", "target": "{\"Lab scenario\": \"Food Delivery App Time-Based SQLi in Order Tracking\", \"Lab Description\": \"Order tracking system vulnerable to time delays in MySQL\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where fitness tracker stacked queries in workout logging", "target": "{\"Lab scenario\": \"Fitness Tracker Stacked Queries in Workout Logging\", \"Lab Description\": \"Workout logging feature allows multiple query execution\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a hard SQL injection lab for: real estate platform boolean-based sqli in price filter", "target": "{\"Lab scenario\": \"Real Estate Platform Boolean-Based SQLi in Price Filter\", \"Lab Description\": \"Price range filter vulnerable to boolean response analysis\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: video streaming service union-based sqli in search", "target": "{\"Lab scenario\": \"Video Streaming Service UNION-Based SQLi in Search\", \"Lab Description\": \"Video search vulnerable through unvalidated search parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Education Portal Error-Based SQLi in Course Enrollment", "target": "{\"Lab scenario\": \"Education Portal Error-Based SQLi in Course Enrollment\", \"Lab Description\": \"Course enrollment system leaks DB errors through invalid input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where gaming platform time-based sqli in leaderboards", "target": "{\"Lab scenario\": \"Gaming Platform Time-Based SQLi in Leaderboards\", \"Lab Description\": \"Leaderboard ranking system vulnerable to time delays\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Resume parsing feature triggers external DNS lookups", "target": "{\"Lab scenario\": \"Job Portal Out-of-Band SQLi in Resume Upload\", \"Lab Description\": \"Resume parsing feature triggers external DNS lookups\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Playlist management allows stacked queries through unparameterized input", "target": "{\"Lab scenario\": \"Music Streaming Service Stacked Queries in Playlist Creation\", \"Lab Description\": \"Playlist management allows stacked queries through unparameterized input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Sports Betting Platform Boolean-Based SQLi in Odds Calculation", "target": "{\"Lab scenario\": \"Sports Betting Platform Boolean-Based SQLi in Odds Calculation\", \"Lab Description\": \"Odds calculation API vulnerable to boolean inference\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: weather app union-based sqli in location search", "target": "{\"Lab scenario\": \"Weather App UNION-Based SQLi in Location Search\", \"Lab Description\": \"Location search vulnerable through unvalidated city parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: healthcare portal union sqli in patient search", "target": "{\"Lab scenario\": \"Healthcare Portal UNION SQLi in Patient Search\", \"Lab Description\": \"Patient lookup vulnerable through unvalidated search parameter with direct UNION exploitation\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Sensor data API vulnerable to blind injection through unparameterized timestamps", "target": "{\"Lab scenario\": \"IoT Device Time-Based SQLi in Sensor Readings\", \"Lab Description\": \"Sensor data API vulnerable to blind injection through unparameterized timestamps\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Fund transfer feature leaks database errors through malformed account numbers", "target": "{\"Lab scenario\": \"Banking App Error-Based SQLi in Transfer Validation\", \"Lab Description\": \"Fund transfer feature leaks database errors through malformed account numbers\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: e-learning platform boolean sqli in course enrollment", "target": "{\"Lab scenario\": \"E-Learning Platform Boolean SQLi in Course Enrollment\", \"Lab Description\": \"Course registration vulnerable to boolean response analysis through enrollment status checks\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where government portal out-of-band sqli in document export", "target": "{\"Lab scenario\": \"Government Portal Out-of-Band SQLi in Document Export\", \"Lab Description\": \"PDF export feature triggers DNS lookups through malicious document properties\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Second-Order SQLi in Profile Comments", "target": "{\"Lab scenario\": \"Social Media Second-Order SQLi in Profile Comments\", \"Lab Description\": \"Profile comment system processes stored malicious payloads during batch jobs\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: retail pos stacked sqli in inventory check", "target": "{\"Lab scenario\": \"Retail POS Stacked SQLi in Inventory Check\", \"Lab Description\": \"Inventory lookup allows multiple query execution through barcode parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where travel booking union sqli in flight search", "target": "{\"Lab scenario\": \"Travel Booking UNION SQLi in Flight Search\", \"Lab Description\": \"Flight search vulnerable to UNION-based data exfiltration through airline parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a expert SQL injection lab for: cryptocurrency exchange blind sqli in withdrawals", "target": "{\"Lab scenario\": \"Cryptocurrency Exchange Blind SQLi in Withdrawals\", \"Lab Description\": \"Withdrawal validation vulnerable to time-based inference attacks\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where smart home boolean sqli in device naming", "target": "{\"Lab scenario\": \"Smart Home Boolean SQLi in Device Naming\", \"Lab Description\": \"Device renaming feature vulnerable to boolean-based inference through status codes\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The loan application portal constructs ORDER BY clauses using unsanitized user input. The PostgreSQL backend leaks column counts through verbose type mismatch errors. To solve: Extract account numbers and credit scores using NULL-padded UNION payloads while bypassing WAF quote filtering with CHR() function.", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in Loan Application Sorting\", \"Lab Description\": \"The loan application portal constructs ORDER BY clauses using unsanitized user input. The PostgreSQL backend leaks column counts through verbose type mismatch errors. To solve: Extract account numbers and credit scores using NULL-padded UNION payloads while bypassing WAF quote filtering with CHR() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot fleet management boolean-based sqli in geo-fencing", "target": "{\"Lab scenario\": \"IoT Fleet Management Boolean-Based SQLi in Geo-Fencing\", \"Lab Description\": \"Vehicle tracking system uses unsanitized location parameters in HAVING clauses. The SQLite backend returns HTTP 204/404 status codes based on query validity. To solve: Extract AWS IoT certificates through bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using Python requests with 0.5s timing thresholds.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: healthcare api time-based sqli in patient lookup", "target": "{\"Lab scenario\": \"Healthcare API Time-Based SQLi in Patient Lookup\", \"Lab Description\": \"Patient search endpoint uses unsanitized input in WHERE clauses with identical error pages. The MySQL backend allows stacked queries through Promises. To solve: Exfiltrate diagnosis codes through DNS-based out-of-band channel using conditional SLEEP() delays and LOAD_FILE() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Shopping cart discount system leaks PostgreSQL geometry function errors through debug headers. The application uses unsanitized JSON input in ST_Contains() predicates. To solve: Extract PCI tokens through forced type conversion errors in polygon coordinate parameters.", "target": "{\"Lab scenario\": \"E-Commerce Platform Error-Based SQLi in Cart Discounts\", \"Lab Description\": \"Shopping cart discount system leaks PostgreSQL geometry function errors through debug headers. The application uses unsanitized JSON input in ST_Contains() predicates. To solve: Extract PCI tokens through forced type conversion errors in polygon coordinate parameters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where government portal union sqli in foia request sorting", "target": "{\"Lab scenario\": \"Government Portal UNION SQLi in FOIA Request Sorting\", \"Lab Description\": \"Freedom of Information Act request portal concatenates user input into ORDER BY clauses. The MSSQL backend allows type coercion through XML PATH queries. To solve: Exfiltrate classified document metadata using FOR XML EXPLICIT payloads and CDATA section bypasses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: cms boolean-based sqli in comment filtering", "target": "{\"Lab scenario\": \"CMS Boolean-Based SQLi in Comment Filtering\", \"Lab Description\": \"A content management system (CMS) implements comment filtering using dynamic SQL in the moderation panel. The backend uses SQLite with direct string interpolation. Input from the `filter` query string parameter is passed directly into the `WHERE` clause without proper sanitization. This allows attackers to infer database content using Boolean-based payloads. The application leaks the number of results and alters page rendering based on the number of rows returned. To solve: Use Boolean-based SQLi to extract admin credentials by measuring UI response behaviors triggered by conditional logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application fails to properly sanitize user inputs used in the ORDER BY clause, allowing SQL injection. The application constructs SQL queries dynamically without validation. To solve: exploit the injection to retrieve sensitive database information through ORDER BY-based manipulation.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in ORDER BY clause\", \"Lab Description\": \"The application fails to properly sanitize user inputs used in the ORDER BY clause, allowing SQL injection. The application constructs SQL queries dynamically without validation. To solve: exploit the injection to retrieve sensitive database information through ORDER BY-based manipulation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy SQL injection lab for: cms sql injection in login endpoint", "target": "{\"Lab scenario\": \"CMS SQL injection in Login endpoint\", \"Lab Description\": \"The application directly includes unvalidated user inputs into SQL queries at the login endpoint. This allows attackers to bypass authentication. To solve: exploit the injection to log in as admin without credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API gateway SQL injection in GROUP BY clause", "target": "{\"Lab scenario\": \"API gateway SQL injection in GROUP BY clause\", \"Lab Description\": \"The backend API dynamically builds SQL queries using user-controlled data in the GROUP BY clause. Lack of input validation enables attackers to interfere with grouping logic. To solve: exploit grouping to reveal data from unauthorized rows.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: IoT dashboard SQL injection in WHERE clause", "target": "{\"Lab scenario\": \"IoT dashboard SQL injection in WHERE clause\", \"Lab Description\": \"A search feature on the IoT dashboard uses user inputs directly in a WHERE clause without proper escaping. This introduces SQL injection. To solve: bypass filtering and enumerate connected devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: banking portal sql injection in having condition", "target": "{\"Lab scenario\": \"Banking portal SQL injection in HAVING condition\", \"Lab Description\": \"The banking portal allows advanced filtering of transactions using a HAVING clause. It fails to validate inputs used in aggregate functions. To solve: manipulate HAVING to leak high-value transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: cms sql injection in search query with order by", "target": "{\"Lab scenario\": \"CMS SQL injection in search query with ORDER BY\", \"Lab Description\": \"The CMS search feature uses unvalidated user input in an ORDER BY clause. It fails to whitelist columns, allowing attackers to control the ordering logic and perform SQL injection. To solve: enumerate columns and extract hidden post metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot dashboard sql injection in api post parameter", "target": "{\"Lab scenario\": \"IoT dashboard SQL injection in API POST parameter\", \"Lab Description\": \"The IoT backend API directly includes POST body parameters in SQL statements without sanitization. Malicious inputs can alter query logic. To solve: perform a time-based blind SQL injection to confirm the flaw and extract device config data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: banking portal sql injection in login audit trail", "target": "{\"Lab scenario\": \"Banking portal SQL injection in login audit trail\", \"Lab Description\": \"Login audit events are stored using direct SQL inserts based on user input. Attackers can modify query structure to leak historical login data. To solve: inject into logging function to read records from the audit table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: api gateway sql injection in filter parameter", "target": "{\"Lab scenario\": \"API gateway SQL injection in filter parameter\", \"Lab Description\": \"The API gateway allows filtering of user data using unvalidated query parameters. A crafted injection in the `filter` parameter allows full table extraction. To solve: exploit the filter field with UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cms sql injection in article comments section", "target": "{\"Lab scenario\": \"CMS SQL injection in article comments section\", \"Lab Description\": \"The comment section of articles directly injects user content into database insert queries. When users modify request parameters, SQL injection is possible. To solve: exploit blind SQLi to enumerate database schema.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API gateway logs user-agent headers directly into the SQL query without sanitization. Attackers can inject SQL through the User-Agent field. To solve: craft a malicious User-Agent to extract user data from the database.", "target": "{\"Lab scenario\": \"API gateway SQL injection in HTTP headers\", \"Lab Description\": \"The API gateway logs user-agent headers directly into the SQL query without sanitization. Attackers can inject SQL through the User-Agent field. To solve: craft a malicious User-Agent to extract user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot dashboard sql injection in device control parameter", "target": "{\"Lab scenario\": \"IoT dashboard SQL injection in device control parameter\", \"Lab Description\": \"The device control API accepts user input directly and uses it in an SQL query to change device status. Lack of input validation makes it vulnerable to SQL injection. To solve: inject SQL payloads to control device actions and extract sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking portal sql injection in transaction filter", "target": "{\"Lab scenario\": \"Banking portal SQL injection in transaction filter\", \"Lab Description\": \"The banking portal allows filtering of transactions via user input. The filter parameter is directly inserted into the SQL query, making it susceptible to SQL injection. To solve: exploit the injection to dump transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where api gateway sql injection in query string parameter", "target": "{\"Lab scenario\": \"API gateway SQL injection in query string parameter\", \"Lab Description\": \"The API gateway exposes an endpoint that allows users to query for product information based on category. The category filter is directly inserted into the SQL query, allowing an attacker to perform SQL injection. To solve: extract product details and bypass filter conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS SQL injection in comment filtering", "target": "{\"Lab scenario\": \"CMS SQL injection in comment filtering\", \"Lab Description\": \"The CMS filters out comments based on keywords before inserting them into the database. However, the filtering logic is flawed, allowing attackers to bypass restrictions using SQL injection. To solve: bypass filtering and inject malicious SQL payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API SQL injection in user profile update", "target": "{\"Lab scenario\": \"API SQL injection in user profile update\", \"Lab Description\": \"The user profile update endpoint allows modifying the user’s details, but the input parameters are directly injected into SQL queries. This results in an SQL injection vulnerability. To solve: extract the database schema and update user details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The CMS allows users to submit comments, but it improperly sanitizes comment input, allowing for SQL injection. To solve: inject SQL payloads that bypass filtering and access sensitive information from the database.", "target": "{\"Lab scenario\": \"CMS SQL injection in comment filtering\", \"Lab Description\": \"The CMS allows users to submit comments, but it improperly sanitizes comment input, allowing for SQL injection. To solve: inject SQL payloads that bypass filtering and access sensitive information from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: banking portal sql injection in transaction view", "target": "{\"Lab scenario\": \"Banking portal SQL injection in transaction view\", \"Lab Description\": \"The banking portal's transaction view feature takes a parameter to filter by account number. The input parameter is directly used in an SQL query. To solve: inject a UNION-based SQL payload to extract sensitive transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device control sql injection in configuration update", "target": "{\"Lab scenario\": \"IoT device control SQL injection in configuration update\", \"Lab Description\": \"The device configuration API directly takes input from users and uses it in an SQL query to update device configurations. Lack of sanitization allows for SQL injection. To solve: inject payloads that allow reading sensitive device configurations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API SQL injection in search endpoint", "target": "{\"Lab scenario\": \"API SQL injection in search endpoint\", \"Lab Description\": \"The API’s search feature allows users to search for products by category. However, the input is directly inserted into the SQL query, which makes it vulnerable to SQL injection. To solve: exploit the vulnerability to retrieve product data from different categories.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: banking portal sql injection in loan application", "target": "{\"Lab scenario\": \"Banking portal SQL injection in loan application\", \"Lab Description\": \"The loan application form accepts user input, including the loan amount, and inserts it directly into an SQL query without proper sanitization. To solve: inject SQL payloads to access and manipulate the loan data in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where cms sql injection in post creation", "target": "{\"Lab scenario\": \"CMS SQL injection in post creation\", \"Lab Description\": \"The CMS allows content creators to create posts, and the input is directly inserted into SQL queries. A lack of input sanitization makes the system vulnerable to SQL injection. To solve: inject payloads that manipulate posts in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API gateway SQL injection in authentication endpoint", "target": "{\"Lab scenario\": \"API gateway SQL injection in authentication endpoint\", \"Lab Description\": \"The authentication endpoint for user login is vulnerable to SQL injection due to improper sanitization of user input. To solve: bypass authentication and retrieve user session details from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking portal SQL injection in account balance lookup", "target": "{\"Lab scenario\": \"Banking portal SQL injection in account balance lookup\", \"Lab Description\": \"The banking portal allows users to view account balances based on account number. However, the account number is directly inserted into SQL queries without sanitization. To solve: inject payloads that retrieve sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cms sql injection in category listing", "target": "{\"Lab scenario\": \"CMS SQL injection in category listing\", \"Lab Description\": \"The CMS allows users to filter posts by category. The category input is directly inserted into the SQL query without proper sanitization. To solve: inject payloads that list all categories and extract post data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-commerce API SQL injection in ORDER BY clause", "target": "{\"Lab scenario\": \"E-commerce API SQL injection in ORDER BY clause\", \"Lab Description\": \"The product listing API endpoint is vulnerable to SQL injection in the 'sort' parameter which controls ORDER BY. The application directly concatenates user input into the query without sanitization. To solve: bypass WAF filters to extract admin credentials from the users table using a time-based technique.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: healthcare portal sql injection in having clause", "target": "{\"Lab scenario\": \"Healthcare portal SQL injection in HAVING clause\", \"Lab Description\": \"The patient search feature builds dynamic HAVING conditions vulnerable to injection. The application uses parameterized queries for WHERE but concatenates HAVING directly. To solve: exploit this uncommon injection point to dump the entire patient database including SSNs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot dashboard blind sqli in device status filter", "target": "{\"Lab scenario\": \"IoT dashboard blind SQLi in device status filter\", \"Lab Description\": \"The device management dashboard uses blind SQL injection in the status filter parameter. No direct results are shown but the page length changes when conditions are true. To solve: use boolean-based inference to extract the admin API key from the configuration table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: cms union injection with json response", "target": "{\"Lab scenario\": \"CMS UNION injection with JSON response\", \"Lab Description\": \"The article search feature in a headless CMS is vulnerable to UNION SQL injection returning JSON. The application uses numeric IDs but string concatenation. To solve: modify the Content-Type header to bypass WAF and extract all user emails.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking portal second-order SQLi in password reset", "target": "{\"Lab scenario\": \"Banking portal second-order SQLi in password reset\", \"Lab Description\": \"The password reset feature stores unsanitized input that gets used in subsequent SQL queries. The application appears secure during initial input but vulnerable when processing the token. To solve: exploit this second-order injection to bypass authentication.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: graphql sql injection via inline fragments", "target": "{\"Lab scenario\": \"GraphQL SQL injection via inline fragments\", \"Lab Description\": \"The GraphQL endpoint converts arguments directly to SQL without sanitization. The application uses a custom @sql directive that bypasses security controls. To solve: craft a GraphQL query with SQLi in the filter argument to extract schema information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where soap api sqli via xml entity injection", "target": "{\"Lab scenario\": \"SOAP API SQLi via XML entity injection\", \"Lab Description\": \"The legacy SOAP service processes XML requests by directly embedding values in SQL queries. The application fails to properly handle XML entities. To solve: combine XXE with SQL injection to extract data via out-of-band techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The analytics dashboard builds dynamic GROUP BY clauses from user input. The application properly parameterizes WHERE but not GROUP BY. To solve: exploit this to perform a UNION attack retrieving the admin session tokens.", "target": "{\"Lab scenario\": \"Admin panel SQLi in GROUP BY parameter\", \"Lab Description\": \"The analytics dashboard builds dynamic GROUP BY clauses from user input. The application properly parameterizes WHERE but not GROUP BY. To solve: exploit this to perform a UNION attack retrieving the admin session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Mobile API SQLi via JSON array exploitation", "target": "{\"Lab scenario\": \"Mobile API SQLi via JSON array exploitation\", \"Lab Description\": \"The mobile API accepts JSON arrays that get expanded directly into IN() clauses. The application fails to properly sanitize array values. To solve: break out of the IN clause to perform a stacked query attack updating all user passwords.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: multi-step sqli in e-commerce checkout", "target": "{\"Lab scenario\": \"Multi-step SQLi in e-commerce checkout\", \"Lab Description\": \"The checkout process has multiple SQL injections across different steps. The application uses temporary tables with unsanitized data. To solve: chain these injections to poison the session table and gain admin access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking portal boolean-based sql injection in order by clause", "target": "{\"Lab scenario\": \"Banking portal Boolean-based SQL injection in ORDER BY clause\", \"Lab Description\": \"The application contains a Boolean-based SQL injection vulnerability in the ORDER BY clause, allowing attackers to manipulate SQL queries. The user input is not properly sanitized, allowing crafted queries to bypass controls. To solve: perform a successful injection and extract sensitive information based on the exploitation path.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where time-based sql injection scenario", "target": "{\"Lab scenario\": \"Time-based SQL injection scenario\", \"Lab Description\": \"This lab explores a time-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab explores a error-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \"Error-based SQL injection scenario\", \"Lab Description\": \"This lab explores a error-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab explores a union-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \"Union-based SQL injection scenario\", \"Lab Description\": \"This lab explores a union-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: blind sql sql injection scenario", "target": "{\"Lab scenario\": \"Blind SQL SQL injection scenario\", \"Lab Description\": \"This lab explores a blind sql sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: out-of-band sql injection scenario", "target": "{\"Lab scenario\": \"Out-of-band SQL injection scenario\", \"Lab Description\": \"This lab explores a out-of-band sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab explores a login bypass sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \"Login Bypass SQL injection scenario\", \"Lab Description\": \"This lab explores a login bypass sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Update Injection SQL injection scenario", "target": "{\"Lab scenario\": \"Update Injection SQL injection scenario\", \"Lab Description\": \"This lab explores a update injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab explores a delete injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \" Delete Injection SQL injection scenario\", \"Lab Description\": \"This lab explores a delete injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where join injection sql injection scenario", "target": "{\"Lab scenario\": \"Join Injection SQL injection scenario\", \"Lab Description\": \"This lab explores a join injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The inventory management API uses the X-User-Id header directly in SQL queries without validation. The application logs all SQL queries for debugging. To solve: perform header injection to extract all API keys from the system_config table.", "target": "{\"Lab scenario\": \"REST API SQLi through HTTP Headers\", \"Lab Description\": \"The inventory management API uses the X-User-Id header directly in SQL queries without validation. The application logs all SQL queries for debugging. To solve: perform header injection to extract all API keys from the system_config table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The chat application's WebSocket message handler directly interpolates message metadata into SQL. The vulnerability triggers when editing messages. To solve: exploit this to pivot into the underlying Redis cache and extract session data.", "target": "{\"Lab scenario\": \"WebSocket SQLi in real-time chat\", \"Lab Description\": \"The chat application's WebSocket message handler directly interpolates message metadata into SQL. The vulnerability triggers when editing messages. To solve: exploit this to pivot into the underlying Redis cache and extract session data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where jwt claim sqli in analytics dashboard", "target": "{\"Lab scenario\": \"JWT claim SQLi in analytics dashboard\", \"Lab Description\": \"The dashboard extracts organization_id from JWT tokens and uses it unsanitized in SQL queries. The application uses PostgreSQL JSON functions. To solve: forge a JWT with malicious JSON path traversal to access all organizations' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: csv export sqli with formula injection", "target": "{\"Lab scenario\": \"CSV export SQLi with formula injection\", \"Lab Description\": \"The report generator creates CSV files using direct SQL query results. The application is vulnerable to both SQLi and CSV formula injection. To solve: craft a payload that both extracts database information and triggers RCE when the CSV is opened in Excel.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The GraphQL endpoint allows batch queries using aliases that get converted to SQL column names. The application fails to sanitize alias characters. To solve: use specially crafted aliases to perform stacked queries and disable security controls.", "target": "{\"Lab scenario\": \"SQLi in GraphQL aliases with query batching\", \"Lab Description\": \"The GraphQL endpoint allows batch queries using aliases that get converted to SQL column names. The application fails to sanitize alias characters. To solve: use specially crafted aliases to perform stacked queries and disable security controls.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: ldap filter sqli in employee directory", "target": "{\"Lab scenario\": \"LDAP Filter SQLi in Employee Directory\", \"Lab Description\": \"The corporate directory system improperly converts LDAP filters to SQL queries. Special characters from both systems (LDAP and SQL) cause improper query handling. To exploit this, craft an LDAP filter that breaks into the SQL context and extracts sensitive HR records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sqli in mongodb $where clause", "target": "{\"Lab scenario\": \"SQLi in MongoDB $where clause\", \"Lab Description\": \"The product catalog uses MongoDB but has a legacy SQL compatibility layer. The $where clause accepts JavaScript that gets translated to SQL. To solve: break out of the JS context to execute raw SQL against the underlying PostgreSQL database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where ssti to sqli in helpdesk templates", "target": "{\"Lab scenario\": \"SSTI to SQLi in helpdesk templates\", \"Lab Description\": \"The ticket system renders templates with user-provided data. The application first processes SQL then templates, allowing SSTI to break into SQL context. To solve: chain template injection with SQLi to access the tickets database as admin.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQLi in dynamic pivot queries", "target": "{\"Lab scenario\": \"SQLi in dynamic pivot queries\", \"Lab Description\": \"The reporting tool builds pivot tables from user-controlled column names. The application uses unsafe string interpolation for dynamic SQL. To solve: break out of the column name context to execute system commands via PostgreSQL COPY.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: nosql to sqli in hybrid database architecture", "target": "{\"Lab scenario\": \"NoSQL to SQLi in hybrid database architecture\", \"Lab Description\": \"The application uses MongoDB for frontend but PostgreSQL for reporting, with unsafe data passing between them. The $expr operator allows JavaScript execution. To solve: break out of MongoDB aggregation pipeline to execute raw SQL against the reporting database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: boolean-based sql injection in banking portal's login form", "target": "{\"Lab scenario\": \"Boolean-based SQL injection in Banking Portal's login form\", \"Lab Description\": \"The banking portal login form directly incorporates user input into a SQL query. The application returns different messages depending on whether the login is successful or not. This behavior leaks information about query evaluation. To solve: Use a Boolean-based SQLi to bypass authentication and access the admin panel.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The CMS search endpoint includes user input in a SQL query without sanitization. Errors are suppressed, but time-based inference is possible. To solve: Use time delays to extract the database name.", "target": "{\"Lab scenario\": \"Time-based blind SQL injection in CMS search endpoint\", \"Lab Description\": \"The CMS search endpoint includes user input in a SQL query without sanitization. Errors are suppressed, but time-based inference is possible. To solve: Use time delays to extract the database name.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection via order by in iot dashboard device logs", "target": "{\"Lab scenario\": \"SQL injection via ORDER BY in IoT Dashboard device logs\", \"Lab Description\": \"The IoT dashboard log viewer accepts column names via query params to dynamically ORDER BY input. The app fails to sanitize input. To solve: Use SQLi in ORDER BY clause to retrieve table structure.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The transfer history feature filters by date and concatenates user input without validation. The app returns full query output. To solve: Use UNION to extract current session token.", "target": "{\"Lab scenario\": \"UNION-based SQL injection in Banking Portal's transfer history\", \"Lab Description\": \"The transfer history feature filters by date and concatenates user input without validation. The app returns full query output. To solve: Use UNION to extract current session token.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A custom CMS logs the 'X-User-Role' HTTP header directly into a SQL query. The response doesn't change, but logs can be timed. To solve: Use blind inference to leak the admin password hash.", "target": "{\"Lab scenario\": \"Blind SQL injection via HTTP header in CMS\", \"Lab Description\": \"A custom CMS logs the 'X-User-Role' HTTP header directly into a SQL query. The response doesn't change, but logs can be timed. To solve: Use blind inference to leak the admin password hash.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where out-of-band sql injection in api gateway diagnostics endpoint", "target": "{\"Lab scenario\": \"Out-of-band SQL injection in API Gateway diagnostics endpoint\", \"Lab Description\": \"The diagnostics endpoint logs user agent strings and performs internal queries. It leaks no response but allows out-of-band DNS requests. To solve: Trigger a DNS lookup to your Burp Collaborator domain.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A CMS plugin allows clients to control ORDER BY for pagination. Injection into the ORDER clause is unsanitized. To solve: Use SQL injection to leak column names via error messages.", "target": "{\"Lab scenario\": \"SQL injection in ORDER BY clause in CMS pagination\", \"Lab Description\": \"A CMS plugin allows clients to control ORDER BY for pagination. Injection into the ORDER clause is unsanitized. To solve: Use SQL injection to leak column names via error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection via group by clause in financial analytics tool", "target": "{\"Lab scenario\": \"SQL injection via GROUP BY clause in financial analytics tool\", \"Lab Description\": \"A financial analytics report allows grouping by column passed via GET request. The GROUP BY clause is unsanitized. To solve: Inject into GROUP BY to display column values from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: login bypass using stacked queries in iot portal", "target": "{\"Lab scenario\": \"Login bypass using stacked queries in IoT portal\", \"Lab Description\": \"The login form allows stacked queries using semicolons. This permits command chaining and account hijacking. To solve: Log in using SQLi and change the password of admin user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in nested subquery within banking portal reports", "target": "{\"Lab scenario\": \"SQL injection in nested subquery within Banking Portal reports\", \"Lab Description\": \"A banking report form executes nested queries using user input. The subquery for filtering account types is injectable. To solve: Extract the credit card numbers using SQL injection into the nested query.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in GraphQL variables parser", "target": "{\"Lab scenario\": \"SQL injection in GraphQL variables parser\", \"Lab Description\": \"A GraphQL endpoint improperly handles variable type conversion, allowing SQL injection when variables are interpolated into raw SQL. The application uses a custom @sql directive. To solve: Exploit variable parsing to extract the GraphQL schema definition.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where nosql to sql injection in hybrid document-relational system", "target": "{\"Lab scenario\": \"NoSQL to SQL injection in hybrid document-relational system\", \"Lab Description\": \"An application stores JSON documents in PostgreSQL jsonb columns but converts queries to SQL unsafely. The $where clause allows JavaScript execution that reaches raw SQL. To solve: Break out of MongoDB-style syntax to execute arbitrary SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in JWT claim processing", "target": "{\"Lab scenario\": \"SQL injection in JWT claim processing\", \"Lab Description\": \"The application extracts organization_id from JWT tokens and uses it directly in SQL queries with JSON path operations. To solve: Forge a JWT with malicious JSON path traversal to access all organizations' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in mongodb aggregation pipeline", "target": "{\"Lab scenario\": \"SQL injection in MongoDB aggregation pipeline\", \"Lab Description\": \"An analytics dashboard converts MongoDB aggregation stages to SQL queries unsafely. The $match and $project stages are vulnerable. To solve: Break out of aggregation syntax to execute raw SQL against the underlying database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in CSV export via field terminators", "target": "{\"Lab scenario\": \"SQL injection in CSV export via field terminators\", \"Lab Description\": \"A reporting feature exports query results to CSV using unsafe field terminators. The application allows control over delimiter characters. To solve: Inject SQL through field terminators to execute commands when the CSV is processed.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A data warehouse application refreshes materialized views using unsafe dynamic SQL. The WITH DATA clause is injectable. To solve: Exploit refresh timing to perform blind data extraction.", "target": "{\"Lab scenario\": \"SQL injection in dynamic materialized view refresh\", \"Lab Description\": \"A data warehouse application refreshes materialized views using unsafe dynamic SQL. The WITH DATA clause is injectable. To solve: Exploit refresh timing to perform blind data extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A search engine uses PostgreSQL tsquery syntax directly from user input. The application fails to sanitize special operators. To solve: Break out of text search context to execute arbitrary queries.", "target": "{\"Lab scenario\": \"SQL injection in full-text search parser\", \"Lab Description\": \"A search engine uses PostgreSQL tsquery syntax directly from user input. The application fails to sanitize special operators. To solve: Break out of text search context to execute arbitrary queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in array literal generation", "target": "{\"Lab scenario\": \"SQL injection in array literal generation\", \"Lab Description\": \"A geospatial application builds PostGIS queries with unsafe array concatenation. The ARRAY[] constructor is vulnerable. To solve: Break out of array context to access PostGIS functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An analytics application allows custom window frame specifications. The ROWS/RANGE clause is vulnerable. To solve: Exploit frame boundary definitions to execute arbitrary SQL.", "target": "{\"Lab scenario\": \"SQL injection in window function frame clause\", \"Lab Description\": \"An analytics application allows custom window frame specifications. The ROWS/RANGE clause is vulnerable. To solve: Exploit frame boundary definitions to execute arbitrary SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in recursive cte anchor member", "target": "{\"Lab scenario\": \"SQL injection in recursive CTE anchor member\", \"Lab Description\": \"A hierarchical data explorer builds recursive CTEs with user input in the anchor member. The WITH RECURSIVE clause is vulnerable. To solve: Break recursion to execute stacked queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: error-based sql injection in e-commerce product page", "target": "{\"Lab scenario\": \"Error-based SQL injection in E-Commerce product page\", \"Lab Description\": \"The product details page builds SQL queries using product ID directly from the URL without sanitization. Errors are exposed in the response. To solve: Use error-based SQL injection to leak database version and table structure.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The feedback form includes a name field used in a SQL query without filtering. The application returns query results directly. To solve: Use UNION-based SQL injection to extract admin credentials and session tokens.", "target": "{\"Lab scenario\": \"Union-based SQL injection in Feedback form\", \"Lab Description\": \"The feedback form includes a name field used in a SQL query without filtering. The application returns query results directly. To solve: Use UNION-based SQL injection to extract admin credentials and session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app stores user profile data directly into the database and uses it later in SQL queries. The stored input is not sanitized. To solve: Inject SQL in a stored field and trigger it during subsequent profile operations.", "target": "{\"Lab scenario\": \"Second-order SQL injection in User Settings\", \"Lab Description\": \"The app stores user profile data directly into the database and uses it later in SQL queries. The stored input is not sanitized. To solve: Inject SQL in a stored field and trigger it during subsequent profile operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in DELETE endpoint of Project Manager", "target": "{\"Lab scenario\": \"SQL injection in DELETE endpoint of Project Manager\", \"Lab Description\": \"The project deletion feature takes a project ID directly from URL parameters and performs a deletion without validation. To solve: Use SQL injection to delete critical tables and disrupt application functionality.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The session token cookie is included in a query without sanitization. The response does not change but time delays can be observed. To solve: Use blind time-based injection to retrieve admin credentials character by character.", "target": "{\"Lab scenario\": \"Blind SQL injection via cookie in Employee Portal\", \"Lab Description\": \"The session token cookie is included in a query without sanitization. The response does not change but time delays can be observed. To solve: Use blind time-based injection to retrieve admin credentials character by character.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: sql injection in inventory filter dropdown", "target": "{\"Lab scenario\": \"SQL injection in Inventory filter dropdown\", \"Lab Description\": \"The inventory filter takes user input and builds the WHERE clause directly. No input validation is performed. To solve: Inject SQL to extract supplier pricing data and competitor information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in registration endpoint's email check", "target": "{\"Lab scenario\": \"SQL injection in Registration endpoint's email check\", \"Lab Description\": \"The registration system checks if the email exists using an unsanitized query. The response shows different errors based on query results. To solve: Use SQLi to create a privileged account and bypass authentication.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where boolean-based sql injection in newsletter subscription", "target": "{\"Lab scenario\": \"Boolean-based SQL injection in Newsletter subscription\", \"Lab Description\": \"The newsletter form processes email input in a SQL query. Application returns different messages based on whether the email exists. To solve: Use Boolean SQLi to enumerate all valid user emails.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection via search suggestion API", "target": "{\"Lab scenario\": \"SQL injection via search suggestion API\", \"Lab Description\": \"The suggestion feature uses search terms directly in SQL. Output is visible to users in real-time. To solve: Exploit the injection to dump all user credentials and session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in admin panel ip logger", "target": "{\"Lab scenario\": \"SQL injection in admin panel IP logger\", \"Lab Description\": \"Admin panel logs visitor IPs directly into SQL without escaping. The application is not vulnerable to output-based SQLi, but the query is injectable. To solve: Inject SQL to create a web shell for persistent access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A GraphQL endpoint exposes database introspection through a vulnerable enum field. The application fails to sanitize enum values used in raw SQL. To solve: Exploit the enum parameter to extract database schema information.", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Enumeration Query\", \"Lab Description\": \"A GraphQL endpoint exposes database introspection through a vulnerable enum field. The application fails to sanitize enum values used in raw SQL. To solve: Exploit the enum parameter to extract database schema information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An application converts MongoDB-style queries to SQL for reporting. The $match operator is vulnerable to SQL injection during conversion. To solve: Break out of document context to execute raw SQL commands.", "target": "{\"Lab scenario\": \"NoSQL to SQL Injection in Hybrid Document Query\", \"Lab Description\": \"An application converts MongoDB-style queries to SQL for reporting. The $match operator is vulnerable to SQL injection during conversion. To solve: Break out of document context to execute raw SQL commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in geospatial function argument", "target": "{\"Lab scenario\": \"SQL Injection in Geospatial Function Argument\", \"Lab Description\": \"A mapping application uses unsanitized user input in PostGIS functions. The ST_Contains parameter is vulnerable to injection. To solve: Exploit geometry parsing to execute system commands via PostGIS extensions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Full-Text Search Dictionary", "target": "{\"Lab scenario\": \"SQL Injection in Full-Text Search Dictionary\", \"Lab Description\": \"A search application allows custom dictionary configuration through URL parameters. The dictionary name is used unsafely in ts_parse function. To solve: Break out of dictionary context to execute arbitrary queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in array aggregation function", "target": "{\"Lab scenario\": \"SQL Injection in Array Aggregation Function\", \"Lab Description\": \"A reporting tool builds array_agg queries with user-controlled sort orders. The ORDER BY clause within array_agg is vulnerable. To solve: Exploit array construction to leak data through error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An analytics dashboard allows custom window frame specifications. The ROWS BETWEEN clause is vulnerable to injection. To solve: Break out of window frame context to access underlying tables.", "target": "{\"Lab scenario\": \"SQL Injection in Window Function Frame\", \"Lab Description\": \"An analytics dashboard allows custom window frame specifications. The ROWS BETWEEN clause is vulnerable to injection. To solve: Break out of window frame context to access underlying tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in JSON Path Query", "target": "{\"Lab scenario\": \"SQL Injection in JSON Path Query\", \"Lab Description\": \"A document store exposes JSON path queries that get converted to SQL. The jsonpath parameter is vulnerable to injection. To solve: Break out of path context to execute raw SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Materialized View Refresh", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh\", \"Lab Description\": \"A data warehouse allows triggering materialized view refreshes with user-controlled parameters. The WITH DATA clause is vulnerable. To solve: Exploit refresh privileges to modify underlying data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in recursive cte base case", "target": "{\"Lab scenario\": \"SQL Injection in Recursive CTE Base Case\", \"Lab Description\": \"A hierarchical data viewer builds recursive CTEs with user input in the anchor member. The WITH RECURSIVE clause is vulnerable. To solve: Break recursion to access arbitrary tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in custom aggregate function", "target": "{\"Lab scenario\": \"SQL Injection in Custom Aggregate Function\", \"Lab Description\": \"An analytics application registers custom aggregate functions that use unsanitized input. The final function parameter is vulnerable. To solve: Break out of aggregate context to execute commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A mobile app sends user feedback via a POST request. The backend inserts feedback into the database without sanitizing inputs and returns the inserted record. To solve: Use SQL injection to extract usernames and passwords from the users table.", "target": "{\"Lab scenario\": \"SQL injection in mobile app feedback submission\", \"Lab Description\": \"A mobile app sends user feedback via a POST request. The backend inserts feedback into the database without sanitizing inputs and returns the inserted record. To solve: Use SQL injection to extract usernames and passwords from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in newsletter subscription email field", "target": "{\"Lab scenario\": \"SQL injection in newsletter subscription email field\", \"Lab Description\": \"The newsletter signup form takes an email and inserts it into a database. The input is directly embedded into the SQL query and errors are displayed. To solve: Perform SQL injection to extract the database schema and admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection via URL parameter in product filtering", "target": "{\"Lab scenario\": \"SQL injection via URL parameter in product filtering\", \"Lab Description\": \"A product page filters items by category passed through URL. The app does not escape input and returns full query results. To solve: Inject SQL to extract database version, schema, and user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in e-commerce search autocomplete", "target": "{\"Lab scenario\": \"SQL injection in e-commerce search autocomplete\", \"Lab Description\": \"The search endpoint for autocomplete queries embeds user input into SQL with no validation and returns matched results. To solve: Use SQL injection to list all database tables and extract sensitive customer data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in forgotten password reset email lookup", "target": "{\"Lab scenario\": \"SQL injection in forgotten password reset email lookup\", \"Lab Description\": \"Password reset sends an email if a user exists. The lookup query is vulnerable and returns different responses. To solve: Use boolean-based SQL injection to enumerate valid user emails and extract password hashes.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: User deletion logs activity using input from 'reason' parameter. The app uses raw SQL for inserts with no feedback. To solve: Use time-based blind SQLi to infer database contents and extract sensitive information.", "target": "{\"Lab scenario\": \"Blind SQL injection in user deletion audit trail\", \"Lab Description\": \"User deletion logs activity using input from 'reason' parameter. The app uses raw SQL for inserts with no feedback. To solve: Use time-based blind SQLi to infer database contents and extract sensitive information.\", \"Vulnerability name\": \"Blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in URL shortener preview endpoint", "target": "{\"Lab scenario\": \"SQL injection in URL shortener preview endpoint\", \"Lab Description\": \"A preview feature allows users to inspect shortened URLs. It uses unsanitized query strings and returns full URL details. To solve: Use UNION-based SQLi to leak sensitive URLs and associated metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in real-time chat message sending", "target": "{\"Lab scenario\": \"SQL injection in real-time chat message sending\", \"Lab Description\": \"Messages in a chat are saved using unsanitized input and returned to users. Attackers can inject SQL commands to extract historical messages. To solve: Dump the complete chat history and user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in blog comment reply system", "target": "{\"Lab scenario\": \"SQL injection in blog comment reply system\", \"Lab Description\": \"Replying to blog comments appends user input into SQL statements and displays results. To solve: Inject SQL to enumerate database structure and extract admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The contact form saves user messages into the DB directly and allows stacked queries. Input is used without escaping. To solve: Use stacked queries to modify database content and gain admin access.", "target": "{\"Lab scenario\": \"SQL injection in contact form backend with stacked queries\", \"Lab Description\": \"The contact form saves user messages into the DB directly and allows stacked queries. Input is used without escaping. To solve: Use stacked queries to modify database content and gain admin access.\", \"Vulnerability name\": \"SQL injection (stacked queries)\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in graphql node id parameter", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Node ID Parameter\", \"Lab Description\": \"A GraphQL API implements node ID resolution with direct SQL concatenation. The global ID parameter is vulnerable to injection. To solve: Exploit the node resolver to extract schema metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A business intelligence system converts MongoDB aggregation pipelines to SQL for cross-database analytics. The $convert operator's expression evaluation fails to properly sanitize input when generating CAST operations in SQL. This allows breaking out of the aggregation context into raw SQL execution. The lab demonstrates how pipeline operators can become injection vectors when translated to relational queries.", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB Aggregation $convert to SQL Pipeline\", \"Lab Description\": \"A business intelligence system converts MongoDB aggregation pipelines to SQL for cross-database analytics. The $convert operator's expression evaluation fails to properly sanitize input when generating CAST operations in SQL. This allows breaking out of the aggregation context into raw SQL execution. The lab demonstrates how pipeline operators can become injection vectors when translated to relational queries.\", \"Vulnerability name\": \"Aggregation Pipeline SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in JWT Token Validation Query", "target": "{\"Lab scenario\": \"SQL Injection in JWT Token Validation Query\", \"Lab Description\": \"The JWT validation process checks token validity against database using unsanitized claims. To solve: Forge malicious JWT with SQLi in claims to bypass authentication.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A reporting tool allows custom CSV field terminators without validation. The terminator is used directly in SQL COPY command. To solve: Inject malicious terminators to execute OS commands.", "target": "{\"Lab scenario\": \"SQL Injection in CSV Export Field Terminator\", \"Lab Description\": \"A reporting tool allows custom CSV field terminators without validation. The terminator is used directly in SQL COPY command. To solve: Inject malicious terminators to execute OS commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in full-text search thesaurus", "target": "{\"Lab scenario\": \"SQL Injection in Full-Text Search Thesaurus\", \"Lab Description\": \"A search application loads custom thesaurus files from database. The thesaurus name parameter is vulnerable. To solve: Break thesaurus context to read arbitrary files.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in array constructor function", "target": "{\"Lab scenario\": \"SQL Injection in Array Constructor Function\", \"Lab Description\": \"A statistics dashboard builds array queries with user-controlled elements. The array constructor is vulnerable. To solve: Break array context to execute system commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in window function frame clause", "target": "{\"Lab scenario\": \"SQL Injection in Window Function Frame Clause\", \"Lab Description\": \"An analytics API allows custom window frame specifications. The ROWS BETWEEN clause is vulnerable. To solve: Break frame context to dump user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in json path query", "target": "{\"Lab scenario\": \"SQL Injection in JSON Path Query\", \"Lab Description\": \"A document store exposes JSON path queries that get converted to SQL. The jsonpath parameter is vulnerable. To solve: Break path context to read arbitrary tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in recursive cte base case", "target": "{\"Lab scenario\": \"SQL Injection in Recursive CTE Base Case\", \"Lab Description\": \"An org chart viewer builds recursive CTEs with user input in anchor member. The WITH RECURSIVE clause is vulnerable. To solve: Break recursion to access arbitrary tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Custom Aggregate Function", "target": "{\"Lab scenario\": \"SQL Injection in Custom Aggregate Function\", \"Lab Description\": \"A statistics application registers custom aggregates that use unsanitized input. The final function parameter is vulnerable. To solve: Break aggregate context to execute commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in mobile app profile update endpoint", "target": "{\"Lab scenario\": \"SQL injection in mobile app profile update endpoint\", \"Lab Description\": \"The mobile app allows users to update their profile information. The `name` parameter is directly inserted into an UPDATE SQL query without sanitization. Error messages are displayed. To solve: Perform SQL injection to extract database schema information and modify other users' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Error-based SQL injection scenario. Example: Error-based SQL injection in shopping cart total", "target": "{\"Lab scenario\": \"Error-based SQL injection in shopping cart total\", \"Lab Description\": \"The shopping cart calculates totals by querying product prices using product IDs. Detailed errors are reflected in responses. To solve: Extract database schema and contents through error messages.\", \"Vulnerability name\": \"Error-based SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A hidden referrer field in the registration form is used directly in SQL queries. The application returns query results in the response. To solve: Use UNION-based injection to extract user credentials.", "target": "{\"Lab scenario\": \"SQL injection via hidden form field in registration form\", \"Lab Description\": \"A hidden referrer field in the registration form is used directly in SQL queries. The application returns query results in the response. To solve: Use UNION-based injection to extract user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Second-order SQL injection lab where second-order sql injection via stored user bio", "target": "{\"Lab scenario\": \"Second-order SQL injection via stored user bio\", \"Lab Description\": \"User bios are stored and later used unsafely in admin search queries. No immediate feedback is available. To solve: Store malicious payload and trigger when admin searches user bios.\", \"Vulnerability name\": \"Second-order SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in password reset token check", "target": "{\"Lab scenario\": \"SQL injection in password reset token check\", \"Lab Description\": \"The password reset endpoint checks tokens without sanitization. Different responses indicate valid/invalid tokens. To solve: Use boolean-based injection to bypass token validation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Referer headers are logged directly into SQL. The admin panel displays logs with limited escaping. To solve: Inject XSS and SQLi payloads to steal admin cookies.", "target": "{\"Lab scenario\": \"SQL injection via HTTP Referer header in audit logs\", \"Lab Description\": \"Referer headers are logged directly into SQL. The admin panel displays logs with limited escaping. To solve: Inject XSS and SQLi payloads to steal admin cookies.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Boolean-based blind SQL injection lab where boolean sql injection in mobile banking app login", "target": "{\"Lab scenario\": \"Boolean SQL injection in mobile banking app login\", \"Lab Description\": \"The login endpoint returns different responses for valid/invalid credentials. No direct output. To solve: Use boolean conditions to extract admin password hash character by character.\", \"Vulnerability name\": \"Boolean-based blind SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a UNION-based SQL injection lab where union-based sqli in forum's search feature", "target": "{\"Lab scenario\": \"UNION-based SQLi in forum's search feature\", \"Lab Description\": \"The forum search directly embeds terms in SQL and returns full results. To solve: Use UNION injection to extract database version, tables, and user credentials.\", \"Vulnerability name\": \"UNION-based SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The password verification API has identical responses but vulnerable to timing attacks. To solve: Use SLEEP() to extract admin password character by character.", "target": "{\"Lab scenario\": \"Time-based SQLi in password verification API\", \"Lab Description\": \"The password verification API has identical responses but vulnerable to timing attacks. To solve: Use SLEEP() to extract admin password character by character.\", \"Vulnerability name\": \"Time-based blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a UNION-based SQL injection scenario. Example: SQLi in e-learning platform course filter", "target": "{\"Lab scenario\": \"SQLi in e-learning platform course filter\", \"Lab Description\": \"The course topic filter is vulnerable to UNION-based injection. Results are displayed in the UI. To solve: Extract database version, schema, and user credentials.\", \"Vulnerability name\": \"UNION-based SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in IoT Device Location Tracker", "target": "{\"Lab scenario\": \"SQL Injection in IoT Device Location Tracker\", \"Lab Description\": \"An IoT tracking system stores device location coordinates in a PostgreSQL database. The coordinate update endpoint directly concatenates latitude/longitude values into a geospatial query without sanitization. The application uses PostGIS functions that can be exploited to break out of the coordinate context. To solve: Exploit the ST_MakePoint function parameter injection to execute system commands through PostGIS extension functions and exfiltrate all device location history.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A GraphQL API implements custom depth limiting that fails to properly sanitize nested query parameters. The query depth protection can be bypassed through specially crafted aliases, allowing access to underlying SQL queries. The vulnerability exists in the connection resolver that builds raw SQL for pagination. To solve: Craft a deeply nested GraphQL query that bypasses depth limits and injects malicious SQL through the 'after' cursor parameter to extract the entire database schema.", "target": "{\"Lab scenario\": \"GraphQL Query Depth Exploitation Leading to SQL Injection\", \"Lab Description\": \"A GraphQL API implements custom depth limiting that fails to properly sanitize nested query parameters. The query depth protection can be bypassed through specially crafted aliases, allowing access to underlying SQL queries. The vulnerability exists in the connection resolver that builds raw SQL for pagination. To solve: Craft a deeply nested GraphQL query that bypasses depth limits and injects malicious SQL through the 'after' cursor parameter to extract the entire database schema.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in machine learning feature store", "target": "{\"Lab scenario\": \"SQL Injection in Machine Learning Feature Store\", \"Lab Description\": \"A machine learning platform stores feature definitions in a SQL database. The feature retrieval endpoint dynamically builds queries using unsanitized feature names from user input. The application uses a custom DSL that gets translated to SQL, introducing injection points in the WHERE clause generation. To solve: Exploit the feature name parameter to break out of the DSL context and perform a UNION-based attack to extract sensitive model training data, including PII used in model features.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Boolean-based blind SQL injection scenario. Example: Blind SQL Injection in Healthcare Appointment System", "target": "{\"Lab scenario\": \"Blind SQL Injection in Healthcare Appointment System\", \"Lab Description\": \"A hospital appointment booking system contains a blind SQL injection vulnerability in the patient lookup functionality. The application provides different error messages for existing vs. non-existing patient IDs, enabling boolean-based inference attacks. No direct results are returned, but the response content length differs based on query results. To solve: Use conditional boolean queries to extract sensitive patient medical records one character at a time, including diagnoses and treatment histories.\", \"Vulnerability name\": \"Boolean-based blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A DAM system stores metadata about digital assets in a SQL database. The asset search functionality directly embeds user-controlled sort parameters into ORDER BY clauses without sanitization. While most SQL injection filters focus on WHERE clauses, the ORDER BY injection allows limited data exfiltration through careful timing attacks. To solve: Exploit the sort direction parameter to perform a time-based attack extracting AWS S3 bucket names and access keys stored in the database.", "target": "{\"Lab scenario\": \"SQL Injection in Digital Asset Management System\", \"Lab Description\": \"A DAM system stores metadata about digital assets in a SQL database. The asset search functionality directly embeds user-controlled sort parameters into ORDER BY clauses without sanitization. While most SQL injection filters focus on WHERE clauses, the ORDER BY injection allows limited data exfiltration through careful timing attacks. To solve: Exploit the sort direction parameter to perform a time-based attack extracting AWS S3 bucket names and access keys stored in the database.\", \"Vulnerability name\": \"Time-based SQL injection in ORDER BY\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A content management system allows administrators to create dynamic page templates that get processed through a SQL-powered rendering engine. User-provided template code is initially sanitized when stored, but gets re-embedded into SQL queries during page rendering without proper escaping. To solve: Store malicious template code containing SQL injection payloads that execute when pages are viewed, enabling privilege escalation to superadmin by modifying backend permissions.", "target": "{\"Lab scenario\": \"Second-Order SQL Injection in CMS Template System\", \"Lab Description\": \"A content management system allows administrators to create dynamic page templates that get processed through a SQL-powered rendering engine. User-provided template code is initially sanitized when stored, but gets re-embedded into SQL queries during page rendering without proper escaping. To solve: Store malicious template code containing SQL injection payloads that execute when pages are viewed, enabling privilege escalation to superadmin by modifying backend permissions.\", \"Vulnerability name\": \"Second-order SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a NoSQL to SQL injection scenario. Example: NoSQL to SQL Injection in Hybrid Analytics Dashboard", "target": "{\"Lab scenario\": \"NoSQL to SQL Injection in Hybrid Analytics Dashboard\", \"Lab Description\": \"An analytics dashboard accepts MongoDB-style queries that get converted to SQL for reporting. The $match stage translation improperly handles nested query operators, allowing injection into the generated SQL. The application uses a custom query DSL that fails to properly escape MongoDB's $where clause when converting to SQL. To solve: Craft a malicious $where condition that breaks out of the JavaScript context and executes arbitrary SQL to extract all reporting data and underlying source databases.\", \"Vulnerability name\": \"NoSQL to SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in financial trading algorithm config", "target": "{\"Lab scenario\": \"SQL Injection in Financial Trading Algorithm Config\", \"Lab Description\": \"A stock trading platform allows configuring algorithmic trading strategies through JSON parameters that get converted to SQL WHERE clauses. The strategy condition builder fails to properly sanitize comparison operators in the JSON-to-SQL conversion. To solve: Exploit the custom operator syntax to break out of the condition context and perform a UNION-based attack to extract all trading algorithms, including proprietary strategies and associated account credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Boolean-based blind SQL injection lab where sql injection in multi-factor authentication setup", "target": "{\"Lab scenario\": \"SQL Injection in Multi-Factor Authentication Setup\", \"Lab Description\": \"The MFA enrollment process stores device information in a SQL database. The device identifier parameter is vulnerable to injection during the verification step. The application provides different error messages for valid/invalid device IDs, enabling boolean-based attacks. To solve: Use conditional error responses to extract the MFA seed secrets for all users, allowing complete bypass of multi-factor authentication across the application.\", \"Vulnerability name\": \"Boolean-based blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A legal research platform's document search functionality directly embeds user-controlled highlight markers into SQL full-text search queries. The application uses a custom highlighting syntax that can be abused to break out of the text search context. To solve: Exploit the highlight parameter injection to perform a UNION-based attack extracting all legal documents, including privileged client communications and sealed court records.", "target": "{\"Lab scenario\": \"SQL Injection in Legal Document Search Engine\", \"Lab Description\": \"A legal research platform's document search functionality directly embeds user-controlled highlight markers into SQL full-text search queries. The application uses a custom highlighting syntax that can be abused to break out of the text search context. To solve: Exploit the highlight parameter injection to perform a UNION-based attack extracting all legal documents, including privileged client communications and sealed court records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The product filter endpoint accepts a category ID parameter that is directly concatenated into a SQL query without sanitization. The application displays full MySQL error messages, enabling error-based injection techniques. This vulnerability allows attackers to extract database schema information and sensitive data through carefully crafted error messages. The exploit leverages MySQL's XML functions to force error messages containing query results.", "target": "{\"Lab scenario\": \"Error-based SQL Injection in Product Filter of an E-commerce Site\", \"Lab Description\": \"The product filter endpoint accepts a category ID parameter that is directly concatenated into a SQL query without sanitization. The application displays full MySQL error messages, enabling error-based injection techniques. This vulnerability allows attackers to extract database schema information and sensitive data through carefully crafted error messages. The exploit leverages MySQL's XML functions to force error messages containing query results.\", \"Vulnerability name\": \"Error-based SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Second-order SQL injection lab for: second-order sql injection in user profile update", "target": "{\"Lab scenario\": \"Second-order SQL Injection in User Profile Update\", \"Lab Description\": \"The application stores user profile status messages without proper sanitization, then later uses them unsafely in admin dashboard queries. This delayed exploitation vector demonstrates how initially 'safe' stored data can become dangerous when reused in different contexts. The attack requires storing malicious input that only triggers when processed by vulnerable code paths, typically through admin functionality with higher privileges.\", \"Vulnerability name\": \"Second-order SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in DELETE Statement of Admin Panel", "target": "{\"Lab scenario\": \"SQL Injection in DELETE Statement of Admin Panel\", \"Lab Description\": \"The user management interface contains a critical vulnerability where user IDs are directly interpolated into DELETE statements. This flaw allows attackers to manipulate query logic to delete arbitrary data. Unlike SELECT injections, DELETE vulnerabilities can cause irreversible data loss. The attack demonstrates how missing parameterization in write operations can be more dangerous than in read operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in mobile app's search api", "target": "{\"Lab scenario\": \"SQL Injection in Mobile App's Search API\", \"Lab Description\": \"The mobile backend API accepts search terms through POST requests and concatenates them directly into a LIKE clause. This vulnerability demonstrates how APIs powering mobile apps can be vulnerable to classic injection attacks. The LIKE operator context requires different syntax than WHERE clause injections, showing how injection techniques must adapt to query contexts.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy SQL injection lab for: login bypass in legacy asp.net web form", "target": "{\"Lab scenario\": \"Login Bypass in Legacy ASP.NET Web Form\", \"Lab Description\": \"A classic ASP.NET authentication form demonstrates how string concatenation in SQL queries creates injection vulnerabilities. This lab highlights risks in legacy systems that haven't adopted parameterized queries. The attack bypasses authentication by manipulating the query logic to always evaluate as true, regardless of credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in join clause of financial report", "target": "{\"Lab scenario\": \"SQL Injection in JOIN Clause of Financial Report\", \"Lab Description\": \"A financial reporting system builds dynamic JOIN conditions using user input, creating a rare but dangerous injection point. Most SQLi training focuses on WHERE clauses, but this lab demonstrates JOIN clause vulnerabilities that can expose sensitive relationships between tables. The attack reveals how injection points can exist in less obvious query parts.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in xml soap web service", "target": "{\"Lab scenario\": \"SQL Injection in XML SOAP Web Service\", \"Lab Description\": \"A SOAP-based web service processes XML requests where parameters are directly embedded into SQL queries. This lab demonstrates how web services using XML payloads can still be vulnerable to classic injection attacks if input sanitization is neglected. The attack requires proper XML formatting while injecting malicious SQL fragments.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cookie-based sql injection in shopping cart", "target": "{\"Lab scenario\": \"Cookie-based SQL Injection in Shopping Cart\", \"Lab Description\": \"The application uses a cookie value to track shopping carts, embedding it directly into SQL queries. This lab shows how injection vulnerabilities can exist outside typical form inputs, requiring attackers to manipulate less obvious input vectors. The attack demonstrates cookie manipulation techniques and header-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A modern project management application's JSON API fails to sanitize numeric IDs used in queries. This lab demonstrates how RESTful APIs using JSON payloads can still be vulnerable if server-side validation is insufficient. The attack requires proper JSON formatting while injecting malicious SQL through numeric parameters.", "target": "{\"Lab scenario\": \"JSON API SQL Injection in Project Management Tool\", \"Lab Description\": \"A modern project management application's JSON API fails to sanitize numeric IDs used in queries. This lab demonstrates how RESTful APIs using JSON payloads can still be vulnerable if server-side validation is insufficient. The attack requires proper JSON formatting while injecting malicious SQL through numeric parameters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where limit clause sql injection in data export", "target": "{\"Lab scenario\": \"LIMIT Clause SQL Injection in Data Export\", \"Lab Description\": \"A data export feature allows pagination through LIMIT and OFFSET parameters that are concatenated directly into queries. This lab demonstrates injection in less common query clauses, requiring specialized syntax. The attack shows how pagination controls can become injection vectors when improperly implemented.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in smart home voice command logging", "target": "{\"Lab scenario\": \"SQL Injection in Smart Home Voice Command Logging\", \"Lab Description\": \"A smart home system logs voice commands in a MySQL database. The command processing endpoint directly embeds transcribed text into INSERT statements without sanitization. The application uses a custom NLP preprocessing function that can be abused to break out of string context. To solve: Exploit the voice transcription parameter to perform a stacked query attack that extracts all voice command history and modifies device access permissions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in autonomous vehicle route planning", "target": "{\"Lab scenario\": \"SQL Injection in Autonomous Vehicle Route Planning\", \"Lab Description\": \"An autonomous vehicle system stores route coordinates in a PostgreSQL database. The route optimization endpoint uses unsanitized location names in spatial queries. The application's custom pathfinding function can be exploited to break out of the geography context. To solve: Inject malicious SQL through the waypoint name parameter to access all vehicle routes and modify navigation rules to create dangerous driving conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in industrial control system alarm configuration", "target": "{\"Lab scenario\": \"SQL Injection in Industrial Control System Alarm Configuration\", \"Lab Description\": \"An industrial control system stores alarm thresholds in a SQLite database. The alarm configuration endpoint directly embeds parameter names and values into UPDATE statements. The application's custom validation logic can be bypassed through carefully crafted parameter names. To solve: Exploit the parameter name field to perform a UNION-based attack extracting all system configurations and modifying critical safety thresholds.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in blockchain transaction processor", "target": "{\"Lab scenario\": \"SQL Injection in Blockchain Transaction Processor\", \"Lab Description\": \"A blockchain analytics platform stores transaction metadata in a PostgreSQL database. The transaction search endpoint directly embeds user-controlled wallet addresses into JSON-path queries. The application's custom JSON processing function can be exploited to break out of the path context. To solve: Inject malicious SQL through the wallet address parameter to access all transaction histories and modify verification flags.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in ai chatbot training data system", "target": "{\"Lab scenario\": \"SQL Injection in AI Chatbot Training Data System\", \"Lab Description\": \"An AI chatbot platform stores training conversations in a MySQL database. The data labeling endpoint directly embeds category names into INSERT statements. The application's custom NLP tagging function can be abused to break out of string context. To solve: Exploit the category parameter to perform a stacked query attack extracting all training conversations and injecting malicious training examples.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A quantum computing platform stores job parameters in a PostgreSQL database. The job submission endpoint directly embeds algorithm names into queries. The application's custom quantum circuit compiler can be exploited to break out of string context. To solve: Inject malicious SQL through the algorithm name parameter to access all job histories and modify sensitive quantum processor configurations.", "target": "{\"Lab scenario\": \"SQL Injection in Quantum Computing Job Scheduler\", \"Lab Description\": \"A quantum computing platform stores job parameters in a PostgreSQL database. The job submission endpoint directly embeds algorithm names into queries. The application's custom quantum circuit compiler can be exploited to break out of string context. To solve: Inject malicious SQL through the algorithm name parameter to access all job histories and modify sensitive quantum processor configurations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A satellite ground station stores telemetry data in a SQLite database. The data retrieval endpoint directly embeds sensor names into queries. The application's custom signal processing function can be abused to break out of string context. To solve: Exploit the sensor name parameter to perform a UNION-based attack extracting all telemetry data and modifying satellite control parameters.", "target": "{\"Lab scenario\": \"SQL Injection in Satellite Telemetry System\", \"Lab Description\": \"A satellite ground station stores telemetry data in a SQLite database. The data retrieval endpoint directly embeds sensor names into queries. The application's custom signal processing function can be abused to break out of string context. To solve: Exploit the sensor name parameter to perform a UNION-based attack extracting all telemetry data and modifying satellite control parameters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in DNA Sequencing Analysis Platform", "target": "{\"Lab scenario\": \"SQL Injection in DNA Sequencing Analysis Platform\", \"Lab Description\": \"A bioinformatics platform stores DNA sequence metadata in a PostgreSQL database. The sequence search endpoint directly embeds genetic marker patterns into similarity queries. The application's custom pattern matching function can be exploited to break out of the sequence context. To solve: Inject malicious SQL through the genetic marker parameter to access all DNA sequence records and modify research findings.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Military Drone Command System", "target": "{\"Lab scenario\": \"SQL Injection in Military Drone Command System\", \"Lab Description\": \"A drone command system stores mission parameters in an encrypted SQLite database. The command verification endpoint directly embeds parameter names into queries after decryption. The application's custom crypto layer can be bypassed through carefully crafted command sequences. To solve: Exploit the decrypted parameter field to perform a stacked query attack extracting all mission plans and modifying drone flight paths.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A nuclear power plant monitoring system stores sensor readings in a firewalled PostgreSQL database. The sensor data visualization endpoint directly embeds time range parameters into queries. The application's custom time series function can be exploited to break out of the timestamp context. To solve: Inject malicious SQL through the time range parameter to access all sensor histories and modify critical safety thresholds.", "target": "{\"Lab scenario\": \"SQL Injection in Nuclear Plant Sensor Monitoring\", \"Lab Description\": \"A nuclear power plant monitoring system stores sensor readings in a firewalled PostgreSQL database. The sensor data visualization endpoint directly embeds time range parameters into queries. The application's custom time series function can be exploited to break out of the timestamp context. To solve: Inject malicious SQL through the time range parameter to access all sensor histories and modify critical safety thresholds.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An HR management system's employee deletion endpoint constructs DELETE queries directly from user input. The vulnerable parameter allows attackers to manipulate the query to delete arbitrary records. This lab demonstrates the impact of unsanitized input in DELETE operations, where injection can lead to mass data destruction.", "target": "{\"Lab scenario\": \"SQL Injection in HR System DELETE Operation\", \"Lab Description\": \"An HR management system's employee deletion endpoint constructs DELETE queries directly from user input. The vulnerable parameter allows attackers to manipulate the query to delete arbitrary records. This lab demonstrates the impact of unsanitized input in DELETE operations, where injection can lead to mass data destruction.\", \"Vulnerability name\": \"SQL Injection in DELETE Operation\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Second-Order SQL Injection lab where second-order sql injection in user profiles", "target": "{\"Lab scenario\": \"Second-Order SQL Injection in User Profiles\", \"Lab Description\": \"A profile update system stores unsanitized user input that gets embedded into SQL queries during admin review. This delayed execution demonstrates second-order injection where payloads remain dormant until triggered by privileged users. The challenge involves storing malicious SQL in a bio field that executes during admin access.\", \"Vulnerability name\": \"Second-Order SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A password recovery system uses a vulnerable stored procedure that concatenates user input directly into dynamic SQL. This lab demonstrates how injection can occur even when using stored procedures if input sanitization is neglected. The challenge involves exploiting the email parameter to extract password hashes.", "target": "{\"Lab scenario\": \"Stored Procedure Injection in Password Recovery\", \"Lab Description\": \"A password recovery system uses a vulnerable stored procedure that concatenates user input directly into dynamic SQL. This lab demonstrates how injection can occur even when using stored procedures if input sanitization is neglected. The challenge involves exploiting the email parameter to extract password hashes.\", \"Vulnerability name\": \"SQL Injection in Stored Procedure\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL Injection via Metadata scenario. Example: Metadata Injection in Image Gallery", "target": "{\"Lab scenario\": \"Metadata Injection in Image Gallery\", \"Lab Description\": \"An image gallery system incorporates unsanitized user input from image captions into SQL queries. This lab demonstrates injection through secondary input channels like file metadata. The challenge involves exploiting the caption field to exfiltrate user credentials via the gallery display.\", \"Vulnerability name\": \"SQL Injection via Metadata\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL Injection with XML Output lab where xml-based sql injection in search api", "target": "{\"Lab scenario\": \"XML-Based SQL Injection in Search API\", \"Lab Description\": \"A search API returns results in XML format but constructs queries through string concatenation. This lab demonstrates how injection can persist even with output format constraints. The challenge involves exploiting the search parameter to extract database schema via XML responses.\", \"Vulnerability name\": \"SQL Injection with XML Output\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL Injection in Data Visualization scenario. Example: Chart Data Injection in Financial Dashboard", "target": "{\"Lab scenario\": \"Chart Data Injection in Financial Dashboard\", \"Lab Description\": \"A financial dashboard dynamically builds SQL queries from unsanitized user input to generate charts. This lab demonstrates injection through data visualization parameters. The challenge involves manipulating chart metrics to expose sensitive transaction records in tooltip data.\", \"Vulnerability name\": \"SQL Injection in Data Visualization\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL Injection in JSON API lab for: json api authentication bypass", "target": "{\"Lab scenario\": \"JSON API Authentication Bypass\", \"Lab Description\": \"A mobile API accepts JSON credentials but embeds them directly into SQL queries. This lab demonstrates injection through JSON payloads with proper content-type headers. The challenge involves bypassing authentication using boolean-based payloads in the username field.\", \"Vulnerability name\": \"SQL Injection in JSON API\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL Injection in CSV Export scenario. Example: CSV Export Injection", "target": "{\"Lab scenario\": \"CSV Export Injection\", \"Lab Description\": \"A CSV export feature dynamically selects columns through user input without sanitization. This lab demonstrates injection through data export functionality. The challenge involves manipulating the column parameter to export sensitive user credentials in the CSV file.\", \"Vulnerability name\": \"SQL Injection in CSV Export\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL Injection in Password Reset lab for: password reset token enumeration", "target": "{\"Lab scenario\": \"Password Reset Token Enumeration\", \"Lab Description\": \"A password reset system verifies tokens through vulnerable SQL queries. This lab demonstrates user enumeration through blind injection in security workflows. The challenge involves manipulating the token parameter to extract valid usernames from error responses.\", \"Vulnerability name\": \"SQL Injection in Password Reset\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Time-Based Blind SQL Injection scenario. Example: Time-Based Blind Injection in Analytics API", "target": "{\"Lab scenario\": \"Time-Based Blind Injection in Analytics API\", \"Lab Description\": \"An analytics API provides no direct output but is vulnerable to time-based blind SQL injection. This lab demonstrates data extraction through timing delays when boolean conditions are met. The challenge involves extracting the admin password hash character-by-character using response timing analysis.\", \"Vulnerability name\": \"Time-Based Blind SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard GraphQL to SQL Injection lab for: sql injection in graphql union query", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Union Query\", \"Lab Description\": \"A GraphQL API implements custom resolvers that convert GraphQL queries to raw SQL. The union type implementation fails to properly sanitize type names, allowing injection into the generated SQL. The vulnerability exists in the resolver that handles polymorphic queries across multiple database tables. Attackers can exploit this to access restricted data models not normally exposed through the GraphQL schema.\", \"Vulnerability name\": \"GraphQL to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A document management system stores metadata in MongoDB but uses PostgreSQL for full-text search. The translation layer between document queries and SQL search queries improperly handles nested array operators, allowing injection into the generated SQL. The $elemMatch operator is particularly vulnerable as it gets converted to raw SQL without proper escaping of bracket notation.", "target": "{\"Lab scenario\": \"NoSQL to SQL Injection in Hybrid Document-Relational System\", \"Lab Description\": \"A document management system stores metadata in MongoDB but uses PostgreSQL for full-text search. The translation layer between document queries and SQL search queries improperly handles nested array operators, allowing injection into the generated SQL. The $elemMatch operator is particularly vulnerable as it gets converted to raw SQL without proper escaping of bracket notation.\", \"Vulnerability name\": \"NoSQL to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a ML Feature Store Injection lab where sql injection in machine learning feature store", "target": "{\"Lab scenario\": \"SQL Injection in Machine Learning Feature Store\", \"Lab Description\": \"A feature store for ML models dynamically generates SQL queries based on feature names. The query builder fails to properly escape feature names containing special characters, allowing injection into the training data retrieval pipeline. The vulnerability is particularly dangerous as it can expose PII used in model training that would otherwise be inaccessible through normal API endpoints.\", \"Vulnerability name\": \"ML Feature Store Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a LDAP to SQL Injection scenario. Example: LDAP Filter to SQL Injection in HR System", "target": "{\"Lab scenario\": \"LDAP Filter to SQL Injection in HR System\", \"Lab Description\": \"An employee directory converts LDAP search filters to SQL queries for a hybrid authentication system. The translation fails to properly escape special characters in the LDAP filter syntax, allowing injection into the generated SQL. The vulnerability allows attackers to bypass both LDAP and SQL security controls by crafting malicious filters that modify the resulting query structure.\", \"Vulnerability name\": \"LDAP to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A blockchain indexer processes smart contract events and stores them in a SQL database. The event parameter parser fails to properly sanitize tuple types, allowing injection into the INSERT statements that store event data. This vulnerability can be exploited by emitting specially crafted events from a malicious smart contract to manipulate the database.", "target": "{\"Lab scenario\": \"SQL Injection in Blockchain Smart Contract Event Processing\", \"Lab Description\": \"A blockchain indexer processes smart contract events and stores them in a SQL database. The event parameter parser fails to properly sanitize tuple types, allowing injection into the INSERT statements that store event data. This vulnerability can be exploited by emitting specially crafted events from a malicious smart contract to manipulate the database.\", \"Vulnerability name\": \"Blockchain to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An IoT management platform verifies firmware updates by checking version numbers against a SQL database. The version comparison logic directly concatenates user-supplied version strings into the query. Attackers can exploit this by registering malicious firmware with version strings containing SQL payloads that execute when devices check for updates.", "target": "{\"Lab scenario\": \"SQL Injection in IoT Device Firmware Update Verification\", \"Lab Description\": \"An IoT management platform verifies firmware updates by checking version numbers against a SQL database. The version comparison logic directly concatenates user-supplied version strings into the query. Attackers can exploit this by registering malicious firmware with version strings containing SQL payloads that execute when devices check for updates.\", \"Vulnerability name\": \"IoT Firmware SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A geographic feature server accepts GeoJSON input that gets converted to SQL queries using PostGIS functions. The geometry coordinate array processing fails to properly sanitize numeric values, allowing injection into spatial queries. Attackers can exploit this by crafting malicious GeoJSON features that break out of the ST_GeomFromGeoJSON function context.", "target": "{\"Lab scenario\": \"SQL Injection in GeoJSON Feature Server\", \"Lab Description\": \"A geographic feature server accepts GeoJSON input that gets converted to SQL queries using PostGIS functions. The geometry coordinate array processing fails to properly sanitize numeric values, allowing injection into spatial queries. Attackers can exploit this by crafting malicious GeoJSON features that break out of the ST_GeomFromGeoJSON function context.\", \"Vulnerability name\": \"GeoJSON to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Signature Verification SQLi lab where sql injection in digital signature verification", "target": "{\"Lab scenario\": \"SQL Injection in Digital Signature Verification\", \"Lab Description\": \"A document signing system verifies digital signatures by querying a database of authorized signers. The verification query concatenates the raw signature value directly into the SQL statement. Attackers can exploit this by crafting malicious signatures that contain SQL payloads while still passing cryptographic verification through careful manipulation of signature components.\", \"Vulnerability name\": \"Signature Verification SQLi\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Video Metadata SQLi scenario. Example: SQL Injection in Video Processing Metadata", "target": "{\"Lab scenario\": \"SQL Injection in Video Processing Metadata\", \"Lab Description\": \"A video processing pipeline stores frame metadata in a SQL database. The frame analysis endpoint accepts JSON metadata that gets directly embedded into INSERT statements. Attackers can exploit this by uploading videos with malicious metadata that injects SQL when frames are processed. The vulnerability is particularly dangerous as it executes in a backend worker process with elevated privileges.\", \"Vulnerability name\": \"Video Metadata SQLi\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Voice Command SQLi lab for: sql injection in voice assistant command logging", "target": "{\"Lab scenario\": \"SQL Injection in Voice Assistant Command Logging\", \"Lab Description\": \"A voice assistant system logs interpreted commands to a SQL database for analytics. The voice-to-text processor fails to properly sanitize special characters in commands before logging them. Attackers can exploit this by speaking carefully crafted commands that inject SQL when the logs are processed by administrative tools.\", \"Vulnerability name\": \"Voice Command SQLi\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A GraphQL API implements custom node resolution that dynamically builds SQL queries using unsanitized GraphQL ID values. The global ID pattern used for node references gets directly embedded into WHERE clauses, allowing injection through base64-encoded ID manipulation.", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Node Resolution\", \"Lab Description\": \"A GraphQL API implements custom node resolution that dynamically builds SQL queries using unsanitized GraphQL ID values. The global ID pattern used for node references gets directly embedded into WHERE clauses, allowing injection through base64-encoded ID manipulation.\", \"Vulnerability name\": \"GraphQL Node ID Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium JWT Claim Injection lab for: sql injection in jwt claim processing", "target": "{\"Lab scenario\": \"SQL Injection in JWT Claim Processing\", \"Lab Description\": \"An authentication system processes JWT claims by directly inserting them into SQL queries for permission checks. The 'role' claim from unsigned JWTs gets concatenated into authorization queries, allowing privilege escalation through crafted tokens.\", \"Vulnerability name\": \"JWT Claim Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A hybrid document-relational system translates MongoDB queries to SQL for cross-platform searches. The $where clause JavaScript gets converted to SQL without proper sanitization, allowing injection through specially crafted JavaScript expressions.", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB $where Clause to SQL Translation\", \"Lab Description\": \"A hybrid document-relational system translates MongoDB queries to SQL for cross-platform searches. The $where clause JavaScript gets converted to SQL without proper sanitization, allowing injection through specially crafted JavaScript expressions.\", \"Vulnerability name\": \"NoSQL-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium DynamoDB-to-SQL Injection lab for: sql injection in dynamodb stream processor", "target": "{\"Lab scenario\": \"SQL Injection in DynamoDB Stream Processor\", \"Lab Description\": \"A serverless function processes DynamoDB streams by converting item changes to SQL for a reporting database. The attribute value mapping fails to properly escape special characters, allowing injection through manipulated DynamoDB entries.\", \"Vulnerability name\": \"DynamoDB-to-SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cache Reconstruction Injection lab for: sql injection in redis-to-sql caching layer", "target": "{\"Lab scenario\": \"SQL Injection in Redis-to-SQL Caching Layer\", \"Lab Description\": \"A caching system stores SQL query results in Redis but reconstructs queries from cached patterns with user input. The query reconstruction fails to properly escape values retrieved from Redis, allowing injection through cache poisoning.\", \"Vulnerability name\": \"Cache Reconstruction Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An application uses Elasticsearch's SQL plugin for analytics, but passes user input directly to the SQL translation layer. The plugin's query builder fails to properly escape special characters in WHERE clauses, allowing injection through search parameters.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL Plugin\", \"Lab Description\": \"An application uses Elasticsearch's SQL plugin for analytics, but passes user input directly to the SQL translation layer. The plugin's query builder fails to properly escape special characters in WHERE clauses, allowing injection through search parameters.\", \"Vulnerability name\": \"Elasticsearch SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Firebase Path Injection scenario. Example: SQL Injection in Firebase Realtime Database Trigger", "target": "{\"Lab scenario\": \"SQL Injection in Firebase Realtime Database Trigger\", \"Lab Description\": \"A Firebase function triggers on database writes to sync data to a SQL database. The path parameters used in the sync operation get directly embedded into SQL queries, allowing injection through manipulated database paths.\", \"Vulnerability name\": \"Firebase Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An OData API implementation converts $filter expressions to SQL without proper escaping. The parser fails to handle special characters in string literals, allowing injection through crafted filter expressions.", "target": "{\"Lab scenario\": \"SQL Injection in OData Filter Parser\", \"Lab Description\": \"An OData API implementation converts $filter expressions to SQL without proper escaping. The parser fails to handle special characters in string literals, allowing injection through crafted filter expressions.\", \"Vulnerability name\": \"OData Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Kafka-to-SQL Injection lab for: sql injection in apache kafka sql connector", "target": "{\"Lab scenario\": \"SQL Injection in Apache Kafka SQL Connector\", \"Lab Description\": \"A Kafka connector streams messages to a SQL database using configured field mappings. The message value deserializer fails to properly escape string values, allowing injection through crafted Kafka messages.\", \"Vulnerability name\": \"Kafka-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a GraphQL Subscription Injection scenario. Example: SQL Injection in GraphQL Subscription Resolver", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Subscription Resolver\", \"Lab Description\": \"A GraphQL subscription resolver dynamically builds SQL queries for real-time updates using unsanitized subscription arguments. The resolver fails to properly escape arguments before embedding them in LIKE clauses for change detection.\", \"Vulnerability name\": \"GraphQL Subscription Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard GraphQL Enum Injection lab for: sql injection in graphql enum type resolution", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Enum Type Resolution\", \"Lab Description\": \"A GraphQL API dynamically maps enum values to SQL queries without proper validation. Attackers can manipulate enum parameters in introspection queries to break out of the type system and execute arbitrary SQL commands.\", \"Vulnerability name\": \"GraphQL Enum Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a JWT Key ID Injection scenario. Example: SQL Injection in JWT Key ID Header", "target": "{\"Lab scenario\": \"SQL Injection in JWT Key ID Header\", \"Lab Description\": \"A JWT verification system uses the key ID (kid) header to dynamically select database-stored keys. The kid parameter is concatenated directly into SQL queries, allowing injection through crafted token headers.\", \"Vulnerability name\": \"JWT Key ID Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Redis-to-SQL Injection lab for: sql injection in redis time series filter", "target": "{\"Lab scenario\": \"SQL Injection in Redis Time Series Filter\", \"Lab Description\": \"A Redis time series module converts TS.RANGE filters to SQL for hybrid queries. The filter parameter concatenation allows breaking out of Redis syntax into underlying SQL execution context.\", \"Vulnerability name\": \"Redis-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Kafka Connect SQLi lab for: sql injection in kafka connect jdbc sink", "target": "{\"Lab scenario\": \"SQL Injection in Kafka Connect JDBC Sink\", \"Lab Description\": \"A Kafka Connect pipeline uses user-provided table names in JDBC sink configurations. The table name parameter is embedded directly into INSERT statements without sanitization, allowing injection through topic metadata.\", \"Vulnerability name\": \"Kafka Connect SQLi\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a FDW Options Injection scenario. Example: SQL Injection in PostgreSQL FDW Options", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL FDW Options\", \"Lab Description\": \"A multi-database system creates PostgreSQL foreign data wrappers with dynamic options. The option string concatenation allows injection during FDW server creation, compromising linked databases.\", \"Vulnerability name\": \"FDW Options Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Snowflake External Function Injection lab for: sql injection in snowflake external function", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function\", \"Lab Description\": \"A Snowflake data pipeline calls external functions with unsanitized parameters. The function arguments are concatenated directly into SQL queries, allowing injection through API gateway requests.\", \"Vulnerability name\": \"Snowflake External Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Elasticsearch ODBC Injection lab where sql injection in elasticsearch sql odbc driver", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver\", \"Lab Description\": \"An application uses Elasticsearch's SQL ODBC driver with user-provided query parameters. The parameter concatenation in the ODBC layer allows injection that bypasses Elasticsearch's normal security controls.\", \"Vulnerability name\": \"Elasticsearch ODBC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Change Stream SQL Injection lab for: sql injection in mongodb change stream", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB Change Stream\", \"Lab Description\": \"A change stream listener converts MongoDB change events to SQL inserts. The document field paths are concatenated directly into SQL without sanitization, allowing injection through crafted collection updates.\", \"Vulnerability name\": \"Change Stream SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cypher-to-SQL Injection scenario. Example: SQL Injection in Neo4j Cypher to SQL Translation", "target": "{\"Lab scenario\": \"SQL Injection in Neo4j Cypher to SQL Translation\", \"Lab Description\": \"A graph analytics platform converts Cypher queries to SQL for relational storage. The node property filters are concatenated directly into SQL, allowing injection through crafted MATCH clauses.\", \"Vulnerability name\": \"Cypher-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Flux-to-SQL Injection scenario. Example: SQL Injection in InfluxDB Flux Query", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Query\", \"Lab Description\": \"A monitoring system converts InfluxDB Flux queries to SQL for long-term storage. The Flux filter expressions are concatenated directly into SQL, allowing injection through crafted predicate functions.\", \"Vulnerability name\": \"Flux-to-SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Continuous Aggregate Injection lab where sql injection in timescaledb continuous aggregate", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate\", \"Lab Description\": \"A time-series platform creates TimescaleDB continuous aggregates with user-provided refresh policies. The policy parameters are concatenated directly into internal queries, allowing injection during materialization.\", \"Vulnerability name\": \"Continuous Aggregate Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A CockroachDB changefeed sends data to a webhook with SQL-defined filters. The filter expressions are concatenated directly into CDC queries, allowing injection through crafted webhook configurations.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook\", \"Lab Description\": \"A CockroachDB changefeed sends data to a webhook with SQL-defined filters. The filter expressions are concatenated directly into CDC queries, allowing injection through crafted webhook configurations.\", \"Vulnerability name\": \"CDC Webhook Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a FTS5 Match Injection lab where sql injection in sqlite fts5 extension", "target": "{\"Lab scenario\": \"SQL Injection in SQLite FTS5 Extension\", \"Lab Description\": \"A mobile app uses SQLite's FTS5 extension with user-provided match expressions. The match parameters are concatenated directly into virtual table queries, allowing injection through crafted search terms.\", \"Vulnerability name\": \"FTS5 Match Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium DuckDB File Import Injection lab for: sql injection in duckdb external file import", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB External File Import\", \"Lab Description\": \"A data analysis tool uses DuckDB's file import functionality with user-provided file names. The file path concatenation allows breaking out of import context to execute arbitrary SQL during file scanning.\", \"Vulnerability name\": \"DuckDB File Import Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a MV Refresh Priority Injection scenario. Example: SQL Injection in Materialized View Refresh Priority", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh Priority\", \"Lab Description\": \"A data warehouse allows setting refresh priorities for materialized views. The priority parameter is concatenated directly into internal refresh queries, allowing injection during view maintenance operations.\", \"Vulnerability name\": \"MV Refresh Priority Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a PolyBase External Table Injection scenario. Example: SQL Injection in SQL Server PolyBase External Table", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server PolyBase External Table\", \"Lab Description\": \"A SQL Server instance creates PolyBase external tables with user-provided location parameters. The location string concatenation allows injection during external data source configuration.\", \"Vulnerability name\": \"PolyBase External Table Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A BigQuery implementation calls remote functions with unsanitized parameters. The function arguments are concatenated directly into SQL queries, allowing injection through HTTP endpoint responses.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Function\", \"Lab Description\": \"A BigQuery implementation calls remote functions with unsanitized parameters. The function arguments are concatenated directly into SQL queries, allowing injection through HTTP endpoint responses.\", \"Vulnerability name\": \"BigQuery Remote Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Snowflake Stage Injection lab for: sql injection in snowflake external stage", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Stage\", \"Lab Description\": \"A Snowflake pipeline creates external stages with user-provided credentials. The credential string concatenation allows injection during stage creation, compromising cloud storage integrations.\", \"Vulnerability name\": \"Snowflake Stage Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Databricks Widget Injection lab for: sql injection in databricks notebook parameter", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Parameter\", \"Lab Description\": \"A Databricks notebook executes SQL queries with widget parameters. The parameter values are concatenated directly into queries without sanitization, allowing injection through notebook execution.\", \"Vulnerability name\": \"Databricks Widget Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Trino Catalog Injection scenario. Example: SQL Injection in Trino Catalog Configuration", "target": "{\"Lab scenario\": \"SQL Injection in Trino Catalog Configuration\", \"Lab Description\": \"A Trino cluster creates catalog configurations with user-provided properties. The property values are concatenated directly into internal queries, allowing injection during catalog initialization.\", \"Vulnerability name\": \"Trino Catalog Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Presto cluster accepts session properties that modify query execution. The property values are concatenated directly into system queries, allowing injection through client session settings.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Session Property\", \"Lab Description\": \"A Presto cluster accepts session properties that modify query execution. The property values are concatenated directly into system queries, allowing injection through client session settings.\", \"Vulnerability name\": \"Presto Session Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a ClickHouse Dictionary Injection scenario. Example: SQL Injection in ClickHouse External Dictionary", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse External Dictionary\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with user-provided source parameters. The configuration values are concatenated directly into dictionary queries, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Druid Context Injection lab for: sql injection in druid sql query context", "target": "{\"Lab scenario\": \"SQL Injection in Druid SQL Query Context\", \"Lab Description\": \"A Druid cluster processes SQL queries with user-provided context parameters. The context values are concatenated directly into native Druid queries, allowing injection through query context settings.\", \"Vulnerability name\": \"Druid Context Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Hive Metastore Injection lab for: sql injection in hive metastore partition filter", "target": "{\"Lab scenario\": \"SQL Injection in Hive Metastore Partition Filter\", \"Lab Description\": \"A Hive metastore processes partition filters with user-provided expressions. The filter values are concatenated directly into metastore queries, allowing injection through partition pruning operations.\", \"Vulnerability name\": \"Hive Metastore Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Impala Admission Control Injection lab for: sql injection in impala admission control", "target": "{\"Lab scenario\": \"SQL Injection in Impala Admission Control\", \"Lab Description\": \"An Impala cluster processes admission control rules with user-provided conditions. The condition expressions are concatenated directly into policy queries, allowing injection through resource allocation rules.\", \"Vulnerability name\": \"Impala Admission Control Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Superset Filter Injection scenario. Example: SQL Injection in Apache Superset Dashboard Filters", "target": "{\"Lab scenario\": \"SQL Injection in Apache Superset Dashboard Filters\", \"Lab Description\": \"A Superset dashboard allows users to save custom filter values that get embedded directly into Jinja-templated SQL queries. The filter value processing fails to properly escape special characters, allowing injection through saved dashboard state.\", \"Vulnerability name\": \"Superset Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQLAlchemy Hybrid Injection lab for: sql injection in sqlalchemy hybrid properties", "target": "{\"Lab scenario\": \"SQL Injection in SQLAlchemy Hybrid Properties\", \"Lab Description\": \"A Flask application uses SQLAlchemy's hybrid_property decorator with unsanitized string formatting. The property expressions get compiled directly into SQL queries, allowing injection through Python attribute access.\", \"Vulnerability name\": \"SQLAlchemy Hybrid Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Prisma Raw Query Injection lab where sql injection in prisma raw query middleware", "target": "{\"Lab scenario\": \"SQL Injection in Prisma Raw Query Middleware\", \"Lab Description\": \"A Next.js application uses Prisma's $queryRaw with unsanitized template literals. The middleware passes raw strings directly to the database driver, allowing injection through GraphQL resolver arguments.\", \"Vulnerability name\": \"Prisma Raw Query Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Hasura GraphQL engine processes event trigger webhook headers with unsanitized SQL interpolation. The header values get embedded directly into trigger processing queries, allowing injection through crafted HTTP headers.", "target": "{\"Lab scenario\": \"SQL Injection in Hasura Event Trigger Headers\", \"Lab Description\": \"A Hasura GraphQL engine processes event trigger webhook headers with unsanitized SQL interpolation. The header values get embedded directly into trigger processing queries, allowing injection through crafted HTTP headers.\", \"Vulnerability name\": \"Hasura Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a DBT Config Injection scenario. Example: SQL Injection in DBT Model Configs", "target": "{\"Lab scenario\": \"SQL Injection in DBT Model Configs\", \"Lab Description\": \"A data transformation pipeline uses user-provided values in dbt model configurations. The config values get interpolated directly into compiled SQL models, allowing injection during dbt runs.\", \"Vulnerability name\": \"DBT Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Dagster Asset Injection lab where sql injection in dagster asset materialization", "target": "{\"Lab scenario\": \"SQL Injection in Dagster Asset Materialization\", \"Lab Description\": \"A Dagster pipeline materializes assets with user-provided metadata. The metadata values get embedded directly into SQL queries during asset recording, allowing injection through op outputs.\", \"Vulnerability name\": \"Dagster Asset Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Airflow URI Injection scenario. Example: SQL Injection in Airflow Connection URI", "target": "{\"Lab scenario\": \"SQL Injection in Airflow Connection URI\", \"Lab Description\": \"An Airflow DAG creates database connections with user-provided URIs. The URI parameters get concatenated directly into connection strings, allowing injection during connection pooling.\", \"Vulnerability name\": \"Airflow URI Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Metabase Subscription Injection scenario. Example: SQL Injection in Metabase Dashboard Subscriptions", "target": "{\"Lab scenario\": \"SQL Injection in Metabase Dashboard Subscriptions\", \"Lab Description\": \"A Metabase instance processes dashboard subscription parameters with unsanitized SQL interpolation. The subscription values get embedded directly into scheduled queries, allowing injection through email alert parameters.\", \"Vulnerability name\": \"Metabase Subscription Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Retool Connection Injection lab where sql injection in retool db connection strings", "target": "{\"Lab scenario\": \"SQL Injection in Retool DB Connection Strings\", \"Lab Description\": \"A Retool application creates database resources with user-provided connection strings. The connection parameters get concatenated directly into JDBC URLs, allowing injection during resource initialization.\", \"Vulnerability name\": \"Retool Connection Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cube.js Pre-Agg Injection scenario. Example: SQL Injection in Cube.js Pre-Aggregation SQL", "target": "{\"Lab scenario\": \"SQL Injection in Cube.js Pre-Aggregation SQL\", \"Lab Description\": \"A Cube.js deployment allows user-provided SQL snippets in pre-aggregation definitions. The SQL gets embedded directly into materialization queries, allowing injection through cube schema definitions.\", \"Vulnerability name\": \"Cube.js Pre-Agg Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Snowflake Header Injection lab where sql injection in snowflake external function headers", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Headers\", \"Lab Description\": \"A Snowflake external function passes HTTP headers directly into SQL queries during result processing. The header values get concatenated without sanitization, allowing injection through API gateway requests.\", \"Vulnerability name\": \"Snowflake Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Looker dashboard uses Liquid templating with user-provided parameters in SQL queries. The parameter interpolation fails to properly escape special characters, allowing injection through dashboard filters.", "target": "{\"Lab scenario\": \"SQL Injection in Looker Liquid Parameters\", \"Lab Description\": \"A Looker dashboard uses Liquid templating with user-provided parameters in SQL queries. The parameter interpolation fails to properly escape special characters, allowing injection through dashboard filters.\", \"Vulnerability name\": \"Looker Liquid Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Tableau Hyper Injection lab where sql injection in tableau hyper extract creation", "target": "{\"Lab scenario\": \"SQL Injection in Tableau Hyper Extract Creation\", \"Lab Description\": \"A Tableau Server creates Hyper extracts with user-provided SQL queries. The query parameters get concatenated directly into extract generation jobs, allowing injection through published data source configurations.\", \"Vulnerability name\": \"Tableau Hyper Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Power BI DirectQuery Injection lab for: sql injection in power bi directquery parameters", "target": "{\"Lab scenario\": \"SQL Injection in Power BI DirectQuery Parameters\", \"Lab Description\": \"A Power BI report uses DirectQuery with user-provided parameter values. The parameters get embedded directly into source queries, allowing injection through report filters.\", \"Vulnerability name\": \"Power BI DirectQuery Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Google Data Studio community connector uses user-provided config values in SQL queries. The configuration parameters get concatenated directly into BigQuery jobs, allowing injection through connector settings.", "target": "{\"Lab scenario\": \"SQL Injection in Google Data Studio Community Connectors\", \"Lab Description\": \"A Google Data Studio community connector uses user-provided config values in SQL queries. The configuration parameters get concatenated directly into BigQuery jobs, allowing injection through connector settings.\", \"Vulnerability name\": \"Data Studio Connector Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Salesforce SOQL Injection lab where sql injection in salesforce apex dynamic soql", "target": "{\"Lab scenario\": \"SQL Injection in Salesforce Apex Dynamic SOQL\", \"Lab Description\": \"A Salesforce Apex controller builds SOQL queries with unsanitized user input. The string concatenation allows breaking out of SOQL context into underlying SQL execution during batch processing.\", \"Vulnerability name\": \"Salesforce SOQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a APEX Report Injection lab where sql injection in oracle apex interactive report sql", "target": "{\"Lab scenario\": \"SQL Injection in Oracle APEX Interactive Report SQL\", \"Lab Description\": \"An Oracle APEX application builds interactive reports with user-modifiable SQL. The source queries get concatenated directly into report generation, allowing injection through column filter parameters.\", \"Vulnerability name\": \"APEX Report Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a HANA Calculation View Injection scenario. Example: SQL Injection in SAP HANA Calculation View Parameters", "target": "{\"Lab scenario\": \"SQL Injection in SAP HANA Calculation View Parameters\", \"Lab Description\": \"A SAP HANA calculation view accepts user-provided parameters in SQL script nodes. The parameter values get embedded directly into script execution, allowing injection through analytical query inputs.\", \"Vulnerability name\": \"HANA Calculation View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cognos Report Injection lab where sql injection in ibm cognos report studio sql", "target": "{\"Lab scenario\": \"SQL Injection in IBM Cognos Report Studio SQL\", \"Lab Description\": \"A Cognos Report Studio report uses dynamic SQL queries with user-provided prompt values. The prompt parameters get concatenated directly into query execution, allowing injection through report filters.\", \"Vulnerability name\": \"Cognos Report Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard MicroStrategy SQL Pass Injection lab for: sql injection in microstrategy report sql pass-through", "target": "{\"Lab scenario\": \"SQL Injection in MicroStrategy Report SQL Pass-Through\", \"Lab Description\": \"A MicroStrategy report uses SQL pass-through with user-modifiable query fragments. The SQL snippets get concatenated directly into dataset queries, allowing injection through attribute forms.\", \"Vulnerability name\": \"MicroStrategy SQL Pass Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Qlik Load Script Injection lab for: sql injection in qlik sense load script", "target": "{\"Lab scenario\": \"SQL Injection in Qlik Sense Load Script\", \"Lab Description\": \"A Qlik Sense app uses user-provided parameters in load script SQL queries. The parameter values get embedded directly into script execution, allowing injection through app variables.\", \"Vulnerability name\": \"Qlik Load Script Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Alteryx Input Tool Injection scenario. Example: SQL Injection in Alteryx Input Data Tool SQL", "target": "{\"Lab scenario\": \"SQL Injection in Alteryx Input Data Tool SQL\", \"Lab Description\": \"An Alteryx workflow uses the Input Data tool with user-provided SQL queries. The query parameters get concatenated directly into tool configuration, allowing injection through workflow parameters.\", \"Vulnerability name\": \"Alteryx Input Tool Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Informatica SQL Transform Injection scenario. Example: SQL Injection in Informatica PowerCenter SQL Transformation", "target": "{\"Lab scenario\": \"SQL Injection in Informatica PowerCenter SQL Transformation\", \"Lab Description\": \"An Informatica workflow uses SQL Transformation with user-provided query fragments. The query portions get concatenated directly into transformation SQL, allowing injection through parameter files.\", \"Vulnerability name\": \"Informatica SQL Transform Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Talend Component Injection scenario. Example: SQL Injection in Talend tDBInput Component", "target": "{\"Lab scenario\": \"SQL Injection in Talend tDBInput Component\", \"Lab Description\": \"A Talend job uses tDBInput components with user-provided query parameters. The parameter values get concatenated directly into component queries, allowing injection through context variables.\", \"Vulnerability name\": \"Talend Component Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Pentaho SQL Step Injection scenario. Example: SQL Injection in Pentaho Data Integration SQL Step", "target": "{\"Lab scenario\": \"SQL Injection in Pentaho Data Integration SQL Step\", \"Lab Description\": \"A Pentaho transformation uses Table Input steps with user-provided SQL fragments. The query portions get concatenated directly into step execution, allowing injection through transformation parameters.\", \"Vulnerability name\": \"Pentaho SQL Step Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Matillion Query Component Injection lab for: sql injection in matillion etl query components", "target": "{\"Lab scenario\": \"SQL Injection in Matillion ETL Query Components\", \"Lab Description\": \"A Matillion job uses Database Query components with user-provided SQL parameters. The parameter values get embedded directly into component queries, allowing injection through job variables.\", \"Vulnerability name\": \"Matillion Query Component Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Fivetran Connector Injection lab where sql injection in fivetran connector configuration", "target": "{\"Lab scenario\": \"SQL Injection in Fivetran Connector Configuration\", \"Lab Description\": \"A Fivetran connector uses user-provided parameters in SQL queries during schema detection. The configuration values get concatenated directly into information schema queries, allowing injection through connector setup.\", \"Vulnerability name\": \"Fivetran Connector Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Stitch Data Source Injection lab for: sql injection in stitch data source sql", "target": "{\"Lab scenario\": \"SQL Injection in Stitch Data Source SQL\", \"Lab Description\": \"A Stitch integration uses user-provided SQL for data extraction. The query parameters get concatenated directly into replication queries, allowing injection through integration settings.\", \"Vulnerability name\": \"Stitch Data Source Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium MongoDB JS Injection lab for: sql injection in mongodb $where clause", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB $where Clause\", \"Lab Description\": \"A Node.js application uses user input directly in MongoDB's $where operator, which allows JavaScript evaluation. Attackers can break out of the query context and execute arbitrary JavaScript.\", \"Vulnerability name\": \"MongoDB JS Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a DynamoDB Expression Injection scenario. Example: SQL Injection in DynamoDB Filter Expression", "target": "{\"Lab scenario\": \"SQL Injection in DynamoDB Filter Expression\", \"Lab Description\": \"An AWS Lambda function builds DynamoDB filter expressions by concatenating user input. The expression evaluation allows breaking out into underlying SQL-like syntax.\", \"Vulnerability name\": \"DynamoDB Expression Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cassandra CQL Injection lab where sql injection in cassandra cql prepared statement bypass", "target": "{\"Lab scenario\": \"SQL Injection in Cassandra CQL Prepared Statement Bypass\", \"Lab Description\": \"A Java application uses string concatenation for Cassandra CQL query parts before preparing statements, allowing injection through crafted parameters.\", \"Vulnerability name\": \"Cassandra CQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A .NET application builds Cosmos DB SQL queries by concatenating user input, allowing injection through crafted WHERE clauses.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB SQL API\", \"Lab Description\": \"A .NET application builds Cosmos DB SQL queries by concatenating user input, allowing injection through crafted WHERE clauses.\", \"Vulnerability name\": \"Cosmos DB SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Firestore REST Injection scenario. Example: SQL Injection in Google Firestore REST API", "target": "{\"Lab scenario\": \"SQL Injection in Google Firestore REST API\", \"Lab Description\": \"A Firebase application uses user input directly in Firestore REST API filter parameters, allowing injection through crafted field paths.\", \"Vulnerability name\": \"Firestore REST Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A JavaScript application builds ArangoDB AQL queries by concatenating user input, allowing injection through crafted FILTER clauses.", "target": "{\"Lab scenario\": \"SQL Injection in ArangoDB AQL Query\", \"Lab Description\": \"A JavaScript application builds ArangoDB AQL queries by concatenating user input, allowing injection through crafted FILTER clauses.\", \"Vulnerability name\": \"ArangoDB AQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a CouchDB Mango Injection scenario. Example: SQL Injection in CouchDB Mango Query", "target": "{\"Lab scenario\": \"SQL Injection in CouchDB Mango Query\", \"Lab Description\": \"A Python application builds CouchDB Mango queries by concatenating user input in selector expressions, allowing injection through crafted JSON.\", \"Vulnerability name\": \"CouchDB Mango Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Influx CLI Injection scenario. Example: SQL Injection in InfluxDB CLI Command", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB CLI Command\", \"Lab Description\": \"A bash script builds InfluxDB CLI commands by concatenating user input, allowing injection through crafted query parameters.\", \"Vulnerability name\": \"Influx CLI Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Neo4j Shell Injection scenario. Example: SQL Injection in Neo4j Cypher Shell", "target": "{\"Lab scenario\": \"SQL Injection in Neo4j Cypher Shell\", \"Lab Description\": \"A Java application builds Neo4j Cypher queries by concatenating user input in shell commands, allowing injection through crafted node properties.\", \"Vulnerability name\": \"Neo4j Shell Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Redshift UNLOAD Injection scenario. Example: SQL Injection in Amazon Redshift UNLOAD Command", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift UNLOAD Command\", \"Lab Description\": \"A data pipeline builds Redshift UNLOAD commands with user-provided S3 paths, allowing injection through crafted credentials strings.\", \"Vulnerability name\": \"Redshift UNLOAD Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A multi-database system dynamically creates PostgreSQL foreign data wrappers with user-controlled OPTIONS parameters. The OPTIONS string is concatenated directly into the FDW creation query without proper escaping, allowing attackers to break out of the wrapper configuration context and execute arbitrary SQL commands when the foreign server is accessed. This is particularly dangerous as it can compromise linked database systems.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL FDW (Foreign Data Wrapper) OPTIONS Clause\", \"Lab Description\": \"A multi-database system dynamically creates PostgreSQL foreign data wrappers with user-controlled OPTIONS parameters. The OPTIONS string is concatenated directly into the FDW creation query without proper escaping, allowing attackers to break out of the wrapper configuration context and execute arbitrary SQL commands when the foreign server is accessed. This is particularly dangerous as it can compromise linked database systems.\", \"Vulnerability name\": \"PostgreSQL FDW OPTIONS Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Snowflake data pipeline uses external functions that pass HTTP headers directly into SQL queries during result processing. The header values are concatenated without proper sanitization when building the function's metadata queries, allowing injection through crafted API gateway requests. This vulnerability is particularly dangerous as it bypasses Snowflake's normal parameterized query protections.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function HEADERS Parameter\", \"Lab Description\": \"A Snowflake data pipeline uses external functions that pass HTTP headers directly into SQL queries during result processing. The header values are concatenated without proper sanitization when building the function's metadata queries, allowing injection through crafted API gateway requests. This vulnerability is particularly dangerous as it bypasses Snowflake's normal parameterized query protections.\", \"Vulnerability name\": \"Snowflake External Function Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An Azure Cosmos DB application uses JavaScript stored procedures that dynamically build SQL queries with user-provided input from the procedure's context object. The input is concatenated directly into the query text without proper sanitization, allowing attackers to break out of the stored procedure's execution context and access unauthorized collections. This vulnerability is particularly dangerous in multi-tenant Cosmos DB implementations.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB Stored Procedure Context\", \"Lab Description\": \"An Azure Cosmos DB application uses JavaScript stored procedures that dynamically build SQL queries with user-provided input from the procedure's context object. The input is concatenated directly into the query text without proper sanitization, allowing attackers to break out of the stored procedure's execution context and access unauthorized collections. This vulnerability is particularly dangerous in multi-tenant Cosmos DB implementations.\", \"Vulnerability name\": \"Cosmos DB Stored Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a BigQuery Scripting Variable Injection lab where sql injection in google bigquery scripting variables", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Scripting Variables\", \"Lab Description\": \"A BigQuery data pipeline uses scripting variables that are interpolated directly into dynamic SQL statements without proper escaping. The variables are set from user-controlled input and used in subsequent query steps, allowing attackers to break out of the variable context and execute arbitrary commands. This vulnerability is particularly dangerous in scheduled BigQuery scripts that process sensitive data.\", \"Vulnerability name\": \"BigQuery Scripting Variable Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Snowflake Time Travel Injection scenario. Example: SQL Injection in Snowflake Time Travel Queries", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Time Travel Queries\", \"Lab Description\": \"A data recovery system builds Snowflake time travel queries with user-controlled timestamp parameters. The timestamps are concatenated directly into AT/ BEFORE clauses without proper validation, allowing attackers to modify query behavior and access historical data beyond their privileges. This vulnerability is particularly dangerous in compliance scenarios where time travel is used for auditing.\", \"Vulnerability name\": \"Snowflake Time Travel Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Databricks notebook uses SQL widgets that accept user input which is then interpolated directly into Spark SQL queries without proper parameterization. The widget values are concatenated into the query text, allowing attackers to break out of the intended query structure. This vulnerability is particularly dangerous in shared notebook environments where multiple users have execution access.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Widget Parameters\", \"Lab Description\": \"A Databricks notebook uses SQL widgets that accept user input which is then interpolated directly into Spark SQL queries without proper parameterization. The widget values are concatenated into the query text, allowing attackers to break out of the intended query structure. This vulnerability is particularly dangerous in shared notebook environments where multiple users have execution access.\", \"Vulnerability name\": \"Databricks Widget Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Trino Catalog Configuration Injection scenario. Example: SQL Injection in Trino Dynamic Catalog Configuration", "target": "{\"Lab scenario\": \"SQL Injection in Trino Dynamic Catalog Configuration\", \"Lab Description\": \"A Trino cluster allows dynamic catalog configuration through user-provided properties. The properties are concatenated directly into catalog initialization queries without proper escaping, allowing attackers to modify catalog behavior and access unauthorized data sources. This vulnerability is particularly dangerous in multi-catalog environments.\", \"Vulnerability name\": \"Trino Catalog Configuration Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a ClickHouse Dictionary Source Injection scenario. Example: SQL Injection in ClickHouse External Dictionary Source", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse External Dictionary Source\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with user-provided source queries. The queries are concatenated directly into dictionary loading logic without proper sanitization, allowing attackers to modify dictionary behavior and access system tables. This vulnerability is particularly dangerous when dictionaries are configured to refresh automatically.\", \"Vulnerability name\": \"ClickHouse Dictionary Source Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Druid Context Parameter Injection scenario. Example: SQL Injection in Druid SQL Query CONTEXT Parameters", "target": "{\"Lab scenario\": \"SQL Injection in Druid SQL Query CONTEXT Parameters\", \"Lab Description\": \"A Druid cluster processes SQL queries with user-provided context parameters that are interpolated directly into native Druid queries. The parameters are used to modify query execution behavior and are concatenated without proper sanitization, allowing attackers to bypass Druid's SQL layer and execute native queries directly.\", \"Vulnerability name\": \"Druid Context Parameter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Hive Metastore Partition Injection lab where sql injection in hive metastore partition clause", "target": "{\"Lab scenario\": \"SQL Injection in Hive Metastore PARTITION Clause\", \"Lab Description\": \"A Hive metastore service processes partition filters with user-provided expressions that are concatenated directly into metastore queries. The expressions are not properly sanitized, allowing attackers to bypass partition pruning restrictions and access unauthorized data partitions. This vulnerability is particularly dangerous in multi-tenant Hive implementations.\", \"Vulnerability name\": \"Hive Metastore Partition Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Impala Admission Control Injection scenario. Example: SQL Injection in Impala Admission Control QUERY_CONDITION", "target": "{\"Lab scenario\": \"SQL Injection in Impala Admission Control QUERY_CONDITION\", \"Lab Description\": \"An Impala cluster processes admission control rules with user-provided conditions that are concatenated directly into policy evaluation queries. The conditions are not properly sanitized, allowing attackers to modify query prioritization and resource allocation. This vulnerability is particularly dangerous in shared Impala clusters with resource constraints.\", \"Vulnerability name\": \"Impala Admission Control Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Presto Session Property Injection lab where sql injection in presto session property values", "target": "{\"Lab scenario\": \"SQL Injection in Presto Session Property Values\", \"Lab Description\": \"A Presto cluster accepts session properties that modify query execution behavior. The property values are concatenated directly into system queries without proper sanitization, allowing attackers to modify query plans and access unauthorized information. This vulnerability is particularly dangerous when session properties are set from user-controlled sources.\", \"Vulnerability name\": \"Presto Session Property Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A CockroachDB changefeed sends data to webhooks with user-provided filter expressions that are concatenated directly into CDC queries. The filters are not properly sanitized, allowing attackers to modify changefeed behavior and access unauthorized data. This vulnerability is particularly dangerous in multi-tenant CockroachDB deployments.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Filters\", \"Lab Description\": \"A CockroachDB changefeed sends data to webhooks with user-provided filter expressions that are concatenated directly into CDC queries. The filters are not properly sanitized, allowing attackers to modify changefeed behavior and access unauthorized data. This vulnerability is particularly dangerous in multi-tenant CockroachDB deployments.\", \"Vulnerability name\": \"CockroachDB CDC Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A data analysis tool uses DuckDB's HTTPFS extension with user-provided URLs that are concatenated directly into remote file access queries. The URLs are not properly sanitized, allowing attackers to break out of the file access context and execute arbitrary SQL commands. This vulnerability is particularly dangerous when accessing untrusted remote data sources.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension URLs\", \"Lab Description\": \"A data analysis tool uses DuckDB's HTTPFS extension with user-provided URLs that are concatenated directly into remote file access queries. The URLs are not properly sanitized, allowing attackers to break out of the file access context and execute arbitrary SQL commands. This vulnerability is particularly dangerous when accessing untrusted remote data sources.\", \"Vulnerability name\": \"DuckDB HTTPFS URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Materialized View Refresh Injection lab for: sql injection in materialized view refresh options", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View REFRESH OPTIONS\", \"Lab Description\": \"A data warehouse allows setting refresh options for materialized views with user-provided values that are concatenated directly into refresh queries. The options are not properly sanitized, allowing attackers to modify refresh behavior and execute arbitrary commands during view maintenance operations. This vulnerability is particularly dangerous in automated refresh scenarios.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Oracle Spatial Injection scenario. Example: SQL Injection in Oracle SDO_GEOMETRY Constructor", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_GEOMETRY Constructor\", \"Lab Description\": \"A GIS application builds Oracle spatial queries using unsanitized user input in SDO_GEOMETRY constructors. The WKT (Well-Known Text) parameters are concatenated directly into spatial queries, allowing injection through crafted geometry definitions that break out of the spatial function context.\", \"Vulnerability name\": \"Oracle Spatial Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL Server HierarchyId Injection lab for: sql injection in sql server hierarchyid parse()", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server HierarchyId Parse()\", \"Lab Description\": \"A hierarchical data application uses unsanitized input in SQL Server's HierarchyId.Parse() function. The string representation of hierarchy paths is concatenated directly into queries, allowing injection through crafted path strings that break out of the hierarchy context.\", \"Vulnerability name\": \"SQL Server HierarchyId Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a PostgreSQL JSONB Path Injection scenario. Example: SQL Injection in PostgreSQL JSONB Path Queries", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL JSONB Path Queries\", \"Lab Description\": \"A document store application builds PostgreSQL JSONB path queries with unsanitized user input. The path expressions are concatenated directly into jsonb_path_query functions, allowing injection through crafted JSON path strings that break out of the document context.\", \"Vulnerability name\": \"PostgreSQL JSONB Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A schema-migration tool dynamically creates MySQL generated columns using unsanitized input in the generation expression. The expressions are concatenated directly into ALTER TABLE statements, allowing injection during column creation that persists in the schema.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Generated Columns\", \"Lab Description\": \"A schema-migration tool dynamically creates MySQL generated columns using unsanitized input in the generation expression. The expressions are concatenated directly into ALTER TABLE statements, allowing injection during column creation that persists in the schema.\", \"Vulnerability name\": \"MySQL Generated Column Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL Server Graph MATCH Injection lab for: sql injection in sql server graph match clauses", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph MATCH Clauses\", \"Lab Description\": \"A graph analytics application builds SQL Server graph queries with unsanitized input in MATCH clauses. The node/edge patterns are concatenated directly into queries, allowing injection through crafted graph patterns that break out of the graph context.\", \"Vulnerability name\": \"SQL Server Graph MATCH Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Snowflake Stored Procedure Injection lab where sql injection in snowflake stored procedure dynamic sql", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Stored Procedure Dynamic SQL\", \"Lab Description\": \"A Snowflake data pipeline uses JavaScript stored procedures that build dynamic SQL with unsanitized input. The input is concatenated directly into execute immediate statements, allowing injection through crafted strings that bypass Snowflake's normal parameterization protections.\", \"Vulnerability name\": \"Snowflake Stored Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium BigQuery Scripting Control Injection lab for: sql injection in google bigquery scripting control structures", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Scripting Control Structures\", \"Lab Description\": \"A BigQuery scripting workflow uses unsanitized input in IF/CASE control structures that are interpolated into dynamic SQL. The conditions are concatenated directly into script logic, allowing injection through crafted boolean expressions that modify control flow.\", \"Vulnerability name\": \"BigQuery Scripting Control Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Synapse OPENROWSET Injection lab where sql injection in azure synapse serverless openrowset", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Serverless OPENROWSET\", \"Lab Description\": \"A Synapse analytics pipeline uses OPENROWSET with unsanitized input for file paths or format options. The parameters are concatenated directly into external table queries, allowing injection through crafted file specifications that break out of the data loading context.\", \"Vulnerability name\": \"Synapse OPENROWSET Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Databricks notebook uses Delta Lake time travel with unsanitized version/timestamp parameters. The values are concatenated directly into table version queries, allowing injection through crafted time specifications that access unauthorized data versions.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Delta Lake Time Travel\", \"Lab Description\": \"A Databricks notebook uses Delta Lake time travel with unsanitized version/timestamp parameters. The values are concatenated directly into table version queries, allowing injection through crafted time specifications that access unauthorized data versions.\", \"Vulnerability name\": \"Delta Lake Time Travel Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Redshift Spectrum Injection lab for: sql injection in amazon redshift spectrum external tables", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift Spectrum External Tables\", \"Lab Description\": \"A Redshift cluster defines Spectrum external tables with unsanitized input in table properties or location paths. The parameters are concatenated directly into DDL statements, allowing injection when the external tables are queried.\", \"Vulnerability name\": \"Redshift Spectrum Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Snowflake COPY Options Injection lab where sql injection in snowflake external stage copy options", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Stage COPY Options\", \"Lab Description\": \"A Snowflake pipeline uses COPY INTO commands with user-controlled stage options. The options are concatenated directly into load/unload operations, allowing injection through crafted file format specifications that modify data loading behavior.\", \"Vulnerability name\": \"Snowflake COPY Options Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Spanner DML Returning Injection scenario. Example: SQL Injection in Google Cloud Spanner DML Returning Clause", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner DML Returning Clause\", \"Lab Description\": \"A Spanner application builds DML statements with unsanitized input in RETURNING clauses. The column expressions are concatenated directly into mutation operations, allowing injection that persists after data modification.\", \"Vulnerability name\": \"Spanner DML Returning Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Kusto Embedded SQL Injection lab for: sql injection in azure data explorer kql embedded sql", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer KQL Embedded SQL\", \"Lab Description\": \"A Kusto (KQL) query uses embedded SQL with unsanitized input. The SQL fragments are concatenated directly into KQL execute_sql() functions, allowing injection through crafted SQL that breaks out of the KQL context.\", \"Vulnerability name\": \"Kusto Embedded SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Druid cluster processes native queries containing embedded SQL fragments with unsanitized input. The SQL portions are concatenated directly into query planning, allowing injection that bypasses Druid's usual SQL layer protections.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid Native Query SQL Fragments\", \"Lab Description\": \"A Druid cluster processes native queries containing embedded SQL fragments with unsanitized input. The SQL portions are concatenated directly into query planning, allowing injection that bypasses Druid's usual SQL layer protections.\", \"Vulnerability name\": \"Druid Native Query Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Flux-to-SQL Injection scenario. Example: SQL Injection in InfluxDB Flux to SQL Conversion", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux to SQL Conversion\", \"Lab Description\": \"A monitoring system converts InfluxDB Flux queries to SQL with unsanitized input in filter expressions. The Flux predicates are concatenated directly into SQL WHERE clauses, allowing injection through crafted filter logic.\", \"Vulnerability name\": \"Flux-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A time-series platform creates TimescaleDB continuous aggregates with user-provided refresh policies. The policy parameters are concatenated directly into materialization queries, allowing injection during automated refreshes.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregates Materialization\", \"Lab Description\": \"A time-series platform creates TimescaleDB continuous aggregates with user-provided refresh policies. The policy parameters are concatenated directly into materialization queries, allowing injection during automated refreshes.\", \"Vulnerability name\": \"Timescale Materialization Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A CockroachDB changefeed uses user-provided filters that are concatenated directly into CDC queries. The filters allow injection that persists across change events, compromising all captured data.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Change Data Capture Filters\", \"Lab Description\": \"A CockroachDB changefeed uses user-provided filters that are concatenated directly into CDC queries. The filters allow injection that persists across change events, compromising all captured data.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard DuckDB HTTP Header Injection lab for: sql injection in duckdb httpfs extension headers", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline uses DuckDB's HTTPFS extension with user-provided HTTP headers. The headers are concatenated directly into remote requests, allowing injection when accessing cloud storage.\", \"Vulnerability name\": \"DuckDB HTTP Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A database creates materialized view indexes with user-provided predicate expressions. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Index Predicates\", \"Lab Description\": \"A database creates materialized view indexes with user-provided predicate expressions. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.\", \"Vulnerability name\": \"Materialized View Index Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a PolyBase Location Injection lab where sql injection in sql server polybase external table locations", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server PolyBase External Table Locations\", \"Lab Description\": \"A SQL Server instance creates PolyBase external tables with user-provided location paths. The paths are concatenated directly into DDL statements, allowing injection when querying external data.\", \"Vulnerability name\": \"PolyBase Location Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard BigQuery Remote Function Injection lab for: sql injection in google bigquery remote function responses", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Remote Function Responses\", \"Lab Description\": \"A BigQuery implementation calls remote functions where the HTTP response is interpolated directly into SQL. Malicious function responses can inject SQL that bypasses BigQuery's normal parameterization.\", \"Vulnerability name\": \"BigQuery Remote Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Snowflake Function Header Injection lab where sql injection in snowflake external function response headers", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Response Headers\", \"Lab Description\": \"A Snowflake external function processes HTTP response headers as SQL values. Malicious headers can inject SQL that persists during the entire function execution context.\", \"Vulnerability name\": \"Snowflake Function Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Unity Catalog Property Injection lab where sql injection in databricks unity catalog table properties", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Table Properties\", \"Lab Description\": \"A Databricks environment sets Unity Catalog table properties with user-provided values. The properties are concatenated directly into catalog metadata queries, allowing injection during table operations.\", \"Vulnerability name\": \"Unity Catalog Property Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Trino cluster defines system access control rules with user-provided conditions. The conditions are concatenated directly into authorization queries, allowing injection during permission checks.", "target": "{\"Lab scenario\": \"SQL Injection in Trino System Access Control Rules\", \"Lab Description\": \"A Trino cluster defines system access control rules with user-provided conditions. The conditions are concatenated directly into authorization queries, allowing injection during permission checks.\", \"Vulnerability name\": \"Trino Authorization Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Presto cluster configures resource group selectors with user-provided expressions. The expressions are concatenated directly into resource allocation queries, allowing injection during query scheduling.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Resource Group Selectors\", \"Lab Description\": \"A Presto cluster configures resource group selectors with user-provided expressions. The expressions are concatenated directly into resource allocation queries, allowing injection during query scheduling.\", \"Vulnerability name\": \"Presto Resource Group Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a ClickHouse UDF Injection lab where sql injection in clickhouse user-defined function sql", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse User-Defined Function SQL\", \"Lab Description\": \"A ClickHouse cluster creates SQL UDFs with user-provided function bodies. The SQL is concatenated directly into function creation, allowing persistent injection that affects all queries using the function.\", \"Vulnerability name\": \"ClickHouse UDF Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a PostgreSQL Range Injection lab where sql injection in postgresql range type constructor", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL Range Type Constructor\", \"Lab Description\": \"A scheduling application builds PostgreSQL range queries (tsrange, numrange) with unsanitized user input. Attackers can break out of the range context through specially crafted boundary expressions that evaluate to SQL commands.\", \"Vulnerability name\": \"PostgreSQL Range Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium MySQL SRID Injection lab for: sql injection in mysql spatial reference system parameters", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Spatial Reference System Parameters\", \"Lab Description\": \"A GIS system builds MySQL spatial queries with dynamic SRID (Spatial Reference System Identifier) parameters. The numeric SRID values are concatenated directly into ST_Transform calls, allowing injection through mathematical expressions.\", \"Vulnerability name\": \"MySQL SRID Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL Server Temporal Injection scenario. Example: SQL Injection in SQL Server Temporal Table AS OF Clause", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Temporal Table AS OF Clause\", \"Lab Description\": \"A historical data application uses SQL Server temporal tables with dynamic AS OF timestamps. The timestamp strings are concatenated directly into temporal queries, allowing injection through crafted date literals.\", \"Vulnerability name\": \"SQL Server Temporal Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Oracle Text Index Injection lab for: sql injection in oracle text index parameters", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text INDEX PARAMETERS\", \"Lab Description\": \"A document search system creates Oracle Text indexes with dynamic parameters. The parameter strings are concatenated into index DDL, allowing persistent injection that affects all queries using the index.\", \"Vulnerability name\": \"Oracle Text Index Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Snowflake Tag Policy Injection scenario. Example: SQL Injection in Snowflake Tag-Based Masking Policies", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Tag-Based Masking Policies\", \"Lab Description\": \"A Snowflake data governance system creates tag-based masking policies with dynamic conditions. The policy expressions are concatenated directly into CREATE MASKING POLICY statements, allowing injection through crafted tag values.\", \"Vulnerability name\": \"Snowflake Tag Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a BigQuery ARRAY_AGG Injection scenario. Example: SQL Injection in Google BigQuery ARRAY_AGG Order By Clause", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery ARRAY_AGG Order By Clause\", \"Lab Description\": \"A analytics dashboard builds BigQuery ARRAY_AGG functions with dynamic ORDER BY clauses. The sort expressions are concatenated directly into array aggregation, allowing injection through crafted ordering specifications.\", \"Vulnerability name\": \"BigQuery ARRAY_AGG Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Synapse pipeline uses CETAS (CREATE EXTERNAL TABLE AS SELECT) with dynamic output paths. The file locations are concatenated directly into DDL, allowing injection through crafted storage paths.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS External File Paths\", \"Lab Description\": \"A Synapse pipeline uses CETAS (CREATE EXTERNAL TABLE AS SELECT) with dynamic output paths. The file locations are concatenated directly into DDL, allowing injection through crafted storage paths.\", \"Vulnerability name\": \"Synapse CETAS Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Databricks job runs Delta Lake VACUUM commands with dynamic retention periods. The duration strings are concatenated directly into vacuum operations, allowing injection through crafted time expressions.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Delta Lake VACUUM Retention\", \"Lab Description\": \"A Databricks job runs Delta Lake VACUUM commands with dynamic retention periods. The duration strings are concatenated directly into vacuum operations, allowing injection through crafted time expressions.\", \"Vulnerability name\": \"Delta Lake VACUUM Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Redshift SUPER Path Injection lab where sql injection in amazon redshift super type path queries", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift SUPER Type Path Queries\", \"Lab Description\": \"A Redshift application queries SUPER type columns with dynamic path expressions. The JSON paths are concatenated directly into queries, allowing injection through crafted path syntax.\", \"Vulnerability name\": \"Redshift SUPER Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Snowflake pipeline refreshes external tables with dynamic parameters. The refresh options are concatenated directly into ALTER EXTERNAL TABLE statements, allowing injection during metadata updates.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh\", \"Lab Description\": \"A Snowflake pipeline refreshes external tables with dynamic parameters. The refresh options are concatenated directly into ALTER EXTERNAL TABLE statements, allowing injection during metadata updates.\", \"Vulnerability name\": \"Snowflake External Table Refresh Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Spanner Interleave Injection scenario. Example: SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT\", \"Lab Description\": \"A Spanner schema migration tool builds INTERLEAVE IN PARENT clauses with dynamic table names. The parent references are concatenated directly into DDL, allowing injection during table creation.\", \"Vulnerability name\": \"Spanner Interleave Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Kusto External Schema Injection lab where sql injection in azure data explorer external table schema", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer External Table Schema\", \"Lab Description\": \"A Kusto cluster creates external tables with dynamic schema definitions. The schema expressions are concatenated directly into .create external table commands, allowing injection during schema inference.\", \"Vulnerability name\": \"Kusto External Schema Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An application builds Elasticsearch ODBC connection strings with dynamic properties. The property values are concatenated directly into connection attempts, allowing injection during driver initialization.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An application builds Elasticsearch ODBC connection strings with dynamic properties. The property values are concatenated directly into connection attempts, allowing injection during driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Connection Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Druid Identifier Escape Injection lab where sql injection in apache druid sql identifier escaping", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A Druid cluster processes SQL queries with dynamic identifier escaping. The escape sequences are concatenated directly into query planning, allowing injection through crafted identifier patterns.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Flux Yield Injection lab where sql injection in influxdb flux yield parameter", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Yield Parameter\", \"Lab Description\": \"A monitoring system uses InfluxDB Flux with dynamic yield names. The yield identifiers are concatenated directly into Flux scripts, allowing injection during result processing.\", \"Vulnerability name\": \"Flux Yield Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Timescale Compression Injection scenario. Example: SQL Injection in TimescaleDB Compression Settings", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Settings\", \"Lab Description\": \"A time-series platform alters TimescaleDB compression with dynamic parameters. The configuration strings are concatenated directly into ALTER TABLE statements, allowing injection during compression operations.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A CockroachDB application creates partial indexes with dynamic WHERE clauses. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Partial Index Predicates\", \"Lab Description\": \"A CockroachDB application creates partial indexes with dynamic WHERE clauses. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.\", \"Vulnerability name\": \"Cockroach Partial Index Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a DuckDB S3 Endpoint Injection lab where sql injection in duckdb s3 endpoint configuration", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into S3 settings, allowing injection during cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A database creates materialized views with dynamic WITH NO DATA options. The clause expressions are concatenated directly into view creation, allowing injection during initial population.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A database creates materialized views with dynamic WITH NO DATA options. The clause expressions are concatenated directly into view creation, allowing injection during initial population.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL Ledger View Injection lab for: sql injection in sql server ledger view options", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation, allowing injection during cryptographic verification.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium BigQuery Wildcard Injection lab for: sql injection in google bigquery wildcard table patterns", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses, allowing injection through crafted glob expressions.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Snowflake Session Default Injection lab where sql injection in snowflake session parameter defaults", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A Snowflake configuration tool sets session parameters with dynamic defaults. The default expressions are concatenated directly into ALTER SESSION statements, allowing injection during session initialization.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Databricks Warehouse Config Injection scenario. Example: SQL Injection in Databricks SQL Warehouse Configurations", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation, allowing injection during cluster startup.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Trino cluster creates catalog functions with dynamic namespaces. The namespace paths are concatenated directly into function registration, allowing injection during UDF execution.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Catalog Function Namespaces\", \"Lab Description\": \"A Trino cluster creates catalog functions with dynamic namespaces. The namespace paths are concatenated directly into function registration, allowing injection during UDF execution.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Presto Table Function Injection scenario. Example: SQL Injection in Presto Table Function Parameters", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Parameters\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The parameter strings are concatenated directly into function calls, allowing injection during table generation.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a ClickHouse Dictionary URL Injection scenario. Example: SQL Injection in ClickHouse Dictionary Source URLs", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a PostgreSQL NOTIFY Injection scenario. Example: SQL Injection in PostgreSQL NOTIFY Channel Payload", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL NOTIFY Channel Payload\", \"Lab Description\": \"A real-time alert system uses PostgreSQL's NOTIFY command with unsanitized channel payloads. Attackers can inject SQL through crafted notification messages that execute when clients LISTEN to the channel, bypassing typical query defenses.\", \"Vulnerability name\": \"PostgreSQL NOTIFY Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a MySQL Separator Injection scenario. Example: SQL Injection in MySQL GROUP_CONCAT Separator", "target": "{\"Lab scenario\": \"SQL Injection in MySQL GROUP_CONCAT Separator\", \"Lab Description\": \"A reporting dashboard dynamically sets GROUP_CONCAT separators with user input. The separator string is concatenated directly into queries, allowing injection during result aggregation.\", \"Vulnerability name\": \"MySQL Separator Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL Server Delimiter Injection scenario. Example: SQL Injection in SQL Server STRING_AGG Delimiter", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server STRING_AGG Delimiter\", \"Lab Description\": \"A data export feature uses STRING_AGG with dynamic delimiters. The unsanitized delimiter parameter allows breaking out of string context into SQL execution.\", \"Vulnerability name\": \"SQL Server Delimiter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Oracle LISTAGG Injection lab where sql injection in oracle listagg delimiter clause", "target": "{\"Lab scenario\": \"SQL Injection in Oracle LISTAGG Delimiter Clause\", \"Lab Description\": \"An Oracle APEX application builds LISTAGG queries with user-controlled delimiters. The delimiter clause is concatenated directly into analytic function execution.\", \"Vulnerability name\": \"Oracle LISTAGG Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Snowflake data pipeline uses ARRAY_TO_STRING with dynamic delimiters. The delimiter parameter is embedded directly into JavaScript UDFs, allowing injection during array serialization.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake ARRAY_TO_STRING Delimiter\", \"Lab Description\": \"A Snowflake data pipeline uses ARRAY_TO_STRING with dynamic delimiters. The delimiter parameter is embedded directly into JavaScript UDFs, allowing injection during array serialization.\", \"Vulnerability name\": \"Snowflake Array Serialization Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A BigQuery ML model uses FORMAT() with dynamic format patterns. The format string is concatenated directly into query execution, allowing injection during type conversion.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery FORMAT() Pattern\", \"Lab Description\": \"A BigQuery ML model uses FORMAT() with dynamic format patterns. The format string is concatenated directly into query execution, allowing injection during type conversion.\", \"Vulnerability name\": \"BigQuery Format String Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Synapse JSON Path Injection lab for: sql injection in azure synapse openjson path", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse OPENJSON Path\", \"Lab Description\": \"A Synapse pipeline processes JSON data with dynamic path expressions. The JSON path is concatenated directly into OPENJSON calls, allowing injection during document parsing.\", \"Vulnerability name\": \"Synapse JSON Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Databricks JSON Field Injection scenario. Example: SQL Injection in Databricks JSON_TUPLE Function", "target": "{\"Lab scenario\": \"SQL Injection in Databricks JSON_TUPLE Function\", \"Lab Description\": \"A Databricks notebook processes JSON records with dynamic field names. The field path is concatenated directly into JSON_TUPLE calls, allowing injection during struct extraction.\", \"Vulnerability name\": \"Databricks JSON Field Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Redshift JSON Path Injection lab for: sql injection in redshift json_extract_path_text path", "target": "{\"Lab scenario\": \"SQL Injection in Redshift JSON_EXTRACT_PATH_TEXT Path\", \"Lab Description\": \"A Redshift analytics dashboard builds JSON path queries with user input. The path parameter is concatenated directly into JSON extraction functions.\", \"Vulnerability name\": \"Redshift JSON Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Snowflake JSON Parse Injection lab where sql injection in snowflake parse_json path", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake PARSE_JSON Path\", \"Lab Description\": \"A Snowflake data transformation uses PARSE_JSON with dynamic path expressions. The path is concatenated directly into JSON parsing logic.\", \"Vulnerability name\": \"Snowflake JSON Parse Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a CockroachDB Range Metadata Injection scenario. Example: SQL Injection in CockroachDB SHOW RANGES Table Pattern", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB SHOW RANGES Table Pattern\", \"Lab Description\": \"A CockroachDB monitoring tool uses SHOW RANGES with dynamic table patterns. The pattern is concatenated directly into range metadata queries.\", \"Vulnerability name\": \"CockroachDB Range Metadata Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a DuckDB CSV Parsing Injection scenario. Example: SQL Injection in DuckDB READ_CSV Auto-Detect Parameter", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB READ_CSV Auto-Detect Parameter\", \"Lab Description\": \"A DuckDB data loader uses READ_CSV with dynamic type detection parameters. The auto-detection clause is concatenated directly into file parsing logic.\", \"Vulnerability name\": \"DuckDB CSV Parsing Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Materialize CDC Injection lab where sql injection in materialize tail timestamp", "target": "{\"Lab scenario\": \"SQL Injection in Materialize TAIL Timestamp\", \"Lab Description\": \"A Materialize streaming pipeline uses TAIL with dynamic timestamp filters. The timestamp expression is concatenated directly into change data capture queries.\", \"Vulnerability name\": \"Materialize CDC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SingleStore Segment Injection lab where sql injection in singlestore columnstore segment filter", "target": "{\"Lab scenario\": \"SQL Injection in SingleStore Columnstore Segment Filter\", \"Lab Description\": \"A SingleStore analytics platform builds columnstore segment filters with user input. The filter expressions are concatenated directly into segment pruning logic.\", \"Vulnerability name\": \"SingleStore Segment Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Yugabyte Explain Injection lab where sql injection in yugabytedb ysql explain format", "target": "{\"Lab scenario\": \"SQL Injection in YugabyteDB YSQL EXPLAIN Format\", \"Lab Description\": \"A YugabyteDB performance tool uses EXPLAIN with dynamic format parameters. The format string is concatenated directly into query plan generation.\", \"Vulnerability name\": \"Yugabyte Explain Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a PostgreSQL COPY Command Injection lab where sql injection in postgresql copy to program", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL COPY TO PROGRAM\", \"Lab Description\": \"A data export feature uses PostgreSQL's COPY TO PROGRAM command with dynamic filenames. The program argument is concatenated directly into the command, allowing command injection through crafted filenames.\", \"Vulnerability name\": \"PostgreSQL COPY Command Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Develop a MySQL Local File Injection lab where sql injection in mysql load data local infile", "target": "{\"Lab scenario\": \"SQL Injection in MySQL LOAD DATA LOCAL INFILE\", \"Lab Description\": \"A data import tool uses LOAD DATA LOCAL INFILE with dynamic path parameters. The path is concatenated directly into the statement, allowing file system access through path traversal.\", \"Vulnerability name\": \"MySQL Local File Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a SQL Server BULK INSERT XXE scenario. Example: SQL Injection in SQL Server BULK INSERT FORMATFILE", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server BULK INSERT FORMATFILE\", \"Lab Description\": \"A data migration system uses BULK INSERT with dynamic format files. The format file path is concatenated directly into the command, allowing arbitrary file reads through XML external entities.\", \"Vulnerability name\": \"SQL Server BULK INSERT XXE\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A document management system uses UTL_FILE with dynamic paths. The directory object and filename parameters are concatenated directly into procedure calls, allowing file system access.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle UTL_FILE File Operations\", \"Lab Description\": \"A document management system uses UTL_FILE with dynamic paths. The directory object and filename parameters are concatenated directly into procedure calls, allowing file system access.\", \"Vulnerability name\": \"Oracle UTL_FILE Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Create a challenge where: A Snowflake external function passes HTTP headers directly into SQL context. The header values are concatenated into metadata queries without sanitization, allowing injection through crafted API requests.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function HTTP Headers\", \"Lab Description\": \"A Snowflake external function passes HTTP headers directly into SQL context. The header values are concatenated into metadata queries without sanitization, allowing injection through crafted API requests.\", \"Vulnerability name\": \"Snowflake Header Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a BigQuery Script Variable Injection lab where sql injection in bigquery scripting variable declarations", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Scripting Variable Declarations\", \"Lab Description\": \"A BigQuery script uses dynamic variable declarations with user input. The variable values are concatenated directly into DECLARE statements, allowing injection during script initialization.\", \"Vulnerability name\": \"BigQuery Script Variable Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a high Synapse CETAS Location Injection lab for: sql injection in azure synapse cetas external location", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS External Location\", \"Lab Description\": \"A Synapse pipeline creates external tables with dynamic storage locations. The location path is concatenated directly into CETAS statements, allowing injection during table creation.\", \"Vulnerability name\": \"Synapse CETAS Location Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A Databricks notebook uses widgets with dynamic default values that flow into SQL queries. The widget values are concatenated directly into query text without parameterization.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Widget Default Values\", \"Lab Description\": \"A Databricks notebook uses widgets with dynamic default values that flow into SQL queries. The widget values are concatenated directly into query text without parameterization.\", \"Vulnerability name\": \"Databricks Widget Default Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Trino Catalog Property Injection lab where sql injection in trino catalog property values", "target": "{\"Lab scenario\": \"SQL Injection in Trino Catalog Property Values\", \"Lab Description\": \"A Trino cluster configuration tool sets catalog properties with dynamic values. The property values are concatenated directly into catalog configuration files, allowing injection during catalog initialization.\", \"Vulnerability name\": \"Trino Catalog Property Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a Presto Session Property Injection lab where sql injection in presto session property values", "target": "{\"Lab scenario\": \"SQL Injection in Presto Session Property Values\", \"Lab Description\": \"A Presto client application sets session properties with dynamic values. The property values are concatenated directly into session initialization queries.\", \"Vulnerability name\": \"Presto Session Property Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a ClickHouse Dictionary Query Injection scenario. Example: SQL Injection in ClickHouse External Dictionary Queries", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse External Dictionary Queries\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source queries. The query text is concatenated directly into dictionary definitions, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary Query Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A Druid cluster processes SQL queries with dynamic context parameters. The parameter values are concatenated directly into native query conversion, allowing injection during query planning.", "target": "{\"Lab scenario\": \"SQL Injection in Druid SQL Query Context Parameters\", \"Lab Description\": \"A Druid cluster processes SQL queries with dynamic context parameters. The parameter values are concatenated directly into native query conversion, allowing injection during query planning.\", \"Vulnerability name\": \"Druid Context Parameter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Hive Metastore Property Injection lab where sql injection in hive metastore table property values", "target": "{\"Lab scenario\": \"SQL Injection in Hive Metastore Table Property Values\", \"Lab Description\": \"A Hive metastore service accepts dynamic table properties during table creation. The property values are concatenated directly into metastore queries, allowing injection during DDL operations.\", \"Vulnerability name\": \"Hive Metastore Property Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Impala Query Option Injection lab for: sql injection in impala query option settings", "target": "{\"Lab scenario\": \"SQL Injection in Impala Query Option Settings\", \"Lab Description\": \"An Impala client application sets query options with dynamic values. The option values are concatenated directly into query preparation, allowing injection during execution planning.\", \"Vulnerability name\": \"Impala Query Option Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a CockroachDB Zone Config Injection scenario. Example: SQL Injection in CockroachDB Zone Configuration Values", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Zone Configuration Values\", \"Lab Description\": \"A CockroachDB cluster management tool sets zone configurations with dynamic values. The configuration values are concatenated directly into ALTER statements, allowing injection during replication changes.\", \"Vulnerability name\": \"CockroachDB Zone Config Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium DuckDB HTTP Header Injection lab for: sql injection in duckdb httpfs extension headers", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A DuckDB query uses HTTPFS with dynamic request headers. The header values are concatenated directly into HTTP requests, allowing injection during remote file operations.\", \"Vulnerability name\": \"DuckDB HTTP Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a high Materialized View Priority Injection lab for: sql injection in materialized view refresh priority", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh Priority\", \"Lab Description\": \"A data warehouse sets materialized view refresh priorities with dynamic values. The priority values are concatenated directly into refresh scheduling queries.\", \"Vulnerability name\": \"Materialized View Priority Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a PolyBase Option Injection scenario. Example: SQL Injection in SQL Server PolyBase External Table Options", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server PolyBase External Table Options\", \"Lab Description\": \"A SQL Server instance creates PolyBase external tables with dynamic options. The option values are concatenated directly into table creation, allowing injection during external data access.\", \"Vulnerability name\": \"PolyBase Option Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A BigQuery implementation calls remote functions where the HTTP response is interpolated directly into SQL. Malicious function responses can inject SQL that bypasses BigQuery's normal parameterization.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Remote Function Responses\", \"Lab Description\": \"A BigQuery implementation calls remote functions where the HTTP response is interpolated directly into SQL. Malicious function responses can inject SQL that bypasses BigQuery's normal parameterization.\", \"Vulnerability name\": \"BigQuery Remote Response Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Develop a Snowflake COPY Option Injection lab where sql injection in snowflake external stage copy options", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Stage COPY Options\", \"Lab Description\": \"A Snowflake pipeline uses COPY INTO commands with dynamic stage options. The options are concatenated directly into load/unload operations, allowing injection during file operations.\", \"Vulnerability name\": \"Snowflake COPY Option Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a Databricks Comment Injection scenario. Example: SQL Injection in Databricks Unity Catalog Table Comments", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Table Comments\", \"Lab Description\": \"A Databricks environment sets table comments with dynamic values. The comment text is concatenated directly into catalog metadata queries, allowing injection during table operations.\", \"Vulnerability name\": \"Databricks Comment Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Trino cluster implements function security with dynamic authorization checks. The check expressions are concatenated directly into function execution, allowing injection during privilege verification.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Authorization Checks\", \"Lab Description\": \"A Trino cluster implements function security with dynamic authorization checks. The check expressions are concatenated directly into function execution, allowing injection during privilege verification.\", \"Vulnerability name\": \"Trino Function Authorization Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A Presto cluster configures resource groups with dynamic selector conditions. The conditions are concatenated directly into query routing logic, allowing injection during scheduling.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Resource Group Selector Conditions\", \"Lab Description\": \"A Presto cluster configures resource groups with dynamic selector conditions. The conditions are concatenated directly into query routing logic, allowing injection during scheduling.\", \"Vulnerability name\": \"Presto Resource Selector Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A ClickHouse cluster configures dictionary sources with dynamic credentials. The credential strings are concatenated directly into dictionary definitions, allowing injection during data loading.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source Credentials\", \"Lab Description\": \"A ClickHouse cluster configures dictionary sources with dynamic credentials. The credential strings are concatenated directly into dictionary definitions, allowing injection during data loading.\", \"Vulnerability name\": \"ClickHouse Credential Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "I need a high Druid Supervisor Spec Injection lab for: sql injection in druid supervisor spec templates", "target": "{\"Lab scenario\": \"SQL Injection in Druid Supervisor Spec Templates\", \"Lab Description\": \"A Druid cluster creates ingestion supervisors with dynamic spec templates. The template values are concatenated directly into supervisor JSON, allowing injection during data ingestion.\", \"Vulnerability name\": \"Druid Supervisor Spec Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a high PostgreSQL Security Label Injection lab for: sql injection in postgresql security label", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL SECURITY LABEL\", \"Lab Description\": \"A security labeling system uses PostgreSQL's SECURITY LABEL command with dynamic label values. The label text is concatenated directly into security policy enforcement, allowing injection during label assignment to database objects.\", \"Vulnerability name\": \"PostgreSQL Security Label Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium MySQL X Plugin ID Injection lab for: sql injection in mysql x plugin document ids", "target": "{\"Lab scenario\": \"SQL Injection in MySQL X Plugin Document IDs\", \"Lab Description\": \"A document store using MySQL X Protocol processes CRUD operations with dynamic document _id fields. The document identifiers are concatenated directly into NoSQL-style queries that translate to SQL, allowing injection through crafted IDs.\", \"Vulnerability name\": \"MySQL X Plugin ID Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A graph analytics application uses SHORTEST_PATH with dynamic node filters. The filter expressions are concatenated directly into graph traversal queries, allowing injection during path calculation.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph MATCH Shortest Path\", \"Lab Description\": \"A graph analytics application uses SHORTEST_PATH with dynamic node filters. The filter expressions are concatenated directly into graph traversal queries, allowing injection during path calculation.\", \"Vulnerability name\": \"SQL Server Graph Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Oracle Highlight Offset Injection lab for: sql injection in oracle text highlight offset parameters", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text HIGHLIGHT Offset Parameters\", \"Lab Description\": \"A document search application uses CTX_DOC.HIGHLIGHT with dynamic offset parameters. The numeric offsets are concatenated directly into highlight generation, allowing injection through arithmetic expressions.\", \"Vulnerability name\": \"Oracle Highlight Offset Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A data recovery tool uses time travel queries with dynamic OFFSET values. The time offset strings are concatenated directly into AT|BEFORE clauses, allowing injection during historical data retrieval.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Time Travel OFFSET\", \"Lab Description\": \"A data recovery tool uses time travel queries with dynamic OFFSET values. The time offset strings are concatenated directly into AT|BEFORE clauses, allowing injection during historical data retrieval.\", \"Vulnerability name\": \"Snowflake Time Offset Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token tampering vulnerability in session management", "target": "{\"Lab scenario\": \"JWT token tampering vulnerability in session management\", \"Lab Description\": \"The application uses JWTs for user sessions, but incorrectly trusts the `alg` header from the token instead of enforcing HS256. This allows an attacker to forge tokens by setting the algorithm to 'none'. The application fails to verify the token signature properly. To solve: forge an administrator JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirection hijack in authentication flow", "target": "{\"Lab scenario\": \"OAuth redirection hijack in authentication flow\", \"Lab Description\": \"The application uses OAuth for login via a third-party provider, but fails to validate the redirect_uri parameter. This allows attackers to hijack the token and redirect it to their own malicious domain. To solve: steal the victim’s token by injecting a malicious redirect_uri and access their data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application sets a session ID cookie before authentication and does not regenerate it upon successful login. An attacker can set a known session ID for a victim before they log in and later use that session ID to access the victim's account. To solve: log in as the victim using a fixed session ID to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via 'none' algorithm in Authorization header", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for user authentication. However, it fails to enforce algorithm validation, allowing tokens signed with 'none' to bypass verification. The application trusts the 'alg' value in the header and processes the token without signature validation. To solve: Craft a tampered token granting 'admin' access and use it to access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application accepts user-provided session IDs via cookies before login, without regenerating them after successful authentication. This allows attackers to set a known session ID before the victim logs in. To solve: Fixate a session, wait for the victim to authenticate, and hijack their session to access their profile.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application accepts user-provided session IDs via cookies before login, without regenerating them after successful authentication. This allows attackers to set a known session ID before the victim logs in. To solve: Fixate a session, wait for the victim to authenticate, and hijack their session to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfigured with open redirect on callback", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfigured with open redirect on callback\", \"Lab Description\": \"The application uses OAuth 2.0 with the implicit grant type. The redirection URI is not strictly validated, allowing an attacker to intercept the access token via a malicious redirect URL. To solve: Craft an authorization URL with a redirect_uri pointing to your attacker-controlled site and steal the victim's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses a session cookie to manage authenticated state. However, it accepts arbitrary session IDs from unauthenticated users and does not regenerate the session ID after login, enabling session fixation. The application fails to invalidate old sessions. To solve: Hijack Carlos's session by fixing a session ID before login and accessing his account page.", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-based Authentication\", \"Lab Description\": \"The application uses a session cookie to manage authenticated state. However, it accepts arbitrary session IDs from unauthenticated users and does not regenerate the session ID after login, enabling session fixation. The application fails to invalidate old sessions. To solve: Hijack Carlos's session by fixing a session ID before login and accessing his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to manage user sessions, but fails to verify the signing algorithm correctly. By modifying the JWT to use 'alg':'none' and removing the signature, an attacker can spoof any user's token. To solve: Tamper with a JWT to impersonate Carlos and access the protected dashboard.", "target": "{\"Lab scenario\": \"JWT Tampering in Bearer Token Authentication\", \"Lab Description\": \"The application uses JWTs to manage user sessions, but fails to verify the signing algorithm correctly. By modifying the JWT to use 'alg':'none' and removing the signature, an attacker can spoof any user's token. To solve: Tamper with a JWT to impersonate Carlos and access the protected dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in authorization flow", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Authorization Flow\", \"Lab Description\": \"The app uses OAuth 2.0 to authenticate users via a third-party provider, but it exposes the authorization code in a GET request and does not validate the redirect URI. This allows an attacker to intercept a code meant for another user and exchange it for an access token. To solve: Hijack Carlos's OAuth code and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Bypass using 'none' algorithm in Authorization Header", "target": "{\"Lab scenario\": \"JWT Signature Bypass using 'none' algorithm in Authorization Header\", \"Lab Description\": \"This lab's authentication system uses JWTs to authorize users. The application does not properly validate the JWT algorithm, allowing attackers to set the alg to 'none'. This lets attackers forge tokens without a signature. To solve the lab, craft a JWT to impersonate the user Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability in Login Flow\", \"Lab Description\": \"The application sets the session ID before authentication, allowing attackers to fix a victim's session ID. If a victim logs in using the fixed session, the attacker can hijack the session. To solve the lab, fix the session ID for Carlos, wait for login, and hijack his session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Redirect URI Manipulation Leads to Access Token Theft", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation Leads to Access Token Theft\", \"Lab Description\": \"The application uses OAuth 2.0 for login, but does not validate the redirect_uri parameter strictly. An attacker can manipulate this to redirect the OAuth token to a malicious domain. To solve: exploit this flaw to steal Carlos's access token and access his account via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via URL Parameter Injection in Login Endpoint", "target": "{\"Lab scenario\": \"Session Fixation via URL Parameter Injection in Login Endpoint\", \"Lab Description\": \"The login mechanism allows user-supplied session IDs to be set via a query parameter before authentication. The application binds the provided session ID to the authenticated session without validation. To solve: Hijack Carlos's session by forcing him to use a fixed session ID and then authenticate using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Authentication Bypass using 'none' Algorithm in Token Verification Logic", "target": "{\"Lab scenario\": \"JWT Authentication Bypass using 'none' Algorithm in Token Verification Logic\", \"Lab Description\": \"The server uses JWTs for authentication but improperly accepts tokens signed with the 'none' algorithm, trusting unsigned tokens. To solve: Forge a valid JWT for Carlos with 'none' as algorithm, gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses the OAuth implicit grant flow and redirects users to third-party pages after authentication, including the access token in the URL fragment. Due to misconfigured Referer policies, the token leaks to external domains. To solve: Extract Carlos’s access token and impersonate him.", "target": "{\"Lab scenario\": \"OAuth Implicit Grant Token Leak via Referer Header in Third-Party Redirect\", \"Lab Description\": \"The application uses the OAuth implicit grant flow and redirects users to third-party pages after authentication, including the access token in the URL fragment. Due to misconfigured Referer policies, the token leaks to external domains. To solve: Extract Carlos’s access token and impersonate him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's login functionality does not invalidate the pre-authentication session identifier, making it vulnerable to session fixation. The application sets a session ID before login and continues using it afterward. To solve: log in to Carlos's account using a fixed session value you've injected before authentication.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"This lab's login functionality does not invalidate the pre-authentication session identifier, making it vulnerable to session fixation. The application sets a session ID before login and continues using it afterward. To solve: log in to Carlos's account using a fixed session value you've injected before authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via 'none' algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs for authentication but does not verify the token signature properly if the 'alg' field is set to 'none'. This flaw allows attackers to craft arbitrary tokens and impersonate users. To solve: forge a JWT token that identifies you as Carlos without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses OAuth2 for login via a third-party provider but does not strictly validate the `redirect_uri` during the authorization flow. An attacker can manipulate the URL to capture tokens. To solve: steal Carlos's OAuth token by injecting a malicious redirect URI.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation during implicit flow\", \"Lab Description\": \"This lab uses OAuth2 for login via a third-party provider but does not strictly validate the `redirect_uri` during the authorization flow. An attacker can manipulate the URL to capture tokens. To solve: steal Carlos's OAuth token by injecting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's login logic is vulnerable to session fixation. The app fails to generate a new session ID after login, allowing an attacker to preset a session ID and force the victim to use it. The application accepts session identifiers via cookies and doesn't invalidate pre-login sessions. To solve: hijack Carlos's session and access the /my-account page using a fixed session.", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"The application's login logic is vulnerable to session fixation. The app fails to generate a new session ID after login, allowing an attacker to preset a session ID and force the victim to use it. The application accepts session identifiers via cookies and doesn't invalidate pre-login sessions. To solve: hijack Carlos's session and access the /my-account page using a fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API uses JWT tokens for user identity validation but insecurely accepts unsigned tokens with the 'none' algorithm. It does not properly verify the signature, allowing attackers to forge arbitrary tokens. To solve: craft a JWT token impersonating Carlos and access the /my-account endpoint.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in REST API\", \"Lab Description\": \"The API uses JWT tokens for user identity validation but insecurely accepts unsigned tokens with the 'none' algorithm. It does not properly verify the signature, allowing attackers to forge arbitrary tokens. To solve: craft a JWT token impersonating Carlos and access the /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirection uri manipulation in third-party login", "target": "{\"Lab scenario\": \"OAuth redirection URI manipulation in third-party login\", \"Lab Description\": \"The app implements OAuth login using a third-party provider but insecurely accepts dynamic redirect_uris. An attacker can manipulate this URI to intercept the authorization code. To solve: capture Carlos’s OAuth code and use it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The application uses session cookies for authentication, but it does not rotate the session ID after login. This enables a session fixation attack where a user is tricked into logging in with a pre-set session ID. To solve: Hijack Carlos's session and access his My Account page using session fixation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering via none algorithm vulnerability in api authentication", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm vulnerability in API authentication\", \"Lab Description\": \"This app uses JSON Web Tokens for authentication. However, it does not validate the algorithm properly and allows `alg: none`, making it possible to forge a token without signing it. To solve: Tamper with a JWT to impersonate Carlos and access his data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth open redirect flaw in callback handler", "target": "{\"Lab scenario\": \"OAuth open redirect flaw in callback handler\", \"Lab Description\": \"The app integrates OAuth for third-party login but fails to validate redirect URIs properly. This allows an attacker to steal the authorization code by injecting an open redirect in the callback flow. To solve: Steal Carlos's OAuth code and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth session fixation in authorization code flow", "target": "{\"Lab scenario\": \"OAuth session fixation in authorization code flow\", \"Lab Description\": \"The application implements OAuth using the authorization code flow but fails to rotate the session identifier after login. The authorization server is hosted separately, but session tokens are not refreshed upon login. An attacker can craft a session, fix it for the victim, and then hijack their session post-login. To solve: hijack Carlos's authenticated session using a fixation technique.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application uses JWTs for user authentication but fails to enforce strong algorithm verification. The server trusts JWTs that use 'none' as their algorithm and doesn't validate the signature. To solve: forge a token granting access to Carlos’s account by tampering with the algorithm field.", "target": "{\"Lab scenario\": \"JWT tampering using alg: none\", \"Lab Description\": \"This application uses JWTs for user authentication but fails to enforce strong algorithm verification. The server trusts JWTs that use 'none' as their algorithm and doesn't validate the signature. To solve: forge a token granting access to Carlos’s account by tampering with the algorithm field.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session id leakage through verbose error logging", "target": "{\"Lab scenario\": \"Session ID leakage through verbose error logging\", \"Lab Description\": \"This application logs full session identifiers in the response body when errors occur. Attackers can trigger errors and collect leaked session tokens from responses. To solve: leak Carlos’s session ID and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none algorithm bypass in session token verification", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Bypass in Session Token Verification\", \"Lab Description\": \"This lab demonstrates a vulnerability in JWT session token validation where the application incorrectly accepts tokens using the 'none' algorithm, bypassing signature verification entirely. The application relies on JWT tokens for authentication but fails to enforce a secure algorithm. To solve: Forge a valid token and access Carlos's My Account page without needing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth 2.0 misconfiguration — open redirect token theft in authorization flow", "target": "{\"Lab scenario\": \"OAuth 2.0 Misconfiguration — Open Redirect Token Theft in Authorization Flow\", \"Lab Description\": \"This lab showcases an OAuth misconfiguration where the authorization server does not properly validate the 'redirect_uri' parameter, allowing open redirection and token theft. The application trusts the user-supplied redirect URL without whitelisting. To solve: Exploit the OAuth flow to capture a valid token from Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via Predictable Session IDs in Login Process", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session IDs in Login Process\", \"Lab Description\": \"This lab highlights a session fixation vulnerability where the application assigns session tokens before authentication and fails to issue new ones post-login. An attacker can force a victim to use a pre-selected session ID. To solve: Predict or fixate Carlos's session ID and gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The API authentication mechanism uses JSON Web Tokens (JWTs) for session management. The server trusts the 'alg' field in the JWT header without validation, which allows algorithm confusion attacks. The application fails to enforce the expected signing algorithm, allowing unsigned tokens. To solve: forge an admin JWT token using 'none' algorithm and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in API Authentication\", \"Lab Description\": \"The API authentication mechanism uses JSON Web Tokens (JWTs) for session management. The server trusts the 'alg' field in the JWT header without validation, which allows algorithm confusion attacks. The application fails to enforce the expected signing algorithm, allowing unsigned tokens. To solve: forge an admin JWT token using 'none' algorithm and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token theft via redirect manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow token theft via redirect manipulation\", \"Lab Description\": \"The web app uses OAuth for authentication, but improperly validates the redirect_uri parameter during the OAuth handshake. An attacker can manipulate this parameter to point to a malicious endpoint and steal access tokens. To solve: intercept an OAuth request and redirect the victim’s token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses predictable session IDs generated before login and does not regenerate them after authentication. An attacker can fix a session ID before the victim logs in, gaining unauthorized access to the victim's session. To solve: pre-assign a session ID, send it to the victim, and hijack the account once the victim authenticates.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application uses predictable session IDs generated before login and does not regenerate them after authentication. An attacker can fix a session ID before the victim logs in, gaining unauthorized access to the victim's session. To solve: pre-assign a session ID, send it to the victim, and hijack the account once the victim authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature validation bypass via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature validation bypass via 'none' algorithm\", \"Lab Description\": \"This lab simulates a web application that uses JSON Web Tokens (JWT) for session management but fails to enforce proper algorithm checks during signature verification. The server trusts any JWT token where the algorithm field is modified to 'none'. To solve the lab, forge a valid JWT for user 'carlos' without knowing the secret key and access the protected /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable session ids", "target": "{\"Lab scenario\": \"Session Fixation through predictable session IDs\", \"Lab Description\": \"This lab's session management mechanism uses predictable session identifiers. The server assigns the session ID before authentication and fails to regenerate it after successful login. To solve the lab, pre-set a known session ID for the victim and log in to their account using the same session ID to hijack their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow misconfiguration", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"This lab's OAuth 2.0 implementation uses the implicit flow without validating the redirect URI properly. Attackers can manipulate the redirect_uri parameter to steal access tokens. To solve the lab, craft a malicious OAuth URL to capture Carlos's token and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature none algorithm exploit in authentication token verification", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Exploit in Authentication Token Verification\", \"Lab Description\": \"This lab simulates an application vulnerable to JWT token manipulation due to insecure implementation of the 'none' algorithm during signature verification. The backend fails to enforce token signature validation when 'alg' is set to 'none'. The application issues JWT tokens after successful login, which are used for session authentication. To solve: Forge a JWT token to escalate privileges and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in token validation flow", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Validation Flow\", \"Lab Description\": \"This lab focuses on exploiting an OAuth token misconfiguration where the server only verifies the token's issuer claim (`iss`) and skips validation of the access token signature. The lab involves leveraging this weakness to craft a fake token and impersonate a privileged user. To solve: Forge a signed JWT access token with a manipulated issuer pointing to a trusted domain and access Carlos's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in Cookie-Based Authentication", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-Based Authentication\", \"Lab Description\": \"This lab's authentication mechanism is vulnerable to session fixation. When a user logs in, the session identifier is not regenerated, enabling an attacker to set the session ID ahead of authentication. The application accepts any existing session ID and continues the session post-login. To solve: Pre-set a session ID, trick the victim into using it, log in as Carlos and hijack the session using the same ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application's login flow allows session tokens to be set prior to authentication, and the token remains valid post-login. The application fails to invalidate pre-login session cookies. To solve: hijack a session by fixing the session token before authentication and access the target's account page.", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Handling in Login Endpoint\", \"Lab Description\": \"The application's login flow allows session tokens to be set prior to authentication, and the token remains valid post-login. The application fails to invalidate pre-login session cookies. To solve: hijack a session by fixing the session token before authentication and access the target's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a JSON Web Token (JWT) for session control but does not validate the token signature properly. The application decodes the token but skips signature validation when the 'alg' header is set to 'none'. To solve: craft a JWT token with modified privileges to access the admin panel.", "target": "{\"Lab scenario\": \"JWT Token Tampering in Authorization Header\", \"Lab Description\": \"The application uses a JSON Web Token (JWT) for session control but does not validate the token signature properly. The application decodes the token but skips signature validation when the 'alg' header is set to 'none'. To solve: craft a JWT token with modified privileges to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code interception in redirect uri", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Redirect URI\", \"Lab Description\": \"The application relies on OAuth 2.0 authorization but accepts arbitrary redirect URIs after authorization. This allows attackers to intercept the authorization code. To solve: manipulate the redirect URI to capture Carlos's OAuth code and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Mismanagement Flaw in Access Control for REST API", "target": "{\"Lab scenario\": \"Session Mismanagement Flaw in Access Control for REST API\", \"Lab Description\": \"This application's REST API uses session IDs set via URL parameters rather than cookies. The server-side logic trusts any session ID provided in the URL without validating user context. To solve: steal and reuse a session ID from a public source to hijack an active session and access another user's sensitive data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Authentication lab for: jwt secret exposure through verbose error responses", "target": "{\"Lab scenario\": \"JWT Secret Exposure through Verbose Error Responses\", \"Lab Description\": \"This application's JWT implementation logs signature verification failures verbosely, accidentally revealing the HMAC secret in server debug logs. To solve: trigger error messages and extract the secret to forge a valid admin token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The OAuth authorization server allows open redirect URIs with wildcard matching. An attacker can craft a malicious redirect_uri to intercept authorization codes. To solve: manipulate the redirect_uri to exfiltrate another user's OAuth code and redeem it for their access token.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The OAuth authorization server allows open redirect URIs with wildcard matching. An attacker can craft a malicious redirect_uri to intercept authorization codes. To solve: manipulate the redirect_uri to exfiltrate another user's OAuth code and redeem it for their access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature confusion in token validation logic", "target": "{\"Lab scenario\": \"JWT signature confusion in token validation logic\", \"Lab Description\": \"The application uses JWT tokens for authentication but incorrectly validates the 'alg' field, trusting user-supplied algorithms. If the header specifies 'none', the signature check is skipped entirely. To solve: forge a JWT token assigning yourself 'admin' privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable session identifiers", "target": "{\"Lab scenario\": \"Session Fixation through predictable session identifiers\", \"Lab Description\": \"The application issues session identifiers that are directly derived from the username in a weak hash form. An attacker can predict valid session tokens based on this pattern and hijack active sessions. To solve: predict and reuse a valid session ID to access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth open redirect flaw in authorization endpoint", "target": "{\"Lab scenario\": \"OAuth open redirect flaw in authorization endpoint\", \"Lab Description\": \"The OAuth provider used by this application allows redirection to arbitrary URLs under the same domain wildcard. This allows attackers to steal OAuth codes by tricking users into clicking crafted links. To solve: craft an OAuth URL that redirects to a malicious endpoint and extract a valid code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-set session id in login endpoint", "target": "{\"Lab scenario\": \"Session Fixation via Pre-set Session ID in Login Endpoint\", \"Lab Description\": \"The application allows clients to specify a session ID before authentication is complete. The server trusts this session and associates it with the authenticated user without generating a new one. To solve: predefine a session ID, log in as your user, then reuse the same ID to hijack Carlos's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application uses JWT for session handling but fails to validate the signature when 'alg' is set to 'none'. The server mistakenly trusts the unverified payload. To solve: craft a JWT with admin privileges and access the admin section using the unsigned token.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authorization Header\", \"Lab Description\": \"The application uses JWT for session handling but fails to validate the signature when 'alg' is set to 'none'. The server mistakenly trusts the unverified payload. To solve: craft a JWT with admin privileges and access the admin section using the unsigned token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth token leakage through referer header", "target": "{\"Lab scenario\": \"OAuth Token Leakage through Referer Header\", \"Lab Description\": \"The application uses OAuth 2.0 but the authorization code is exposed in the Referer header when redirected back to the client site. An attacker controlling a subdomain can harvest tokens via referer leakage. To solve: intercept the Referer header during login flow and extract the OAuth code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Hijacking via Predictable Session Tokens in REST API", "target": "{\"Lab scenario\": \"Session Hijacking via Predictable Session Tokens in REST API\", \"Lab Description\": \"The application's REST API uses a predictable session token generation scheme based on the username and a static salt. The application does not rotate the token post-login, allowing attackers to precompute tokens for valid users. To solve: predict Carlos's session token and access his profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Verification Bypass via Key Confusion Attack", "target": "{\"Lab scenario\": \"JWT Signature Verification Bypass via Key Confusion Attack\", \"Lab Description\": \"The application uses JWTs to authorize users but fails to differentiate between HMAC and RSA algorithms. Attackers can forge valid tokens by switching the algorithm from RS256 to HS256 and signing it using the public key as the secret. To solve: forge an admin token and access the /admin route.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Implicit Flow Token Leak via URL Fragment Hijacking", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leak via URL Fragment Hijacking\", \"Lab Description\": \"The OAuth implementation uses the implicit flow and returns access tokens in the URL fragment. Due to a lack of client-side sanitization, an attacker can manipulate redirect URIs to capture tokens via malicious subdomains. To solve: intercept an OAuth token using a crafted redirect URI and access Carlos's data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where graphql session fixation in login mutation", "target": "{\"Lab scenario\": \"GraphQL Session Fixation in Login Mutation\", \"Lab Description\": \"This lab’s GraphQL API suffers from session fixation due to insecure session token reuse. The application does not issue a fresh session ID upon login, allowing an attacker to fixate the victim's session. To solve: log in as Carlos after pre-setting the session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm acceptance in authorization header", "target": "{\"Lab scenario\": \"JWT None Algorithm Acceptance in Authorization Header\", \"Lab Description\": \"This application trusts JWT tokens in the Authorization header without properly validating the algorithm field, accepting 'alg':'none'. Attackers can forge tokens without a valid signature. To solve: create an unsigned admin token and access the /admin-dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth open redirect and token leakage", "target": "{\"Lab scenario\": \"OAuth Open Redirect and Token Leakage\", \"Lab Description\": \"This OAuth flow lacks proper redirect URI validation, allowing attackers to use open redirects to steal access tokens. The vulnerable behavior involves reflecting the access token in a user-controlled URL. To solve: steal Carlos's token via a malicious redirect URL and use it to access /private-files.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application's REST login endpoint sets a session ID derived from the username hash, which can be predicted. The application fails to generate a new session token post-login. To solve: predetermine Carlos's session ID and access the /dashboard endpoint using this session.", "target": "{\"Lab scenario\": \"API Session Fixation via Predictable Session ID in REST Login\", \"Lab Description\": \"This application's REST login endpoint sets a session ID derived from the username hash, which can be predicted. The application fails to generate a new session token post-login. To solve: predetermine Carlos's session ID and access the /dashboard endpoint using this session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Confusion Vulnerability in Bearer Authorization", "target": "{\"Lab scenario\": \"JWT Signature Confusion Vulnerability in Bearer Authorization\", \"Lab Description\": \"The application uses JWT tokens but inconsistently verifies the signature algorithm. If a token uses 'HS256' instead of 'RS256', the server misinterprets the public RSA key as a shared HMAC secret, enabling signature spoofing. To solve: craft a signed HS256 token impersonating the admin and access /admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth2 implicit flow token leak via referer header", "target": "{\"Lab scenario\": \"OAuth2 Implicit Flow Token Leak via Referer Header\", \"Lab Description\": \"This application uses OAuth2 implicit flow but embeds the access token in the URL fragment, causing the browser to leak the token via Referer headers. To solve: capture Carlos's token from the Referer log and replay it to access /protected.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via url-based token in single-page application", "target": "{\"Lab scenario\": \"Session Fixation via URL-based Token in Single-Page Application\", \"Lab Description\": \"This lab's single-page login flow passes session identifiers via the URL rather than setting them after authentication. The application reuses this identifier without regenerating it upon successful login. To solve: inject your own crafted session ID before Carlos logs in and hijack the session when he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm bypass in authentication header", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authentication Header\", \"Lab Description\": \"This application uses JWT for user authentication but does not properly validate the signature algorithm. If the token's 'alg' field is set to 'none', the server skips verification. To solve: craft a token with 'alg':'none' and 'username':'carlos' and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This OAuth implementation allows arbitrary redirection of authorization codes to third-party sites through the vulnerable 'redirect_uri' parameter. The server fails to validate the host. To solve: capture Carlos's authorization code and exchange it for an access token.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect\", \"Lab Description\": \"This OAuth implementation allows arbitrary redirection of authorization codes to third-party sites through the vulnerable 'redirect_uri' parameter. The server fails to validate the host. To solve: capture Carlos's authorization code and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt token signature confusion vulnerability in api authentication", "target": "{\"Lab scenario\": \"JWT token signature confusion vulnerability in API authentication\", \"Lab Description\": \"This lab uses JSON Web Tokens to secure user sessions. The backend mistakenly trusts tokens signed with both HMAC and RSA keys depending on the 'alg' field, which makes it possible to craft a valid token using the public key as an HMAC secret. To solve: forge a token with admin privileges using algorithm confusion and access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via unvalidated 'session_id' in OAuth callback flow", "target": "{\"Lab scenario\": \"Session fixation via unvalidated 'session_id' in OAuth callback flow\", \"Lab Description\": \"This OAuth-enabled app accepts a 'session_id' from the user during the authorization flow, which it reuses to bind the session after token exchange without validation. To solve: inject a fixed session ID and access Carlos's authenticated session after his login completes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Authentication lab for: improper oauth scope validation in rest api authorization flow", "target": "{\"Lab scenario\": \"Improper OAuth scope validation in REST API Authorization Flow\", \"Lab Description\": \"This lab uses OAuth to authorize API access. The backend trusts the client-provided scope without verifying it server-side, allowing privilege escalation by modifying the scope parameter. To solve: request an access token with elevated scope 'admin' and use it to access /admin/data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application assigns session IDs before authentication and does not regenerate them upon successful login. This allows an attacker to set a session ID, trick a victim into using it, and hijack the account after login. To solve: fix the session ID, log in as the victim using the same session ID, and access their private dashboard.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in cookie-based login\", \"Lab Description\": \"The application assigns session IDs before authentication and does not regenerate them upon successful login. This allows an attacker to set a session ID, trick a victim into using it, and hijack the account after login. To solve: fix the session ID, log in as the victim using the same session ID, and access their private dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering due to missing signature verification", "target": "{\"Lab scenario\": \"JWT tampering due to missing signature verification\", \"Lab Description\": \"The application accepts JWT tokens for authentication but does not verify their signatures due to a misconfigured token parser. This allows an attacker to forge arbitrary tokens and impersonate other users. To solve: craft a JWT token with the payload for 'admin' access and submit it to /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow misconfiguration allows token interception", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration allows token interception\", \"Lab Description\": \"The app uses OAuth's implicit grant flow with tokens exposed in the URL fragment, which is accessible to malicious scripts due to the lack of proper CSP headers. To solve: steal the access token via a crafted JavaScript payload and use it to access /api/userinfo as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT for authentication but incorrectly trusts the algorithm specified in the token header. This allows an attacker to switch from HMAC to 'none' algorithm and forge tokens. To solve: manipulate the JWT header to use 'none', craft a valid admin payload, and access the protected /admin route.", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in token verification logic\", \"Lab Description\": \"The application uses JWT for authentication but incorrectly trusts the algorithm specified in the token header. This allows an attacker to switch from HMAC to 'none' algorithm and forge tokens. To solve: manipulate the JWT header to use 'none', craft a valid admin payload, and access the protected /admin route.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application uses GraphQL for authentication but assigns a session token before login that is not regenerated post-login. This allows an attacker to predefine a token, send it to the victim, and hijack their session once the victim logs in. To solve: fix a session token, hijack the user's session, and access the profile endpoint.", "target": "{\"Lab scenario\": \"Session fixation via static session token in GraphQL mutation\", \"Lab Description\": \"The application uses GraphQL for authentication but assigns a session token before login that is not regenerated post-login. This allows an attacker to predefine a token, send it to the victim, and hijack their session once the victim logs in. To solve: fix a session token, hijack the user's session, and access the profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses OAuth authorization but fails to properly validate the redirect_uri parameter, allowing attackers to steal tokens via an open redirect. To solve: craft a malicious redirect_uri pointing to your controlled server, extract Carlos's token, and access /userinfo using it.", "target": "{\"Lab scenario\": \"OAuth open redirect token theft in redirect_uri validation\", \"Lab Description\": \"The application uses OAuth authorization but fails to properly validate the redirect_uri parameter, allowing attackers to steal tokens via an open redirect. To solve: craft a malicious redirect_uri pointing to your controlled server, extract Carlos's token, and access /userinfo using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session ids in rest login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs in REST login flow\", \"Lab Description\": \"The application issues session IDs before user authentication, and these tokens are not regenerated upon successful login. This lets an attacker pre-fixate a session token, send it to a victim, and hijack their authenticated session. To solve: pre-assign a session ID, trick the victim to log in with it, and access the /dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a poorly configured JWT validation library that leaks internal errors to the client, exposing the secret signing key when token verification fails. To solve: submit a malformed token, extract the secret from the error response, craft a valid admin token, and access /admin-panel.", "target": "{\"Lab scenario\": \"JWT secret key disclosure via verbose error logging in token validation\", \"Lab Description\": \"The application uses a poorly configured JWT validation library that leaks internal errors to the client, exposing the secret signing key when token verification fails. To solve: submit a malformed token, extract the secret from the error response, craft a valid admin token, and access /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leakage via referer header mismanagement", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header mismanagement\", \"Lab Description\": \"The application implements OAuth implicit flow but fails to clear the referer header after redirection, leaking the access token to third-party domains. To solve: intercept the Referer header after redirection to extract the victim's token, use it to access /user/settings.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session mismanagement via insecure logout endpoint", "target": "{\"Lab scenario\": \"Session mismanagement via insecure logout endpoint\", \"Lab Description\": \"The application's logout function fails to invalidate session cookies on the server, allowing attackers to reuse a hijacked token. The application continues to trust old session cookies even after the user logs out. To solve: capture the session cookie pre-logout and reuse it to access /account/profile after the user logs out.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application uses a JWT library that allows switching between asymmetric (RS256) and symmetric (HS256) algorithms without proper validation, enabling attackers to forge tokens with HS256 using the public key as the secret. To solve: download the public key, sign a malicious admin token using HS256, and access /admin/dashboard.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token verification logic\", \"Lab Description\": \"The application uses a JWT library that allows switching between asymmetric (RS256) and symmetric (HS256) algorithms without proper validation, enabling attackers to forge tokens with HS256 using the public key as the secret. To solve: download the public key, sign a malicious admin token using HS256, and access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration leading to authorization code reuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to authorization code reuse\", \"Lab Description\": \"The application uses OAuth 2.0 Authorization Code flow but does not invalidate the authorization code after the first use, allowing reuse for session hijacking. The application [accepts stale codes]. To solve: intercept the authorization code, reuse it for a second login attempt to access /user/dashboard as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application is vulnerable to session fixation because it accepts and trusts user-provided session IDs without regenerating them upon login. The application assigns the session ID based on the `session` cookie and never invalidates it post-authentication. To solve: set a known session ID, perform a login as yourself, and then reuse the fixed session ID to hijack Carlos's session.", "target": "{\"Lab scenario\": \"Session Fixation Attack in Cookie Assignment\", \"Lab Description\": \"The application is vulnerable to session fixation because it accepts and trusts user-provided session IDs without regenerating them upon login. The application assigns the session ID based on the `session` cookie and never invalidates it post-authentication. To solve: set a known session ID, perform a login as yourself, and then reuse the fixed session ID to hijack Carlos's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm attack in token validation", "target": "{\"Lab scenario\": \"JWT none algorithm attack in Token Validation\", \"Lab Description\": \"The application's JWT implementation does not properly enforce the algorithm check and accepts tokens signed with the `none` algorithm, bypassing signature verification. The application uses this token to control user access levels. To solve: modify the token to use `alg=none` and set `admin=true` to gain administrative privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth token misuse in redirect uri trust", "target": "{\"Lab scenario\": \"OAuth Token Misuse in Redirect URI Trust\", \"Lab Description\": \"The OAuth server in this lab improperly trusts wildcards in redirect URIs, allowing attackers to exfiltrate authorization codes to an external malicious domain. The application [uses a poorly validated wildcard match]. To solve: exploit the redirect URI to leak Carlos's code and reuse it to obtain his access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation in login redirect flow", "target": "{\"Lab scenario\": \"Session fixation in login redirect flow\", \"Lab Description\": \"The login flow does not regenerate session tokens upon authentication, allowing an attacker to fixate a session ID for a victim. The application fails to invalidate existing session tokens during login. To solve: hijack Carlos's session after login using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering via none algorithm", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm\", \"Lab Description\": \"The application improperly accepts unsigned JWTs by trusting the 'none' algorithm when parsing tokens. This leads to privilege escalation. To solve: forge a JWT as 'admin' and access the admin panel without a valid signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth redirect URI manipulation", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The OAuth implementation lacks proper redirect URI validation. Attackers can inject malicious redirect URIs to steal tokens. The application accepts arbitrary URLs in the `redirect_uri` parameter during login. To solve: trick the server into redirecting the victim's token to your domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt secret key brute-force in rest api login", "target": "{\"Lab scenario\": \"JWT secret key brute-force in REST API login\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management. The secret key used to sign the JWTs is weak and guessable. Tokens are validated purely on signature without proper expiration or audience claims. To solve: forge a valid JWT for the user 'carlos' using a brute-forced secret and access his account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via insecure redirect", "target": "{\"Lab scenario\": \"Session fixation via insecure redirect\", \"Lab Description\": \"The login system fails to regenerate session tokens after authentication. Attackers can predetermine session IDs and force the victim to authenticate using them. The application accepts session IDs from the URL and uses them directly. To solve: fixate a known session ID and get Carlos to log in, then reuse that session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leak via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leak via referer header\", \"Lab Description\": \"The application uses OAuth 2.0 implicit flow and redirects tokens via the URL fragment. This fragment gets exposed through the HTTP Referer header when navigating to third-party resources. To solve: intercept the access token issued to Carlos and reuse it to access his account profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt secret key brute-force in rest api authorization header", "target": "{\"Lab scenario\": \"JWT secret key brute-force in REST API Authorization Header\", \"Lab Description\": \"This lab involves a JWT-based authorization system where the backend uses a weak secret key to sign tokens. The application validates JWT tokens included in the `Authorization: Bearer` header for API access. However, it fails to implement strong key management. To solve: Forge a valid admin JWT using brute-force and access the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in login endpoint with reusable session id", "target": "{\"Lab scenario\": \"Session fixation in login endpoint with reusable session ID\", \"Lab Description\": \"The application sets a session ID cookie before authentication and does not regenerate it post-login. This allows attackers to fixate a victim's session by pre-defining the session cookie and tricking them into logging in using it. To solve: Log into Carlos's account by fixing a session ID and reusing it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect uri manipulation leading to account takeover", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation leading to account takeover\", \"Lab Description\": \"The application uses OAuth for third-party login but improperly validates redirect URIs during the authentication handshake. An attacker can tamper with the redirect_uri parameter to receive the authorization code for another user. To solve: Steal Carlos’s OAuth code and use it to link his account to yours.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none bypass in token verification", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in Token Verification\", \"Lab Description\": \"The application verifies JWT tokens without enforcing strict validation of the algorithm used. The vulnerable component fails to check if the 'alg' parameter is set to 'none'. The application accepts this altered token as valid, allowing attackers to forge tokens and impersonate users. To solve: forge a valid JWT for the user 'carlos' using algorithm 'none' and access the /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth token leakage in redirect url handler", "target": "{\"Lab scenario\": \"OAuth Token Leakage in Redirect URL Handler\", \"Lab Description\": \"The OAuth flow in this application mishandles access tokens by reflecting them in the URL. A malicious actor can harvest tokens via browser history or referer headers. The application redirects to a vulnerable page with tokens embedded. To solve: steal the access token issued to Carlos and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login session initialization", "target": "{\"Lab scenario\": \"Session Fixation in Login Session Initialization\", \"Lab Description\": \"The application allows users to supply their own session identifiers before authentication. Session tokens are not regenerated after login, enabling fixation. The attacker can fix a session ID and trick a victim into logging in with it. To solve: fix a session ID for Carlos, wait for login, then access /dashboard using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature none bypass in authentication header", "target": "{\"Lab scenario\": \"JWT signature none bypass in authentication header\", \"Lab Description\": \"The authentication system uses JWTs but fails to validate tokens with the 'none' algorithm. The application uses the JWT in the Authorization header for access control but does not enforce proper algorithm checks during signature verification. To solve: craft a forged JWT with algorithm set to 'none' and access Carlos's account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect_uri manipulation in login flow", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation in login flow\", \"Lab Description\": \"The application uses a third-party OAuth provider for login and redirects users based on the 'redirect_uri' parameter. The redirect URI is insufficiently validated, allowing attackers to steal authorization codes. To solve: intercept and modify the OAuth flow to capture Carlos's code and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow via Set-Cookie header manipulation", "target": "{\"Lab scenario\": \"Session fixation in login flow via Set-Cookie header manipulation\", \"Lab Description\": \"The application assigns the session ID before login and does not rotate it upon authentication. This flaw allows attackers to fixate a known session ID for the victim before login. To solve: predefine a session ID, trick Carlos into logging in, and reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth redirect URI manipulation in authentication flow", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in authentication flow\", \"Lab Description\": \"The OAuth implementation in this application contains weak validation of redirect URIs. This allows an attacker to hijack tokens by injecting malicious domains. The application blindly trusts user-controlled redirect_uri parameters during the OAuth login flow, enabling redirection to external, attacker-controlled endpoints. To solve: capture an OAuth access token issued for Carlos by manipulating the redirect flow and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application allows attackers to set session cookies before authentication and reuses them post-login. This allows a session fixation attack where the attacker sets their own session ID, tricks the victim into using it, and later hijacks the session after the victim logs in. To solve: pre-set a session ID, force Carlos to authenticate using it, then hijack the session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authorize access to user accounts but fails to enforce signature verification properly. It blindly accepts tokens where the alg field is set to 'none'. To solve: forge a JWT with alg=none and payload containing 'username':'carlos', then use it to access Carlos's account via the protected endpoint.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in access token validation\", \"Lab Description\": \"The application uses JWTs to authorize access to user accounts but fails to enforce signature verification properly. It blindly accepts tokens where the alg field is set to 'none'. To solve: forge a JWT with alg=none and payload containing 'username':'carlos', then use it to access Carlos's account via the protected endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature validation bypass in api endpoint", "target": "{\"Lab scenario\": \"JWT signature validation bypass in API endpoint\", \"Lab Description\": \"This lab's backend relies on JSON Web Tokens (JWT) to validate user sessions. However, it fails to enforce proper algorithm checks. The application incorrectly accepts tokens signed with the 'none' algorithm. To solve: Access Carlos's data through the protected /api/user endpoint by forging a valid-looking JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab's login system is vulnerable to session fixation due to the reuse of session identifiers across authentication boundaries. Attackers can preset a session cookie and trick a victim into logging in with it. To solve: Fix a session ID, log Carlos in using it, then use the same session to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This OAuth-based authentication flow is vulnerable to a redirect_uri validation flaw. It fails to strictly validate the domain of redirection endpoints, allowing attackers to steal OAuth authorization codes. To solve: Inject a malicious redirect_uri that sends the authorization code to your server, retrieve the stolen code, and use it to log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth token manipulation via redirect_uri parameter injection\", \"Lab Description\": \"This OAuth-based authentication flow is vulnerable to a redirect_uri validation flaw. It fails to strictly validate the domain of redirection endpoints, allowing attackers to steal OAuth authorization codes. To solve: Inject a malicious redirect_uri that sends the authorization code to your server, retrieve the stolen code, and use it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in token verification", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token verification\", \"Lab Description\": \"The application verifies user sessions using JSON Web Tokens (JWTs). The JWT validation logic accepts any token using either the HS256 or RS256 algorithm. However, the public key used for RS256 verification is not securely isolated. The application trusts tokens signed with HS256 and validates them using a hardcoded RS256 public key, creating an algorithm confusion vector. To solve: forge a valid token to impersonate Carlos and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth for authentication via a third-party provider. However, the session ID is assigned before user authentication and not regenerated after login. This allows a malicious actor to fix a session ID by luring the victim into authenticating under a session the attacker controls. To solve: log in as Carlos using a fixed session and access their account page.", "target": "{\"Lab scenario\": \"Session fixation in OAuth authorization redirect flow\", \"Lab Description\": \"The application uses OAuth for authentication via a third-party provider. However, the session ID is assigned before user authentication and not regenerated after login. This allows a malicious actor to fix a session ID by luring the victim into authenticating under a session the attacker controls. To solve: log in as Carlos using a fixed session and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Blind username discovery through GraphQL error differentiation", "target": "{\"Lab scenario\": \"Blind username discovery through GraphQL error differentiation\", \"Lab Description\": \"The application exposes a GraphQL endpoint that handles authentication queries. Due to a misconfigured error-handling mechanism, responses differ slightly based on the validity of the username during login attempts. This side-channel allows blind enumeration of usernames. To solve: enumerate Carlos's username and use it to brute-force his password to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm override in rest api authentication", "target": "{\"Lab scenario\": \"JWT none algorithm override in REST API Authentication\", \"Lab Description\": \"This lab uses JWTs for session management but improperly trusts the 'alg' field in incoming tokens. The application does not validate the token signature if the 'alg' is set to 'none'. The application generates signed JWTs using the HS256 algorithm, but accepts unsigned tokens with 'alg: none'. To solve: forge an unsigned JWT to impersonate Carlos and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth2 redirect uri manipulation via open redirect in login provider", "target": "{\"Lab scenario\": \"OAuth2 redirect URI manipulation via open redirect in login provider\", \"Lab Description\": \"This OAuth flow integrates with an external identity provider (IdP), but the application accepts any redirection URI without proper validation. An attacker can manipulate the redirection URI during login to intercept authorization codes and hijack sessions. To solve: abuse the redirection vulnerability to authenticate as Carlos without credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable session identifier in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session identifier in login flow\", \"Lab Description\": \"The login system assigns session identifiers before authentication and does not regenerate the session after successful login. An attacker can set a session ID via cookie and trick the victim into authenticating with it. The attacker then hijacks the session. To solve: fixate a session for Carlos and access their account using the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Authentication lab for: session fixation in oauth redirect handler", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Redirect Handler\", \"Lab Description\": \"The OAuth implementation in this application is vulnerable to session fixation. The redirect URI accepts a pre-set session identifier, which is not regenerated after successful login. The application fails to validate or rotate the session upon authentication. To solve: Hijack Carlos's session by injecting a known session ID during the OAuth redirect phase.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm bypass in auth token verification", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Auth Token Verification\", \"Lab Description\": \"This app validates JWT tokens using a vulnerable library that fails to enforce algorithm constraints. The JWT is signed with 'HS256', but the backend accepts 'none' and skips signature verification. To solve: Forge a token with 'none' algorithm, impersonate Carlos, and access his protected account area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where blind oauth token leakage in referer header injection", "target": "{\"Lab scenario\": \"Blind OAuth Token Leakage in Referer Header Injection\", \"Lab Description\": \"This OAuth flow redirects users to third-party domains after login. However, sensitive tokens are embedded in the Referer header due to improper scope isolation. The application fails to sanitize outbound redirects, leaking Carlos's OAuth token. To solve: Set up a malicious endpoint to intercept tokens and reuse the token to access Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation due to improperly handled session tokens. The application issues a session cookie before authentication and continues using it after successful login. To solve the lab, fixate a session for Carlos and access his account after he logs in.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login process\", \"Lab Description\": \"This lab is vulnerable to session fixation due to improperly handled session tokens. The application issues a session cookie before authentication and continues using it after successful login. To solve the lab, fixate a session for Carlos and access his account after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering vulnerability in session token validation", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in session token validation\", \"Lab Description\": \"This lab is vulnerable to JWT signature tampering via `alg: none`. The application fails to properly validate JWT tokens' signature algorithm. To solve the lab, forge a JWT with `alg: none` and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration vulnerability in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth misconfiguration vulnerability in redirect URI validation\", \"Lab Description\": \"The lab's OAuth implementation accepts arbitrary redirect URIs due to a flawed validation logic. The application uses OAuth for login but does not strictly validate registered redirect URIs. To solve the lab, obtain an access token for Carlos by injecting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion vulnerability in session token verification", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in session token verification\", \"Lab Description\": \"The application's authentication relies on JSON Web Tokens (JWT) for session validation. However, it insecurely trusts the algorithm header provided by the client, allowing an attacker to switch from 'RS256' to 'none' or 'HS256' and forge a valid token without the server's private key. The application signs session tokens with RSA but doesn't enforce algorithm validation. To solve: forge a JWT for the 'carlos' user and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 login flow improperly accepts any token issued by an untrusted Authorization Server without validation. The application does not validate the issuer (`iss`) claim, allowing attackers to craft an access token with 'carlos' as the subject. To solve: craft a forged OAuth token using a dummy authorization server and log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in third-party login endpoint\", \"Lab Description\": \"This lab's OAuth 2.0 login flow improperly accepts any token issued by an untrusted Authorization Server without validation. The application does not validate the issuer (`iss`) claim, allowing attackers to craft an access token with 'carlos' as the subject. To solve: craft a forged OAuth token using a dummy authorization server and log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session identifier in login endpoint", "target": "{\"Lab scenario\": \"Session fixation via predictable session identifier in login endpoint\", \"Lab Description\": \"The web application creates a session identifier before authentication, and does not issue a new one upon successful login. This allows attackers to predefine a session ID, share it with the victim, and later hijack the session. To solve: Fixate a session, lure the victim into using it, then log in with the same session to access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's authentication relies on JWTs for session validation. The server fails to enforce the algorithm specified in the token header and blindly trusts the signature when 'alg' is set to 'none'. The application fails to verify JWT signatures when the token's header declares 'none' as the algorithm, allowing an attacker to forge tokens. To solve: Forge a valid JWT for the user carlos and access their account page.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in session validation\", \"Lab Description\": \"This lab's authentication relies on JWTs for session validation. The server fails to enforce the algorithm specified in the token header and blindly trusts the signature when 'alg' is set to 'none'. The application fails to verify JWT signatures when the token's header declares 'none' as the algorithm, allowing an attacker to forge tokens. To solve: Forge a valid JWT for the user carlos and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable session IDs", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"This lab's session management is vulnerable to fixation. The server issues predictable session IDs that are not regenerated upon successful login. An attacker can set a victim's session identifier before they log in and then reuse it to hijack the session. To solve: Fixate a session for the user carlos, wait for them to authenticate, then reuse the session ID to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow misconfiguration", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"This lab's authentication relies on OAuth with implicit flow, but the client application fails to validate the 'state' parameter, making it vulnerable to CSRF-based token theft. The attacker can craft an authorization URL to leak the victim's token. To solve: Capture Carlos's OAuth token and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature verification bypass in token validation middleware", "target": "{\"Lab scenario\": \"JWT Signature Verification Bypass in Token Validation Middleware\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management but improperly trusts the 'alg' field from the token header. When this is set to 'none', the application skips signature verification. The application issues JWTs signed with a secret and expects a valid signature. To solve: Forge a valid token for 'carlos' by exploiting the 'none' algorithm bypass and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application implements OAuth 2.0 for third-party login using a redirect_uri parameter vulnerable to open redirection. An attacker can intercept the authorization code before token exchange. The application trusts user-controlled redirect URLs without validation. To solve: Steal Carlos's authorization code via a manipulated redirect_uri and log into his account.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Redirect Handler\", \"Lab Description\": \"The application implements OAuth 2.0 for third-party login using a redirect_uri parameter vulnerable to open redirection. An attacker can intercept the authorization code before token exchange. The application trusts user-controlled redirect URLs without validation. To solve: Steal Carlos's authorization code via a manipulated redirect_uri and log into his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via insecure cookie assignment in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Assignment in Login Flow\", \"Lab Description\": \"The application improperly assigns the session identifier before user authentication, allowing attackers to fixate a known session ID. The server does not regenerate the session token post-login. To solve: Fixate a session ID before login and trick Carlos into logging in, then reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature verification bypass in rest api login", "target": "{\"Lab scenario\": \"JWT signature verification bypass in REST API login\", \"Lab Description\": \"This lab's RESTful authentication mechanism uses JWTs but fails to verify the token signature correctly when the 'alg' field is manipulated. The application accepts JWTs from clients to grant access to protected resources. However, the backend incorrectly trusts unsigned tokens when the 'alg' is set to 'none'. To solve: craft and submit a forged token to access Carlos's protected account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session tokens in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens in login flow\", \"Lab Description\": \"This web application's login process is vulnerable to session fixation. The server fails to regenerate session tokens upon successful login, allowing an attacker to set a valid session ID in advance and hijack a victim's authenticated session. To solve: pre-set a session ID before login, then log in as Carlos using that fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 implementation misconfigures the allowed redirect URIs, failing to validate the domain properly. Attackers can manipulate the redirect URI to capture the authorization code for any user. To solve: hijack Carlos's authorization code and use it to obtain an access token and access his account page.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking authorization code via redirect URI manipulation\", \"Lab Description\": \"This lab's OAuth 2.0 implementation misconfigures the allowed redirect URIs, failing to validate the domain properly. Attackers can manipulate the redirect URI to capture the authorization code for any user. To solve: hijack Carlos's authorization code and use it to obtain an access token and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's session management mechanism uses JSON Web Tokens (JWT) for authentication but fails to securely verify the token's signature. The application uses a hardcoded secret and doesn't validate the algorithm properly. To solve: forge a valid admin token using the known public key and access the admin control panel.", "target": "{\"Lab scenario\": \"JWT token signature vulnerability in session management\", \"Lab Description\": \"This lab's session management mechanism uses JSON Web Tokens (JWT) for authentication but fails to securely verify the token's signature. The application uses a hardcoded secret and doesn't validate the algorithm properly. To solve: forge a valid admin token using the known public key and access the admin control panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit grant misconfiguration in login flow", "target": "{\"Lab scenario\": \"OAuth implicit grant misconfiguration in login flow\", \"Lab Description\": \"This lab simulates an OAuth-based login mechanism that incorrectly trusts user-supplied redirect URIs and fails to validate tokens properly. The application exposes the access token directly in the URL hash, allowing attackers to manipulate it. To solve: hijack an OAuth token using a crafted redirect URI and access the victim's protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation attack via url parameter in login endpoint", "target": "{\"Lab scenario\": \"Session fixation attack via URL parameter in login endpoint\", \"Lab Description\": \"This lab's login endpoint fails to regenerate session tokens after successful authentication, allowing attackers to set their own session ID via a URL parameter. If the session ID remains unchanged after login, attackers can predetermine the victim's session. To solve: fixate your session ID and access Carlos's account after forcing him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none algorithm bypass in authorization header", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Bypass in Authorization Header\", \"Lab Description\": \"This lab's authentication system uses JSON Web Tokens (JWT) for session management. The server-side JWT verification improperly trusts tokens with the `alg` field set to 'none'. The application signs user sessions, but fails to enforce algorithm validation during token parsing, allowing attackers to forge tokens without knowing the secret key. To solve: Log in as the 'carlos' user by crafting a valid JWT without the signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via URL Parameter in Login Flow", "target": "{\"Lab scenario\": \"Session Fixation via URL Parameter in Login Flow\", \"Lab Description\": \"This lab's session handling mechanism is vulnerable to fixation attacks. The session ID is accepted from a user-supplied URL parameter (`sessionId`) and assigned without regeneration upon login, enabling attackers to predetermine session IDs for victims. To solve: Log in as Carlos by fixing a session ID before authentication and reuse it post-login to hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration Token Leakage in Redirect URI", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Token Leakage in Redirect URI\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable due to overly permissive redirect URI validation. An attacker can manipulate the redirect URI parameter to leak authorization codes to a malicious domain. The OAuth server accepts partial matching on registered redirect URIs, making it possible to inject crafted URLs. To solve: Extract the OAuth token for Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session tokens in login flow", "target": "{\"Lab scenario\": \"Session Fixation via predictable session tokens in login flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability within the login mechanism. The application assigns session IDs prior to authentication but fails to regenerate them post-login, allowing an attacker to fixate a session. The application uses insecure random generation for the session token which is passed as a cookie. To solve: fixate Carlos's session and access his account by predefining the session ID before he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses JWT tokens for authentication but fails to properly enforce signature verification, accepting tokens with the algorithm field set to 'none'. The application trusts the header-supplied algorithm, allowing attackers to bypass authentication by supplying an unsigned token. To solve: forge a token for Carlos without needing the secret and log into his account.", "target": "{\"Lab scenario\": \"JWT token signature spoofing via 'none' algorithm\", \"Lab Description\": \"This lab uses JWT tokens for authentication but fails to properly enforce signature verification, accepting tokens with the algorithm field set to 'none'. The application trusts the header-supplied algorithm, allowing attackers to bypass authentication by supplying an unsigned token. To solve: forge a token for Carlos without needing the secret and log into his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth2 token leakage via referrer header in third-party redirect", "target": "{\"Lab scenario\": \"OAuth2 token leakage via referrer header in third-party redirect\", \"Lab Description\": \"This lab demonstrates insecure OAuth2 token handling. After successful authorization, the application redirects users to a third-party site, leaking the token in the Referer header. Attackers can capture the token from this third-party service and reuse it. To solve: capture Carlos's leaked OAuth token and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature spoof via algorithm confusion", "target": "{\"Lab scenario\": \"JWT signature spoof via algorithm confusion\", \"Lab Description\": \"This lab demonstrates an insecure JSON Web Token (JWT) validation implementation that incorrectly trusts the 'alg' header of incoming tokens. The application uses symmetric HMAC verification but allows switching the algorithm to 'none'. To solve: Craft a forged token to escalate to the 'admin' user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 flow is improperly designed, allowing an attacker to reuse a captured authorization code to hijack a user session. The application does not properly invalidate codes after first use. To solve: Steal and reuse a victim's authorization code to log in as that user.", "target": "{\"Lab scenario\": \"OAuth authorization code reuse\", \"Lab Description\": \"This lab's OAuth 2.0 flow is improperly designed, allowing an attacker to reuse a captured authorization code to hijack a user session. The application does not properly invalidate codes after first use. To solve: Steal and reuse a victim's authorization code to log in as that user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session ids", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"This lab simulates a session fixation vulnerability where the session identifier is predictable and not regenerated after login. The application uses user-controlled session IDs from URL parameters, allowing attackers to set a session ID before authentication. To solve: Fixate a session ID before login and hijack the authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login workflow", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login workflow\", \"Lab Description\": \"This lab's session management mechanism is flawed and allows session fixation attacks. The application issues session cookies prior to authentication and fails to assign new tokens upon successful login. To solve: Hijack Carlos's session by fixing the session identifier before he logs in, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in token validation", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token validation\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for session authentication but fails to enforce the correct cryptographic algorithm. An attacker can manipulate the token header to use 'none' as the algorithm and forge a valid session token. To solve: Forge a valid admin JWT and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth integration incorrectly trusts the 'state' parameter without proper validation. An attacker can intercept and modify this value to hijack authorization codes during the OAuth redirection. To solve: Manipulate the OAuth 'state' parameter to capture a valid authorization code and log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login flow\", \"Lab Description\": \"This lab's OAuth integration incorrectly trusts the 'state' parameter without proper validation. An attacker can intercept and modify this value to hijack authorization codes during the OAuth redirection. To solve: Manipulate the OAuth 'state' parameter to capture a valid authorization code and log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in session validation", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in session validation\", \"Lab Description\": \"This lab's authentication system uses JWTs for session management. The server uses the 'alg' field from the incoming token without proper validation, making it vulnerable to algorithm confusion. The application fails to enforce the intended HS256 signature verification when decoding JWTs, allowing attackers to switch the algorithm to 'none' and bypass signature verification entirely. To solve: Forge a valid session token for the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect uri manipulation in authorization flow", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in authorization flow\", \"Lab Description\": \"The application implements OAuth 2.0 for single sign-on (SSO) but lacks proper validation of the redirect_uri parameter. An attacker can manipulate this parameter to hijack an OAuth authorization code meant for another user. The application incorrectly trusts any user-supplied redirect_uri pointing to the same domain. To solve: Trick the application into sending an OAuth code for the user 'carlos' to your controlled endpoint, then exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab's session management logic fails to regenerate session tokens upon successful login. Attackers can fixate their own session ID and later reuse it to hijack authenticated user sessions. The application issues the session cookie before verifying user credentials, allowing the attacker to trick a victim into using the attacker's predefined session token. To solve: Fixate your session ID, trick the application into authenticating as Carlos, then reuse the session ID to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in authentication flow", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authentication flow\", \"Lab Description\": \"This lab's authentication mechanism is vulnerable to JWT algorithm confusion. The application accepts JSON Web Tokens for authentication but fails to enforce the expected signing algorithm, allowing an attacker to switch from asymmetric RS256 to symmetric HS256. The application does not validate the secret when HS256 is used. To solve: forge a valid JWT for the user 'carlos' and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation due to improper handling of session cookies. The application accepts user-supplied session tokens and fails to regenerate them upon authentication. An attacker can set a known session ID before login, which will persist across privilege escalation. To solve: fix a session ID and log in as the victim user 'carlos' using the same session.", "target": "{\"Lab scenario\": \"Session fixation via insecure cookie handling\", \"Lab Description\": \"This lab is vulnerable to session fixation due to improper handling of session cookies. The application accepts user-supplied session tokens and fails to regenerate them upon authentication. An attacker can set a known session ID before login, which will persist across privilege escalation. To solve: fix a session ID and log in as the victim user 'carlos' using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth token misconfiguration in third-party login", "target": "{\"Lab scenario\": \"OAuth token misconfiguration in third-party login\", \"Lab Description\": \"This lab's OAuth login flow improperly trusts the 'sub' claim from a third-party provider without validating issuer or audience fields, allowing impersonation of other users. To solve: forge a valid ID Token with 'sub' set to Carlos and log in via OAuth to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via Pre-Login Cookie Reuse", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Login Cookie Reuse\", \"Lab Description\": \"The login flow of this web app allows a pre-authenticated session ID to persist after a successful login, leading to session fixation. The application does not regenerate session identifiers after login, allowing attackers to set a session beforehand. To solve: Hijack Carlos's session using a pre-set session ID cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Algorithm Confusion in Authorization Header", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Authorization Header\", \"Lab Description\": \"The app uses JWTs for session management but does not enforce a strong algorithm check. It accepts unsigned tokens if the 'alg' header is modified to 'none'. The application verifies JWTs based on the 'alg' field without checking signature integrity. To solve: Forge an admin token using alg:none and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leakage in redirect url", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leakage in Redirect URL\", \"Lab Description\": \"The web application uses the OAuth 2.0 implicit flow and allows open redirection in the redirect_uri parameter. This enables token leakage through an attacker-controlled URL. The application trusts user-controlled redirect URIs without validating the domain. To solve: Leak Carlos's token to an attacker domain and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application implements a flawed session handling mechanism that accepts user-provided session IDs via URL query parameters. When users log in, the session ID from the URL is reused, allowing attackers to predefine a session and force victims to use it. To solve: Hijack Carlos's session by crafting a valid login link that fixes the session ID.", "target": "{\"Lab scenario\": \"Session fixation in URL parameter during login\", \"Lab Description\": \"The application implements a flawed session handling mechanism that accepts user-provided session IDs via URL query parameters. When users log in, the session ID from the URL is reused, allowing attackers to predefine a session and force victims to use it. To solve: Hijack Carlos's session by crafting a valid login link that fixes the session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt authentication bypass via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for authentication. It trusts the 'alg' header of incoming tokens without validation. If the algorithm is set to 'none', the server skips signature verification. To solve: Forge a JWT token with 'none' algorithm to gain access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration with open redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect\", \"Lab Description\": \"The application uses OAuth for authentication but fails to validate the redirect_uri parameter strictly. An attacker can manipulate this parameter to redirect the OAuth authorization code to their own server and steal access tokens. To solve: Capture Carlos's access token by injecting a malicious redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: REST API JWT authentication bypass via weak secret", "target": "{\"Lab scenario\": \"REST API JWT authentication bypass via weak secret\", \"Lab Description\": \"The application uses JWT tokens to authenticate API users. It signs tokens using a weak secret and does not validate the 'alg' claim properly. The application exposes an endpoint that echoes back the token payload for debugging. To solve: craft a forged JWT token that grants admin access and use it to access the protected /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow access token leak in referer header", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Access Token Leak in Referer Header\", \"Lab Description\": \"The application uses the OAuth 2.0 Implicit flow for authentication. After login, it redirects the user to a third-party domain while leaking the access token in the Referer header. To solve: intercept and steal Carlos’s OAuth access token via a malicious redirect URI, then use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application generates a session ID in a cookie before login and fails to regenerate it after authentication. The session ID is predictable and can be fixed prior to victim login. To solve: set a session ID for the victim, trick them into logging in, then reuse the same ID to access their session.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login endpoint\", \"Lab Description\": \"The application generates a session ID in a cookie before login and fails to regenerate it after authentication. The session ID is predictable and can be fixed prior to victim login. To solve: set a session ID for the victim, trick them into logging in, then reuse the same ID to access their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering vulnerability in authorization header handling", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization header handling\", \"Lab Description\": \"This lab involves a vulnerable REST API that authenticates users based on JWTs passed via the Authorization header. The server does not verify the token signature. The application decodes the token and grants access based solely on the 'role' claim. To solve: craft a tampered JWT with elevated privileges to access the /admin/data endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in authorization code grant exchange", "target": "{\"Lab scenario\": \"OAuth misconfiguration in authorization code grant exchange\", \"Lab Description\": \"This lab uses the OAuth 2.0 authorization code grant flow. The application does not validate the `redirect_uri` during the token exchange, allowing an attacker to intercept the authorization code. To solve: hijack the OAuth flow to gain an access token for Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab implements session-based authentication using a fixed session ID passed as a cookie. The application does not regenerate session IDs upon login, enabling session fixation attacks. To solve: set a session ID cookie before login, then trick Carlos into logging in with it and reuse the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering using alg=none in authorization header", "target": "{\"Lab scenario\": \"JWT tampering using alg=none in Authorization header\", \"Lab Description\": \"This lab's authentication mechanism relies on JSON Web Tokens (JWTs) passed in the Authorization header. The server trusts the JWT without verifying the signature if the algorithm is set to 'none'. This allows tampering with token content. The application uses the JWT's 'role' claim to grant admin access. To solve: Modify the JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login flow using predictable session id", "target": "{\"Lab scenario\": \"Session fixation in login flow using predictable session ID\", \"Lab Description\": \"This lab suffers from a session fixation vulnerability. The session ID is set before login and remains unchanged after authentication. The attacker can pre-generate a session ID and trick the victim into using it. After the victim logs in, the attacker hijacks the session. To solve: Fixate Carlos's session and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration via open redirect leads to token theft", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect leads to token theft\", \"Lab Description\": \"This lab's OAuth implementation incorrectly trusts arbitrary redirect_uris during the OAuth flow. By supplying a malicious redirect URI, an attacker can intercept the authorization code and exchange it for an access token. To solve: Capture Carlos's access token and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: restful jwt tampering in login endpoint", "target": "{\"Lab scenario\": \"RESTful JWT tampering in login endpoint\", \"Lab Description\": \"The application uses a JWT for authentication and verifies it using a public key. However, the algorithm field in the token header is not validated correctly, allowing attackers to manipulate it. The application blindly trusts unsigned tokens when 'alg' is set to 'none'. To solve: log in as the admin user and access the dashboard endpoint using a tampered token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application integrates third-party OAuth authentication but fails to validate redirect URIs. An attacker can craft an authorization URL with an open redirect in the redirect_uri parameter to intercept the authorization code. To solve: obtain the victim's authorization code and exchange it for an access token, then retrieve their email.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect in redirect_uri\", \"Lab Description\": \"This application integrates third-party OAuth authentication but fails to validate redirect URIs. An attacker can craft an authorization URL with an open redirect in the redirect_uri parameter to intercept the authorization code. To solve: obtain the victim's authorization code and exchange it for an access token, then retrieve their email.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The SOAP-based login endpoint accepts pre-set session IDs via cookies. The application does not regenerate session IDs after login. This allows an attacker to fix the session ID before victim logs in, then reuse it to impersonate the session. To solve: Fix a session ID, trick the victim to use it, and access the /myAccount endpoint as the victim.", "target": "{\"Lab scenario\": \"SOAP API session fixation via pre-set cookie\", \"Lab Description\": \"The SOAP-based login endpoint accepts pre-set session IDs via cookies. The application does not regenerate session IDs after login. This allows an attacker to fix the session ID before victim logs in, then reuse it to impersonate the session. To solve: Fix a session ID, trick the victim to use it, and access the /myAccount endpoint as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab demonstrates session fixation where the session ID is accepted from the user's request instead of being regenerated after login. The application uses a session token passed as a cookie and fails to rotate it after successful authentication, allowing attackers to hijack sessions. To solve: Fixate Carlos's session, then login as him using a pre-set session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt signature bypass using 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm\", \"Lab Description\": \"This lab uses JWT tokens for authentication but fails to properly validate the algorithm field. It accepts tokens with the 'none' algorithm, allowing attackers to craft arbitrary tokens without a valid signature. To solve: Forge a token to impersonate Carlos and access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect_uri validation", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation\", \"Lab Description\": \"This lab simulates a vulnerable OAuth login where the redirect_uri is not properly validated. By manipulating the redirect_uri parameter, an attacker can intercept tokens issued to users. To solve: Steal Carlos's token and access the protected resource as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses session cookies to manage user authentication, but fails to regenerate them after login. A malicious actor can fix a known session ID before login, and force the victim to authenticate using it. The application reflects session IDs without regenerating them. To solve: hijack Carlos's session by fixing the session ID before he logs in.", "target": "{\"Lab scenario\": \"Session fixation via pre-set session cookie\", \"Lab Description\": \"The application uses session cookies to manage user authentication, but fails to regenerate them after login. A malicious actor can fix a known session ID before login, and force the victim to authenticate using it. The application reflects session IDs without regenerating them. To solve: hijack Carlos's session by fixing the session ID before he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in authentication tokens", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authentication tokens\", \"Lab Description\": \"The app uses JWTs to authenticate users, but allows algorithm tampering in the header. It incorrectly trusts the 'alg' claim and accepts unsigned tokens when 'none' is specified. To solve: forge a valid token for Carlos without a signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses OAuth to log in users via a third-party provider. However, it fails to validate the redirect_uri parameter correctly, enabling attackers to steal tokens. The app reflects the redirect_uri without whitelisting. To solve: intercept the OAuth flow and capture Carlos's token.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The application uses OAuth to log in users via a third-party provider. However, it fails to validate the redirect_uri parameter correctly, enabling attackers to steal tokens. The app reflects the redirect_uri without whitelisting. To solve: intercept the OAuth flow and capture Carlos's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where insecure jwt validation in authorization header (none algorithm tampering)", "target": "{\"Lab scenario\": \"Insecure JWT validation in Authorization header (None algorithm tampering)\", \"Lab Description\": \"The application uses JWTs for user authentication and includes the token in the Authorization header. The server does not correctly verify the algorithm used to sign the JWT. The application trusts unsigned tokens if they specify 'alg':'none'. To solve: craft a tampered token impersonating 'carlos' and access the protected profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leads to token hijacking via redirect_uri manipulation", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to token hijacking via redirect_uri manipulation\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party login integration. It implements the implicit flow and allows redirect_uri values to be manipulated without proper validation. An attacker can craft a malicious authorization URL to intercept access tokens. To solve: extract a valid access token for carlos and use it to access the user's dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Authentication lab for: session fixation vulnerability in graphql login mutation", "target": "{\"Lab scenario\": \"Session fixation vulnerability in GraphQL login mutation\", \"Lab Description\": \"The application uses a GraphQL endpoint for login, but does not invalidate the session token upon authentication. This allows an attacker to set a fixed session before the victim logs in. To solve: Fixate a session, trick the victim into logging in, then reuse the session ID to access the user's data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt signature bypass in authorization header", "target": "{\"Lab scenario\": \"JWT signature bypass in authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for user session management. It decodes the token and verifies it using the algorithm specified in the token header. The implementation trusts the 'alg' field from user-controlled input, making it vulnerable to algorithm confusion. The application treats unsigned tokens as valid. To solve: forge an unsigned JWT to impersonate the admin user and access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"The application issues a session cookie before authentication and does not regenerate the session ID after login. This allows an attacker to fix the session ID of a victim. The attacker can trick a victim into using a known session ID, and once they log in, the attacker can use the same session ID to hijack the session. To solve: gain access to Carlos's account using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth token theft using open redirect in callback url", "target": "{\"Lab scenario\": \"OAuth token theft using open redirect in callback URL\", \"Lab Description\": \"The application uses OAuth 2.0 with an implicit flow and accepts arbitrary redirect URIs after authorization. This introduces an open redirect vulnerability. An attacker can steal the access token by injecting a malicious redirect URL in the OAuth flow. To solve: craft a malicious OAuth URL that redirects the access token to an attacker-controlled domain and extract the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering vulnerability in session validation middleware", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in session validation middleware\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management. However, it incorrectly trusts the 'alg' field in the JWT header without enforcing strict validation. The application uses these tokens to identify authenticated users. To solve: Forge a valid JWT for the user 'carlos' and access their My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This application mishandles session IDs and does not issue a new session upon successful authentication. The attacker can set a fixed session ID before login and trick a victim into logging in with that same session. To solve: Log in as Carlos by forcing a session ID and reusing it post-login.", "target": "{\"Lab scenario\": \"Session fixation via pre-authenticated session reuse in login handler\", \"Lab Description\": \"This application mishandles session IDs and does not issue a new session upon successful authentication. The attacker can set a fixed session ID before login and trick a victim into logging in with that same session. To solve: Log in as Carlos by forcing a session ID and reusing it post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect uri manipulation in authorization endpoint", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in authorization endpoint\", \"Lab Description\": \"This application implements OAuth2 authorization but fails to strictly validate redirect URIs, allowing attackers to manipulate the flow and steal access tokens. The authorization server trusts unvalidated 'redirect_uri' values. To solve: Capture a valid OAuth token for Carlos and use it to call the protected /api/user endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering vulnerability in session management", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in session management\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. However, it fails to properly verify the token's signature. The `alg` field in the JWT header is set to `none`, and the application accepts tokens without verifying their integrity. The application trusts all fields in the token, including the `username` claim. To solve: Forge a JWT that impersonates the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth token misconfiguration in api gateway authorization", "target": "{\"Lab scenario\": \"OAuth token misconfiguration in API gateway authorization\", \"Lab Description\": \"The API gateway uses OAuth tokens for authorization. However, it fails to validate the 'aud' claim in the access token. This allows an attacker to reuse a token issued for a different client (token confusion). To solve: Use a valid OAuth access token from your own app and access the protected endpoint of a privileged client to view Carlos's email address.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation vulnerability in login handler", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login handler\", \"Lab Description\": \"The application assigns session identifiers before authentication and does not regenerate them after login. This allows an attacker to set a fixed session and trick a victim into logging in under a known session ID. The attacker can then hijack the session. To solve: Fix a session, get Carlos to authenticate into it, and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in api authorization", "target": "{\"Lab scenario\": \"JWT algorithm confusion in API authorization\", \"Lab Description\": \"This lab exposes a REST API that uses JSON Web Tokens (JWTs) to control access. The server trusts the 'alg' field in the JWT header and does not validate its signature properly when 'alg' is set to 'none'. The application accepts user-supplied tokens without enforcing signature validation. To solve: craft a forged token to impersonate the admin user and access the protected /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab has a vulnerable login flow where session identifiers are issued before authentication and not regenerated after login. The session ID is predictable and can be shared across users. The application sets a cookie named session_id which is trusted without being rotated post-login. To solve: fix a session ID before login and force the victim to use it to hijack their authenticated session.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab has a vulnerable login flow where session identifiers are issued before authentication and not regenerated after login. The session ID is predictable and can be shared across users. The application sets a cookie named session_id which is trusted without being rotated post-login. To solve: fix a session ID before login and force the victim to use it to hijack their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration token reuse attack", "target": "{\"Lab scenario\": \"OAuth misconfiguration token reuse attack\", \"Lab Description\": \"This lab simulates an OAuth authorization server that fails to validate audience claims (aud) on access tokens. As a result, tokens issued for one client can be reused against another. The client application does not verify whether the token was issued for its own audience. To solve: use a token issued for one OAuth client to access a protected endpoint in another context.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements a login flow that improperly handles session tokens. The application creates a session ID before authentication and does not regenerate it upon successful login. An attacker can abuse this behavior to fix their own session ID on a victim’s account. To solve: Hijack Carlos’s session by forcing a session ID fixation and access his account page.", "target": "{\"Lab scenario\": \"Session fixation via flawed login redirect\", \"Lab Description\": \"This lab implements a login flow that improperly handles session tokens. The application creates a session ID before authentication and does not regenerate it upon successful login. An attacker can abuse this behavior to fix their own session ID on a victim’s account. To solve: Hijack Carlos’s session by forcing a session ID fixation and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion leading to privilege escalation", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to privilege escalation\", \"Lab Description\": \"This lab uses JWT for session management but accepts unsigned tokens by trusting the 'alg' value from the token header. This allows attackers to change the algorithm to 'none' and forge tokens with elevated privileges. To solve: Craft a forged token granting admin privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leaking authorization codes", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking authorization codes\", \"Lab Description\": \"This lab uses OAuth for third-party login but fails to validate the redirect_uri properly. An attacker can abuse this to capture an authorization code meant for another user. To solve: Hijack Carlos’s OAuth code and use it to log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application improperly handles session identifiers during login, allowing a pre-auth session token to persist after authentication. The application sets a session cookie before authentication and does not regenerate it upon successful login. To solve: Hijack a logged-in session by fixing the session ID prior to user authentication.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated token reuse in REST login flow\", \"Lab Description\": \"The application improperly handles session identifiers during login, allowing a pre-auth session token to persist after authentication. The application sets a session cookie before authentication and does not regenerate it upon successful login. To solve: Hijack a logged-in session by fixing the session ID prior to user authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt token signature spoofing using 'none' algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT token signature spoofing using 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs for stateless session management but fails to enforce proper signature verification. The JWT validation logic accepts 'alg: none', allowing tampering of token payload. To solve: Forge a JWT for user carlos with 'admin: true' and access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect on callback endpoint", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect on callback endpoint\", \"Lab Description\": \"The application uses OAuth for third-party login, but the redirect_uri parameter is not properly validated. This allows attackers to manipulate the OAuth flow and leak authorization codes or access tokens to malicious domains. To solve: Capture Carlos’s access token via redirect hijack and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via none algorithm in Authorization header", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in Authorization header\", \"Lab Description\": \"The application implements JWT-based authorization but does not properly validate the signing algorithm. It accepts tokens with the 'alg' field set to 'none', allowing attackers to craft unsigned tokens. The application processes JWTs sent via the 'Authorization: Bearer' header. To solve: forge a valid JWT for the user 'carlos' and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login endpoint", "target": "{\"Lab scenario\": \"Session fixation via login endpoint\", \"Lab Description\": \"The session ID is generated and sent to the client before authentication. Upon successful login, the same session ID is preserved instead of issuing a new one. This allows an attacker to fix a session ID for the victim. To solve: fix the session ID before Carlos logs in, then use the same session to access his account after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow redirection manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow redirection manipulation\", \"Lab Description\": \"The app uses OAuth implicit flow for authentication. The redirection URL validation is flawed, allowing attackers to steal tokens by injecting a malicious redirect_uri. The app accepts OAuth token from third-party providers and uses them to authenticate users via GET /oauth/callback. To solve: hijack Carlos’s token by crafting a malicious redirect_uri that sends the token to your server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API backend uses JWT for authentication, but fails to validate the signature properly when the `alg` header is manipulated. The application uses the token directly from the Authorization header to identify users without verifying the token's integrity. To solve: Forge a valid JWT token that grants admin access by bypassing the signature verification logic.", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in API Token Validation\", \"Lab Description\": \"The API backend uses JWT for authentication, but fails to validate the signature properly when the `alg` header is manipulated. The application uses the token directly from the Authorization header to identify users without verifying the token's integrity. To solve: Forge a valid JWT token that grants admin access by bypassing the signature verification logic.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The login flow uses a static session token passed in a GET parameter without proper regeneration after login. This allows a malicious actor to predetermine the victim's session ID. The application reflects the token into a cookie without regenerating it post-authentication. To solve: Fix the victim's session ID, force a login, and then reuse the session.", "target": "{\"Lab scenario\": \"Session Fixation in Login Token Parameter\", \"Lab Description\": \"The login flow uses a static session token passed in a GET parameter without proper regeneration after login. This allows a malicious actor to predetermine the victim's session ID. The application reflects the token into a cookie without regenerating it post-authentication. To solve: Fix the victim's session ID, force a login, and then reuse the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in token exchange endpoint", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Exchange Endpoint\", \"Lab Description\": \"The lab uses an OAuth provider for authentication but fails to validate the `redirect_uri` and `client_id` parameters. This enables an attacker to manipulate the authorization flow and exchange an arbitrary `code` for a victim’s token. To solve: Hijack an access token using a rogue redirect URI and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWTs for session management but fails to validate the token signature correctly when the `alg` header is set to 'none'. The backend simply decodes the payload and grants access without cryptographic verification. To solve: forge a valid token for the user 'admin' and access the /admin dashboard.", "target": "{\"Lab scenario\": \"JWT signature verification bypass in Authorization middleware\", \"Lab Description\": \"The application uses JWTs for session management but fails to validate the token signature correctly when the `alg` header is set to 'none'. The backend simply decodes the payload and grants access without cryptographic verification. To solve: forge a valid token for the user 'admin' and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: open redirect in oauth flow in redirect_uri parameter", "target": "{\"Lab scenario\": \"Open redirect in OAuth flow in redirect_uri parameter\", \"Lab Description\": \"This lab’s OAuth implementation contains an open redirect vulnerability in the `redirect_uri` parameter. The authorization server does not validate the redirect destination properly. To solve: steal the OAuth authorization code of another user by injecting a crafted redirect_uri that forwards the code to your attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login endpoint via cookie injection", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint via cookie injection\", \"Lab Description\": \"The login flow does not generate a new session upon authentication. This allows attackers to set a known session ID before login, then trick a victim into logging in with it. To solve: fixate a known session ID for Carlos and access /my-account using the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab contains a session fixation vulnerability in the login flow. The application reuses the session identifier set prior to authentication. The application sets a session cookie before login and does not regenerate it upon successful authentication. To solve: log in as Carlos by leveraging a fixed session identifier to hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt token tampering via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT token tampering via 'none' algorithm\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for user sessions but fails to enforce a valid signing algorithm. It accepts tokens signed with 'none', allowing users to forge tokens without a signature. To solve: Forge a JWT with 'admin' privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect in redirect_uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect in redirect_uri\", \"Lab Description\": \"This lab implements OAuth 2.0 login using a third-party provider but fails to validate redirect_uri properly. An attacker can inject an external redirect to exfiltrate tokens. To solve: Steal an access token by exploiting an open redirect and use it to access Carlos’s profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in REST-based login flow", "target": "{\"Lab scenario\": \"Session Fixation in REST-based login flow\", \"Lab Description\": \"This lab implements RESTful authentication via session cookies but fails to regenerate the session ID upon successful login. The application incorrectly trusts session state established prior to login. To solve: Fixate a session for Carlos and gain access to his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt none algorithm authentication bypass", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass\", \"Lab Description\": \"The app uses JSON Web Tokens for user sessions but fails to validate the JWT signature algorithm properly. It accepts unsigned tokens if 'alg' is set to 'none'. To solve: Modify the JWT to impersonate Carlos without a valid signature and access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration with Open Redirect in Callback", "target": "{\"Lab scenario\": \"OAuth Misconfiguration with Open Redirect in Callback\", \"Lab Description\": \"This app uses OAuth2 with an authorization code grant flow. However, the redirect_uri parameter is not properly validated, allowing redirection to attacker-controlled domains. To solve: Steal the authorization code of Carlos via a crafted OAuth login URL and gain access to his token-protected account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The login functionality improperly trusts pre-authentication session tokens. The application fails to issue a new session identifier upon successful login. To solve: fixate a session ID before login and use it to access Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering vulnerability in token verification endpoint", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in token verification endpoint\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for authentication but fails to validate the algorithm field securely. The server accepts tokens with the algorithm set to 'none', leading to authentication bypass. To solve: forge a valid JWT that grants admin access without a signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in implicit grant flow", "target": "{\"Lab scenario\": \"OAuth misconfiguration in implicit grant flow\", \"Lab Description\": \"The OAuth implementation uses the implicit flow with weak redirect URI validation, enabling token theft via open redirection. The application trusts redirect URIs from user input. To solve: craft a malicious redirect to steal Carlos’s access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token signature verification bypass in login endpoint", "target": "{\"Lab scenario\": \"JWT token signature verification bypass in login endpoint\", \"Lab Description\": \"The application's JWT authentication mechanism incorrectly trusts the 'alg' header provided by the client. The server uses a public key but does not enforce the expected algorithm. The application signs JWT tokens using RS256, but accepts tokens where the algorithm is changed to HS256. To solve: Craft a JWT with the alg header set to HS256 and sign it using the public key as the HMAC secret to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation vulnerability in oauth 2.0 callback handler", "target": "{\"Lab scenario\": \"Session fixation vulnerability in OAuth 2.0 callback handler\", \"Lab Description\": \"The OAuth implementation fails to generate a new session upon successful login. Attackers can craft a login URL with a fixed session ID and trick users into authenticating with it. The application binds the victim's account to an attacker-controlled session. To solve: Fixate a session for Carlos by generating a session ahead of time, initiating OAuth flow with that session, and capturing his authenticated session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: verbose error leakage in multi-step graphql auth process", "target": "{\"Lab scenario\": \"Verbose error leakage in multi-step GraphQL auth process\", \"Lab Description\": \"The application's GraphQL login mutation leaks detailed error messages that help enumerate valid users and token states. The GraphQL API responds differently when incorrect usernames or passwords are provided. To solve: Enumerate a valid user, retrieve a temporary token from a leaked error, and escalate access via an unprotected token mutation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login flow", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"This lab's login flow is vulnerable to session fixation due to the reuse of session identifiers before and after authentication. The application issues a session ID on initial visit and fails to regenerate it after successful login. To solve: hijack Carlos's session using a pre-set session ID to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab uses JSON Web Tokens for session management. It improperly supports the 'none' algorithm and accepts unsigned tokens. The application uses JWTs stored in a cookie to manage sessions but fails to validate signatures correctly. To solve: craft a token for Carlos using the none algorithm and access his profile.", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Bypass\", \"Lab Description\": \"This lab uses JSON Web Tokens for session management. It improperly supports the 'none' algorithm and accepts unsigned tokens. The application uses JWTs stored in a cookie to manage sessions but fails to validate signatures correctly. To solve: craft a token for Carlos using the none algorithm and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth2 Redirect URI Manipulation", "target": "{\"Lab scenario\": \"OAuth2 Redirect URI Manipulation\", \"Lab Description\": \"This lab integrates OAuth2 for social login but allows arbitrary redirection via open redirect in the redirect_uri parameter. The application does not validate the redirect URI domain properly. To solve: trick the app into redirecting to a malicious endpoint to steal Carlos’s token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API uses JWT tokens for user authorization. However, it trusts the 'alg' header in incoming tokens, enabling algorithm confusion attacks. The application accepts tokens signed with 'none' algorithm, bypassing signature validation. To solve: Forge a token granting admin access and retrieve the admin panel contents.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in API authorization\", \"Lab Description\": \"The API uses JWT tokens for user authorization. However, it trusts the 'alg' header in incoming tokens, enabling algorithm confusion attacks. The application accepts tokens signed with 'none' algorithm, bypassing signature validation. To solve: Forge a token granting admin access and retrieve the admin panel contents.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The web application issues a session cookie to all visitors, including unauthenticated ones. However, it fails to rotate the session cookie upon successful login. This enables a session fixation attack. To solve: Fixate Carlos’s session cookie prior to login and hijack his session after authentication.", "target": "{\"Lab scenario\": \"Session fixation via unrotated session cookie after login\", \"Lab Description\": \"The web application issues a session cookie to all visitors, including unauthenticated ones. However, it fails to rotate the session cookie upon successful login. This enables a session fixation attack. To solve: Fixate Carlos’s session cookie prior to login and hijack his session after authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect and auto approval", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and auto approval\", \"Lab Description\": \"The application implements OAuth with a third-party identity provider but fails to validate the 'redirect_uri' parameter and automatically grants access tokens. This misconfiguration enables attackers to steal tokens via malicious redirects. To solve: Craft a malicious URL to capture Carlos’s OAuth token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in token validation logic", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation logic\", \"Lab Description\": \"The application uses JWTs to maintain session state but fails to validate the token's algorithm correctly. The backend blindly trusts the `alg` field in the token header. The application accepts unsigned tokens when the `alg` is set to `none`. To solve: Forge a valid token to access Carlos's account without knowing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session token in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session token in login flow\", \"Lab Description\": \"The application generates session IDs before authentication and does not invalidate them after login. A malicious user can set a known session ID, get the victim to use it, then hijack the session after they log in. To solve: Log in as Carlos by setting and reusing a fixed session cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit grant misconfiguration leaking access token via referer", "target": "{\"Lab scenario\": \"OAuth implicit grant misconfiguration leaking access token via referer\", \"Lab Description\": \"The app implements OAuth using the implicit flow, but includes a third-party analytics script that logs full Referer headers. Since access tokens are returned in the URL fragment, these tokens leak to third-party domains. To solve: Capture Carlos's leaked access token and use it to access his account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion attack in rest login api", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in REST login API\", \"Lab Description\": \"This lab’s login functionality accepts JWTs for authentication but fails to enforce proper algorithm validation. The application trusts tokens signed with 'none' algorithm. To solve: forge a JWT token impersonating the user 'carlos' and access their profile page via /api/profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in OAuth login flow", "target": "{\"Lab scenario\": \"Session fixation in OAuth login flow\", \"Lab Description\": \"This lab is vulnerable to session fixation during OAuth-based third-party login. The application fails to issue a new session token post-authentication. To solve: authenticate as yourself, fix a session ID, and force the victim (Carlos) to reuse the session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where blind 2fa brute-force with timing side-channel", "target": "{\"Lab scenario\": \"Blind 2FA brute-force with timing side-channel\", \"Lab Description\": \"The 2FA mechanism leaks processing time differences for valid codes. The backend takes longer to process correct digits. To solve: use timing analysis to brute-force Carlos's 6-digit 2FA code and access his account via /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT none algorithm tampering in API auth header", "target": "{\"Lab scenario\": \"JWT none algorithm tampering in API auth header\", \"Lab Description\": \"The API uses JWT-based authentication for sensitive endpoints but fails to validate the algorithm used. The application decodes and accepts tokens with `alg: none` without proper signature verification. To solve: Forge a valid JWT that grants admin privileges and access the protected /admin/report endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leak in redirect URI", "target": "{\"Lab scenario\": \"OAuth implicit flow token leak in redirect URI\", \"Lab Description\": \"The application integrates OAuth2 login using the implicit flow and allows open redirection through the `redirect_uri` parameter. The access token is leaked via URL fragment and reflected in the redirect. To solve: Intercept the OAuth flow and capture Carlos's token using a crafted redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via insecure session ID reuse in cookie", "target": "{\"Lab scenario\": \"Session fixation via insecure session ID reuse in cookie\", \"Lab Description\": \"The application allows users to set their own session ID via a cookie prior to authentication. Upon login, the session ID is not regenerated. An attacker can set a known session value and trick a victim into logging in using it. To solve: Fix a session ID and use it to hijack Carlos's session after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering using 'alg: none' in authorization header", "target": "{\"Lab scenario\": \"JWT tampering using 'alg: none' in Authorization header\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for user authentication and authorizes access via Bearer tokens. The backend relies on the JWT's `alg` field to determine signature verification. The application fails to enforce algorithm restrictions, allowing manipulation of the `alg` field to 'none' and bypassing signature verification. To solve: tamper with your JWT to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab's login system is vulnerable to session fixation. Session IDs are accepted via URL parameters and not regenerated upon successful login. The application trusts client-supplied session tokens, enabling an attacker to set a victim's session before login. To solve: set a session token for Carlos, trick him into logging in, then reuse his session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfiguration with open redirect", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration with open redirect\", \"Lab Description\": \"The OAuth implementation in this app uses the implicit grant flow without validating redirect URIs correctly. The app also accepts open redirects. By chaining these issues, an attacker can steal access tokens by injecting a malicious redirect URI. To solve: steal Carlos’s OAuth token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses JSON Web Tokens (JWT) to manage user sessions. However, it incorrectly validates the token signature due to the use of the 'none' algorithm. The application trusts the user-submitted token without verifying its integrity, enabling privilege escalation via token tampering. To solve: Forge a valid token that grants admin-level access and use it to access the admin panel.", "target": "{\"Lab scenario\": \"JWT token manipulation vulnerability in session authorization\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) to manage user sessions. However, it incorrectly validates the token signature due to the use of the 'none' algorithm. The application trusts the user-submitted token without verifying its integrity, enabling privilege escalation via token tampering. To solve: Forge a valid token that grants admin-level access and use it to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id in cookie management", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in cookie management\", \"Lab Description\": \"This lab uses a session cookie to maintain user authentication states. However, the session ID is set before login and is not regenerated upon successful authentication, allowing an attacker to fix a session for a victim before they log in. To solve: Fix a session for Carlos, make him log in, then reuse the session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party login endpoint", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login endpoint\", \"Lab Description\": \"This lab uses OAuth for federated login through a third-party provider. However, the redirect URI is not strictly validated, allowing an attacker to manipulate the redirection flow and gain access to a valid session. To solve: Exploit the redirect_uri parameter to hijack a session token from the OAuth flow and log in as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack in login flow", "target": "{\"Lab scenario\": \"Session fixation attack in login flow\", \"Lab Description\": \"The session management in this application fails to regenerate session identifiers after login. The application accepts pre-set session cookies from unauthenticated users and continues to use the same session after successful login. To solve: hijack a logged-in session by fixing the session token prior to user authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt signature bypass in authorization header", "target": "{\"Lab scenario\": \"JWT signature bypass in authorization header\", \"Lab Description\": \"The application uses JWTs for user authentication but fails to validate the signing algorithm securely. It accepts tokens signed using the 'none' algorithm without verifying the signature. The application trusts any decoded payload blindly. To solve: craft a forged JWT that impersonates the admin user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth token leakage in redirect URI handler", "target": "{\"Lab scenario\": \"OAuth token leakage in redirect URI handler\", \"Lab Description\": \"This application uses OAuth for authentication, but its redirect URI handler is improperly configured and does not validate the 'state' parameter. An attacker can perform an open redirect and intercept the access token. To solve: steal the OAuth token issued to Carlos and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The login endpoint accepts JWTs for authentication. The backend library fails to properly validate the 'alg' field, allowing an attacker to switch from a signed algorithm (e.g. HS256) to 'none'. The application trusts the JWT's payload without verifying its authenticity. To solve: Forge a JWT for user 'carlos' using the 'none' algorithm and access the My account page.", "target": "{\"Lab scenario\": \"JWT signature spoof via algorithm confusion in login API\", \"Lab Description\": \"The login endpoint accepts JWTs for authentication. The backend library fails to properly validate the 'alg' field, allowing an attacker to switch from a signed algorithm (e.g. HS256) to 'none'. The application trusts the JWT's payload without verifying its authenticity. To solve: Forge a JWT for user 'carlos' using the 'none' algorithm and access the My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable session tokens in login redirect", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens in login redirect\", \"Lab Description\": \"The application initializes session tokens before login and fails to regenerate them after successful authentication. The token remains fixed across the login flow. To solve: Set a known session ID before login, then force a victim (Carlos) to authenticate, hijack their session, and access the My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leaks authorization code via referer", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaks authorization code via Referer\", \"Lab Description\": \"The OAuth implementation leaks sensitive tokens through HTTP Referer headers. The app includes a third-party analytics script which causes unintentional leakage. To solve: Intercept the OAuth flow and extract Carlos’s authorization code from the Referer header when redirected to a malicious domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt secret key vulnerability in api authentication", "target": "{\"Lab scenario\": \"JWT secret key vulnerability in API authentication\", \"Lab Description\": \"The application's REST API uses JWTs for user authentication but fails to validate tokens securely. It uses a weak, guessable HMAC secret. The application trusts tokens even when re-signed with an attacker-supplied secret. To solve: Forge a valid admin JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application does not issue a new session ID upon successful login, allowing session fixation attacks. Attackers can pre-set session tokens and force victims to authenticate using them. To solve: Fixate a session for Carlos, then access his My account page while impersonating him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect manipulation in third-party login", "target": "{\"Lab scenario\": \"OAuth redirect manipulation in third-party login\", \"Lab Description\": \"The application uses OAuth for third-party authentication but fails to validate redirect URIs properly. This allows attackers to manipulate the flow and steal authorization codes. To solve: Hijack the OAuth code and log in as Carlos by exchanging the stolen token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature spoof via algorithm confusion", "target": "{\"Lab scenario\": \"JWT signature spoof via algorithm confusion\", \"Lab Description\": \"The application's authentication mechanism uses JWTs for session management. The backend accepts JWTs with the 'alg' header set to 'none', allowing attackers to forge tokens without a signature. The application trusts the contents of the JWT without verifying its signature when 'none' is used. To solve: Forge a JWT to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable session id", "target": "{\"Lab scenario\": \"Session fixation through predictable session ID\", \"Lab Description\": \"The login endpoint allows the attacker to specify a session ID in a cookie before logging in. The server reuses this session ID after authentication without regenerating it. This allows session fixation attacks. To solve: Set a session ID before Carlos logs in, then hijack his session using the fixed session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration with open redirect exploit", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect exploit\", \"Lab Description\": \"The application integrates OAuth for user login using a third-party provider. However, the OAuth flow includes an open redirect flaw that allows attackers to hijack authorization codes. The redirect_uri parameter is not properly validated, enabling token leakage. To solve: Hijack Carlos's OAuth login to obtain a valid access token and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The session management system issues session IDs before user authentication, but fails to rotate them upon successful login. This opens the door to session fixation attacks. The application allows setting the session cookie manually and does not regenerate a new session ID post-login. To solve: fixate a session for Carlos before he logs in, then hijack it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token algorithm manipulation", "target": "{\"Lab scenario\": \"JWT token algorithm manipulation\", \"Lab Description\": \"This lab uses JWTs for user sessions but fails to properly validate the signing algorithm. The application uses a 'none' algorithm without enforcing server-side signature verification. To solve: forge a valid JWT with 'alg' set to 'none' and impersonate the admin user to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration with open redirect flow", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect flow\", \"Lab Description\": \"This OAuth implementation allows redirection to arbitrary URLs after authentication due to missing state parameter validation. The 'redirect_uri' can be manipulated, enabling token theft via phishing. To solve: craft a malicious OAuth URL to intercept Carlos's token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature spoof via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature spoof via 'none' algorithm\", \"Lab Description\": \"This lab implements JSON Web Token (JWT) based authentication using insecure algorithm handling. The server accepts tokens signed using the 'none' algorithm, allowing attackers to forge valid tokens without knowing the secret key. The application verifies the JWT token from the Authorization header and grants access to sensitive resources without verifying the signature when 'alg' is set to 'none'. To solve: Craft a forged JWT for Carlos's account and access his profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab is vulnerable to session fixation due to predictable session ID issuance. The application assigns session IDs before login and does not regenerate them after successful authentication. The attacker can pre-define a session ID and trick the victim into using it. To solve: Fix a session ID before Carlos logs in and use it to hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth authorization code reuse", "target": "{\"Lab scenario\": \"OAuth authorization code reuse\", \"Lab Description\": \"This lab’s OAuth implementation allows reuse of authorization codes, violating the single-use principle. An attacker who intercepts an unused authorization code can reuse it to log in as the victim. The app fails to invalidate codes after the first use. To solve: Capture Carlos's OAuth code and reuse it to gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering with none algorithm", "target": "{\"Lab scenario\": \"JWT tampering with none algorithm\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. However, it accepts tokens signed using the 'none' algorithm without verification. The application decodes the token and grants access based on the embedded user role. To solve: Forge a JWT granting admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application sets session identifiers in the URL as query parameters after login. These session IDs are generated using predictable patterns. An attacker can fix a session ID for the victim and hijack the session post-login. To solve: Pre-set Carlos's session ID, trick him into logging in, then reuse the session to access his account.", "target": "{\"Lab scenario\": \"Session fixation through predictable session ID\", \"Lab Description\": \"The application sets session identifiers in the URL as query parameters after login. These session IDs are generated using predictable patterns. An attacker can fix a session ID for the victim and hijack the session post-login. To solve: Pre-set Carlos's session ID, trick him into logging in, then reuse the session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect_uri manipulation", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation\", \"Lab Description\": \"This lab uses OAuth for login via a third-party provider. However, the application does not properly validate the redirect_uri parameter, allowing attackers to steal authorization codes. To solve: Intercept a login request and modify the redirect_uri to an attacker-controlled server, then extract the authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's JWT implementation accepts insecure algorithms during token validation. Specifically, it fails to enforce signature verification when the 'alg' field is modified to 'none'. The application trusts any Authorization: Bearer token that decodes to a valid user structure. To solve: craft a forged JWT token with 'none' algorithm and impersonate the user 'carlos' to access their account page.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in Authorization header\", \"Lab Description\": \"The application's JWT implementation accepts insecure algorithms during token validation. Specifically, it fails to enforce signature verification when the 'alg' field is modified to 'none'. The application trusts any Authorization: Bearer token that decodes to a valid user structure. To solve: craft a forged JWT token with 'none' algorithm and impersonate the user 'carlos' to access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth implementation improperly validates the redirect_uri parameter in the authentication flow. An attacker can manipulate the redirect to inject a malicious OAuth token or leak the access_token. To solve: manipulate the OAuth redirect to impersonate a victim user (carlos) and access their profile.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in callback handler\", \"Lab Description\": \"The OAuth implementation improperly validates the redirect_uri parameter in the authentication flow. An attacker can manipulate the redirect to inject a malicious OAuth token or leak the access_token. To solve: manipulate the OAuth redirect to impersonate a victim user (carlos) and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in set-cookie header", "target": "{\"Lab scenario\": \"Session fixation in Set-Cookie header\", \"Lab Description\": \"The application assigns session identifiers via a predictable scheme before authentication. It does not regenerate the session ID post-login, allowing attackers to fixate a session ID and later hijack the session once the victim logs in. To solve: pre-assign a session ID, get the victim to log in, and then use the same session ID to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via insecure set-cookie handling in login endpoint", "target": "{\"Lab scenario\": \"Session fixation via insecure Set-Cookie handling in login endpoint\", \"Lab Description\": \"The login process fails to invalidate pre-authentication session cookies. The application sets the session ID before the user logs in, and that same session persists after successful authentication. To solve: Hijack Carlos's session by fixing a known session ID before authentication and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt token tampering with symmetric algorithm substitution", "target": "{\"Lab scenario\": \"JWT token tampering with symmetric algorithm substitution\", \"Lab Description\": \"This application uses JWTs for session management but supports algorithm substitution from RS256 to HS256 using a public key as the secret. To solve: Forge a valid JWT token for Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration with open redirect leading to token theft", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect leading to token theft\", \"Lab Description\": \"The OAuth redirect_uri is not properly validated, enabling redirection to arbitrary domains. The app leaks the OAuth access token in the URL fragment. To solve: Steal Carlos's access token via a crafted phishing link and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's JWT-based session handling is vulnerable to algorithm confusion. The server does not enforce strict verification of the signing algorithm. The application blindly trusts the `alg` field in the token. To solve: Forge a JWT token with algorithm `none` and escalate your privileges to admin to access the admin panel.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in session token\", \"Lab Description\": \"This lab's JWT-based session handling is vulnerable to algorithm confusion. The server does not enforce strict verification of the signing algorithm. The application blindly trusts the `alg` field in the token. To solve: Forge a JWT token with algorithm `none` and escalate your privileges to admin to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via insecure session regeneration", "target": "{\"Lab scenario\": \"Session fixation via insecure session regeneration\", \"Lab Description\": \"This lab's session handling mechanism is vulnerable to session fixation. The server does not regenerate session IDs after successful login, allowing an attacker to set the session ID beforehand. To solve: Fix a known session ID, trick the victim into logging in, and access their session to view the My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab simulates a misconfigured OAuth flow that allows redirect URI manipulation. The authorization server does not validate the redirect URI against a whitelist. To solve: Manipulate the redirect URI to intercept an OAuth authorization code and reuse it to log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"This lab simulates a misconfigured OAuth flow that allows redirect URI manipulation. The authorization server does not validate the redirect URI against a whitelist. To solve: Manipulate the redirect URI to intercept an OAuth authorization code and reuse it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation. The server accepts session IDs from unauthenticated users and does not regenerate them upon login. The application stores the session ID in a cookie named sid. To solve: hijack Carlos's session and access his account page using a fixed session ID set before login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering due to missing signature validation", "target": "{\"Lab scenario\": \"JWT tampering due to missing signature validation\", \"Lab Description\": \"This lab is vulnerable to JWT tampering. The backend decodes JWTs without validating their signatures. JWTs are used for user authentication and passed via Authorization headers. To solve: forge a valid JWT identifying as Carlos and access his profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration: open redirect token theft", "target": "{\"Lab scenario\": \"OAuth misconfiguration: open redirect token theft\", \"Lab Description\": \"The lab contains an OAuth implementation with an open redirect in the redirect_uri parameter. The application does not validate redirect URIs strictly, enabling attackers to steal OAuth authorization codes. To solve: craft a malicious redirect_uri, capture Carlos's OAuth code, and exchange it for a token to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: graphql endpoint exposing jwt manipulation vulnerability", "target": "{\"Lab scenario\": \"GraphQL endpoint exposing JWT manipulation vulnerability\", \"Lab Description\": \"A GraphQL API implements authentication using a stateless JWT stored in the Authorization header. The server does not validate the token signature, allowing attackers to craft arbitrary JWTs to impersonate users. The application accepts unsigned tokens with alg=none and exposes a GraphQL endpoint. To solve: Forge a JWT as carlos and retrieve his user profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id in login workflow", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login workflow\", \"Lab Description\": \"This application assigns session IDs before login using a predictable UUIDv4 generator. After login, the same session ID remains active. The attacker can set their session ID and then trick the victim into using it. When the victim logs in, the attacker gains access to their session. To solve: Hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party login integration", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login integration\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but does not validate the returned access token properly. Attackers can reuse tokens issued to different clients. The misconfiguration stems from missing audience (aud) validation. To solve: Use a token issued for another app to log in as carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering via algorithm confusion in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in authorization header\", \"Lab Description\": \"This lab's authorization system uses JWT tokens for user identity and access control. The server validates tokens based on the algorithm specified in the token header without enforcing expected signing algorithms. The application naively accepts tokens signed with the 'none' algorithm. To solve: Craft a JWT token that impersonates the 'admin' user and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The lab's login mechanism assigns session tokens before authentication, but does not regenerate them afterward. The application uses cookies to maintain session state. An attacker can set a session ID before victim login, and it will be reused after successful authentication. To solve: Fixate Carlos's session ID and access his account page.", "target": "{\"Lab scenario\": \"Session fixation through predictable session token reuse\", \"Lab Description\": \"The lab's login mechanism assigns session tokens before authentication, but does not regenerate them afterward. The application uses cookies to maintain session state. An attacker can set a session ID before victim login, and it will be reused after successful authentication. To solve: Fixate Carlos's session ID and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's third-party OAuth implementation fails to properly validate redirect_uri parameters. The attacker can inject a malicious endpoint to steal access tokens via a crafted URL. The application uses OAuth for logging in users. To solve: Leak Carlos's token and use it to access his profile endpoint.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with token leakage via redirect_uri manipulation\", \"Lab Description\": \"This lab's third-party OAuth implementation fails to properly validate redirect_uri parameters. The attacker can inject a malicious endpoint to steal access tokens via a crafted URL. The application uses OAuth for logging in users. To solve: Leak Carlos's token and use it to access his profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering via none algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management, but fails to validate the signature algorithm securely. It accepts tokens with the 'alg' set to 'none' without verifying the signature. The application blindly trusts the decoded payload. To solve: Craft a tampered JWT token impersonating the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session tokens", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens\", \"Lab Description\": \"The application implements session tokens that are not regenerated upon login and are derived from predictable values such as timestamps or usernames. The attacker can fix a session identifier before login. To solve: Create a session for Carlos before he logs in, then access his account once he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab simulates a misconfigured OAuth flow where the application does not properly validate the redirect URI, allowing open redirection and token leakage. Attackers can supply their own redirect URI to capture access tokens issued to another user. To solve: Exploit the OAuth flow to steal an access token for user 'carlos' and use it to access their protected resources.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI trust\", \"Lab Description\": \"This lab simulates a misconfigured OAuth flow where the application does not properly validate the redirect URI, allowing open redirection and token leakage. Attackers can supply their own redirect URI to capture access tokens issued to another user. To solve: Exploit the OAuth flow to steal an access token for user 'carlos' and use it to access their protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements JWT-based authentication using the `alg` field in the token header to determine the algorithm dynamically. The application fails to properly validate this value, allowing an attacker to forge a valid token using `alg: none`. To solve: Forge a token that grants access to Carlos’s account using algorithm confusion.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in session validation\", \"Lab Description\": \"This lab implements JWT-based authentication using the `alg` field in the token header to determine the algorithm dynamically. The application fails to properly validate this value, allowing an attacker to forge a valid token using `alg: none`. To solve: Forge a token that grants access to Carlos’s account using algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab integrates third-party OAuth for login and uses the `redirect_uri` parameter to navigate users post-authentication. The application fails to validate this URI properly. To solve: Manipulate the redirect_uri to leak Carlos's OAuth token to your controlled server.", "target": "{\"Lab scenario\": \"OAuth redirect manipulation for token leakage\", \"Lab Description\": \"This lab integrates third-party OAuth for login and uses the `redirect_uri` parameter to navigate users post-authentication. The application fails to validate this URI properly. To solve: Manipulate the redirect_uri to leak Carlos's OAuth token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application assigns session tokens before authentication and does not generate a new session upon successful login. This allows an attacker to fix a session ID for a victim. To solve: Set a session ID, trick Carlos into logging in, then reuse the same session ID to access his account.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application assigns session tokens before authentication and does not generate a new session upon successful login. This allows an attacker to fix a session ID for a victim. To solve: Set a session ID, trick Carlos into logging in, then reuse the same session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature bypass in stateless session handling", "target": "{\"Lab scenario\": \"JWT signature bypass in stateless session handling\", \"Lab Description\": \"This lab demonstrates a JWT validation flaw caused by the server not verifying the token's algorithm. The application accepts JWTs as bearer tokens to manage authentication. However, it does not verify whether the signature algorithm is secure. To solve: Modify and forge a JWT token that grants access to Carlos’s protected account page without knowing the original secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration via open redirect abuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect abuse\", \"Lab Description\": \"The application integrates with a third-party OAuth provider for authentication. Due to poor redirect URI validation, it is vulnerable to open redirect abuse, allowing attackers to intercept authorization codes. To solve: Exploit the misconfigured redirect URI to capture Carlos's OAuth token and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session tokens", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens\", \"Lab Description\": \"This lab uses predictable session tokens vulnerable to fixation. The server does not regenerate session identifiers upon authentication, allowing an attacker to set a known token and trick a victim into using it. To solve: Set a session token, trick Carlos into logging in with it, then reuse the token to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to JWT tampering due to improper validation of the token algorithm field. The application accepts tokens signed using the 'none' algorithm without verifying their authenticity. To solve: forge a token that grants administrative access to Carlos’s account without knowing the signing secret.", "target": "{\"Lab scenario\": \"JWT signature spoof using 'none' algorithm\", \"Lab Description\": \"This lab is vulnerable to JWT tampering due to improper validation of the token algorithm field. The application accepts tokens signed using the 'none' algorithm without verifying their authenticity. To solve: forge a token that grants administrative access to Carlos’s account without knowing the signing secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth open redirect misconfiguration", "target": "{\"Lab scenario\": \"OAuth open redirect misconfiguration\", \"Lab Description\": \"The application uses a third-party OAuth provider for login, but does not properly validate redirect URIs. An attacker can exploit this to capture tokens or impersonate a user. To solve: manipulate the redirect_uri parameter to steal Carlos’s token and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via pre-set cookie", "target": "{\"Lab scenario\": \"Session fixation via pre-set cookie\", \"Lab Description\": \"The application fails to regenerate the session ID after authentication. An attacker can set a session ID for the victim, then trick them into logging in with it. This allows session hijacking. To solve: set a session cookie for Carlos, wait for login, then reuse it to access the account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab has an authentication mechanism based on JWTs which are stored and verified insecurely. The application decodes the JWT but fails to validate its signature. This allows a user to modify the token payload and gain unauthorized access. To solve: Tamper with a JWT to escalate privileges and access the admin panel.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization Header\", \"Lab Description\": \"This lab has an authentication mechanism based on JWTs which are stored and verified insecurely. The application decodes the JWT but fails to validate its signature. This allows a user to modify the token payload and gain unauthorized access. To solve: Tamper with a JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's session management is vulnerable due to the use of predictable session identifiers that are not regenerated after login. The application uses static session tokens which remain valid after authentication, allowing an attacker to fix a session ID for the victim. To solve: Set a known session ID, trick the victim into logging in, then hijack the session and access the account page.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in Cookie\", \"Lab Description\": \"This lab's session management is vulnerable due to the use of predictable session identifiers that are not regenerated after login. The application uses static session tokens which remain valid after authentication, allowing an attacker to fix a session ID for the victim. To solve: Set a known session ID, trick the victim into logging in, then hijack the session and access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration vulnerability in redirect_uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration vulnerability in redirect_uri\", \"Lab Description\": \"This lab features a misconfigured OAuth flow that fails to validate redirect_uri strictly, allowing an attacker to intercept tokens by exploiting open redirect behavior. The application integrates with an OAuth provider for authentication. To solve: Exploit the misconfiguration to capture Carlos’s access token via an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering to escalate privileges in API access", "target": "{\"Lab scenario\": \"JWT tampering to escalate privileges in API access\", \"Lab Description\": \"This lab features a RESTful API that uses JWTs for authentication. The backend accepts unsigned JWTs due to a missing verification check. The application uses the 'role' claim to restrict access to administrative endpoints. To solve: forge a JWT granting admin access and retrieve the sensitive data from the /admin/report endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login redirection flow", "target": "{\"Lab scenario\": \"Session fixation in login redirection flow\", \"Lab Description\": \"The application uses a session cookie to manage authenticated users, but fails to issue a new session identifier upon successful login. An attacker can preset a session ID for the victim, then trick them into authenticating with it. To solve: hijack Carlos’s session by forcing him to log in using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leakage via referrer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referrer header\", \"Lab Description\": \"The application uses an OAuth 2.0 implicit flow and places access tokens in the URL fragment. However, a redirect to a third-party domain causes the access token to leak via the Referer header. To solve: capture Carlos’s token via a malicious redirect and use it to access his data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's login mechanism uses JSON Web Tokens for session management but fails to validate the algorithm field properly. The application blindly trusts tokens signed with 'none' as valid. To solve: gain access to Carlos's account by forging a valid token without knowing the secret.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login endpoint\", \"Lab Description\": \"The application's login mechanism uses JSON Web Tokens for session management but fails to validate the algorithm field properly. The application blindly trusts tokens signed with 'none' as valid. To solve: gain access to Carlos's account by forging a valid token without knowing the secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab's OAuth implementation uses an implicit grant flow that leaks the access token in the redirect URI. The application does not sanitize or securely handle fragment identifiers, allowing an attacker to steal tokens via referer headers. To solve: extract Carlos's token and use it to access his protected profile.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via redirect URI\", \"Lab Description\": \"This lab's OAuth implementation uses an implicit grant flow that leaks the access token in the redirect URI. The application does not sanitize or securely handle fragment identifiers, allowing an attacker to steal tokens via referer headers. To solve: extract Carlos's token and use it to access his protected profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in change-password endpoint", "target": "{\"Lab scenario\": \"Session fixation vulnerability in change-password endpoint\", \"Lab Description\": \"The application assigns a new session cookie upon login, but the session is not properly regenerated after sensitive operations. This allows an attacker to fix a session ID before victim login. To solve: set a session for Carlos before he logs in and hijack his session after he changes his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Bypass in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authorization Header\", \"Lab Description\": \"This lab demonstrates a misconfigured JWT validation mechanism where the application fails to verify token signatures if the algorithm is set to 'none'. The application trusts JWTs from the Authorization header for user session validation. To solve: Forge a JWT for the admin user by modifying the algorithm to 'none' and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via Unvalidated Session ID in URL", "target": "{\"Lab scenario\": \"Session Fixation via Unvalidated Session ID in URL\", \"Lab Description\": \"This lab illustrates session fixation where the server accepts any arbitrary session ID supplied via a URL query parameter without validation or regeneration on login. The application does not issue a new session ID after successful authentication. To solve: Fix the victim's session ID before login, then log in with their credentials and access the profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab showcases an OAuth implementation vulnerable to an open redirect flaw in its redirect_uri parameter. The authorization server fails to strictly validate redirect URIs, allowing attackers to hijack authorization codes. To solve: Trick the victim into authorizing your application, intercept the OAuth code via a malicious redirect URI, and exchange it for an access token.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"This lab showcases an OAuth implementation vulnerable to an open redirect flaw in its redirect_uri parameter. The authorization server fails to strictly validate redirect URIs, allowing attackers to hijack authorization codes. To solve: Trick the victim into authorizing your application, intercept the OAuth code via a malicious redirect URI, and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via 'none' algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in Authorization header\", \"Lab Description\": \"This lab implements stateless authentication using JWTs passed in the Authorization header. The backend fails to validate the algorithm used in the JWT header. The application trusts any token as long as the signature structure is present. To solve: Forge a JWT that grants access to Carlos’s account using the 'none' algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where open redirect abuse in oauth flow for token theft", "target": "{\"Lab scenario\": \"Open redirect abuse in OAuth flow for token theft\", \"Lab Description\": \"The lab uses OAuth to authenticate users via a third-party provider. The 'redirect_uri' parameter is not properly validated, allowing attackers to intercept the access token after successful login. To solve: Capture the access token issued to Carlos by abusing the redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation using static token in cookie", "target": "{\"Lab scenario\": \"Session fixation using static token in cookie\", \"Lab Description\": \"The app issues session cookies with predictable static values tied to usernames, and fails to regenerate sessions on login. Attackers can set a valid cookie before login, leading to session fixation. To solve: Fix Carlos’s session, then use the token to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The backend uses JSON Web Tokens (JWT) for stateless authentication and incorrectly accepts tokens signed with 'none' algorithm. The application fails to validate the token signature properly, allowing attackers to forge tokens. To solve: Forge an admin JWT and access the /admin/dashboard endpoint.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in REST API authentication\", \"Lab Description\": \"The backend uses JSON Web Tokens (JWT) for stateless authentication and incorrectly accepts tokens signed with 'none' algorithm. The application fails to validate the token signature properly, allowing attackers to forge tokens. To solve: Forge an admin JWT and access the /admin/dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session ids", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"The application assigns session tokens before authentication and fails to regenerate them post-login. This allows attackers to fix a session ID for the victim and hijack the session. To solve: Fix a session for Carlos, let him authenticate, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth flow accepts a wide range of redirect URIs without strict validation. This allows an attacker to inject malicious domains to capture authorization codes. To solve: Exploit the open redirect to capture Carlos’s OAuth token and log in as him.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The OAuth flow accepts a wide range of redirect URIs without strict validation. This allows an attacker to inject malicious domains to capture authorization codes. To solve: Exploit the open redirect to capture Carlos’s OAuth token and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements JWT-based session management using insecure algorithm validation. The application accepts JWTs from authenticated users, but fails to enforce proper signature validation. To solve: Tamper with the JWT to impersonate Carlos and access his account.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm\", \"Lab Description\": \"This lab implements JWT-based session management using insecure algorithm validation. The application accepts JWTs from authenticated users, but fails to enforce proper signature validation. To solve: Tamper with the JWT to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab's session management is flawed due to predictable session tokens assigned before login. The application issues a session cookie before authentication and fails to regenerate it after successful login. To solve: Fixate a known session on Carlos and reuse it post-login to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow redirect uri manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow redirect URI manipulation\", \"Lab Description\": \"This lab uses OAuth 2.0 implicit flow, but its redirect URI validation is poorly implemented. The redirect URI can be manipulated to leak the access token to an attacker-controlled domain. To solve: Steal Carlos’s access token using an open redirect and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion leading to authentication bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to authentication bypass\", \"Lab Description\": \"The authentication mechanism uses JSON Web Tokens (JWTs) for session management. However, it fails to verify the signing algorithm properly, allowing an attacker to forge tokens by switching the algorithm to 'none'. The application accepts unsigned JWTs if the alg field is tampered. To solve: forge a valid token and access Carlos's account page without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The lab uses OAuth 2.0's implicit flow to authorize users but fails to validate the redirect URI correctly. This enables an attacker to steal tokens by redirecting users to an attacker-controlled domain. To solve: harvest a valid access token and use it to impersonate Carlos.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"The lab uses OAuth 2.0's implicit flow to authorize users but fails to validate the redirect URI correctly. This enables an attacker to steal tokens by redirecting users to an attacker-controlled domain. To solve: harvest a valid access token and use it to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The application issues session cookies before authentication and does not regenerate the session ID after login. An attacker can set a known session ID for a victim, then hijack the session post-login. To solve: fixate Carlos's session and use it after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion attack in stateless api authentication", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in stateless API authentication\", \"Lab Description\": \"This lab's stateless JWT-based authentication system is vulnerable to an algorithm confusion flaw. The server uses RS256 for verifying JWTs, but it accepts tokens signed with HS256 if manipulated correctly. The application blindly trusts the 'alg' field in the JWT header. To solve: forge a valid JWT that grants access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application fails to invalidate the user's session upon successful login, making it vulnerable to session fixation. The attacker can set a session identifier before the victim logs in, and the application continues using the same session after authentication. To solve: Fix a session ID, trick Carlos to log in, and then use the session ID to access his account.", "target": "{\"Lab scenario\": \"Session fixation in classic web login flow\", \"Lab Description\": \"The application fails to invalidate the user's session upon successful login, making it vulnerable to session fixation. The attacker can set a session identifier before the victim logs in, and the application continues using the same session after authentication. To solve: Fix a session ID, trick Carlos to log in, and then use the session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leaking tokens via redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking tokens via redirect\", \"Lab Description\": \"The OAuth implementation of this app leaks access tokens via an open redirect vulnerability after authorization. The redirect_uri parameter is not properly validated, allowing attackers to capture tokens sent via URL fragments. To solve: Trick the authorization server into sending Carlos's token to your controlled endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in login authentication", "target": "{\"Lab scenario\": \"JWT algorithm confusion in login authentication\", \"Lab Description\": \"The application uses JWTs to manage user sessions. However, it improperly trusts the 'alg' field from user-supplied tokens without validating the signature. The application accepts tokens where 'alg' is set to 'none'. To solve: forge a valid token for the admin user and access the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where open redirect flaw in oauth redirect_uri parameter", "target": "{\"Lab scenario\": \"Open redirect flaw in OAuth redirect_uri parameter\", \"Lab Description\": \"This lab implements OAuth login flow using a third-party provider. The `redirect_uri` parameter is improperly validated, allowing redirection to arbitrary domains. To solve: intercept the OAuth flow and steal an access token via redirection to a malicious endpoint under your control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in authentication process", "target": "{\"Lab scenario\": \"Session fixation vulnerability in authentication process\", \"Lab Description\": \"The login endpoint does not issue a new session identifier after successful authentication. This allows an attacker to fix a session ID before login and hijack the user session afterward. To solve: fix a session ID, get the victim to log in using it, then access their account using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a RESTful login flow with 2FA implemented through a token verification endpoint. However, the token is bound to the session in an insecure way. The application reuses the 2FA token without revalidating the session context, allowing an attacker to hijack a victim's session post-authentication. To solve: Fixate your session during pre-authentication and inject a valid 2FA token generated by the victim to gain access to their account.", "target": "{\"Lab scenario\": \"Session fixation via MFA token reuse in REST login flow\", \"Lab Description\": \"The application uses a RESTful login flow with 2FA implemented through a token verification endpoint. However, the token is bound to the session in an insecure way. The application reuses the 2FA token without revalidating the session context, allowing an attacker to hijack a victim's session post-authentication. To solve: Fixate your session during pre-authentication and inject a valid 2FA token generated by the victim to gain access to their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth implicit flow token theft via redirect uri manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow token theft via redirect URI manipulation\", \"Lab Description\": \"The application integrates with a third-party OAuth provider using the implicit flow, but does not properly validate redirect URIs. This allows an attacker to inject a malicious redirection target and capture the access token from the URL fragment. To solve: Exploit the OAuth flow to extract Carlos’s access token and use it to access his private user dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt signature validation bypass using 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature validation bypass using 'none' algorithm\", \"Lab Description\": \"The application uses JWT for session management. However, it incorrectly accepts tokens with the 'alg':'none' header and skips signature verification. An attacker can forge a token and impersonate any user. To solve: Create a tampered token that impersonates the admin user and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab demonstrates session fixation in the authentication process. The application assigns session IDs before authentication and fails to invalidate them post-login. The application reuses existing session cookies instead of issuing new ones after login. To solve: Fixate a valid session ID before login and hijack Carlos's authenticated session.", "target": "{\"Lab scenario\": \"Session fixation via cookie injection\", \"Lab Description\": \"This lab demonstrates session fixation in the authentication process. The application assigns session IDs before authentication and fails to invalidate them post-login. The application reuses existing session cookies instead of issuing new ones after login. To solve: Fixate a valid session ID before login and hijack Carlos's authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's JWT validation mechanism trusts the 'alg' header from incoming tokens. The application accepts unsigned tokens if the alg is set to 'none'. To solve: Forge a JWT token with alg: none and impersonate the user Carlos.", "target": "{\"Lab scenario\": \"JWT algorithm confusion with none header\", \"Lab Description\": \"This lab's JWT validation mechanism trusts the 'alg' header from incoming tokens. The application accepts unsigned tokens if the alg is set to 'none'. To solve: Forge a JWT token with alg: none and impersonate the user Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application exposes access tokens via the Referer header due to improper redirection. Tokens are embedded in URLs and leak during third-party image or script loads. To solve: Capture Carlos's access token from the Referer header and use it to access his account via the OAuth /userinfo endpoint.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header\", \"Lab Description\": \"The application exposes access tokens via the Referer header due to improper redirection. Tokens are embedded in URLs and leak during third-party image or script loads. To solve: Capture Carlos's access token from the Referer header and use it to access his account via the OAuth /userinfo endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via pre-auth token in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Auth Token in Login Flow\", \"Lab Description\": \"This application fails to invalidate session tokens on login. An attacker can fix a session ID prior to authentication and hijack the victim’s session post-login. The application sets a session ID before verifying credentials but does not regenerate it. To solve: hijack Carlos’s session after login using a pre-fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab uses JWTs for access control but improperly validates the signature algorithm. The server does not enforce signed JWTs when the 'alg' header is set to 'none'. To solve: forge a token impersonating Carlos and access his account page.", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in Authorization Header\", \"Lab Description\": \"This lab uses JWTs for access control but improperly validates the signature algorithm. The server does not enforce signed JWTs when the 'alg' header is set to 'none'. To solve: forge a token impersonating Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates with an OAuth provider but fails to properly validate redirect URIs during the authorization code exchange. An attacker can manipulate this to steal authorization codes. To solve: steal Carlos’s OAuth token and access his account.", "target": "{\"Lab scenario\": \"OAuth2 Redirect URI Manipulation in Authorization Code Flow\", \"Lab Description\": \"The application integrates with an OAuth provider but fails to properly validate redirect URIs during the authorization code exchange. An attacker can manipulate this to steal authorization codes. To solve: steal Carlos’s OAuth token and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where graphql session fixation via login mutation", "target": "{\"Lab scenario\": \"GraphQL session fixation via login mutation\", \"Lab Description\": \"The application's GraphQL login mutation allows session fixation due to improper session regeneration. Upon successful authentication, the application does not invalidate the existing session ID, enabling attackers to predetermine a victim’s session. To solve: Hijack Carlos's session by setting a known session cookie prior to login and reuse it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The REST API accepts JWTs but fails to enforce strong algorithm validation. An attacker can forge a token by setting the algorithm to 'none' and bypass signature verification. To solve: Log in as the admin user by crafting a JWT with alg=none and access the protected admin dashboard.", "target": "{\"Lab scenario\": \"JWT algorithm confusion with none in REST API\", \"Lab Description\": \"The REST API accepts JWTs but fails to enforce strong algorithm validation. An attacker can forge a token by setting the algorithm to 'none' and bypass signature verification. To solve: Log in as the admin user by crafting a JWT with alg=none and access the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leakage via referrer", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referrer\", \"Lab Description\": \"The application uses OAuth implicit flow with access tokens returned in the URL fragment. Due to a misconfiguration, the redirect URI includes external domains, and the token leaks via the HTTP Referer header. To solve: Intercept Carlos’s token by injecting a malicious redirect_uri and reuse the token to access /user-info as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation. The application assigns session tokens before authentication and accepts them post-login without regeneration. An attacker can trick a victim into using a known session ID, then log in with that session and hijack their account. To solve: Hijack Carlos's session and access his My Account page.", "target": "{\"Lab scenario\": \"Session Fixation in login endpoint with pre-set cookies\", \"Lab Description\": \"This lab is vulnerable to session fixation. The application assigns session tokens before authentication and accepts them post-login without regeneration. An attacker can trick a victim into using a known session ID, then log in with that session and hijack their account. To solve: Hijack Carlos's session and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering in authorization header using none algorithm", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header using None algorithm\", \"Lab Description\": \"The application uses JWTs for session management but fails to enforce the use of strong algorithms. The server accepts tokens signed with 'none', effectively disabling signature verification. To solve: Modify a JWT to impersonate Carlos and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in callback endpoint", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in callback endpoint\", \"Lab Description\": \"The application integrates OAuth but doesn't properly validate the redirect_uri. This allows an attacker to redirect tokens to an attacker-controlled domain. To solve: Leak Carlos’s OAuth token using a crafted authorization URL, then use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in token verification endpoint", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification endpoint\", \"Lab Description\": \"The application uses JWT for authentication but improperly trusts the 'alg' field in incoming tokens. It accepts 'none' algorithm tokens without verifying their signature. The application exposes a /verify endpoint that decodes the token without validating its authenticity. To solve: Forge a JWT with 'alg':'none' to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable token parameter", "target": "{\"Lab scenario\": \"Session fixation through predictable token parameter\", \"Lab Description\": \"The application supports login sessions via a GET token parameter that is reflected as a session ID cookie. This behavior is vulnerable to session fixation. The attacker can set a predefined token value and trick the victim into using it. To solve: Fix a session ID and get Carlos to log in using it, then access /my-account as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application implements OAuth 2.0 login with a misconfigured redirect_uri and access_token reuse logic. An attacker can obtain a valid token meant for a benign user and replay it against privileged APIs without scope validation. To solve: Replay Carlos’s access token against the /account-info endpoint.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse\", \"Lab Description\": \"The application implements OAuth 2.0 login with a misconfigured redirect_uri and access_token reuse logic. An attacker can obtain a valid token meant for a benign user and replay it against privileged APIs without scope validation. To solve: Replay Carlos’s access token against the /account-info endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session token in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session Token in Login Flow\", \"Lab Description\": \"The application uses predictable session tokens set before authentication. Upon successful login, the session identifier is not rotated, allowing session fixation. An attacker can force a victim to use a known session and hijack it after login. To solve: Fixate the session, get the victim to log in, and access their account using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none bypass in rest login flow", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in REST Login Flow\", \"Lab Description\": \"The application uses JWT for authentication but accepts tokens with the 'alg' field set to 'none'. This enables an attacker to forge tokens and gain unauthorized access. To solve: Craft a JWT with alg=none and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This application uses OAuth to delegate authentication. The 'redirect_uri' parameter is not properly validated, allowing attackers to redirect authorization codes to attacker-controlled endpoints. To solve: Steal Carlos's token via crafted redirect and access his account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration with Open Redirect Token Theft\", \"Lab Description\": \"This application uses OAuth to delegate authentication. The 'redirect_uri' parameter is not properly validated, allowing attackers to redirect authorization codes to attacker-controlled endpoints. To solve: Steal Carlos's token via crafted redirect and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application improperly reuses session identifiers during the authentication process. Instead of generating a new session after a successful login, it maintains the same session ID issued pre-authentication. This flaw enables session fixation attacks where a malicious actor sets a session ID for the victim before they log in. To solve: Fixate Carlos’s session, log him in using the fixed session, then access his My Account page.", "target": "{\"Lab scenario\": \"Session fixation via login flow cookie persistence\", \"Lab Description\": \"The application improperly reuses session identifiers during the authentication process. Instead of generating a new session after a successful login, it maintains the same session ID issued pre-authentication. This flaw enables session fixation attacks where a malicious actor sets a session ID for the victim before they log in. To solve: Fixate Carlos’s session, log him in using the fixed session, then access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering due to 'none' algorithm vulnerability", "target": "{\"Lab scenario\": \"JWT tampering due to 'none' algorithm vulnerability\", \"Lab Description\": \"This application accepts JWTs to authorize user access but fails to verify the signature if the algorithm is set to 'none'. This allows an attacker to forge arbitrary tokens and impersonate any user. To solve: Forge a JWT for Carlos by modifying the algorithm to 'none' and injecting the token into an authenticated request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect in redirect_uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect in redirect_uri\", \"Lab Description\": \"The OAuth implementation allows arbitrary redirection via a vulnerable redirect_uri parameter, enabling an attacker to hijack the authorization code. To solve: Craft a malicious redirect_uri that steals the authorization code for Carlos’s account, then exchange the code for an access token and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session token in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session Token in Login Flow\", \"Lab Description\": \"The application initializes a session token before login and fails to regenerate it post-authentication. The session token is predictable and does not get invalidated upon user login. To solve: Force a victim user (Carlos) to use a session ID you control, then access their account post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm attack in api authorization", "target": "{\"Lab scenario\": \"JWT None Algorithm Attack in API Authorization\", \"Lab Description\": \"The application's backend validates JWTs but does not enforce the algorithm used for signature verification. It trusts the 'alg' value in the JWT header. To solve: Forge a valid token for Carlos using 'none' algorithm and access his user dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration - trusting unvalidated redirect uris", "target": "{\"Lab scenario\": \"OAuth Misconfiguration - Trusting Unvalidated Redirect URIs\", \"Lab Description\": \"The OAuth provider implementation improperly accepts arbitrary redirect_uri values during the authorization flow. This allows malicious manipulation of the final redirect destination. To solve: Hijack Carlos’s OAuth session to leak his token via open redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Attack in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm Attack in Authorization Header\", \"Lab Description\": \"This lab uses JWT for session management with a misconfigured JWT verification logic. The application decodes the JWT token provided in the Authorization header and fails to verify the signature when the 'alg' header is set to 'none'. To solve: forge a valid-looking JWT token for the admin user using 'none' algorithm and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application handles session identifiers insecurely via GraphQL mutations. It fails to regenerate session tokens upon successful login. An attacker can fix their session ID, trick a victim into logging in, and then hijack the authenticated session. To solve: fix a session ID before victim login, capture their session, and access their dashboard.", "target": "{\"Lab scenario\": \"Session Fixation via Login Flow in GraphQL\", \"Lab Description\": \"The application handles session identifiers insecurely via GraphQL mutations. It fails to regenerate session tokens upon successful login. An attacker can fix their session ID, trick a victim into logging in, and then hijack the authenticated session. To solve: fix a session ID before victim login, capture their session, and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth access token leakage via referrer header", "target": "{\"Lab scenario\": \"OAuth Access Token Leakage via Referrer Header\", \"Lab Description\": \"This lab involves a misconfigured OAuth flow leaking access tokens via the Referrer header. The application redirects users to a third-party analytics service after OAuth login, inadvertently exposing access tokens in the URL. To solve: leak an access token, capture it via a controlled endpoint, and use it to access the victim's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT authentication bypass via 'none' algorithm in token validation logic", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm in token validation logic\", \"Lab Description\": \"The application uses JWTs for session management, but fails to enforce algorithm verification during token validation. The vulnerable backend accepts unsigned tokens when the 'alg' header is set to 'none'. To solve: Access Carlos's account without possessing his valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-authenticated cookie reuse in login flow", "target": "{\"Lab scenario\": \"Session fixation via pre-authenticated cookie reuse in login flow\", \"Lab Description\": \"This app allows session cookies to be set prior to login and fails to regenerate them upon successful authentication. The backend trusts any existing session ID, enabling an attacker to fixate a victim’s session. To solve: Access Carlos’s account by presetting a session and tricking him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application integrates with an OAuth provider but does not properly validate the 'redirect_uri' parameter. This enables an attacker to hijack the authorization code and impersonate users. To solve: Hijack Carlos’s OAuth token by manipulating the redirect URI.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in authorization flow\", \"Lab Description\": \"This application integrates with an OAuth provider but does not properly validate the 'redirect_uri' parameter. This enables an attacker to hijack the authorization code and impersonate users. To solve: Hijack Carlos’s OAuth token by manipulating the redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login flow using REST API", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow using REST API\", \"Lab Description\": \"The application uses REST API endpoints to manage login sessions but does not regenerate session tokens upon authentication. This introduces a session fixation vulnerability. The application continues to use the pre-login session identifier after successful login, allowing an attacker to predetermine a session for the victim. To solve: Hijack Carlos's session after forcing him to authenticate using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token algorithm confusion in GraphQL authorization header", "target": "{\"Lab scenario\": \"JWT token algorithm confusion in GraphQL authorization header\", \"Lab Description\": \"This application implements authentication using JWT tokens passed in the Authorization header. The server fails to enforce proper JWT signing algorithm, making it vulnerable to 'alg=none' attacks. The GraphQL resolver accepts unsigned tokens if the algorithm is altered to 'none'. To solve: Tamper a valid JWT to impersonate Carlos and retrieve his sensitive GraphQL data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in implicit flow token leakage via URL fragment", "target": "{\"Lab scenario\": \"OAuth misconfiguration in implicit flow token leakage via URL fragment\", \"Lab Description\": \"The application integrates third-party login via OAuth 2.0 implicit flow. The access token is exposed in the URL fragment after redirection and is not securely handled by the client. An attacker can capture the token via open redirect or history sniffing. To solve: Steal Carlos's access token and access his profile via the third-party login endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion leading to token forgery", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to token forgery\", \"Lab Description\": \"This lab features a JWT-based authentication system vulnerable to algorithm confusion. The application accepts tokens signed using either 'HS256' or 'RS256', but fails to validate the token signature correctly when the algorithm is manipulated. To solve: Forge a valid token as admin and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation through vulnerable redirect handler", "target": "{\"Lab scenario\": \"Session fixation through vulnerable redirect handler\", \"Lab Description\": \"This lab contains a login flow where session identifiers are not properly regenerated upon authentication. The redirect endpoint also reflects unvalidated session tokens. To solve: Fix a session before login, then authenticate as a victim and reuse the session to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration allowing token reuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse\", \"Lab Description\": \"This lab demonstrates a misconfigured OAuth implementation where access tokens are not bound to client identifiers, allowing a user to reuse tokens across client applications. To solve: Reuse an OAuth token issued for your own account to impersonate Carlos via a vulnerable client.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses an outdated session management mechanism where the session ID is not regenerated upon login. The application accepts session tokens from unauthenticated users and associates them to authenticated sessions without invalidating them. To solve: hijack Carlos's session after fixing a session for him and access his account.", "target": "{\"Lab scenario\": \"Session Fixation in legacy session management\", \"Lab Description\": \"This lab uses an outdated session management mechanism where the session ID is not regenerated upon login. The application accepts session tokens from unauthenticated users and associates them to authenticated sessions without invalidating them. To solve: hijack Carlos's session after fixing a session for him and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in public-key algorithm confusion", "target": "{\"Lab scenario\": \"JWT tampering in public-key algorithm confusion\", \"Lab Description\": \"This application uses a JWT-based authentication mechanism with RS256 algorithm. However, it incorrectly treats the RSA public key as an HMAC secret, allowing token forgery. To solve: forge a JWT token impersonating the admin user and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri handling", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI handling\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to properly validate redirect URIs. This allows attackers to leak authorization codes to a malicious domain. To solve: steal Carlos's OAuth authorization code using a manipulated redirect URI and gain access to his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT for session management but does not enforce algorithm validation. Instead, it accepts user-defined algorithms from tokens. The application accepts tokens with 'alg' set to 'none', allowing attackers to forge valid tokens without a signature. To solve: forge a valid admin JWT token and access the /admin dashboard.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in REST login endpoint\", \"Lab Description\": \"The application uses JWT for session management but does not enforce algorithm validation. Instead, it accepts user-defined algorithms from tokens. The application accepts tokens with 'alg' set to 'none', allowing attackers to forge valid tokens without a signature. To solve: forge a valid admin JWT token and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via static session identifier in soap login", "target": "{\"Lab scenario\": \"Session fixation via static session identifier in SOAP login\", \"Lab Description\": \"The application exposes a SOAP-based login mechanism and sets a session ID before user authentication. This session ID is not regenerated after login, allowing an attacker to fix a session ID and force a victim to use it. To solve: fix a session ID and log in as carlos using this fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth token leakage via redirect_uri parameter manipulation", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect_uri parameter manipulation\", \"Lab Description\": \"The application uses OAuth 2.0 for SSO login but fails to validate the `redirect_uri` parameter during the authorization flow. An attacker can manipulate this parameter to exfiltrate the victim's access token. To solve: capture Carlos’s access token by abusing the open redirect and access /my-account as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in OAuth login flow", "target": "{\"Lab scenario\": \"Session fixation in OAuth login flow\", \"Lab Description\": \"The application implements a third-party OAuth provider for authentication but mishandles session regeneration during login. The vulnerable behavior arises when an attacker fixes a session ID before the OAuth authorization process and the same session is reused after login. To solve: Hijack Carlos’s session by fixing your session ID and making Carlos authenticate over OAuth with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT key confusion in asymmetric to symmetric downgrade", "target": "{\"Lab scenario\": \"JWT key confusion in asymmetric to symmetric downgrade\", \"Lab Description\": \"This app uses asymmetric JWT verification (RS256) for session authentication, but fails to validate the signature algorithm properly. If an attacker changes the JWT algorithm to HS256, the server incorrectly uses the public key as a symmetric secret. To solve: Modify the JWT algorithm to HS256 and sign it with the public key to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application implements an inactivity-based session timeout mechanism, but includes a hidden GraphQL keep-alive endpoint that can be abused to extend sessions silently. The attacker can keep Carlos's session alive by calling the internal ping endpoint while in possession of his session ID. To solve: Hijack Carlos’s session, maintain it alive using the hidden endpoint, and access /my-account.", "target": "{\"Lab scenario\": \"Session timeout bypass via hidden keep-alive endpoint\", \"Lab Description\": \"This application implements an inactivity-based session timeout mechanism, but includes a hidden GraphQL keep-alive endpoint that can be abused to extend sessions silently. The attacker can keep Carlos's session alive by calling the internal ping endpoint while in possession of his session ID. To solve: Hijack Carlos’s session, maintain it alive using the hidden endpoint, and access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation vulnerability in login flow via fixed session ID in cookie header", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login flow via fixed session ID in cookie header\", \"Lab Description\": \"The REST-based login flow accepts a session ID from the client before authentication and reuses it after successful login. The application fails to issue a new session identifier after login. To solve: Fixate a session ID and use it to hijack the authenticated session of the victim after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authorize users via a REST API. However, the server accepts unsigned JWTs when the algorithm is set to 'none'. To solve: Craft a tampered JWT that impersonates the admin user and access the protected endpoint.", "target": "{\"Lab scenario\": \"JWT tampering via 'alg: none' in Authorization header\", \"Lab Description\": \"The application uses JWTs to authorize users via a REST API. However, the server accepts unsigned JWTs when the algorithm is set to 'none'. To solve: Craft a tampered JWT that impersonates the admin user and access the protected endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect_uri allowing code interception", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri allowing code interception\", \"Lab Description\": \"The application uses OAuth 2.0 for SSO authentication with a misconfigured redirect URI pattern. An attacker can inject a malicious redirect URI to intercept the authorization code. To solve: Steal Carlos’s OAuth authorization code and exchange it for a token to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering via none algorithm in login api", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in login API\", \"Lab Description\": \"This application uses JWTs for session management but improperly allows the 'alg' header to be tampered with. The backend incorrectly trusts tokens signed with 'none' algorithm. To solve: Forge a token using alg: none to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This app uses OAuth 2.0 implicit flow but returns the access token in the URL fragment, which gets logged insecurely due to verbose frontend debug logging. To solve: Steal Carlos’s access token from the client-side logs and access his account using the leaked token.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaks access token\", \"Lab Description\": \"This app uses OAuth 2.0 implicit flow but returns the access token in the URL fragment, which gets logged insecurely due to verbose frontend debug logging. To solve: Steal Carlos’s access token from the client-side logs and access his account using the leaked token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth session fixation in authorization code flow", "target": "{\"Lab scenario\": \"OAuth Session Fixation in Authorization Code Flow\", \"Lab Description\": \"The OAuth implementation in this app allows session fixation during the authorization flow. The application fails to invalidate pre-existing sessions before completing the OAuth login. To solve: Fixate a session using a crafted OAuth URL, then hijack the victim’s session after authorization.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in admin role verification", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Admin Role Verification\", \"Lab Description\": \"The application uses JWTs for role-based access control but fails to enforce a specific algorithm. This allows token forgery via 'alg' manipulation. To solve: Forge a JWT using 'none' or 'HS256' and escalate privileges to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL Blind MFA Bypass via Timing Attack", "target": "{\"Lab scenario\": \"GraphQL Blind MFA Bypass via Timing Attack\", \"Lab Description\": \"The GraphQL API verifies MFA tokens but leaks timing differences based on token correctness. The application delays responses when the correct prefix is guessed. To solve: Infer valid MFA token character-by-character using response delays, then authenticate as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable token reuse", "target": "{\"Lab scenario\": \"Session fixation via predictable token reuse\", \"Lab Description\": \"The application implements session-based authentication but fails to regenerate session tokens after login. The session remains valid even if the user logs in from a previously fixed session. To solve: hijack Carlos's session by fixing a known session ID before login and accessing his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion via 'none' value", "target": "{\"Lab scenario\": \"JWT algorithm confusion via 'none' value\", \"Lab Description\": \"The server incorrectly accepts JWTs signed with the 'none' algorithm due to a misconfigured library. It doesn't verify the signature, allowing token manipulation. To solve: forge a JWT token for the user 'admin' with alg=none and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth token leakage via redirect misconfiguration", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect misconfiguration\", \"Lab Description\": \"This lab uses OAuth2 for third-party login. However, the redirection URI is not properly validated, allowing token leakage via a malicious redirect endpoint. To solve: steal Carlos’s token using a crafted redirect_uri and access the account resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in legacy auth redirect endpoint", "target": "{\"Lab scenario\": \"Session Fixation in legacy auth redirect endpoint\", \"Lab Description\": \"This lab's authentication mechanism improperly allows reuse of fixed session identifiers via a deprecated `/legacy-auth` endpoint. The application trusts the session cookie even before the login is completed. To solve: Fixate a valid session identifier for Carlos and access their account page post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt authentication bypass via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm\", \"Lab Description\": \"The application uses JWTs to authenticate users, but fails to verify the algorithm properly. If the algorithm is set to 'none', the signature is not validated, allowing attackers to forge arbitrary tokens. To solve: Forge a token granting admin access and view the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth code leakage via referer header to third-party", "target": "{\"Lab scenario\": \"OAuth code leakage via Referer header to third-party\", \"Lab Description\": \"The OAuth implementation leaks authorization codes via the Referer header when redirecting users back to a third-party site. This flaw allows attackers to intercept OAuth codes and obtain access tokens tied to victim accounts. To solve: Intercept Carlos’s OAuth code and reuse it to hijack their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's REST API session management mechanism is vulnerable to session fixation through path parameter injection. The application assigns session tokens based on user-supplied session IDs if present. To solve the lab, hijack Carlos's session and access his account page using a crafted session ID.", "target": "{\"Lab scenario\": \"Session fixation via path parameter injection in REST API\", \"Lab Description\": \"This lab's REST API session management mechanism is vulnerable to session fixation through path parameter injection. The application assigns session tokens based on user-supplied session IDs if present. To solve the lab, hijack Carlos's session and access his account page using a crafted session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt key confusion attack using 'none' algorithm in graphql api", "target": "{\"Lab scenario\": \"JWT key confusion attack using 'none' algorithm in GraphQL API\", \"Lab Description\": \"This GraphQL API-based authentication system fails to validate JWT signature algorithms properly. The backend accepts tokens signed with 'none' algorithm, assuming any token with valid claims is trustworthy. To solve the lab, forge a JWT token impersonating the admin and access the GraphQL /me endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth token reuse via insecure redirect_uri in authorization server", "target": "{\"Lab scenario\": \"OAuth token reuse via insecure redirect_uri in authorization server\", \"Lab Description\": \"This OAuth implementation uses an insecure wildcard pattern in redirect_uri validation. This allows an attacker to reuse a stolen authorization code at their own domain. To solve the lab, intercept Carlos’s OAuth code and exchange it at your controlled redirect_uri to get his access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login session token", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login session token\", \"Lab Description\": \"The application issues a session token before authentication, which is reused after login without regeneration. This allows session fixation attacks if an attacker sets the session cookie for the victim before login. The application accepts session cookies from unauthenticated users and does not reissue them after successful login. To solve: Fixate a session and gain unauthorized access to Carlos's account using the same token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion vulnerability in token verification logic", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token verification logic\", \"Lab Description\": \"This application relies on JWTs to authorize users, but does not enforce a strong algorithm during validation. The backend accepts JWTs with the 'alg' set to 'none', trusting the payload without verification. To solve: Forge a JWT with alg:none and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect_uri validation logic", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation logic\", \"Lab Description\": \"The OAuth flow in this application allows arbitrary redirect URIs due to improper validation, enabling token redirection to attacker-controlled domains. The app does not validate the redirect_uri against a strict whitelist. To solve: Steal an access token from the OAuth provider by injecting a rogue redirect URI and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's session management is vulnerable to session fixation attacks. The application uses a predictable session ID mechanism. The attacker can set a session ID during login, forcing the user to use the attacker's session ID after login. To solve the lab, the attacker must hijack the session and access the victim's account page.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in Login endpoint\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation attacks. The application uses a predictable session ID mechanism. The attacker can set a session ID during login, forcing the user to use the attacker's session ID after login. To solve the lab, the attacker must hijack the session and access the victim's account page.\", \"Vulnerability name\": \"Session Management\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a JWT Manipulation scenario. Example: JWT Token manipulation in User Authentication", "target": "{\"Lab scenario\": \"JWT Token manipulation in User Authentication\", \"Lab Description\": \"This lab's authentication mechanism is vulnerable to JWT manipulation. The application does not properly validate the signature of the JWT token. To solve the lab, the attacker needs to modify the JWT payload and bypass the authentication to access a protected resource.\", \"Vulnerability name\": \"JWT Manipulation\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a OAuth Misconfiguration lab where oauth misconfiguration and access token manipulation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration and Access Token Manipulation\", \"Lab Description\": \"The OAuth implementation in this lab has a misconfiguration where the access token is not properly validated. This allows the attacker to exchange a manipulated access token for unauthorized access to protected resources. To solve the lab, the attacker needs to tamper with the token and bypass OAuth authentication.\", \"Vulnerability name\": \"OAuth Misconfiguration\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a predictable session ID generation mechanism and does not regenerate sessions upon successful authentication. This allows an attacker to fixate a victim's session. The application leaks session tokens in login responses, and session IDs remain valid across login attempts. To solve: Hijack Carlos's session by fixating a known session and accessing /account/carlos.", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Token in REST Login Flow\", \"Lab Description\": \"The application uses a predictable session ID generation mechanism and does not regenerate sessions upon successful authentication. This allows an attacker to fixate a victim's session. The application leaks session tokens in login responses, and session IDs remain valid across login attempts. To solve: Hijack Carlos's session by fixating a known session and accessing /account/carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Bypass in GraphQL Login", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL Login\", \"Lab Description\": \"The application's JWT implementation accepts tokens signed with the 'none' algorithm, making it vulnerable to token forgery. JWTs are used for GraphQL session authentication. To solve: Forge an admin JWT using the 'none' algorithm and access the admin dashboard via a GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token theft via referer leak", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Theft via Referer Leak\", \"Lab Description\": \"The application implements OAuth implicit flow and includes a misconfigured redirect URI that leaks the access token via the Referer header. An attacker can craft a malicious endpoint to capture the token. To solve: Leak Carlos's access token using an exploit page and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation through insecure cookie management in login endpoint", "target": "{\"Lab scenario\": \"Session fixation through insecure cookie management in login endpoint\", \"Lab Description\": \"This lab's session management logic allows an attacker to fix a session ID before login. The application accepts external session identifiers via URL and sets them before authentication. To solve: hijack Carlos's session after forcing them to authenticate with a known session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab uses JWTs for authentication but verifies tokens based on the 'alg' header provided in the token itself, allowing an attacker to bypass signature checks. To solve: forge a valid token that grants access to Carlos's account.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification header\", \"Lab Description\": \"This lab uses JWTs for authentication but verifies tokens based on the 'alg' header provided in the token itself, allowing an attacker to bypass signature checks. To solve: forge a valid token that grants access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allows token reuse via open redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse via open redirect\", \"Lab Description\": \"This OAuth-based login flow has an open redirect on the callback endpoint, enabling token capture and reuse. The token is not scoped to specific redirect URIs. To solve: steal Carlos's access token and use it to access the /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's JWT validation mechanism fails to properly verify the signing algorithm, allowing attackers to spoof tokens by injecting their own public key. The vulnerable backend accepts tokens with user-defined headers and improperly trusts attacker-supplied keys. To solve: Forge a valid JWT to impersonate Carlos and access /account-info.", "target": "{\"Lab scenario\": \"JWT signature confusion vulnerability in REST API login endpoint\", \"Lab Description\": \"The application's JWT validation mechanism fails to properly verify the signing algorithm, allowing attackers to spoof tokens by injecting their own public key. The vulnerable backend accepts tokens with user-defined headers and improperly trusts attacker-supplied keys. To solve: Forge a valid JWT to impersonate Carlos and access /account-info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The SOAP-based login API does not invalidate existing session identifiers after successful login. This enables an attacker to fix a session ID before authentication. To solve: Fix a session for Carlos, log him in using the fixed ID, then reuse it to access /user-profile.", "target": "{\"Lab scenario\": \"Session fixation in SOAP login handler\", \"Lab Description\": \"The SOAP-based login API does not invalidate existing session identifiers after successful login. This enables an attacker to fix a session ID before authentication. To solve: Fix a session for Carlos, log him in using the fixed ID, then reuse it to access /user-profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in graphql mutation token issuance", "target": "{\"Lab scenario\": \"OAuth misconfiguration in GraphQL mutation token issuance\", \"Lab Description\": \"The OAuth implementation uses the implicit grant flow without validating the redirect_uri. This allows an attacker to intercept access tokens by injecting a malicious redirection endpoint. To solve: Capture Carlos’s token via redirection abuse and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: graphql api session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"GraphQL API session fixation vulnerability in login flow\", \"Lab Description\": \"The GraphQL API-based authentication system is vulnerable to session fixation due to insecure token re-use. The application does not invalidate old session tokens after login. To solve the lab, hijack Carlos’s session after login using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in admin verification logic", "target": "{\"Lab scenario\": \"JWT algorithm confusion in admin verification logic\", \"Lab Description\": \"The application uses JWTs to control access to the admin panel. It mistakenly allows clients to specify the JWT algorithm, trusting unsigned tokens when 'alg' is set to 'none'. To solve the lab, forge an admin JWT to access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses an OAuth2 provider to authenticate users. Due to lack of state parameter validation and open redirect behavior, the login flow is vulnerable to authorization code injection. To solve the lab, log in as Carlos by exploiting the redirect_uri parameter.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login provider redirect flow\", \"Lab Description\": \"This lab uses an OAuth2 provider to authenticate users. Due to lack of state parameter validation and open redirect behavior, the login flow is vulnerable to authorization code injection. To solve the lab, log in as Carlos by exploiting the redirect_uri parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where graphql endpoint leaking jwt secret key", "target": "{\"Lab scenario\": \"GraphQL endpoint leaking JWT secret key\", \"Lab Description\": \"The application exposes a GraphQL API endpoint with introspection enabled and verbose error messages. A mutation leaks internal secrets including the JWT signing key through improper error handling. The application accepts tampered tokens signed with the leaked key. To solve: forge a valid admin JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in OAuth redirect handling", "target": "{\"Lab scenario\": \"Session fixation in OAuth redirect handling\", \"Lab Description\": \"This app integrates with an external OAuth provider for login. The application does not validate that the `state` parameter maps to the initiating session, enabling session fixation. To solve: hijack a victim’s session by initiating login and forcing a reused session ID through manipulated OAuth flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses stateless JWT tokens for user authentication. The JWT validation logic improperly accepts unsigned tokens with the 'none' algorithm. To solve: forge a token impersonating the admin user with alg=none and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT none algorithm acceptance\", \"Lab Description\": \"The application uses stateless JWT tokens for user authentication. The JWT validation logic improperly accepts unsigned tokens with the 'none' algorithm. To solve: forge a token impersonating the admin user with alg=none and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session id predictable in soap-based login service", "target": "{\"Lab scenario\": \"Session ID predictable in SOAP-based login service\", \"Lab Description\": \"The application provides a legacy SOAP login service that generates sessions using predictable UUIDv4. By analyzing responses, an attacker can brute-force valid sessions. To solve: predict Carlos’s session token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in token validation endpoint", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation endpoint\", \"Lab Description\": \"The application uses JWT for authentication and accepts tokens via the Authorization header. The backend attempts to verify the JWT signature using the algorithm specified in the token's header. This results in a classic 'algorithm confusion' flaw, where changing the algorithm to 'none' skips signature validation entirely. To solve: craft a tampered JWT granting access to the administrator’s dashboard without the original signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login handler", "target": "{\"Lab scenario\": \"Session fixation via login handler\", \"Lab Description\": \"This application fails to regenerate the session ID after successful login. An attacker can set a known session ID before login and later trick the victim to authenticate, thereby gaining control over the authenticated session. To solve: hijack Carlos's session by pre-setting a session cookie and waiting for him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allows token reuse across clients", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse across clients\", \"Lab Description\": \"The application uses OAuth2 for login via a third-party identity provider. However, the backend fails to validate the 'aud' (audience) claim in ID tokens, allowing a token from another client app to be reused in this one. To solve: use a token issued to another client to access the target protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT for authentication and accepts tokens via the Authorization header. The backend attempts to verify the JWT signature using the algorithm specified in the token's header. This results in a classic 'algorithm confusion' flaw, where changing the algorithm to 'none' skips signature validation entirely. To solve: craft a tampered JWT granting access to the administrator’s dashboard without the original signing key.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation endpoint\", \"Lab Description\": \"The application uses JWT for authentication and accepts tokens via the Authorization header. The backend attempts to verify the JWT signature using the algorithm specified in the token's header. This results in a classic 'algorithm confusion' flaw, where changing the algorithm to 'none' skips signature validation entirely. To solve: craft a tampered JWT granting access to the administrator’s dashboard without the original signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via login handler", "target": "{\"Lab scenario\": \"Session fixation via login handler\", \"Lab Description\": \"This application fails to regenerate the session ID after successful login. An attacker can set a known session ID before login and later trick the victim to authenticate, thereby gaining control over the authenticated session. To solve: hijack Carlos's session by pre-setting a session cookie and waiting for him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth2 for login via a third-party identity provider. However, the backend fails to validate the 'aud' (audience) claim in ID tokens, allowing a token from another client app to be reused in this one. To solve: use a token issued to another client to access the target protected resource.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse across clients\", \"Lab Description\": \"The application uses OAuth2 for login via a third-party identity provider. However, the backend fails to validate the 'aud' (audience) claim in ID tokens, allowing a token from another client app to be reused in this one. To solve: use a token issued to another client to access the target protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via legacy cookie reuse in rest login flow", "target": "{\"Lab scenario\": \"Session Fixation via Legacy Cookie Reuse in REST Login Flow\", \"Lab Description\": \"The application implements session tracking using a legacy session cookie `sid`, which is not regenerated on successful login. This flaw allows session fixation if a valid but unauthenticated session ID is issued prior to login. To solve: hijack Carlos’s session by fixing the session ID before he logs in, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This application uses JWTs for GraphQL-based authentication. It parses the `Authorization: Bearer` token without validating the `alg` parameter securely. The server allows tokens signed with `alg: none`, enabling tampering. To solve: forge a JWT token for the user 'carlos' and access his profile.", "target": "{\"Lab scenario\": \"JWT Signature Confusion via alg None in GraphQL Auth\", \"Lab Description\": \"This application uses JWTs for GraphQL-based authentication. It parses the `Authorization: Bearer` token without validating the `alg` parameter securely. The server allows tokens signed with `alg: none`, enabling tampering. To solve: forge a JWT token for the user 'carlos' and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The OAuth flow implemented by this app uses a hybrid response type (code token) and redirects the user to a fixed redirect_uri vulnerable to open redirect attacks. To solve: intercept Carlos’s authorization code and complete the login flow using it.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Hybrid Flow\", \"Lab Description\": \"The OAuth flow implemented by this app uses a hybrid response type (code token) and redirects the user to a fixed redirect_uri vulnerable to open redirect attacks. To solve: intercept Carlos’s authorization code and complete the login flow using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in Cookie-based Authentication", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-based Authentication\", \"Lab Description\": \"The application improperly reuses existing session identifiers during login. The session ID issued before authentication remains valid after successful login. To solve: Fixate a session for the victim, trick them into logging in, then hijack the session to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion in bearer authentication", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Bearer Authentication\", \"Lab Description\": \"The application trusts the 'alg' header of JWTs and does not validate the token signature when 'alg' is set to 'none'. To solve: Forge a JWT token with alg set to 'none' and impersonate the victim by injecting their username into the payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in implicit grant flow", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Implicit Grant Flow\", \"Lab Description\": \"The OAuth provider exposes the access token in the redirect URI fragment and the relying party accepts it without origin validation. To solve: Steal an access token issued to Carlos using a malicious redirect_uri and use it to access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's session management system accepts session tokens via a URL path parameter, creating a critical session fixation risk. An attacker can craft a link with a preset session token and trick users into using it. The application ties sessions only by token without verifying ownership. To solve: hijack Carlos's session using a fixation attack and access his My Account page.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in REST session management path parameter\", \"Lab Description\": \"The application's session management system accepts session tokens via a URL path parameter, creating a critical session fixation risk. An attacker can craft a link with a preset session token and trick users into using it. The application ties sessions only by token without verifying ownership. To solve: hijack Carlos's session using a fixation attack and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering vulnerability in graphql authorization header", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in GraphQL Authorization Header\", \"Lab Description\": \"This GraphQL API uses JWTs for authentication but does not validate the 'alg' field properly. When 'alg' is set to 'none', the backend fails to verify the signature. The JWT is passed via the Authorization header and decoded without proper validation. To solve: forge a token with 'alg:none' and access Carlos's user data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration vulnerability in SOAP-based login flow via Referer leakage", "target": "{\"Lab scenario\": \"OAuth misconfiguration vulnerability in SOAP-based login flow via Referer leakage\", \"Lab Description\": \"The application uses a SOAP endpoint for federated OAuth login. Upon successful login, the OAuth token is embedded in a redirect URL. However, sensitive tokens are leaked via the Referer header when redirected to third-party resources. An attacker can steal the token if they inject external content into the flow. To solve: steal Carlos’s OAuth token via Referer leakage and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token tampering in session management", "target": "{\"Lab scenario\": \"JWT token tampering in session management\", \"Lab Description\": \"This lab contains a vulnerability where the server doesn't properly validate or invalidate JWT tokens. An attacker can manipulate the JWT's payload to escalate privileges or impersonate another user. The objective is to hijack Carlos’s account by tampering with the JWT token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leading to privilege escalation", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to privilege escalation\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where a poorly implemented OAuth flow grants unauthorized access to protected resources. The goal is to exploit this misconfiguration to escalate privileges and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Authentication lab for: session fixation attack in session management", "target": "{\"Lab scenario\": \"Session fixation attack in session management\", \"Lab Description\": \"This lab contains a session fixation vulnerability where the application does not properly regenerate session IDs on login. An attacker can fix a session ID and hijack a user's session. The goal is to fix a session ID and gain access to Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in SAML-based SSO REST Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in SAML-based SSO REST Login Flow\", \"Lab Description\": \"The application implements Single Sign-On (SSO) using SAML for authentication across multiple services. The session ID is issued before the SAML assertion is validated. The application incorrectly associates the session with the user after the assertion is processed but does not regenerate the session ID. To solve: Fixate a session before authentication and hijack Carlos’s session after SSO completes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Kid Header Injection with Public Key Retrieval (JWK endpoint)", "target": "{\"Lab scenario\": \"JWT Kid Header Injection with Public Key Retrieval (JWK endpoint)\", \"Lab Description\": \"The application uses JWT tokens for user authentication, validating them using a public key fetched from a JWK endpoint. However, the server uses the 'kid' field from the JWT header without validation, allowing injection and remote key usage. To solve: Forge a valid token for the 'admin' user using a tampered kid header pointing to your controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: SOAP API Session ID Leakage in Verbose Error Logs", "target": "{\"Lab scenario\": \"SOAP API Session ID Leakage in Verbose Error Logs\", \"Lab Description\": \"The application exposes a legacy SOAP API for admin actions. When an invalid session ID is supplied, the server includes recent session logs in the verbose SOAP Fault response. An attacker can extract valid session IDs from leaked logs and hijack the session. To solve: Extract Carlos’s session ID from a SOAP fault and use it to access the admin SOAP action.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via unchanged session id in oauth authorization flow", "target": "{\"Lab scenario\": \"Session Fixation via Unchanged Session ID in OAuth Authorization Flow\", \"Lab Description\": \"This lab simulates an application integrating with an external OAuth provider. Due to improper session regeneration, session fixation is possible. The application retains the session cookie before and after the OAuth flow without assigning a new session ID. To solve: Fixate your own session and trick the victim into completing the OAuth login flow, then hijack their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm authentication bypass in rest api", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass in REST API\", \"Lab Description\": \"The application uses JWT for user authentication in its REST API. However, it incorrectly trusts unsigned JWTs when the 'alg' header is set to 'none'. To solve: Forge a valid JWT with no signature and access the admin API endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where soap api session timeout misconfiguration enabling forced browsing", "target": "{\"Lab scenario\": \"SOAP API Session Timeout Misconfiguration Enabling Forced Browsing\", \"Lab Description\": \"The backend SOAP interface allows session tokens to remain valid beyond logout due to a misconfigured timeout and improper invalidation. The application fails to destroy server-side session references. To solve: Log out your session, capture the token, and reuse it to force-browse into the protected SOAP endpoint for Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-set session cookie in rest login endpoint", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Set Session Cookie in REST Login Endpoint\", \"Lab Description\": \"The application exposes a REST-based login flow where a session identifier is issued before authentication and accepted after login. The vulnerable logic accepts any preset session ID and binds it to the user after successful login. To solve: Fixate Carlos's session ID before login and hijack his session post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The GraphQL API uses JSON Web Tokens (JWT) for authentication. However, the backend improperly trusts tokens with `alg: none`, leading to full impersonation. To solve: Forge a JWT for Carlos using the 'none' algorithm and access his profile data via GraphQL.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authorization Header (GraphQL API)\", \"Lab Description\": \"The GraphQL API uses JSON Web Tokens (JWT) for authentication. However, the backend improperly trusts tokens with `alg: none`, leading to full impersonation. To solve: Forge a JWT for Carlos using the 'none' algorithm and access his profile data via GraphQL.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth 2.0 for login with an open redirect vulnerability in its redirect_uri parameter. This allows attackers to intercept authorization codes. To solve: Use the redirect_uri to intercept Carlos’s authorization code and exchange it for his token.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect in Redirect URI\", \"Lab Description\": \"The application uses OAuth 2.0 for login with an open redirect vulnerability in its redirect_uri parameter. This allows attackers to intercept authorization codes. To solve: Use the redirect_uri to intercept Carlos’s authorization code and exchange it for his token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application's RESTful session handling is vulnerable to session fixation. The session token is accepted from a URL path parameter before login. The application binds the session to the authenticated user without regenerating the token. To solve: hijack Carlos's session using a fixed token.", "target": "{\"Lab scenario\": \"REST API Session Fixation via Path Parameter\", \"Lab Description\": \"This application's RESTful session handling is vulnerable to session fixation. The session token is accepted from a URL path parameter before login. The application binds the session to the authenticated user without regenerating the token. To solve: hijack Carlos's session using a fixed token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL JWT Forgery via None Algorithm", "target": "{\"Lab scenario\": \"GraphQL JWT Forgery via None Algorithm\", \"Lab Description\": \"This application's GraphQL login mutation issues a JWT token signed with HS256 but fails to enforce algorithm validation. To solve: forge a JWT using 'alg':'none' to impersonate the admin user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth access token leak via referrer header in soap api", "target": "{\"Lab scenario\": \"OAuth Access Token Leak via Referrer Header in SOAP API\", \"Lab Description\": \"This application's OAuth implicit flow exposes the access token via fragment in redirect_uri. The token is leaked through the Referrer header when redirected to a SOAP endpoint with inline content. To solve: extract and reuse Carlos's leaked token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in rest authentication flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in REST authentication flow\", \"Lab Description\": \"This lab's session management implementation allows attackers to fixate a session ID before login. The application issues a session cookie pre-authentication and continues to use it post-login without rotating it. This allows session hijacking via fixation. To solve: Fixate a session ID, get the victim to log in, and access their account using the fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via algorithm confusion in graphql-based login", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in GraphQL-based login\", \"Lab Description\": \"The JWT authentication mechanism is flawed due to unsafe handling of the 'alg' claim in the token header. The server accepts unsigned JWTs if the 'alg' is set to 'none'. To solve: Forge an unsigned JWT for the admin user and access the protected GraphQL admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI validation\", \"Lab Description\": \"The OAuth provider fails to properly validate redirect URIs, allowing attackers to steal authorization codes. The vulnerable client accepts subdomains of allowed redirect URIs, which can be exploited for code hijacking. To solve: Create a malicious subdomain to capture the authorization code for carlos and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL Session Fixation in Login Token Exchange", "target": "{\"Lab scenario\": \"GraphQL Session Fixation in Login Token Exchange\", \"Lab Description\": \"The application's GraphQL login mutation is vulnerable to session fixation. The application issues a session token before authentication and does not invalidate it after login. To solve: exploit session fixation to hijack Carlos's session and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Tampering in Authorization Header", "target": "{\"Lab scenario\": \"JWT Token Tampering in Authorization Header\", \"Lab Description\": \"The application's JWT authentication relies solely on the 'alg' header value and fails to enforce a server-side signature check. This allows the use of 'none' algorithm to forge valid tokens. To solve: forge a token that impersonates carlos and access the /admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The OAuth flow uses the implicit grant type with an insecure open redirect vulnerability in the redirect_uri. This enables stealing the access token via a malicious redirect endpoint. To solve: exploit the redirect_uri to capture Carlos's access token and access his profile.", "target": "{\"Lab scenario\": \"OAuth Implicit Grant Open Redirect in Callback Handler\", \"Lab Description\": \"The OAuth flow uses the implicit grant type with an insecure open redirect vulnerability in the redirect_uri. This enables stealing the access token via a malicious redirect endpoint. To solve: exploit the redirect_uri to capture Carlos's access token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login workflow via manipulated session token", "target": "{\"Lab scenario\": \"Session fixation in login workflow via manipulated session token\", \"Lab Description\": \"The application uses a fixed session token before and after login, allowing session fixation. The session ID is issued before authentication and persists after login without regeneration. The application reflects the session cookie in verbose logs, enabling pre-auth hijacking. To solve: Fixate a session token pre-login and use it post-login to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion with none bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion with none bypass\", \"Lab Description\": \"The application uses JWT for session authentication. It verifies JWT tokens using a symmetric secret and allows tokens with alg=none due to misconfiguration. An attacker can craft a token with alg=none and no signature to impersonate any user. To solve: Forge a JWT with alg=none and access Carlos's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect_uri manipulation for code leakage", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation for code leakage\", \"Lab Description\": \"The application implements OAuth login via a third-party provider. However, the redirect_uri parameter is vulnerable to manipulation, allowing an attacker to intercept the authorization code. To solve: Exploit the redirect_uri parameter to leak the OAuth code and complete login as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth session fixation in sso redirect flow", "target": "{\"Lab scenario\": \"OAuth session fixation in SSO redirect flow\", \"Lab Description\": \"The application uses OAuth for single sign-on (SSO) integration with a third-party provider. The vulnerable component mishandles session identifiers across redirection endpoints. The application fails to regenerate the session token after completing OAuth login, allowing an attacker to fixate the session ID prior to victim login. To solve: hijack Carlos's session by setting a fixed session cookie prior to their OAuth login flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm tampering in SOAP login endpoint", "target": "{\"Lab scenario\": \"JWT algorithm tampering in SOAP login endpoint\", \"Lab Description\": \"This lab’s SOAP-based login API relies on JWT tokens to manage user sessions. The server incorrectly trusts the algorithm field of incoming tokens, allowing attackers to bypass signature validation by switching to the 'none' algorithm. To solve: generate a JWT token with alg=none and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL session fixation via token injection", "target": "{\"Lab scenario\": \"GraphQL session fixation via token injection\", \"Lab Description\": \"The application uses GraphQL for authentication and session establishment. It insecurely accepts a user-provided token through a GraphQL mutation and sets it as the session token without validation. To solve: fixate a session token for Carlos by injecting a token value pre-login, then use that token to hijack the session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Legacy session fixation vulnerability in REST login flow", "target": "{\"Lab scenario\": \"Legacy session fixation vulnerability in REST login flow\", \"Lab Description\": \"The application's login flow does not invalidate existing session cookies when a user logs in. The session token is preserved from the unauthenticated state to the authenticated state. This allows an attacker to fixate a session ID and trick a victim into authenticating with it. The application sets session cookies before login and reuses them post-authentication. To solve: Fixate a session ID, trick Carlos into logging in with it, then use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's SOAP-based authentication endpoint uses JWTs with a vulnerable `kid` header, allowing injection of a local file path. The application uses `fs.readFileSync(kid)` to load the secret key. To solve: Forge a valid JWT for Carlos using key injection via the `kid` header and access his account.", "target": "{\"Lab scenario\": \"JWT kid header injection in SOAP authentication handler\", \"Lab Description\": \"The application's SOAP-based authentication endpoint uses JWTs with a vulnerable `kid` header, allowing injection of a local file path. The application uses `fs.readFileSync(kid)` to load the secret key. To solve: Forge a valid JWT for Carlos using key injection via the `kid` header and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth with implicit flow for single-page applications. It trusts any `redirect_uri` that matches the domain but fails to validate origin during `postMessage`. An attacker can inject a malicious frame to steal tokens. To solve: Steal Carlos's access token using a crafted frame and use it to access his account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in client-side implicit grant flow\", \"Lab Description\": \"The application uses OAuth with implicit flow for single-page applications. It trusts any `redirect_uri` that matches the domain but fails to validate origin during `postMessage`. An attacker can inject a malicious frame to steal tokens. To solve: Steal Carlos's access token using a crafted frame and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow with cookie reuse", "target": "{\"Lab scenario\": \"Session fixation in login flow with cookie reuse\", \"Lab Description\": \"The application contains a session fixation vulnerability within its authentication logic. It allows unauthenticated users to assign session identifiers that are not reset during login. The application accepts a session cookie before login and continues using it post-authentication. To solve: Fixate your session before login, authenticate as Carlos, and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWT tokens for user authentication. It does not properly validate the token signature if the 'alg' header is set to 'none'. The application trusts the token without signature verification. To solve: Craft a JWT for Carlos with alg=none and access his account.", "target": "{\"Lab scenario\": \"JWT tampering due to none algorithm in token verification\", \"Lab Description\": \"The application uses JWT tokens for user authentication. It does not properly validate the token signature if the 'alg' header is set to 'none'. The application trusts the token without signature verification. To solve: Craft a JWT for Carlos with alg=none and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfiguration in redirect handling", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in redirect handling\", \"Lab Description\": \"This application implements OAuth using the implicit flow. The redirection URI is not properly validated, allowing open redirect and token leakage. The application trusts the redirect_uri without strict validation. To solve: Exploit the redirect_uri to capture Carlos’s access token and use it to access the protected /account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion in token validation", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for session handling and is vulnerable to algorithm confusion. The application accepts tokens signed with 'none' instead of verifying them. To solve: craft a forged JWT token to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via token reuse in login flow", "target": "{\"Lab scenario\": \"Session fixation via token reuse in login flow\", \"Lab Description\": \"This application improperly binds session tokens to user identity. A malicious user can fixate a victim's session by planting a session cookie before login. To solve: hijack Carlos's session by fixing the session cookie and accessing his account page after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration allows token reuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse\", \"Lab Description\": \"This app uses OAuth for third-party authentication. It incorrectly accepts ID tokens from any issuer, failing to validate the issuer and audience. To solve: reuse an ID token from another provider to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in login api", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login API\", \"Lab Description\": \"The login endpoint uses JWTs for authentication but does not enforce strict algorithm verification. The application trusts the 'alg' field from the JWT header. To solve: forge a valid JWT token for the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit grant misconfiguration in third-party login", "target": "{\"Lab scenario\": \"OAuth implicit grant misconfiguration in third-party login\", \"Lab Description\": \"The application integrates with an OAuth provider using the implicit grant flow. However, it fails to validate the 'state' parameter, enabling CSRF-style token injection. To solve: steal an access token and log in as 'carlos'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session tokens in rest login flow", "target": "{\"Lab scenario\": \"Session Fixation via predictable session tokens in REST login flow\", \"Lab Description\": \"This lab simulates a REST-based login flow vulnerable to session fixation. The application sets session cookies prior to authentication but fails to regenerate them after login. To solve: Fixate a session ID, log in as your own user, and use the same session to authenticate as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion vulnerability in GraphQL API", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in GraphQL API\", \"Lab Description\": \"This GraphQL-based API uses JWTs for authentication but insecurely supports the 'none' algorithm. The application fails to validate signed tokens properly. To solve: Forge a JWT with 'none' algorithm and access Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow misconfiguration leaking access_token via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaking access_token via referer header\", \"Lab Description\": \"This app uses OAuth 2.0 implicit grant flow for login but fails to sanitize referer headers. Tokens are leaked via open redirect endpoint after authorization. To solve: Leak Carlos’s access token and replay it to gain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via login CSRF", "target": "{\"Lab scenario\": \"Session fixation via login CSRF\", \"Lab Description\": \"This lab is vulnerable to session fixation due to improper handling of session cookies. The application accepts a session cookie set prior to authentication and does not regenerate it upon login. To solve the lab, fixate a session on Carlos’s browser and access his My account page after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature validation bypass via alg=none", "target": "{\"Lab scenario\": \"JWT signature validation bypass via alg=none\", \"Lab Description\": \"The application relies on JWTs to manage sessions but fails to enforce the use of a strong signature algorithm. It incorrectly accepts tokens using 'alg: none'. To solve the lab, forge a valid token to impersonate the admin user and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token leakage via referer", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer\", \"Lab Description\": \"This application implements OAuth 2.0 using the implicit grant flow. Access tokens are transmitted in the URL fragment, but a misconfigured redirect leaks them via the Referer header. To solve the lab, steal Carlos’s token and access his account via the OAuth endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm bypass in authorization header", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in Authorization header\", \"Lab Description\": \"This lab's authentication mechanism relies on a stateless JWT in the Authorization header. However, the server fails to properly validate the algorithm used to sign tokens. The application accepts tokens with the alg field set to 'none', which disables signature verification entirely. To solve: Forge a JWT that grants access to Carlos's account using the none algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The login system uses a session identifier that is not regenerated upon successful authentication. Additionally, the session ID is predictable and can be set by the attacker in the request. To solve: Fix a session ID before login, trick the victim into logging in, and then use the fixed session ID to impersonate them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth for login but allows open redirect behavior via an improperly validated redirect_uri parameter. This enables an attacker to capture the OAuth token by redirecting it to an external site. To solve: Exploit the open redirect to intercept Carlos's OAuth token.", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect URI manipulation\", \"Lab Description\": \"The application uses OAuth for login but allows open redirect behavior via an improperly validated redirect_uri parameter. This enables an attacker to capture the OAuth token by redirecting it to an external site. To solve: Exploit the open redirect to intercept Carlos's OAuth token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm attack in authorization header", "target": "{\"Lab scenario\": \"JWT none algorithm attack in Authorization Header\", \"Lab Description\": \"The application's JWT implementation fails to properly validate the algorithm specified in the token header. The application uses a symmetric secret to sign JWTs, but does not enforce the algorithm value. To solve: Forge a valid JWT with 'alg':'none' and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration leads to account takeover via email claim", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to account takeover via email claim\", \"Lab Description\": \"The application uses an external OAuth provider for social login. It trusts the email claim from the OAuth token without verifying domain ownership or user identity. To solve: Forge an OAuth token containing Carlos's email and gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via ID in URL query parameter", "target": "{\"Lab scenario\": \"Session fixation via ID in URL query parameter\", \"Lab Description\": \"The session ID is accepted from URL query parameters and not regenerated upon successful login. This allows an attacker to preset a session ID for a victim and hijack the session after login. To solve: Fixate Carlos's session and access his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates OAuth login via a third-party provider. However, it is vulnerable to session fixation due to improper session regeneration during the OAuth callback phase. The application preserves the session ID between unauthenticated and authenticated states, enabling an attacker to fix a session ID and hijack a victim’s account. To solve the lab, force a victim to authenticate with a session you control, then access their account.", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Callback Flow\", \"Lab Description\": \"The application integrates OAuth login via a third-party provider. However, it is vulnerable to session fixation due to improper session regeneration during the OAuth callback phase. The application preserves the session ID between unauthenticated and authenticated states, enabling an attacker to fix a session ID and hijack a victim’s account. To solve the lab, force a victim to authenticate with a session you control, then access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Spoofing via 'none' Algorithm", "target": "{\"Lab scenario\": \"JWT Signature Spoofing via 'none' Algorithm\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management. It accepts the algorithm field in the header without verification, allowing an attacker to modify the token and bypass signature checks by setting 'alg' to 'none'. To solve the lab, forge a JWT to impersonate the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where mfa bypass via debug parameter injection in graphql", "target": "{\"Lab scenario\": \"MFA Bypass via Debug Parameter Injection in GraphQL\", \"Lab Description\": \"The application uses a GraphQL endpoint for authentication with multi-factor verification. However, due to insecure debug parameters left enabled in production, it's possible to bypass MFA using a special introspection query. To solve the lab, authenticate as the victim user by exploiting the debug parameter and access their account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via login flow mismanagement", "target": "{\"Lab scenario\": \"Session fixation via login flow mismanagement\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability caused by improper session ID handling during login. The application fails to generate a new session ID after authentication, allowing attackers to set a session ID before login. To solve: hijack Carlos’s session by fixing a known session ID before login, and access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's authentication mechanism uses JSON Web Tokens (JWTs) to verify user identity. However, the backend accepts tokens using the insecure 'none' algorithm. This allows attackers to forge valid tokens without a signature. To solve: forge a JWT token to impersonate the admin user and access the admin panel.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via none algorithm\", \"Lab Description\": \"This lab's authentication mechanism uses JSON Web Tokens (JWTs) to verify user identity. However, the backend accepts tokens using the insecure 'none' algorithm. This allows attackers to forge valid tokens without a signature. To solve: forge a JWT token to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses OAuth 2.0 implicit flow for authentication. The access token is returned in the URL fragment. However, the application leaks this token via the Referer header when navigating to external domains. To solve: capture Carlos's access token and use it to access his profile.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab uses OAuth 2.0 implicit flow for authentication. The access token is returned in the URL fragment. However, the application leaks this token via the Referer header when navigating to external domains. To solve: capture Carlos's access token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login endpoint\", \"Lab Description\": \"The application improperly manages session identifiers. It accepts a pre-assigned session value from an unauthenticated user and reuses it post-login. The application does not regenerate the session ID after authentication, allowing an attacker to predetermine a session token. To solve: Hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via none algorithm in authorization token", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in authorization token\", \"Lab Description\": \"The application uses JWTs for session management but improperly trusts the `alg` header value in incoming tokens. If the algorithm is changed to 'none', the signature is not validated. The application decodes and trusts the payload blindly. To solve: Forge a valid JWT for Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri handling", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI handling\", \"Lab Description\": \"The application uses OAuth for authentication but does not strictly validate the `redirect_uri` parameter during the OAuth handshake. An attacker can supply a malicious redirect URI to intercept access tokens. To solve: Gain an access token for Carlos and access his account page using the compromised session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses a fixed session ID supplied by the client and does not regenerate the session upon login, exposing it to session fixation attacks. The application logs verbose error details and maintains insecure session management. To solve: exploit the session fixation vulnerability to hijack Carlos's session and access his account page.", "target": "{\"Lab scenario\": \"Web Application Session Fixation in Login Endpoint\", \"Lab Description\": \"The application uses a fixed session ID supplied by the client and does not regenerate the session upon login, exposing it to session fixation attacks. The application logs verbose error details and maintains insecure session management. To solve: exploit the session fixation vulnerability to hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application issues JWT tokens for authentication but fails to properly validate the token signature, allowing attackers to modify the payload without proper checks. The application logs detailed error information exposing debugging data. To solve: tamper with the JWT to impersonate Carlos and access his secure endpoints.", "target": "{\"Lab scenario\": \"Web API JWT Tampering in Token Validation\", \"Lab Description\": \"The application issues JWT tokens for authentication but fails to properly validate the token signature, allowing attackers to modify the payload without proper checks. The application logs detailed error information exposing debugging data. To solve: tamper with the JWT to impersonate Carlos and access his secure endpoints.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: web oauth misconfiguration in redirect uri", "target": "{\"Lab scenario\": \"Web OAuth Misconfiguration in Redirect URI\", \"Lab Description\": \"The application uses OAuth for authentication but fails to validate redirect URIs, allowing an attacker to redirect tokens to an external domain. The application provides verbose logging that discloses sensitive redirection data. To solve: manipulate the redirect_uri parameter to capture Carlos's access token and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in authorization header", "target": "{\"Lab scenario\": \"JWT tampering in authorization header\", \"Lab Description\": \"This lab features an API that authorizes users using JWT tokens stored in the Authorization header. The JWT token is signed using the HS256 algorithm, but the application fails to enforce the secret key properly and does not validate algorithm type. The application trusts JWT tokens signed with the 'none' algorithm. To solve: Forge a valid token that grants admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab demonstrates session fixation where the session identifier is not regenerated upon login. The application accepts a user-provided session cookie before login and continues using it after authentication. This allows an attacker to pre-assign a session ID and hijack a victim's session. To solve: Fixate a known session ID on the victim, then log in as the victim using the same session ID to gain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI\", \"Lab Description\": \"This lab includes an OAuth implementation where the redirect URI is insufficiently validated. The server accepts open redirects and allows redirection to attacker-controlled domains. The vulnerable OAuth client trusts unvalidated parameters. To solve: Leak a valid OAuth authorization code to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature manipulation in Authorization header", "target": "{\"Lab scenario\": \"JWT signature manipulation in Authorization header\", \"Lab Description\": \"This lab uses stateless JWTs for user authentication with HMAC signatures. The application trusts the 'alg' field in the token without proper validation. To solve: tamper with the JWT token to impersonate the admin user and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab suffers from a session fixation flaw. The server allows clients to supply a session ID via URL, which is not regenerated after login. To solve: fix the session for the victim, then log them in and hijack their session to access /my-account.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab suffers from a session fixation flaw. The server allows clients to supply a session ID via URL, which is not regenerated after login. To solve: fix the session for the victim, then log them in and hijack their session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab simulates a third-party OAuth login integration using an insecure redirect URI. The application accepts arbitrary redirect URIs, enabling interception of authorization codes. To solve: capture an authorization code meant for the victim and exchange it to access the victim's account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration exposing authorization code\", \"Lab Description\": \"This lab simulates a third-party OAuth login integration using an insecure redirect URI. The application accepts arbitrary redirect URIs, enabling interception of authorization codes. To solve: capture an authorization code meant for the victim and exchange it to access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authenticate users but does not verify their integrity properly. The secret key is weak and predictable. The application uses the token to authorize access to admin-only features. To solve: Forge a valid token for the admin user and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT tampering in Authorization header\", \"Lab Description\": \"The application uses JWTs to authenticate users but does not verify their integrity properly. The secret key is weak and predictable. The application uses the token to authorize access to admin-only features. To solve: Forge a valid token for the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via static session id in cookie", "target": "{\"Lab scenario\": \"Session fixation via static session ID in cookie\", \"Lab Description\": \"The application uses a predictable session ID issued before authentication and does not regenerate it upon login. To solve: Fixate a session on the victim and log in with their account using the fixed session cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party login", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to validate the `state` parameter, exposing it to CSRF-like attacks. To solve: Exploit the flow to log in as another user by hijacking their OAuth session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where graphql login brute-force with verbose error feedback", "target": "{\"Lab scenario\": \"GraphQL login brute-force with verbose error feedback\", \"Lab Description\": \"The GraphQL API provides detailed error messages and lacks rate-limiting. A login mutation exposes different errors for invalid usernames and passwords. To solve: Enumerate a valid username, then brute-force the password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where verbose logging reveals valid credentials", "target": "{\"Lab scenario\": \"Verbose logging reveals valid credentials\", \"Lab Description\": \"The backend logs contain full authentication requests and responses, including credentials. These logs are exposed via a debug endpoint. To solve: Locate and extract admin credentials from logs, then log in and access /admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in rest api authentication flow", "target": "{\"Lab scenario\": \"JWT tampering in REST API authentication flow\", \"Lab Description\": \"The application uses stateless JWTs to authenticate users on its REST API. However, the backend fails to validate the token signature properly. The application accepts unsigned tokens or those signed with a known weak key. To solve: tamper with a valid JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login redirection flow", "target": "{\"Lab scenario\": \"Session fixation in login redirection flow\", \"Lab Description\": \"The application assigns a session ID before the user is authenticated and fails to regenerate the session after login. This allows an attacker to fix a victim’s session ID prior to authentication. To solve: Fix a known session and take over the victim’s account after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party provider login", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party provider login\", \"Lab Description\": \"The app uses OAuth 2.0 with a third-party provider (e.g., GitHub) for authentication. However, the client fails to validate the issuer and audience of the returned access token. To solve: Forge a token from a malicious OAuth server and gain access to another user's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses TOTP-based 2FA codes during login, but fails to invalidate or rate-limit them after submission. An attacker who intercepts or guesses a recent OTP can reuse it. To solve: Replay a valid OTP for Carlos to bypass MFA.", "target": "{\"Lab scenario\": \"MFA bypass via predictable OTP replay\", \"Lab Description\": \"The application uses TOTP-based 2FA codes during login, but fails to invalidate or rate-limit them after submission. An attacker who intercepts or guesses a recent OTP can reuse it. To solve: Replay a valid OTP for Carlos to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where graphql introspection leaking login structure", "target": "{\"Lab scenario\": \"GraphQL introspection leaking login structure\", \"Lab Description\": \"The application exposes an unauthenticated GraphQL endpoint with introspection enabled. This allows discovery of internal mutations and input fields used in login. To solve: Discover and exploit the login mutation to access the admin account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in rest api authorization", "target": "{\"Lab scenario\": \"JWT tampering in REST API authorization\", \"Lab Description\": \"This lab uses stateless JWTs for user authentication in a RESTful API. The application fails to verify the integrity of JWT signatures properly. The token is signed with the algorithm 'none', and the server does not validate the signature field. To solve: Forge a valid token for the user 'carlos' and access the protected /api/user-info endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session ids", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"This lab suffers from a session fixation vulnerability. The application accepts arbitrary session identifiers provided by the user before authentication. It fails to generate a new session token upon successful login. To solve: Pre-set a session cookie for Carlos, trick him into logging in, and reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in graphql token exchange", "target": "{\"Lab scenario\": \"OAuth misconfiguration in GraphQL token exchange\", \"Lab Description\": \"This lab uses a misconfigured OAuth flow embedded in a GraphQL endpoint. The application accepts a third-party-issued OAuth token for internal user actions without validating the token audience (aud claim). To solve: Acquire an access token from a mock OAuth provider and use it to fetch Carlos’s private notes using a GraphQL mutation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via cookie injection in login flow", "target": "{\"Lab scenario\": \"Session fixation via cookie injection in login flow\", \"Lab Description\": \"This lab simulates a flawed session management implementation that permits session fixation via pre-login cookie injection. The application fails to regenerate session identifiers upon successful authentication. To solve: Hijack Carlos’s session by crafting a fixed session ID and getting him to use it, then access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature validation disabled in api login handler", "target": "{\"Lab scenario\": \"JWT signature validation disabled in API login handler\", \"Lab Description\": \"This lab’s API endpoint incorrectly disables JWT signature verification. The backend trusts unsigned JWTs when the 'alg' is set to 'none'. To solve: Forge an unsigned JWT that grants admin access and retrieve the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leads to token reuse in third-party callback", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to token reuse in third-party callback\", \"Lab Description\": \"This lab uses OAuth 2.0 for login via a third-party provider. It incorrectly trusts the 'state' parameter and does not validate token ownership. To solve: Reuse an access token from your account and access Carlos's dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Credential stuffing via verbose login API responses", "target": "{\"Lab scenario\": \"Credential stuffing via verbose login API responses\", \"Lab Description\": \"This lab's login endpoint leaks too much information via verbose error messages, facilitating credential stuffing. The error reveals whether the username or password is incorrect. To solve: Enumerate Carlos’s credentials and log in to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion in rest api login", "target": "{\"Lab scenario\": \"JWT algorithm confusion in REST API login\", \"Lab Description\": \"The backend accepts a JWT token for authentication, but improperly trusts the algorithm field in the token header. The application fails to enforce signature verification when `alg` is set to `none`. To solve: log in as the user 'carlos' by forging a valid JWT token and access the protected /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses OAuth with an implicit flow for third-party authentication, where the access token is returned in the URL fragment. A misconfigured redirect leaks this token via the Referer header to a third-party domain. To solve: leak Carlos’s token and use it to access /oauth/me.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via Referer header\", \"Lab Description\": \"The application uses OAuth with an implicit flow for third-party authentication, where the access token is returned in the URL fragment. A misconfigured redirect leaks this token via the Referer header to a third-party domain. To solve: leak Carlos’s token and use it to access /oauth/me.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-login set-cookie in soap-based login", "target": "{\"Lab scenario\": \"Session fixation via pre-login Set-Cookie in SOAP-based login\", \"Lab Description\": \"The application uses a SOAP endpoint for login and fails to issue a new session identifier after successful authentication. This allows an attacker to predefine the session token used by the victim. To solve: fix the session token for Carlos, then hijack it after he logs in and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion vulnerability in login verification endpoint", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login verification endpoint\", \"Lab Description\": \"The application uses JWT tokens to manage authentication. It trusts the 'alg' header from the user-provided token and does not enforce a secure algorithm on the server side. This leads to an algorithm confusion flaw. The application accepts tokens signed with 'none'. To solve: forge a JWT token to access the admin panel as user 'admin'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect uri manipulation in oauth callback", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in OAuth callback\", \"Lab Description\": \"The application integrates with a third-party OAuth provider. The redirect URI is partially validated and uses string matching to determine legitimacy. This can be bypassed using open redirect techniques. To solve: complete the OAuth login flow and gain a session as 'admin' by hijacking the redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login cookie handling", "target": "{\"Lab scenario\": \"Session fixation in login cookie handling\", \"Lab Description\": \"The application assigns session identifiers via cookies before authentication. These session IDs are not regenerated after login, allowing session fixation. To solve: fixate a session before login, authenticate with user 'carlos', and hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where mfa bypass via request smuggling on login route", "target": "{\"Lab scenario\": \"MFA bypass via request smuggling on login route\", \"Lab Description\": \"The application uses multi-factor authentication, but it is implemented as a second endpoint after initial login. A request smuggling vulnerability allows bypassing MFA by combining requests. To solve: use a smuggled request to send both login and bypass MFA steps in a single POST.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT key confusion using public key as HMAC secret", "target": "{\"Lab scenario\": \"JWT key confusion using public key as HMAC secret\", \"Lab Description\": \"The server uses asymmetric keys (RS256) for signing JWTs. However, it incorrectly accepts tokens signed with HS256, interpreting the public key as an HMAC secret. This allows attackers to forge valid tokens. To solve: sign a forged JWT using HS256 and the public key to impersonate 'admin'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session id in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"This application's session management is flawed. After login, it reuses the same session token provided prior to authentication. The application does not invalidate or regenerate the session ID upon successful login. To solve: Fixate a session for the victim and log in using their credentials, then access their My account page using the fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via algorithm confusion", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion\", \"Lab Description\": \"The application uses JWTs for session management, but it does not enforce a strict algorithm validation. It accepts unsigned JWTs when the alg field is set to 'none'. To solve: Modify your JWT to impersonate Carlos by changing the alg header to 'none' and signing out a valid token without a signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect manipulation in authorization server", "target": "{\"Lab scenario\": \"OAuth redirect manipulation in authorization server\", \"Lab Description\": \"This app integrates with an external OAuth server but does not validate redirect URIs strictly. This allows redirect URI manipulation to hijack tokens. To solve: Intercept the OAuth login flow, manipulate the redirect_uri to an attacker-controlled domain, and extract Carlos's access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Authentication lab for: session hijacking through verbose error message", "target": "{\"Lab scenario\": \"Session hijacking through verbose error message\", \"Lab Description\": \"This application exposes session IDs in verbose error messages. These leaked session tokens can be used to hijack user sessions. To solve: Trigger an error, retrieve Carlos's session ID from the response, and reuse it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application allows unlimited login attempts and does not implement rate limiting. An attacker can perform credential stuffing attacks using common leaked credentials. To solve: Use a known leaked password for Carlos and gain access to his My account page.", "target": "{\"Lab scenario\": \"Credential stuffing using leaked password\", \"Lab Description\": \"The application allows unlimited login attempts and does not implement rate limiting. An attacker can perform credential stuffing attacks using common leaked credentials. To solve: Use a known leaked password for Carlos and gain access to his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via insecure cookie assignment in rest login flow", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Assignment in REST Login Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability within the login flow. The application accepts a `session` cookie from the client and does not invalidate it upon successful login. This flawed design allows an attacker to fixate a session ID prior to login and hijack the victim's authenticated session. To solve: Hijack Carlos's session and access his account page using a pre-assigned session identifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Bypass via 'none' Algorithm in Authorization Header", "target": "{\"Lab scenario\": \"JWT Signature Bypass via 'none' Algorithm in Authorization Header\", \"Lab Description\": \"This lab simulates a vulnerable JWT validation process that improperly trusts the `alg` field in incoming tokens. The server accepts a token signed with the 'none' algorithm, effectively disabling verification. To solve: Forge a valid JWT granting admin access and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration via Redirect URI Manipulation in GraphQL Mutation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration via Redirect URI Manipulation in GraphQL Mutation\", \"Lab Description\": \"This lab demonstrates a misconfigured OAuth authorization flow implemented through a GraphQL endpoint. The server fails to validate redirect URIs during token exchange, allowing an attacker to intercept authorization codes. To solve: Manipulate the redirect_uri parameter to intercept Carlos’s token and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab’s login endpoint fails to invalidate existing session tokens, allowing an attacker to fix a session ID prior to victim login. The application maintains session state using cookies without rotating them on login. To solve: Hijack Carlos's session by fixing the session ID before they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion in authorization header", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authorization header\", \"Lab Description\": \"The application accepts JWTs signed using the 'none' algorithm. This allows attackers to forge tokens without knowing the secret. The application fails to validate token integrity correctly. To solve: Forge a token granting access to the admin panel as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in redirect URI handling", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI handling\", \"Lab Description\": \"This lab misconfigures its OAuth redirect URI validation, allowing attackers to manipulate the flow to steal authorization codes. The application trusts redirect URIs without exact matching. To solve: Capture Carlos’s authorization code via an open redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The login system reveals whether a username exists before verifying passwords, enabling enumeration and credential stuffing attacks. It does not implement rate-limiting or captcha protection. To solve: Identify a valid credential pair for Carlos and access his account.", "target": "{\"Lab scenario\": \"Credential stuffing vulnerability in verbose login error response\", \"Lab Description\": \"The login system reveals whether a username exists before verifying passwords, enabling enumeration and credential stuffing attacks. It does not implement rate-limiting or captcha protection. To solve: Identify a valid credential pair for Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session token reuse vulnerability in GraphQL login mutation", "target": "{\"Lab scenario\": \"Session token reuse vulnerability in GraphQL login mutation\", \"Lab Description\": \"This GraphQL API issues static session tokens upon login without regenerating them. Attackers can reuse captured tokens to impersonate other users. To solve: Replay Carlos’s token and access his private messages.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation in cookie-based auth middleware", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-based Auth Middleware\", \"Lab Description\": \"The application uses cookie-based sessions but does not regenerate the session ID after login, allowing session fixation attacks. The vulnerable middleware binds session cookies too early in the auth process. To solve: Fixate a session token before login, then reuse it post-authentication to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt authentication bypass using none algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT Authentication Bypass using None Algorithm in Authorization Header\", \"Lab Description\": \"The app validates JWT tokens but accepts unsigned tokens when the algorithm is set to 'none'. The verification logic fails to check for token integrity. To solve: Craft a JWT using 'none' as algorithm, spoof Carlos’s identity, and access /admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application integrates OAuth with a vulnerable redirect_uri parameter that does not enforce domain validation. This can be exploited via open redirect to steal authorization codes. To solve: Redirect the victim through a crafted URL that leaks Carlos’s OAuth code to your server and log in using the code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation via insecure cookie reuse in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Reuse in Login Flow\", \"Lab Description\": \"The application does not invalidate existing session cookies after successful login. An attacker can preset a session ID and force a victim to use it. Once the victim logs in, the attacker can hijack the session. To solve: hijack Carlos's session after fixing the session ID and triggering login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none bypass in api authorization header", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in API Authorization Header\", \"Lab Description\": \"The app uses JWT for API auth but accepts `alg: none`, enabling tampering. JWTs are passed via Authorization header. To solve: forge a valid token for user 'admin' without needing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit grant token stealing via redirect manipulation", "target": "{\"Lab scenario\": \"OAuth Implicit Grant Token Stealing via Redirect Manipulation\", \"Lab Description\": \"The app uses OAuth implicit grant and reflects redirect URIs insecurely. An attacker can manipulate the redirect_uri to capture tokens. To solve: obtain Carlos’s access token and use it to access his account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt key confusion exploit in login endpoint", "target": "{\"Lab scenario\": \"JWT Key Confusion Exploit in Login Endpoint\", \"Lab Description\": \"The app uses asymmetric JWT but incorrectly allows verification with symmetric key, enabling key confusion attacks. To solve: sign a forged admin token with the public key as HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session id exposure in graphql login mutation", "target": "{\"Lab scenario\": \"Session ID Exposure in GraphQL Login Mutation\", \"Lab Description\": \"The GraphQL login mutation leaks verbose error info and returns session ID directly in response, enabling session prediction. To solve: predict session of 'carlos' and hijack it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via oauth code reuse in redirect uri", "target": "{\"Lab scenario\": \"Session Fixation via OAuth Code Reuse in Redirect URI\", \"Lab Description\": \"OAuth login improperly accepts reused authorization codes. An attacker can authenticate as victim using replayed codes. To solve: obtain Carlos's code and reuse it post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt expiry manipulation in authorization header", "target": "{\"Lab scenario\": \"JWT Expiry Manipulation in Authorization Header\", \"Lab Description\": \"JWT tokens are verified without checking the expiration claim. An attacker can craft expired tokens that are still accepted. To solve: generate expired token for 'admin' and access /admin-area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application allows users to authenticate via a login form but does not issue a new session ID upon successful login. Instead, it reuses the session ID issued before authentication. This enables session fixation. The application reflects session IDs in a predictable format. To solve: Fixate a session for the victim user and access their My Account page.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application allows users to authenticate via a login form but does not issue a new session ID upon successful login. Instead, it reuses the session ID issued before authentication. This enables session fixation. The application reflects session IDs in a predictable format. To solve: Fixate a session for the victim user and access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The backend validates JWTs using the 'alg' header in the token. It incorrectly accepts tokens with 'none' algorithm, skipping signature verification. To solve: Forge a valid-looking token for the user 'admin' and access their My Account page.", "target": "{\"Lab scenario\": \"JWT algorithm confusion allowing token forgery\", \"Lab Description\": \"The backend validates JWTs using the 'alg' header in the token. It incorrectly accepts tokens with 'none' algorithm, skipping signature verification. To solve: Forge a valid-looking token for the user 'admin' and access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth flow uses a redirect_uri parameter that is not properly validated, allowing attackers to inject an external domain. This can be exploited to leak authorization codes. To solve: Capture an authorization code issued for the victim and log in to their account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect during authorization\", \"Lab Description\": \"The OAuth flow uses a redirect_uri parameter that is not properly validated, allowing attackers to inject an external domain. This can be exploited to leak authorization codes. To solve: Capture an authorization code issued for the victim and log in to their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login csrf vulnerability", "target": "{\"Lab scenario\": \"Session fixation via login CSRF vulnerability\", \"Lab Description\": \"The application is vulnerable to login CSRF. The session remains fixed after the victim logs in via a crafted form. To solve: Force the victim to log in with your session ID and access their account page using that session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature bypass via public key as HMAC key", "target": "{\"Lab scenario\": \"JWT signature bypass via public key as HMAC key\", \"Lab Description\": \"The application uses asymmetric RSA to sign JWTs but mistakenly verifies tokens using the public key with the HMAC algorithm. To solve: Forge a token for 'admin' using RS256 public key with HS256 algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: graphql endpoint leaking verbose jwt decoding errors", "target": "{\"Lab scenario\": \"GraphQL endpoint leaking verbose JWT decoding errors\", \"Lab Description\": \"The GraphQL API performs JWT validation and returns verbose error messages on failure. These errors help brute-force or guess the signing key. To solve: Identify the key from error feedback and forge a token to access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where persistent session reuse in soap login api", "target": "{\"Lab scenario\": \"Persistent session reuse in SOAP login API\", \"Lab Description\": \"The SOAP API returns session tokens that are valid indefinitely and reused across logins. These tokens can be harvested from logs or URLs. To solve: Reuse a captured token for the admin and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT with static secret across users", "target": "{\"Lab scenario\": \"JWT with static secret across users\", \"Lab Description\": \"The JWT implementation uses a hardcoded static secret, same for all users. An attacker can sign their own tokens once the key is known. To solve: Discover the shared secret and forge a token for 'admin'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The app sets session tokens in URLs for internal redirections. These URLs are leaked via the Referer header. To solve: Capture a valid session token via referrer and reuse it to access /account.", "target": "{\"Lab scenario\": \"Session ID exposed in referrer header\", \"Lab Description\": \"The app sets session tokens in URLs for internal redirections. These URLs are leaked via the Referer header. To solve: Capture a valid session token via referrer and reuse it to access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application implements a login system that uses a session ID passed via a query parameter to maintain state. However, the server fails to invalidate pre-authenticated session IDs. This leads to a session fixation vulnerability. The application allows attackers to fix the victim's session ID before they log in. To solve: hijack Carlos's session by setting a known session ID and forcing him to authenticate with it.", "target": "{\"Lab scenario\": \"Session Fixation via Unvalidated Token in REST Login Flow\", \"Lab Description\": \"The application implements a login system that uses a session ID passed via a query parameter to maintain state. However, the server fails to invalidate pre-authenticated session IDs. This leads to a session fixation vulnerability. The application allows attackers to fix the victim's session ID before they log in. To solve: hijack Carlos's session by setting a known session ID and forcing him to authenticate with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm forgery in graphql auth token", "target": "{\"Lab scenario\": \"JWT None Algorithm Forgery in GraphQL Auth Token\", \"Lab Description\": \"The application uses JWT for GraphQL authentication but fails to validate the token algorithm properly. The `alg` field is user-controlled and defaults to `none` if missing or set improperly. The application signs JWTs with a symmetric key but trusts tokens without signatures when `alg` is set to `none`. To solve: craft a JWT with `alg:none` and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth client misconfiguration via redirect uri manipulation", "target": "{\"Lab scenario\": \"OAuth Client Misconfiguration via Redirect URI Manipulation\", \"Lab Description\": \"The application integrates OAuth for third-party login but improperly validates the `redirect_uri` parameter. This allows an attacker to manipulate the URI to a domain they control. By injecting a malicious redirect URI, the attacker can capture a valid authorization code. To solve: obtain Carlos's access token using a manipulated `redirect_uri` and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements OAuth-based login and contains a session fixation vulnerability. The application fails to generate a new session ID after OAuth login. An attacker can set their session ID prior to the victim's login and hijack their session post-login. To solve: hijack Carlos's account by pre-fixing a session and accessing his account page after login.", "target": "{\"Lab scenario\": \"OAuth session fixation in authentication callback\", \"Lab Description\": \"This lab implements OAuth-based login and contains a session fixation vulnerability. The application fails to generate a new session ID after OAuth login. An attacker can set their session ID prior to the victim's login and hijack their session post-login. To solve: hijack Carlos's account by pre-fixing a session and accessing his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature confusion in REST API", "target": "{\"Lab scenario\": \"JWT signature confusion in REST API\", \"Lab Description\": \"This lab uses a JWT-based authorization mechanism and is vulnerable to signature confusion via the 'none' algorithm. The application accepts JWTs with the 'alg' field set to 'none' and does not verify the signature. To solve: craft a forged token that impersonates Carlos and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: mfa bypass due to logic flaw in soap endpoint", "target": "{\"Lab scenario\": \"MFA bypass due to logic flaw in SOAP endpoint\", \"Lab Description\": \"This lab uses SOAP-based login with MFA verification. The backend fails to verify the MFA token when a specific debug header is set. This can be exploited to bypass 2FA entirely. To solve: log in as Carlos without knowing the MFA code by bypassing the second step using the debug header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JSON Web Tokens (JWT) to manage user sessions and supports multiple algorithms for signature verification. It mistakenly treats 'none' algorithm as valid when certain conditions are met, due to a flawed library wrapper. The application validates tokens signed with 'HS256' and mistakenly trusts unsigned tokens if the header is manipulated. To solve: craft a valid unsigned JWT granting admin privileges and access the /admin panel.", "target": "{\"Lab scenario\": \"JWT signature trust confusion in multi-algorithm implementation\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) to manage user sessions and supports multiple algorithms for signature verification. It mistakenly treats 'none' algorithm as valid when certain conditions are met, due to a flawed library wrapper. The application validates tokens signed with 'HS256' and mistakenly trusts unsigned tokens if the header is manipulated. To solve: craft a valid unsigned JWT granting admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via set-cookie path scoping", "target": "{\"Lab scenario\": \"Session fixation via Set-Cookie path scoping\", \"Lab Description\": \"The application creates a new session for users only after a successful login but uses a fixed session identifier that is scoped to a non-authentication path. Due to improper path scoping on Set-Cookie headers, attackers can fix a session ID before login. To solve: inject a known session ID before the victim logs in and hijack the session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token leakage via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"The application uses OAuth 2.0 implicit grant for third-party login and redirects access tokens in the URL fragment (#). However, the application incorrectly loads third-party content after the redirect, exposing the token in the Referer header. To solve: leak Carlos's access token and use it to access his account via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in cookie-based auth mechanism", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-Based Auth Mechanism\", \"Lab Description\": \"This lab contains a session fixation vulnerability in its cookie-based login process. The application assigns session identifiers before authentication and fails to invalidate them upon login. To solve: Hijack Carlos's session by fixing the session cookie before he logs in and then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm authentication bypass", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass\", \"Lab Description\": \"The application uses JWTs for authentication but fails to validate the token signature properly when the 'alg' field is set to 'none'. To solve: Forge a token with the 'none' algorithm to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth 2.0 implementation does not properly validate redirect URIs, allowing an attacker to inject a malicious URI and intercept the authorization code. To solve: Steal an access token for Carlos and use it to access his account via the OAuth-protected API.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation for Access Token Theft\", \"Lab Description\": \"The OAuth 2.0 implementation does not properly validate redirect URIs, allowing an attacker to inject a malicious URI and intercept the authorization code. To solve: Steal an access token for Carlos and use it to access his account via the OAuth-protected API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"The session management mechanism in this RESTful application issues session IDs before login. The session token is not regenerated upon successful login, allowing an attacker to fix a session ID. The application exposes verbose session tokens during pre-auth requests. To solve: hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application uses JWTs to verify user identity, but insecurely trusts the algorithm specified in the token header. The server uses HMAC with a secret key, but doesn't validate the algorithm field properly. To solve: forge a JWT with 'alg' set to 'none' and access the admin's profile.", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion with None Header\", \"Lab Description\": \"This application uses JWTs to verify user identity, but insecurely trusts the algorithm specified in the token header. The server uses HMAC with a secret key, but doesn't validate the algorithm field properly. To solve: forge a JWT with 'alg' set to 'none' and access the admin's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This OAuth-enabled application uses a vulnerable redirect URI mechanism. The redirect URL is not validated strictly, allowing open redirect exploitation to steal authorization codes. To solve: capture Carlos's OAuth code and exchange it for an access token to access his profile.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Leakage via Redirect Manipulation\", \"Lab Description\": \"This OAuth-enabled application uses a vulnerable redirect URI mechanism. The redirect URL is not validated strictly, allowing open redirect exploitation to steal authorization codes. To solve: capture Carlos's OAuth code and exchange it for an access token to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This GraphQL API uses JWTs for authentication and verifies token expiration using `exp`. The application is vulnerable to clock skew due to poor validation of token timestamps. To solve: forge a token with future expiration, exploit clock desync, and access the user's secret notes.", "target": "{\"Lab scenario\": \"GraphQL JWT Expiration Bypass via Clock Skew\", \"Lab Description\": \"This GraphQL API uses JWTs for authentication and verifies token expiration using `exp`. The application is vulnerable to clock skew due to poor validation of token timestamps. To solve: forge a token with future expiration, exploit clock desync, and access the user's secret notes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in login flow via url parameter", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow via URL Parameter\", \"Lab Description\": \"The application allows users to specify a session ID via a URL query parameter during login. This session ID is later used without regeneration after authentication. The application trusts the client-supplied session ID even after successful login. To solve: Fix a session ID, trick the victim to log in using it, and access their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses JWT for session management. The backend verifies JWTs but fails to properly enforce the algorithm specified in the token header. It incorrectly accepts the 'alg':'none' value, skipping signature verification. To solve: Modify a valid JWT by setting alg to none and remove the signature to impersonate Carlos.", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header using 'none' Algorithm\", \"Lab Description\": \"This lab uses JWT for session management. The backend verifies JWTs but fails to properly enforce the algorithm specified in the token header. It incorrectly accepts the 'alg':'none' value, skipping signature verification. To solve: Modify a valid JWT by setting alg to none and remove the signature to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application integrates OAuth for authentication. However, it fails to strictly validate the redirect_uri parameter, allowing redirection to attacker-controlled domains. The access token is exposed via URL fragment. To solve: Capture Carlos’s access token by injecting an attacker-controlled redirect URI and replay the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"The application uses a session cookie that is not regenerated upon authentication. This enables session fixation, allowing attackers to set a session ID before login. To solve: gain access to Carlos's account by fixing a session and tricking him into logging in with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Tampering in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in Authorization Header\", \"Lab Description\": \"This app uses JWTs to manage access control. Due to improper validation, it accepts tokens signed with the 'none' algorithm. To solve: tamper with a JWT to impersonate the user carlos and access the protected resource /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab has a vulnerable OAuth implementation where the authorization code is sent to an open redirector that leaks it to an attacker. To solve: intercept the code from the OAuth provider and exchange it for an access token to impersonate Carlos.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Redirect Flow\", \"Lab Description\": \"This lab has a vulnerable OAuth implementation where the authorization code is sent to an open redirector that leaks it to an attacker. To solve: intercept the code from the OAuth provider and exchange it for an access token to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion leading to signature bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to signature bypass\", \"Lab Description\": \"This lab's JWT authentication mechanism is vulnerable to algorithm confusion. The application incorrectly accepts unsigned tokens when the alg header is set to 'none'. To solve the lab, gain access to the administrator's account by bypassing the JWT signature verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via url-based session id", "target": "{\"Lab scenario\": \"Session fixation via URL-based session ID\", \"Lab Description\": \"The session management mechanism is vulnerable due to reliance on session IDs passed through URLs. The application does not properly regenerate session identifiers after authentication. To solve the lab, log in as the victim by planting a known session ID before they log in and then reuse it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leakage via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab demonstrates a token leakage vulnerability in OAuth 2.0's implicit flow. The access token is embedded in the URL fragment and can leak through referer headers to third-party domains. To solve the lab, capture the admin's token via referer leakage and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via cookie injection in oauth redirect flow", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in OAuth Redirect Flow\", \"Lab Description\": \"The application integrates third-party OAuth login but does not invalidate existing session cookies during the authentication redirect chain. The application reuses an attacker-controlled session post-login. To solve: Fixate a session via the redirect endpoint and access the victim's account page after they complete OAuth login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The backend improperly trusts the 'alg' header in JWT tokens, allowing attackers to switch the algorithm from RS256 to HS256 and sign tokens with a known public key. To solve: Forge a JWT for the 'admin' user and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Authorization Header\", \"Lab Description\": \"The backend improperly trusts the 'alg' header in JWT tokens, allowing attackers to switch the algorithm from RS256 to HS256 and sign tokens with a known public key. To solve: Forge a JWT for the 'admin' user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth client incorrectly validates redirect URIs, allowing attackers to inject a redirect endpoint that leaks access tokens. To solve: Capture an OAuth token by redirecting the victim’s login flow to your controlled domain.", "target": "{\"Lab scenario\": \"OAuth Token Disclosure via Open Redirect in Redirect URI\", \"Lab Description\": \"The OAuth client incorrectly validates redirect URIs, allowing attackers to inject a redirect endpoint that leaks access tokens. To solve: Capture an OAuth token by redirecting the victim’s login flow to your controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's session management fails to invalidate active sessions post-password reset. The application assigns a new session ID only after login, allowing an attacker to exploit a fixed session during password reset. To solve: Fixate a session prior to victim login and hijack their session post-reset to access their dashboard.", "target": "{\"Lab scenario\": \"Session fixation via password reset endpoint\", \"Lab Description\": \"The application's session management fails to invalidate active sessions post-password reset. The application assigns a new session ID only after login, allowing an attacker to exploit a fixed session during password reset. To solve: Fixate a session prior to victim login and hijack their session post-reset to access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The backend JWT validation logic fails to properly enforce algorithm verification. An attacker can craft a JWT with 'alg':'none' and bypass verification, gaining unauthorized access. To solve: Forge a JWT token using 'none' algorithm and access Carlos’s admin panel.", "target": "{\"Lab scenario\": \"JWT signature bypass via 'none' algorithm injection\", \"Lab Description\": \"The backend JWT validation logic fails to properly enforce algorithm verification. An attacker can craft a JWT with 'alg':'none' and bypass verification, gaining unauthorized access. To solve: Forge a JWT token using 'none' algorithm and access Carlos’s admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token leakage via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab uses the OAuth 2.0 implicit grant type. The access token is returned in the fragment of the redirect URI and exposed via Referer headers during subsequent navigation. To solve: Capture the access token of Carlos from a referer leak and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab’s session management is flawed, allowing attackers to fixate a session ID before login. The application issues a session cookie during pre-login activities but fails to regenerate it upon successful authentication, allowing fixation attacks. To solve: hijack Carlos's session by planting a known session ID and then accessing his account page after login.", "target": "{\"Lab scenario\": \"Session Fixation via Weak Session Handling in Login Flow\", \"Lab Description\": \"This lab’s session management is flawed, allowing attackers to fixate a session ID before login. The application issues a session cookie during pre-login activities but fails to regenerate it upon successful authentication, allowing fixation attacks. To solve: hijack Carlos's session by planting a known session ID and then accessing his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Algorithm Confusion Exploit in Authorization Token", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion Exploit in Authorization Token\", \"Lab Description\": \"This lab’s JWT validation is vulnerable due to algorithm confusion. It accepts unsigned tokens if alg is set to 'none'. The application incorrectly processes JWTs during authentication without verifying the algorithm correctly. To solve: forge a token to access Carlos's account without needing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Implicit Flow Token Leakage via Referrer Header", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leakage via Referrer Header\", \"Lab Description\": \"This lab’s OAuth 2.0 implementation improperly leaks access tokens via the HTTP Referer header. The application uses the implicit grant flow without restricting referrer policies. An attacker can steal tokens embedded in the URL fragment. To solve: steal Carlos's OAuth access token and use it to access his protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion leading to authentication bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to authentication bypass\", \"Lab Description\": \"The application uses JWT-based session tokens for user authentication. It mistakenly supports multiple algorithms, including `none`, without enforcing a strict verification policy. The application accepts unsigned JWTs if the `alg` is set to `none`, allowing attackers to forge tokens. To solve: Forge a JWT to impersonate the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via cookie parameter injection", "target": "{\"Lab scenario\": \"Session fixation via cookie parameter injection\", \"Lab Description\": \"The session management mechanism fails to regenerate session identifiers upon login, allowing an attacker to fix a session ID in advance. The application accepts a session cookie from unauthenticated users and keeps it valid post-authentication. To solve: Log in as carlos using a pre-fixed session ID and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leakage via redirect_uri manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via redirect_uri manipulation\", \"Lab Description\": \"The application uses an OAuth 2.0 implicit flow but improperly validates redirect URIs. The attacker can manipulate the redirect_uri parameter to capture access tokens using their controlled endpoint. To solve: Leak an OAuth token belonging to carlos and use it to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in password reset flow", "target": "{\"Lab scenario\": \"Session fixation in password reset flow\", \"Lab Description\": \"The application allows attackers to fix a session identifier before a user resets their password. The password reset handler reuses the existing session without invalidating or rotating it. To solve: hijack Carlos's session by setting a fixed session ID before he resets his password, then access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm in Authorization header\", \"Lab Description\": \"This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth access token leakage via referer header in redirect", "target": "{\"Lab scenario\": \"OAuth access token leakage via referer header in redirect\", \"Lab Description\": \"The application uses OAuth 2.0 implicit flow and redirects users to a third-party site after authentication. However, the access token is passed in the URL fragment and leaks via the HTTP referer header. To solve: intercept the token leak and use it to access the victim's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login endpoint parameter manipulation", "target": "{\"Lab scenario\": \"Session fixation via login endpoint parameter manipulation\", \"Lab Description\": \"The application's login endpoint allows an attacker to fix a session ID prior to authentication. The application reuses the existing session identifier after login without regenerating it. To solve: hijack Carlos's session using a fixed session ID to access his profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion with 'none' exploit", "target": "{\"Lab scenario\": \"JWT algorithm confusion with 'none' exploit\", \"Lab Description\": \"This application's JWT-based authentication accepts user-supplied tokens but does not enforce the algorithm used to verify signatures. The backend accepts the 'none' algorithm without signature verification. To solve: create a forged token to log in as the admin user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allowing unauthorized token usage", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing unauthorized token usage\", \"Lab Description\": \"The application integrates OAuth for SSO but fails to validate the client_id and redirect_uri against a whitelist. This allows a malicious actor to reuse an issued token on a forged client. To solve: obtain a valid token and replay it against a vulnerable resource without authorization.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature disclosure in authorization header parsing", "target": "{\"Lab scenario\": \"JWT signature disclosure in Authorization header parsing\", \"Lab Description\": \"The application uses JWTs to authorize API requests but misconfigures signature verification. The header parser leaks the JWT secret in debug mode when an invalid token is submitted. The application trusts any token signed with this secret. To solve: exploit the debug leak, forge a token for user 'admin', and access /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates third-party OAuth for login. It reuses old authorization codes and does not bind tokens to sessions. This allows replaying a leaked code to impersonate another user. To solve: extract an intercepted OAuth code from logs, reuse it to generate a valid token for 'victim@example.com', and access their profile.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse\", \"Lab Description\": \"The application integrates third-party OAuth for login. It reuses old authorization codes and does not bind tokens to sessions. This allows replaying a leaked code to impersonate another user. To solve: extract an intercepted OAuth code from logs, reuse it to generate a valid token for 'victim@example.com', and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via insecure set-cookie path scoping", "target": "{\"Lab scenario\": \"Session fixation via insecure Set-Cookie path scoping\", \"Lab Description\": \"The application sets a session cookie with path=/login only, allowing an attacker to pre-set a session cookie that persists during victim login. This enables session fixation attacks. To solve: set a session cookie with fixed ID, trick victim into login, then hijack session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where mfa bypass via logic bug in verification fallback", "target": "{\"Lab scenario\": \"MFA bypass via logic bug in verification fallback\", \"Lab Description\": \"The MFA mechanism includes a logic flaw where failure to submit a token defaults to a verified state if the user is marked 'trusted'. The application misclassifies users as trusted after a single login attempt. To solve: log in, ensure 'trusted' flag is set, then omit the MFA step and access sensitive resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The lab simulates a third-party login using OAuth. The application does not properly regenerate session identifiers after OAuth authentication. An attacker can fixate a session ID prior to login. To solve: hijack a victim’s session post-OAuth login using a pre-set session token.", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Authorization Flow\", \"Lab Description\": \"The lab simulates a third-party login using OAuth. The application does not properly regenerate session identifiers after OAuth authentication. An attacker can fixate a session ID prior to login. To solve: hijack a victim’s session post-OAuth login using a pre-set session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm authentication bypass", "target": "{\"Lab scenario\": \"JWT none algorithm authentication bypass\", \"Lab Description\": \"This application uses JWT tokens for session handling. However, it accepts tokens signed with the 'none' algorithm without verifying the signature. To solve: forge a JWT with alg=none to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via login endpoint on soap api", "target": "{\"Lab scenario\": \"Session fixation via login endpoint on SOAP API\", \"Lab Description\": \"The backend SOAP service fails to invalidate old session IDs during login. This allows an attacker to fixate a known session and later hijack a victim's authenticated session. To solve: capture a session before login, fixate it, and use it to access the victim’s session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via upgrade flow in REST login", "target": "{\"Lab scenario\": \"Session fixation via upgrade flow in REST login\", \"Lab Description\": \"The application uses session-based authentication and supports an 'upgrade' mechanism where unauthenticated sessions can be promoted after login. The session ID is not regenerated upon successful login, allowing fixation. To solve: Fixate a session ID and login as Carlos without knowing his credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application uses JWTs to authenticate users for a GraphQL endpoint. The JWT validation accepts tokens with the 'none' algorithm when no signature is provided. To solve: Forge a token with 'none' algorithm and gain access to Carlos’s account.", "target": "{\"Lab scenario\": \"JWT none algorithm override in GraphQL login API\", \"Lab Description\": \"This application uses JWTs to authenticate users for a GraphQL endpoint. The JWT validation accepts tokens with the 'none' algorithm when no signature is provided. To solve: Forge a token with 'none' algorithm and gain access to Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow open redirect with token leak", "target": "{\"Lab scenario\": \"OAuth implicit flow open redirect with token leak\", \"Lab Description\": \"This app uses OAuth with the implicit grant type. The redirect_uri parameter is improperly validated, allowing token leakage via open redirect. To solve: Exploit the open redirect to capture an access token and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session replay due to insecure session expiration logic in rest api", "target": "{\"Lab scenario\": \"Session replay due to insecure session expiration logic in REST API\", \"Lab Description\": \"The application does not enforce session expiration correctly, allowing reuse of stale tokens within a brief timing window. It uses stateless session tokens with no revocation tracking. To solve: replay a previously valid session token to access Carlos's account after logout.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt authentication bypass using 'none' algorithm in graphql api", "target": "{\"Lab scenario\": \"JWT authentication bypass using 'none' algorithm in GraphQL API\", \"Lab Description\": \"The backend incorrectly accepts JWTs signed with the 'none' algorithm. The application uses JWTs to authorize GraphQL queries. To solve: forge a JWT to access Carlos's account profile by injecting a token with 'alg':'none'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth 2.0 code interception due to open redirect in callback endpoint", "target": "{\"Lab scenario\": \"OAuth 2.0 code interception due to open redirect in callback endpoint\", \"Lab Description\": \"The application integrates with a third-party OAuth provider, but its redirect_uri parameter is vulnerable to open redirection. An attacker can intercept the authorization code and complete OAuth flow as another user. To solve: log in to Carlos's account via stolen OAuth token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via preserved session ID in OAuth callback", "target": "{\"Lab scenario\": \"Session fixation via preserved session ID in OAuth callback\", \"Lab Description\": \"The application integrates OAuth for external login but incorrectly preserves session identifiers across the authorization process. The application allows the session ID set before the OAuth login to persist and bind to the authenticated session. To solve: Hijack Carlos's authenticated session by fixing a session ID and triggering OAuth login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JSON Web Tokens (JWTs) to authorize access to admin functionality but improperly trusts the algorithm field in incoming tokens. The verification step trusts tokens with alg=none or switched signing algorithms. To solve: Forge a valid JWT granting admin access using algorithm confusion.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in access token verification\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) to authorize access to admin functionality but improperly trusts the algorithm field in incoming tokens. The verification step trusts tokens with alg=none or switched signing algorithms. To solve: Forge a valid JWT granting admin access using algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Bypassing MFA with misconfigured OTP verification logic", "target": "{\"Lab scenario\": \"Bypassing MFA with misconfigured OTP verification logic\", \"Lab Description\": \"The application uses an OTP-based second factor of authentication but verifies only the presence—not validity—of the OTP. A user can bypass this step by submitting a malformed or missing value. To solve: Access Carlos's account page without knowing the valid OTP.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via token reuse vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session Fixation via token reuse vulnerability in login endpoint\", \"Lab Description\": \"The application's login logic accepts externally supplied session tokens, leading to a session fixation vulnerability. The application uses a cookie named `session` but does not regenerate it after login. To solve: Fixate a session for Carlos before he logs in, then use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT none algorithm vulnerability in authentication token validation logic", "target": "{\"Lab scenario\": \"JWT none algorithm vulnerability in authentication token validation logic\", \"Lab Description\": \"The REST API uses JWTs for user authentication, but fails to enforce proper signature verification. It improperly accepts tokens with the `alg` header set to `none`. To solve: Forge a valid-looking JWT token with `none` algorithm and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect uri manipulation in third-party authentication handler", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in third-party authentication handler\", \"Lab Description\": \"The app implements OAuth 2.0 login via a third-party provider but does not validate the `redirect_uri` parameter. This allows an attacker to manipulate the flow and capture authorization codes. To solve: Hijack Carlos’s OAuth login flow to gain access to his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Algorithm Confusion in Authorization Header", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens for session authentication but fails to verify the signing algorithm securely. The token is accepted even if the algorithm is changed to 'none'. The application embeds user roles inside JWTs and uses these to enforce access control. To solve: Access the /admin endpoint as an admin without valid credentials by manipulating the JWT header and payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id in cookie", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID in Cookie\", \"Lab Description\": \"The application assigns static session tokens based on usernames, which are reused on login and not regenerated after successful authentication. This allows an attacker to force a victim to use a known session ID. To solve: Fixate Carlos's session ID and gain access to his authenticated account without knowing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration in Redirect URI Validation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application uses OAuth for login via a third-party provider but fails to enforce strict validation of the redirect URI. This allows attackers to intercept authorization codes by manipulating the redirect_uri parameter. To solve: Capture Carlos's authorization code and exchange it for an access token to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion in access control middleware", "target": "{\"Lab scenario\": \"JWT algorithm confusion in access control middleware\", \"Lab Description\": \"This lab contains a JWT implementation vulnerable to algorithm confusion. The application uses the 'alg' field from the token header without enforcing a fixed algorithm, allowing a switch from RS256 to HS256 with the public key as HMAC secret. To solve: Forge a JWT token to impersonate the admin user and access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via login redirection token", "target": "{\"Lab scenario\": \"Session fixation via login redirection token\", \"Lab Description\": \"This lab implements a redirection-based login flow where a session token is pre-assigned and reused across accounts. The session fixation vulnerability arises due to the application honoring the token provided in the URL even after successful login. To solve: Fix a session for Carlos and access /my-account as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code leakage via referer header", "target": "{\"Lab scenario\": \"OAuth authorization code leakage via Referer header\", \"Lab Description\": \"This lab is vulnerable due to improper handling of OAuth 2.0 authorization codes which can leak via the Referer header to third-party domains. The app does not validate the 'redirect_uri' domain properly, allowing attackers to steal codes. To solve: Leak the victim's code to your server and redeem it to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm bypass in authorization header", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in Authorization header\", \"Lab Description\": \"The application uses JWTs to manage user sessions but fails to validate the signature if the algorithm is set to 'none'. The JWT token is sent via the Authorization header in a Bearer scheme. To solve: Forge a valid admin JWT using the 'none' algorithm and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via cookie injection during login", "target": "{\"Lab scenario\": \"Session fixation via cookie injection during login\", \"Lab Description\": \"The login flow accepts any session cookie provided by the user and binds it to the authenticated session. There is no session regeneration after login, allowing session fixation attacks. To solve: Fixate a session for the victim and hijack their session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code reuse flaw", "target": "{\"Lab scenario\": \"OAuth authorization code reuse flaw\", \"Lab Description\": \"The application integrates with an OAuth provider for login but fails to enforce single-use authorization codes. This allows an attacker to reuse a previously intercepted OAuth code to hijack a session. To solve: Reuse an intercepted authorization code to log in as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements JWT-based authentication for accessing sensitive resources. The application verifies JWT tokens using a static secret but does not enforce the signing algorithm properly. To solve the lab, forge a valid JWT and access the admin panel without valid credentials.", "target": "{\"Lab scenario\": \"JWT tampering in Authorization header\", \"Lab Description\": \"This lab implements JWT-based authentication for accessing sensitive resources. The application verifies JWT tokens using a static secret but does not enforce the signing algorithm properly. To solve the lab, forge a valid JWT and access the admin panel without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id in soap api", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in SOAP API\", \"Lab Description\": \"The SOAP-based login service allows an attacker to define the session ID prior to authentication, leading to session fixation. The application does not regenerate session IDs upon login. To solve the lab, fix a session for the victim and hijack their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration leaking access token in redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access token in redirect\", \"Lab Description\": \"The application integrates OAuth login using a third-party provider but leaks the access token in the URL fragment after redirection. This token can be captured and reused. To solve the lab, obtain Carlos's access token from the redirect URL and use it to access his private data endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application's GraphQL login mutation does not issue new session tokens after authentication. Instead, it reuses any existing session token from unauthenticated users. This leads to a session fixation vulnerability. The application accepts session cookies before login and continues using them post-authentication without rotation. To solve: Fixate Carlos's session ID, then authenticate using his credentials and hijack his session.", "target": "{\"Lab scenario\": \"Session fixation via insecure session reuse in GraphQL login flow\", \"Lab Description\": \"The application's GraphQL login mutation does not issue new session tokens after authentication. Instead, it reuses any existing session token from unauthenticated users. This leads to a session fixation vulnerability. The application accepts session cookies before login and continues using them post-authentication without rotation. To solve: Fixate Carlos's session ID, then authenticate using his credentials and hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT 'none' algorithm manipulation in REST API authentication", "target": "{\"Lab scenario\": \"JWT 'none' algorithm manipulation in REST API authentication\", \"Lab Description\": \"The application uses stateless JWTs for authentication and accepts unsigned JWTs due to incorrect validation logic. By manipulating the 'alg' header of the JWT to 'none', an attacker can forge valid session tokens. The application fails to reject tokens that lack valid signatures. To solve: Forge an unsigned JWT that grants admin access and retrieve sensitive data from the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates with a third-party OAuth provider but fails to validate redirect URIs properly in the implicit flow. An attacker can craft a malicious redirect URI pointing to their controlled domain, capturing the access token directly from the URL fragment. To solve: Capture Carlos's OAuth access token and use it to fetch his protected profile from /oauth/profile.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leading to token theft via redirect URI manipulation\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to validate redirect URIs properly in the implicit flow. An attacker can craft a malicious redirect URI pointing to their controlled domain, capturing the access token directly from the URL fragment. To solve: Capture Carlos's OAuth access token and use it to fetch his protected profile from /oauth/profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in REST Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in REST Login Flow\", \"Lab Description\": \"This lab simulates a flawed session management implementation where a session ID can be pre-assigned and accepted post-authentication. The application fails to invalidate existing session cookies on login. To solve: Hijack Carlos's session after successful login by forcing him to use your pre-assigned session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens to authenticate GraphQL API requests, but fails to properly enforce the signing algorithm. The server accepts tokens signed with `alg: none`, allowing unauthorized access. To solve: Forge a token for Carlos and access his GraphQL user profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth code interception in redirect uri", "target": "{\"Lab scenario\": \"OAuth Code Interception in Redirect URI\", \"Lab Description\": \"This lab features an OAuth authorization implementation vulnerable to redirect URI manipulation. The app accepts unvalidated redirect URIs and sends valid authorization codes to attacker-controlled endpoints. To solve: Intercept Carlos’s authorization code and exchange it for an access token to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm tampering in authorization header", "target": "{\"Lab scenario\": \"JWT None algorithm tampering in Authorization header\", \"Lab Description\": \"The application uses JWT for authorization, but improperly handles the 'alg' field in tokens. The application accepts JWTs with the 'alg' value set to 'none', leading to signature bypass. To solve: forge a JWT for the admin user and access their protected dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfiguration in redirect_uri validation", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in redirect_uri validation\", \"Lab Description\": \"The application implements OAuth 2.0 using the implicit grant flow but improperly validates the 'redirect_uri' parameter. This flaw allows redirection-based token theft. To solve: intercept and steal a victim's token by exploiting open redirect behavior.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via static session identifier in login flow", "target": "{\"Lab scenario\": \"Session fixation via static session identifier in login flow\", \"Lab Description\": \"The application fails to issue a new session ID after login, making it vulnerable to session fixation. An attacker can set a known session ID before login and force the victim to use it. To solve: hijack Carlos's session by fixing a session ID pre-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in REST Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in REST Login Flow\", \"Lab Description\": \"This lab is vulnerable to session fixation. The application sets a session cookie before authentication and does not issue a new one after login. To solve: hijack Carlos's session using a fixed session ID and access his account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This GraphQL-based application uses JWTs for authentication. It accepts 'none' as the JWT algorithm and fails to validate the token signature. To solve: forge a token using 'none' algorithm and access Carlos's profile via a GraphQL query.", "target": "{\"Lab scenario\": \"JWT Signature Algorithm Confusion in GraphQL Auth\", \"Lab Description\": \"This GraphQL-based application uses JWTs for authentication. It accepts 'none' as the JWT algorithm and fails to validate the token signature. To solve: forge a token using 'none' algorithm and access Carlos's profile via a GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code interception via open redirect", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect\", \"Lab Description\": \"This OAuth integration leaks authorization codes via a poorly validated redirect_uri parameter. To solve: intercept Carlos’s OAuth code via open redirect and exchange it for an access token to view his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login endpoint via cookie parameter injection", "target": "{\"Lab scenario\": \"Session Fixation in login endpoint via Cookie Parameter Injection\", \"Lab Description\": \"The application allows a session identifier to be set via a request cookie prior to authentication. This behavior allows an attacker to fixate a session and hijack the victim's account after they log in. The application accepts and reuses session tokens passed through cookies even before login. To solve: hijack Carlos's session post-login using a fixated session value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs for authentication but does not enforce strong algorithm validation, enabling algorithm substitution. The app accepts JWTs signed using 'none' or changes in algorithm headers. To solve: craft a JWT for Carlos without a valid key using the 'none' algorithm and access his account.", "target": "{\"Lab scenario\": \"JWT Key Confusion via Algorithm Manipulation\", \"Lab Description\": \"The application uses JWTs for authentication but does not enforce strong algorithm validation, enabling algorithm substitution. The app accepts JWTs signed using 'none' or changes in algorithm headers. To solve: craft a JWT for Carlos without a valid key using the 'none' algorithm and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in token validation logic", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Validation Logic\", \"Lab Description\": \"The application integrates with an external OAuth provider but does not properly validate the 'aud' claim or client ID. This allows attackers to use a token issued for a different client application to gain access. To solve: obtain an OAuth token from a 3rd-party client and use it to access Carlos's protected account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab’s session handling is vulnerable due to the reuse of session tokens across unauthenticated and authenticated states. The application assigns a session token prior to login and does not rotate it after successful authentication. To solve: Hijack Carlos's session after fixation and access his My account page.", "target": "{\"Lab scenario\": \"Session fixation via unrotated session token post-login\", \"Lab Description\": \"This lab’s session handling is vulnerable due to the reuse of session tokens across unauthenticated and authenticated states. The application assigns a session token prior to login and does not rotate it after successful authentication. To solve: Hijack Carlos's session after fixation and access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering via 'none' algorithm bypass", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm bypass\", \"Lab Description\": \"This lab uses JWTs for session management but fails to enforce signature validation when the 'alg' header is set to 'none'. The application decodes the JWT without verifying its integrity. To solve: Forge a JWT granting access to Carlos's account and retrieve his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements OAuth login but misuses the redirect_uri parameter without validation, enabling token leakage via open redirect. To solve: Hijack Carlos's OAuth token using a crafted redirect_uri and access his account page.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect as token delivery\", \"Lab Description\": \"This lab implements OAuth login but misuses the redirect_uri parameter without validation, enabling token leakage via open redirect. To solve: Hijack Carlos's OAuth token using a crafted redirect_uri and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in password reset flow", "target": "{\"Lab scenario\": \"Session fixation in password reset flow\", \"Lab Description\": \"The application allows attackers to fix a session identifier before a user resets their password. The password reset handler reuses the existing session without invalidating or rotating it. To solve: hijack Carlos's session by setting a fixed session ID before he resets his password, then access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm in Authorization header\", \"Lab Description\": \"This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Authentication lab for: oauth access token leakage via referer header in redirect", "target": "{\"Lab scenario\": \"OAuth access token leakage via referer header in redirect\", \"Lab Description\": \"The application uses OAuth 2.0 implicit flow and redirects users to a third-party site after authentication. However, the access token is passed in the URL fragment and leaks via the HTTP referer header. To solve: intercept the token leak and use it to access the victim's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"The application fails to properly regenerate session identifiers upon successful login. This allows an attacker to fixate a session ID prior to authentication. The application sets the session cookie before validating credentials and continues using the same session post-login. To solve: hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs for authentication, but fails to enforce algorithm restrictions during signature verification. This allows an attacker to craft a forged token by changing the algorithm to 'none'. To solve: forge a valid token for user carlos and access the admin panel.", "target": "{\"Lab scenario\": \"JWT authentication bypass via none algorithm\", \"Lab Description\": \"The application uses JWTs for authentication, but fails to enforce algorithm restrictions during signature verification. This allows an attacker to craft a forged token by changing the algorithm to 'none'. To solve: forge a valid token for user carlos and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI\", \"Lab Description\": \"The application integrates a third-party OAuth provider but does not strictly validate redirect URIs. An attacker can manipulate the redirect URI to capture access tokens. To solve: intercept Carlos’s OAuth access token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt authentication bypass via unverified signature in session token", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via Unverified Signature in Session Token\", \"Lab Description\": \"The application uses JWTs for session management but fails to verify the token's signature. This oversight allows attackers to forge tokens with arbitrary payloads. The application grants access based solely on the 'sub' claim without validating the token's integrity. To solve: Modify your JWT to impersonate the 'administrator' user and delete Carlos's account via the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application constructs password reset links using the 'X-Forwarded-Host' header without proper validation. This allows attackers to manipulate the reset link sent to users. The application trusts the header value to generate the reset URL. To solve: Poison the password reset link to redirect to your server, capture Carlos's reset token, and reset his password.", "target": "{\"Lab scenario\": \"Password Reset Poisoning via Middleware in HTTP Headers\", \"Lab Description\": \"The application constructs password reset links using the 'X-Forwarded-Host' header without proper validation. This allows attackers to manipulate the reset link sent to users. The application trusts the header value to generate the reset URL. To solve: Poison the password reset link to redirect to your server, capture Carlos's reset token, and reset his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: broken brute-force protection via multiple credentials per request in login endpoint", "target": "{\"Lab scenario\": \"Broken Brute-Force Protection via Multiple Credentials per Request in Login Endpoint\", \"Lab Description\": \"The application's login endpoint accepts JSON input but fails to handle arrays properly. By sending multiple passwords in an array, attackers can bypass brute-force protection mechanisms. The application processes each password in the array without rate limiting. To solve: Submit a login request with an array of passwords to discover Carlos's password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm attack in rest api authentication", "target": "{\"Lab scenario\": \"JWT none algorithm attack in REST API authentication\", \"Lab Description\": \"The application uses JWT-based authentication to protect a RESTful API. However, the backend JWT implementation fails to properly enforce algorithm restrictions. When verifying tokens, it blindly accepts tokens with 'alg':'none' without validating signatures. To solve: forge a JWT for the 'admin' user using 'none' algorithm and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via vulnerable set-cookie path handling in rest login endpoint", "target": "{\"Lab scenario\": \"Session fixation via vulnerable Set-Cookie path handling in REST login endpoint\", \"Lab Description\": \"The application authenticates users via a REST API and sets a session ID in a cookie. However, it does not regenerate the session ID after login. It accepts attacker-supplied session IDs and binds them to authenticated users, leading to session fixation. To solve: Fix a session for 'carlos', log in with it, and access /profile as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth 2.0 for third-party login. The authorization server is misconfigured and accepts wildcards in redirect_uri. This allows attackers to intercept authorization codes via open redirect-style endpoints. To solve: steal Carlos's OAuth code using a manipulated redirect_uri, then redeem it to access their account.", "target": "{\"Lab scenario\": \"OAuth code injection in redirect_uri during OAuth2.0 authorization flow\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party login. The authorization server is misconfigured and accepts wildcards in redirect_uri. This allows attackers to intercept authorization codes via open redirect-style endpoints. To solve: steal Carlos's OAuth code using a manipulated redirect_uri, then redeem it to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This REST-based web application uses cookie-based session tokens for authentication. The application generates a session ID during login but fails to regenerate or invalidate the session ID upon successful authentication. The session remains fixed even if the login state changes. To solve: hijack Carlos's session by planting a valid session ID before login, then access his My account page after he logs in.", "target": "{\"Lab scenario\": \"Session fixation via predictable token reuse\", \"Lab Description\": \"This REST-based web application uses cookie-based session tokens for authentication. The application generates a session ID during login but fails to regenerate or invalidate the session ID upon successful authentication. The session remains fixed even if the login state changes. To solve: hijack Carlos's session by planting a valid session ID before login, then access his My account page after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via algorithm confusion", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion\", \"Lab Description\": \"The application uses JWT for session management and validates tokens using the 'alg' field. It accepts tokens signed with both HMAC and RSA but uses the same verification method. This results in an algorithm confusion vulnerability. To solve: forge a JWT using HMAC with a known public key and gain access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration via open redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect\", \"Lab Description\": \"The application integrates OAuth2 login via a third-party provider. However, the redirect_uri parameter is improperly validated, enabling attackers to manipulate the OAuth flow. To solve: exploit the open redirect to steal an access token and access the protected account page as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: soap-based sso session fixation in login workflow", "target": "{\"Lab scenario\": \"SOAP-based SSO Session Fixation in Login Workflow\", \"Lab Description\": \"The application uses a SOAP-based Single Sign-On (SSO) authentication mechanism that fails to regenerate the session identifier after login. The application accepts a session cookie before authentication and keeps it post-login. To solve: Hijack an admin user's session by fixing their session ID via a crafted SOAP request and accessing the /admin/dashboard page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authorize users after login, but improperly validates the algorithm field. An attacker can change the algorithm from 'RS256' to 'none' and supply an unsigned token to bypass authentication. To solve: Forge a valid JWT that grants 'admin' privileges and access /admin/flags endpoint.", "target": "{\"Lab scenario\": \"JWT Tampering via Algorithm Confusion in REST API\", \"Lab Description\": \"The application uses JWTs to authorize users after login, but improperly validates the algorithm field. An attacker can change the algorithm from 'RS256' to 'none' and supply an unsigned token to bypass authentication. To solve: Forge a valid JWT that grants 'admin' privileges and access /admin/flags endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth login flow has a misconfigured redirect_uri that allows open redirection to untrusted domains. An attacker can intercept the authorization code and exchange it for a valid access token. To solve: Steal a victim’s OAuth code and use it to access the /profile endpoint as the victim.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration with Authorization Code Leak via Open Redirect\", \"Lab Description\": \"The OAuth login flow has a misconfigured redirect_uri that allows open redirection to untrusted domains. An attacker can intercept the authorization code and exchange it for a valid access token. To solve: Steal a victim’s OAuth code and use it to access the /profile endpoint as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The SOAP-based authentication flow mishandles session state. The application accepts session IDs from unauthenticated users and preserves them post-login. To solve: hijack a victim's session by pre-setting a session ID and tricking them into using it, then log in yourself using that session.", "target": "{\"Lab scenario\": \"Session Fixation via SOAP API Login Handler\", \"Lab Description\": \"The SOAP-based authentication flow mishandles session state. The application accepts session IDs from unauthenticated users and preserves them post-login. To solve: hijack a victim's session by pre-setting a session ID and tricking them into using it, then log in yourself using that session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in graphql login", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in GraphQL Login\", \"Lab Description\": \"The GraphQL authentication service allows JWTs signed with 'none' algorithm. An attacker can forge tokens to impersonate other users. To solve: craft a JWT impersonating 'admin' and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application mishandles session cookies by issuing them before authentication, then reusing them post-login. The vulnerable behavior allows an attacker to fix the session ID for a victim prior to login. To solve: Hijack Carlos's session by forcing him to use a known session ID, then log in and access his account.", "target": "{\"Lab scenario\": \"Session fixation vulnerability via insecure cookie handling in login flow\", \"Lab Description\": \"The application mishandles session cookies by issuing them before authentication, then reusing them post-login. The vulnerable behavior allows an attacker to fix the session ID for a victim prior to login. To solve: Hijack Carlos's session by forcing him to use a known session ID, then log in and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth 2.0 misconfiguration allows redirect_uri manipulation and code interception", "target": "{\"Lab scenario\": \"OAuth 2.0 misconfiguration allows redirect_uri manipulation and code interception\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party login, but it accepts arbitrary redirect_uris due to improper validation. An attacker can intercept authorization codes meant for Carlos. To solve: Gain access to Carlos’s OAuth account by hijacking his authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token tampering in api authentication", "target": "{\"Lab scenario\": \"JWT Token Tampering in API Authentication\", \"Lab Description\": \"This lab involves a vulnerable JWT-based authentication system where the token can be tampered with to impersonate a different user. To solve the lab, exploit the vulnerability by modifying the JWT token to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration allowing unauthorized access", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Allowing Unauthorized Access\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the application allows access to sensitive resources without proper scope validation. To solve the lab, exploit the OAuth misconfiguration by forging an access token with elevated privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"This lab involves a predictable session ID generation mechanism where the attacker can set their own session ID and impersonate an authenticated user. To solve the lab, set the session ID to Carlos's ID and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token manipulation with secret disclosure", "target": "{\"Lab scenario\": \"JWT Token Manipulation with Secret Disclosure\", \"Lab Description\": \"This lab involves a JWT vulnerability where an attacker is able to manipulate the JWT token to impersonate a user. The JWT secret key has been accidentally exposed in the application's source code. The goal is to craft a forged JWT token and use it to gain access to the 'admin' page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in authentication", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability in Authentication\", \"Lab Description\": \"In this lab, an attacker can set the victim's session ID to a known value before they log in, leading to unauthorized access. The goal is to exploit the session fixation vulnerability by forcing a user to authenticate with a predefined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: MFA Bypass via Insecure Backup Codes", "target": "{\"Lab scenario\": \"MFA Bypass via Insecure Backup Codes\", \"Lab Description\": \"In this lab, the backup codes used for Multi-Factor Authentication (MFA) are poorly protected, allowing an attacker to bypass MFA altogether. The attacker can retrieve these backup codes and use them to authenticate without needing the actual second factor.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leading to privilege escalation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Privilege Escalation\", \"Lab Description\": \"This lab demonstrates a misconfigured OAuth flow where an attacker can escalate their privileges by exploiting the application's access control. The attacker can manipulate OAuth tokens to gain unauthorized access to sensitive resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability in a web application. The session ID is not regenerated upon login, which allows an attacker to set a fixed session ID for a target user. To solve this lab, fix a session ID for Carlos and log in to his account page.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in user login\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in a web application. The session ID is not regenerated upon login, which allows an attacker to set a fixed session ID for a target user. To solve this lab, fix a session ID for Carlos and log in to his account page.\", \"Vulnerability name\": \"Session Fixation\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a JWT Tampering scenario. Example: JWT token manipulation to bypass authentication", "target": "{\"Lab scenario\": \"JWT token manipulation to bypass authentication\", \"Lab Description\": \"In this lab, a web application is vulnerable to JWT token tampering. An attacker can modify the JWT token’s payload to impersonate Carlos and access his account page. The goal is to craft and inject a manipulated JWT to bypass authentication.\", \"Vulnerability name\": \"JWT Tampering\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: In this lab, OAuth misconfiguration allows unauthorized access to a user's account by exploiting improper token validation. The goal is to use a valid OAuth token to impersonate Carlos and gain access to his account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing unauthorized access\", \"Lab Description\": \"In this lab, OAuth misconfiguration allows unauthorized access to a user's account by exploiting improper token validation. The goal is to use a valid OAuth token to impersonate Carlos and gain access to his account.\", \"Vulnerability name\": \"OAuth Misconfiguration\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: In this lab, JWT tokens are used for user authentication. However, the tokens are not properly verified, allowing you to modify the JWT payload to impersonate other users. To solve the lab, impersonate the admin user by modifying a JWT token and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT token tampering and impersonation\", \"Lab Description\": \"In this lab, JWT tokens are used for user authentication. However, the tokens are not properly verified, allowing you to modify the JWT payload to impersonate other users. To solve the lab, impersonate the admin user by modifying a JWT token and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation, where an attacker can set a valid session ID for the victim and force them to authenticate with it. To solve the lab, perform a session fixation attack and access the victim's account page.", "target": "{\"Lab scenario\": \"Session fixation attack\", \"Lab Description\": \"This lab is vulnerable to session fixation, where an attacker can set a valid session ID for the victim and force them to authenticate with it. To solve the lab, perform a session fixation attack and access the victim's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration with sensitive data exposure", "target": "{\"Lab scenario\": \"OAuth misconfiguration with sensitive data exposure\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where an unauthorized user can obtain an access token to access sensitive user data. To solve the lab, exploit the misconfiguration to retrieve sensitive user data by using an OAuth authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Forgery via Insecure Signature", "target": "{\"Lab scenario\": \"JWT Token Forgery via Insecure Signature\", \"Lab Description\": \"This lab is vulnerable to JWT token tampering. The server improperly validates the signature of a JWT, allowing an attacker to forge a new token with elevated privileges. The application uses JWT for user authentication but lacks proper verification of the token signature. To solve this lab, forge a JWT token for the admin user and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation Vulnerability", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability. The server does not regenerate the session ID after login, allowing an attacker to set a valid session ID beforehand. The attacker can then hijack the session of another user by setting the session ID to one they control. To solve the lab, set the session ID to an attacker-controlled value and access the victim’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leading to authorization bypass", "target": "{\"Lab scenario\": \"OAuth Misconfiguration leading to Authorization Bypass\", \"Lab Description\": \"This lab involves an OAuth misconfiguration. The authorization server is not properly validating scopes, allowing unauthorized users to access restricted resources. The application uses OAuth for authorization, but the scopes are incorrectly configured. To solve this lab, manipulate the OAuth token to request unauthorized access to the admin's resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Tampering to Gain Unauthorized Access", "target": "{\"Lab scenario\": \"JWT Token Tampering to Gain Unauthorized Access\", \"Lab Description\": \"This lab demonstrates a JWT token vulnerability. The application uses JWT tokens for session management but does not validate the claims properly, allowing an attacker to tamper with the token's payload and gain unauthorized access. To solve the lab, tamper with the JWT token and access the user's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation exploit", "target": "{\"Lab scenario\": \"Session Fixation Exploit\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability, where an attacker can set the session ID before a user logs in, gaining access to the victim's session after they authenticate. To solve the lab, fixate the session ID, log in as the victim, and access the victim's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration - Token Capture", "target": "{\"Lab scenario\": \"OAuth Misconfiguration - Token Capture\", \"Lab Description\": \"This lab focuses on an OAuth misconfiguration where an attacker can capture and misuse an OAuth access token to impersonate the victim. The goal is to capture the access token and use it to access a protected resource without authorization.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation attack", "target": "{\"Lab scenario\": \"Session fixation attack\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation. A user can be forced to use a fixed session ID, allowing an attacker to hijack the session after login. The application does not regenerate the session ID after authentication. To solve the lab, you need to manipulate the session ID to hijack Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab features a vulnerable JWT implementation where the application does not properly validate the signature of the token. An attacker can modify the payload to impersonate any user. To solve the lab, you need to modify the JWT to access Carlos's account.", "target": "{\"Lab scenario\": \"JWT tampering and session hijacking\", \"Lab Description\": \"This lab features a vulnerable JWT implementation where the application does not properly validate the signature of the token. An attacker can modify the payload to impersonate any user. To solve the lab, you need to modify the JWT to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with excessive scopes", "target": "{\"Lab scenario\": \"OAuth misconfiguration with excessive scopes\", \"Lab Description\": \"This lab features a vulnerable OAuth implementation where a user can request excessive permissions (scopes) during authorization. The OAuth provider does not properly restrict these scopes. To solve the lab, you need to exploit the OAuth misconfiguration to gain access to Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token manipulation in REST API", "target": "{\"Lab scenario\": \"JWT token manipulation in REST API\", \"Lab Description\": \"This lab contains a RESTful API with JWT-based authentication. The application does not correctly validate the JWT, allowing for tampering with token data. To solve the lab, manipulate the JWT to access Carlos's admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in third-party integration", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party integration\", \"Lab Description\": \"This lab involves an OAuth2-based authentication system integrated with a third-party service. The application is vulnerable due to improper scope and client ID validation. To solve the lab, bypass the OAuth scope restrictions to access admin functionality.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in soap api", "target": "{\"Lab scenario\": \"Session fixation vulnerability in SOAP API\", \"Lab Description\": \"This lab involves a SOAP-based authentication API where the session ID is not properly regenerated upon login. The session ID remains fixed, allowing for session fixation attacks. To solve the lab, fix the session ID and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token manipulation for unauthorized access", "target": "{\"Lab scenario\": \"JWT Token Manipulation for Unauthorized Access\", \"Lab Description\": \"This lab's JWT-based authentication mechanism is vulnerable to token manipulation. The application does not verify the integrity of the JWT token and allows unauthorized access by altering the claims. To solve this lab, you need to access a restricted page by manipulating the JWT token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack via manipulated session id", "target": "{\"Lab scenario\": \"Session Fixation Attack via Manipulated Session ID\", \"Lab Description\": \"This lab contains a session management vulnerability where the session ID is set prior to authentication. An attacker can exploit this by manipulating the session ID before login to gain unauthorized access. To solve the lab, you need to log into Carlos’s account by fixing the session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leading to privilege escalation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Privilege Escalation\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the application grants elevated permissions based on a misconfigured authorization server. The attacker can exploit this misconfiguration to escalate privileges. To solve this lab, you need to obtain admin-level access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token manipulation for unauthorized access", "target": "{\"Lab scenario\": \"JWT Token Manipulation for Unauthorized Access\", \"Lab Description\": \"In this lab, the application improperly validates JWT tokens for authorization. While logged in, the JWT token is exposed to manipulation and can be used to escalate privileges. The goal is to manipulate the token to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability in Login Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in the login flow. The application does not regenerate the session ID after a successful login, allowing an attacker to set a session ID and hijack the victim's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab involves an OAuth misconfiguration in a third-party service that allows an attacker to hijack the authorization process and gain unauthorized access to the victim's account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Account Takeover\", \"Lab Description\": \"This lab involves an OAuth misconfiguration in a third-party service that allows an attacker to hijack the authorization process and gain unauthorized access to the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability where an attacker can force a user to authenticate with a session ID of their choice. The session is fixed before login and cannot be reset after authentication. To solve this lab, hijack the victim's session and access their account page.", "target": "{\"Lab scenario\": \"Session Fixation via URL manipulation\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where an attacker can force a user to authenticate with a session ID of their choice. The session is fixed before login and cannot be reset after authentication. To solve this lab, hijack the victim's session and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering for privilege escalation", "target": "{\"Lab scenario\": \"JWT Tampering for Privilege Escalation\", \"Lab Description\": \"In this lab, the application improperly validates JWT tokens, allowing attackers to tamper with the payload and escalate their privileges. The goal is to modify the JWT to escalate your privileges to admin and access the restricted admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates an OAuth misconfiguration where the client inadvertently exposes an authorization code to an attacker. To solve the lab, intercept and reuse the exposed authorization code to obtain an access token and access the victim's account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration for Token Leakage\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the client inadvertently exposes an authorization code to an attacker. To solve the lab, intercept and reuse the exposed authorization code to obtain an access token and access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's JWT authentication can be bypassed by tampering with the token in the Authorization header. The token is being sent with the 'Bearer' prefix in the request header. To solve the lab, you need to manipulate the JWT token to impersonate the 'admin' user and access their dashboard page.", "target": "{\"Lab scenario\": \"JWT Token Manipulation in Authorization Header\", \"Lab Description\": \"This lab's JWT authentication can be bypassed by tampering with the token in the Authorization header. The token is being sent with the 'Bearer' prefix in the request header. To solve the lab, you need to manipulate the JWT token to impersonate the 'admin' user and access their dashboard page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login process", "target": "{\"Lab scenario\": \"Session Fixation in Login Process\", \"Lab Description\": \"This lab is vulnerable to session fixation, where the session ID is set by the attacker and not regenerated after login. To solve the lab, you need to fix the session ID and use it to authenticate as Carlos after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a broken OAuth flow where the application doesn't properly validate the 'state' parameter in the OAuth redirect. To solve the lab, you need to intercept the OAuth callback request and modify the 'state' parameter to gain unauthorized access to the user account.", "target": "{\"Lab scenario\": \"Broken OAuth Flow in External API\", \"Lab Description\": \"This lab demonstrates a broken OAuth flow where the application doesn't properly validate the 'state' parameter in the OAuth redirect. To solve the lab, you need to intercept the OAuth callback request and modify the 'state' parameter to gain unauthorized access to the user account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature bypass", "target": "{\"Lab scenario\": \"JWT Signature Bypass\", \"Lab Description\": \"This lab involves a vulnerable JWT-based authentication system where the server does not properly verify the algorithm used for signing the token. You can exploit this vulnerability to bypass authentication. The lab's goal is to forge a JWT with a different signing algorithm to impersonate a valid user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation exploit", "target": "{\"Lab scenario\": \"Session Fixation Exploit\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where an attacker can set a session ID for a user before they authenticate. Exploiting this flaw, the attacker can force the application to use their own session ID, gaining unauthorized access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration exploit", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Exploit\", \"Lab Description\": \"This lab involves a misconfigured OAuth 2.0 authorization flow where the authorization code is exposed in the URL without proper protection. An attacker can intercept the code and use it to gain unauthorized access to the target application.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token tampering in authentication", "target": "{\"Lab scenario\": \"JWT token tampering in authentication\", \"Lab Description\": \"This lab demonstrates a vulnerability in the handling of JWT tokens. The application uses JWT for session management but does not verify the integrity of the token, making it susceptible to manipulation. To solve the lab, you need to tamper with the JWT token and bypass authentication to access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via URL parameter", "target": "{\"Lab scenario\": \"Session fixation via URL parameter\", \"Lab Description\": \"The application allows session fixation attacks through URL parameters. By manipulating the session ID, you can hijack another user's session. To solve the lab, fix the session ID to another user's value and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allowing unauthorized access", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing unauthorized access\", \"Lab Description\": \"The application uses OAuth for authorization but is misconfigured, allowing unauthorized users to access protected resources. To solve the lab, perform an OAuth misconfiguration exploit to access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: In this lab, the application's JWT authentication system has weak implementation. The JWT is signed using a weak algorithm, allowing the token to be tampered with. To solve the lab, tamper with the JWT token to escalate privileges and access a restricted user account.", "target": "{\"Lab scenario\": \"JWT Token Tampering\", \"Lab Description\": \"In this lab, the application's JWT authentication system has weak implementation. The JWT is signed using a weak algorithm, allowing the token to be tampered with. To solve the lab, tamper with the JWT token to escalate privileges and access a restricted user account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application implements OAuth for user authentication but has a misconfigured token exchange endpoint. By exploiting the misconfiguration, you can hijack an access token from another user and access their account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration and Token Hijacking\", \"Lab Description\": \"The application implements OAuth for user authentication but has a misconfigured token exchange endpoint. By exploiting the misconfiguration, you can hijack an access token from another user and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability where the application accepts a session ID passed in the URL. By setting the session ID before login, you can hijack a user's session after they log in.", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where the application accepts a session ID passed in the URL. By setting the session ID before login, you can hijack a user's session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token manipulation for unauthorized access", "target": "{\"Lab scenario\": \"JWT token manipulation for unauthorized access\", \"Lab Description\": \"In this lab, the JWT token used for authenticating a user can be manipulated, allowing unauthorized access to protected routes. The token has insufficient validation checks, allowing attackers to alter user roles and gain elevated privileges. To solve this lab, gain access to Carlos's admin account by manipulating the JWT token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability where the attacker can hijack the session of another user. To solve this lab, fix the session ID to a known value, then log in as Carlos and access his account page.", "target": "{\"Lab scenario\": \"Session fixation vulnerability\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where the attacker can hijack the session of another user. To solve this lab, fix the session ID to a known value, then log in as Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates an OAuth misconfiguration where the authorization code can be intercepted and reused by an attacker, allowing them to impersonate another user. To solve this lab, intercept and reuse the authorization code to access Carlos's account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to unauthorized access\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the authorization code can be intercepted and reused by an attacker, allowing them to impersonate another user. To solve this lab, intercept and reuse the authorization code to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Manipulation in Authorization Flow", "target": "{\"Lab scenario\": \"JWT Token Manipulation in Authorization Flow\", \"Lab Description\": \"The application utilizes JWT for authorization but improperly validates the token signature, allowing for manipulation. The goal is to tamper with the JWT token and access a restricted resource that should otherwise be protected.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application is vulnerable to session fixation attacks due to improper handling of session cookies. The goal is to hijack an existing session or fixate a session to gain unauthorized access.", "target": "{\"Lab scenario\": \"Session Fixation Attack via Cookie Manipulation\", \"Lab Description\": \"The application is vulnerable to session fixation attacks due to improper handling of session cookies. The goal is to hijack an existing session or fixate a session to gain unauthorized access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration Leading to Access Token Leak", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Access Token Leak\", \"Lab Description\": \"In this lab, the OAuth implementation is misconfigured, allowing an attacker to gain access to sensitive data by intercepting an access token. The goal is to retrieve the access token and use it to impersonate a user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack in restful api", "target": "{\"Lab scenario\": \"Session Fixation Attack in RESTful API\", \"Lab Description\": \"The application suffers from a session fixation vulnerability. An attacker can set a valid session cookie before the victim logs in, allowing them to hijack the victim’s session once authenticated. To solve the lab, you must exploit this flaw to take control of Carlos's session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt manipulation via tampering", "target": "{\"Lab scenario\": \"JWT Manipulation via Tampering\", \"Lab Description\": \"The application uses JWTs for authentication but the JWT payload is not validated properly. An attacker can manipulate the payload and alter their role to gain unauthorized access to an admin panel. To solve this lab, you must modify the JWT token to impersonate the admin and access restricted resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration in graphql api", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in GraphQL API\", \"Lab Description\": \"The application uses OAuth for authentication but the OAuth provider is misconfigured, allowing an attacker to impersonate any user by modifying the authorization token. To solve the lab, you must exploit this misconfiguration and access the profile of a user other than Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Manipulation for Account Access", "target": "{\"Lab scenario\": \"JWT Token Manipulation for Account Access\", \"Lab Description\": \"This lab contains an authentication vulnerability in JWT token handling. The application relies on the user's JWT token for maintaining a session. The token does not properly validate the claims inside it, allowing an attacker to manipulate the token. To solve this lab, manipulate the JWT token to escalate the user role to an admin and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack", "target": "{\"Lab scenario\": \"Session Fixation Attack\", \"Lab Description\": \"The application improperly manages session IDs. Even though the user logs in, the session ID is not regenerated on login. An attacker can set their own session ID before the victim logs in, effectively hijacking the session. To solve this lab, perform a session fixation attack to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leading to unauthorized access", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Unauthorized Access\", \"Lab Description\": \"This lab is vulnerable to improper OAuth configuration, which results in users being able to access other users' resources. The OAuth token request does not properly restrict access to the user's data. To solve this lab, use an OAuth token to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token tampering with admin access", "target": "{\"Lab scenario\": \"JWT token tampering with admin access\", \"Lab Description\": \"In this lab, a vulnerable JWT-based authentication mechanism is present. The application uses JWT tokens for access control, but the secret key is weak and can be guessed. To solve the lab, the JWT token needs to be tampered with to elevate the user's privileges and access the admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation attack with session hijacking", "target": "{\"Lab scenario\": \"Session fixation attack with session hijacking\", \"Lab Description\": \"The application is vulnerable to a session fixation attack, where the attacker can set a session ID before the user logs in. By exploiting this vulnerability, the attacker can hijack a user's session. To solve the lab, exploit the session fixation flaw and gain access to the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 implementation is misconfigured, allowing users to access sensitive endpoints without proper authorization. By exploiting this misconfiguration, the attacker can gain unauthorized access to the admin panel. To solve the lab, perform an OAuth flow that grants admin access.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to unauthorized access\", \"Lab Description\": \"This lab's OAuth 2.0 implementation is misconfigured, allowing users to access sensitive endpoints without proper authorization. By exploiting this misconfiguration, the attacker can gain unauthorized access to the admin panel. To solve the lab, perform an OAuth flow that grants admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering for unauthorized access", "target": "{\"Lab scenario\": \"JWT tampering for unauthorized access\", \"Lab Description\": \"This lab involves a vulnerable JWT-based authentication system. The application uses JWT tokens for session management but improperly validates the token signature. To solve the lab, you need to intercept and modify the JWT to impersonate a different user and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation attack via cookie manipulation", "target": "{\"Lab scenario\": \"Session fixation attack via cookie manipulation\", \"Lab Description\": \"This lab involves a vulnerable session management mechanism where the session ID is set by the server in a predictable way. By manipulating the session cookie, you can hijack the session and access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leading to unauthorized access", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to unauthorized access\", \"Lab Description\": \"This lab involves a misconfigured OAuth implementation, allowing users to access sensitive information without proper authorization. The goal is to gain access to an admin's account by exploiting the OAuth flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token manipulation in authorization header", "target": "{\"Lab scenario\": \"JWT Token Manipulation in Authorization Header\", \"Lab Description\": \"The application uses JWT for user authentication. A flaw exists in how JWTs are validated, allowing attackers to manipulate the token to bypass authorization. To solve the lab, craft a tampered JWT token with the role 'admin' and use it to access Carlos's admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration in Third-party Service", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Third-party Service\", \"Lab Description\": \"The application allows users to authenticate via a third-party OAuth provider. Due to misconfigurations, it allows an attacker to obtain a valid access token and impersonate any user. To solve the lab, acquire an access token for Carlos and use it to gain unauthorized access to his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application is vulnerable to session fixation attacks where the session ID is passed via a URL parameter. An attacker can fix the victim's session ID and hijack their session. To solve the lab, fix Carlos's session ID to your own and access his account page.", "target": "{\"Lab scenario\": \"Session Fixation Attack via URL Parameter\", \"Lab Description\": \"The application is vulnerable to session fixation attacks where the session ID is passed via a URL parameter. An attacker can fix the victim's session ID and hijack their session. To solve the lab, fix Carlos's session ID to your own and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"In this lab, session fixation occurs because the server assigns a predictable session ID to the user when they log in. The attacker can set a session ID in advance, making it possible to hijack the session after the victim logs in. To solve the lab, force the server to accept a fixed session ID and gain access to Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Tampering in Authorization Header", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header\", \"Lab Description\": \"This lab demonstrates a vulnerability where the JWT token is not properly signed, allowing for tampering of user data. The application does not properly verify the JWT's integrity, allowing an attacker to modify the token to impersonate Carlos and gain access to his account. To solve the lab, modify the JWT and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration Leading to Privilege Escalation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Privilege Escalation\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where an attacker can gain unauthorized access to an admin account by exploiting an improperly configured OAuth authorization flow. The attacker needs to manipulate the OAuth request to escalate privileges. To solve the lab, manipulate the OAuth flow to escalate to an admin role and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: XSS in WebAssembly Component Model Type Reflection\nDescription: Plugin system uses WASM components with unsafe interface type reflection. The application renders component exports via innerHTML during debugging. To solve: Inject HTML through malformed UTF-8 in component adapter strings.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"XSS in WebAssembly Component Model Type Reflection\", \"Lab Description\": \"Plugin system uses WASM components with unsafe interface type reflection. The application renders component exports via innerHTML during debugging. To solve: Inject HTML through malformed UTF-8 in component adapter strings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS Masonry Layout XSS in Design Portfolio\nDescription: Portfolio builder implements CSS masonry layouts with unsafe grid-template-area names. The application reflects user input in CSSOM via insertRule(). To solve: Break layout context through area name injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Masonry Layout XSS in Design Portfolio\", \"Lab Description\": \"Portfolio builder implements CSS masonry layouts with unsafe grid-template-area names. The application reflects user input in CSSOM via insertRule(). To solve: Break layout context through area name injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Web Serial API XSS in Industrial Control System\nDescription: SCADA interface processes serial port data with unsafe TextDecoderStream handling. The application renders device output via innerText with CSS unescape. To solve: Spoof serial devices with payloads in handshake messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Web Serial API XSS in Industrial Control System\", \"Lab Description\": \"SCADA interface processes serial port data with unsafe TextDecoderStream handling. The application renders device output via innerText with CSS unescape. To solve: Spoof serial devices with payloads in handshake messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Integrity Bypass in Micro-Frontend Host\nDescription: Cloud platform dynamically constructs import maps from URL parameters with lax integrity checks. To solve: Hijack module resolution via hash collision attacks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Integrity Bypass in Micro-Frontend Host\", \"Lab Description\": \"Cloud platform dynamically constructs import maps from URL parameters with lax integrity checks. To solve: Hijack module resolution via hash collision attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SVG Font Loading XSS in E-Learning Platform\nDescription: Courseware renders SVG fonts with unsafe <hkern> element parsing. The application uses DOMPurify 3.0.0 with whitelisted font tags. To solve: Inject XSS through glyph kerning pair overflows.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Font Loading XSS in E-Learning Platform\", \"Lab Description\": \"Courseware renders SVG fonts with unsafe <hkern> element parsing. The application uses DOMPurify 3.0.0 with whitelisted font tags. To solve: Inject XSS through glyph kerning pair overflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in Healthcare Portal PDF Generator\nDescription: Patient record system generates PDFs using untrusted input in client-side HTML-to-PDF conversion. The application injects user-controlled data into PDF templates without sanitization. To solve: Execute JavaScript when viewing PDFs in vulnerable browsers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Healthcare Portal PDF Generator\", \"Lab Description\": \"Patient record system generates PDFs using untrusted input in client-side HTML-to-PDF conversion. The application injects user-controlled data into PDF templates without sanitization. To solve: Execute JavaScript when viewing PDFs in vulnerable browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IoT Device Management Console\nDescription: Smart home dashboard stores device names in MongoDB with dangerous AngularJS sandbox escape. The application renders names via innerHTML. To solve: Achieve persistent XSS using prototype pollution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IoT Device Management Console\", \"Lab Description\": \"Smart home dashboard stores device names in MongoDB with dangerous AngularJS sandbox escape. The application renders names via innerHTML. To solve: Achieve persistent XSS using prototype pollution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in CMS Markdown Processor\nDescription: Blog platform processes Markdown with dangerous DOMPurify 2.4.0 configuration allowing SVG foreignObject. To solve: Achieve XSS via parser differentials in sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in CMS Markdown Processor\", \"Lab Description\": \"Blog platform processes Markdown with dangerous DOMPurify 2.4.0 configuration allowing SVG foreignObject. To solve: Achieve XSS via parser differentials in sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in API Gateway Error Logging\nDescription: Microservice API logs User-Agent headers verbatim in ELK Stack. To solve: Achieve delayed XSS in Kibana Discover tab through HTTP header injection.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in API Gateway Error Logging\", \"Lab Description\": \"Microservice API logs User-Agent headers verbatim in ELK Stack. To solve: Achieve delayed XSS in Kibana Discover tab through HTTP header injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in Chat Application WebSocket Messages\nDescription: Real-time chat app processes WebSocket messages with direct DOM injection. To solve: Trigger XSS via malformed message chunks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Chat Application WebSocket Messages\", \"Lab Description\": \"Real-time chat app processes WebSocket messages with direct DOM injection. To solve: Trigger XSS via malformed message chunks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via WebAssembly SharedArrayBuffer Corruption\nDescription: Financial trading platform uses WebAssembly with SharedArrayBuffer for real-time calculations. The application reflects memory contents in debug UI via innerHTML. To solve: Corrupt shared memory to inject HTML payloads through atomic operations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via WebAssembly SharedArrayBuffer Corruption\", \"Lab Description\": \"Financial trading platform uses WebAssembly with SharedArrayBuffer for real-time calculations. The application reflects memory contents in debug UI via innerHTML. To solve: Corrupt shared memory to inject HTML payloads through atomic operations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CSS @layer Rule Processing\nDescription: Design system builder implements @layer rules with unsafe dynamic style injection. The application allows user-controlled layer names via template literals. To solve: Break style context through layer name injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CSS @layer Rule Processing\", \"Lab Description\": \"Design system builder implements @layer rules with unsafe dynamic style injection. The application allows user-controlled layer names via template literals. To solve: Break style context through layer name injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Stream Hijacking in Multiplayer Game Lobby\nDescription: Browser-based game uses WebTransport for real-time sync with unsafe stream processing. The application concatenates message chunks via innerHTML. To solve: Inject XSS through fragmented stream payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Stream Hijacking in Multiplayer Game Lobby\", \"Lab Description\": \"Browser-based game uses WebTransport for real-time sync with unsafe stream processing. The application concatenates message chunks via innerHTML. To solve: Inject XSS through fragmented stream payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAuthn Credential ID XSS in Enterprise SSO\nDescription: Single sign-on system stores WebAuthn credential IDs without sanitization. The application reflects credential metadata in admin panel via innerHTML. To solve: Inject HTML through crafted attestationObject extensions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn Credential ID XSS in Enterprise SSO\", \"Lab Description\": \"Single sign-on system stores WebAuthn credential IDs without sanitization. The application reflects credential metadata in admin panel via innerHTML. To solve: Inject HTML through crafted attestationObject extensions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in SVG Font Kerning Parsing\nDescription: E-learning platform processes SVG fonts with unsafe <hkern> element handling. The application uses DOMPurify 3.0.0 with broken foreignObject sanitization. To solve: Achieve XSS through glyph kerning pair injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in SVG Font Kerning Parsing\", \"Lab Description\": \"E-learning platform processes SVG fonts with unsafe <hkern> element handling. The application uses DOMPurify 3.0.0 with broken foreignObject sanitization. To solve: Achieve XSS through glyph kerning pair injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via WebGPU Storage Buffer Corruption\nDescription: 3D modeling tool maps GPU storage buffers to debug UI with unsafe memory reflection. The application visualizes WebGPU memory via innerHTML without validation. To solve: Corrupt buffer data to inject HTML through fp16 precision abuse.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via WebGPU Storage Buffer Corruption\", \"Lab Description\": \"3D modeling tool maps GPU storage buffers to debug UI with unsafe memory reflection. The application visualizes WebGPU memory via innerHTML without validation. To solve: Corrupt buffer data to inject HTML through fp16 precision abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CSS Animation Timeline\nDescription: Interactive timeline tool implements scroll-driven animations with unsafe timeline-name handling. The application allows user-controlled animation-timeline names via CSSOM. To solve: Break style context through timeline identifier injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CSS Animation Timeline\", \"Lab Description\": \"Interactive timeline tool implements scroll-driven animations with unsafe timeline-name handling. The application allows user-controlled animation-timeline names via CSSOM. To solve: Break style context through timeline identifier injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebHID Barcode Scanner XSS in Retail Analytics\nDescription: POS system processes USB-HID barcode data with unsafe input handling. The application renders product codes via innerText with CSS unescape. To solve: Spoof barcode scanners with malicious PLU codes in HID reports.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebHID Barcode Scanner XSS in Retail Analytics\", \"Lab Description\": \"POS system processes USB-HID barcode data with unsafe input handling. The application renders product codes via innerText with CSS unescape. To solve: Spoof barcode scanners with malicious PLU codes in HID reports.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in SVG Filter Primitive\nDescription: Analytics dashboard implements SVG feDisplacementMap with unsafe scale handling. The application allows user-controlled filter scales via attribute binding. To solve: Inject XSS through filter primitive parameter overflows.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in SVG Filter Primitive\", \"Lab Description\": \"Analytics dashboard implements SVG feDisplacementMap with unsafe scale handling. The application allows user-controlled filter scales via attribute binding. To solve: Inject XSS through filter primitive parameter overflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Import Maps Hash Collision XSS in Micro-Frontend\nDescription: Enterprise dashboard dynamically loads modules using import maps with weak integrity checks. To solve: Hijack module resolution via crafted SRI hash collisions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Hash Collision XSS in Micro-Frontend\", \"Lab Description\": \"Enterprise dashboard dynamically loads modules using import maps with weak integrity checks. To solve: Hijack module resolution via crafted SRI hash collisions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebCodecs VideoFrame Metadata XSS in Telemedicine Platform\nDescription: Patient video analysis tool processes WebCodecs VideoFrames with unsafe metadata extraction. The application injects user-controlled metadata into debug overlays via innerHTML. To solve: Achieve XSS through crafted video rotation metadata.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs VideoFrame Metadata XSS in Telemedicine Platform\", \"Lab Description\": \"Patient video analysis tool processes WebCodecs VideoFrames with unsafe metadata extraction. The application injects user-controlled metadata into debug overlays via innerHTML. To solve: Achieve XSS through crafted video rotation metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS Font Tech XSS in Digital Publishing\nDescription: E-book reader implements variable fonts with unsafe axis handling. The application allows user-controlled font-variation-settings via CSSOM. To solve: Inject XSS through font tech parameter overflows.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Font Tech XSS in Digital Publishing\", \"Lab Description\": \"E-book reader implements variable fonts with unsafe axis handling. The application allows user-controlled font-variation-settings via CSSOM. To solve: Inject XSS through font tech parameter overflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Bidirectional Stream XSS in Autonomous Drone Control\nDescription: Drone fleet management uses WebTransport bidirectional streams for telemetry with unsafe message concatenation. To solve: Inject fragmented XSS payloads through stream chunk manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Bidirectional Stream XSS in Autonomous Drone Control\", \"Lab Description\": \"Drone fleet management uses WebTransport bidirectional streams for telemetry with unsafe message concatenation. To solve: Inject fragmented XSS payloads through stream chunk manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA 2.0 Role Clobbering in Accessibility Dashboard\nDescription: WCAG compliance tool implements ARIA 2.0 roles with dangerous aria-colcount reflection. The application uses setAttribute('aria-colcount') with raw user input. To solve: Abuse aria-colcount to escape DOM sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA 2.0 Role Clobbering in Accessibility Dashboard\", \"Lab Description\": \"WCAG compliance tool implements ARIA 2.0 roles with dangerous aria-colcount reflection. The application uses setAttribute('aria-colcount') with raw user input. To solve: Abuse aria-colcount to escape DOM sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAssembly Exception XSS in Blockchain Debugger\nDescription: Smart contract IDE handles WebAssembly exceptions with unsafe error message rendering. The application displays exception tags via innerHTML without validation. To solve: Inject HTML through malformed exception tag IDs.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Exception XSS in Blockchain Debugger\", \"Lab Description\": \"Smart contract IDE handles WebAssembly exceptions with unsafe error message rendering. The application displays exception tags via innerHTML without validation. To solve: Inject HTML through malformed exception tag IDs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in Banking Portal PDF Generator\nDescription: The banking portal's PDF statement generator reflects URL parameters without proper DOM sanitization. The application directly embeds user-controlled data into PDF-rendering JavaScript. To solve: Exploit the DOM manipulation to execute arbitrary JavaScript when generating a PDF statement.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Banking Portal PDF Generator\", \"Lab Description\": \"The banking portal's PDF statement generator reflects URL parameters without proper DOM sanitization. The application directly embeds user-controlled data into PDF-rendering JavaScript. To solve: Exploit the DOM manipulation to execute arbitrary JavaScript when generating a PDF statement.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IoT Dashboard Device Naming\nDescription: An industrial IoT management system fails to sanitize device names stored in its NoSQL database. The application renders device names in multiple dashboard views using innerHTML. To solve: Create a malicious device entry that triggers an alert when any user views the device list.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IoT Dashboard Device Naming\", \"Lab Description\": \"An industrial IoT management system fails to sanitize device names stored in its NoSQL database. The application renders device names in multiple dashboard views using innerHTML. To solve: Create a malicious device entry that triggers an alert when any user views the device list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Mutation XSS in Chat Application Message Rendering\nDescription: A real-time chat application's message sanitizer fails to handle SVG namespace mutations. The application uses innerHTML with custom sanitization rules. To solve: Craft a message that bypasses the sanitizer and executes JavaScript when viewed in modern browsers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Chat Application Message Rendering\", \"Lab Description\": \"A real-time chat application's message sanitizer fails to handle SVG namespace mutations. The application uses innerHTML with custom sanitization rules. To solve: Craft a message that bypasses the sanitizer and executes JavaScript when viewed in modern browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in API Gateway Error Handling\nDescription: The REST-to-GraphQL translation layer reflects error messages without proper encoding. The application returns user-controlled parameters in JSON error responses rendered as HTML. To solve: Exploit the error rendering to trigger an XSS in the admin interface.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in API Gateway Error Handling\", \"Lab Description\": \"The REST-to-GraphQL translation layer reflects error messages without proper encoding. The application returns user-controlled parameters in JSON error responses rendered as HTML. To solve: Exploit the error rendering to trigger an XSS in the admin interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Healthcare Portal WebSocket Handshake\nDescription: A patient monitoring system's WebSocket initialization uses unsanitized URL parameters. The application processes handshake parameters through vulnerable client-side routing. To solve: Exploit the WebSocket connection process to execute privileged JavaScript in the EHR interface.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Healthcare Portal WebSocket Handshake\", \"Lab Description\": \"A patient monitoring system's WebSocket initialization uses unsanitized URL parameters. The application processes handshake parameters through vulnerable client-side routing. To solve: Exploit the WebSocket connection process to execute privileged JavaScript in the EHR interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CMS WYSIWYG Editor via Markdown Rendering\nDescription: A headless CMS converts Markdown to HTML using outdated parser with insecure anchor href handling. The application allows privileged users to create public knowledge base articles. To solve: Inject persistent XSS through markdown link syntax that executes in reader's browsers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CMS WYSIWYG Editor via Markdown Rendering\", \"Lab Description\": \"A headless CMS converts Markdown to HTML using outdated parser with insecure anchor href handling. The application allows privileged users to create public knowledge base articles. To solve: Inject persistent XSS through markdown link syntax that executes in reader's browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Social Media Bio Field via Client-Side Template Literals\nDescription: A new social platform renders user bios using unescaped template literals in Vue.js. The application processes user-supplied URLs through client-side routing. To solve: Exploit template interpolation to execute JavaScript in other users' profile views.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Social Media Bio Field via Client-Side Template Literals\", \"Lab Description\": \"A new social platform renders user bios using unescaped template literals in Vue.js. The application processes user-supplied URLs through client-side routing. To solve: Exploit template interpolation to execute JavaScript in other users' profile views.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Video Platform Subtitle Processing\nDescription: A video sharing service's subtitle parser fails to handle HTML5 track element namespace mutations. The application converts SRT to VTT format client-side. To solve: Craft malicious subtitles that execute JavaScript when video reaches 00:01 timestamp.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Video Platform Subtitle Processing\", \"Lab Description\": \"A video sharing service's subtitle parser fails to handle HTML5 track element namespace mutations. The application converts SRT to VTT format client-side. To solve: Craft malicious subtitles that execute JavaScript when video reaches 00:01 timestamp.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Browser Extension CSP Bypass via Chrome Storage\nDescription: A popular Chrome extension stores user preferences in chrome.storage.local without input sanitization. The application's content script injects stored values into visited pages. To solve: Achieve universal XSS across all sites using the extension's privileged context.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Browser Extension CSP Bypass via Chrome Storage\", \"Lab Description\": \"A popular Chrome extension stores user preferences in chrome.storage.local without input sanitization. The application's content script injects stored values into visited pages. To solve: Achieve universal XSS across all sites using the extension's privileged context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in E-commerce Product Customizer via SVG Parameter Injection\nDescription: An online jewelry designer embeds user-controlled SVG parameters in product previews. The application uses client-side XML parsing with namespace injection. To solve: Manipulate SVG viewBox attribute to execute script during product image rendering.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in E-commerce Product Customizer via SVG Parameter Injection\", \"Lab Description\": \"An online jewelry designer embeds user-controlled SVG parameters in product previews. The application uses client-side XML parsing with namespace injection. To solve: Manipulate SVG viewBox attribute to execute script during product image rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Mutation XSS in DICOM Medical Imaging Metadata\nDescription: A telehealth platform's DICOM viewer renders patient metadata using legacy parsing libraries. The application converts DICOM tags to HTML tables without proper namespace isolation. To solve: Inject JavaScript through crafted modality field that executes when radiologists view scan details.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in DICOM Medical Imaging Metadata\", \"Lab Description\": \"A telehealth platform's DICOM viewer renders patient metadata using legacy parsing libraries. The application converts DICOM tags to HTML tables without proper namespace isolation. To solve: Inject JavaScript through crafted modality field that executes when radiologists view scan details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly Memory Corruption to XSS in Trading Platform\nDescription: A stock trading interface uses Rust-compiled WebAssembly for chart rendering with improper JS boundary checks. The application passes user-controlled buffers between Wasm/JS without validation. To solve: Manipulate candle stick data arrays to corrupt memory and achieve script execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Memory Corruption to XSS in Trading Platform\", \"Lab Description\": \"A stock trading interface uses Rust-compiled WebAssembly for chart rendering with improper JS boundary checks. The application passes user-controlled buffers between Wasm/JS without validation. To solve: Manipulate candle stick data arrays to corrupt memory and achieve script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Claim Injection in SPA Admin Panel\nDescription: A React admin dashboard decodes JWT tokens client-side using insecure JSON.parse. The application displays token claims in debug mode without output encoding. To solve: Forge JWT containing XSS payload that executes when admins view user details.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Claim Injection in SPA Admin Panel\", \"Lab Description\": \"A React admin dashboard decodes JWT tokens client-side using insecure JSON.parse. The application displays token claims in debug mode without output encoding. To solve: Forge JWT containing XSS payload that executes when admins view user details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebRTC Data Channel XSS in Video Conferencing App\nDescription: A WebRTC-based collaboration tool renders data channel messages as HTML through insecure postMessage handlers. The application trusts origin validation from STUN server responses. To solve: Inject XSS through manipulated SDP offers that execute in active conference participants' browsers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebRTC Data Channel XSS in Video Conferencing App\", \"Lab Description\": \"A WebRTC-based collaboration tool renders data channel messages as HTML through insecure postMessage handlers. The application trusts origin validation from STUN server responses. To solve: Inject XSS through manipulated SDP offers that execute in active conference participants' browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Electron Protocol Handler XSS in Desktop Analytics Tool\nDescription: A business analytics app registers custom electron:// protocol with insufficient input validation. The application loads untrusted content in privileged context using webview tag. To solve: Achieve OS-level command execution through chained protocol handling and XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Electron Protocol Handler XSS in Desktop Analytics Tool\", \"Lab Description\": \"A business analytics app registers custom electron:// protocol with insufficient input validation. The application loads untrusted content in privileged context using webview tag. To solve: Achieve OS-level command execution through chained protocol handling and XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: XSS via Quantum-Safe Cryptography Dashboard Logs\nDescription: A post-quantum cryptography implementation's monitoring interface insecurely renders lattice-based algorithm parameters. The application converts Kyber-1024 public keys to visual diagrams using innerHTML. To solve: Inject malicious SVG formulas that execute when admins review key rotation logs.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"XSS via Quantum-Safe Cryptography Dashboard Logs\", \"Lab Description\": \"A post-quantum cryptography implementation's monitoring interface insecurely renders lattice-based algorithm parameters. The application converts Kyber-1024 public keys to visual diagrams using innerHTML. To solve: Inject malicious SVG formulas that execute when admins review key rotation logs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Web3 XSS in NFT Marketplace Trait Injection\nDescription: An NFT platform's metadata viewer parses ERC-721 traits as HTML when displaying rare attributes. The application's Ethers.js integration fails to sanitize IPFS-hosted JSON metadata. To solve: Create malicious NFT traits that execute JavaScript when viewed in the marketplace explorer.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Web3 XSS in NFT Marketplace Trait Injection\", \"Lab Description\": \"An NFT platform's metadata viewer parses ERC-721 traits as HTML when displaying rare attributes. The application's Ethers.js integration fails to sanitize IPFS-hosted JSON metadata. To solve: Create malicious NFT traits that execute JavaScript when viewed in the marketplace explorer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: AR XSS in WebGL Object Loader via 3D Model Metadata\nDescription: A WebAR education platform's Three.js model importer parses GLB file metadata into DOM elements. The application extracts user comments from 3D model headers without sanitization. To solve: Craft a 3D model with XSS payload that executes when teachers inspect student submissions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"AR XSS in WebGL Object Loader via 3D Model Metadata\", \"Lab Description\": \"A WebAR education platform's Three.js model importer parses GLB file metadata into DOM elements. The application extracts user comments from 3D model headers without sanitization. To solve: Craft a 3D model with XSS payload that executes when teachers inspect student submissions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Kubernetes Dashboard XSS via Custom Metric Labels\nDescription: A cluster monitoring dashboard renders Prometheus metrics with label metadata as HTML tooltips. The application's Go template engine fails to escape custom gauge labels. To solve: Inject XSS through kubectl metrics push that executes when operators hover over pod metrics.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Kubernetes Dashboard XSS via Custom Metric Labels\", \"Lab Description\": \"A cluster monitoring dashboard renders Prometheus metrics with label metadata as HTML tooltips. The application's Go template engine fails to escape custom gauge labels. To solve: Inject XSS through kubectl metrics push that executes when operators hover over pod metrics.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: AI Training UI XSS via Model Hyperparameter Injection\nDescription: An MLOps platform's training interface accepts JSON hyperparameters that get rendered in TensorBoard comparisons. The application's Vue-based UI directly interpolates learning rate schedules into DOM. To solve: Inject XSS through optimizer configuration that executes when researchers compare model runs.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"AI Training UI XSS via Model Hyperparameter Injection\", \"Lab Description\": \"An MLOps platform's training interface accepts JSON hyperparameters that get rendered in TensorBoard comparisons. The application's Vue-based UI directly interpolates learning rate schedules into DOM. To solve: Inject XSS through optimizer configuration that executes when researchers compare model runs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blockchain Oracle UI XSS via Smart Contract Event Logs\nDescription: A DeFi yield aggregator's dashboard renders Ethereum event logs from oracle contracts without sanitization. The application decodes logged UTF-8 error messages directly into DOM elements. To solve: Exploit Chainlink oracle deviation alerts to store XSS payload that triggers when users check price feed health.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blockchain Oracle UI XSS via Smart Contract Event Logs\", \"Lab Description\": \"A DeFi yield aggregator's dashboard renders Ethereum event logs from oracle contracts without sanitization. The application decodes logged UTF-8 error messages directly into DOM elements. To solve: Exploit Chainlink oracle deviation alerts to store XSS payload that triggers when users check price feed health.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GIS XSS via GeoJSON Feature Properties in Crisis Map\nDescription: An emergency response system's map viewer parses GeoJSON disaster zones with dangerous property rendering. The application converts feature properties to HTML popups using unsafe DOM methods. To solve: Inject XSS through manipulated flood polygon metadata that executes when responders click map markers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GIS XSS via GeoJSON Feature Properties in Crisis Map\", \"Lab Description\": \"An emergency response system's map viewer parses GeoJSON disaster zones with dangerous property rendering. The application converts feature properties to HTML popups using unsafe DOM methods. To solve: Inject XSS through manipulated flood polygon metadata that executes when responders click map markers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Digital Twin XSS via MQTT Metadata in Factory Control Panel\nDescription: An industrial digital twin system renders MQTT device metadata as HTML tables. The application subscribes to wildcard topics without payload validation. To solve: Publish malicious machine telemetry that executes scripts in maintenance engineers' dashboards.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Digital Twin XSS via MQTT Metadata in Factory Control Panel\", \"Lab Description\": \"An industrial digital twin system renders MQTT device metadata as HTML tables. The application subscribes to wildcard topics without payload validation. To solve: Publish malicious machine telemetry that executes scripts in maintenance engineers' dashboards.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAuthn XSS via Authenticator Attestation Statements\nDescription: A passwordless authentication system displays authenticator metadata from attestationObject without sanitization. The application parses CBOR-encoded device info into debug panels. To solve: Forge malicious FIDO2 credential registration that triggers XSS during security log reviews.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn XSS via Authenticator Attestation Statements\", \"Lab Description\": \"A passwordless authentication system displays authenticator metadata from attestationObject without sanitization. The application parses CBOR-encoded device info into debug panels. To solve: Forge malicious FIDO2 credential registration that triggers XSS during security log reviews.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Serverless Cold Start XSS via Lambda Environment Variables\nDescription: A serverless error tracking portal leaks Lambda environment variables during cold starts. The application renders stack traces with process.env values in admin panels. To solve: Exploit delayed initialization to inject XSS through manipulated function configuration.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Serverless Cold Start XSS via Lambda Environment Variables\", \"Lab Description\": \"A serverless error tracking portal leaks Lambda environment variables during cold starts. The application renders stack traces with process.env values in admin panels. To solve: Exploit delayed initialization to inject XSS through manipulated function configuration.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Serverless Contact Form via Vercel Serverless Function\nDescription: A JAMstack site's contact form stores submissions in CosmosDB through an Azure Function that fails to sanitize Markdown-formatted messages. The application renders entries using dangerouslySetInnerHTML in Next.js. To solve: Inject XSS that triggers when customer service agents review submissions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Serverless Contact Form via Vercel Serverless Function\", \"Lab Description\": \"A JAMstack site's contact form stores submissions in CosmosDB through an Azure Function that fails to sanitize Markdown-formatted messages. The application renders entries using dangerouslySetInnerHTML in Next.js. To solve: Inject XSS that triggers when customer service agents review submissions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Real-Time Code Collaboration Editor via Yjs CRDT\nDescription: A collaborative coding platform using Yjs framework inserts user cursor positions without proper escaping. The application syncs peer activities through WebSocket messages containing raw HTML. To solve: Exploit presence indicator updates to execute code in other collaborators' sessions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Real-Time Code Collaboration Editor via Yjs CRDT\", \"Lab Description\": \"A collaborative coding platform using Yjs framework inserts user cursor positions without proper escaping. The application syncs peer activities through WebSocket messages containing raw HTML. To solve: Exploit presence indicator updates to execute code in other collaborators' sessions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Jupyter Notebook Kernel Output Rendering\nDescription: A cloud-based Jupyter hub fails to sanitize DataFrame HTML outputs containing malicious SVG schemas. The application uses IPython's display() function with raw HTML rendering. To solve: Craft a pandas DataFrame that executes JavaScript when data scientists view cell outputs.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Jupyter Notebook Kernel Output Rendering\", \"Lab Description\": \"A cloud-based Jupyter hub fails to sanitize DataFrame HTML outputs containing malicious SVG schemas. The application uses IPython's display() function with raw HTML rendering. To solve: Craft a pandas DataFrame that executes JavaScript when data scientists view cell outputs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in Swagger UI via OAuth2 Redirect URL\nDescription: An API documentation portal's Swagger implementation reflects OAuth2 callback parameters without encoding. The application uses unsanitized window.location.hash parsing for auth token handling. To solve: Exploit the OAuth implicit flow to execute XSS in developers' API testing sessions.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Swagger UI via OAuth2 Redirect URL\", \"Lab Description\": \"An API documentation portal's Swagger implementation reflects OAuth2 callback parameters without encoding. The application uses unsanitized window.location.hash parsing for auth token handling. To solve: Exploit the OAuth implicit flow to execute XSS in developers' API testing sessions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM XSS in WebAssembly Game Engine via Scoreboard Rendering\nDescription: A browser-based game using Unity WebGL exports player scores to DOM without validation. The application passes strings between Wasm memory and JS using insecure buffer copying. To solve: Manipulate highscore submission to execute script in other players' leaderboard views.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebAssembly Game Engine via Scoreboard Rendering\", \"Lab Description\": \"A browser-based game using Unity WebGL exports player scores to DOM without validation. The application passes strings between Wasm memory and JS using insecure buffer copying. To solve: Manipulate highscore submission to execute script in other players' leaderboard views.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Web Bluetooth API Device Name Parsing\nDescription: A fitness tracking PWA scans nearby Bluetooth devices and displays names using innerHTML. The application caches device metadata in IndexedDB without validation. To solve: Spoof BLE device with XSS payload that executes when users view scan history.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Web Bluetooth API Device Name Parsing\", \"Lab Description\": \"A fitness tracking PWA scans nearby Bluetooth devices and displays names using innerHTML. The application caches device metadata in IndexedDB without validation. To solve: Spoof BLE device with XSS payload that executes when users view scan history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Shopify Theme Liquid Template Injection\nDescription: A Shopify store's custom theme uses unsafe {{ customer.metafield }} rendering. The application's Liquid template disables HTML escaping for promotional banners. To solve: Inject XSS through customer metadata that triggers on product page loads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Shopify Theme Liquid Template Injection\", \"Lab Description\": \"A Shopify store's custom theme uses unsafe {{ customer.metafield }} rendering. The application's Liquid template disables HTML escaping for promotional banners. To solve: Inject XSS through customer metadata that triggers on product page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Apache Superset Dashboard Chart Annotations\nDescription: A business intelligence platform renders markdown annotations in Vega-Lite charts as HTML. The application's SQL Lab feature allows CSV exports with raw HTML. To solve: Craft malicious annotation that executes when analysts export to PDF.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Apache Superset Dashboard Chart Annotations\", \"Lab Description\": \"A business intelligence platform renders markdown annotations in Vega-Lite charts as HTML. The application's SQL Lab feature allows CSV exports with raw HTML. To solve: Craft malicious annotation that executes when analysts export to PDF.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Web Serial API Thermal Printer Emulation\nDescription: An industrial control system web app interacts with serial devices using Web Serial API. The application renders received Uint8Array data as text/html. To solve: Spoof thermal printer output containing XSS that executes in maintenance interface.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Web Serial API Thermal Printer Emulation\", \"Lab Description\": \"An industrial control system web app interacts with serial devices using Web Serial API. The application renders received Uint8Array data as text/html. To solve: Spoof thermal printer output containing XSS that executes in maintenance interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Matter.js Physics Engine Metadata\nDescription: A phygital game uses Matter.js physics engine to sync DOM elements with rigid bodies. The application stores sprite metadata in LocalStorage without validation. To solve: Manipulate collision boundaries to inject XSS that triggers on object impacts.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Matter.js Physics Engine Metadata\", \"Lab Description\": \"A phygital game uses Matter.js physics engine to sync DOM elements with rigid bodies. The application stores sprite metadata in LocalStorage without validation. To solve: Manipulate collision boundaries to inject XSS that triggers on object impacts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in WebXR Hand Tracking Visualization\nDescription: An AR fitness app renders hand joint positions using Three.js without sanitizing debug panel outputs. The application converts WebXR joint data to SVG visualizations using innerHTML. To solve: Manipulate hand tracking data to inject XSS that triggers during gesture recognition calibration.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebXR Hand Tracking Visualization\", \"Lab Description\": \"An AR fitness app renders hand joint positions using Three.js without sanitizing debug panel outputs. The application converts WebXR joint data to SVG visualizations using innerHTML. To solve: Manipulate hand tracking data to inject XSS that triggers during gesture recognition calibration.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in ProseMirror Collaborative Document Version History\nDescription: A legal document editing platform stores ProseMirror JSON content states without sanitizing version diffs. The application renders document history using dangerouslySetInnerHTML. To solve: Inject XSS through track changes metadata that executes when lawyers compare document versions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ProseMirror Collaborative Document Version History\", \"Lab Description\": \"A legal document editing platform stores ProseMirror JSON content states without sanitizing version diffs. The application renders document history using dangerouslySetInnerHTML. To solve: Inject XSS through track changes metadata that executes when lawyers compare document versions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Web NFC Tag Data Parsing\nDescription: A museum exhibit guide PWA reads NFC tags containing exhibit metadata without sanitizing NDEF records. The application processes text records as HTML in the info panel. To solve: Spoof NFC tag containing XSS payload that triggers when visitors scan exhibit markers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Web NFC Tag Data Parsing\", \"Lab Description\": \"A museum exhibit guide PWA reads NFC tags containing exhibit metadata without sanitizing NDEF records. The application processes text records as HTML in the info panel. To solve: Spoof NFC tag containing XSS payload that triggers when visitors scan exhibit markers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in VSCode Web Extension Markdown Preview\nDescription: A VSCode web extension renders GitHub-flavored markdown using insecure reveal.js configuration. The application loads untrusted markdown files with disabled Content Security Policy. To solve: Craft markdown file that executes XSS when previewed in the web-based editor.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in VSCode Web Extension Markdown Preview\", \"Lab Description\": \"A VSCode web extension renders GitHub-flavored markdown using insecure reveal.js configuration. The application loads untrusted markdown files with disabled Content Security Policy. To solve: Craft markdown file that executes XSS when previewed in the web-based editor.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in OpenTelemetry Span Metadata Visualization\nDescription: An observability platform renders OpenTelemetry span attributes as HTML tooltips. The application ingests tracing data without sanitizing span metadata. To solve: Inject XSS through Jaeger tracer configuration that executes when SREs inspect production traces.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in OpenTelemetry Span Metadata Visualization\", \"Lab Description\": \"An observability platform renders OpenTelemetry span attributes as HTML tooltips. The application ingests tracing data without sanitizing span metadata. To solve: Inject XSS through Jaeger tracer configuration that executes when SREs inspect production traces.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in WebHID Gamepad Vibration API\nDescription: A retro gaming emulator site implements custom force feedback using WebHID. The application parses gamepad button mappings from JSON configs without sanitizing device labels. To solve: Inject XSS through malicious controller config that executes during rumble effect rendering.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebHID Gamepad Vibration API\", \"Lab Description\": \"A retro gaming emulator site implements custom force feedback using WebHID. The application parses gamepad button mappings from JSON configs without sanitizing device labels. To solve: Inject XSS through malicious controller config that executes during rumble effect rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Jitsi Meet Virtual Background WebGL Shader\nDescription: A video conferencing platform's virtual background feature processes custom images through Three.js shaders. The application stores user-uploaded GLSL shaders without validation. To solve: Inject XSS through malicious fragment shader that executes when participants enable background effects.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Jitsi Meet Virtual Background WebGL Shader\", \"Lab Description\": \"A video conferencing platform's virtual background feature processes custom images through Three.js shaders. The application stores user-uploaded GLSL shaders without validation. To solve: Inject XSS through malicious fragment shader that executes when participants enable background effects.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in WebTransport Unreliable Datagram Metadata\nDescription: A real-time sports betting app uses WebTransport unreliable datagrams for odds updates. The application renders message headers in debug panels using innerHTML. To solve: Craft datagram packets with XSS payloads that execute when traders inspect network traffic.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in WebTransport Unreliable Datagram Metadata\", \"Lab Description\": \"A real-time sports betting app uses WebTransport unreliable datagrams for odds updates. The application renders message headers in debug panels using innerHTML. To solve: Craft datagram packets with XSS payloads that execute when traders inspect network traffic.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in WebCodecs VideoFrame Metadata Processing\nDescription: A video editing PWA uses WebCodecs API to analyze footage. The application displays frame metadata in SVG timelines without escaping. To solve: Inject XSS through crafted video timestamp metadata that executes during clip scrubbing.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebCodecs VideoFrame Metadata Processing\", \"Lab Description\": \"A video editing PWA uses WebCodecs API to analyze footage. The application displays frame metadata in SVG timelines without escaping. To solve: Inject XSS through crafted video timestamp metadata that executes during clip scrubbing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Deno Fresh Islands Hydration Mismatch\nDescription: A Deno Fresh blog platform passes props to islands components without serialization checks. The application's server-rendered HTML mismatches client-side hydration. To solve: Craft blog post that injects XSS through island prop deserialization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Deno Fresh Islands Hydration Mismatch\", \"Lab Description\": \"A Deno Fresh blog platform passes props to islands components without serialization checks. The application's server-rendered HTML mismatches client-side hydration. To solve: Craft blog post that injects XSS through island prop deserialization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in WebGPU Compute Shader Debug Output\nDescription: A cryptocurrency mining visualizer renders WebGPU shader compilation errors using innerHTML. The application passes compute pipeline metadata to DOM without sanitization. To solve: Craft a shader with XSS payload that executes during pipeline validation failures.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebGPU Compute Shader Debug Output\", \"Lab Description\": \"A cryptocurrency mining visualizer renders WebGPU shader compilation errors using innerHTML. The application passes compute pipeline metadata to DOM without sanitization. To solve: Craft a shader with XSS payload that executes during pipeline validation failures.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in WebNN Model Metadata via Tensor Serialization\nDescription: An AI art platform stores ML model metadata in IndexedDB without validation. The application renders ONNX model descriptions as HTML in gallery view. To solve: Inject XSS through model quantization parameters that execute when users browse generated artwork.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in WebNN Model Metadata via Tensor Serialization\", \"Lab Description\": \"An AI art platform stores ML model metadata in IndexedDB without validation. The application renders ONNX model descriptions as HTML in gallery view. To solve: Inject XSS through model quantization parameters that execute when users browse generated artwork.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in IPFS Immutable Content Addressing via CIDv1\nDescription: A decentralized social network renders IPFS-hosted posts using raw CIDv1 resolution. The application converts multibase encoded CIDs to HTML without escaping. To solve: Craft CID containing XSS payload that persists through IPFS pinning.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in IPFS Immutable Content Addressing via CIDv1\", \"Lab Description\": \"A decentralized social network renders IPFS-hosted posts using raw CIDv1 resolution. The application converts multibase encoded CIDs to HTML without escaping. To solve: Craft CID containing XSS payload that persists through IPFS pinning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Web Container Filesystem /proc Access\nDescription: A browser-based IDE using WebContainers mounts /proc/self/environ as world-readable. The application displays environment variables in debug console without sanitization. To solve: Inject XSS through NODE_OPTIONS that executes when developers inspect runtime config.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Web Container Filesystem /proc Access\", \"Lab Description\": \"A browser-based IDE using WebContainers mounts /proc/self/environ as world-readable. The application displays environment variables in debug console without sanitization. To solve: Inject XSS through NODE_OPTIONS that executes when developers inspect runtime config.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAssembly Exception Handling Hijack via EH_FRAME\nDescription: A financial modeling tool loads untrusted Wasm modules with exception handling enabled. The application renders unwind info using innerHTML in debug panels. To solve: Craft Wasm module with malicious .eh_frame section that triggers XSS during stack unwinding.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Exception Handling Hijack via EH_FRAME\", \"Lab Description\": \"A financial modeling tool loads untrusted Wasm modules with exception handling enabled. The application renders unwind info using innerHTML in debug panels. To solve: Craft Wasm module with malicious .eh_frame section that triggers XSS during stack unwinding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in PyTorch Model Hub via TorchScript Metadata\nDescription: A MLOps platform automatically renders model cards from TorchScript archives. The application parses `extra_files` metadata as HTML without sanitization. To solve: Inject XSS through malicious model metadata that executes when researchers view model documentation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in PyTorch Model Hub via TorchScript Metadata\", \"Lab Description\": \"A MLOps platform automatically renders model cards from TorchScript archives. The application parses `extra_files` metadata as HTML without sanitization. To solve: Inject XSS through malicious model metadata that executes when researchers view model documentation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in TensorFlow.js Layer Visualization via Custom Activation Names\nDescription: A neural network playground renders layer configurations from JSON models. The application uses `innerHTML` for activation function labels. To solve: Craft a model JSON file where activation names contain XSS payloads triggering during model summary rendering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in TensorFlow.js Layer Visualization via Custom Activation Names\", \"Lab Description\": \"A neural network playground renders layer configurations from JSON models. The application uses `innerHTML` for activation function labels. To solve: Craft a model JSON file where activation names contain XSS payloads triggering during model summary rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Patient Ventilator Alarm WebSocket Stream\nDescription: A critical care monitoring system renders ventilator alarms using unsanitized WebSocket messages. The application converts HL7 v2 ORU^R01 messages to HTML tables. To solve: Inject XSS through spoofed alarm payload that executes when clinicians acknowledge alerts.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Patient Ventilator Alarm WebSocket Stream\", \"Lab Description\": \"A critical care monitoring system renders ventilator alarms using unsanitized WebSocket messages. The application converts HL7 v2 ORU^R01 messages to HTML tables. To solve: Inject XSS through spoofed alarm payload that executes when clinicians acknowledge alerts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in MRI DICOM Series Description via Modality Worklist\nDescription: A radiology PACS system stores DICOM metadata from MWL queries without sanitizing (0008,103E) SeriesDescription. The application renders study lists using React dangerouslySetInnerHTML. To solve: Inject XSS through modality worklist entry that triggers when loading MRI sequences.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in MRI DICOM Series Description via Modality Worklist\", \"Lab Description\": \"A radiology PACS system stores DICOM metadata from MWL queries without sanitizing (0008,103E) SeriesDescription. The application renders study lists using React dangerouslySetInnerHTML. To solve: Inject XSS through modality worklist entry that triggers when loading MRI sequences.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Infusion Pump Drug Library Validation Errors\nDescription: A smart infusion pump management portal displays drug library validation errors using Vue v-html. The application parses pump logs containing unsanitized drug names. To solve: Craft medication entry that bypasses client-side validation and executes XSS during error review.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Infusion Pump Drug Library Validation Errors\", \"Lab Description\": \"A smart infusion pump management portal displays drug library validation errors using Vue v-html. The application parses pump logs containing unsanitized drug names. To solve: Craft medication entry that bypasses client-side validation and executes XSS during error review.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Telehealth Video Conference Chat\nDescription: A HIPAA-compliant telehealth platform renders participant chat messages using insecure client-side templating. The application uses `document.write()` with unsanitized WebRTC data channel inputs. To solve: Inject XSS through chat that executes when doctors share their screen.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Telehealth Video Conference Chat\", \"Lab Description\": \"A HIPAA-compliant telehealth platform renders participant chat messages using insecure client-side templating. The application uses `document.write()` with unsanitized WebRTC data channel inputs. To solve: Inject XSS through chat that executes when doctors share their screen.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in AI-Powered Mental Health Journal\nDescription: A cognitive behavioral therapy app stores journal entries in Firebase without input validation. The application's sentiment analysis feature renders raw LLM output using Angular's [innerHTML]. To solve: Poison training data to force XSS payload generation in AI responses.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in AI-Powered Mental Health Journal\", \"Lab Description\": \"A cognitive behavioral therapy app stores journal entries in Firebase without input validation. The application's sentiment analysis feature renders raw LLM output using Angular's [innerHTML]. To solve: Poison training data to force XSS payload generation in AI responses.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Autonomous Vehicle Charging Station Map\nDescription: An EV charging network status page uses insecure SVG animations for real-time availability. The application parses Open Charge Point Protocol (OCPP) messages into DOM without escaping. To solve: Inject XSS through spoofed OCPP status notifications.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Autonomous Vehicle Charging Station Map\", \"Lab Description\": \"An EV charging network status page uses insecure SVG animations for real-time availability. The application parses Open Charge Point Protocol (OCPP) messages into DOM without escaping. To solve: Inject XSS through spoofed OCPP status notifications.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Quantum Computing Qubit State Visualization\nDescription: A cloud quantum platform renders qubit state probabilities using WebGL shaders. The application converts user-defined state labels to Three.js tooltips without sanitization. To solve: Inject XSS through crafted state labels that execute when researchers rotate qubit visualizations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Quantum Computing Qubit State Visualization\", \"Lab Description\": \"A cloud quantum platform renders qubit state probabilities using WebGL shaders. The application converts user-defined state labels to Three.js tooltips without sanitization. To solve: Inject XSS through crafted state labels that execute when researchers rotate qubit visualizations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Brain-Computer Interface EEG Data Labeling\nDescription: A neurotech research platform stores EEG channel labels in MongoDB with disabled schema validation. The application renders labels using Angular's innerHTML in 3D brain visualizations. To solve: Inject XSS through BCI2000-compatible channel names that execute during cognitive state classification.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Brain-Computer Interface EEG Data Labeling\", \"Lab Description\": \"A neurotech research platform stores EEG channel labels in MongoDB with disabled schema validation. The application renders labels using Angular's innerHTML in 3D brain visualizations. To solve: Inject XSS through BCI2000-compatible channel names that execute during cognitive state classification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in Satellite Telemetry Display via CCSDS Packets\nDescription: A ground station dashboard parses CCSDS space packets into HTML tables. The application processes secondary headers using DOMParser with insecure XML-to-HTML conversion. To solve: Craft telemetry packets with XSS payloads that execute during solar array deployment visualization.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Satellite Telemetry Display via CCSDS Packets\", \"Lab Description\": \"A ground station dashboard parses CCSDS space packets into HTML tables. The application processes secondary headers using DOMParser with insecure XML-to-HTML conversion. To solve: Craft telemetry packets with XSS payloads that execute during solar array deployment visualization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in LHC Beamline Visualization via ROOT Framework\nDescription: A CERN monitoring tool renders particle collision paths using JavaScript ROOT framework. The application converts user-defined histogram labels to SVG without sanitization. To solve: Inject XSS through crafted TGraphErrors title that executes during beam dump event rendering.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in LHC Beamline Visualization via ROOT Framework\", \"Lab Description\": \"A CERN monitoring tool renders particle collision paths using JavaScript ROOT framework. The application converts user-defined histogram labels to SVG without sanitization. To solve: Inject XSS through crafted TGraphErrors title that executes during beam dump event rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Tokamak Plasma State Monitoring via MDSplus\nDescription: A fusion reactor control system stores diagnostic data in MDSplus trees without input validation. The application renders plasma boundary visualizations using D3.js with dangerous HTML injection. To solve: Inject XSS through magnetic probe calibration metadata that triggers during ELM suppression cycles.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Tokamak Plasma State Monitoring via MDSplus\", \"Lab Description\": \"A fusion reactor control system stores diagnostic data in MDSplus trees without input validation. The application renders plasma boundary visualizations using D3.js with dangerous HTML injection. To solve: Inject XSS through magnetic probe calibration metadata that triggers during ELM suppression cycles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in LIGO Gravitational Wave Alert Dashboard\nDescription: The LIGO-Virgo alert system renders CBC (Compact Binary Coalescence) events in React using dangerouslySetInnerHTML. The application parses GraceDB JSON parameters without escaping. To solve: Inject XSS through mock strain data that executes during matched filtering visualization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in LIGO Gravitational Wave Alert Dashboard\", \"Lab Description\": \"The LIGO-Virgo alert system renders CBC (Compact Binary Coalescence) events in React using dangerouslySetInnerHTML. The application parses GraceDB JSON parameters without escaping. To solve: Inject XSS through mock strain data that executes during matched filtering visualization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in V2X (Vehicle-to-Everything) Message Rendering\nDescription: A smart city traffic system visualizes Basic Safety Messages (BSM) from connected vehicles using insecure innerHTML. The application parses SAE J2735 messages containing unsanitized vehicle IDs. To solve: Spoof BSM packets to inject XSS that triggers when traffic operators view collision warnings.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in V2X (Vehicle-to-Everything) Message Rendering\", \"Lab Description\": \"A smart city traffic system visualizes Basic Safety Messages (BSM) from connected vehicles using insecure innerHTML. The application parses SAE J2735 messages containing unsanitized vehicle IDs. To solve: Spoof BSM packets to inject XSS that triggers when traffic operators view collision warnings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in EV Battery Management Firmware Portal\nDescription: An electric vehicle OEM portal stores battery cell voltage logs in MongoDB with disabled schema validation. The application's React frontend dangerously renders thermal runaway warnings. To solve: Inject XSS through CAN bus dumps that execute when engineers analyze charging patterns.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in EV Battery Management Firmware Portal\", \"Lab Description\": \"An electric vehicle OEM portal stores battery cell voltage logs in MongoDB with disabled schema validation. The application's React frontend dangerously renders thermal runaway warnings. To solve: Inject XSS through CAN bus dumps that execute when engineers analyze charging patterns.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Real-Time Energy Distribution Dashboard\nDescription: A municipal power grid monitoring system reflects unsanitized substation IDs from URL parameters in its React dashboard. The application uses dangerouslySetInnerHTML for phasor measurement unit (PMU) labels. To solve: Inject XSS through crafted URL that triggers when engineers view load imbalance alerts.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Real-Time Energy Distribution Dashboard\", \"Lab Description\": \"A municipal power grid monitoring system reflects unsanitized substation IDs from URL parameters in its React dashboard. The application uses dangerouslySetInnerHTML for phasor measurement unit (PMU) labels. To solve: Inject XSS through crafted URL that triggers when engineers view load imbalance alerts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in Smart Meter Firmware Update Portal\nDescription: An utility company's firmware management system stores meter metadata in PostgreSQL without input validation. The Vue frontend renders device descriptions using v-html. To solve: Inject XSS through DLMS/COSEM protocol simulator that persists across firmware flashes.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Smart Meter Firmware Update Portal\", \"Lab Description\": \"An utility company's firmware management system stores meter metadata in PostgreSQL without input validation. The Vue frontend renders device descriptions using v-html. To solve: Inject XSS through DLMS/COSEM protocol simulator that persists across firmware flashes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in SCADA Alarm Log Visualization\nDescription: A generation plant's HMI parses DNP3 protocol alarm messages into HTML tables. The application's XML-to-DOM converter fails to handle namespaces in SVG-based alerts. To solve: Craft malicious DNP3 object headers that mutate into scripts during refresh cycles.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in SCADA Alarm Log Visualization\", \"Lab Description\": \"A generation plant's HMI parses DNP3 protocol alarm messages into HTML tables. The application's XML-to-DOM converter fails to handle namespaces in SVG-based alerts. To solve: Craft malicious DNP3 object headers that mutate into scripts during refresh cycles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Renewable Energy Forecasting API\nDescription: A wind farm prediction system stores JSONP callback functions in Cassandra without validation. The application's admin panel dynamically creates script tags from stored entries. To solve: Inject XSS through malicious weather data callback that executes when meteorologists view forecasts.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Renewable Energy Forecasting API\", \"Lab Description\": \"A wind farm prediction system stores JSONP callback functions in Cassandra without validation. The application's admin panel dynamically creates script tags from stored entries. To solve: Inject XSS through malicious weather data callback that executes when meteorologists view forecasts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in AMI (Advanced Metering Infrastructure) Headend\nDescription: A smart meter data collection system renders meter IDs from C12.22 protocol messages in Angular templates without sanitization. The application uses bypassSecurityTrustHtml for real-time usage displays. To solve: Spoof C12.22 ReadData responses containing XSS payloads.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in AMI (Advanced Metering Infrastructure) Headend\", \"Lab Description\": \"A smart meter data collection system renders meter IDs from C12.22 protocol messages in Angular templates without sanitization. The application uses bypassSecurityTrustHtml for real-time usage displays. To solve: Spoof C12.22 ReadData responses containing XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in Implantable Cardioverter-Defibrillator (ICD) Remote Monitoring\nDescription: A cardiac device management portal stores episode electrograms in MongoDB without input sanitization. The application's React frontend renders intracardiac signals using dangerouslySetInnerHTML. To solve: Inject XSS through spoofed ventricular tachycardia episodes that execute when cardiologists review arrhythmia logs.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Implantable Cardioverter-Defibrillator (ICD) Remote Monitoring\", \"Lab Description\": \"A cardiac device management portal stores episode electrograms in MongoDB without input sanitization. The application's React frontend renders intracardiac signals using dangerouslySetInnerHTML. To solve: Inject XSS through spoofed ventricular tachycardia episodes that execute when cardiologists review arrhythmia logs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in MRI Quench Detection System\nDescription: A superconducting magnet monitoring dashboard reflects cryogen levels from URL parameters in D3.js visualizations. The application uses innerHTML for emergency quench alerts. To solve: Inject XSS through crafted helium level parameter that triggers during magnet ramp-down sequences.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in MRI Quench Detection System\", \"Lab Description\": \"A superconducting magnet monitoring dashboard reflects cryogen levels from URL parameters in D3.js visualizations. The application uses innerHTML for emergency quench alerts. To solve: Inject XSS through crafted helium level parameter that triggers during magnet ramp-down sequences.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Smart Insulin Pump Configuration Portal\nDescription: A diabetes management system parses basal rate schedules from XML without proper namespace handling. The application's Angular template renders therapy plans using bypassSecurityTrustHtml. To solve: Inject XSS through malicious basal rate entries that execute during bolus calculator usage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Smart Insulin Pump Configuration Portal\", \"Lab Description\": \"A diabetes management system parses basal rate schedules from XML without proper namespace handling. The application's Angular template renders therapy plans using bypassSecurityTrustHtml. To solve: Inject XSS through malicious basal rate entries that execute during bolus calculator usage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in DICOM Radiation Therapy Planning System\nDescription: An oncology treatment platform stores RTSTRUCT DICOM files with unescaped ROI names. The application renders structure sets in Three.js using innerHTML for tooltips. To solve: Inject XSS through malicious ROI annotations that execute during dose-volume histogram analysis.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in DICOM Radiation Therapy Planning System\", \"Lab Description\": \"An oncology treatment platform stores RTSTRUCT DICOM files with unescaped ROI names. The application renders structure sets in Three.js using innerHTML for tooltips. To solve: Inject XSS through malicious ROI annotations that execute during dose-volume histogram analysis.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Patient-Controlled Analgesia (PCA) Pump Log Viewer\nDescription: A pain management system reflects unsanitized drug names from URL parameters in its Vue interface. The application uses v-html for medication history timelines. To solve: Inject XSS through crafted drug parameter that triggers when nurses review administration records.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Patient-Controlled Analgesia (PCA) Pump Log Viewer\", \"Lab Description\": \"A pain management system reflects unsanitized drug names from URL parameters in its Vue interface. The application uses v-html for medication history timelines. To solve: Inject XSS through crafted drug parameter that triggers when nurses review administration records.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in FADEC Ground Station Telemetry Dashboard\nDescription: A jet engine monitoring system reflects unsanitized EGT (Exhaust Gas Temperature) values from WebSocket streams. The application uses innerHTML for real-time parameter alerts. To solve: Inject XSS through spoofed CAN bus messages that execute when engineers view overspeed warnings.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in FADEC Ground Station Telemetry Dashboard\", \"Lab Description\": \"A jet engine monitoring system reflects unsanitized EGT (Exhaust Gas Temperature) values from WebSocket streams. The application uses innerHTML for real-time parameter alerts. To solve: Inject XSS through spoofed CAN bus messages that execute when engineers view overspeed warnings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in ADS-B Aircraft Tracking System\nDescription: An air traffic control platform stores aircraft registration data in PostgreSQL without input validation. The Vue frontend renders ICAO 24-bit addresses using v-html. To solve: Spoof Mode-S transponder messages containing XSS that triggers when controllers click aircraft icons.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ADS-B Aircraft Tracking System\", \"Lab Description\": \"An air traffic control platform stores aircraft registration data in PostgreSQL without input validation. The Vue frontend renders ICAO 24-bit addresses using v-html. To solve: Spoof Mode-S transponder messages containing XSS that triggers when controllers click aircraft icons.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Satellite Telecommand Interface\nDescription: A spacecraft command system parses CCSDS telecommand packets into XML without proper namespace isolation. The application's Electron-based UI uses dangerouslySetInnerHTML for command histories. To solve: Inject XSS through malicious TC packets that execute during solar array deployment sequences.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Satellite Telecommand Interface\", \"Lab Description\": \"A spacecraft command system parses CCSDS telecommand packets into XML without proper namespace isolation. The application's Electron-based UI uses dangerouslySetInnerHTML for command histories. To solve: Inject XSS through malicious TC packets that execute during solar array deployment sequences.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Aviation Maintenance EHR Integration\nDescription: An aircraft health management system reflects unsanitized part numbers from URL parameters in its AngularJS interface. The application uses $sce.trustAsHtml for maintenance log rendering. To solve: Inject XSS through crafted MSG-3 task codes that execute when technicians view component histories.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Aviation Maintenance EHR Integration\", \"Lab Description\": \"An aircraft health management system reflects unsanitized part numbers from URL parameters in its AngularJS interface. The application uses $sce.trustAsHtml for maintenance log rendering. To solve: Inject XSS through crafted MSG-3 task codes that execute when technicians view component histories.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Flight Planning API Gateway\nDescription: An EFB (Electronic Flight Bag) system stores flight plans in Redis without input validation. The React frontend renders ICAO flight plan fields using dangerouslySetInnerHTML. To solve: Inject XSS through malicious route remarks that execute when pilots file revised plans.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Flight Planning API Gateway\", \"Lab Description\": \"An EFB (Electronic Flight Bag) system stores flight plans in Redis without input validation. The React frontend renders ICAO flight plan fields using dangerouslySetInnerHTML. To solve: Inject XSS through malicious route remarks that execute when pilots file revised plans.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Metaverse Avatar Profile Rendering\nDescription: A WebXR social platform renders 3D avatar bios using Babylon.js without sanitizing NFT metadata. The application converts on-chain ERC-6551 tokens to HTML panels using innerHTML. To solve: Inject XSS through malicious tokenURI that executes when users inspect virtual goods.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Metaverse Avatar Profile Rendering\", \"Lab Description\": \"A WebXR social platform renders 3D avatar bios using Babylon.js without sanitizing NFT metadata. The application converts on-chain ERC-6551 tokens to HTML panels using innerHTML. To solve: Inject XSS through malicious tokenURI that executes when users inspect virtual goods.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Quantum-Secure Voting System\nDescription: A post-quantum e-voting platform stores ballot comments in Q#-encrypted blobs without input validation. The React frontend decrypts and renders using dangerouslySetInnerHTML. To solve: Inject XSS through lattice-based ciphertext that persists through homomorphic tallying.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Quantum-Secure Voting System\", \"Lab Description\": \"A post-quantum e-voting platform stores ballot comments in Q#-encrypted blobs without input validation. The React frontend decrypts and renders using dangerouslySetInnerHTML. To solve: Inject XSS through lattice-based ciphertext that persists through homomorphic tallying.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Vertical Farm IoT Dashboard\nDescription: A hydroponic control system parses Modbus sensor data into SVG growth charts. The application's Angular template bypasses sanitization for real-time EC/pH displays. To solve: Inject XSS through nutrient dosing parameters that execute during automated flush cycles.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Vertical Farm IoT Dashboard\", \"Lab Description\": \"A hydroponic control system parses Modbus sensor data into SVG growth charts. The application's Angular template bypasses sanitization for real-time EC/pH displays. To solve: Inject XSS through nutrient dosing parameters that execute during automated flush cycles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Space Tourism Booking Portal\nDescription: A lunar travel agency's payment system reflects unsanitized promo codes from URL parameters. The Vue/Nuxt frontend uses v-html for limited-time offer banners. To solve: Inject XSS through crafted discount code that executes during launch window selection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Space Tourism Booking Portal\", \"Lab Description\": \"A lunar travel agency's payment system reflects unsanitized promo codes from URL parameters. The Vue/Nuxt frontend uses v-html for limited-time offer banners. To solve: Inject XSS through crafted discount code that executes during launch window selection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in DAO Governance Proposal Renderer\nDescription: A decentralized autonomous organization stores Snapshot proposals in IPFS without sanitization. The Svelte frontend renders Markdown with mdsvex using raw HTML enabled. To solve: Inject XSS through proposal body that executes when delegates vote on-chain.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in DAO Governance Proposal Renderer\", \"Lab Description\": \"A decentralized autonomous organization stores Snapshot proposals in IPFS without sanitization. The Svelte frontend renders Markdown with mdsvex using raw HTML enabled. To solve: Inject XSS through proposal body that executes when delegates vote on-chain.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Quantum Key Distribution Dashboard\nDescription: A QKD network monitor reflects URL parameters in Three.js WebGL visualizations without sanitization. The application converts BB84 protocol error rates to SVG tooltips using innerHTML. To solve: Inject XSS through crafted photon detector efficiency parameters that execute during key rate calculations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Quantum Key Distribution Dashboard\", \"Lab Description\": \"A QKD network monitor reflects URL parameters in Three.js WebGL visualizations without sanitization. The application converts BB84 protocol error rates to SVG tooltips using innerHTML. To solve: Inject XSS through crafted photon detector efficiency parameters that execute during key rate calculations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Lattice-Based Signature Registry\nDescription: A PQC migration platform stores Dilithium public keys in Cassandra with disabled input validation. The React frontend renders user comments using dangerouslySetInnerHTML. To solve: Inject XSS through crafted key metadata that persists through NIST standardization audits.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Lattice-Based Signature Registry\", \"Lab Description\": \"A PQC migration platform stores Dilithium public keys in Cassandra with disabled input validation. The React frontend renders user comments using dangerouslySetInnerHTML. To solve: Inject XSS through crafted key metadata that persists through NIST standardization audits.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Quantum Annealing Result Visualization\nDescription: A quantum optimization service parses D-Wave solver outputs into D3.js force graphs. The application's XML-to-SVG converter fails to handle QUBO model namespaces. To solve: Craft malicious Ising model parameters that mutate into scripts during energy landscape rendering.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Quantum Annealing Result Visualization\", \"Lab Description\": \"A quantum optimization service parses D-Wave solver outputs into D3.js force graphs. The application's XML-to-SVG converter fails to handle QUBO model namespaces. To solve: Craft malicious Ising model parameters that mutate into scripts during energy landscape rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Quantum Error Correction Dashboard\nDescription: A fault-tolerant quantum computing interface reflects surface code decoder parameters in Angular templates. The application bypasses sanitization for real-time error rate displays. To solve: Inject XSS through crafted stabilizer measurement rounds that execute during logical qubit initialization.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Quantum Error Correction Dashboard\", \"Lab Description\": \"A fault-tolerant quantum computing interface reflects surface code decoder parameters in Angular templates. The application bypasses sanitization for real-time error rate displays. To solve: Inject XSS through crafted stabilizer measurement rounds that execute during logical qubit initialization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Quantum Neural Network Training Logs\nDescription: A hybrid quantum-classical ML platform stores TensorBoard logs in MinIO without validation. The Vue frontend renders hyperparameter tables using v-html. To solve: Inject XSS through malicious circuit depth entries that execute during gradient visualization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Quantum Neural Network Training Logs\", \"Lab Description\": \"A hybrid quantum-classical ML platform stores TensorBoard logs in MinIO without validation. The Vue frontend renders hyperparameter tables using v-html. To solve: Inject XSS through malicious circuit depth entries that execute during gradient visualization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Model Zoo Metadata Renderer\nDescription: A popular ML framework's model registry reflects search parameters in TensorFlow.js visualization tools. The application converts ONNX model metadata to HTML using innerHTML. To solve: Inject XSS through crafted operator type names that execute during model comparison.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Model Zoo Metadata Renderer\", \"Lab Description\": \"A popular ML framework's model registry reflects search parameters in TensorFlow.js visualization tools. The application converts ONNX model metadata to HTML using innerHTML. To solve: Inject XSS through crafted operator type names that execute during model comparison.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Federated Learning Client\nDescription: A healthcare FL platform stores client updates in IPFS without input sanitization. The React dashboard renders participant metadata using dangerouslySetInnerHTML. To solve: Inject XSS through malicious gradient updates that execute during global model aggregation.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Federated Learning Client\", \"Lab Description\": \"A healthcare FL platform stores client updates in IPFS without input sanitization. The React dashboard renders participant metadata using dangerouslySetInnerHTML. To solve: Inject XSS through malicious gradient updates that execute during global model aggregation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in MLOps Pipeline Templates\nDescription: A CI/CD platform for ML parses Kubeflow pipeline YAML into HTML documentation. The application's Markdown renderer allows raw HTML in template descriptions. To solve: Craft malicious component description that bypasses Argo Workflows sanitization.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in MLOps Pipeline Templates\", \"Lab Description\": \"A CI/CD platform for ML parses Kubeflow pipeline YAML into HTML documentation. The application's Markdown renderer allows raw HTML in template descriptions. To solve: Craft malicious component description that bypasses Argo Workflows sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Synthetic Training Data Generator\nDescription: A GAN-based data augmentation tool reflects user inputs in D3.js visualizations. The application uses Angular's bypassSecurityTrustHtml for synthetic sample metadata. To solve: Inject XSS through crafted feature distribution parameters.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Synthetic Training Data Generator\", \"Lab Description\": \"A GAN-based data augmentation tool reflects user inputs in D3.js visualizations. The application uses Angular's bypassSecurityTrustHtml for synthetic sample metadata. To solve: Inject XSS through crafted feature distribution parameters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in LLM Fine-Tuning Interface\nDescription: A ChatGPT plugin stores training conversations in Elasticsearch without escaping. The Vue frontend renders system prompts using v-html. To solve: Inject XSS through crafted instruction examples that execute during RLHF alignment.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in LLM Fine-Tuning Interface\", \"Lab Description\": \"A ChatGPT plugin stores training conversations in Elasticsearch without escaping. The Vue frontend renders system prompts using v-html. To solve: Inject XSS through crafted instruction examples that execute during RLHF alignment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Digital Wallet QR Generator\nDescription: A neobank's payment portal reflects URL parameters in SVG-based QR codes without sanitization. The application embeds user-controlled data in <desc> tags visible to screen readers. To solve: Inject XSS through crafted recipient addresses that execute during QR scanning simulation.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Digital Wallet QR Generator\", \"Lab Description\": \"A neobank's payment portal reflects URL parameters in SVG-based QR codes without sanitization. The application embeds user-controlled data in <desc> tags visible to screen readers. To solve: Inject XSS through crafted recipient addresses that execute during QR scanning simulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Transaction Memo Field (SWIFT MT940)\nDescription: A corporate banking platform parses SWIFT messages without sanitizing :86: remark fields. The Angular frontend renders transaction lists using [innerHTML]. To solve: Inject XSS through crafted payment remarks that persist through SEPA clearing.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Transaction Memo Field (SWIFT MT940)\", \"Lab Description\": \"A corporate banking platform parses SWIFT messages without sanitizing :86: remark fields. The Angular frontend renders transaction lists using [innerHTML]. To solve: Inject XSS through crafted payment remarks that persist through SEPA clearing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Chat Message Formatting Engine\nDescription: A military-grade secure chat app converts Markdown to HTML using outdated parser. The application's emoji shortcode processor fails to handle nested contexts. To solve: Craft message that bypasses :emoji: syntax to execute script during message threading.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Chat Message Formatting Engine\", \"Lab Description\": \"A military-grade secure chat app converts Markdown to HTML using outdated parser. The application's emoji shortcode processor fails to handle nested contexts. To solve: Craft message that bypasses :emoji: syntax to execute script during message threading.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in AI-Powered Chatbot Financial Advisor\nDescription: A robo-advisor platform reflects user risk profiles in D3.js visualizations. The application uses <foreignObject> to embed unsanitized LLM responses in SVG charts. To solve: Inject XSS through crafted investment goals that execute during portfolio simulation.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in AI-Powered Chatbot Financial Advisor\", \"Lab Description\": \"A robo-advisor platform reflects user risk profiles in D3.js visualizations. The application uses <foreignObject> to embed unsanitized LLM responses in SVG charts. To solve: Inject XSS through crafted investment goals that execute during portfolio simulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Encrypted Chat Message Metadata\nDescription: An E2EE messaging app stores message timestamps in IndexedDB without validation. The React frontend decrypts and renders location metadata using dangerouslySetInnerHTML. To solve: Inject XSS through crafted GPS coordinates that execute during map pin hover.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Encrypted Chat Message Metadata\", \"Lab Description\": \"An E2EE messaging app stores message timestamps in IndexedDB without validation. The React frontend decrypts and renders location metadata using dangerouslySetInnerHTML. To solve: Inject XSS through crafted GPS coordinates that execute during map pin hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Voice Banking IVR Transcript Viewer\nDescription: A phone banking system converts voice call transcripts to HTML using insecure Web Speech API output. The application renders timestamps with innerHTML without escaping angle brackets. To solve: Inject XSS through spoken phrases that execute when agents review call recordings.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Voice Banking IVR Transcript Viewer\", \"Lab Description\": \"A phone banking system converts voice call transcripts to HTML using insecure Web Speech API output. The application renders timestamps with innerHTML without escaping angle brackets. To solve: Inject XSS through spoken phrases that execute when agents review call recordings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Cryptocurrency Wallet Recovery Phrase Grid\nDescription: A hardware wallet management portal stores BIP-39 mnemonics as SVG grids in IPFS. The React frontend dangerously renders seed phrase visualizations. To solve: Inject XSS through crafted word positions that execute during backup verification.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Cryptocurrency Wallet Recovery Phrase Grid\", \"Lab Description\": \"A hardware wallet management portal stores BIP-39 mnemonics as SVG grids in IPFS. The React frontend dangerously renders seed phrase visualizations. To solve: Inject XSS through crafted word positions that execute during backup verification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in AI Mortgage Calculator Chatbot\nDescription: A home loan platform's chatbot parses natural language income statements into HTML tables. The application's Markdown-to-LaTeX converter fails to handle matrix environments. To solve: Inject XSS through salary descriptions that bypass PDF sanitization.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in AI Mortgage Calculator Chatbot\", \"Lab Description\": \"A home loan platform's chatbot parses natural language income statements into HTML tables. The application's Markdown-to-LaTeX converter fails to handle matrix environments. To solve: Inject XSS through salary descriptions that bypass PDF sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Stock Trading Signal Webhook Preview\nDescription: A algo-trading platform reflects unsanitized webhook JSON data in TradingView charts. The application uses Angular's bypassSecurityTrustHtml for strategy annotations. To solve: Inject XSS through crafted alert messages that execute during backtest rendering.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Stock Trading Signal Webhook Preview\", \"Lab Description\": \"A algo-trading platform reflects unsanitized webhook JSON data in TradingView charts. The application uses Angular's bypassSecurityTrustHtml for strategy annotations. To solve: Inject XSS through crafted alert messages that execute during backtest rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in Blockchain Smart Contract Event Logs\nDescription: A DeFi analytics platform renders Ethereum event logs as HTML using web3.js. The application parses contract ABIs without sanitizing indexed parameters. To solve: Inject XSS through malicious event emissions that execute when users filter transactions.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Blockchain Smart Contract Event Logs\", \"Lab Description\": \"A DeFi analytics platform renders Ethereum event logs as HTML using web3.js. The application parses contract ABIs without sanitizing indexed parameters. To solve: Inject XSS through malicious event emissions that execute when users filter transactions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Product Review Carousel\nDescription: An online marketplace renders user reviews in a React carousel using dangerouslySetInnerHTML. The application converts Markdown comments to HTML without sanitizing <details> tags. To solve: Inject XSS that triggers when shoppers expand review details.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Product Review Carousel\", \"Lab Description\": \"An online marketplace renders user reviews in a React carousel using dangerouslySetInnerHTML. The application converts Markdown comments to HTML without sanitizing <details> tags. To solve: Inject XSS that triggers when shoppers expand review details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Loyalty Point Calculator\nDescription: A retail chain's CRM stores customer tier calculations in PostgreSQL with disabled pg_escape_string. The Vue frontend renders loyalty status using v-html. To solve: Inject XSS through crafted purchase history that executes during point redemption.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Loyalty Point Calculator\", \"Lab Description\": \"A retail chain's CRM stores customer tier calculations in PostgreSQL with disabled pg_escape_string. The Vue frontend renders loyalty status using v-html. To solve: Inject XSS through crafted purchase history that executes during point redemption.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in AR Virtual Try-On\nDescription: A fashion app's WebGL-based virtual mirror parses JSON accessory metadata without HTML entity encoding. The application converts product SKUs to tooltips using innerHTML. To solve: Craft SKU containing XSS that executes when users share looks.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in AR Virtual Try-On\", \"Lab Description\": \"A fashion app's WebGL-based virtual mirror parses JSON accessory metadata without HTML entity encoding. The application converts product SKUs to tooltips using innerHTML. To solve: Craft SKU containing XSS that executes when users share looks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Flash Sale Countdown Timer\nDescription: A deal site's Next.js timer component reflects URL parameters in its SVG-based countdown. The application uses date-fns without escaping timezone abbreviations. To solve: Inject XSS through crafted tz parameter during daylight saving transitions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Flash Sale Countdown Timer\", \"Lab Description\": \"A deal site's Next.js timer component reflects URL parameters in its SVG-based countdown. The application uses date-fns without escaping timezone abbreviations. To solve: Inject XSS through crafted tz parameter during daylight saving transitions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Supply Chain Inventory API\nDescription: A warehouse management system stores stock codes in MongoDB without input validation. The Angular frontend renders pallet locations using [innerHTML]. To solve: Inject XSS through RFID tag data that executes during stock takes.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Supply Chain Inventory API\", \"Lab Description\": \"A warehouse management system stores stock codes in MongoDB without input validation. The Angular frontend renders pallet locations using [innerHTML]. To solve: Inject XSS through RFID tag data that executes during stock takes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Patient Portal Lab Results Viewer\nDescription: A hospital EHR system renders PDF lab reports as HTML using pdf-lib without proper sanitization. The application converts PDF annotations to DOM elements using innerHTML. To solve: Inject XSS through crafted lab comments that execute when doctors view results.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Patient Portal Lab Results Viewer\", \"Lab Description\": \"A hospital EHR system renders PDF lab reports as HTML using pdf-lib without proper sanitization. The application converts PDF annotations to DOM elements using innerHTML. To solve: Inject XSS through crafted lab comments that execute when doctors view results.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in MRI Machine Scheduling System\nDescription: A radiology workflow manager stores DICOM metadata in MariaDB with disabled input escaping. The Angular frontend renders patient preparation instructions using [innerHTML]. To solve: Inject XSS through crafted scan protocols that persist across modality worklist updates.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in MRI Machine Scheduling System\", \"Lab Description\": \"A radiology workflow manager stores DICOM metadata in MariaDB with disabled input escaping. The Angular frontend renders patient preparation instructions using [innerHTML]. To solve: Inject XSS through crafted scan protocols that persist across modality worklist updates.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in Telemedicine Video Chat\nDescription: A telehealth platform converts WebRTC data channel messages to HTML using a flawed Markdown parser. The application's emoji shortcode processor allows nested code blocks. To solve: Craft message that bypasses :emoji: syntax to execute script during session recording.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Telemedicine Video Chat\", \"Lab Description\": \"A telehealth platform converts WebRTC data channel messages to HTML using a flawed Markdown parser. The application's emoji shortcode processor allows nested code blocks. To solve: Craft message that bypasses :emoji: syntax to execute script during session recording.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Smart Pill Dispenser Mobile App\nDescription: An IoT medication manager renders dosage schedules in React Native WebView without escaping. The application converts NFC tag payloads to HTML using dangerouslySetInnerHTML. To solve: Program NFC tags with XSS that executes when caregivers scan the device.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Smart Pill Dispenser Mobile App\", \"Lab Description\": \"An IoT medication manager renders dosage schedules in React Native WebView without escaping. The application converts NFC tag payloads to HTML using dangerouslySetInnerHTML. To solve: Program NFC tags with XSS that executes when caregivers scan the device.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Genomic Data Visualization Portal\nDescription: A precision medicine platform stores VCF files in HDFS without sanitizing INFO fields. The Vue frontend renders variant annotations using v-html. To solve: Inject XSS through crafted genetic markers that execute during cohort analysis.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Genomic Data Visualization Portal\", \"Lab Description\": \"A precision medicine platform stores VCF files in HDFS without sanitizing INFO fields. The Vue frontend renders variant annotations using v-html. To solve: Inject XSS through crafted genetic markers that execute during cohort analysis.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Adaptive Traffic Light Control API\nDescription: A smart traffic system's web interface reflects intersection IDs from URL parameters in Three.js visualizations. The application converts SCATS protocol data to SVG without sanitizing phase timing values. To solve: Inject XSS through crafted phase parameter that executes during emergency vehicle preemption.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Adaptive Traffic Light Control API\", \"Lab Description\": \"A smart traffic system's web interface reflects intersection IDs from URL parameters in Three.js visualizations. The application converts SCATS protocol data to SVG without sanitizing phase timing values. To solve: Inject XSS through crafted phase parameter that executes during emergency vehicle preemption.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Smart Waste Bin Fill-Level Dashboard\nDescription: A municipal waste management system stores ultrasonic sensor data in InfluxDB without input validation. The React frontend renders bin status using dangerouslySetInnerHTML in D3.js heatmaps. To solve: Inject XSS through spoofed MQTT payloads that trigger during collection route optimization.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Smart Waste Bin Fill-Level Dashboard\", \"Lab Description\": \"A municipal waste management system stores ultrasonic sensor data in InfluxDB without input validation. The React frontend renders bin status using dangerouslySetInnerHTML in D3.js heatmaps. To solve: Inject XSS through spoofed MQTT payloads that trigger during collection route optimization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Water Quality Sensor XML Feed\nDescription: A smart water grid parses OGC SensorThings API responses into HTML tables. The application's XML parser fails to handle namespaces in SWE Common data arrays. To solve: Craft malicious sensor observation containing XSS that executes during flood prediction modeling.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Water Quality Sensor XML Feed\", \"Lab Description\": \"A smart water grid parses OGC SensorThings API responses into HTML tables. The application's XML parser fails to handle namespaces in SWE Common data arrays. To solve: Craft malicious sensor observation containing XSS that executes during flood prediction modeling.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Public Transit Real-Time Map\nDescription: A bus tracking system reflects unsanitized vehicle IDs from GTFS-RT feeds in Mapbox GL popups. The application uses Angular's bypassSecurityTrustHtml for passenger load indicators. To solve: Inject XSS through crafted vehicle positions that execute during route deviation alerts.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Public Transit Real-Time Map\", \"Lab Description\": \"A bus tracking system reflects unsanitized vehicle IDs from GTFS-RT feeds in Mapbox GL popups. The application uses Angular's bypassSecurityTrustHtml for passenger load indicators. To solve: Inject XSS through crafted vehicle positions that execute during route deviation alerts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Emergency Response Chat Logs\nDescription: A city's crisis management system stores responder messages in Elasticsearch without escaping. The Vue frontend renders incident timelines using v-html. To solve: Inject XSS through crafted triage codes that execute during mutual aid requests.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Emergency Response Chat Logs\", \"Lab Description\": \"A city's crisis management system stores responder messages in Elasticsearch without escaping. The Vue frontend renders incident timelines using v-html. To solve: Inject XSS through crafted triage codes that execute during mutual aid requests.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Autonomous Truck Platooning API\nDescription: A freight management system reflects unsanitized truck IDs from V2V (Vehicle-to-Vehicle) messages in Angular visualizations. The application converts SAE J1939 data to SVG without escaping. To solve: Inject XSS through crafted vehicle spacing parameters that execute during platoon formation.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Autonomous Truck Platooning API\", \"Lab Description\": \"A freight management system reflects unsanitized truck IDs from V2V (Vehicle-to-Vehicle) messages in Angular visualizations. The application converts SAE J1939 data to SVG without escaping. To solve: Inject XSS through crafted vehicle spacing parameters that execute during platoon formation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Maritime Container Tracking System\nDescription: A global shipping portal stores ISO 6346 container codes in MongoDB without input validation. The Vue frontend renders cargo manifests using v-html. To solve: Inject XSS through malicious BIC codes that execute during customs clearance workflows.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Maritime Container Tracking System\", \"Lab Description\": \"A global shipping portal stores ISO 6346 container codes in MongoDB without input validation. The Vue frontend renders cargo manifests using v-html. To solve: Inject XSS through malicious BIC codes that execute during customs clearance workflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Drone Delivery Waypoint Planner\nDescription: A last-mile delivery system parses GeoJSON waypoints into CesiumJS maps without proper sanitization. The application's XML-to-HTML converter fails to handle KML namespace injections. To solve: Craft malicious flight path containing XSS that executes during FAA airspace checks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Drone Delivery Waypoint Planner\", \"Lab Description\": \"A last-mile delivery system parses GeoJSON waypoints into CesiumJS maps without proper sanitization. The application's XML-to-HTML converter fails to handle KML namespace injections. To solve: Craft malicious flight path containing XSS that executes during FAA airspace checks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Railway Signaling Asset Management\nDescription: A rail network monitoring tool reflects unsanitized track circuit IDs from IEC 62290 telemetry in React dashboards. The application uses dangerouslySetInnerHTML for failure alerts. To solve: Inject XSS through crafted balise parameters that execute during train detection events.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Railway Signaling Asset Management\", \"Lab Description\": \"A rail network monitoring tool reflects unsanitized track circuit IDs from IEC 62290 telemetry in React dashboards. The application uses dangerouslySetInnerHTML for failure alerts. To solve: Inject XSS through crafted balise parameters that execute during train detection events.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Warehouse Robot Pathfinding Interface\nDescription: An automated fulfillment system stores AMR (Autonomous Mobile Robot) grid maps in PostgreSQL with disabled escaping. The Angular frontend renders SLAM trajectories using [innerHTML]. To solve: Inject XSS through malicious navigation waypoints that execute during inventory cycle counts.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Warehouse Robot Pathfinding Interface\", \"Lab Description\": \"An automated fulfillment system stores AMR (Autonomous Mobile Robot) grid maps in PostgreSQL with disabled escaping. The Angular frontend renders SLAM trajectories using [innerHTML]. To solve: Inject XSS through malicious navigation waypoints that execute during inventory cycle counts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Online Support Chat Stored XSS in Message Content\nDescription: The support chat system stores user-submitted messages and reflects them using innerHTML in the agent interface. The application doesn't sanitize content before rendering. To solve: Inject a script in the message and trigger execution in the agent view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Support Chat Stored XSS in Message Content\", \"Lab Description\": \"The support chat system stores user-submitted messages and reflects them using innerHTML in the agent interface. The application doesn't sanitize content before rendering. To solve: Inject a script in the message and trigger execution in the agent view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Event Scheduler Reflected XSS in Title Field\nDescription: The event scheduler reflects the 'title' parameter in a JavaScript block that sets page content. The application directly inserts the title value into a JS string using double quotes. To solve: Escape the context and execute arbitrary JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Event Scheduler Reflected XSS in Title Field\", \"Lab Description\": \"The event scheduler reflects the 'title' parameter in a JavaScript block that sets page content. The application directly inserts the title value into a JS string using double quotes. To solve: Escape the context and execute arbitrary JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bug Tracker Stored XSS in Issue Description\nDescription: The bug tracker stores submitted issue descriptions and renders them using innerHTML in the issue detail page. No sanitization is performed. To solve: Submit a script payload in the description and view the issue to trigger XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bug Tracker Stored XSS in Issue Description\", \"Lab Description\": \"The bug tracker stores submitted issue descriptions and renders them using innerHTML in the issue detail page. No sanitization is performed. To solve: Submit a script payload in the description and view the issue to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Search History Dashboard DOM XSS via Previous Queries\nDescription: The dashboard fetches and displays past search queries using JavaScript by injecting each query into the DOM using innerHTML. To solve: Inject a malicious query that executes script when reflected.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Search History Dashboard DOM XSS via Previous Queries\", \"Lab Description\": \"The dashboard fetches and displays past search queries using JavaScript by injecting each query into the DOM using innerHTML. To solve: Inject a malicious query that executes script when reflected.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Feedback Portal Stored XSS in Comment Field\nDescription: The feedback page allows users to submit comments, which are stored and displayed without sanitization. The rendering uses innerHTML, introducing an XSS vector. To solve: Submit a script payload that executes on the feedback view page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Feedback Portal Stored XSS in Comment Field\", \"Lab Description\": \"The feedback page allows users to submit comments, which are stored and displayed without sanitization. The rendering uses innerHTML, introducing an XSS vector. To solve: Submit a script payload that executes on the feedback view page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Internal Blog Platform Stored XSS in Article Title Field\nDescription: The internal blog system allows staff to post articles with a title and content. The title is rendered directly inside an H1 tag using innerHTML on the article view page. No sanitization is performed. To solve: Submit an article with a script payload in the title that executes when viewed.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Internal Blog Platform Stored XSS in Article Title Field\", \"Lab Description\": \"The internal blog system allows staff to post articles with a title and content. The title is rendered directly inside an H1 tag using innerHTML on the article view page. No sanitization is performed. To solve: Submit an article with a script payload in the title that executes when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Job Portal Reflected XSS in Search Query Parameter\nDescription: The job search page reflects the 'q' parameter inside a JavaScript variable for displaying recent searches. The value is directly inserted inside a JS string using double quotes. To solve: Inject JavaScript that breaks out of the string context.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Job Portal Reflected XSS in Search Query Parameter\", \"Lab Description\": \"The job search page reflects the 'q' parameter inside a JavaScript variable for displaying recent searches. The value is directly inserted inside a JS string using double quotes. To solve: Inject JavaScript that breaks out of the string context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-learning Portal Stored XSS in Forum Post Body\nDescription: The forum feature stores user-submitted posts and displays them on the thread page using innerHTML. The post body is stored and rendered without any sanitization. To solve: Submit a post with a script payload that executes on viewing.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-learning Portal Stored XSS in Forum Post Body\", \"Lab Description\": \"The forum feature stores user-submitted posts and displays them on the thread page using innerHTML. The post body is stored and rendered without any sanitization. To solve: Submit a post with a script payload that executes on viewing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Customer Support Ticket System Stored XSS in Ticket Subject\nDescription: Support tickets store a subject and message. The subject is displayed inside an HTML header using innerHTML when the ticket is viewed. No filtering is applied. To solve: Submit a malicious subject and trigger XSS on the view page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Customer Support Ticket System Stored XSS in Ticket Subject\", \"Lab Description\": \"Support tickets store a subject and message. The subject is displayed inside an HTML header using innerHTML when the ticket is viewed. No filtering is applied. To solve: Submit a malicious subject and trigger XSS on the view page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: News Aggregator DOM XSS via Source Parameter\nDescription: The news aggregator site reflects the `source` query param in a JS template literal that updates the filter UI. No escaping is performed. To solve: Inject a payload that executes within the JS template context.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"News Aggregator DOM XSS via Source Parameter\", \"Lab Description\": \"The news aggregator site reflects the `source` query param in a JS template literal that updates the filter UI. No escaping is performed. To solve: Inject a payload that executes within the JS template context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Real Estate Listings Reflected XSS in Search Filter\nDescription: The listings page includes a `location` parameter reflected inside an inline JavaScript assignment within a template literal. The application uses the parameter to highlight recent searches but does not sanitize input. To solve: Inject a payload that breaks out of the JS context and executes a script.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Real Estate Listings Reflected XSS in Search Filter\", \"Lab Description\": \"The listings page includes a `location` parameter reflected inside an inline JavaScript assignment within a template literal. The application uses the parameter to highlight recent searches but does not sanitize input. To solve: Inject a payload that breaks out of the JS context and executes a script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Social Media Platform Stored XSS in Comment Field\nDescription: User-submitted comments are stored and displayed beneath each post using innerHTML. No output sanitization is performed. This allows stored JavaScript payloads to execute for all users viewing the comment. To solve: Submit a malicious comment that triggers script execution when the post is viewed.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Social Media Platform Stored XSS in Comment Field\", \"Lab Description\": \"User-submitted comments are stored and displayed beneath each post using innerHTML. No output sanitization is performed. This allows stored JavaScript payloads to execute for all users viewing the comment. To solve: Submit a malicious comment that triggers script execution when the post is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: E-Commerce Dashboard DOM XSS via Username in Dashboard Widget\nDescription: The admin dashboard displays the logged-in user's name using `innerHTML` to personalize a widget. The name is set via a cookie and injected into the DOM without sanitization. To solve: Set a malicious cookie value that leads to code execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-Commerce Dashboard DOM XSS via Username in Dashboard Widget\", \"Lab Description\": \"The admin dashboard displays the logged-in user's name using `innerHTML` to personalize a widget. The name is set via a cookie and injected into the DOM without sanitization. To solve: Set a malicious cookie value that leads to code execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Helpdesk Application Reflected XSS in Ticket Filter Parameter\nDescription: The helpdesk UI includes a search filter using the `status` query parameter. This value is reflected directly inside a JavaScript variable using quotes. The reflection is not escaped, allowing arbitrary JS execution. To solve: Craft a payload that breaks out of the quoted string.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Helpdesk Application Reflected XSS in Ticket Filter Parameter\", \"Lab Description\": \"The helpdesk UI includes a search filter using the `status` query parameter. This value is reflected directly inside a JavaScript variable using quotes. The reflection is not escaped, allowing arbitrary JS execution. To solve: Craft a payload that breaks out of the quoted string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Learning System Stored XSS in Feedback Field\nDescription: The course feedback form stores submitted content in memory and displays it using `innerHTML` in the review section. No sanitization or escaping is applied. To solve: Submit a malicious script in the feedback field that executes upon rendering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Learning System Stored XSS in Feedback Field\", \"Lab Description\": \"The course feedback form stores submitted content in memory and displays it using `innerHTML` in the review section. No sanitization or escaping is applied. To solve: Submit a malicious script in the feedback field that executes upon rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Event Management Portal Reflected XSS in Search Field\nDescription: The event search functionality uses a `query` parameter that is reflected inside a script block using double quotes. No input sanitization is applied before rendering, creating a JavaScript injection point. To solve: Inject a payload that breaks out of the quoted string and triggers script execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Event Management Portal Reflected XSS in Search Field\", \"Lab Description\": \"The event search functionality uses a `query` parameter that is reflected inside a script block using double quotes. No input sanitization is applied before rendering, creating a JavaScript injection point. To solve: Inject a payload that breaks out of the quoted string and triggers script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Travel Booking Site Stored XSS in Destination Review\nDescription: User-submitted reviews for destinations are stored and rendered using `innerHTML` without any sanitization. This allows persistent JavaScript code to execute for other users viewing the destination. To solve: Submit a review that contains executable JavaScript.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Travel Booking Site Stored XSS in Destination Review\", \"Lab Description\": \"User-submitted reviews for destinations are stored and rendered using `innerHTML` without any sanitization. This allows persistent JavaScript code to execute for other users viewing the destination. To solve: Submit a review that contains executable JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Internal Admin Tool DOM XSS via URL Fragment Injection\nDescription: The admin dashboard reads the hash value from `location.hash` and injects it into the DOM using `innerHTML`. The application does not sanitize or validate the hash value, making it exploitable through fragment-based DOM XSS. To solve: Craft a malicious hash payload that executes arbitrary JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Internal Admin Tool DOM XSS via URL Fragment Injection\", \"Lab Description\": \"The admin dashboard reads the hash value from `location.hash` and injects it into the DOM using `innerHTML`. The application does not sanitize or validate the hash value, making it exploitable through fragment-based DOM XSS. To solve: Craft a malicious hash payload that executes arbitrary JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Community Forum Reflected XSS in Tag Parameter\nDescription: The forum's post listing page reflects the `tag` query parameter inside an inline `<script>` tag. The value is embedded inside a template literal and used to highlight matching posts. Lack of escaping allows JavaScript injection. To solve: Inject a payload that executes JavaScript in this context.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Community Forum Reflected XSS in Tag Parameter\", \"Lab Description\": \"The forum's post listing page reflects the `tag` query parameter inside an inline `<script>` tag. The value is embedded inside a template literal and used to highlight matching posts. Lack of escaping allows JavaScript injection. To solve: Inject a payload that executes JavaScript in this context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Survey Application Stored XSS in Name Field\nDescription: Survey submissions store user names which are later displayed in a leaderboard using `innerHTML`. Since user input is stored and not sanitized, this leads to stored XSS for any viewer of the leaderboard. To solve: Submit a payload as the name that runs JavaScript upon viewing.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Survey Application Stored XSS in Name Field\", \"Lab Description\": \"Survey submissions store user names which are later displayed in a leaderboard using `innerHTML`. Since user input is stored and not sanitized, this leads to stored XSS for any viewer of the leaderboard. To solve: Submit a payload as the name that runs JavaScript upon viewing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Shop Reflected XSS in Discount Code Field\nDescription: The discount code entered in the checkout page is reflected into an inline script using double quotes. No sanitization is applied, allowing attackers to inject JavaScript directly into the script context. To solve: Inject a payload that escapes the quote and executes a script.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Shop Reflected XSS in Discount Code Field\", \"Lab Description\": \"The discount code entered in the checkout page is reflected into an inline script using double quotes. No sanitization is applied, allowing attackers to inject JavaScript directly into the script context. To solve: Inject a payload that escapes the quote and executes a script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Issue Tracker Stored XSS in Comment Field\nDescription: The issue tracking system allows users to post comments. These comments are displayed using `innerHTML` without escaping, leading to stored XSS. To solve: Submit a comment with an XSS payload and visit the issue page to trigger it.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Issue Tracker Stored XSS in Comment Field\", \"Lab Description\": \"The issue tracking system allows users to post comments. These comments are displayed using `innerHTML` without escaping, leading to stored XSS. To solve: Submit a comment with an XSS payload and visit the issue page to trigger it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Fitness App Reflected XSS in Progress Tracker Filter\nDescription: The `filter` parameter is used in the client-side chart script. It is inserted unescaped inside a JavaScript variable. The application lacks validation or escaping, making it vulnerable to reflected XSS. To solve: Inject a payload that escapes the JS context and executes code.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Fitness App Reflected XSS in Progress Tracker Filter\", \"Lab Description\": \"The `filter` parameter is used in the client-side chart script. It is inserted unescaped inside a JavaScript variable. The application lacks validation or escaping, making it vulnerable to reflected XSS. To solve: Inject a payload that escapes the JS context and executes code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Restaurant Review Portal Stored XSS in Feedback Message\nDescription: Users can leave feedback messages that are rendered on the homepage using `innerHTML`. The feedback is saved and shown to all visitors without sanitization. To solve: Submit a feedback message containing a script payload to trigger stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Restaurant Review Portal Stored XSS in Feedback Message\", \"Lab Description\": \"Users can leave feedback messages that are rendered on the homepage using `innerHTML`. The feedback is saved and shown to all visitors without sanitization. To solve: Submit a feedback message containing a script payload to trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Learning Platform Reflected XSS in Course Title Preview\nDescription: The preview page reflects the `title` parameter directly into a JavaScript variable in an inline script tag. This parameter is not encoded or escaped, creating a JS context injection vulnerability. To solve: Inject a payload that breaks out of the string and executes JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Learning Platform Reflected XSS in Course Title Preview\", \"Lab Description\": \"The preview page reflects the `title` parameter directly into a JavaScript variable in an inline script tag. This parameter is not encoded or escaped, creating a JS context injection vulnerability. To solve: Inject a payload that breaks out of the string and executes JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly GC XSS in Blockchain Smart Contract Debugger\nDescription: Solidity IDE visualizes contract memory with WebAssembly GC type mismatches. The application renders garbage-collected heap data via innerHTML without validation. To solve: Corrupt GC references to inject HTML through malformed type arrays.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly GC XSS in Blockchain Smart Contract Debugger\", \"Lab Description\": \"Solidity IDE visualizes contract memory with WebAssembly GC type mismatches. The application renders garbage-collected heap data via innerHTML without validation. To solve: Corrupt GC references to inject HTML through malformed type arrays.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/3 Extended CONNECT XSS in IoT Over-the-Air Updates\nDescription: Smart device manager uses HTTP/3 Extended CONNECT for firmware patches with reflection in admin UI. The application processes CONNECT-UDP handshakes via unescaped console.log(). To solve: Inject XSS through crafted :protocol pseudo-headers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 Extended CONNECT XSS in IoT Over-the-Air Updates\", \"Lab Description\": \"Smart device manager uses HTTP/3 Extended CONNECT for firmware patches with reflection in admin UI. The application processes CONNECT-UDP handshakes via unescaped console.log(). To solve: Inject XSS through crafted :protocol pseudo-headers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS Math Function XSS in Financial Forecasting Dashboard\nDescription: Stock prediction tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Math Function XSS in Financial Forecasting Dashboard\", \"Lab Description\": \"Stock prediction tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebNFC Tag Spoofing XSS in Retail Inventory System\nDescription: Smart shelf system scans NFC tags with vulnerable NDEF record processing. The application renders product URLs via innerHTML without sanitization. To solve: Spoof NFC tags with javascript: payloads in NDEF Text records.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebNFC Tag Spoofing XSS in Retail Inventory System\", \"Lab Description\": \"Smart shelf system scans NFC tags with vulnerable NDEF record processing. The application renders product URLs via innerHTML without sanitization. To solve: Spoof NFC tags with javascript: payloads in NDEF Text records.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SVG Animation Timeline XSS in Video Editing Suite\nDescription: Non-linear editor implements SVG animations with unsafe begin/end attribute handling. The application uses document.timeline with user-controlled time values. To Solve: Trigger XSS through crafted beginElement() calls.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Animation Timeline XSS in Video Editing Suite\", \"Lab Description\": \"Non-linear editor implements SVG animations with unsafe begin/end attribute handling. The application uses document.timeline with user-controlled time values. To Solve: Trigger XSS through crafted beginElement() calls.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGPU Shader Storage Buffer XSS in Scientific Visualization\nDescription: Molecular visualization tool maps GPU storage buffers to DOM elements without validation. The application uses @compute shaders to process user-uploaded datasets. To solve: Corrupt buffer data to inject HTML payloads via shared memory mapping.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Shader Storage Buffer XSS in Scientific Visualization\", \"Lab Description\": \"Molecular visualization tool maps GPU storage buffers to DOM elements without validation. The application uses @compute shaders to process user-uploaded datasets. To solve: Corrupt buffer data to inject HTML payloads via shared memory mapping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/3 DATAGRAM Frame XSS in Real-Time Sports Analytics\nDescription: Player tracking system processes QUIC DATAGRAM frames with unsafe buffer concatenation. The application uses TextDecoderStream without validation for play-by-play updates. To solve: Inject fragmented XSS payloads through connection migration abuse.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 DATAGRAM Frame XSS in Real-Time Sports Analytics\", \"Lab Description\": \"Player tracking system processes QUIC DATAGRAM frames with unsafe buffer concatenation. The application uses TextDecoderStream without validation for play-by-play updates. To solve: Inject fragmented XSS payloads through connection migration abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS Math Function XSS in Financial Risk Calculator\nDescription: Quantitative analysis tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Math Function XSS in Financial Risk Calculator\", \"Lab Description\": \"Quantitative analysis tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebCodecs Video Frame XSS in Surveillance System\nDescription: Security camera interface processes H.265 streams with unsafe debug overlay rendering. The application injects timestamp metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted Supplemental Enhancement Information (SEI) messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs Video Frame XSS in Surveillance System\", \"Lab Description\": \"Security camera interface processes H.265 streams with unsafe debug overlay rendering. The application injects timestamp metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted Supplemental Enhancement Information (SEI) messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA 2.0 Live Region XSS in Social Feed\nDescription: Accessibility-first social platform implements ARIA 2.0 live regions with dangerous aria-braille* attribute handling. The application renders notifications via innerHTML without sanitization. To solve: Abuse aria-braillelabel to bypass content security policies.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA 2.0 Live Region XSS in Social Feed\", \"Lab Description\": \"Accessibility-first social platform implements ARIA 2.0 live regions with dangerous aria-braille* attribute handling. The application renders notifications via innerHTML without sanitization. To solve: Abuse aria-braillelabel to bypass content security policies.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in Banking Portal PDF Generator\nDescription: The banking portal generates transaction PDFs using untrusted input in client-side HTML-to-PDF conversion. The application directly inserts user-controlled transaction notes into PDF HTML templates without sanitization. To solve: Execute arbitrary JavaScript when users view generated PDFs in vulnerable browsers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Banking Portal PDF Generator\", \"Lab Description\": \"The banking portal generates transaction PDFs using untrusted input in client-side HTML-to-PDF conversion. The application directly inserts user-controlled transaction notes into PDF HTML templates without sanitization. To solve: Execute arbitrary JavaScript when users view generated PDFs in vulnerable browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IoT Device Naming Convention\nDescription: Smart home dashboard displays device names without output encoding. The application stores user-supplied device names in MongoDB and renders them using innerHTML. To solve: Persistently execute JavaScript when administrators view device management console.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IoT Device Naming Convention\", \"Lab Description\": \"Smart home dashboard displays device names without output encoding. The application stores user-supplied device names in MongoDB and renders them using innerHTML. To solve: Persistently execute JavaScript when administrators view device management console.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Mutation XSS in CMS SVG File Processing\nDescription: Blog platform allows SVG uploads that are rendered as images. The application fails to sanitize event handlers in SVG foreignObject tags. To solve: Achieve XSS through browser parser inconsistency when rendering malicious SVG.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in CMS SVG File Processing\", \"Lab Description\": \"Blog platform allows SVG uploads that are rendered as images. The application fails to sanitize event handlers in SVG foreignObject tags. To solve: Achieve XSS through browser parser inconsistency when rendering malicious SVG.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS via WebSocket Message Handling\nDescription: Real-time chat application processes WebSocket messages with unsafe DOM manipulation. The application directly appends user-controlled message content using innerHTML. To solve: Trigger XSS through crafted WebSocket messages.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via WebSocket Message Handling\", \"Lab Description\": \"Real-time chat application processes WebSocket messages with unsafe DOM manipulation. The application directly appends user-controlled message content using innerHTML. To solve: Trigger XSS through crafted WebSocket messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in API Gateway Error Logging\nDescription: Microservice API gateway logs User-Agent headers verbatim in admin panel. The application uses unsecured ELK stack for log visualization. To solve: Achieve delayed XSS execution in Kibana interface.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in API Gateway Error Logging\", \"Lab Description\": \"Microservice API gateway logs User-Agent headers verbatim in admin panel. The application uses unsecured ELK stack for log visualization. To solve: Achieve delayed XSS execution in Kibana interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in E-Commerce Search Parameter Wrapping\nDescription: Online marketplace search feature wraps user input in <h1> tags without encoding. The application uses Express.js with vulnerable res.send() for AJAX responses. To solve: Execute alert() using angle bracket injection despite server-side replacement filters.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in E-Commerce Search Parameter Wrapping\", \"Lab Description\": \"Online marketplace search feature wraps user input in <h1> tags without encoding. The application uses Express.js with vulnerable res.send() for AJAX responses. To solve: Execute alert() using angle bracket injection despite server-side replacement filters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS via Healthcare Portal URL Fragment\nDescription: Patient records system processes URL fragments in client-side routing. The application uses decodeURIComponent() instead of decodeURI() for fragment parsing. To solve: Achieve XSS through double-encoded hash payloads in SPA routing.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via Healthcare Portal URL Fragment\", \"Lab Description\": \"Patient records system processes URL fragments in client-side routing. The application uses decodeURIComponent() instead of decodeURI() for fragment parsing. To solve: Achieve XSS through double-encoded hash payloads in SPA routing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS via Social Media Profile JSON-LD Injection\nDescription: Platform allows custom profile schemas that render in <script type='application/ld+json'>. The application uses JSON.stringify() without escaping. To solve: Break JSON context and execute script via Unicode escapes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS via Social Media Profile JSON-LD Injection\", \"Lab Description\": \"Platform allows custom profile schemas that render in <script type='application/ld+json'>. The application uses JSON.stringify() without escaping. To solve: Break JSON context and execute script via Unicode escapes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Hotel Booking Calendar Widget\nDescription: Date picker component re-encodes HTML entities during DOM cloning. The application uses jQuery's .clone() with broken sanitization. To solve: Achieve XSS through parser differential between clone and innerHTML operations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Hotel Booking Calendar Widget\", \"Lab Description\": \"Date picker component re-encodes HTML entities during DOM cloning. The application uses jQuery's .clone() with broken sanitization. To solve: Achieve XSS through parser differential between clone and innerHTML operations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Blind XSS in Fitness Tracker CSV Export\nDescription: Workout logging system embeds user input in CSV files using Excel-style formula injection. The application uses res.csv() without proper escaping. To solve: Achieve XSS when admin opens exported file in vulnerable spreadsheet software.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Fitness Tracker CSV Export\", \"Lab Description\": \"Workout logging system embeds user input in CSV files using Excel-style formula injection. The application uses res.csv() without proper escaping. To solve: Achieve XSS when admin opens exported file in vulnerable spreadsheet software.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: XSS via WebAssembly Module Injection in Video Processing App\nDescription: Video editing platform dynamically loads WebAssembly modules from user-uploaded files. The application fails to validate imported WASM memory operations. To solve: Achieve arbitrary JavaScript execution through malicious memory pointer manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"XSS via WebAssembly Module Injection in Video Processing App\", \"Lab Description\": \"Video editing platform dynamically loads WebAssembly modules from user-uploaded files. The application fails to validate imported WASM memory operations. To solve: Achieve arbitrary JavaScript execution through malicious memory pointer manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Shadow DOM XSS Escape in Project Management Dashboard\nDescription: Task management system uses closed shadow roots for card descriptions. The application implements broken sanitization through DOMPurify before shadow DOM injection. To solve: Break shadow boundary containment through prototype pollution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Shadow DOM XSS Escape in Project Management Dashboard\", \"Lab Description\": \"Task management system uses closed shadow roots for card descriptions. The application implements broken sanitization through DOMPurify before shadow DOM injection. To solve: Break shadow boundary containment through prototype pollution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Service Worker Persistent XSS in Progressive Web App\nDescription: News aggregator PWA registers service workers from unvalidated user-controlled URLs. The application implements insecure 'serviceworker-allowed' header configuration. To solve: Establish permanent XSS through cached response manipulation.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Service Worker Persistent XSS in Progressive Web App\", \"Lab Description\": \"News aggregator PWA registers service workers from unvalidated user-controlled URLs. The application implements insecure 'serviceworker-allowed' header configuration. To solve: Establish permanent XSS through cached response manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebRTC Data Channel XSS in Telemedicine Platform\nDescription: Video conferencing system transmits SDP offers through unescaped DOM updates. The application uses simple-peer with vulnerable SDP parser. To solve: Inject JavaScript through crafted ICE candidate messages.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebRTC Data Channel XSS in Telemedicine Platform\", \"Lab Description\": \"Video conferencing system transmits SDP offers through unescaped DOM updates. The application uses simple-peer with vulnerable SDP parser. To solve: Inject JavaScript through crafted ICE candidate messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: PWA Cache Poisoning XSS via Finance Dashboard\nDescription: Stock trading PWA caches API responses with vulnerable Cache-Control headers. The application uses stale-while-revalidate strategy without validation. To solve: Poison cache to serve malicious JavaScript from /api/prices endpoint.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"PWA Cache Poisoning XSS via Finance Dashboard\", \"Lab Description\": \"Stock trading PWA caches API responses with vulnerable Cache-Control headers. The application uses stale-while-revalidate strategy without validation. To solve: Poison cache to serve malicious JavaScript from /api/prices endpoint.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebGL Shader Injection XSS in AR Platform\nDescription: Augmented reality viewer processes 3D model vertex shaders from user uploads. The application converts GLSL code to JS through unsafe eval() optimization. To solve: Achieve JS execution via GLSL preprocessor directives and shader linking.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGL Shader Injection XSS in AR Platform\", \"Lab Description\": \"Augmented reality viewer processes 3D model vertex shaders from user uploads. The application converts GLSL code to JS through unsafe eval() optimization. To solve: Achieve JS execution via GLSL preprocessor directives and shader linking.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebSocket Bidirectional XSS in Multiplayer Game Lobby\nDescription: Browser-based game uses raw WebSocket.send() for chat and game state. The application mirrors messages between players with vulnerable JSON.parse(JSON.stringify()) pattern. To solve: Achieve XSS through prototype pollution in circular reference handling.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebSocket Bidirectional XSS in Multiplayer Game Lobby\", \"Lab Description\": \"Browser-based game uses raw WebSocket.send() for chat and game state. The application mirrors messages between players with vulnerable JSON.parse(JSON.stringify()) pattern. To solve: Achieve XSS through prototype pollution in circular reference handling.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAuthn Authenticator Tampering in SSO Dashboard\nDescription: Single sign-on system parses WebAuthn authenticatorData without CBOR validation. The application reflects credential ID in admin panel via innerText. To solve: Inject HTML through crafted attestationObject extensions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn Authenticator Tampering in SSO Dashboard\", \"Lab Description\": \"Single sign-on system parses WebAuthn authenticatorData without CBOR validation. The application reflects credential ID in admin panel via innerText. To solve: Inject HTML through crafted attestationObject extensions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IndexedDB Schema Pollution in Analytics Dashboard\nDescription: User analytics platform creates dynamic object stores using URL parameters. The application uses eval() to generate IndexedDB indexes. To solve: Achieve XSS through NoSQL key injection and query engine reflection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IndexedDB Schema Pollution in Analytics Dashboard\", \"Lab Description\": \"User analytics platform creates dynamic object stores using URL parameters. The application uses eval() to generate IndexedDB indexes. To solve: Achieve XSS through NoSQL key injection and query engine reflection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Web Bundle XSS in Document Collaboration Tool\nDescription: Shared document viewer parses .wbn files with vulnerable integrity checks. The application uses incorrect Content-Type for nested resources. To solve: Achieve XSS through malicious resource embedding in signed bundle.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Web Bundle XSS in Document Collaboration Tool\", \"Lab Description\": \"Shared document viewer parses .wbn files with vulnerable integrity checks. The application uses incorrect Content-Type for nested resources. To solve: Achieve XSS through malicious resource embedding in signed bundle.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebTransport Protocol Hijacking in Virtual Classroom\nDescription: Educational platform uses WebTransport for real-time document sync with unvalidated stream processing. The application converts binary streams to text via vulnerable TextDecoder. To solve: Achieve XSS through bidirectional stream poisoning.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Protocol Hijacking in Virtual Classroom\", \"Lab Description\": \"Educational platform uses WebTransport for real-time document sync with unvalidated stream processing. The application converts binary streams to text via vulnerable TextDecoder. To solve: Achieve XSS through bidirectional stream poisoning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SharedArrayBuffer Timing XSS in Cryptocurrency Wallet\nDescription: Digital wallet uses SharedArrayBuffer for transaction signing with side-channel leaks. The application reflects timing differences in UI updates. To solve: Exfiltrate private key via precision timing attacks and DOM injection.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SharedArrayBuffer Timing XSS in Cryptocurrency Wallet\", \"Lab Description\": \"Digital wallet uses SharedArrayBuffer for transaction signing with side-channel leaks. The application reflects timing differences in UI updates. To solve: Exfiltrate private key via precision timing attacks and DOM injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Injection in Micro-Frontend Architecture\nDescription: Enterprise dashboard uses dynamic import maps for module loading. The application constructs import map JSON from URL parameters without validation. To solve: Hijack module resolution to load malicious ES6 modules.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Injection in Micro-Frontend Architecture\", \"Lab Description\": \"Enterprise dashboard uses dynamic import maps for module loading. The application constructs import map JSON from URL parameters without validation. To solve: Hijack module resolution to load malicious ES6 modules.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Trusted Types Bypass via iframe Policy Inheritance in CMS\nDescription: Content management system implements Trusted Types but allows policy inheritance in iframes. The application uses document.write() in nested browsing contexts. To solve: Escape iframe sandbox through prototype pollution of default policy.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Trusted Types Bypass via iframe Policy Inheritance in CMS\", \"Lab Description\": \"Content management system implements Trusted Types but allows policy inheritance in iframes. The application uses document.write() in nested browsing contexts. To solve: Escape iframe sandbox through prototype pollution of default policy.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WASI Filesystem Polyglot XSS in Document Converter\nDescription: Cloud file converter executes WASI modules for format transformations. The application maps virtual filesystems without path validation. To solve: Write malicious JS to DOM through filesystem-to-UI bridge.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WASI Filesystem Polyglot XSS in Document Converter\", \"Lab Description\": \"Cloud file converter executes WASI modules for format transformations. The application maps virtual filesystems without path validation. To solve: Write malicious JS to DOM through filesystem-to-UI bridge.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in Healthcare Portal URL Fragment Processing\nDescription: Patient records system dynamically loads content from URL fragments using vulnerable decodeURIComponent() parsing. The application renders lab results without output encoding. To solve: Execute alert(document.domain) through double-encoded hash payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Healthcare Portal URL Fragment Processing\", \"Lab Description\": \"Patient records system dynamically loads content from URL fragments using vulnerable decodeURIComponent() parsing. The application renders lab results without output encoding. To solve: Execute alert(document.domain) through double-encoded hash payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in E-Commerce Product Reviews via AngularJS Sandbox Escape\nDescription: Product review system uses AngularJS 1.8 with unsafe $sce configuration. The application sanitizes input but allows certain HTML elements. To solve: Achieve persistent XSS using prototype pollution in review comments.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in E-Commerce Product Reviews via AngularJS Sandbox Escape\", \"Lab Description\": \"Product review system uses AngularJS 1.8 with unsafe $sce configuration. The application sanitizes input but allows certain HTML elements. To solve: Achieve persistent XSS using prototype pollution in review comments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Social Media SVG Avatar Upload\nDescription: Profile picture uploader accepts SVG files but fails to sanitize foreignObject tags. The application uses DOMPurify 2.4.0 with unsafe configuration. To solve: Achieve XSS through namespace confusion in SVG/HTML5 parser.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Social Media SVG Avatar Upload\", \"Lab Description\": \"Profile picture uploader accepts SVG files but fails to sanitize foreignObject tags. The application uses DOMPurify 2.4.0 with unsafe configuration. To solve: Achieve XSS through namespace confusion in SVG/HTML5 parser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in Customer Support Chat WebSocket Messages\nDescription: Live chat application stores WebSocket messages in admin panel with 12-hour delay. The application uses raw WebSocket.send() without output encoding. To solve: Trigger alert() when support agent views chat history.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Customer Support Chat WebSocket Messages\", \"Lab Description\": \"Live chat application stores WebSocket messages in admin panel with 12-hour delay. The application uses raw WebSocket.send() without output encoding. To solve: Trigger alert() when support agent views chat history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in Travel Booking API JSONP Endpoint\nDescription: Flight search API implements JSONP callback without validation. The application reflects callback parameter in Content-Type header. To solve: Achieve XSS through JavaScript MIME type confusion.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Travel Booking API JSONP Endpoint\", \"Lab Description\": \"Flight search API implements JSONP callback without validation. The application reflects callback parameter in Content-Type header. To solve: Achieve XSS through JavaScript MIME type confusion.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM XSS in IoT Dashboard WebSocket Analytics\nDescription: Smart factory dashboard visualizes sensor data via WebSocket messages with unsafe SVG rendering. The application uses unencoded device IDs in dynamically created SVG elements. To solve: Inject JavaScript through malicious sensor metadata.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in IoT Dashboard WebSocket Analytics\", \"Lab Description\": \"Smart factory dashboard visualizes sensor data via WebSocket messages with unsafe SVG rendering. The application uses unencoded device IDs in dynamically created SVG elements. To solve: Inject JavaScript through malicious sensor metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CMS Markdown Renderer via SVG Filter Bypass\nDescription: Blog platform allows Markdown posts containing SVGs that are processed by a vulnerable DOMPurify configuration. The application whitelists 'filter' CSS property in SVG styles. To solve: Achieve persistent XSS through CSS animation payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CMS Markdown Renderer via SVG Filter Bypass\", \"Lab Description\": \"Blog platform allows Markdown posts containing SVGs that are processed by a vulnerable DOMPurify configuration. The application whitelists 'filter' CSS property in SVG styles. To solve: Achieve persistent XSS through CSS animation payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in API Gateway Error Log Visualization\nDescription: Cloud API gateway displays error logs using innerText with vulnerable CSS escape sequences. The application uses Chromium's textContent normalization incorrectly. To solve: Abuse CSS unicode escapes to reconstruct executable code.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in API Gateway Error Log Visualization\", \"Lab Description\": \"Cloud API gateway displays error logs using innerText with vulnerable CSS escape sequences. The application uses Chromium's textContent normalization incorrectly. To solve: Abuse CSS unicode escapes to reconstruct executable code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Blind XSS in Video Conferencing Closed Captioning\nDescription: WebRTC-based meeting platform stores subtitle transcripts in admin panel. The application uses insecure text-to-VTT conversion with null-byte handling flaws. To solve: Achieve delayed XSS through crafted subtitle metadata.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Video Conferencing Closed Captioning\", \"Lab Description\": \"WebRTC-based meeting platform stores subtitle transcripts in admin panel. The application uses insecure text-to-VTT conversion with null-byte handling flaws. To solve: Achieve delayed XSS through crafted subtitle metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in Cryptocurrency Exchange QR Code Generator\nDescription: Wallet address QR generator reflects untrusted input in SVG data URLs. The application uses unencoded user-controlled 'label' parameter in QR code metadata. To solve: Break SVG context through multiline payloads.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Cryptocurrency Exchange QR Code Generator\", \"Lab Description\": \"Wallet address QR generator reflects untrusted input in SVG data URLs. The application uses unencoded user-controlled 'label' parameter in QR code metadata. To solve: Break SVG context through multiline payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in Fitness Tracker URL Parameter Processing\nDescription: Workout analytics dashboard dynamically loads user stats from URL parameters using vulnerable document.write(). The application parses heart rate zones without output encoding. To solve: Execute alert(document.cookie) through malformed query string payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Fitness Tracker URL Parameter Processing\", \"Lab Description\": \"Workout analytics dashboard dynamically loads user stats from URL parameters using vulnerable document.write(). The application parses heart rate zones without output encoding. To solve: Execute alert(document.cookie) through malformed query string payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Project Management Tool Clipboard Events\nDescription: Task collaboration platform insecurely handles paste events in rich text editor. The application uses execCommand() with dangerous 'insertHTML' operations. To solve: Achieve persistent XSS through crafted spreadsheet cell paste operations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Project Management Tool Clipboard Events\", \"Lab Description\": \"Task collaboration platform insecurely handles paste events in rich text editor. The application uses execCommand() with dangerous 'insertHTML' operations. To solve: Achieve persistent XSS through crafted spreadsheet cell paste operations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Social Media Image Metadata Processing\nDescription: Photo sharing platform parses EXIF data from user uploads using vulnerable exifr library. The application renders GPS coordinates in unescaped popup tooltips. To solve: Inject JavaScript through crafted longitude values in JPEG headers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Social Media Image Metadata Processing\", \"Lab Description\": \"Photo sharing platform parses EXIF data from user uploads using vulnerable exifr library. The application renders GPS coordinates in unescaped popup tooltips. To solve: Inject JavaScript through crafted longitude values in JPEG headers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Blind XSS in E-Learning Platform LTI Integration\nDescription: Course management system processes Learning Tools Interoperability (LTI) launches without validating custom parameters. The application logs launch data in admin interface with 24h delay. To solve: Achieve delayed XSS through crafted lis_result_sourcedid parameter.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in E-Learning Platform LTI Integration\", \"Lab Description\": \"Course management system processes Learning Tools Interoperability (LTI) launches without validating custom parameters. The application logs launch data in admin interface with 24h delay. To solve: Achieve delayed XSS through crafted lis_result_sourcedid parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in Retail Analytics CSV Injection\nDescription: Sales dashboard exports filtered results as CSV files with vulnerable Excel-style formula handling. The application reflects search terms in sheet names without encoding. To solve: Achieve XSS through crafted sheet title payloads.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Retail Analytics CSV Injection\", \"Lab Description\": \"Sales dashboard exports filtered results as CSV files with vulnerable Excel-style formula handling. The application reflects search terms in sheet names without encoding. To solve: Achieve XSS through crafted sheet title payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM XSS via WebAssembly Memory Corruption in Cryptocurrency Wallet\nDescription: Blockchain wallet uses WebAssembly for transaction signing with unsafe memory buffer sharing between JS/WASM. The application implements direct memory access via ArrayBuffer without validation. To solve: Achieve arbitrary JS execution through crafted memory pointer manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via WebAssembly Memory Corruption in Cryptocurrency Wallet\", \"Lab Description\": \"Blockchain wallet uses WebAssembly for transaction signing with unsafe memory buffer sharing between JS/WASM. The application implements direct memory access via ArrayBuffer without validation. To solve: Achieve arbitrary JS execution through crafted memory pointer manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in API Gateway JWT Debug Header Processing\nDescription: Microservices API gateway implements verbose error logging with JWT header reflection. The application stores malformed JWTs in admin Kibana dashboard without sanitization. To solve: Achieve persistent XSS through crafted JWT header injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in API Gateway JWT Debug Header Processing\", \"Lab Description\": \"Microservices API gateway implements verbose error logging with JWT header reflection. The application stores malformed JWTs in admin Kibana dashboard without sanitization. To solve: Achieve persistent XSS through crafted JWT header injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Social Media Post Markdown Anchor Validation\nDescription: Platform allows custom anchor tags in Markdown posts with vulnerable href sanitization. The application uses regex bypassable through URL-encoded newline characters. To solve: Achieve persistent XSS via javascript: protocol in disguised URLs.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Social Media Post Markdown Anchor Validation\", \"Lab Description\": \"Platform allows custom anchor tags in Markdown posts with vulnerable href sanitization. The application uses regex bypassable through URL-encoded newline characters. To solve: Achieve persistent XSS via javascript: protocol in disguised URLs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Web Bundle Document Viewer via Content-Type Confusion\nDescription: Document collaboration tool parses .wbn bundles with improper MIME type validation. The application treats text/markdown resources as text/html when previewing. To solve: Achieve XSS through crafted resource type mismatches.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Web Bundle Document Viewer via Content-Type Confusion\", \"Lab Description\": \"Document collaboration tool parses .wbn bundles with improper MIME type validation. The application treats text/markdown resources as text/html when previewing. To solve: Achieve XSS through crafted resource type mismatches.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS via Trusted Types Bypass in iframe Policy Inheritance\nDescription: CMS implements Trusted Types but allows policy inheritance in sandboxed iframes. The application uses document.write() with lax default policies. To solve: Escape iframe sandbox through prototype pollution of trustedTypes.defaultPolicy.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via Trusted Types Bypass in iframe Policy Inheritance\", \"Lab Description\": \"CMS implements Trusted Types but allows policy inheritance in sandboxed iframes. The application uses document.write() with lax default policies. To solve: Escape iframe sandbox through prototype pollution of trustedTypes.defaultPolicy.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebTransport Session Hijacking in Telehealth Platform\nDescription: Real-time patient monitoring uses WebTransport for biometric streaming with insecure session handling. The application reflects session IDs in error messages without encoding. To solve: Achieve XSS through bidirectional stream poisoning with malformed datagrams.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Session Hijacking in Telehealth Platform\", \"Lab Description\": \"Real-time patient monitoring uses WebTransport for biometric streaming with insecure session handling. The application reflects session IDs in error messages without encoding. To solve: Achieve XSS through bidirectional stream poisoning with malformed datagrams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Injection in Stock Trading Dashboard\nDescription: Financial dashboard dynamically loads modules using user-controlled import maps. The application constructs JSON without proper escaping. To solve: Hijack module resolution to load malicious ESM from attacker-controlled domain.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Injection in Stock Trading Dashboard\", \"Lab Description\": \"Financial dashboard dynamically loads modules using user-controlled import maps. The application constructs JSON without proper escaping. To solve: Hijack module resolution to load malicious ESM from attacker-controlled domain.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGL Shader XSS in 3D Design Tool\nDescription: CAD software processes vertex shaders from untrusted sources with debug logging. The application converts GLSL errors to HTML without sanitization. To solve: Inject JavaScript through crafted preprocessor directives.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGL Shader XSS in 3D Design Tool\", \"Lab Description\": \"CAD software processes vertex shaders from untrusted sources with debug logging. The application converts GLSL errors to HTML without sanitization. To solve: Inject JavaScript through crafted preprocessor directives.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Service Worker Cache Poisoning XSS in PWA News Reader\nDescription: Progressive Web App caches API responses with stale-while-revalidate strategy. The application uses Cache API without request validation. To solve: Poison cache to serve malicious JavaScript from /api/feed endpoint.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Service Worker Cache Poisoning XSS in PWA News Reader\", \"Lab Description\": \"Progressive Web App caches API responses with stale-while-revalidate strategy. The application uses Cache API without request validation. To solve: Poison cache to serve malicious JavaScript from /api/feed endpoint.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSSOM Mutation XSS in Analytics Dashboard\nDescription: Business intelligence tool processes CSS variables from URL parameters with vulnerable CSS.supports() check. The application uses innerHTML with style tag reflection. To Solve: Achieve XSS through CSS @import rule parser differentials.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSSOM Mutation XSS in Analytics Dashboard\", \"Lab Description\": \"Business intelligence tool processes CSS variables from URL parameters with vulnerable CSS.supports() check. The application uses innerHTML with style tag reflection. To Solve: Achieve XSS through CSS @import rule parser differentials.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in AI Chatbot WebSocket Stream Processing\nDescription: LLM-powered chatbot reflects user input in streaming WebSocket responses without output encoding. The application uses innerHTML to append messages to a vulnerable chat container. To solve: Inject SVG payload that triggers alert() when response streams.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in AI Chatbot WebSocket Stream Processing\", \"Lab Description\": \"LLM-powered chatbot reflects user input in streaming WebSocket responses without output encoding. The application uses innerHTML to append messages to a vulnerable chat container. To solve: Inject SVG payload that triggers alert() when response streams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in GraphQL API Batch Operation Endpoint\nDescription: Social media platform processes batch mutations through vulnerable GraphQL introspection. The application stores user bios with unsafe JSON.stringify() sanitization. To solve: Achieve persistent XSS via Unicode escape sequences in bio field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in GraphQL API Batch Operation Endpoint\", \"Lab Description\": \"Social media platform processes batch mutations through vulnerable GraphQL introspection. The application stores user bios with unsafe JSON.stringify() sanitization. To solve: Achieve persistent XSS via Unicode escape sequences in bio field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Server-Sent Events (SSE) Dashboard\nDescription: Real-time monitoring tool displays SSE messages using textContent with vulnerable CSS unescape patterns. The application implements broken HTML entity encoding for status updates. To solve: Achieve XSS through CSS variable injection in streaming data.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Server-Sent Events (SSE) Dashboard\", \"Lab Description\": \"Real-time monitoring tool displays SSE messages using textContent with vulnerable CSS unescape patterns. The application implements broken HTML entity encoding for status updates. To solve: Achieve XSS through CSS variable injection in streaming data.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in JWT Refresh Token Storage\nDescription: Authentication service stores refresh tokens in admin Redis console with vulnerable HTML rendering. The application logs raw token metadata in Laravel Telescope. To solve: Achieve delayed XSS through crafted JWT header injection.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in JWT Refresh Token Storage\", \"Lab Description\": \"Authentication service stores refresh tokens in admin Redis console with vulnerable HTML rendering. The application logs raw token metadata in Laravel Telescope. To solve: Achieve delayed XSS through crafted JWT header injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in WebAssembly Module Validation Errors\nDescription: Smart contract compiler displays WASM validation errors using vulnerable console.html component. The application parses error messages with decodeURIComponent() instead of textContent. To solve: Execute alert() through malformed module exports.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in WebAssembly Module Validation Errors\", \"Lab Description\": \"Smart contract compiler displays WASM validation errors using vulnerable console.html component. The application parses error messages with decodeURIComponent() instead of textContent. To solve: Execute alert() through malformed module exports.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAuthn Authenticator Tampering in SSO Dashboard\nDescription: Enterprise SSO system parses WebAuthn authenticatorData without proper CBOR validation. The application reflects credential IDs in admin panel via innerHTML. To solve: Inject HTML through malicious attestationObject extensions using FIDO2 emulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn Authenticator Tampering in SSO Dashboard\", \"Lab Description\": \"Enterprise SSO system parses WebAuthn authenticatorData without proper CBOR validation. The application reflects credential IDs in admin panel via innerHTML. To solve: Inject HTML through malicious attestationObject extensions using FIDO2 emulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Injection in Micro-Frontend Asset Server\nDescription: Cloud-native platform generates dynamic import maps from URL parameters. The application uses JSON.parse() without validation on user-controlled input. To solve: Hijack module resolution to load malicious ES modules from attacker domain.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Injection in Micro-Frontend Asset Server\", \"Lab Description\": \"Cloud-native platform generates dynamic import maps from URL parameters. The application uses JSON.parse() without validation on user-controlled input. To solve: Hijack module resolution to load malicious ES modules from attacker domain.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Protocol Hijacking in Real-Time Betting App\nDescription: Sports betting platform uses WebTransport for odds streaming with unsafe datagram processing. The application reflects user IDs in error messages without encoding. To solve: Inject SVG payloads through malformed bidirectional streams.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Protocol Hijacking in Real-Time Betting App\", \"Lab Description\": \"Sports betting platform uses WebTransport for odds streaming with unsafe datagram processing. The application reflects user IDs in error messages without encoding. To solve: Inject SVG payloads through malformed bidirectional streams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS @layer XSS in Design System Theme Editor\nDescription: UI theme builder processes @layer rules with vulnerable CSSOM manipulation. The application uses insertRule() with raw user input. To solve: Break style context through crafted layer ordering and JS injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS @layer XSS in Design System Theme Editor\", \"Lab Description\": \"UI theme builder processes @layer rules with vulnerable CSSOM manipulation. The application uses insertRule() with raw user input. To solve: Break style context through crafted layer ordering and JS injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Electron IPC XSS in Desktop Analytics Dashboard\nDescription: Cross-platform analytics app exposes IPC channels without context isolation. The application uses ipcRenderer.on() with dangerous innerHTML assignments. To solve: Achieve RCE through XSS-to-IPC bridge exploitation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Electron IPC XSS in Desktop Analytics Dashboard\", \"Lab Description\": \"Cross-platform analytics app exposes IPC channels without context isolation. The application uses ipcRenderer.on() with dangerous innerHTML assignments. To solve: Achieve RCE through XSS-to-IPC bridge exploitation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly Memory Mirroring XSS in Financial Trading Platform\nDescription: Stock trading interface mirrors WebAssembly memory to JavaScript ArrayBuffer without validation. The application displays trading errors using innerHTML with raw WASM memory dumps. To solve: Corrupt shared memory to inject HTML payloads into error messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Memory Mirroring XSS in Financial Trading Platform\", \"Lab Description\": \"Stock trading interface mirrors WebAssembly memory to JavaScript ArrayBuffer without validation. The application displays trading errors using innerHTML with raw WASM memory dumps. To solve: Corrupt shared memory to inject HTML payloads into error messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Trusted Types Bypass via COOP/COEP in Healthcare Analytics\nDescription: Patient statistics dashboard enforces Trusted Types but uses permissive cross-origin policies. The application allows iframe embedding with relaxed COOP/COEP headers. To solve: Bypass Trusted Types through prototype pollution in cross-origin iframe communication.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Trusted Types Bypass via COOP/COEP in Healthcare Analytics\", \"Lab Description\": \"Patient statistics dashboard enforces Trusted Types but uses permissive cross-origin policies. The application allows iframe embedding with relaxed COOP/COEP headers. To solve: Bypass Trusted Types through prototype pollution in cross-origin iframe communication.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGPU Shader Injection in 3D Design Viewer\nDescription: CAD visualization tool processes WGSL shaders from untrusted sources with debug logging. The application converts shader compilation errors to HTML without sanitization. To solve: Inject JavaScript through crafted shader error messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Shader Injection in 3D Design Viewer\", \"Lab Description\": \"CAD visualization tool processes WGSL shaders from untrusted sources with debug logging. The application converts shader compilation errors to HTML without sanitization. To solve: Inject JavaScript through crafted shader error messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/3 Early Data XSS in E-Commerce Cache\nDescription: Online store implements HTTP/3 with 0-RTT early data support. The application caches responses containing unvalidated early data parameters. To solve: Poison CDN cache through TLS 1.3 early data injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 Early Data XSS in E-Commerce Cache\", \"Lab Description\": \"Online store implements HTTP/3 with 0-RTT early data support. The application caches responses containing unvalidated early data parameters. To solve: Poison CDN cache through TLS 1.3 early data injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Deno Runtime Sandbox Escape via WebSocket Proxy\nDescription: Serverless platform exposes Deno WebSocket proxy with --allow-net permissions. The application uses Deno.writeTextFile() with unsanitized input. To solve: Achieve RCE through XSS-to-filesystem bridge.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Deno Runtime Sandbox Escape via WebSocket Proxy\", \"Lab Description\": \"Serverless platform exposes Deno WebSocket proxy with --allow-net permissions. The application uses Deno.writeTextFile() with unsanitized input. To solve: Achieve RCE through XSS-to-filesystem bridge.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebCodecs Video Frame XSS in Live Streaming Platform\nDescription: Video streaming service processes raw YUV frames using WebCodecs API with vulnerable debug overlays. The application injects user-controlled metadata into <canvas> elements via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs Video Frame XSS in Live Streaming Platform\", \"Lab Description\": \"Video streaming service processes raw YUV frames using WebCodecs API with vulnerable debug overlays. The application injects user-controlled metadata into <canvas> elements via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Private Network Access XSS in Internal Monitoring Tool\nDescription: Corporate network dashboard uses insecure Private Network Access headers with postMessage handlers. The application trusts origin validation for internal IP ranges. To solve: Bypass PNA restrictions through DNS rebinding and inject XSS via cross-origin messages.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Private Network Access XSS in Internal Monitoring Tool\", \"Lab Description\": \"Corporate network dashboard uses insecure Private Network Access headers with postMessage handlers. The application trusts origin validation for internal IP ranges. To solve: Bypass PNA restrictions through DNS rebinding and inject XSS via cross-origin messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Import Attributes Injection in Micro-Frontend Orchestrator\nDescription: Cloud-native platform dynamically constructs module imports using user-controlled attributes. The application passes import assertions without validation. To solve: Hijack module loading via crafted integrity hashes and type assertions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Attributes Injection in Micro-Frontend Orchestrator\", \"Lab Description\": \"Cloud-native platform dynamically constructs module imports using user-controlled attributes. The application passes import assertions without validation. To solve: Hijack module loading via crafted integrity hashes and type assertions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebHID Device Spoofing XSS in Medical IoT Portal\nDescription: Patient monitoring system connects to WebHID devices without proper origin validation. The application renders device names in dashboards using innerText with vulnerable CSS escapes. To solve: Inject XSS through spoofed HID device metadata.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebHID Device Spoofing XSS in Medical IoT Portal\", \"Lab Description\": \"Patient monitoring system connects to WebHID devices without proper origin validation. The application renders device names in dashboards using innerText with vulnerable CSS escapes. To solve: Inject XSS through spoofed HID device metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: ARIA Role XSS in Accessibility Interface\nDescription: Screen reader compatibility layer misinterprets ARIA role attributes as executable code. The application uses role values in click handlers without validation. To solve: Achieve XSS through crafted role=alertdialog payloads.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA Role XSS in Accessibility Interface\", \"Lab Description\": \"Screen reader compatibility layer misinterprets ARIA role attributes as executable code. The application uses role values in click handlers without validation. To solve: Achieve XSS through crafted role=alertdialog payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: WebAssembly Component Model XSS in Decentralized Exchange\nDescription: Blockchain DEX processes WASM components with unsafe interface type reflection. The application renders component exports using innerHTML for debug purposes. To solve: Achieve XSS through maligned string encoding in component model adapters.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Component Model XSS in Decentralized Exchange\", \"Lab Description\": \"Blockchain DEX processes WASM components with unsafe interface type reflection. The application renders component exports using innerHTML for debug purposes. To solve: Achieve XSS through maligned string encoding in component model adapters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/2 Rapid Reset Cache Poisoning XSS in CDN Edge Nodes\nDescription: Global CDN caches H/2 streams with vulnerable rapid reset request handling. The application reflects query parameters in stale cached responses. To solve: Poison edge cache via request cancellation attacks with XSS payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/2 Rapid Reset Cache Poisoning XSS in CDN Edge Nodes\", \"Lab Description\": \"Global CDN caches H/2 streams with vulnerable rapid reset request handling. The application reflects query parameters in stale cached responses. To solve: Poison edge cache via request cancellation attacks with XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebNN Model Poisoning XSS in AI Art Generator\nDescription: Generative AI platform loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without sanitization. To Solve: Inject HTML through crafted model output names.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebNN Model Poisoning XSS in AI Art Generator\", \"Lab Description\": \"Generative AI platform loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without sanitization. To Solve: Inject HTML through crafted model output names.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Storage Access API XSS in Multi-Site Embedded Widget\nDescription: Universal login widget uses storageAccess() with permissive cross-site cookie access. The application renders OAuth states in hidden fields via dangerouslySetInnerHTML. To Solve: Bypass same-site restrictions via nested iframe storage grants.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Storage Access API XSS in Multi-Site Embedded Widget\", \"Lab Description\": \"Universal login widget uses storageAccess() with permissive cross-site cookie access. The application renders OAuth states in hidden fields via dangerouslySetInnerHTML. To Solve: Bypass same-site restrictions via nested iframe storage grants.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SVG Font Injection XSS in Design Platform Icon Editor\nDescription: Vector graphics editor processes SVG fonts with unsafe @font-face rules. The application uses DOMPurify 3.1.0 with whitelisted font loading. To Solve: Achieve XSS through font glyph path command injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Font Injection XSS in Design Platform Icon Editor\", \"Lab Description\": \"Vector graphics editor processes SVG fonts with unsafe @font-face rules. The application uses DOMPurify 3.1.0 with whitelisted font loading. To Solve: Achieve XSS through font glyph path command injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in AI-Powered Chat History Export\nDescription: LLM chatbot platform exports conversation history as HTML files using unsafe document.implementation.createHTMLDocument(). The application inserts user-controlled message IDs into CSS selectors. To solve: Execute alert() through CSS injection in exported files.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in AI-Powered Chat History Export\", \"Lab Description\": \"LLM chatbot platform exports conversation history as HTML files using unsafe document.implementation.createHTMLDocument(). The application inserts user-controlled message IDs into CSS selectors. To solve: Execute alert() through CSS injection in exported files.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in VR Meeting Room Descriptions\nDescription: Metaverse platform stores WebGL room descriptions in IndexedDB without output encoding. The application renders 3D text using Three.js TextGeometry with raw HTML. To solve: Inject WebGL shader code that triggers JS execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in VR Meeting Room Descriptions\", \"Lab Description\": \"Metaverse platform stores WebGL room descriptions in IndexedDB without output encoding. The application renders 3D text using Three.js TextGeometry with raw HTML. To solve: Inject WebGL shader code that triggers JS execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Biometric Auth Error Pages\nDescription: Fingerprint login system displays authentication errors using innerText with vulnerable CSS escape handling. The application implements broken Unicode normalization for error codes. To solve: Abuse CSS counter styles to reconstruct script tags.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Biometric Auth Error Pages\", \"Lab Description\": \"Fingerprint login system displays authentication errors using innerText with vulnerable CSS escape handling. The application implements broken Unicode normalization for error codes. To solve: Abuse CSS counter styles to reconstruct script tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in Drone Telemetry Dashboard\nDescription: UAV control system stores flight logs in Elasticsearch without input sanitization. The application uses Kibana Timelion expressions to visualize data. To solve: Achieve XSS through malicious Timelion sheet formulas.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Drone Telemetry Dashboard\", \"Lab Description\": \"UAV control system stores flight logs in Elasticsearch without input sanitization. The application uses Kibana Timelion expressions to visualize data. To solve: Achieve XSS through malicious Timelion sheet formulas.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in Web3 DAO Proposal Renderer\nDescription: Blockchain governance platform renders proposal markdown using insecure remark-html configuration. The application allows raw HTML in CommonMark with broken sanitization. To solve: Execute alert() through malicious proposal titles.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Web3 DAO Proposal Renderer\", \"Lab Description\": \"Blockchain governance platform renders proposal markdown using insecure remark-html configuration. The application allows raw HTML in CommonMark with broken sanitization. To solve: Execute alert() through malicious proposal titles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: WebGPU Compute Shader XSS in Cryptocurrency Mining Dashboard\nDescription: Mining pool interface processes compute shaders with unsafe buffer sharing between JS/WebGPU. The application maps storage buffers to DOM elements via innerHTML. To solve: Corrupt GPU buffers to inject HTML payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Compute Shader XSS in Cryptocurrency Mining Dashboard\", \"Lab Description\": \"Mining pool interface processes compute shaders with unsafe buffer sharing between JS/WebGPU. The application maps storage buffers to DOM elements via innerHTML. To solve: Corrupt GPU buffers to inject HTML payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebHID Medical Sensor XSS in Telehealth Platform\nDescription: Patient monitoring system connects to WebHID glucose monitors without input validation. The application renders device names in <select> elements via dangerouslySetInnerHTML. To solve: Spoof medical device metadata to inject XSS payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebHID Medical Sensor XSS in Telehealth Platform\", \"Lab Description\": \"Patient monitoring system connects to WebHID glucose monitors without input validation. The application renders device names in <select> elements via dangerouslySetInnerHTML. To solve: Spoof medical device metadata to inject XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: HTTP/3 DATAGRAM XSS in Real-Time Sports Betting\nDescription: Odds streaming service uses QUIC DATAGRAM frames with unsafe buffer concatenation. The application processes early data with vulnerable TextDecoder streams. To solve: Inject XSS through fragmented QUIC payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 DATAGRAM XSS in Real-Time Sports Betting\", \"Lab Description\": \"Odds streaming service uses QUIC DATAGRAM frames with unsafe buffer concatenation. The application processes early data with vulnerable TextDecoder streams. To solve: Inject XSS through fragmented QUIC payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS Anchor Positioning XSS in Legal Document Editor\nDescription: Contract drafting tool implements CSS anchor positioning with unsafe grid-template-area names. The application reflects user input in CSSOM using insertRule(). To solve: Abuse grid area identifiers to break style context.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Anchor Positioning XSS in Legal Document Editor\", \"Lab Description\": \"Contract drafting tool implements CSS anchor positioning with unsafe grid-template-area names. The application reflects user input in CSSOM using insertRule(). To solve: Abuse grid area identifiers to break style context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Bidirectional Stream XSS in AR Navigation\nDescription: Augmented reality navigation system uses WebTransport streams for location updates. The application processes geospatial data with unsafe DOMParser(). To solve: Inject HTML through malformed GeoJSON payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Bidirectional Stream XSS in AR Navigation\", \"Lab Description\": \"Augmented reality navigation system uses WebTransport streams for location updates. The application processes geospatial data with unsafe DOMParser(). To solve: Inject HTML through malformed GeoJSON payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebCodecs Video Frame Injection in Live Streaming Moderation\nDescription: Content moderation tool analyzes video streams using WebCodecs API with unsafe debug overlay rendering. The application injects user-controlled metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs Video Frame Injection in Live Streaming Moderation\", \"Lab Description\": \"Content moderation tool analyzes video streams using WebCodecs API with unsafe debug overlay rendering. The application injects user-controlled metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Private Network Access Bypass in Internal HR System\nDescription: Employee portal uses relaxed PNA headers with postMessage handlers trusting internal IPs. The application renders error messages via dangerouslySetInnerHTML. To solve: Bypass IP validation via DNS rebinding and inject XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Private Network Access Bypass in Internal HR System\", \"Lab Description\": \"Employee portal uses relaxed PNA headers with postMessage handlers trusting internal IPs. The application renders error messages via dangerouslySetInnerHTML. To solve: Bypass IP validation via DNS rebinding and inject XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Import Maps Sandbox Escape in Micro-Frontend Host\nDescription: Cloud platform dynamically constructs import maps from URL parameters with lax Content-Security-Policy. The application uses JSON.parse() on user input without validation. To solve: Hijack module loading via crafted integrity hashes.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Sandbox Escape in Micro-Frontend Host\", \"Lab Description\": \"Cloud platform dynamically constructs import maps from URL parameters with lax Content-Security-Policy. The application uses JSON.parse() on user input without validation. To solve: Hijack module loading via crafted integrity hashes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA Live Region XSS in Social Media Notifications\nDescription: Accessibility-focused platform uses aria-live regions with dangerous dynamic content updates. The application renders notifications via innerHTML without sanitizing screen reader text. To solve: Abuse live region politeness levels to trigger XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA Live Region XSS in Social Media Notifications\", \"Lab Description\": \"Accessibility-focused platform uses aria-live regions with dangerous dynamic content updates. The application renders notifications via innerHTML without sanitizing screen reader text. To solve: Abuse live region politeness levels to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebNN Model Poisoning XSS in AI-Powered Recruiting\nDescription: Job matching service loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without encoding. To solve: Inject HTML through crafted model output names.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebNN Model Poisoning XSS in AI-Powered Recruiting\", \"Lab Description\": \"Job matching service loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without encoding. To solve: Inject HTML through crafted model output names.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly Threads XSS in Multiplayer Game Lobby\nDescription: Browser-based game uses WebAssembly threads for real-time sync with unsafe SharedArrayBuffer exposure. The application renders player names via innerHTML using memory-mapped Atomics. To solve: Corrupt shared memory to inject HTML payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Threads XSS in Multiplayer Game Lobby\", \"Lab Description\": \"Browser-based game uses WebAssembly threads for real-time sync with unsafe SharedArrayBuffer exposure. The application renders player names via innerHTML using memory-mapped Atomics. To solve: Corrupt shared memory to inject HTML payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/2 Trailers XSS in Ad Tech Bid Stream\nDescription: Real-time bidding platform processes HTTP/2 trailers with vulnerable trailer header reflection. The application logs bid responses using console.html() without encoding. To solve: Inject XSS via malformed Trailer: XSS-Header fields.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/2 Trailers XSS in Ad Tech Bid Stream\", \"Lab Description\": \"Real-time bidding platform processes HTTP/2 trailers with vulnerable trailer header reflection. The application logs bid responses using console.html() without encoding. To solve: Inject XSS via malformed Trailer: XSS-Header fields.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS View Transitions XSS in E-Commerce Product Carousel\nDescription: Product carousel implements view transitions API with unsafe pseudo-element content handling. The application reflects product IDs in ::view-transition-old() selectors. To solve: Abuse named transitions to inject style-based XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS View Transitions XSS in E-Commerce Product Carousel\", \"Lab Description\": \"Product carousel implements view transitions API with unsafe pseudo-element content handling. The application reflects product IDs in ::view-transition-old() selectors. To solve: Abuse named transitions to inject style-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebSerial API Spoofing XSS in Industrial Control Panel\nDescription: SCADA system connects to WebSerial devices with unsafe port.claim() validation. The application renders device metadata via innerText with vulnerable CSS escapes. To solve: Spoof USB-CDC device with malicious metadata.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebSerial API Spoofing XSS in Industrial Control Panel\", \"Lab Description\": \"SCADA system connects to WebSerial devices with unsafe port.claim() validation. The application renders device metadata via innerText with vulnerable CSS escapes. To solve: Spoof USB-CDC device with malicious metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SVG Filter Primitive XSS in Data Visualization Dashboard\nDescription: Analytics platform implements SVG filters with unsafe foreignObject processing. The application uses <feImage> with data: URLs without MIME validation. To solve: Achieve XSS through filter chain injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Filter Primitive XSS in Data Visualization Dashboard\", \"Lab Description\": \"Analytics platform implements SVG filters with unsafe foreignObject processing. The application uses <feImage> with data: URLs without MIME validation. To solve: Achieve XSS through filter chain injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGPU Storage Texture XSS in 3D Medical Imaging\nDescription: Radiology viewer uses storage textures for volume rendering with unsafe buffer mapping to DOM. The application writes scan metadata into textures via compute shaders without validation. To solve: Inject HTML through crafted texture data writes.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Storage Texture XSS in 3D Medical Imaging\", \"Lab Description\": \"Radiology viewer uses storage textures for volume rendering with unsafe buffer mapping to DOM. The application writes scan metadata into textures via compute shaders without validation. To solve: Inject HTML through crafted texture data writes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Private Access Token Bypass in Paywall System\nDescription: News paywall implements PATs with unsafe token reflection in <meta> tags. The application leaks token details via innerHTML for debugging. To solve: Forge PATs containing XSS payloads through Chrome's Trust Token API.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Private Access Token Bypass in Paywall System\", \"Lab Description\": \"News paywall implements PATs with unsafe token reflection in <meta> tags. The application leaks token details via innerHTML for debugging. To solve: Forge PATs containing XSS payloads through Chrome's Trust Token API.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS Nesting Injection in Design System Theme Editor\nDescription: UI theme builder processes nested CSS rules with vulnerable postcss-preset-env configuration. The application uses insertRule() with raw user input. To solve: Break style context through deeply nested @media queries.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Nesting Injection in Design System Theme Editor\", \"Lab Description\": \"UI theme builder processes nested CSS rules with vulnerable postcss-preset-env configuration. The application uses insertRule() with raw user input. To solve: Break style context through deeply nested @media queries.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Datagram XSS in Autonomous Vehicle Control\nDescription: Self-driving car interface uses unidirectional WebTransport datagrams for sensor updates. The application renders LIDAR data via innerHTML without validation. To solve: Inject payloads through malformed QUIC datagram buffers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Datagram XSS in Autonomous Vehicle Control\", \"Lab Description\": \"Self-driving car interface uses unidirectional WebTransport datagrams for sensor updates. The application renders LIDAR data via innerHTML without validation. To solve: Inject payloads through malformed QUIC datagram buffers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA 1.3 Role Bypass in Accessibility Dashboard\nDescription: WCAG compliance tool implements ARIA 1.3 roles with dangerous role=generic parsing. The application uses setAttribute('role') with user input. To solve: Achieve XSS through role=alertdialog and aria-errormessage chaining.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA 1.3 Role Bypass in Accessibility Dashboard\", \"Lab Description\": \"WCAG compliance tool implements ARIA 1.3 roles with dangerous role=generic parsing. The application uses setAttribute('role') with user input. To solve: Achieve XSS through role=alertdialog and aria-errormessage chaining.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in internal bug tracking system notes\nDescription: A bug tracking system allows developers to add notes to bug reports. These notes are rendered in the admin panel without proper sanitization, leading to stored XSS. To solve: Inject a script payload in a bug note.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal bug tracking system notes\", \"Lab Description\": \"A bug tracking system allows developers to add notes to bug reports. These notes are rendered in the admin panel without proper sanitization, leading to stored XSS. To solve: Inject a script payload in a bug note.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in product filtering system\nDescription: An e-commerce site reflects user-selected filters into the product list page without sanitization. To solve: Inject an XSS payload into the filter parameters.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in product filtering system\", \"Lab Description\": \"An e-commerce site reflects user-selected filters into the product list page without sanitization. To solve: Inject an XSS payload into the filter parameters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS via localStorage user theme\nDescription: The application loads user-preferred themes from localStorage and inserts them into the DOM without sanitization. To solve: Inject a payload into the theme field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via localStorage user theme\", \"Lab Description\": \"The application loads user-preferred themes from localStorage and inserts them into the DOM without sanitization. To solve: Inject a payload into the theme field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online recipe sharing site ingredients\nDescription: A recipe sharing platform allows users to submit ingredients. The application renders them directly without escaping. To solve: Inject a script into the ingredients list.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online recipe sharing site ingredients\", \"Lab Description\": \"A recipe sharing platform allows users to submit ingredients. The application renders them directly without escaping. To solve: Inject a script into the ingredients list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription confirmation\nDescription: When users subscribe to the newsletter, their email is reflected back in the confirmation message without sanitization. To solve: Inject an XSS payload via the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription confirmation\", \"Lab Description\": \"When users subscribe to the newsletter, their email is reflected back in the confirmation message without sanitization. To solve: Inject an XSS payload via the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in course discussion forum\nDescription: Students post questions in the course forum. Posts are rendered without sanitization. To solve: Inject a persistent XSS payload into a forum post.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in course discussion forum\", \"Lab Description\": \"Students post questions in the course forum. Posts are rendered without sanitization. To solve: Inject a persistent XSS payload into a forum post.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in online documentation viewer\nDescription: The documentation viewer loads section content based on a URL hash and renders it using innerHTML. There's no sanitization. To solve: Inject a malicious fragment.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in online documentation viewer\", \"Lab Description\": \"The documentation viewer loads section content based on a URL hash and renders it using innerHTML. There's no sanitization. To solve: Inject a malicious fragment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in movie review search field\nDescription: A movie review site reflects the search query without escaping. To solve: Inject a payload into the search input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in movie review search field\", \"Lab Description\": \"A movie review site reflects the search query without escaping. To solve: Inject a payload into the search input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online book store reviews\nDescription: Users can submit reviews for books. Reviews are rendered without sanitization. To solve: Submit a review containing an XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online book store reviews\", \"Lab Description\": \"Users can submit reviews for books. Reviews are rendered without sanitization. To solve: Submit a review containing an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via welcome message field\nDescription: The welcome message for logged-in users is dynamically injected into the DOM using innerHTML without escaping. To solve: Inject an XSS payload via user name.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via welcome message field\", \"Lab Description\": \"The welcome message for logged-in users is dynamically injected into the DOM using innerHTML without escaping. To solve: Inject an XSS payload via user name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in event announcement system\nDescription: An event management platform allows organizers to create announcements. Announcements are rendered without sanitization. To solve: Inject a persistent XSS payload in the announcement text.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event announcement system\", \"Lab Description\": \"An event management platform allows organizers to create announcements. Announcements are rendered without sanitization. To solve: Inject a persistent XSS payload in the announcement text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in flight booking search form\nDescription: A flight booking system reflects search parameters back into the results page without escaping. To solve: Inject a script payload in the city field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in flight booking search form\", \"Lab Description\": \"A flight booking system reflects search parameters back into the results page without escaping. To solve: Inject a script payload in the city field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS via browser localStorage theme selection\nDescription: The application saves user theme preferences in localStorage and applies them directly to the page without sanitization. To solve: Inject a payload via localStorage manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via browser localStorage theme selection\", \"Lab Description\": \"The application saves user theme preferences in localStorage and applies them directly to the page without sanitization. To solve: Inject a payload via localStorage manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online job portal application letter\nDescription: Candidates can submit a cover letter when applying for jobs. Letters are displayed to employers without sanitization. To solve: Inject a stored XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online job portal application letter\", \"Lab Description\": \"Candidates can submit a cover letter when applying for jobs. Letters are displayed to employers without sanitization. To solve: Inject a stored XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in forgot password page\nDescription: The password reset page reflects email addresses without encoding. To solve: Inject a script payload in the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in forgot password page\", \"Lab Description\": \"The password reset page reflects email addresses without encoding. To solve: Inject a script payload in the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in library management system book reviews\nDescription: Students submit book reviews. Reviews are rendered without escaping. To solve: Inject an XSS payload in the review form.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library management system book reviews\", \"Lab Description\": \"Students submit book reviews. Reviews are rendered without escaping. To solve: Inject an XSS payload in the review form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in hotel booking form\nDescription: The booking form reflects user data after submission without escaping. To solve: Inject an XSS payload via guest name.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in hotel booking form\", \"Lab Description\": \"The booking form reflects user data after submission without escaping. To solve: Inject an XSS payload via guest name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in social media post editor\nDescription: User-generated posts are saved in localStorage and dynamically injected into the feed using innerHTML without escaping. To solve: Inject a script via a post.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in social media post editor\", \"Lab Description\": \"User-generated posts are saved in localStorage and dynamically injected into the feed using innerHTML without escaping. To solve: Inject a script via a post.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online medical appointment booking notes\nDescription: Patients can leave notes for doctors while booking appointments. Notes are rendered without escaping, enabling XSS. To solve: Inject a malicious script.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online medical appointment booking notes\", \"Lab Description\": \"Patients can leave notes for doctors while booking appointments. Notes are rendered without escaping, enabling XSS. To solve: Inject a malicious script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback form of shopping website\nDescription: The feedback page reflects comments without sanitization. To solve: Inject XSS payload via feedback field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback form of shopping website\", \"Lab Description\": \"The feedback page reflects comments without sanitization. To solve: Inject XSS payload via feedback field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in conference attendee bio\nDescription: The conference system allows users to submit a bio displayed publicly without sanitization. To solve: Inject a persistent XSS payload into the bio field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference attendee bio\", \"Lab Description\": \"The conference system allows users to submit a bio displayed publicly without sanitization. To solve: Inject a persistent XSS payload into the bio field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset confirmation\nDescription: The password reset confirmation page reflects user input without escaping. To solve: Inject an XSS payload through the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset confirmation\", \"Lab Description\": \"The password reset confirmation page reflects user input without escaping. To solve: Inject an XSS payload through the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online event RSVP comments\nDescription: RSVP forms allow users to leave comments, which are rendered unsanitized. To solve: Inject a persistent XSS payload via the comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online event RSVP comments\", \"Lab Description\": \"RSVP forms allow users to leave comments, which are rendered unsanitized. To solve: Inject a persistent XSS payload via the comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in flight ticket booking error page\nDescription: Flight booking system reflects invalid parameters in error pages without escaping. To solve: Inject a script via a broken booking attempt.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in flight ticket booking error page\", \"Lab Description\": \"Flight booking system reflects invalid parameters in error pages without escaping. To solve: Inject a script via a broken booking attempt.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in project task dashboard widget\nDescription: Task details are read from localStorage and inserted with innerHTML without sanitization. To solve: Inject a payload into localStorage data.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in project task dashboard widget\", \"Lab Description\": \"Task details are read from localStorage and inserted with innerHTML without sanitization. To solve: Inject a payload into localStorage data.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in fitness app progress notes\nDescription: Users log their fitness progress, which is displayed without sanitization. To solve: Inject a script into the progress notes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness app progress notes\", \"Lab Description\": \"Users log their fitness progress, which is displayed without sanitization. To solve: Inject a script into the progress notes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in vehicle service appointment booking\nDescription: Vehicle service booking form reflects user name unsanitized. To solve: Inject an XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in vehicle service appointment booking\", \"Lab Description\": \"Vehicle service booking form reflects user name unsanitized. To solve: Inject an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online school class comments\nDescription: Students leave class feedback, which is rendered without escaping. To solve: Inject a persistent XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online school class comments\", \"Lab Description\": \"Students leave class feedback, which is rendered without escaping. To solve: Inject a persistent XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online portfolio contact form\nDescription: The contact form reflects submitted data back without encoding. To solve: Inject a script payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online portfolio contact form\", \"Lab Description\": \"The contact form reflects submitted data back without encoding. To solve: Inject a script payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in dynamic leaderboard update\nDescription: Leaderboard entries are dynamically generated from user input and rendered unsanitized. To solve: Inject a malicious payload in the name field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic leaderboard update\", \"Lab Description\": \"Leaderboard entries are dynamically generated from user input and rendered unsanitized. To solve: Inject a malicious payload in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in book review platform comment field\nDescription: A book review platform allows users to comment on books. Comments are rendered without sanitization, leading to stored XSS. To solve: Inject a script payload in the comment field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in book review platform comment field\", \"Lab Description\": \"A book review platform allows users to comment on books. Comments are rendered without sanitization, leading to stored XSS. To solve: Inject a script payload in the comment field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in order tracking system\nDescription: Order tracking page reflects user-supplied tracking IDs into the HTML unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in order tracking system\", \"Lab Description\": \"Order tracking page reflects user-supplied tracking IDs into the HTML unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event organizer description field\nDescription: An event platform allows organizers to provide a description. The description is displayed without sanitization. To solve: Inject persistent XSS into the description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event organizer description field\", \"Lab Description\": \"An event platform allows organizers to provide a description. The description is displayed without sanitization. To solve: Inject persistent XSS into the description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in account activation confirmation page\nDescription: Activation confirmation page reflects email without proper encoding. To solve: Inject an XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in account activation confirmation page\", \"Lab Description\": \"Activation confirmation page reflects email without proper encoding. To solve: Inject an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online quiz user nickname\nDescription: The quiz platform allows setting a nickname, which is reflected without escaping. To solve: Inject a persistent XSS payload in the nickname.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online quiz user nickname\", \"Lab Description\": \"The quiz platform allows setting a nickname, which is reflected without escaping. To solve: Inject a persistent XSS payload in the nickname.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support ticket submission preview\nDescription: Support ticket preview reflects ticket title without encoding. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support ticket submission preview\", \"Lab Description\": \"Support ticket preview reflects ticket title without encoding. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in task management app project name\nDescription: Users create projects with names rendered without sanitization. To solve: Inject a script payload into the project name field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in task management app project name\", \"Lab Description\": \"Users create projects with names rendered without sanitization. To solve: Inject a script payload into the project name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online auction bid page\nDescription: The auction platform reflects item names during bid confirmation without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online auction bid page\", \"Lab Description\": \"The auction platform reflects item names during bid confirmation without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in recipe sharing app recipe title\nDescription: Recipe titles are displayed on the homepage without sanitization. To solve: Inject a script payload into the recipe title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe sharing app recipe title\", \"Lab Description\": \"Recipe titles are displayed on the homepage without sanitization. To solve: Inject a script payload into the recipe title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in dynamic poll creation page\nDescription: Poll options are dynamically inserted from localStorage without escaping. To solve: Inject a script into the localStorage option.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic poll creation page\", \"Lab Description\": \"Poll options are dynamically inserted from localStorage without escaping. To solve: Inject a script into the localStorage option.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online bookstore author bio field\nDescription: Authors can submit bios for their profile pages. The input is displayed without sanitization. To solve: Inject a stored XSS payload into the bio.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online bookstore author bio field\", \"Lab Description\": \"Authors can submit bios for their profile pages. The input is displayed without sanitization. To solve: Inject a stored XSS payload into the bio.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in product search filter\nDescription: A product search filter reflects user input in search results without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in product search filter\", \"Lab Description\": \"A product search filter reflects user input in search results without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in student portal project title\nDescription: Students submit project titles which are rendered without escaping. To solve: Inject a stored XSS payload in the title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student portal project title\", \"Lab Description\": \"Students submit project titles which are rendered without escaping. To solve: Inject a stored XSS payload in the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in appointment booking confirmation page\nDescription: Booking confirmation reflects user-entered name unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in appointment booking confirmation page\", \"Lab Description\": \"Booking confirmation reflects user-entered name unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in movie rating site review field\nDescription: Movie reviews are displayed without escaping user input. To solve: Inject a persistent XSS payload into the review field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in movie rating site review field\", \"Lab Description\": \"Movie reviews are displayed without escaping user input. To solve: Inject a persistent XSS payload into the review field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription success message\nDescription: Subscription confirmation reflects email address without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription success message\", \"Lab Description\": \"Subscription confirmation reflects email address without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker issue title\nDescription: Bug tracker displays issue titles without escaping. To solve: Inject a persistent XSS payload into the issue title field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker issue title\", \"Lab Description\": \"Bug tracker displays issue titles without escaping. To solve: Inject a persistent XSS payload into the issue title field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in discount coupon generation page\nDescription: Coupon codes are displayed back to users without encoding input. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in discount coupon generation page\", \"Lab Description\": \"Coupon codes are displayed back to users without encoding input. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in music sharing app playlist description\nDescription: Playlist descriptions are rendered without escaping user input. To solve: Inject a stored XSS payload into the playlist description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in music sharing app playlist description\", \"Lab Description\": \"Playlist descriptions are rendered without escaping user input. To solve: Inject a stored XSS payload into the playlist description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel booking system review form\nDescription: Travelers can leave reviews after completing trips. The application renders reviews without sanitizing input. To solve: Inject a stored XSS payload into the review form.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking system review form\", \"Lab Description\": \"Travelers can leave reviews after completing trips. The application renders reviews without sanitizing input. To solve: Inject a stored XSS payload into the review form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in blog comment preview\nDescription: Before submitting a comment, users see a preview that reflects their input without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in blog comment preview\", \"Lab Description\": \"Before submitting a comment, users see a preview that reflects their input without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online food ordering app restaurant description\nDescription: Restaurant owners can submit descriptions, which are displayed to customers without sanitization. To solve: Inject a stored XSS payload into the description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online food ordering app restaurant description\", \"Lab Description\": \"Restaurant owners can submit descriptions, which are displayed to customers without sanitization. To solve: Inject a stored XSS payload into the description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in user feedback acknowledgment page\nDescription: Feedback confirmation pages reflect user inputs directly. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in user feedback acknowledgment page\", \"Lab Description\": \"Feedback confirmation pages reflect user inputs directly. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event management site event title field\nDescription: Event titles created by organizers are displayed without escaping. To solve: Inject a stored XSS payload into the title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event management site event title field\", \"Lab Description\": \"Event titles created by organizers are displayed without escaping. To solve: Inject a stored XSS payload into the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online education platform signup form\nDescription: Signup form reflects user input without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online education platform signup form\", \"Lab Description\": \"Signup form reflects user input without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in social network post title\nDescription: Users can create posts with titles that are rendered without escaping. To solve: Inject a stored XSS payload into the post title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in social network post title\", \"Lab Description\": \"Users can create posts with titles that are rendered without escaping. To solve: Inject a stored XSS payload into the post title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in email contact us form response\nDescription: Contact form response page reflects user name unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in email contact us form response\", \"Lab Description\": \"Contact form response page reflects user name unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internal HR portal employee announcement\nDescription: Internal announcements by HR are displayed without sanitizing input. To solve: Inject a stored XSS payload in the announcement.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal HR portal employee announcement\", \"Lab Description\": \"Internal announcements by HR are displayed without sanitizing input. To solve: Inject a stored XSS payload in the announcement.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in fitness app workout description\nDescription: Users can create custom workout plans with descriptions. The description is rendered without sanitization. To solve: Inject a persistent XSS payload into the workout description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness app workout description\", \"Lab Description\": \"Users can create custom workout plans with descriptions. The description is rendered without sanitization. To solve: Inject a persistent XSS payload into the workout description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in flight booking search\nDescription: Flight booking form reflects the destination parameter in the search result page without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in flight booking search\", \"Lab Description\": \"Flight booking form reflects the destination parameter in the search result page without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online bookstore author bio\nDescription: Authors can add bios which are displayed without escaping. To solve: Inject a stored XSS payload in the bio field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online bookstore author bio\", \"Lab Description\": \"Authors can add bios which are displayed without escaping. To solve: Inject a stored XSS payload in the bio field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset message\nDescription: Password reset confirmation reflects email input without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset message\", \"Lab Description\": \"Password reset confirmation reflects email input without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in recipe sharing site recipe name\nDescription: Recipe names submitted by users are rendered directly. To solve: Inject a stored XSS payload in the recipe name field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe sharing site recipe name\", \"Lab Description\": \"Recipe names submitted by users are rendered directly. To solve: Inject a stored XSS payload in the recipe name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online exam platform result summary\nDescription: After submitting an exam, the result page reflects the user's name without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online exam platform result summary\", \"Lab Description\": \"After submitting an exam, the result page reflects the user's name without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online donation site donor message\nDescription: Donor messages are displayed without escaping user input. To solve: Inject a stored XSS payload in the message field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online donation site donor message\", \"Lab Description\": \"Donor messages are displayed without escaping user input. To solve: Inject a stored XSS payload in the message field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in book review site reviewer name\nDescription: Reviewer names are reflected unsanitized on the book review page. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in book review site reviewer name\", \"Lab Description\": \"Reviewer names are reflected unsanitized on the book review page. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online petition platform supporter comment\nDescription: Supporter comments are displayed without sanitization. To solve: Inject a stored XSS payload into the comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online petition platform supporter comment\", \"Lab Description\": \"Supporter comments are displayed without sanitization. To solve: Inject a stored XSS payload into the comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in project management tool task description\nDescription: A project management tool allows users to add task descriptions. The input is stored and rendered without sanitization. To solve: Inject a persistent XSS payload in the task description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in project management tool task description\", \"Lab Description\": \"A project management tool allows users to add task descriptions. The input is stored and rendered without sanitization. To solve: Inject a persistent XSS payload in the task description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online survey form\nDescription: An online survey form reflects user input directly in the confirmation page without sanitization. To solve: Inject a reflected XSS payload in the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online survey form\", \"Lab Description\": \"An online survey form reflects user input directly in the confirmation page without sanitization. To solve: Inject a reflected XSS payload in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in e-learning platform assignment feedback\nDescription: Students can submit feedback on assignments. The input is stored and displayed without escaping, leading to stored XSS. To solve: Inject a script in the feedback section.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-learning platform assignment feedback\", \"Lab Description\": \"Students can submit feedback on assignments. The input is stored and displayed without escaping, leading to stored XSS. To solve: Inject a script in the feedback section.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in blog post title\nDescription: Blog post titles are stored without sanitization, leading to stored XSS. To solve: Submit a malicious script as the post title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog post title\", \"Lab Description\": \"Blog post titles are stored without sanitization, leading to stored XSS. To solve: Submit a malicious script as the post title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset form\nDescription: The reset form reflects the user email without sanitization, allowing reflected XSS. To solve: Inject a script into the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset form\", \"Lab Description\": \"The reset form reflects the user email without sanitization, allowing reflected XSS. To solve: Inject a script into the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event registration comments\nDescription: Users can leave comments on event registrations, which are stored and displayed unsanitized. To solve: Inject a persistent XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event registration comments\", \"Lab Description\": \"Users can leave comments on event registrations, which are stored and displayed unsanitized. To solve: Inject a persistent XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact us form\nDescription: The contact form reflects user message into response without encoding. To solve: Inject a script via message field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact us form\", \"Lab Description\": \"The contact form reflects user message into response without encoding. To solve: Inject a script via message field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online shop product reviews\nDescription: Product reviews are displayed without sanitization, leading to stored XSS. To solve: Submit malicious review payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online shop product reviews\", \"Lab Description\": \"Product reviews are displayed without sanitization, leading to stored XSS. To solve: Submit malicious review payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup\nDescription: Newsletter signup reflects submitted name into response page unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup\", \"Lab Description\": \"Newsletter signup reflects submitted name into response page unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in public forum thread replies\nDescription: Forum replies are saved and displayed without escaping, allowing stored XSS attacks. To solve: Inject XSS via reply field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in public forum thread replies\", \"Lab Description\": \"Forum replies are saved and displayed without escaping, allowing stored XSS attacks. To solve: Inject XSS via reply field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in internal notes section\nDescription: An internal CRM system allows adding notes to customer profiles. These notes are rendered without sanitization. To solve: Inject a persistent XSS payload in a note field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal notes section\", \"Lab Description\": \"An internal CRM system allows adding notes to customer profiles. These notes are rendered without sanitization. To solve: Inject a persistent XSS payload in a note field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in job application form\nDescription: The job application form reflects user-submitted name into the success page without encoding. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in job application form\", \"Lab Description\": \"The job application form reflects user-submitted name into the success page without encoding. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in blog post comment section\nDescription: Comments on blog posts are stored and displayed without proper sanitization, leading to stored XSS. To solve: Submit a malicious comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog post comment section\", \"Lab Description\": \"Comments on blog posts are stored and displayed without proper sanitization, leading to stored XSS. To solve: Submit a malicious comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter unsubscribe page\nDescription: When unsubscribing from the newsletter, the email field is reflected in the response without escaping, leading to reflected XSS. To solve: Inject a script via email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter unsubscribe page\", \"Lab Description\": \"When unsubscribing from the newsletter, the email field is reflected in the response without escaping, leading to reflected XSS. To solve: Inject a script via email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in portfolio project descriptions\nDescription: Users can create portfolios by adding project descriptions. These descriptions are rendered without validation. To solve: Inject a stored XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in portfolio project descriptions\", \"Lab Description\": \"Users can create portfolios by adding project descriptions. These descriptions are rendered without validation. To solve: Inject a stored XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in event registration confirmation\nDescription: When registering for events, user input is reflected into the confirmation page without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in event registration confirmation\", \"Lab Description\": \"When registering for events, user input is reflected into the confirmation page without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in FAQ question submission\nDescription: Users can submit questions for the FAQ section, but input is saved and rendered without validation. To solve: Inject stored XSS via question field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in FAQ question submission\", \"Lab Description\": \"Users can submit questions for the FAQ section, but input is saved and rendered without validation. To solve: Inject stored XSS via question field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in site feedback form\nDescription: Feedback form reflects submitted text into a confirmation page unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in site feedback form\", \"Lab Description\": \"Feedback form reflects submitted text into a confirmation page unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug report description\nDescription: Bug report descriptions are stored and rendered without escaping, leading to stored XSS vulnerabilities. To solve: Inject a script via bug description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug report description\", \"Lab Description\": \"Bug report descriptions are stored and rendered without escaping, leading to stored XSS vulnerabilities. To solve: Inject a script via bug description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in login error message\nDescription: Incorrect login attempts reflect user input into an error message unsanitized, enabling reflected XSS. To solve: Inject a script via username field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in login error message\", \"Lab Description\": \"Incorrect login attempts reflect user input into an error message unsanitized, enabling reflected XSS. To solve: Inject a script via username field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user profile status message\nDescription: Users can set a status message on their profile, but the input is stored and rendered without sanitization, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user profile status message\", \"Lab Description\": \"Users can set a status message on their profile, but the input is stored and rendered without sanitization, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset form\nDescription: The password reset page reflects the email address back into the page without proper escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset form\", \"Lab Description\": \"The password reset page reflects the email address back into the page without proper escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in customer feedback form\nDescription: Feedback submitted through the customer feedback form is stored in the database and displayed without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in customer feedback form\", \"Lab Description\": \"Feedback submitted through the customer feedback form is stored in the database and displayed without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in report abuse form\nDescription: User-submitted report messages are reflected back without sanitization, enabling reflected XSS attacks.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in report abuse form\", \"Lab Description\": \"User-submitted report messages are reflected back without sanitization, enabling reflected XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in conference submission abstracts\nDescription: Abstracts submitted for a conference are stored and displayed without sanitization, leading to persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference submission abstracts\", \"Lab Description\": \"Abstracts submitted for a conference are stored and displayed without sanitization, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online booking system\nDescription: The booking confirmation page reflects user-submitted input without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online booking system\", \"Lab Description\": \"The booking confirmation page reflects user-submitted input without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in product question and answer section\nDescription: Users can submit questions on product pages, but these are displayed unsanitized, leading to stored XSS vulnerabilities.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in product question and answer section\", \"Lab Description\": \"Users can submit questions on product pages, but these are displayed unsanitized, leading to stored XSS vulnerabilities.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact us form\nDescription: The contact us form reflects the name field back in the response page without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact us form\", \"Lab Description\": \"The contact us form reflects the name field back in the response page without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in support ticket messages\nDescription: Support ticket messages are stored unsanitized and displayed to admins, leading to stored XSS vulnerabilities.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in support ticket messages\", \"Lab Description\": \"Support ticket messages are stored unsanitized and displayed to admins, leading to stored XSS vulnerabilities.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback preview page\nDescription: The feedback preview page reflects the feedback text input without proper encoding, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback preview page\", \"Lab Description\": \"The feedback preview page reflects the feedback text input without proper encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event management platform guest notes\nDescription: Guests can leave notes when registering for events. The notes are rendered without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event management platform guest notes\", \"Lab Description\": \"Guests can leave notes when registering for events. The notes are rendered without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in product return form\nDescription: The return request form reflects user comments directly into the page without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in product return form\", \"Lab Description\": \"The return request form reflects user comments directly into the page without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online newspaper comment section\nDescription: Reader comments on articles are stored unsanitized, leading to persistent XSS vulnerabilities.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online newspaper comment section\", \"Lab Description\": \"Reader comments on articles are stored unsanitized, leading to persistent XSS vulnerabilities.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support live chat pre-form\nDescription: The support chat pre-form echoes back the name field without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support live chat pre-form\", \"Lab Description\": \"The support chat pre-form echoes back the name field without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in e-commerce wishlist notes\nDescription: Users can add notes to wishlist items. These notes are stored without validation, allowing stored XSS attacks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-commerce wishlist notes\", \"Lab Description\": \"Users can add notes to wishlist items. These notes are stored without validation, allowing stored XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in job application portal cover letter\nDescription: The job application form reflects cover letters without sanitization during preview, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in job application portal cover letter\", \"Lab Description\": \"The job application form reflects cover letters without sanitization during preview, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in university course review system\nDescription: Students submit course reviews, but reviews are stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in university course review system\", \"Lab Description\": \"Students submit course reviews, but reviews are stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in event RSVP form\nDescription: The RSVP form for events reflects user name without encoding, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in event RSVP form\", \"Lab Description\": \"The RSVP form for events reflects user name without encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car rental system customer comments\nDescription: Customers can leave comments about rentals. The input is stored without sanitization, allowing XSS attacks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car rental system customer comments\", \"Lab Description\": \"Customers can leave comments about rentals. The input is stored without sanitization, allowing XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in file upload metadata field\nDescription: The file uploader accepts a description field that is reflected without escaping, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in file upload metadata field\", \"Lab Description\": \"The file uploader accepts a description field that is reflected without escaping, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate portal property notes\nDescription: Real estate users can add private notes to property listings. These notes are stored without sanitization, allowing persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate portal property notes\", \"Lab Description\": \"Real estate users can add private notes to property listings. These notes are stored without sanitization, allowing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset form\nDescription: The password reset form reflects the email input without sanitization, enabling reflected XSS attacks.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset form\", \"Lab Description\": \"The password reset form reflects the email input without sanitization, enabling reflected XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in project collaboration tool task updates\nDescription: Users can post updates to shared tasks, but the input is stored without validation, causing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in project collaboration tool task updates\", \"Lab Description\": \"Users can post updates to shared tasks, but the input is stored without validation, causing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in discount coupon generator\nDescription: The discount code generation page reflects input data without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in discount coupon generator\", \"Lab Description\": \"The discount code generation page reflects input data without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in book review platform\nDescription: Readers submit reviews for books without input sanitization, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in book review platform\", \"Lab Description\": \"Readers submit reviews for books without input sanitization, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in subscription confirmation page\nDescription: The subscription form reflects the user's email on the confirmation page without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in subscription confirmation page\", \"Lab Description\": \"The subscription form reflects the user's email on the confirmation page without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internal ticket system ticket notes\nDescription: Technicians can add notes to tickets. Notes are stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal ticket system ticket notes\", \"Lab Description\": \"Technicians can add notes to tickets. Notes are stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in document sharing form\nDescription: Document sharing confirmation page reflects input fields without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in document sharing form\", \"Lab Description\": \"Document sharing confirmation page reflects input fields without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in music streaming app playlist comments\nDescription: Users can comment on playlists. Comments are stored without escaping, allowing persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in music streaming app playlist comments\", \"Lab Description\": \"Users can comment on playlists. Comments are stored without escaping, allowing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online recipe submission form\nDescription: The recipe submission confirmation page reflects recipe names without encoding, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online recipe submission form\", \"Lab Description\": \"The recipe submission confirmation page reflects recipe names without encoding, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in team collaboration chat\nDescription: Team members can post chat messages, but the application renders messages without sanitization, leading to persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in team collaboration chat\", \"Lab Description\": \"Team members can post chat messages, but the application renders messages without sanitization, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in invoice creation tool\nDescription: The invoice generation form reflects customer names without sanitization in the final invoice view, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in invoice creation tool\", \"Lab Description\": \"The invoice generation form reflects customer names without sanitization in the final invoice view, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker ticket comments\nDescription: Users can comment on tickets without any output escaping, allowing stored XSS payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker ticket comments\", \"Lab Description\": \"Users can comment on tickets without any output escaping, allowing stored XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online quiz result page\nDescription: After submitting an online quiz, the result page reflects the user's name without sanitization, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online quiz result page\", \"Lab Description\": \"After submitting an online quiz, the result page reflects the user's name without sanitization, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in employee management notes\nDescription: Employee management system allows adding notes to profiles without sanitization, causing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in employee management notes\", \"Lab Description\": \"Employee management system allows adding notes to profiles without sanitization, causing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact us form confirmation\nDescription: The 'Contact Us' form reflects the submitted message directly without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact us form confirmation\", \"Lab Description\": \"The 'Contact Us' form reflects the submitted message directly without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in course review system\nDescription: Students can post course reviews that are rendered without escaping, causing persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in course review system\", \"Lab Description\": \"Students can post course reviews that are rendered without escaping, causing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription form\nDescription: User input is reflected in the newsletter subscription confirmation page without escaping, causing XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription form\", \"Lab Description\": \"User input is reflected in the newsletter subscription confirmation page without escaping, causing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel booking special requests\nDescription: Travel booking site allows special requests input without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking special requests\", \"Lab Description\": \"Travel booking site allows special requests input without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in blog comment reply form\nDescription: Blog reply form reflects user input without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in blog comment reply form\", \"Lab Description\": \"Blog reply form reflects user input without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online auction item description\nDescription: Users can list auction items with custom descriptions. The application stores and renders them without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online auction item description\", \"Lab Description\": \"Users can list auction items with custom descriptions. The application stores and renders them without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in customer order tracking page\nDescription: The order tracking page reflects the provided order ID without sanitization, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in customer order tracking page\", \"Lab Description\": \"The order tracking page reflects the provided order ID without sanitization, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing notes\nDescription: Agents can add notes to real estate listings. The notes are displayed without sanitization, leading to persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing notes\", \"Lab Description\": \"Agents can add notes to real estate listings. The notes are displayed without sanitization, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online appointment confirmation\nDescription: Appointment booking system reflects customer name without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online appointment confirmation\", \"Lab Description\": \"Appointment booking system reflects customer name without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in gym membership feedback\nDescription: Members can submit feedback about facilities, which is displayed without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in gym membership feedback\", \"Lab Description\": \"Members can submit feedback about facilities, which is displayed without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in job application form\nDescription: Job application form reflects applicant name back without proper escaping, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in job application form\", \"Lab Description\": \"Job application form reflects applicant name back without proper escaping, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in ticket booking comments\nDescription: Ticket booking site allows comments for each booking, stored without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ticket booking comments\", \"Lab Description\": \"Ticket booking site allows comments for each booking, stored without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback review page\nDescription: Reviewing feedback entries reflects user input directly without sanitization, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback review page\", \"Lab Description\": \"Reviewing feedback entries reflects user input directly without sanitization, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in community forum new post\nDescription: Users can create new forum posts, but content is stored without escaping, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in community forum new post\", \"Lab Description\": \"Users can create new forum posts, but content is stored without escaping, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online ticket support form\nDescription: Support ticket form reflects ticket titles directly without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online ticket support form\", \"Lab Description\": \"Support ticket form reflects ticket titles directly without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online course platform announcement\nDescription: Course instructors can post announcements. The announcement body is stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online course platform announcement\", \"Lab Description\": \"Course instructors can post announcements. The announcement body is stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset hint\nDescription: Password reset form reflects user-provided security hint without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset hint\", \"Lab Description\": \"Password reset form reflects user-provided security hint without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in product return reason form\nDescription: Customers submit reasons for returning products. Inputs are stored without sanitization, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in product return reason form\", \"Lab Description\": \"Customers submit reasons for returning products. Inputs are stored without sanitization, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription confirmation\nDescription: Newsletter subscription confirmation page reflects the subscriber's email without escaping, leading to XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription confirmation\", \"Lab Description\": \"Newsletter subscription confirmation page reflects the subscriber's email without escaping, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internal HR feedback form\nDescription: Employees submit internal feedback that is stored without validation, leading to stored XSS on HR portal.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal HR feedback form\", \"Lab Description\": \"Employees submit internal feedback that is stored without validation, leading to stored XSS on HR portal.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online donation thank-you message\nDescription: Donation thank-you page reflects donor name without sanitization, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online donation thank-you message\", \"Lab Description\": \"Donation thank-you page reflects donor name without sanitization, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in CRM contact notes\nDescription: CRM system stores client notes without sanitization, leading to persistent XSS when sales reps view notes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CRM contact notes\", \"Lab Description\": \"CRM system stores client notes without sanitization, leading to persistent XSS when sales reps view notes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in complaint submission system\nDescription: Customer complaints are echoed back without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in complaint submission system\", \"Lab Description\": \"Customer complaints are echoed back without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in company knowledge base article comments\nDescription: Users can comment on internal knowledge base articles. Comments are stored and rendered without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in company knowledge base article comments\", \"Lab Description\": \"Users can comment on internal knowledge base articles. Comments are stored and rendered without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online certificate name input\nDescription: Certificate generation form reflects the provided name without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online certificate name input\", \"Lab Description\": \"Certificate generation form reflects the provided name without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event management system attendee comments\nDescription: Attendees can leave public comments on event pages. Comments are stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event management system attendee comments\", \"Lab Description\": \"Attendees can leave public comments on event pages. Comments are stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in book review website search field\nDescription: Book search queries are reflected into the search results page without encoding, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in book review website search field\", \"Lab Description\": \"Book search queries are reflected into the search results page without encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online doctor appointment notes\nDescription: Patients can leave notes for doctors while booking appointments. Notes are stored without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online doctor appointment notes\", \"Lab Description\": \"Patients can leave notes for doctors while booking appointments. Notes are stored without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in course enrollment form\nDescription: After filling course enrollment, user details are reflected back without encoding, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in course enrollment form\", \"Lab Description\": \"After filling course enrollment, user details are reflected back without encoding, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing descriptions\nDescription: Real estate agents can create property listings with descriptions. Descriptions are not sanitized before display.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing descriptions\", \"Lab Description\": \"Real estate agents can create property listings with descriptions. Descriptions are not sanitized before display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online ticket booking platform\nDescription: User-submitted names for ticket bookings are reflected into a receipt page without sanitization.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online ticket booking platform\", \"Lab Description\": \"User-submitted names for ticket bookings are reflected into a receipt page without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in fitness tracker app custom achievements\nDescription: Users can create custom achievements in a fitness app. Achievement names are not sanitized before rendering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness tracker app custom achievements\", \"Lab Description\": \"Users can create custom achievements in a fitness app. Achievement names are not sanitized before rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in scholarship application form\nDescription: Scholarship applicant names are reflected into confirmation page without escaping, allowing XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in scholarship application form\", \"Lab Description\": \"Scholarship applicant names are reflected into confirmation page without escaping, allowing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug bounty platform report comments\nDescription: Bug reporters can leave public comments. Comments are stored without sanitization, enabling persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug bounty platform report comments\", \"Lab Description\": \"Bug reporters can leave public comments. Comments are stored without sanitization, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online donation acknowledgment page\nDescription: Donation forms reflect donor name without escaping, leading to reflected XSS when showing acknowledgment.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online donation acknowledgment page\", \"Lab Description\": \"Donation forms reflect donor name without escaping, leading to reflected XSS when showing acknowledgment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in recipe sharing platform ingredients field\nDescription: Users can submit recipes with ingredients. The ingredients field is stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe sharing platform ingredients field\", \"Lab Description\": \"Users can submit recipes with ingredients. The ingredients field is stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in university admission application form\nDescription: Applicants' names are reflected on the confirmation page without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in university admission application form\", \"Lab Description\": \"Applicants' names are reflected on the confirmation page without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car rental service special request notes\nDescription: Car renters can leave special requests that are stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car rental service special request notes\", \"Lab Description\": \"Car renters can leave special requests that are stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online movie ticket booking\nDescription: User-provided data for movie booking is reflected without sanitization, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online movie ticket booking\", \"Lab Description\": \"User-provided data for movie booking is reflected without sanitization, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in language learning platform lesson notes\nDescription: Students can leave notes on lessons. Notes are stored and displayed without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in language learning platform lesson notes\", \"Lab Description\": \"Students can leave notes on lessons. Notes are stored and displayed without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in real estate inquiry form\nDescription: User inquiries on properties are reflected into pages without escaping, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in real estate inquiry form\", \"Lab Description\": \"User inquiries on properties are reflected into pages without escaping, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in freelancing platform project description\nDescription: Clients post project descriptions without filtering input, allowing persistent XSS on freelancer dashboards.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in freelancing platform project description\", \"Lab Description\": \"Clients post project descriptions without filtering input, allowing persistent XSS on freelancer dashboards.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in music streaming app song request page\nDescription: User-submitted song requests are reflected back without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in music streaming app song request page\", \"Lab Description\": \"User-submitted song requests are reflected back without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel agency review section\nDescription: Travelers submit trip reviews. Reviews are rendered without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel agency review section\", \"Lab Description\": \"Travelers submit trip reviews. Reviews are rendered without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online grocery store feedback form\nDescription: Customer feedback is reflected into a thank-you page without encoding, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online grocery store feedback form\", \"Lab Description\": \"Customer feedback is reflected into a thank-you page without encoding, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing comments\nDescription: Users can leave comments on property listings. Comments are stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing comments\", \"Lab Description\": \"Users can leave comments on property listings. Comments are stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online job application\nDescription: Job applicant names are reflected into the confirmation page without escaping, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online job application\", \"Lab Description\": \"Job applicant names are reflected into the confirmation page without escaping, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online donation message field\nDescription: Donors can leave public messages. These are stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online donation message field\", \"Lab Description\": \"Donors can leave public messages. These are stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online library book search\nDescription: Search terms are reflected without escaping into the search result page, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online library book search\", \"Lab Description\": \"Search terms are reflected without escaping into the search result page, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car service booking notes\nDescription: Customers can leave notes when booking car services. Notes are rendered without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car service booking notes\", \"Lab Description\": \"Customers can leave notes when booking car services. Notes are rendered without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online travel booking destination field\nDescription: Destination input is reflected without encoding into the confirmation page, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online travel booking destination field\", \"Lab Description\": \"Destination input is reflected without encoding into the confirmation page, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online fitness app workout notes\nDescription: Users can add notes to their workouts. Notes are saved without escaping, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online fitness app workout notes\", \"Lab Description\": \"Users can add notes to their workouts. Notes are saved without escaping, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in book review platform author search\nDescription: Author names are reflected into the HTML page unsanitized, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in book review platform author search\", \"Lab Description\": \"Author names are reflected into the HTML page unsanitized, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online gadget marketplace product questions\nDescription: Buyers can ask sellers questions about products. Questions are saved without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online gadget marketplace product questions\", \"Lab Description\": \"Buyers can ask sellers questions about products. Questions are saved without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in virtual event RSVP system\nDescription: RSVP name is reflected into event confirmation page without escaping, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in virtual event RSVP system\", \"Lab Description\": \"RSVP name is reflected into event confirmation page without escaping, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in customer support ticket notes\nDescription: The app allows users to submit support tickets with notes. Notes are stored and displayed to admins without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in customer support ticket notes\", \"Lab Description\": \"The app allows users to submit support tickets with notes. Notes are stored and displayed to admins without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in restaurant booking confirmation\nDescription: The app reflects the user's name in a confirmation page without escaping it properly.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in restaurant booking confirmation\", \"Lab Description\": \"The app reflects the user's name in a confirmation page without escaping it properly.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker task description\nDescription: Bug tracker allows users to submit bugs with descriptions. The descriptions are stored and rendered in admin dashboard without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker task description\", \"Lab Description\": \"Bug tracker allows users to submit bugs with descriptions. The descriptions are stored and rendered in admin dashboard without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in banking portal transaction description\nDescription: Transaction description reflects user input without sanitization in the summary page.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in banking portal transaction description\", \"Lab Description\": \"Transaction description reflects user input without sanitization in the summary page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in feedback field of medical consultation form\nDescription: Medical consultation form saves user feedback unescaped and displays it to doctors, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in feedback field of medical consultation form\", \"Lab Description\": \"Medical consultation form saves user feedback unescaped and displays it to doctors, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-ticket system route name\nDescription: Ticket route input is reflected without escaping on confirmation page.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-ticket system route name\", \"Lab Description\": \"Ticket route input is reflected without escaping on confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in library management system review\nDescription: Students can review books. Review content is stored and displayed without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library management system review\", \"Lab Description\": \"Students can review books. Review content is stored and displayed without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce coupon form\nDescription: Submitted coupon code is reflected in the result page unsanitized.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce coupon form\", \"Lab Description\": \"Submitted coupon code is reflected in the result page unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online gaming profile bio\nDescription: Users update gaming bios. Bio is stored and shown in profile without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online gaming profile bio\", \"Lab Description\": \"Users update gaming bios. Bio is stored and shown in profile without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in movie ticket booking reference field\nDescription: Booking reference is echoed back in the final confirmation page unsanitized.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in movie ticket booking reference field\", \"Lab Description\": \"Booking reference is echoed back in the final confirmation page unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in contact message field\nDescription: A contact form stores submitted messages without sanitization and displays them to admins. An attacker can inject persistent JavaScript.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in contact message field\", \"Lab Description\": \"A contact form stores submitted messages without sanitization and displays them to admins. An attacker can inject persistent JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in job application cover letter\nDescription: A job portal saves user-submitted cover letters without escaping and displays them to HR staff.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job application cover letter\", \"Lab Description\": \"A job portal saves user-submitted cover letters without escaping and displays them to HR staff.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in personal finance note field\nDescription: Users can add personal notes to transactions. These notes are rendered without filtering, leading to XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in personal finance note field\", \"Lab Description\": \"Users can add personal notes to transactions. These notes are rendered without filtering, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in referral system input\nDescription: Referral codes submitted in a form are reflected in the result page without escaping, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in referral system input\", \"Lab Description\": \"Referral codes submitted in a form are reflected in the result page without escaping, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in restaurant review comment\nDescription: Restaurant reviews allow comments that are stored and displayed without proper filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in restaurant review comment\", \"Lab Description\": \"Restaurant reviews allow comments that are stored and displayed without proper filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in insurance claim description\nDescription: Insurance claim descriptions are displayed to agents with no escaping. Attackers can inject persistent scripts.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in insurance claim description\", \"Lab Description\": \"Insurance claim descriptions are displayed to agents with no escaping. Attackers can inject persistent scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup name field\nDescription: Newsletter signup form reflects the name in the thank-you message without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup name field\", \"Lab Description\": \"Newsletter signup form reflects the name in the thank-you message without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in student report comment section\nDescription: Teachers leave comments on student reports. These comments are stored and rendered without filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student report comment section\", \"Lab Description\": \"Teachers leave comments on student reports. These comments are stored and rendered without filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in project collaboration note\nDescription: Project collaboration tool allows team members to leave notes. Notes are rendered directly without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in project collaboration note\", \"Lab Description\": \"Project collaboration tool allows team members to leave notes. Notes are rendered directly without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel site trip review\nDescription: Users review trips and the reviews are displayed without escaping, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel site trip review\", \"Lab Description\": \"Users review trips and the reviews are displayed without escaping, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in e-ticketing system message field\nDescription: The e-ticketing portal allows users to send messages to support. The messages are stored and displayed to staff without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-ticketing system message field\", \"Lab Description\": \"The e-ticketing portal allows users to send messages to support. The messages are stored and displayed to staff without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in internal employee feedback form\nDescription: The HR system allows employees to give anonymous feedback. Input is rendered without sanitization in the dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal employee feedback form\", \"Lab Description\": \"The HR system allows employees to give anonymous feedback. Input is rendered without sanitization in the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in healthcare system symptoms notes\nDescription: Patients submit symptom notes, which are viewed by doctors. Input is saved and reflected without filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in healthcare system symptoms notes\", \"Lab Description\": \"Patients submit symptom notes, which are viewed by doctors. Input is saved and reflected without filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in booking confirmation notes\nDescription: Users can leave additional notes during booking. These notes are stored and rendered without sanitization on admin panel.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in booking confirmation notes\", \"Lab Description\": \"Users can leave additional notes during booking. These notes are stored and rendered without sanitization on admin panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bug report reproduction steps\nDescription: Bug tracker stores user-submitted reproduction steps. The steps are rendered for developers without filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug report reproduction steps\", \"Lab Description\": \"Bug tracker stores user-submitted reproduction steps. The steps are rendered for developers without filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in mobile recharge confirmation screen\nDescription: Recharge form reflects submitted phone number in the confirmation view without sanitization.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in mobile recharge confirmation screen\", \"Lab Description\": \"Recharge form reflects submitted phone number in the confirmation view without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user suggestions submission field\nDescription: Public suggestion box accepts suggestions that are rendered for moderators without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user suggestions submission field\", \"Lab Description\": \"Public suggestion box accepts suggestions that are rendered for moderators without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in forum private message feature\nDescription: Private messages are displayed in inbox without escaping, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in forum private message feature\", \"Lab Description\": \"Private messages are displayed in inbox without escaping, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in community voting comments\nDescription: Users can comment on votes. Comments are rendered without sanitization in the result page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in community voting comments\", \"Lab Description\": \"Users can comment on votes. Comments are rendered without sanitization in the result page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event registration custom message\nDescription: Users can leave custom messages when registering for an event. These are rendered without escaping in admin dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event registration custom message\", \"Lab Description\": \"Users can leave custom messages when registering for an event. These are rendered without escaping in admin dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in job application cover letter\nDescription: Job applicants can submit a cover letter. The input is stored and displayed to recruiters without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job application cover letter\", \"Lab Description\": \"Job applicants can submit a cover letter. The input is stored and displayed to recruiters without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in newsletter subscription notes\nDescription: The newsletter form includes an optional note field. Notes are displayed to admins without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in newsletter subscription notes\", \"Lab Description\": \"The newsletter form includes an optional note field. Notes are displayed to admins without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in feature request title\nDescription: Users submit feature requests. The title is stored and displayed without sanitization on admin panel.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in feature request title\", \"Lab Description\": \"Users submit feature requests. The title is stored and displayed without sanitization on admin panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in ride-sharing app driver feedback\nDescription: Passengers leave feedback for drivers. Input is stored and rendered without escaping on driver dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ride-sharing app driver feedback\", \"Lab Description\": \"Passengers leave feedback for drivers. Input is stored and rendered without escaping on driver dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bug bounty program POC URL\nDescription: Bug reporters submit a POC URL. It's rendered without escaping in admin reports dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug bounty program POC URL\", \"Lab Description\": \"Bug reporters submit a POC URL. It's rendered without escaping in admin reports dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel booking special instructions\nDescription: Users leave special instructions during travel booking. Input is rendered without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking special instructions\", \"Lab Description\": \"Users leave special instructions during travel booking. Input is rendered without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in auction platform product question\nDescription: Buyers can ask public questions. The input is not sanitized before display.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in auction platform product question\", \"Lab Description\": \"Buyers can ask public questions. The input is not sanitized before display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bank contact form message field\nDescription: Bank contact form messages are shown to operators without any escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bank contact form message field\", \"Lab Description\": \"Bank contact form messages are shown to operators without any escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in quiz app answer explanation field\nDescription: Instructors submit explanation text that is reflected unescaped in quiz preview.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in quiz app answer explanation field\", \"Lab Description\": \"Instructors submit explanation text that is reflected unescaped in quiz preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bug tracking system tag field\nDescription: Bugs can be tagged. Tags are reflected on pages without encoding.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracking system tag field\", \"Lab Description\": \"Bugs can be tagged. Tags are reflected on pages without encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in user-submitted tutorial title\nDescription: Users submit tutorials with titles that are rendered in the dashboard without sanitization. A malicious title can trigger script execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-submitted tutorial title\", \"Lab Description\": \"Users submit tutorials with titles that are rendered in the dashboard without sanitization. A malicious title can trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in payment comment field\nDescription: During payment, users can add comments. These are stored and shown in the transaction history with no escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in payment comment field\", \"Lab Description\": \"During payment, users can add comments. These are stored and shown in the transaction history with no escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in e-learning discussion reply\nDescription: Students reply to threads. Replies are stored and rendered on the thread page with no sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-learning discussion reply\", \"Lab Description\": \"Students reply to threads. Replies are stored and rendered on the thread page with no sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in donation platform donor message\nDescription: Donors can leave a message. These are rendered without escaping in the public donation wall.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in donation platform donor message\", \"Lab Description\": \"Donors can leave a message. These are rendered without escaping in the public donation wall.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in restaurant order notes\nDescription: Food ordering system allows custom notes per order. These are rendered to staff dashboards unsanitized.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in restaurant order notes\", \"Lab Description\": \"Food ordering system allows custom notes per order. These are rendered to staff dashboards unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in lost & found item description\nDescription: Users post found items with a description. The content is displayed without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in lost & found item description\", \"Lab Description\": \"Users post found items with a description. The content is displayed without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in product inquiry form\nDescription: Visitors can ask questions about products. The input is stored and shown on product pages without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in product inquiry form\", \"Lab Description\": \"Visitors can ask questions about products. The input is stored and shown on product pages without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in calendar event title\nDescription: A calendar app allows event titles to be stored and displayed in daily views. No sanitization is applied.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in calendar event title\", \"Lab Description\": \"A calendar app allows event titles to be stored and displayed in daily views. No sanitization is applied.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online petition reason field\nDescription: Petitioners submit a reason, which is rendered in supporter feeds unsanitized.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online petition reason field\", \"Lab Description\": \"Petitioners submit a reason, which is rendered in supporter feeds unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in help desk system subject field\nDescription: Support tickets have subjects stored and shown unescaped in agent inbox.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in help desk system subject field\", \"Lab Description\": \"Support tickets have subjects stored and shown unescaped in agent inbox.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in profile tag line\nDescription: A social network allows users to set a public tagline. This tagline is stored and displayed on profile pages without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in profile tag line\", \"Lab Description\": \"A social network allows users to set a public tagline. This tagline is stored and displayed on profile pages without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in recipe platform comments\nDescription: A cooking site lets users comment on recipes. These comments are stored and rendered directly without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe platform comments\", \"Lab Description\": \"A cooking site lets users comment on recipes. These comments are stored and rendered directly without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker issue title\nDescription: A bug tracking system allows custom issue titles. These titles are stored and displayed in project views without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker issue title\", \"Lab Description\": \"A bug tracking system allows custom issue titles. These titles are stored and displayed in project views without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in contact us name field\nDescription: The contact form stores the 'name' input and displays it in the admin dashboard without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in contact us name field\", \"Lab Description\": \"The contact form stores the 'name' input and displays it in the admin dashboard without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in code snippet sharing site\nDescription: A developer platform allows code snippets to be shared. The 'description' field is stored and rendered without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in code snippet sharing site\", \"Lab Description\": \"A developer platform allows code snippets to be shared. The 'description' field is stored and rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event planner custom message\nDescription: Users can send custom invites with a personal message. The message is shown on the invite view page unescaped.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event planner custom message\", \"Lab Description\": \"Users can send custom invites with a personal message. The message is shown on the invite view page unescaped.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in library review system\nDescription: Users can leave reviews for books. The review is rendered on the book page without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library review system\", \"Lab Description\": \"Users can leave reviews for books. The review is rendered on the book page without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in job application cover letter\nDescription: Applicants can add a cover letter message which is later rendered to recruiters without escaping.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job application cover letter\", \"Lab Description\": \"Applicants can add a cover letter message which is later rendered to recruiters without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in user-submitted poll option label\nDescription: Users can suggest new options in polls. The label is stored and reflected without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-submitted poll option label\", \"Lab Description\": \"Users can suggest new options in polls. The label is stored and reflected without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event RSVP note\nDescription: Attendees leave notes when RSVPing to events. These are shown to the host without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event RSVP note\", \"Lab Description\": \"Attendees leave notes when RSVPing to events. These are shown to the host without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel journal post title\nDescription: A travel blog allows users to submit journal entries with a title. The title is stored and rendered without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel journal post title\", \"Lab Description\": \"A travel blog allows users to submit journal entries with a title. The title is stored and rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in university forum bio field\nDescription: A university forum allows users to set a short bio. The bio is rendered without escaping in the user profile.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in university forum bio field\", \"Lab Description\": \"A university forum allows users to set a short bio. The bio is rendered without escaping in the user profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in resume builder summary section\nDescription: A resume builder platform allows users to write a summary. The summary field is rendered without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in resume builder summary section\", \"Lab Description\": \"A resume builder platform allows users to write a summary. The summary field is rendered without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in file-sharing platform description\nDescription: The file-sharing app lets users write descriptions for uploaded files. These are shown to others without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in file-sharing platform description\", \"Lab Description\": \"The file-sharing app lets users write descriptions for uploaded files. These are shown to others without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online quiz title input\nDescription: An online quiz creator allows instructors to name quizzes. These names are rendered on the student dashboard without sanitization.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online quiz title input\", \"Lab Description\": \"An online quiz creator allows instructors to name quizzes. These names are rendered on the student dashboard without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in portfolio description on freelance site\nDescription: A freelancing platform lets users set descriptions for their portfolios. These are not sanitized when rendered.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in portfolio description on freelance site\", \"Lab Description\": \"A freelancing platform lets users set descriptions for their portfolios. These are not sanitized when rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in fitness tracker workout name\nDescription: Users can name their workouts. The names are stored and displayed without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness tracker workout name\", \"Lab Description\": \"Users can name their workouts. The names are stored and displayed without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in conference system speaker bio\nDescription: Speakers can submit bios for conferences. These bios are shown without escaping on the agenda page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference system speaker bio\", \"Lab Description\": \"Speakers can submit bios for conferences. These bios are shown without escaping on the agenda page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in blog platform series description\nDescription: Writers can create a series of articles and add a description. The description is rendered without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog platform series description\", \"Lab Description\": \"Writers can create a series of articles and add a description. The description is rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in idea board submission\nDescription: Users can submit ideas to a public board. The content is stored and displayed without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in idea board submission\", \"Lab Description\": \"Users can submit ideas to a public board. The content is stored and displayed without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in employee recognition message field\nDescription: The HR system allows employees to send recognition messages to each other. These messages are rendered directly on the dashboard without sanitization. To solve: Inject a stored XSS payload in a recognition message that executes on page load.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in employee recognition message field\", \"Lab Description\": \"The HR system allows employees to send recognition messages to each other. These messages are rendered directly on the dashboard without sanitization. To solve: Inject a stored XSS payload in a recognition message that executes on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support request form redirect\nDescription: A support request form redirects to a confirmation page using a GET parameter for the user's name. The value is reflected in the HTML without encoding. To solve: Inject a reflected XSS payload into the name parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support request form redirect\", \"Lab Description\": \"A support request form redirects to a confirmation page using a GET parameter for the user's name. The value is reflected in the HTML without encoding. To solve: Inject a reflected XSS payload into the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in campaign announcement preview\nDescription: A marketing tool generates live previews of announcements using innerHTML from user input. There's no sanitization, resulting in DOM-based XSS. To solve: Inject a script payload and verify execution in preview pane.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in campaign announcement preview\", \"Lab Description\": \"A marketing tool generates live previews of announcements using innerHTML from user input. There's no sanitization, resulting in DOM-based XSS. To solve: Inject a script payload and verify execution in preview pane.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation-based XSS in dynamic invoice line editor\nDescription: An invoicing app allows adding custom line items. DOM mutations from a contentEditable field lead to unsafe innerHTML injection. To solve: Inject a payload that triggers JavaScript on DOM mutation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation-based XSS in dynamic invoice line editor\", \"Lab Description\": \"An invoicing app allows adding custom line items. DOM mutations from a contentEditable field lead to unsafe innerHTML injection. To solve: Inject a payload that triggers JavaScript on DOM mutation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in public event RSVP comments\nDescription: The app collects public RSVP comments for events, which are shown without escaping. This enables stored XSS. To solve: Submit a comment that executes JavaScript when the event page loads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in public event RSVP comments\", \"Lab Description\": \"The app collects public RSVP comments for events, which are shown without escaping. This enables stored XSS. To solve: Submit a comment that executes JavaScript when the event page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback widget thank you banner\nDescription: A floating feedback widget reflects user input in a thank you banner post-submission. There's no encoding, leading to reflected XSS. To solve: Inject a payload and trigger the banner display.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback widget thank you banner\", \"Lab Description\": \"A floating feedback widget reflects user input in a thank you banner post-submission. There's no encoding, leading to reflected XSS. To solve: Inject a payload and trigger the banner display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in admin system announcement bar\nDescription: Admins can set system-wide announcements shown to all users. The announcement is rendered as raw HTML, allowing stored XSS. To solve: Insert a script in the announcement field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in admin system announcement bar\", \"Lab Description\": \"Admins can set system-wide announcements shown to all users. The announcement is rendered as raw HTML, allowing stored XSS. To solve: Insert a script in the announcement field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in video platform comment preview\nDescription: A video site previews comments with JavaScript using innerHTML. The preview uses user input directly. To solve: Inject a DOM-based payload in a comment preview.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in video platform comment preview\", \"Lab Description\": \"A video site previews comments with JavaScript using innerHTML. The preview uses user input directly. To solve: Inject a DOM-based payload in a comment preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in student discussion board replies\nDescription: Students can reply to discussion threads. Replies are saved in a database and rendered without escaping. To solve: Inject a persistent XSS payload in a reply.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student discussion board replies\", \"Lab Description\": \"Students can reply to discussion threads. Replies are saved in a database and rendered without escaping. To solve: Inject a persistent XSS payload in a reply.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in PDF export metadata field\nDescription: An export-to-PDF tool includes metadata from query parameters. These are inserted into the PDF preview HTML unsafely. To solve: Inject a payload into the metadata field and trigger PDF preview.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in PDF export metadata field\", \"Lab Description\": \"An export-to-PDF tool includes metadata from query parameters. These are inserted into the PDF preview HTML unsafely. To solve: Inject a payload into the metadata field and trigger PDF preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in bug tracker issue title\nDescription: The bug tracking system allows users to create issues with titles. These titles are stored and rendered on the dashboard without escaping, allowing persistent XSS. To solve: Inject a script in the issue title and confirm execution on issue board view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker issue title\", \"Lab Description\": \"The bug tracking system allows users to create issues with titles. These titles are stored and rendered on the dashboard without escaping, allowing persistent XSS. To solve: Inject a script in the issue title and confirm execution on issue board view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter unsubscribe confirmation\nDescription: The unsubscribe page includes the user's email from a GET parameter and renders it into the confirmation HTML. This allows reflected XSS. To solve: Inject a payload into the email parameter and observe execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter unsubscribe confirmation\", \"Lab Description\": \"The unsubscribe page includes the user's email from a GET parameter and renders it into the confirmation HTML. This allows reflected XSS. To solve: Inject a payload into the email parameter and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in blog post comment field\nDescription: The blog platform allows commenting on posts. Comments are stored and displayed without sanitization. To solve: Submit a comment with an XSS payload and observe it triggering for readers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog post comment field\", \"Lab Description\": \"The blog platform allows commenting on posts. Comments are stored and displayed without sanitization. To solve: Submit a comment with an XSS payload and observe it triggering for readers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in report generator title preview\nDescription: A report generator allows users to input titles. The title is updated live via `innerHTML` without sanitization, enabling DOM-based XSS. To solve: Inject a payload in the title preview field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in report generator title preview\", \"Lab Description\": \"A report generator allows users to input titles. The title is updated live via `innerHTML` without sanitization, enabling DOM-based XSS. To solve: Inject a payload in the title preview field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in FAQ suggestion form\nDescription: Users can submit suggestions to be displayed on the FAQ page. These are rendered without escaping. To solve: Submit a script tag in a suggestion and verify execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in FAQ suggestion form\", \"Lab Description\": \"Users can submit suggestions to be displayed on the FAQ page. These are rendered without escaping. To solve: Submit a script tag in a suggestion and verify execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in gift card generator preview\nDescription: The site generates gift card previews using query params. These are rendered without encoding, causing reflected XSS. To solve: Inject JavaScript in the name parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in gift card generator preview\", \"Lab Description\": \"The site generates gift card previews using query params. These are rendered without encoding, causing reflected XSS. To solve: Inject JavaScript in the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in dynamic pricing calculator\nDescription: The calculator app reflects query parameters into a summary box via innerHTML. It does not sanitize the input. To solve: Inject a payload into a query parameter and observe execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic pricing calculator\", \"Lab Description\": \"The calculator app reflects query parameters into a summary box via innerHTML. It does not sanitize the input. To solve: Inject a payload into a query parameter and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in employee suggestion box\nDescription: A suggestion box stores feedback for management. The input is rendered without escaping, leading to stored XSS. To solve: Inject a malicious script into a suggestion.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in employee suggestion box\", \"Lab Description\": \"A suggestion box stores feedback for management. The input is rendered without escaping, leading to stored XSS. To solve: Inject a malicious script into a suggestion.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in quick order summary field\nDescription: The quick order summary feature reflects user data without escaping. If a payload is injected in the name field, it is rendered raw. To solve: Trigger reflected XSS via the name input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in quick order summary field\", \"Lab Description\": \"The quick order summary feature reflects user data without escaping. If a payload is injected in the name field, it is rendered raw. To solve: Trigger reflected XSS via the name input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online resume description\nDescription: A resume builder app allows users to enter a description field. This is rendered without escaping, causing persistent XSS. To solve: Inject a payload in the resume description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online resume description\", \"Lab Description\": \"A resume builder app allows users to enter a description field. This is rendered without escaping, causing persistent XSS. To solve: Inject a payload in the resume description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in customer support live ticket subject\nDescription: The live support system displays ticket subjects without escaping them on the agent dashboard. Attackers can inject JavaScript into the subject to execute code when viewed. To solve: Submit a support ticket with a script in the subject.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in customer support live ticket subject\", \"Lab Description\": \"The live support system displays ticket subjects without escaping them on the agent dashboard. Attackers can inject JavaScript into the subject to execute code when viewed. To solve: Submit a support ticket with a script in the subject.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact form thank you message\nDescription: The contact form reflects submitted names into a thank-you response without sanitization. This enables reflected XSS when a payload is submitted via the name field. To solve: Inject script in the name input and observe execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact form thank you message\", \"Lab Description\": \"The contact form reflects submitted names into a thank-you response without sanitization. This enables reflected XSS when a payload is submitted via the name field. To solve: Inject script in the name input and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in password reset link renderer\nDescription: The password reset tool renders user email from localStorage into the DOM using innerHTML, without escaping. To solve: Inject a payload into localStorage and reload the page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in password reset link renderer\", \"Lab Description\": \"The password reset tool renders user email from localStorage into the DOM using innerHTML, without escaping. To solve: Inject a payload into localStorage and reload the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in HR system job applicant notes\nDescription: Applicants submit notes with their job applications. These notes are stored and displayed to HR without sanitization. To solve: Inject a payload into the notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in HR system job applicant notes\", \"Lab Description\": \"Applicants submit notes with their job applications. These notes are stored and displayed to HR without sanitization. To solve: Inject a payload into the notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce coupon validation field\nDescription: The coupon code entry box reflects invalid codes in a response message without escaping, enabling reflected XSS. To solve: Inject a payload in the coupon parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce coupon validation field\", \"Lab Description\": \"The coupon code entry box reflects invalid codes in a response message without escaping, enabling reflected XSS. To solve: Inject a payload in the coupon parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in virtual classroom announcement field\nDescription: Teachers post announcements to students. These are saved and displayed without escaping, leading to stored XSS. To solve: Submit a malicious script in the announcement field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in virtual classroom announcement field\", \"Lab Description\": \"Teachers post announcements to students. These are saved and displayed without escaping, leading to stored XSS. To solve: Submit a malicious script in the announcement field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in product rating widget\nDescription: The product rating widget loads dynamic values from sessionStorage and injects them into the DOM using innerHTML. Lack of sanitization leads to DOM-based XSS. To solve: Inject a payload into sessionStorage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in product rating widget\", \"Lab Description\": \"The product rating widget loads dynamic values from sessionStorage and injects them into the DOM using innerHTML. Lack of sanitization leads to DOM-based XSS. To solve: Inject a payload into sessionStorage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in team feedback tool message board\nDescription: The feedback board accepts anonymous messages from employees. These messages are stored and displayed to management without escaping, creating a stored XSS vector. To solve: Submit XSS payload in message field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in team feedback tool message board\", \"Lab Description\": \"The feedback board accepts anonymous messages from employees. These messages are stored and displayed to management without escaping, creating a stored XSS vector. To solve: Submit XSS payload in message field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup confirmation\nDescription: The newsletter system reflects the 'name' field back into the HTML of the confirmation page, without escaping. To solve: Inject an alert script in the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup confirmation\", \"Lab Description\": \"The newsletter system reflects the 'name' field back into the HTML of the confirmation page, without escaping. To solve: Inject an alert script in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing title\nDescription: Real estate agents can add property listings with titles. These are shown on public pages. Lack of output encoding results in stored XSS. To solve: Inject a payload in the listing title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing title\", \"Lab Description\": \"Real estate agents can add property listings with titles. These are shown on public pages. Lack of output encoding results in stored XSS. To solve: Inject a payload in the listing title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online event registration form comment\nDescription: The event registration form allows users to leave comments that are displayed on the event page. The input is stored without sanitization, leading to a stored XSS vulnerability. To solve: Inject a payload in the comment field and trigger execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online event registration form comment\", \"Lab Description\": \"The event registration form allows users to leave comments that are displayed on the event page. The input is stored without sanitization, leading to a stored XSS vulnerability. To solve: Inject a payload in the comment field and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via comment preview system\nDescription: The application displays a live preview of comments using innerHTML from an input field. It fails to sanitize content, resulting in a DOM-based XSS. To solve: Inject a script into the comment box and observe live execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via comment preview system\", \"Lab Description\": \"The application displays a live preview of comments using innerHTML from an input field. It fails to sanitize content, resulting in a DOM-based XSS. To solve: Inject a script into the comment box and observe live execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in hotel booking special requests field\nDescription: Guests can submit special requests during hotel booking. These requests are shown to staff without escaping, allowing persistent script execution. To solve: Inject XSS payload in the request field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in hotel booking special requests field\", \"Lab Description\": \"Guests can submit special requests during hotel booking. These requests are shown to staff without escaping, allowing persistent script execution. To solve: Inject XSS payload in the request field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in failed login message\nDescription: Failed login attempts return the submitted username in an error message without encoding. This allows reflected XSS. To solve: Inject JavaScript via the username field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in failed login message\", \"Lab Description\": \"Failed login attempts return the submitted username in an error message without encoding. This allows reflected XSS. To solve: Inject JavaScript via the username field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event scheduler notes field\nDescription: Users can schedule meetings and leave notes. These notes are rendered for all attendees without sanitization. To solve: Inject an XSS payload in the notes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event scheduler notes field\", \"Lab Description\": \"Users can schedule meetings and leave notes. These notes are rendered for all attendees without sanitization. To solve: Inject an XSS payload in the notes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in article share preview link\nDescription: The article preview page displays a shared title passed in via the URL. No escaping is performed before rendering. To solve: Inject script into the title parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in article share preview link\", \"Lab Description\": \"The article preview page displays a shared title passed in via the URL. No escaping is performed before rendering. To solve: Inject script into the title parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in survey platform question title\nDescription: Survey creators can define question titles. These are shown to respondents without escaping, allowing persistent XSS. To solve: Inject a script in the title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in survey platform question title\", \"Lab Description\": \"Survey creators can define question titles. These are shown to respondents without escaping, allowing persistent XSS. To solve: Inject a script in the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in QR code label renderer\nDescription: QR label content is fetched from `localStorage` and rendered directly with innerHTML in the QR page. No sanitization is done. To solve: Inject payload into localStorage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in QR code label renderer\", \"Lab Description\": \"QR label content is fetched from `localStorage` and rendered directly with innerHTML in the QR page. No sanitization is done. To solve: Inject payload into localStorage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in healthcare appointment notes\nDescription: Patients can leave notes when scheduling appointments. These are shown to doctors without sanitization, enabling persistent XSS. To solve: Inject a script into notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in healthcare appointment notes\", \"Lab Description\": \"Patients can leave notes when scheduling appointments. These are shown to doctors without sanitization, enabling persistent XSS. To solve: Inject a script into notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in blog author search page\nDescription: The blog search page echoes the query back in the heading. No sanitization is applied. To solve: Inject a payload in the search parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in blog author search page\", \"Lab Description\": \"The blog search page echoes the query back in the heading. No sanitization is applied. To solve: Inject a payload in the search parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in freelance platform project description\nDescription: Freelancers submit project descriptions visible to clients. The app stores and renders the description without sanitization. To solve: Inject a persistent XSS payload in the project description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in freelance platform project description\", \"Lab Description\": \"Freelancers submit project descriptions visible to clients. The app stores and renders the description without sanitization. To solve: Inject a persistent XSS payload in the project description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in live price quote tool\nDescription: A live price estimator displays user input directly in the response page. There's no encoding of the value, allowing reflected XSS. To solve: Inject a script via the quote input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in live price quote tool\", \"Lab Description\": \"A live price estimator displays user input directly in the response page. There's no encoding of the value, allowing reflected XSS. To solve: Inject a script via the quote input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internship portal resume summary\nDescription: Interns upload resume summaries that are displayed to companies. The summary field is vulnerable to stored XSS. To solve: Submit a script as part of the resume summary.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internship portal resume summary\", \"Lab Description\": \"Interns upload resume summaries that are displayed to companies. The summary field is vulnerable to stored XSS. To solve: Submit a script as part of the resume summary.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in user greeting message\nDescription: The dashboard uses query parameters to greet users by name. The value is inserted with innerHTML without sanitization. To solve: Inject a payload via the query string.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in user greeting message\", \"Lab Description\": \"The dashboard uses query parameters to greet users by name. The value is inserted with innerHTML without sanitization. To solve: Inject a payload via the query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in peer review portal feedback box\nDescription: Students review each other's work and leave feedback. Feedback is displayed to others without escaping, resulting in persistent XSS. To solve: Inject JavaScript into the feedback box.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in peer review portal feedback box\", \"Lab Description\": \"Students review each other's work and leave feedback. Feedback is displayed to others without escaping, resulting in persistent XSS. To solve: Inject JavaScript into the feedback box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in language selection parameter\nDescription: The application accepts a `lang` parameter and displays it as a label. It doesn't sanitize the value, enabling reflected XSS. To solve: Inject a script via the lang parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in language selection parameter\", \"Lab Description\": \"The application accepts a `lang` parameter and displays it as a label. It doesn't sanitize the value, enabling reflected XSS. To solve: Inject a script via the lang parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in job posting platform cover letter\nDescription: Applicants write cover letters that are displayed to recruiters. No escaping is applied to the letter content, allowing stored XSS. To solve: Inject script in the letter.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job posting platform cover letter\", \"Lab Description\": \"Applicants write cover letters that are displayed to recruiters. No escaping is applied to the letter content, allowing stored XSS. To solve: Inject script in the letter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in real-time analytics viewer\nDescription: User input is appended to the live stats label via innerHTML without sanitization. This allows DOM-based XSS. To solve: Inject a malicious value and watch for execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in real-time analytics viewer\", \"Lab Description\": \"User input is appended to the live stats label via innerHTML without sanitization. This allows DOM-based XSS. To solve: Inject a malicious value and watch for execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in profile experience section\nDescription: Users can add professional experience to their profile. The description field is stored and displayed without escaping, allowing XSS. To solve: Inject JavaScript into the experience field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in profile experience section\", \"Lab Description\": \"Users can add professional experience to their profile. The description field is stored and displayed without escaping, allowing XSS. To solve: Inject JavaScript into the experience field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support contact confirmation page\nDescription: User input from the contact form is reflected in the confirmation response. Thereâ€™s no sanitization, making it vulnerable to reflected XSS. To solve: Inject JavaScript via the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support contact confirmation page\", \"Lab Description\": \"User input from the contact form is reflected in the confirmation response. Thereâ€™s no sanitization, making it vulnerable to reflected XSS. To solve: Inject JavaScript via the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online course description\nDescription: The course creation page allows instructors to enter rich descriptions. The input is stored and rendered without escaping. To solve: Inject a script in the course description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online course description\", \"Lab Description\": \"The course creation page allows instructors to enter rich descriptions. The input is stored and rendered without escaping. To solve: Inject a script in the course description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in calendar event preview\nDescription: A calendar tool shows event previews from query parameters. The input is not encoded, allowing reflected XSS. To solve: Inject a script in the title parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in calendar event preview\", \"Lab Description\": \"A calendar tool shows event previews from query parameters. The input is not encoded, allowing reflected XSS. To solve: Inject a script in the title parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel portal trip notes\nDescription: Travelers can add personal notes for trips. These notes are rendered on trip pages without sanitization. To solve: Inject a persistent script in the notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel portal trip notes\", \"Lab Description\": \"Travelers can add personal notes for trips. These notes are rendered on trip pages without sanitization. To solve: Inject a persistent script in the notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in online invoice viewer footer\nDescription: The invoice viewer reads a footer note from localStorage and injects it via innerHTML. To solve: Add a malicious footer value in localStorage.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in online invoice viewer footer\", \"Lab Description\": \"The invoice viewer reads a footer note from localStorage and injects it via innerHTML. To solve: Add a malicious footer value in localStorage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in book review system\nDescription: Users submit reviews on books, which are rendered to the public. The content is displayed without escaping, enabling stored XSS. To solve: Inject a payload into the review form.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in book review system\", \"Lab Description\": \"Users submit reviews on books, which are rendered to the public. The content is displayed without escaping, enabling stored XSS. To solve: Inject a payload into the review form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in poll results summary\nDescription: The app displays submitted poll answers in the URL response. The input is reflected into the DOM without sanitization. To solve: Inject a payload into the answer parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in poll results summary\", \"Lab Description\": \"The app displays submitted poll answers in the URL response. The input is reflected into the DOM without sanitization. To solve: Inject a payload into the answer parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in CRM user greeting\nDescription: The CRM dashboard personalizes greetings using location.hash. It writes the name using innerHTML. To solve: Inject a malicious fragment to execute JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in CRM user greeting\", \"Lab Description\": \"The CRM dashboard personalizes greetings using location.hash. It writes the name using innerHTML. To solve: Inject a malicious fragment to execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in newsletter platform welcome message\nDescription: Newsletter creators can write custom welcome messages. These are rendered to subscribers without sanitization. To solve: Inject XSS payload in the welcome text.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in newsletter platform welcome message\", \"Lab Description\": \"Newsletter creators can write custom welcome messages. These are rendered to subscribers without sanitization. To solve: Inject XSS payload in the welcome text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in booking confirmation page\nDescription: Booking details are reflected in the confirmation page using URL parameters. The input is not encoded properly. To solve: Inject JavaScript via the 'name' parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in booking confirmation page\", \"Lab Description\": \"Booking details are reflected in the confirmation page using URL parameters. The input is not encoded properly. To solve: Inject JavaScript via the 'name' parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in code snippet sharing site\nDescription: Users can publish code snippets that get rendered on a shared page. There's no escaping of user input, allowing stored XSS. To solve: Submit a snippet with a payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in code snippet sharing site\", \"Lab Description\": \"Users can publish code snippets that get rendered on a shared page. There's no escaping of user input, allowing stored XSS. To solve: Submit a snippet with a payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event manager speaker bio\nDescription: Organizers can add speaker bios, which are shown on the event page without escaping HTML. To solve: Inject a script in the bio field and trigger it from the speaker page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event manager speaker bio\", \"Lab Description\": \"Organizers can add speaker bios, which are shown on the event page without escaping HTML. To solve: Inject a script in the bio field and trigger it from the speaker page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce gift message preview\nDescription: The app lets users preview gift messages, but reflects user input without sanitization. To solve: Inject a script in the message parameter and observe execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce gift message preview\", \"Lab Description\": \"The app lets users preview gift messages, but reflects user input without sanitization. To solve: Inject a script in the message parameter and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in personal finance tracker notes\nDescription: Users can add notes to transactions. These are rendered without escaping. To solve: Inject a script in the note field and confirm execution when viewing history.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in personal finance tracker notes\", \"Lab Description\": \"Users can add notes to transactions. These are rendered without escaping. To solve: Inject a script in the note field and confirm execution when viewing history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in quiz platform result page\nDescription: The quiz result page reads the user's score from location.hash and renders it using innerHTML. To solve: Inject a script via hash and reload the page.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in quiz platform result page\", \"Lab Description\": \"The quiz result page reads the user's score from location.hash and renders it using innerHTML. To solve: Inject a script via hash and reload the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in food delivery special instructions\nDescription: Special instructions for food orders are rendered on the order view without escaping. To solve: Inject a script in the instructions field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in food delivery special instructions\", \"Lab Description\": \"Special instructions for food orders are rendered on the order view without escaping. To solve: Inject a script in the instructions field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in meeting room booking system\nDescription: The app reflects the 'room' parameter into a confirmation page without escaping. To solve: Inject a script in the room field and observe the confirmation.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in meeting room booking system\", \"Lab Description\": \"The app reflects the 'room' parameter into a confirmation page without escaping. To solve: Inject a script in the room field and observe the confirmation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car rental pickup instructions\nDescription: Rental customers can provide pickup instructions. These are rendered to the dispatcher without escaping. To solve: Inject a persistent XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car rental pickup instructions\", \"Lab Description\": \"Rental customers can provide pickup instructions. These are rendered to the dispatcher without escaping. To solve: Inject a persistent XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in fitness app workout summary\nDescription: The summary page takes a value from location.search and inserts it with innerHTML. To solve: Inject XSS via the URL parameter.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in fitness app workout summary\", \"Lab Description\": \"The summary page takes a value from location.search and inserts it with innerHTML. To solve: Inject XSS via the URL parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in recruitment application resume comment\nDescription: Recruiters can leave comments on resumes. These comments are rendered on the admin view without sanitization. To solve: Inject a script as a recruiter comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recruitment application resume comment\", \"Lab Description\": \"Recruiters can leave comments on resumes. These comments are rendered on the admin view without sanitization. To solve: Inject a script as a recruiter comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in file upload confirmation\nDescription: After a user uploads a file, the filename is reflected into the page without encoding. To solve: Inject XSS into the filename and observe reflection.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in file upload confirmation\", \"Lab Description\": \"After a user uploads a file, the filename is reflected into the page without encoding. To solve: Inject XSS into the filename and observe reflection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel booking special requests\nDescription: The travel booking form allows users to leave special requests that are displayed to the airline staff without sanitization. To solve: Inject a persistent script that executes when the staff views the request.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking special requests\", \"Lab Description\": \"The travel booking form allows users to leave special requests that are displayed to the airline staff without sanitization. To solve: Inject a persistent script that executes when the staff views the request.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in discount coupon input\nDescription: The discount code is reflected back to the user without sanitization when it's invalid. To solve: Inject a script via the coupon field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in discount coupon input\", \"Lab Description\": \"The discount code is reflected back to the user without sanitization when it's invalid. To solve: Inject a script via the coupon field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online education class feedback\nDescription: Students can leave feedback after a session. The text is rendered directly on the instructor dashboard. To solve: Inject persistent XSS in feedback text.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online education class feedback\", \"Lab Description\": \"Students can leave feedback after a session. The text is rendered directly on the instructor dashboard. To solve: Inject persistent XSS in feedback text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online poll title parameter\nDescription: The poll preview page reflects a poll title parameter from the URL. The input is not encoded before rendering, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online poll title parameter\", \"Lab Description\": \"The poll preview page reflects a poll title parameter from the URL. The input is not encoded before rendering, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in hotel booking contact field\nDescription: Users enter contact info during hotel booking. The email/phone is displayed to staff without escaping. To solve: Inject a persistent script in the contact field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in hotel booking contact field\", \"Lab Description\": \"Users enter contact info during hotel booking. The email/phone is displayed to staff without escaping. To solve: Inject a persistent script in the contact field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in shopping cart item preview\nDescription: The cart item preview reads item name from location.hash and inserts it with innerHTML. To solve: Inject a malicious hash and reload the preview page.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in shopping cart item preview\", \"Lab Description\": \"The cart item preview reads item name from location.hash and inserts it with innerHTML. To solve: Inject a malicious hash and reload the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in messaging app display name\nDescription: Users can update display names. These are rendered to other users in chat without escaping. To solve: Inject a script in the name field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in messaging app display name\", \"Lab Description\": \"Users can update display names. These are rendered to other users in chat without escaping. To solve: Inject a script in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset redirect URL\nDescription: The password reset confirmation page accepts a redirect parameter in the query string. The parameter is reflected without encoding.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset redirect URL\", \"Lab Description\": \"The password reset confirmation page accepts a redirect parameter in the query string. The parameter is reflected without encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in music app playlist description\nDescription: Users can describe their playlists. These descriptions are rendered on public pages without escaping. To solve: Inject a persistent XSS in the description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in music app playlist description\", \"Lab Description\": \"Users can describe their playlists. These descriptions are rendered on public pages without escaping. To solve: Inject a persistent XSS in the description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in language learning app greeting banner\nDescription: The app renders a greeting based on the language from the hash. It's inserted into a banner using innerHTML, leading to DOM-based XSS.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in language learning app greeting banner\", \"Lab Description\": \"The app renders a greeting based on the language from the hash. It's inserted into a banner using innerHTML, leading to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in team chat message history\nDescription: A collaboration platform stores chat messages submitted via POST requests. Messages are rendered without sanitization in team history view. To solve: Inject a script in a chat message and confirm it executes when history is loaded.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in team chat message history\", \"Lab Description\": \"A collaboration platform stores chat messages submitted via POST requests. Messages are rendered without sanitization in team history view. To solve: Inject a script in a chat message and confirm it executes when history is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup thank-you page\nDescription: The newsletter signup form posts an email and name, which is echoed on the thank-you page. The name field is reflected without escaping. To solve: Inject an XSS payload via name field and trigger execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup thank-you page\", \"Lab Description\": \"The newsletter signup form posts an email and name, which is echoed on the thank-you page. The name field is reflected without escaping. To solve: Inject an XSS payload via name field and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user-generated announcements\nDescription: A notice board feature allows users to post announcements. Input is stored in the DB and rendered directly on the homepage. To solve: Inject a script into the announcement text and reload the homepage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-generated announcements\", \"Lab Description\": \"A notice board feature allows users to post announcements. Input is stored in the DB and rendered directly on the homepage. To solve: Inject a script into the announcement text and reload the homepage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in dynamic event response form\nDescription: A RSVP form posts attendee names, then echoes the name back in the success message. The response is vulnerable to reflected XSS. To solve: Inject a script in the name field and trigger upon form submission.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in dynamic event response form\", \"Lab Description\": \"A RSVP form posts attendee names, then echoes the name back in the success message. The response is vulnerable to reflected XSS. To solve: Inject a script in the name field and trigger upon form submission.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in photo gallery description\nDescription: Users can upload images with descriptions. The description field is displayed on the public gallery without escaping. To solve: Inject a script via the description and verify its execution on view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in photo gallery description\", \"Lab Description\": \"Users can upload images with descriptions. The description field is displayed on the public gallery without escaping. To solve: Inject a script via the description and verify its execution on view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in classroom Q&A forum\nDescription: Students can ask questions via a POST form. The application renders questions without sanitizing HTML. To solve: Inject a script in the question text and confirm execution on the teacherâ€™s view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in classroom Q&A forum\", \"Lab Description\": \"Students can ask questions via a POST form. The application renders questions without sanitizing HTML. To solve: Inject a script in the question text and confirm execution on the teacherâ€™s view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in customer feedback handler\nDescription: A feedback form accepts POSTed comments and reflects them back in a confirmation box. Without sanitization, attackers can inject scripts. To solve: Inject an XSS payload via comment field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in customer feedback handler\", \"Lab Description\": \"A feedback form accepts POSTed comments and reflects them back in a confirmation box. Without sanitization, attackers can inject scripts. To solve: Inject an XSS payload via comment field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in developer bug report field\nDescription: A bug tracker accepts POSTed descriptions of issues. The application fails to sanitize HTML before rendering, leading to stored XSS. To solve: Inject a payload into the bug description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in developer bug report field\", \"Lab Description\": \"A bug tracker accepts POSTed descriptions of issues. The application fails to sanitize HTML before rendering, leading to stored XSS. To solve: Inject a payload into the bug description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online recipe contribution field\nDescription: Users can submit new recipes using a POST form. The recipe description is displayed without sanitization on the homepage. To solve: Inject JavaScript in the description and confirm execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online recipe contribution field\", \"Lab Description\": \"Users can submit new recipes using a POST form. The recipe description is displayed without sanitization on the homepage. To solve: Inject JavaScript in the description and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in error reporting module\nDescription: The application shows raw error messages from form submissions. When invalid data is submitted, the error is reflected without escaping. To solve: Inject a payload in a required field to trigger the XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in error reporting module\", \"Lab Description\": \"The application shows raw error messages from form submissions. When invalid data is submitted, the error is reflected without escaping. To solve: Inject a payload in a required field to trigger the XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in fitness app workout notes\nDescription: Users can submit workout notes via POST, which are shown on their profile without sanitization. To solve: Inject a persistent script in the notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness app workout notes\", \"Lab Description\": \"Users can submit workout notes via POST, which are shown on their profile without sanitization. To solve: Inject a persistent script in the notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in travel booking confirmation page\nDescription: A travel booking form reflects the userâ€™s name in the confirmation message. Input is not sanitized. To solve: Inject a script in the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in travel booking confirmation page\", \"Lab Description\": \"A travel booking form reflects the userâ€™s name in the confirmation message. Input is not sanitized. To solve: Inject a script in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in grocery app review comments\nDescription: Users can leave comments on grocery items. These comments are stored and shown to others. To solve: Inject a stored XSS payload in the comment field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in grocery app review comments\", \"Lab Description\": \"Users can leave comments on grocery items. These comments are stored and shown to others. To solve: Inject a stored XSS payload in the comment field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in library system book description\nDescription: Admins can add books with descriptions. Descriptions are rendered on the public catalog without sanitization. To solve: Submit a malicious script in the book description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library system book description\", \"Lab Description\": \"Admins can add books with descriptions. Descriptions are rendered on the public catalog without sanitization. To solve: Submit a malicious script in the book description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in event invitation form\nDescription: The event invitation form reflects the userâ€™s input back in the confirmation page. No escaping is done. To solve: Submit a malicious name to trigger XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in event invitation form\", \"Lab Description\": \"The event invitation form reflects the userâ€™s input back in the confirmation page. No escaping is done. To solve: Submit a malicious name to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in student portal report comments\nDescription: Teachers can leave comments on student reports. These are rendered for students without sanitization. To solve: Inject a script in the comment and test across accounts.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student portal report comments\", \"Lab Description\": \"Teachers can leave comments on student reports. These are rendered for students without sanitization. To solve: Inject a script in the comment and test across accounts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in restaurant feedback popup\nDescription: Users can send quick feedback after checkout. Feedback is reflected in a modal without escaping. To solve: Inject a script in the feedback form.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in restaurant feedback popup\", \"Lab Description\": \"Users can send quick feedback after checkout. Feedback is reflected in a modal without escaping. To solve: Inject a script in the feedback form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in portfolio builder bio section\nDescription: Users can build a public portfolio with a bio. The bio input is rendered using innerHTML with no sanitation. To solve: Inject a script in the bio section.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in portfolio builder bio section\", \"Lab Description\": \"Users can build a public portfolio with a bio. The bio input is rendered using innerHTML with no sanitation. To solve: Inject a script in the bio section.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in conference session proposal form\nDescription: Speakers submit proposals including session abstracts. Abstracts are rendered on the public agenda page without sanitization. To solve: Submit a malicious abstract.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference session proposal form\", \"Lab Description\": \"Speakers submit proposals including session abstracts. Abstracts are rendered on the public agenda page without sanitization. To solve: Submit a malicious abstract.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact form reply page\nDescription: After users submit a contact form, their name and message are echoed in a reply page without escaping. To solve: Inject a script in the message input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact form reply page\", \"Lab Description\": \"After users submit a contact form, their name and message are echoed in a reply page without escaping. To solve: Inject a script in the message input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in classroom discussion board\nDescription: The classroom platform allows students to post questions. These posts are stored and rendered without escaping HTML. To solve: Inject a persistent XSS payload in a question submission.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in classroom discussion board\", \"Lab Description\": \"The classroom platform allows students to post questions. These posts are stored and rendered without escaping HTML. To solve: Inject a persistent XSS payload in a question submission.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in resume preview form\nDescription: The resume builder reflects user input in the live preview. No sanitization is done. To solve: Inject a script in the 'skills' field and trigger XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in resume preview form\", \"Lab Description\": \"The resume builder reflects user input in the live preview. No sanitization is done. To solve: Inject a script in the 'skills' field and trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user-submitted FAQ content\nDescription: Users can suggest FAQ entries. These are reviewed by admins and displayed directly on the FAQ page. Input is not sanitized. To solve: Inject script in the question or answer field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-submitted FAQ content\", \"Lab Description\": \"Users can suggest FAQ entries. These are reviewed by admins and displayed directly on the FAQ page. Input is not sanitized. To solve: Inject script in the question or answer field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online invoice client name field\nDescription: The invoice generator reflects the client name after generation. The name is not escaped before being inserted into the DOM. To solve: Inject XSS in the client name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online invoice client name field\", \"Lab Description\": \"The invoice generator reflects the client name after generation. The name is not escaped before being inserted into the DOM. To solve: Inject XSS in the client name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in public travel diary entries\nDescription: Users can submit travel experiences as diary entries. These are displayed on a public feed without filtering HTML content. To solve: Inject a script into the diary body.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in public travel diary entries\", \"Lab Description\": \"Users can submit travel experiences as diary entries. These are displayed on a public feed without filtering HTML content. To solve: Inject a script into the diary body.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce coupon generator\nDescription: Users receive a coupon preview with their name. The name is reflected back into the HTML. To solve: Inject script into the name parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce coupon generator\", \"Lab Description\": \"Users receive a coupon preview with their name. The name is reflected back into the HTML. To solve: Inject script into the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in chatroom private messages\nDescription: Private messages in the chatroom are stored and displayed using innerHTML without filtering. To solve: Inject a persistent XSS payload into the message content.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in chatroom private messages\", \"Lab Description\": \"Private messages in the chatroom are stored and displayed using innerHTML without filtering. To solve: Inject a persistent XSS payload into the message content.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IT support ticket notes\nDescription: Users can leave notes on their IT support tickets. These notes are stored and rendered on the support view without escaping. To solve: Inject a payload in the note body.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IT support ticket notes\", \"Lab Description\": \"Users can leave notes on their IT support tickets. These notes are stored and rendered on the support view without escaping. To solve: Inject a payload in the note body.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup thank-you page\nDescription: The thank-you page reflects the userâ€™s email address after signup. Email is not escaped. To solve: Inject script into the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup thank-you page\", \"Lab Description\": \"The thank-you page reflects the userâ€™s email address after signup. Email is not escaped. To solve: Inject script into the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in food delivery review system\nDescription: Customers can submit reviews on food deliveries. These reviews are shown publicly without sanitation. To solve: Inject XSS into the review content.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in food delivery review system\", \"Lab Description\": \"Customers can submit reviews on food deliveries. These reviews are shown publicly without sanitation. To solve: Inject XSS into the review content.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE TRANSFORM\nDescription: A data processing system dynamically creates PostgreSQL transforms between data types. The transform functions are concatenated directly into CREATE TRANSFORM statements, allowing injection during type conversion operations.\nDifficulty: Hard\nVuln: PostgreSQL Transform Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE TRANSFORM\", \"Lab Description\": \"A data processing system dynamically creates PostgreSQL transforms between data types. The transform functions are concatenated directly into CREATE TRANSFORM statements, allowing injection during type conversion operations.\", \"Vulnerability name\": \"PostgreSQL Transform Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL Component_Service Metrics\nDescription: A monitoring system uses MySQL's component_service metrics with dynamic filter expressions. The metric filters are concatenated directly into performance_schema queries, allowing injection through crafted metric names.\nDifficulty: Medium\nVuln: MySQL Component Metrics Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Component_Service Metrics\", \"Lab Description\": \"A monitoring system uses MySQL's component_service metrics with dynamic filter expressions. The metric filters are concatenated directly into performance_schema queries, allowing injection through crafted metric names.\", \"Vulnerability name\": \"MySQL Component Metrics Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\nDescription: A graph analytics platform builds SHORTEST_PATH queries with dynamic node filters. The filter conditions are concatenated directly into graph traversal logic, allowing injection during path calculation.\nDifficulty: Hard\nVuln: SQL Server Graph Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\", \"Lab Description\": \"A graph analytics platform builds SHORTEST_PATH queries with dynamic node filters. The filter conditions are concatenated directly into graph traversal logic, allowing injection during path calculation.\", \"Vulnerability name\": \"SQL Server Graph Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle Text INDEX SET STOPLIST\nDescription: A document search system dynamically configures Oracle Text stoplists. The stoplist parameters are concatenated directly into index maintenance operations, allowing injection during search optimization.\nDifficulty: Medium\nVuln: Oracle Text Stoplist Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text INDEX SET STOPLIST\", \"Lab Description\": \"A document search system dynamically configures Oracle Text stoplists. The stoplist parameters are concatenated directly into index maintenance operations, allowing injection during search optimization.\", \"Vulnerability name\": \"Oracle Text Stoplist Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake EXTERNAL FUNCTION Request Transformers\nDescription: A Snowflake pipeline uses external functions with dynamic request transformers. The JavaScript transformer code is concatenated directly into function definitions, allowing injection during API request generation.\nDifficulty: Easy\nVuln: Snowflake Request Transformer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake EXTERNAL FUNCTION Request Transformers\", \"Lab Description\": \"A Snowflake pipeline uses external functions with dynamic request transformers. The JavaScript transformer code is concatenated directly into function definitions, allowing injection during API request generation.\", \"Vulnerability name\": \"Snowflake Request Transformer Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in BigQuery ARRAY_AGG Order By Clause\nDescription: A data visualization tool builds ARRAY_AGG queries with dynamic ORDER BY expressions. The sort clauses are concatenated directly into array aggregation, allowing injection during result ordering.\nDifficulty: Medium\nVuln: BigQuery Array Order Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery ARRAY_AGG Order By Clause\", \"Lab Description\": \"A data visualization tool builds ARRAY_AGG queries with dynamic ORDER BY expressions. The sort clauses are concatenated directly into array aggregation, allowing injection during result ordering.\", \"Vulnerability name\": \"BigQuery Array Order Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse CETAS Partition Clause\nDescription: A data pipeline creates CETAS tables with dynamic partition specifications. The partition clauses are concatenated directly into external table creation, allowing injection during file writing operations.\nDifficulty: Hard\nVuln: Synapse CETAS Partition Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS Partition Clause\", \"Lab Description\": \"A data pipeline creates CETAS tables with dynamic partition specifications. The partition clauses are concatenated directly into external table creation, allowing injection during file writing operations.\", \"Vulnerability name\": \"Synapse CETAS Partition Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Delta Lake OPTIMIZE ZORDER BY\nDescription: A data optimization job uses OPTIMIZE with dynamic ZORDER BY columns. The column names are concatenated directly into file reorganization commands, allowing injection during data compaction.\nDifficulty: Medium\nVuln: Delta Lake ZORDER Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Delta Lake OPTIMIZE ZORDER BY\", \"Lab Description\": \"A data optimization job uses OPTIMIZE with dynamic ZORDER BY columns. The column names are concatenated directly into file reorganization commands, allowing injection during data compaction.\", \"Vulnerability name\": \"Delta Lake ZORDER Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift UNLOAD MANIFEST\nDescription: A data export pipeline uses UNLOAD with dynamic manifest options. The manifest parameters are concatenated directly into S3 export operations, allowing injection during file listing generation.\nDifficulty: Hard\nVuln: Redshift Manifest Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift UNLOAD MANIFEST\", \"Lab Description\": \"A data export pipeline uses UNLOAD with dynamic manifest options. The manifest parameters are concatenated directly into S3 export operations, allowing injection during file listing generation.\", \"Vulnerability name\": \"Redshift Manifest Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Snowflake STREAMS Table Parameter\nDescription: A change data capture system creates STREAMS with dynamic table parameters. The table specifications are concatenated directly into change tracking setup, allowing injection during stream initialization.\nDifficulty: Medium\nVuln: Snowflake Stream Table Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake STREAMS Table Parameter\", \"Lab Description\": \"A change data capture system creates STREAMS with dynamic table parameters. The table specifications are concatenated directly into change tracking setup, allowing injection during stream initialization.\", \"Vulnerability name\": \"Snowflake Stream Table Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT CASCADE\nDescription: A schema migration tool builds INTERLEAVE IN PARENT clauses with dynamic cascade options. The cascade parameters are concatenated directly into table relationships, allowing injection during schema modification.\nDifficulty: Hard\nVuln: Spanner Interleave Cascade Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT CASCADE\", \"Lab Description\": \"A schema migration tool builds INTERLEAVE IN PARENT clauses with dynamic cascade options. The cascade parameters are concatenated directly into table relationships, allowing injection during schema modification.\", \"Vulnerability name\": \"Spanner Interleave Cascade Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Data Explorer External Table Schema Inference\nDescription: A Kusto cluster creates external tables with dynamic schema inference parameters. The inference clauses are concatenated directly into schema detection, allowing injection during table creation.\nDifficulty: Medium\nVuln: Kusto Schema Inference Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer External Table Schema Inference\", \"Lab Description\": \"A Kusto cluster creates external tables with dynamic schema inference parameters. The inference clauses are concatenated directly into schema detection, allowing injection during table creation.\", \"Vulnerability name\": \"Kusto Schema Inference Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\nDescription: An application builds Elasticsearch ODBC connection strings with dynamic properties. The properties are concatenated directly into driver initialization, allowing injection during connection establishment.\nDifficulty: Hard\nVuln: Elasticsearch ODBC Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An application builds Elasticsearch ODBC connection strings with dynamic properties. The properties are concatenated directly into driver initialization, allowing injection during connection establishment.\", \"Vulnerability name\": \"Elasticsearch ODBC Connection Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Escaping\nDescription: A Druid cluster processes SQL queries with dynamic identifier escaping. The escape sequences are concatenated directly into query planning, allowing injection through crafted identifier patterns.\nDifficulty: Medium\nVuln: Druid Identifier Escape Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A Druid cluster processes SQL queries with dynamic identifier escaping. The escape sequences are concatenated directly into query planning, allowing injection through crafted identifier patterns.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux Yield Name Parameter\nDescription: A monitoring system uses InfluxDB Flux with dynamic yield names. The yield identifiers are concatenated directly into result processing, allowing injection during data output generation.\nDifficulty: Hard\nVuln: Flux Yield Name Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Yield Name Parameter\", \"Lab Description\": \"A monitoring system uses InfluxDB Flux with dynamic yield names. The yield identifiers are concatenated directly into result processing, allowing injection during data output generation.\", \"Vulnerability name\": \"Flux Yield Name Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Refresh Policy\nDescription: A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialization jobs, allowing injection during view maintenance.\nDifficulty: Hard\nVuln: Timescale Refresh Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Refresh Policy\", \"Lab Description\": \"A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialization jobs, allowing injection during view maintenance.\", \"Vulnerability name\": \"Timescale Refresh Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Changefeed Filter Expressions\nDescription: A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation, allowing injection during data capture.\nDifficulty: Medium\nVuln: CockroachCDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Changefeed Filter Expressions\", \"Lab Description\": \"A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation, allowing injection during data capture.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations, allowing injection during file access.\nDifficulty: Medium\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations, allowing injection during file access.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation, allowing injection during initial population.\nDifficulty: Hard\nVuln: Materialized View Data Clause Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation, allowing injection during initial population.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation, allowing injection during cryptographic verification.\nDifficulty: Easy\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation, allowing injection during cryptographic verification.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Google BigQuery Wildcard Table Patterns\nDescription: A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses, allowing injection during table expansion.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses, allowing injection during table expansion.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake Session Parameter Defaults\nDescription: A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization, allowing injection during connection setup.\nDifficulty: Hard\nVuln: Snowflake Session Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization, allowing injection during connection setup.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation, allowing injection during cluster startup.\nDifficulty: Easy\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation, allowing injection during cluster startup.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration, allowing injection during UDF execution.\nDifficulty: Medium\nVuln: Trino Function Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration, allowing injection during UDF execution.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls, allowing injection during table generation.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls, allowing injection during table generation.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Dictionary Source URLs\nDescription: A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions, allowing injection during data loading.\nDifficulty: Medium\nVuln: ClickHouse Dictionary URL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions, allowing injection during data loading.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in MongoDB $expr Operator\nDescription: A NoSQL application builds aggregation pipelines with dynamic $expr conditions. The expressions are concatenated directly into pipeline stages, allowing injection during document processing.\nDifficulty: Medium\nVuln: MongoDB Expression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB $expr Operator\", \"Lab Description\": \"A NoSQL application builds aggregation pipelines with dynamic $expr conditions. The expressions are concatenated directly into pipeline stages, allowing injection during document processing.\", \"Vulnerability name\": \"MongoDB Expression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in MariaDB System Versioning\nDescription: A temporal database system uses MariaDB's system versioning with dynamic AS OF parameters. The timestamp expressions are concatenated directly into historical queries.\nDifficulty: Hard\nVuln: MariaDB Temporal Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MariaDB System Versioning\", \"Lab Description\": \"A temporal database system uses MariaDB's system versioning with dynamic AS OF parameters. The timestamp expressions are concatenated directly into historical queries.\", \"Vulnerability name\": \"MariaDB Temporal Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in IBM DB2 Label-Based Access Control\nDescription: A security system uses DB2's LBAC with dynamic security label comparisons. The label expressions are concatenated directly into row filtering.\nDifficulty: Hard\nVuln: DB2 LBAC Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in IBM DB2 Label-Based Access Control\", \"Lab Description\": \"A security system uses DB2's LBAC with dynamic security label comparisons. The label expressions are concatenated directly into row filtering.\", \"Vulnerability name\": \"DB2 LBAC Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SAP HANA Calculation View Parameters\nDescription: An analytics platform builds calculation views with dynamic input parameters. The parameter values are concatenated directly into view execution.\nDifficulty: Hard\nVuln: HANA Calc View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SAP HANA Calculation View Parameters\", \"Lab Description\": \"An analytics platform builds calculation views with dynamic input parameters. The parameter values are concatenated directly into view execution.\", \"Vulnerability name\": \"HANA Calc View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Teradata Query Banding\nDescription: A monitoring system uses Teradata query bands with dynamic session attributes. The band values are concatenated directly into workload management.\nDifficulty: Medium\nVuln: Teradata Query Band Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Teradata Query Banding\", \"Lab Description\": \"A monitoring system uses Teradata query bands with dynamic session attributes. The band values are concatenated directly into workload management.\", \"Vulnerability name\": \"Teradata Query Band Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Oracle Text CONTAINS Scoring\nDescription: A search application builds Oracle Text queries with dynamic score expressions. The scoring parameters are concatenated directly into CONTAINS operations.\nDifficulty: Hard\nVuln: Oracle Text Score Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text CONTAINS Scoring\", \"Lab Description\": \"A search application builds Oracle Text queries with dynamic score expressions. The scoring parameters are concatenated directly into CONTAINS operations.\", \"Vulnerability name\": \"Oracle Text Score Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQLite FTS5 Virtual Table Options\nDescription: A mobile app creates SQLite FTS5 tables with dynamic content options. The configuration strings are concatenated directly into full-text search setup.\nDifficulty: Medium\nVuln: SQLite FTS5 Option Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQLite FTS5 Virtual Table Options\", \"Lab Description\": \"A mobile app creates SQLite FTS5 tables with dynamic content options. The configuration strings are concatenated directly into full-text search setup.\", \"Vulnerability name\": \"SQLite FTS5 Option Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Cassandra CQL User-Defined Function Imports\nDescription: A Cassandra cluster creates UDFs with dynamic import declarations. The import paths are concatenated directly into function compilation.\nDifficulty: Hard\nVuln: Cassandra UDF Import Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Cassandra CQL User-Defined Function Imports\", \"Lab Description\": \"A Cassandra cluster creates UDFs with dynamic import declarations. The import paths are concatenated directly into function compilation.\", \"Vulnerability name\": \"Cassandra UDF Import Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Neo4j APOC Load CSV Headers\nDescription: A graph ETL pipeline uses APOC's load CSV with dynamic header mappings. The header parameters are concatenated directly into file imports.\nDifficulty: Medium\nVuln: Neo4j CSV Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Neo4j APOC Load CSV Headers\", \"Lab Description\": \"A graph ETL pipeline uses APOC's load CSV with dynamic header mappings. The header parameters are concatenated directly into file imports.\", \"Vulnerability name\": \"Neo4j CSV Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in RedisGraph Query Aliases\nDescription: A Redis module builds graph queries with dynamic node aliases. The alias names are concatenated directly into Cypher execution.\nDifficulty: Hard\nVuln: RedisGraph Alias Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in RedisGraph Query Aliases\", \"Lab Description\": \"A Redis module builds graph queries with dynamic node aliases. The alias names are concatenated directly into Cypher execution.\", \"Vulnerability name\": \"RedisGraph Alias Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ArangoDB AQL PRUNE Conditions\nDescription: A document traversal system builds AQL queries with dynamic PRUNE clauses. The conditions are concatenated directly into graph traversals.\nDifficulty: Hard\nVuln: ArangoDB PRUNE Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ArangoDB AQL PRUNE Conditions\", \"Lab Description\": \"A document traversal system builds AQL queries with dynamic PRUNE clauses. The conditions are concatenated directly into graph traversals.\", \"Vulnerability name\": \"ArangoDB PRUNE Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CouchDB Mango Query Operators\nDescription: A document store uses CouchDB's Mango with dynamic operator selection. The operator names are concatenated directly into find operations.\nDifficulty: Medium\nVuln: CouchDB Operator Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CouchDB Mango Query Operators\", \"Lab Description\": \"A document store uses CouchDB's Mango with dynamic operator selection. The operator names are concatenated directly into find operations.\", \"Vulnerability name\": \"CouchDB Operator Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux Pivot Columns\nDescription: A time-series dashboard builds Flux queries with dynamic pivot columns. The column names are concatenated directly into data reshaping.\nDifficulty: Hard\nVuln: Flux Pivot Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Pivot Columns\", \"Lab Description\": \"A time-series dashboard builds Flux queries with dynamic pivot columns. The column names are concatenated directly into data reshaping.\", \"Vulnerability name\": \"Flux Pivot Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Policies\nDescription: A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\nDifficulty: Hard\nVuln: Timescale Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Policies\", \"Lab Description\": \"A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\", \"Vulnerability name\": \"Timescale Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Changefeed Filters\nDescription: A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\nDifficulty: Medium\nVuln: CockroachCDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Changefeed Filters\", \"Lab Description\": \"A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\nDifficulty: Medium\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation.\nDifficulty: Hard\nVuln: Materialized View Data Clause Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\nDifficulty: Hard\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google BigQuery Wildcard Table Patterns\nDescription: A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake Session Parameter Defaults\nDescription: A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization.\nDifficulty: Hard\nVuln: Snowflake Session Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\nDifficulty: Hard\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\nDifficulty: Medium\nVuln: Trino Function Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL COPY TO PROGRAM\nDescription: A data export feature uses COPY TO with dynamic program execution. The command strings are concatenated directly into shell command execution.\nDifficulty: Hard\nVuln: PostgreSQL COPY Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL COPY TO PROGRAM\", \"Lab Description\": \"A data export feature uses COPY TO with dynamic program execution. The command strings are concatenated directly into shell command execution.\", \"Vulnerability name\": \"PostgreSQL COPY Command Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL X Protocol Authentication\nDescription: A custom authentication plugin uses X Protocol with dynamic queries. The auth strings are concatenated directly into connection handshakes.\nDifficulty: Easy\nVuln: MySQL X Protocol Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL X Protocol Authentication\", \"Lab Description\": \"A custom authentication plugin uses X Protocol with dynamic queries. The auth strings are concatenated directly into connection handshakes.\", \"Vulnerability name\": \"MySQL X Protocol Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in SQL Server External Script Parameters\nDescription: A machine learning service uses sp_execute_external_script with dynamic R/Python parameters. The script arguments are concatenated directly into execution.\nDifficulty: Hard\nVuln: SQL Server External Script Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server External Script Parameters\", \"Lab Description\": \"A machine learning service uses sp_execute_external_script with dynamic R/Python parameters. The script arguments are concatenated directly into execution.\", \"Vulnerability name\": \"SQL Server External Script Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle SDO_UTIL.TO_GEOJSON\nDescription: A GIS application converts geometries to GeoJSON with dynamic properties. The attribute lists are concatenated directly into JSON generation.\nDifficulty: Medium\nVuln: Oracle GeoJSON Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_UTIL.TO_GEOJSON\", \"Lab Description\": \"A GIS application converts geometries to GeoJSON with dynamic properties. The attribute lists are concatenated directly into JSON generation.\", \"Vulnerability name\": \"Oracle GeoJSON Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Refresh\nDescription: A cloud pipeline refreshes external tables with dynamic location patterns. The path strings are concatenated directly into metadata updates.\nDifficulty: Medium\nVuln: Snowflake External Table Poisoning\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh\", \"Lab Description\": \"A cloud pipeline refreshes external tables with dynamic location patterns. The path strings are concatenated directly into metadata updates.\", \"Vulnerability name\": \"Snowflake External Table Poisoning\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery JavaScript UDF Inline Code\nDescription: A data transformation uses JavaScript UDFs with dynamic code. The script bodies are concatenated directly into function execution.\nDifficulty: Hard\nVuln: BigQuery JS UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery JavaScript UDF Inline Code\", \"Lab Description\": \"A data transformation uses JavaScript UDFs with dynamic code. The script bodies are concatenated directly into function execution.\", \"Vulnerability name\": \"BigQuery JS UDF Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse Spark Notebook Parameters\nDescription: A Synapse Spark notebook accepts dynamic SQL parameters. The values are concatenated directly into PySpark/SQL cell execution.\nDifficulty: Medium\nVuln: Synapse Notebook Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Spark Notebook Parameters\", \"Lab Description\": \"A Synapse Spark notebook accepts dynamic SQL parameters. The values are concatenated directly into PySpark/SQL cell execution.\", \"Vulnerability name\": \"Synapse Notebook Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift SUPER Type Casting\nDescription: A semi-structured data system uses dynamic casts to SUPER type. The type expressions are concatenated directly into JSON processing.\nDifficulty: Medium\nVuln: Redshift SUPER Cast Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift SUPER Type Casting\", \"Lab Description\": \"A semi-structured data system uses dynamic casts to SUPER type. The type expressions are concatenated directly into JSON processing.\", \"Vulnerability name\": \"Redshift SUPER Cast Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner DDL Change Streams\nDescription: A schema migration tool creates change streams with dynamic DDL filters. The filter strings are concatenated directly into schema change tracking.\nDifficulty: Hard\nVuln: Spanner DDL Stream Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner DDL Change Streams\", \"Lab Description\": \"A schema migration tool creates change streams with dynamic DDL filters. The filter strings are concatenated directly into schema change tracking.\", \"Vulnerability name\": \"Spanner DDL Stream Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Unity Catalog Table Comments\nDescription: A data governance system updates table comments dynamically. The comment text is concatenated directly into ALTER TABLE statements.\nDifficulty: Easy\nVuln: Unity Catalog Comment Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Table Comments\", \"Lab Description\": \"A data governance system updates table comments dynamically. The comment text is concatenated directly into ALTER TABLE statements.\", \"Vulnerability name\": \"Unity Catalog Comment Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowpark Python Stored Procedures\nDescription: A Snowflake Snowpark app creates Python UDFs with dynamic code. The Python source is concatenated directly into procedure creation.\nDifficulty: Hard\nVuln: Snowpark Python Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowpark Python Stored Procedures\", \"Lab Description\": \"A Snowflake Snowpark app creates Python UDFs with dynamic code. The Python source is concatenated directly into procedure creation.\", \"Vulnerability name\": \"Snowpark Python Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Cosmos DB SQL API User-Defined Functions\nDescription: A NoSQL application creates UDFs with dynamic JavaScript. The function bodies are concatenated directly into query execution.\nDifficulty: Medium\nVuln: CosmosDB UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB SQL API User-Defined Functions\", \"Lab Description\": \"A NoSQL application creates UDFs with dynamic JavaScript. The function bodies are concatenated directly into query execution.\", \"Vulnerability name\": \"CosmosDB UDF Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\nDescription: An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\nDifficulty: Medium\nVuln: Elasticsearch ODBC Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Case Forcing\nDescription: A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\nDifficulty: Easy\nVuln: Druid Case Forcing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Case Forcing\", \"Lab Description\": \"A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\", \"Vulnerability name\": \"Druid Case Forcing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux HTTP Request Parameters\nDescription: A monitoring system builds Flux HTTP requests with dynamic URLs. The request parameters are concatenated directly into pipeline execution.\nDifficulty: Hard\nVuln: Flux HTTP Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux HTTP Request Parameters\", \"Lab Description\": \"A monitoring system builds Flux HTTP requests with dynamic URLs. The request parameters are concatenated directly into pipeline execution.\", \"Vulnerability name\": \"Flux HTTP Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Compression Segmentby Columns\nDescription: A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\nDifficulty: Medium\nVuln: Timescale Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Segmentby Columns\", \"Lab Description\": \"A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB CDC Webhook Headers\nDescription: A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\nDifficulty: Hard\nVuln: Cockroach Webhook Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Headers\", \"Lab Description\": \"A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\", \"Vulnerability name\": \"Cockroach Webhook Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in DuckDB HTTPFS Extension Headers\nDescription: A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\nDifficulty: Medium\nVuln: DuckDB HTTPFS Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\", \"Vulnerability name\": \"DuckDB HTTPFS Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Function Response Transformers\nDescription: A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\nDifficulty: Hard\nVuln: Snowflake Response Transformer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Response Transformers\", \"Lab Description\": \"A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\", \"Vulnerability name\": \"Snowflake Response Transformer Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Asset Bundle Runtime Parameters\nDescription: A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\nDifficulty: Medium\nVuln: Databricks Bundle Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Asset Bundle Runtime Parameters\", \"Lab Description\": \"A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\", \"Vulnerability name\": \"Databricks Bundle Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Trino Iceberg Metadata Procedures\nDescription: A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\nDifficulty: Hard\nVuln: Trino Iceberg Procedure Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Iceberg Metadata Procedures\", \"Lab Description\": \"A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\", \"Vulnerability name\": \"Trino Iceberg Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Presto Thrift UDF Payloads\nDescription: A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\nDifficulty: Easy\nVuln: Presto Thrift UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Thrift UDF Payloads\", \"Lab Description\": \"A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\", \"Vulnerability name\": \"Presto Thrift UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Kafka Engine Settings\nDescription: A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\nDifficulty: Medium\nVuln: ClickHouse Kafka Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Kafka Engine Settings\", \"Lab Description\": \"A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\", \"Vulnerability name\": \"ClickHouse Kafka Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE TEXT SEARCH PARSER\nDescription: A search engine dynamically creates text parsers with vulnerable configuration. The parser commands are concatenated directly into dictionary creation.\nDifficulty: Hard\nVuln: PostgreSQL Text Parser Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE TEXT SEARCH PARSER\", \"Lab Description\": \"A search engine dynamically creates text parsers with vulnerable configuration. The parser commands are concatenated directly into dictionary creation.\", \"Vulnerability name\": \"PostgreSQL Text Parser Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL MEMORY Table Index Comments\nDescription: A caching system creates MEMORY tables with dynamic index comments. The comment text is concatenated directly into index creation.\nDifficulty: Medium\nVuln: MySQL MEMORY Table Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL MEMORY Table Index Comments\", \"Lab Description\": \"A caching system creates MEMORY tables with dynamic index comments. The comment text is concatenated directly into index creation.\", \"Vulnerability name\": \"MySQL MEMORY Table Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\nDescription: A recommendation engine builds graph queries with dynamic node properties. The property filters are concatenated directly into pathfinding.\nDifficulty: Medium\nVuln: SQL Graph Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\", \"Lab Description\": \"A recommendation engine builds graph queries with dynamic node properties. The property filters are concatenated directly into pathfinding.\", \"Vulnerability name\": \"SQL Graph Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Oracle DBMS_AQADM Queue Tables\nDescription: A messaging system creates AQ queues with dynamic queue tables. The table parameters are concatenated directly into queue creation.\nDifficulty: Hard\nVuln: Oracle AQ Queue Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle DBMS_AQADM Queue Tables\", \"Lab Description\": \"A messaging system creates AQ queues with dynamic queue tables. The table parameters are concatenated directly into queue creation.\", \"Vulnerability name\": \"Oracle AQ Queue Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Snowflake STREAMS Table Filters\nDescription: A CDC pipeline creates streams with dynamic table filters. The filter conditions are concatenated directly into change tracking.\nDifficulty: Medium\nVuln: Snowflake Stream Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake STREAMS Table Filters\", \"Lab Description\": \"A CDC pipeline creates streams with dynamic table filters. The filter conditions are concatenated directly into change tracking.\", \"Vulnerability name\": \"Snowflake Stream Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery JSON_EXTRACT Path Parameters\nDescription: A JSON processing system extracts values with dynamic path expressions. The paths are concatenated directly into JSON parsing.\nDifficulty: Easy\nVuln: BigQuery JSON Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery JSON_EXTRACT Path Parameters\", \"Lab Description\": \"A JSON processing system extracts values with dynamic path expressions. The paths are concatenated directly into JSON parsing.\", \"Vulnerability name\": \"BigQuery JSON Path Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse CETAS Partition Clauses\nDescription: A data export feature uses CETAS with dynamic partition keys. The partition expressions are concatenated directly into file writing.\nDifficulty: Hard\nVuln: Synapse CETAS Partition Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS Partition Clauses\", \"Lab Description\": \"A data export feature uses CETAS with dynamic partition keys. The partition expressions are concatenated directly into file writing.\", \"Vulnerability name\": \"Synapse CETAS Partition Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Alias Expressions\nDescription: A dashboard tool creates column aliases with dynamic expressions. The alias definitions are concatenated directly into query execution.\nDifficulty: Easy\nVuln: Databricks Alias Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Alias Expressions\", \"Lab Description\": \"A dashboard tool creates column aliases with dynamic expressions. The alias definitions are concatenated directly into query execution.\", \"Vulnerability name\": \"Databricks Alias Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift Spectrum External Table Locations\nDescription: A data lake query system creates Spectrum tables with dynamic S3 paths. The location strings are concatenated directly into external table definitions.\nDifficulty: Medium\nVuln: Redshift Spectrum Location Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift Spectrum External Table Locations\", \"Lab Description\": \"A data lake query system creates Spectrum tables with dynamic S3 paths. The location strings are concatenated directly into external table definitions.\", \"Vulnerability name\": \"Redshift Spectrum Location Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner Foreign Key Constraints\nDescription: A schema migration tool adds foreign keys with dynamic constraint checks. The constraint clauses are concatenated directly into DDL.\nDifficulty: Hard\nVuln: Spanner FK Constraint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner Foreign Key Constraints\", \"Lab Description\": \"A schema migration tool adds foreign keys with dynamic constraint checks. The constraint clauses are concatenated directly into DDL.\", \"Vulnerability name\": \"Spanner FK Constraint Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Data Explorer Kusto Function Defaults\nDescription: A KQL query system creates functions with dynamic default parameters. The default expressions are concatenated directly into function execution.\nDifficulty: Medium\nVuln: Kusto Function Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer Kusto Function Defaults\", \"Lab Description\": \"A KQL query system creates functions with dynamic default parameters. The default expressions are concatenated directly into function execution.\", \"Vulnerability name\": \"Kusto Function Default Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\nDescription: An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\nDifficulty: Medium\nVuln: Elasticsearch ODBC Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Escaping\nDescription: A dashboard builder dynamically escapes Druid SQL identifiers. The escape sequences are concatenated directly into query planning.\nDifficulty: Medium\nVuln: Druid Identifier Escape Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A dashboard builder dynamically escapes Druid SQL identifiers. The escape sequences are concatenated directly into query planning.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux String Interpolation\nDescription: A monitoring system builds Flux queries with dynamic string interpolation. The template strings are concatenated directly into pipeline construction.\nDifficulty: Hard\nVuln: Flux Interpolation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux String Interpolation\", \"Lab Description\": \"A monitoring system builds Flux queries with dynamic string interpolation. The template strings are concatenated directly into pipeline construction.\", \"Vulnerability name\": \"Flux Interpolation Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Policies\nDescription: A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\nDifficulty: Hard\nVuln: Timescale Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Policies\", \"Lab Description\": \"A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\", \"Vulnerability name\": \"Timescale Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Changefeed Filters\nDescription: A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\nDifficulty: Medium\nVuln: CockroachCDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Changefeed Filters\", \"Lab Description\": \"A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\nDifficulty: Easy\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse creates materialized views with dynamic data loading options. The WITH clauses are concatenated directly into view creation.\nDifficulty: Medium\nVuln: Materialized View Data Clause Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse creates materialized views with dynamic data loading options. The WITH clauses are concatenated directly into view creation.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\nDifficulty: Hard\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google BigQuery Wildcard Table Patterns\nDescription: A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\nDifficulty: Hard\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\nDifficulty: Medium\nVuln: Trino Function Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Dictionary Source URLs\nDescription: A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions.\nDifficulty: Medium\nVuln: ClickHouse Dictionary URL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE COLLATION Locale\nDescription: A multilingual app creates custom collations with dynamic locale strings. The locale parameters are concatenated directly into collation definitions.\nDifficulty: Medium\nVuln: PostgreSQL Collation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE COLLATION Locale\", \"Lab Description\": \"A multilingual app creates custom collations with dynamic locale strings. The locale parameters are concatenated directly into collation definitions.\", \"Vulnerability name\": \"PostgreSQL Collation Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in MySQL Clone Plugin Data Filtering\nDescription: A database cloning tool uses dynamic filters during clone operations. The filter conditions are concatenated directly into clone statements.\nDifficulty: Hard\nVuln: MySQL Clone Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Clone Plugin Data Filtering\", \"Lab Description\": \"A database cloning tool uses dynamic filters during clone operations. The filter conditions are concatenated directly into clone statements.\", \"Vulnerability name\": \"MySQL Clone Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger History Retention\nDescription: A blockchain system configures ledger history with dynamic retention periods. The retention clauses are concatenated directly into immutable storage.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger History Retention\", \"Lab Description\": \"A blockchain system configures ledger history with dynamic retention periods. The retention clauses are concatenated directly into immutable storage.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle SDO_NET Memory Parameters\nDescription: A network analysis tool configures spatial networks with dynamic memory settings. The parameter strings are concatenated directly into network creation.\nDifficulty: Easy\nVuln: Oracle SDO_NET Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_NET Memory Parameters\", \"Lab Description\": \"A network analysis tool configures spatial networks with dynamic memory settings. The parameter strings are concatenated directly into network creation.\", \"Vulnerability name\": \"Oracle SDO_NET Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Refresh Paths\nDescription: A cloud pipeline refreshes external tables with dynamic storage paths. The path strings are concatenated directly into metadata updates.\nDifficulty: Medium\nVuln: Snowflake External Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh Paths\", \"Lab Description\": \"A cloud pipeline refreshes external tables with dynamic storage paths. The path strings are concatenated directly into metadata updates.\", \"Vulnerability name\": \"Snowflake External Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse Spark Notebook Magic Parameters\nDescription: A Synapse notebook uses dynamic parameters in magic commands. The values are concatenated directly into command execution.\nDifficulty: Easy\nVuln: Synapse Magic Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Spark Notebook Magic Parameters\", \"Lab Description\": \"A Synapse notebook uses dynamic parameters in magic commands. The values are concatenated directly into command execution.\", \"Vulnerability name\": \"Synapse Magic Command Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift ML Model Hyperparameters\nDescription: A predictive analytics system trains ML models with dynamic hyperparameters. The parameter strings are concatenated directly into model creation.\nDifficulty: Hard\nVuln: Redshift ML Hyperparameter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift ML Model Hyperparameters\", \"Lab Description\": \"A predictive analytics system trains ML models with dynamic hyperparameters. The parameter strings are concatenated directly into model creation.\", \"Vulnerability name\": \"Redshift ML Hyperparameter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner Change Stream Value Capture\nDescription: A CDC system configures change streams with dynamic value capture. The capture clauses are concatenated directly into stream creation.\nDifficulty: Medium\nVuln: Spanner Value Capture Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner Change Stream Value Capture\", \"Lab Description\": \"A CDC system configures change streams with dynamic value capture. The capture clauses are concatenated directly into stream creation.\", \"Vulnerability name\": \"Spanner Value Capture Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks Unity Catalog Sharing Recipients\nDescription: A data sharing platform configures Delta Sharing with dynamic recipient emails. The email strings are concatenated directly into ACL management.\nDifficulty: Easy\nVuln: Unity Catalog Sharing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Sharing Recipients\", \"Lab Description\": \"A data sharing platform configures Delta Sharing with dynamic recipient emails. The email strings are concatenated directly into ACL management.\", \"Vulnerability name\": \"Unity Catalog Sharing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowpark Java UDF Class Paths\nDescription: A Snowpark app registers Java UDFs with dynamic classpaths. The path strings are concatenated directly into JAR loading.\nDifficulty: Easy\nVuln: Snowpark Java UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowpark Java UDF Class Paths\", \"Lab Description\": \"A Snowpark app registers Java UDFs with dynamic classpaths. The path strings are concatenated directly into JAR loading.\", \"Vulnerability name\": \"Snowpark Java UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Cosmos DB Stored Procedure Continuations\nDescription: A NoSQL application builds Cosmos DB stored procedures with dynamic continuation tokens. The token strings are concatenated directly into pagination logic.\nDifficulty: Medium\nVuln: CosmosDB Continuation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB Stored Procedure Continuations\", \"Lab Description\": \"A NoSQL application builds Cosmos DB stored procedures with dynamic continuation tokens. The token strings are concatenated directly into pagination logic.\", \"Vulnerability name\": \"CosmosDB Continuation Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Properties\nDescription: An analytics tool builds ODBC connections with dynamic properties. The property strings are concatenated directly into driver initialization.\nDifficulty: Medium\nVuln: Elasticsearch ODBC Property Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Properties\", \"Lab Description\": \"An analytics tool builds ODBC connections with dynamic properties. The property strings are concatenated directly into driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Property Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Case Forcing\nDescription: A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\nDifficulty: Easy\nVuln: Druid Case Forcing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Case Forcing\", \"Lab Description\": \"A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\", \"Vulnerability name\": \"Druid Case Forcing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux HTTP Request Headers\nDescription: A monitoring system builds Flux HTTP requests with dynamic headers. The header strings are concatenated directly into pipeline execution.\nDifficulty: Hard\nVuln: Flux HTTP Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux HTTP Request Headers\", \"Lab Description\": \"A monitoring system builds Flux HTTP requests with dynamic headers. The header strings are concatenated directly into pipeline execution.\", \"Vulnerability name\": \"Flux HTTP Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Compression Segmentby Columns\nDescription: A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\nDifficulty: Medium\nVuln: Timescale Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Segmentby Columns\", \"Lab Description\": \"A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB CDC Webhook Headers\nDescription: A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\nDifficulty: Hard\nVuln: Cockroach Webhook Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Headers\", \"Lab Description\": \"A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\", \"Vulnerability name\": \"Cockroach Webhook Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in DuckDB HTTPFS Extension Headers\nDescription: A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\nDifficulty: Medium\nVuln: DuckDB HTTPFS Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\", \"Vulnerability name\": \"DuckDB HTTPFS Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse refreshes materialized views with dynamic data options. The WITH clauses are concatenated directly into refresh operations.\nDifficulty: Easy\nVuln: Materialized View Refresh Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse refreshes materialized views with dynamic data options. The WITH clauses are concatenated directly into refresh operations.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in SQL Ledger History Retention\nDescription: A blockchain application configures ledger history with dynamic retention. The retention clauses are concatenated directly into blockchain maintenance.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Ledger History Retention\", \"Lab Description\": \"A blockchain application configures ledger history with dynamic retention. The retention clauses are concatenated directly into blockchain maintenance.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Function Response Transformers\nDescription: A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\nDifficulty: Hard\nVuln: Snowflake Response Transformer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Response Transformers\", \"Lab Description\": \"A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\", \"Vulnerability name\": \"Snowflake Response Transformer Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Asset Bundle Runtime Parameters\nDescription: A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\nDifficulty: Medium\nVuln: Databricks Bundle Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Asset Bundle Runtime Parameters\", \"Lab Description\": \"A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\", \"Vulnerability name\": \"Databricks Bundle Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Trino Iceberg Metadata Procedures\nDescription: A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\nDifficulty: Hard\nVuln: Trino Iceberg Procedure Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Iceberg Metadata Procedures\", \"Lab Description\": \"A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\", \"Vulnerability name\": \"Trino Iceberg Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Presto Thrift UDF Payloads\nDescription: A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\nDifficulty: Easy\nVuln: Presto Thrift UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Thrift UDF Payloads\", \"Lab Description\": \"A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\", \"Vulnerability name\": \"Presto Thrift UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Kafka Engine Settings\nDescription: A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\nDifficulty: Medium\nVuln: ClickHouse Kafka Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Kafka Engine Settings\", \"Lab Description\": \"A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\", \"Vulnerability name\": \"ClickHouse Kafka Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SingleStore Pipelines Transformation Scripts\nDescription: A real-time pipeline creates data transformations with dynamic JavaScript scripts. The script code is concatenated directly into stream processing.\nDifficulty: Hard\nVuln: SingleStore Script Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SingleStore Pipelines Transformation Scripts\", \"Lab Description\": \"A real-time pipeline creates data transformations with dynamic JavaScript scripts. The script code is concatenated directly into stream processing.\", \"Vulnerability name\": \"SingleStore Script Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in YugabyteDB CDC Stream IDs\nDescription: A change data capture system creates YugabyteDB streams with dynamic identifiers. The ID strings are concatenated directly into WAL processing.\nDifficulty: Easy\nVuln: Yugabyte Stream ID Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in YugabyteDB CDC Stream IDs\", \"Lab Description\": \"A change data capture system creates YugabyteDB streams with dynamic identifiers. The ID strings are concatenated directly into WAL processing.\", \"Vulnerability name\": \"Yugabyte Stream ID Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in CrateDB Dynamic Partition Columns\nDescription: A distributed SQL system creates partitioned tables with dynamic column names. The partition expressions are concatenated directly into shard allocation.\nDifficulty: Medium\nVuln: CrateDB Partition Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CrateDB Dynamic Partition Columns\", \"Lab Description\": \"A distributed SQL system creates partitioned tables with dynamic column names. The partition expressions are concatenated directly into shard allocation.\", \"Vulnerability name\": \"CrateDB Partition Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in TiDB Placement Policy Constraints\nDescription: A distributed database configures placement policies with dynamic constraints. The constraint strings are concatenated directly into region placement.\nDifficulty: Hard\nVuln: TiDB Placement Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TiDB Placement Policy Constraints\", \"Lab Description\": \"A distributed database configures placement policies with dynamic constraints. The constraint strings are concatenated directly into region placement.\", \"Vulnerability name\": \"TiDB Placement Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL Generated Column Expressions\nDescription: A schema designer dynamically creates generated columns with unsafe expression concatenation, allowing injection through virtual column definitions.\nDifficulty: Hard\nVuln: MySQL Virtual Column Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Generated Column Expressions\", \"Lab Description\": \"A schema designer dynamically creates generated columns with unsafe expression concatenation, allowing injection through virtual column definitions.\", \"Vulnerability name\": \"MySQL Virtual Column Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Graph MATCH Path Filters\nDescription: A social network application builds graph queries with unsanitized node property filters, allowing injection during relationship traversal.\nDifficulty: Medium\nVuln: SQL Graph Traversal Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph MATCH Path Filters\", \"Lab Description\": \"A social network application builds graph queries with unsanitized node property filters, allowing injection during relationship traversal.\", \"Vulnerability name\": \"SQL Graph Traversal Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL COPY TO PROGRAM Commands\nDescription: A data export feature unsafely incorporates user input into COPY TO PROGRAM statements, enabling OS command execution.\nDifficulty: Hard\nVuln: PostgreSQL COPY Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL COPY TO PROGRAM Commands\", \"Lab Description\": \"A data export feature unsafely incorporates user input into COPY TO PROGRAM statements, enabling OS command execution.\", \"Vulnerability name\": \"PostgreSQL COPY Command Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle Text INDEX PARAMETERS\nDescription: A document search system unsafely builds Oracle Text index parameters, allowing injection during index creation.\nDifficulty: Medium\nVuln: Oracle Text Parameter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text INDEX PARAMETERS\", \"Lab Description\": \"A document search system unsafely builds Oracle Text index parameters, allowing injection during index creation.\", \"Vulnerability name\": \"Oracle Text Parameter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Column Definitions\nDescription: A cloud ETL pipeline dynamically defines external table columns with unsanitized input, allowing injection during schema inference.\nDifficulty: Medium\nVuln: Snowflake External Schema Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Column Definitions\", \"Lab Description\": \"A cloud ETL pipeline dynamically defines external table columns with unsanitized input, allowing injection during schema inference.\", \"Vulnerability name\": \"Snowflake External Schema Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery JSON_EXTRACT_SCALAR Path Parameters\nDescription: A JSON processing feature unsafely incorporates user input into JSON path expressions, allowing injection during document parsing.\nDifficulty: Easy\nVuln: BigQuery JSON Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery JSON_EXTRACT_SCALAR Path Parameters\", \"Lab Description\": \"A JSON processing feature unsafely incorporates user input into JSON path expressions, allowing injection during document parsing.\", \"Vulnerability name\": \"BigQuery JSON Path Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse CETAS WITH Clauses\nDescription: A data warehouse exports tables with dynamic WITH options, allowing injection during external table creation.\nDifficulty: Hard\nVuln: Synapse CETAS Option Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS WITH Clauses\", \"Lab Description\": \"A data warehouse exports tables with dynamic WITH options, allowing injection during external table creation.\", \"Vulnerability name\": \"Synapse CETAS Option Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Notebook Widget Default Values\nDescription: An interactive notebook incorporates unsanitized widget defaults into SQL cells, allowing injection through UI parameters.\nDifficulty: Easy\nVuln: Databricks Widget Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Widget Default Values\", \"Lab Description\": \"An interactive notebook incorporates unsanitized widget defaults into SQL cells, allowing injection through UI parameters.\", \"Vulnerability name\": \"Databricks Widget Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift UNLOAD IAM_ROLE Parameters\nDescription: A data export feature unsafely incorporates user input into UNLOAD statements, allowing IAM role manipulation.\nDifficulty: Hard\nVuln: Redshift IAM Role Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift UNLOAD IAM_ROLE Parameters\", \"Lab Description\": \"A data export feature unsafely incorporates user input into UNLOAD statements, allowing IAM role manipulation.\", \"Vulnerability name\": \"Redshift IAM Role Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT Clauses\nDescription: A schema migration tool unsafely builds INTERLEAVE clauses, allowing injection during table relationship creation.\nDifficulty: Medium\nVuln: Spanner Interleave Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT Clauses\", \"Lab Description\": \"A schema migration tool unsafely builds INTERLEAVE clauses, allowing injection during table relationship creation.\", \"Vulnerability name\": \"Spanner Interleave Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Azure Data Explorer Kusto Function Bodies\nDescription: A query optimization system dynamically creates Kusto functions with unsanitized bodies, allowing injection during execution.\nDifficulty: Medium\nVuln: Kusto Function Body Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer Kusto Function Bodies\", \"Lab Description\": \"A query optimization system dynamically creates Kusto functions with unsanitized bodies, allowing injection during execution.\", \"Vulnerability name\": \"Kusto Function Body Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Connection Strings\nDescription: A reporting tool builds ODBC connections with unsanitized input, allowing injection during driver initialization.\nDifficulty: Easy\nVuln: Elasticsearch ODBC Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Connection Strings\", \"Lab Description\": \"A reporting tool builds ODBC connections with unsanitized input, allowing injection during driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Escaping\nDescription: A dashboard builder improperly escapes Druid SQL identifiers, allowing injection through quoted table names.\nDifficulty: Medium\nVuln: Druid Identifier Escape Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A dashboard builder improperly escapes Druid SQL identifiers, allowing injection through quoted table names.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux Yield Names\nDescription: A monitoring system dynamically names Flux query yields, allowing injection during result processing.\nDifficulty: Easy\nVuln: Flux Yield Name Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Yield Names\", \"Lab Description\": \"A monitoring system dynamically names Flux query yields, allowing injection during result processing.\", \"Vulnerability name\": \"Flux Yield Name Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Policies\nDescription: A time-series platform configures aggregation policies with unsanitized input, allowing injection during materialization.\nDifficulty: Hard\nVuln: Timescale Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Policies\", \"Lab Description\": \"A time-series platform configures aggregation policies with unsanitized input, allowing injection during materialization.\", \"Vulnerability name\": \"Timescale Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Partial Index Predicates\nDescription: A performance optimization feature unsafely creates partial indexes, allowing injection through WHERE clauses.\nDifficulty: Medium\nVuln: Cockroach Partial Index Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Partial Index Predicates\", \"Lab Description\": \"A performance optimization feature unsafely creates partial indexes, allowing injection through WHERE clauses.\", \"Vulnerability name\": \"Cockroach Partial Index Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures S3 endpoints with unsanitized input, allowing injection during cloud storage operations.\nDifficulty: Easy\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures S3 endpoints with unsanitized input, allowing injection during cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Materialized View Refresh Options\nDescription: A data warehouse refreshes materialized views with dynamic options, allowing injection during data reload.\nDifficulty: Medium\nVuln: Materialized View Refresh Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh Options\", \"Lab Description\": \"A data warehouse refreshes materialized views with dynamic options, allowing injection during data reload.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application creates ledger views with dynamic options, allowing injection during cryptographic verification.\nDifficulty: Hard\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application creates ledger views with dynamic options, allowing injection during cryptographic verification.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Wildcard Table Suffixes\nDescription: A data analytics tool uses wildcard tables with dynamic suffixes, allowing injection during table expansion.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Wildcard Table Suffixes\", \"Lab Description\": \"A data analytics tool uses wildcard tables with dynamic suffixes, allowing injection during table expansion.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake Session Parameter Defaults\nDescription: A configuration system sets session parameters with dynamic defaults, allowing injection during session initialization.\nDifficulty: Medium\nVuln: Snowflake Session Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A configuration system sets session parameters with dynamic defaults, allowing injection during session initialization.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A cluster management system configures warehouses with dynamic parameters, allowing injection during cluster startup.\nDifficulty: Hard\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A cluster management system configures warehouses with dynamic parameters, allowing injection during cluster startup.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A UDF registration system dynamically specifies function namespaces, allowing injection during function creation.\nDifficulty: Medium\nVuln: Trino Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A UDF registration system dynamically specifies function namespaces, allowing injection during function creation.\", \"Vulnerability name\": \"Trino Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A query system uses table functions with dynamic arguments, allowing injection during function execution.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A query system uses table functions with dynamic arguments, allowing injection during function execution.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Dictionary Source URLs\nDescription: A data loading system configures dictionaries with dynamic source URLs, allowing injection during dictionary loading.\nDifficulty: Medium\nVuln: ClickHouse Dictionary URL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A data loading system configures dictionaries with dynamic source URLs, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SingleStore Columnstore Compression\nDescription: A columnar storage system configures compression with dynamic parameters, allowing injection during table optimization.\nDifficulty: Hard\nVuln: SingleStore Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SingleStore Columnstore Compression\", \"Lab Description\": \"A columnar storage system configures compression with dynamic parameters, allowing injection during table optimization.\", \"Vulnerability name\": \"SingleStore Compression Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in YugabyteDB CDC Stream Filters\nDescription: A change data capture system creates streams with dynamic filters, allowing injection during change event generation.\nDifficulty: Medium\nVuln: Yugabyte CDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in YugabyteDB CDC Stream Filters\", \"Lab Description\": \"A change data capture system creates streams with dynamic filters, allowing injection during change event generation.\", \"Vulnerability name\": \"Yugabyte CDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CrateDB Fulltext Analyzer Definitions\nDescription: A search system creates custom analyzers with dynamic configurations, allowing injection during text processing.\nDifficulty: Hard\nVuln: CrateDB Analyzer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CrateDB Fulltext Analyzer Definitions\", \"Lab Description\": \"A search system creates custom analyzers with dynamic configurations, allowing injection during text processing.\", \"Vulnerability name\": \"CrateDB Analyzer Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TiDB Placement Policy Constraints\nDescription: A distributed database configures placement policies with dynamic constraints, allowing injection during replica distribution.\nDifficulty: Hard\nVuln: TiDB Placement Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TiDB Placement Policy Constraints\", \"Lab Description\": \"A distributed database configures placement policies with dynamic constraints, allowing injection during replica distribution.\", \"Vulnerability name\": \"TiDB Placement Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE TEXT SEARCH TEMPLATE\nDescription: A search system dynamically creates text search templates with unsafe lexize function parameters, allowing code execution during document processing.\nDifficulty: Hard\nVuln: PostgreSQL Search Template Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE TEXT SEARCH TEMPLATE\", \"Lab Description\": \"A search system dynamically creates text search templates with unsafe lexize function parameters, allowing code execution during document processing.\", \"Vulnerability name\": \"PostgreSQL Search Template Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL Clone Plugin Data Filtering\nDescription: A database cloning tool incorporates user input into CLONE DATA FILTER clauses without sanitization, allowing injection during clone operations.\nDifficulty: Hard\nVuln: MySQL Clone Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Clone Plugin Data Filtering\", \"Lab Description\": \"A database cloning tool incorporates user input into CLONE DATA FILTER clauses without sanitization, allowing injection during clone operations.\", \"Vulnerability name\": \"MySQL Clone Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger History Retention\nDescription: A blockchain application dynamically configures ledger history retention periods without proper sanitization, allowing tampering with immutable records.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger History Retention\", \"Lab Description\": \"A blockchain application dynamically configures ledger history retention periods without proper sanitization, allowing tampering with immutable records.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle SDO_NET Memory Parameters\nDescription: A spatial network application dynamically configures memory parameters for network analysis without proper sanitization, allowing arbitrary PL/SQL execution.\nDifficulty: Easy\nVuln: Oracle Spatial Network Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_NET Memory Parameters\", \"Lab Description\": \"A spatial network application dynamically configures memory parameters for network analysis without proper sanitization, allowing arbitrary PL/SQL execution.\", \"Vulnerability name\": \"Oracle Spatial Network Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Refresh Paths\nDescription: A cloud pipeline refreshes external tables with dynamically constructed storage paths without proper sanitization, allowing access to unauthorized storage locations.\nDifficulty: Medium\nVuln: Snowflake External Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh Paths\", \"Lab Description\": \"A cloud pipeline refreshes external tables with dynamically constructed storage paths without proper sanitization, allowing access to unauthorized storage locations.\", \"Vulnerability name\": \"Snowflake External Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system dynamically constructs connection strings for remote models without proper sanitization, allowing Vertex AI endpoint manipulation.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system dynamically constructs connection strings for remote models without proper sanitization, allowing Vertex AI endpoint manipulation.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse Spark Notebook Magic Parameters\nDescription: An interactive notebook incorporates user input into magic command parameters without sanitization, allowing cross-language code execution.\nDifficulty: Easy\nVuln: Synapse Magic Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Spark Notebook Magic Parameters\", \"Lab Description\": \"An interactive notebook incorporates user input into magic command parameters without sanitization, allowing cross-language code execution.\", \"Vulnerability name\": \"Synapse Magic Command Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift ML Model Hyperparameters\nDescription: A predictive analytics system dynamically constructs model hyperparameters without proper sanitization, allowing training data access.\nDifficulty: Hard\nVuln: Redshift ML Hyperparameter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift ML Model Hyperparameters\", \"Lab Description\": \"A predictive analytics system dynamically constructs model hyperparameters without proper sanitization, allowing training data access.\", \"Vulnerability name\": \"Redshift ML Hyperparameter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner Change Stream Value Capture\nDescription: A CDC system dynamically configures change stream value capture types without proper sanitization, allowing data exfiltration.\nDifficulty: Medium\nVuln: Spanner Value Capture Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner Change Stream Value Capture\", \"Lab Description\": \"A CDC system dynamically configures change stream value capture types without proper sanitization, allowing data exfiltration.\", \"Vulnerability name\": \"Spanner Value Capture Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks Unity Catalog Sharing Recipients\nDescription: A data sharing platform dynamically adds recipients to Delta Shares without proper sanitization, allowing ACL bypass.\nDifficulty: Easy\nVuln: Unity Catalog Sharing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Sharing Recipients\", \"Lab Description\": \"A data sharing platform dynamically adds recipients to Delta Shares without proper sanitization, allowing ACL bypass.\", \"Vulnerability name\": \"Unity Catalog Sharing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowpark Java UDF Class Paths\nDescription: A Snowpark application dynamically specifies Java UDF classpaths without proper sanitization, allowing arbitrary code execution.\nDifficulty: Easy\nVuln: Snowpark Java UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowpark Java UDF Class Paths\", \"Lab Description\": \"A Snowpark application dynamically specifies Java UDF classpaths without proper sanitization, allowing arbitrary code execution.\", \"Vulnerability name\": \"Snowpark Java UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Cosmos DB Stored Procedure Continuations\nDescription: A NoSQL application dynamically constructs continuation tokens in stored procedures without proper sanitization, allowing pagination control.\nDifficulty: Medium\nVuln: CosmosDB Continuation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB Stored Procedure Continuations\", \"Lab Description\": \"A NoSQL application dynamically constructs continuation tokens in stored procedures without proper sanitization, allowing pagination control.\", \"Vulnerability name\": \"CosmosDB Continuation Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Properties\nDescription: An analytics tool dynamically constructs ODBC connection properties without proper sanitization, allowing index access.\nDifficulty: Easy\nVuln: Elasticsearch ODBC Property Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Properties\", \"Lab Description\": \"An analytics tool dynamically constructs ODBC connection properties without proper sanitization, allowing index access.\", \"Vulnerability name\": \"Elasticsearch ODBC Property Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Case Forcing\nDescription: A dashboard tool dynamically forces identifier casing without proper sanitization, allowing query manipulation.\nDifficulty: Easy\nVuln: Druid Case Forcing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Case Forcing\", \"Lab Description\": \"A dashboard tool dynamically forces identifier casing without proper sanitization, allowing query manipulation.\", \"Vulnerability name\": \"Druid Case Forcing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux HTTP Request Headers\nDescription: A monitoring system dynamically constructs HTTP request headers in Flux without proper sanitization, allowing internal endpoint access.\nDifficulty: Hard\nVuln: Flux HTTP Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux HTTP Request Headers\", \"Lab Description\": \"A monitoring system dynamically constructs HTTP request headers in Flux without proper sanitization, allowing internal endpoint access.\", \"Vulnerability name\": \"Flux HTTP Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Compression Segmentby Columns\nDescription: A time-series database dynamically configures compression segment columns without proper sanitization, allowing data access.\nDifficulty: Medium\nVuln: Timescale Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Segmentby Columns\", \"Lab Description\": \"A time-series database dynamically configures compression segment columns without proper sanitization, allowing data access.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB CDC Webhook Headers\nDescription: A change data capture system dynamically constructs webhook headers without proper sanitization, allowing request manipulation.\nDifficulty: Hard\nVuln: Cockroach Webhook Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Headers\", \"Lab Description\": \"A change data capture system dynamically constructs webhook headers without proper sanitization, allowing request manipulation.\", \"Vulnerability name\": \"Cockroach Webhook Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in DuckDB HTTPFS Extension Headers\nDescription: A data pipeline dynamically configures HTTP request headers in DuckDB without proper sanitization, allowing credential theft.\nDifficulty: Medium\nVuln: DuckDB HTTPFS Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline dynamically configures HTTP request headers in DuckDB without proper sanitization, allowing credential theft.\", \"Vulnerability name\": \"DuckDB HTTPFS Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse dynamically controls materialized view loading without proper sanitization, allowing data access.\nDifficulty: Easy\nVuln: Materialized View Refresh Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse dynamically controls materialized view loading without proper sanitization, allowing data access.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in SQL Ledger History Retention\nDescription: A blockchain application dynamically configures ledger retention without proper sanitization, allowing history tampering.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Ledger History Retention\", \"Lab Description\": \"A blockchain application dynamically configures ledger retention without proper sanitization, allowing history tampering.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking application dynamically sorts transaction history based on user input without sanitizing the 'sort' parameter. This enables SQL injection via ORDER BY manipulation. The application echoes detailed SQL errors when invalid sorting fields are requested. To solve: Extract full table information by abusing ORDER BY injection vulnerabilities.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking application dynamically sorts transaction history based on user input without sanitizing the 'sort' parameter. This enables SQL injection via ORDER BY manipulation. The application echoes detailed SQL errors when invalid sorting fields are requested. To solve: Extract full table information by abusing ORDER BY injection vulnerabilities.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in GROUP BY Clause\nDescription: The CMS uses unfiltered user-provided category IDs to group blog posts. Improperly handled GROUP BY inputs allow SQL injection. The verbose logging system exposes internal query structure during errors. To solve: Leak administrative tokens from a hidden 'admin_tokens' table via GROUP BY injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS uses unfiltered user-provided category IDs to group blog posts. Improperly handled GROUP BY inputs allow SQL injection. The verbose logging system exposes internal query structure during errors. To solve: Leak administrative tokens from a hidden 'admin_tokens' table via GROUP BY injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard aggregates device statistics and filters them through a vulnerable HAVING clause. Lack of input sanitization in device metrics allows an attacker to inject SQL through manipulated thresholds. To solve: Dump sensitive firmware update URLs stored within a hidden settings table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard aggregates device statistics and filters them through a vulnerable HAVING clause. Lack of input sanitization in device metrics allows an attacker to inject SQL through manipulated thresholds. To solve: Dump sensitive firmware update URLs stored within a hidden settings table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in HAVING Clause\nDescription: The CMS admin panel aggregates page views, filtering them through a vulnerable HAVING clause without sanitization. This allows attackers to inject SQL commands to control aggregation behavior. To solve: Exploit the HAVING clause to leak internal admin credentials via a UNION-based payload.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS admin panel aggregates page views, filtering them through a vulnerable HAVING clause without sanitization. This allows attackers to inject SQL commands to control aggregation behavior. To solve: Exploit the HAVING clause to leak internal admin credentials via a UNION-based payload.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: An API Gateway sorts user-supplied data directly in SQL ORDER BY clauses. No parameterization exists, exposing raw queries to injection risks. When invalid columns are referenced, verbose API error messages are returned. To solve: Manipulate ORDER BY to expose hidden 'admin_logs' data.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"An API Gateway sorts user-supplied data directly in SQL ORDER BY clauses. No parameterization exists, exposing raw queries to injection risks. When invalid columns are referenced, verbose API error messages are returned. To solve: Manipulate ORDER BY to expose hidden 'admin_logs' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking application groups user transaction types based on input from a 'group' parameter. Lack of validation enables SQL injection within GROUP BY. The system displays database error messages when grouping fails. To solve: Extract and enumerate privileged account types using GROUP BY injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking application groups user transaction types based on input from a 'group' parameter. Lack of validation enables SQL injection within GROUP BY. The system displays database error messages when grouping fails. To solve: Extract and enumerate privileged account types using GROUP BY injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard orders sensor data based on user-supplied field names without sanitization. This allows ORDER BY SQL injection through crafted requests. To solve: Extract sensitive device keys stored in a hidden 'iot_keys' table via injected ORDER BY clauses.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard orders sensor data based on user-supplied field names without sanitization. This allows ORDER BY SQL injection through crafted requests. To solve: Extract sensitive device keys stored in a hidden 'iot_keys' table via injected ORDER BY clauses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in HAVING Clause\nDescription: The CMS aggregates comment statistics and filters them through a vulnerable HAVING clause. Improperly validated comment count filters expose SQL injection risks. To solve: Dump the CMS user session table by exploiting the HAVING clause via Boolean-based and time-based techniques.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS aggregates comment statistics and filters them through a vulnerable HAVING clause. Improperly validated comment count filters expose SQL injection risks. To solve: Dump the CMS user session table by exploiting the HAVING clause via Boolean-based and time-based techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in GROUP BY Clause\nDescription: An API Gateway aggregates logs grouped by user agent strings. User-supplied input is passed directly into the GROUP BY clause without sanitization. Verbose error messages reveal SQL parsing issues. To solve: Inject payloads to retrieve internal log files stored in the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in GROUP BY Clause\", \"Lab Description\": \"An API Gateway aggregates logs grouped by user agent strings. User-supplied input is passed directly into the GROUP BY clause without sanitization. Verbose error messages reveal SQL parsing issues. To solve: Inject payloads to retrieve internal log files stored in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT platform aggregates average sensor readings using a vulnerable HAVING filter controlled by the user. Improper sanitization enables advanced HAVING clause injections. To solve: Leak internal device firmware versions by crafting UNION payloads exploiting aggregation logic.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT platform aggregates average sensor readings using a vulnerable HAVING filter controlled by the user. Improper sanitization enables advanced HAVING clause injections. To solve: Leak internal device firmware versions by crafting UNION payloads exploiting aggregation logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal sorts user transactions based on dynamic parameters with no input validation. This enables ORDER BY clause SQL injection, causing errors or data leakage. To solve: Exploit the ORDER BY injection to enumerate database schema and exfiltrate high-value account information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal sorts user transactions based on dynamic parameters with no input validation. This enables ORDER BY clause SQL injection, causing errors or data leakage. To solve: Exploit the ORDER BY injection to enumerate database schema and exfiltrate high-value account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard's device analytics feature groups device status reports without proper sanitization of user input. Attackers can exploit this to perform GROUP BY SQL injection. To solve: Extract hidden device metadata by leveraging GROUP BY clause injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard's device analytics feature groups device status reports without proper sanitization of user input. Attackers can exploit this to perform GROUP BY SQL injection. To solve: Extract hidden device metadata by leveraging GROUP BY clause injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in ORDER BY Clause\nDescription: A CMS allows users to sort blog posts based on custom input without input validation, leading to ORDER BY clause SQL injection. To solve: Exploit the injection to retrieve hidden administrative user accounts and related login details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in ORDER BY Clause\", \"Lab Description\": \"A CMS allows users to sort blog posts based on custom input without input validation, leading to ORDER BY clause SQL injection. To solve: Exploit the injection to retrieve hidden administrative user accounts and related login details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: An API Gateway aggregates event statistics and allows filtering using vulnerable HAVING clauses. Lack of input sanitization exposes SQL injection opportunities. To solve: Leak internal access tokens stored in hidden tables by manipulating HAVING filters.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"An API Gateway aggregates event statistics and allows filtering using vulnerable HAVING clauses. Lack of input sanitization exposes SQL injection opportunities. To solve: Leak internal access tokens stored in hidden tables by manipulating HAVING filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT platform sorts device logs based on client input, but input is directly embedded in ORDER BY clauses. Lack of validation results in SQL injection vulnerability. To solve: Exfiltrate network credentials by exploiting sorting functionality.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT platform sorts device logs based on client input, but input is directly embedded in ORDER BY clauses. Lack of validation results in SQL injection vulnerability. To solve: Exfiltrate network credentials by exploiting sorting functionality.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal allows customers to sort transaction history based on URL parameters directly inserted into an ORDER BY clause. The input is not sanitized or whitelisted, exposing a SQL injection vector. Attackers can manipulate the sort parameter to trigger database errors, enumerate columns, and eventually retrieve sensitive information such as admin account credentials. To solve: Perform ORDER BY-based SQL injection to leak database structure and extract privileged user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal allows customers to sort transaction history based on URL parameters directly inserted into an ORDER BY clause. The input is not sanitized or whitelisted, exposing a SQL injection vector. Attackers can manipulate the sort parameter to trigger database errors, enumerate columns, and eventually retrieve sensitive information such as admin account credentials. To solve: Perform ORDER BY-based SQL injection to leak database structure and extract privileged user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT monitoring dashboard aggregates device statistics, allowing dynamic grouping via user-controlled parameters. Improper handling of input within the GROUP BY clause allows injection attacks. By manipulating the group parameter, attackers can leak internal database structure related to devices, such as firmware versions and OS metadata. To solve: Perform GROUP BY SQL injection to reveal hidden attributes of connected IoT devices.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT monitoring dashboard aggregates device statistics, allowing dynamic grouping via user-controlled parameters. Improper handling of input within the GROUP BY clause allows injection attacks. By manipulating the group parameter, attackers can leak internal database structure related to devices, such as firmware versions and OS metadata. To solve: Perform GROUP BY SQL injection to reveal hidden attributes of connected IoT devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in ORDER BY Clause\nDescription: A Content Management System (CMS) platform provides blog sorting features where the sort parameter is concatenated directly into an SQL ORDER BY clause. No input validation or allowlisting is performed. Exploiting this, attackers can craft ORDER BY injection payloads to enumerate sensitive database tables and retrieve admin user login information. To solve: Manipulate the sort parameter to leak user data via UNION-based injection.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in ORDER BY Clause\", \"Lab Description\": \"A Content Management System (CMS) platform provides blog sorting features where the sort parameter is concatenated directly into an SQL ORDER BY clause. No input validation or allowlisting is performed. Exploiting this, attackers can craft ORDER BY injection payloads to enumerate sensitive database tables and retrieve admin user login information. To solve: Manipulate the sort parameter to leak user data via UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API Gateway's event aggregation endpoint filters event data using user-controlled thresholds embedded into a HAVING clause. No input sanitization exists, exposing a SQL injection path. Attackers can inject into the HAVING condition to execute arbitrary queries, bypass authentication layers, and extract OAuth tokens. To solve: Exploit the HAVING clause to leak sensitive access tokens and elevate API privileges.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API Gateway's event aggregation endpoint filters event data using user-controlled thresholds embedded into a HAVING clause. No input sanitization exists, exposing a SQL injection path. Attackers can inject into the HAVING condition to execute arbitrary queries, bypass authentication layers, and extract OAuth tokens. To solve: Exploit the HAVING clause to leak sensitive access tokens and elevate API privileges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows sorting of device logs based on user-supplied parameters, which are directly embedded in the ORDER BY clause without validation. Attackers can inject malicious input to manipulate the sorting SQL query, leading to exfiltration of Wi-Fi credentials and device secrets. To solve: Craft ORDER BY clause payloads that leak device network credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows sorting of device logs based on user-supplied parameters, which are directly embedded in the ORDER BY clause without validation. Attackers can inject malicious input to manipulate the sorting SQL query, leading to exfiltration of Wi-Fi credentials and device secrets. To solve: Craft ORDER BY clause payloads that leak device network credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal's fraud analytics endpoint groups transactions and applies user-defined filters via a HAVING clause. Inputs are directly interpolated into the SQL query, enabling injection. Attackers can inject logical operations and delay functions (e.g., SLEEP()) to perform blind inference attacks. MySQL-specific error messages (e.g., 'Operand should contain 1 column(s)') provide hints during exploitation. To solve: Perform blind SQLi exploiting the HAVING filter to extract account balances and manipulate risk scoring.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal's fraud analytics endpoint groups transactions and applies user-defined filters via a HAVING clause. Inputs are directly interpolated into the SQL query, enabling injection. Attackers can inject logical operations and delay functions (e.g., SLEEP()) to perform blind inference attacks. MySQL-specific error messages (e.g., 'Operand should contain 1 column(s)') provide hints during exploitation. To solve: Perform blind SQLi exploiting the HAVING filter to extract account balances and manipulate risk scoring.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard groups smart sensor data based on user-supplied fields without input validation, interpolated into a GROUP BY clause. Improper handling leads to injection risks allowing attackers to extract sensitive device configurations. Specific error messages like 'Unknown column' can help in blind enumeration. To solve: Manipulate group parameters to dump Wi-Fi SSID and secret keys stored in the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard groups smart sensor data based on user-supplied fields without input validation, interpolated into a GROUP BY clause. Improper handling leads to injection risks allowing attackers to extract sensitive device configurations. Specific error messages like 'Unknown column' can help in blind enumeration. To solve: Manipulate group parameters to dump Wi-Fi SSID and secret keys stored in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in HAVING Clause\nDescription: The CMS platform's content ranking system uses a vulnerable HAVING clause to filter blog posts by popularity scores. User input is embedded without validation. Exploiting the input, attackers can inject subqueries and sleep functions to escalate into blind SQL injection. The backend MySQL server leaks syntax errors, aiding payload refinement. To solve: Execute HAVING clause injections to extract administrator session tokens.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS platform's content ranking system uses a vulnerable HAVING clause to filter blog posts by popularity scores. User input is embedded without validation. Exploiting the input, attackers can inject subqueries and sleep functions to escalate into blind SQL injection. The backend MySQL server leaks syntax errors, aiding payload refinement. To solve: Execute HAVING clause injections to extract administrator session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API gateway allows clients to sort API responses dynamically based on query parameters directly embedded in ORDER BY clauses. Absence of sanitization introduces SQL injection vulnerabilities. Attackers can manipulate sort fields to execute arbitrary queries and extract hidden customer metadata. Specific behaviors like MySQL's 'You have an error in your SQL syntax' aid in payload tuning. To solve: Perform ORDER BY SQLi to dump client records.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API gateway allows clients to sort API responses dynamically based on query parameters directly embedded in ORDER BY clauses. Absence of sanitization introduces SQL injection vulnerabilities. Attackers can manipulate sort fields to execute arbitrary queries and extract hidden customer metadata. Specific behaviors like MySQL's 'You have an error in your SQL syntax' aid in payload tuning. To solve: Perform ORDER BY SQLi to dump client records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal groups customer transactions by custom-defined fields without input validation. The GROUP BY clause is dynamically assembled from client-side inputs. Malformed inputs result in MySQL-specific 'Unknown column' errors. Attackers can exploit this to inject UNION queries and retrieve sensitive customer transaction logs. To solve: Abuse the group parameter to exfiltrate bank account activity.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal groups customer transactions by custom-defined fields without input validation. The GROUP BY clause is dynamically assembled from client-side inputs. Malformed inputs result in MySQL-specific 'Unknown column' errors. Attackers can exploit this to inject UNION queries and retrieve sensitive customer transaction logs. To solve: Abuse the group parameter to exfiltrate bank account activity.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Healthcare App SQL Injection via HAVING Clause (PostgreSQL)\nDescription: The healthcare platform's patient analytics module aggregates medical test results. A user-supplied severity score is passed into a vulnerable HAVING clause without input validation. In PostgreSQL, error messages like 'column must appear in the GROUP BY clause' leak useful information. Attackers can exploit this flaw to enumerate patients and exfiltrate health record identifiers. To solve: Exploit HAVING clause injection to dump patient IDs.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare App SQL Injection via HAVING Clause (PostgreSQL)\", \"Lab Description\": \"The healthcare platform's patient analytics module aggregates medical test results. A user-supplied severity score is passed into a vulnerable HAVING clause without input validation. In PostgreSQL, error messages like 'column must appear in the GROUP BY clause' leak useful information. Attackers can exploit this flaw to enumerate patients and exfiltrate health record identifiers. To solve: Exploit HAVING clause injection to dump patient IDs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-commerce Site SQL Injection in ORDER BY Clause (Microsoft SQL Server)\nDescription: The e-commerce site's product catalog allows users to sort by dynamic fields passed directly into an ORDER BY clause. Due to lack of sanitization, Microsoft SQL Server-specific error messages like 'Incorrect syntax near' leak query structure. Attackers can inject ORDER BY payloads to manipulate query flow and steal credit card tokens. To solve: Abuse ORDER BY injection to leak sensitive customer payment info.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Site SQL Injection in ORDER BY Clause (Microsoft SQL Server)\", \"Lab Description\": \"The e-commerce site's product catalog allows users to sort by dynamic fields passed directly into an ORDER BY clause. Due to lack of sanitization, Microsoft SQL Server-specific error messages like 'Incorrect syntax near' leak query structure. Attackers can inject ORDER BY payloads to manipulate query flow and steal credit card tokens. To solve: Abuse ORDER BY injection to leak sensitive customer payment info.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Cloud File Storage SQL Injection in GROUP BY Clause\nDescription: The cloud storage system categorizes uploaded files by metadata such as file type or owner ID. The field parameter is inserted into the GROUP BY clause without sanitization. Attackers can perform injections, exploiting MySQL 'Unknown column' errors for blind enumeration. To solve: Exploit GROUP BY SQL injection to retrieve file owner identities.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Cloud File Storage SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The cloud storage system categorizes uploaded files by metadata such as file type or owner ID. The field parameter is inserted into the GROUP BY clause without sanitization. Attackers can perform injections, exploiting MySQL 'Unknown column' errors for blind enumeration. To solve: Exploit GROUP BY SQL injection to retrieve file owner identities.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Financial API SQL Injection in HAVING Clause (PostgreSQL)\nDescription: The financial platform's reporting API filters transactions by user-defined conditions embedded into a HAVING clause. PostgreSQL-specific 'division by zero' errors leak backend behavior when malformed inputs are injected. Attackers can use this flaw to enumerate transaction metadata. To solve: Exploit HAVING clause SQLi to leak customer account details.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Financial API SQL Injection in HAVING Clause (PostgreSQL)\", \"Lab Description\": \"The financial platform's reporting API filters transactions by user-defined conditions embedded into a HAVING clause. PostgreSQL-specific 'division by zero' errors leak backend behavior when malformed inputs are injected. Attackers can use this flaw to enumerate transaction metadata. To solve: Exploit HAVING clause SQLi to leak customer account details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CRM System SQL Injection in ORDER BY Clause\nDescription: The CRM system's client management module allows dynamic sorting by passing user-controlled fields into ORDER BY without validation. Attackers exploit this by injecting malicious field names, using MySQL-specific error behaviors to tune payloads. To solve: Inject ORDER BY SQLi to exfiltrate sensitive client contact information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CRM System SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CRM system's client management module allows dynamic sorting by passing user-controlled fields into ORDER BY without validation. Attackers exploit this by injecting malicious field names, using MySQL-specific error behaviors to tune payloads. To solve: Inject ORDER BY SQLi to exfiltrate sensitive client contact information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Device Dashboard SQL Injection via ORDER BY in API Query\nDescription: The IoT management dashboard exposes a RESTful API for listing devices. The 'sort' parameter is directly injected into an ORDER BY clause. Lack of filtering allows attackers to inject malicious SQL segments. Combined with verbose MySQL errors, this enables pivoting from blind injections to credential leakage. To solve: Perform ORDER BY injection, leak device credentials, and gain dashboard access.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device Dashboard SQL Injection via ORDER BY in API Query\", \"Lab Description\": \"The IoT management dashboard exposes a RESTful API for listing devices. The 'sort' parameter is directly injected into an ORDER BY clause. Lack of filtering allows attackers to inject malicious SQL segments. Combined with verbose MySQL errors, this enables pivoting from blind injections to credential leakage. To solve: Perform ORDER BY injection, leak device credentials, and gain dashboard access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL API SQL Injection via Field Resolver (MySQL)\nDescription: The GraphQL backend resolves user-provided fields in a dynamic query without sanitization. Attackers can inject SQL fragments through crafted GraphQL queries, pivoting from blind inference to full UNION SELECT extractions. To solve: Inject into GraphQL resolver, leak email addresses from the users table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL API SQL Injection via Field Resolver (MySQL)\", \"Lab Description\": \"The GraphQL backend resolves user-provided fields in a dynamic query without sanitization. Attackers can inject SQL fragments through crafted GraphQL queries, pivoting from blind inference to full UNION SELECT extractions. To solve: Inject into GraphQL resolver, leak email addresses from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking API SOAP Request SQL Injection via Group Filtering\nDescription: The banking web service exposes SOAP APIs for batch transaction analysis. User-defined filters are passed into GROUP BY clauses without sanitization, leading to blind SQLi possibilities. SOAPFault error responses reveal back-end structure during failed injections. To solve: Inject into SOAP filter, enumerate account balances.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API SOAP Request SQL Injection via Group Filtering\", \"Lab Description\": \"The banking web service exposes SOAP APIs for batch transaction analysis. User-defined filters are passed into GROUP BY clauses without sanitization, leading to blind SQLi possibilities. SOAPFault error responses reveal back-end structure during failed injections. To solve: Inject into SOAP filter, enumerate account balances.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Smart Home API SQL Injection via HAVING Clause Enumeration\nDescription: The smart home API uses a user-controlled threshold parameter inside a HAVING clause to filter device activity logs. No input validation allows attackers to exploit HAVING-based blind SQL injection using delayed responses and error leaks. To solve: Extract internal device network IDs through time-based inference.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Smart Home API SQL Injection via HAVING Clause Enumeration\", \"Lab Description\": \"The smart home API uses a user-controlled threshold parameter inside a HAVING clause to filter device activity logs. No input validation allows attackers to exploit HAVING-based blind SQL injection using delayed responses and error leaks. To solve: Extract internal device network IDs through time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Search Feature SQL Injection in ORDER BY Field\nDescription: A popular CMS allows users to sort blog posts dynamically. The 'order' field is inserted unsafely into an ORDER BY clause, leading to direct SQL injection. Attackers exploit this to dump administrator credentials and perform privilege escalation. To solve: Exploit ORDER BY SQLi to steal CMS administrator passwords.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Search Feature SQL Injection in ORDER BY Field\", \"Lab Description\": \"A popular CMS allows users to sort blog posts dynamically. The 'order' field is inserted unsafely into an ORDER BY clause, leading to direct SQL injection. Attackers exploit this to dump administrator credentials and perform privilege escalation. To solve: Exploit ORDER BY SQLi to steal CMS administrator passwords.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Device Management API - Basic OOB SQL Injection via Device Name\nDescription: The IoT device registration API fails to sanitize the device name parameter before interpolating it into an SQL INSERT query. An attacker can perform Out-of-Band (OOB) SQL Injection by forcing the server to make DNS lookups to leak sensitive information like database usernames. Solve this lab by exfiltrating the database user through a DNS-based OOB payload.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device Management API - Basic OOB SQL Injection via Device Name\", \"Lab Description\": \"The IoT device registration API fails to sanitize the device name parameter before interpolating it into an SQL INSERT query. An attacker can perform Out-of-Band (OOB) SQL Injection by forcing the server to make DNS lookups to leak sensitive information like database usernames. Solve this lab by exfiltrating the database user through a DNS-based OOB payload.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: E-commerce Platform OAuth - Token Introspection OOB SQL Injection\nDescription: The e-commerce OAuth introspection endpoint is vulnerable to SQL Injection due to unsafe handling of access token input. Attackers can inject payloads that initiate DNS-based OOB data exfiltration during token validation. Solve this lab by forging a malicious token that causes the server to leak the database name over DNS.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Platform OAuth - Token Introspection OOB SQL Injection\", \"Lab Description\": \"The e-commerce OAuth introspection endpoint is vulnerable to SQL Injection due to unsafe handling of access token input. Attackers can inject payloads that initiate DNS-based OOB data exfiltration during token validation. Solve this lab by forging a malicious token that causes the server to leak the database name over DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Education Platform GraphQL API - Advanced Argument OOB SQL Injection\nDescription: The 'userProfile' query in a GraphQL API dynamically builds SQL statements from user input without sanitization. Attackers can exploit this to inject SQL payloads causing OOB DNS interactions, leaking sensitive user credentials. Solve this lab by leaking the adminâ€™s hashed password via an OOB DNS payload injected through GraphQL.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Education Platform GraphQL API - Advanced Argument OOB SQL Injection\", \"Lab Description\": \"The 'userProfile' query in a GraphQL API dynamically builds SQL statements from user input without sanitization. Attackers can exploit this to inject SQL payloads causing OOB DNS interactions, leaking sensitive user credentials. Solve this lab by leaking the adminâ€™s hashed password via an OOB DNS payload injected through GraphQL.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Device Management - OOB SQL Injection via Device Registration\nDescription: An IoT device registration API accepts device names and directly interpolates them into SQL INSERT statements. Attackers can inject payloads triggering DNS lookups or HTTP callbacks to exfiltrate data over OOB channels. To solve: Trigger a DNS exfiltration attack and leak database user info.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device Management - OOB SQL Injection via Device Registration\", \"Lab Description\": \"An IoT device registration API accepts device names and directly interpolates them into SQL INSERT statements. Attackers can inject payloads triggering DNS lookups or HTTP callbacks to exfiltrate data over OOB channels. To solve: Trigger a DNS exfiltration attack and leak database user info.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking OAuth Endpoint - SQL Injection with Access Token Pivot to OOB\nDescription: The OAuth token introspection endpoint constructs SQL queries using unsanitized token IDs. Exploiting this, attackers inject OOB payloads during token validation and exfiltrate sensitive banking data. To solve: Submit a malicious access token to trigger an OOB DNS lookup revealing bank admin credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking OAuth Endpoint - SQL Injection with Access Token Pivot to OOB\", \"Lab Description\": \"The OAuth token introspection endpoint constructs SQL queries using unsanitized token IDs. Exploiting this, attackers inject OOB payloads during token validation and exfiltrate sensitive banking data. To solve: Submit a malicious access token to trigger an OOB DNS lookup revealing bank admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL User Profile API - OOB SQLi via Argument Injection\nDescription: The GraphQL 'userProfile' query dynamically builds SQL queries using user arguments. Attackers craft arguments that trigger DNS callbacks, leaking sensitive fields like password hashes through OOB channels. To solve: Perform GraphQL-based OOB SQL injection and leak the password hash of the admin account.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL User Profile API - OOB SQLi via Argument Injection\", \"Lab Description\": \"The GraphQL 'userProfile' query dynamically builds SQL queries using user arguments. Attackers craft arguments that trigger DNS callbacks, leaking sensitive fields like password hashes through OOB channels. To solve: Perform GraphQL-based OOB SQL injection and leak the password hash of the admin account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Admin Panel - OOB SQL Injection via File Upload Metadata\nDescription: The CMS's file upload functionality saves metadata like 'title' directly into database queries without validation. Attackers can upload a file with a malicious title triggering OOB SQL queries to leak admin session tokens. To solve: Upload a poisoned file to trigger an OOB attack and capture session tokens.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Admin Panel - OOB SQL Injection via File Upload Metadata\", \"Lab Description\": \"The CMS's file upload functionality saves metadata like 'title' directly into database queries without validation. Attackers can upload a file with a malicious title triggering OOB SQL queries to leak admin session tokens. To solve: Upload a poisoned file to trigger an OOB attack and capture session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Online Education Platform - OOB SQL Injection via Search Suggestions\nDescription: The online education platform provides dynamic course search suggestions. The search term is inserted unsafely into SQL LIKE queries. Attackers can craft payloads to cause DNS lookups that leak database version and admin emails. To solve: Inject OOB payloads via the search feature to leak sensitive backend details.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Education Platform - OOB SQL Injection via Search Suggestions\", \"Lab Description\": \"The online education platform provides dynamic course search suggestions. The search term is inserted unsafely into SQL LIKE queries. Attackers can craft payloads to cause DNS lookups that leak database version and admin emails. To solve: Inject OOB payloads via the search feature to leak sensitive backend details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - Basic SQL Injection in Account Balance Endpoint\nDescription: The banking portal's account balance endpoint directly inserts user-supplied account IDs into an SQL query without sanitization. Attackers can inject malicious SQL code that causes an OOB DNS request, exfiltrating sensitive data like the database's user credentials. Solve this by crafting a payload that triggers the DNS exfiltration of the database user.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Basic SQL Injection in Account Balance Endpoint\", \"Lab Description\": \"The banking portal's account balance endpoint directly inserts user-supplied account IDs into an SQL query without sanitization. Attackers can inject malicious SQL code that causes an OOB DNS request, exfiltrating sensitive data like the database's user credentials. Solve this by crafting a payload that triggers the DNS exfiltration of the database user.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Transaction History Endpoint\nDescription: The banking API's transaction history endpoint dynamically constructs SQL queries using unvalidated user inputs. Attackers can inject SQL payloads to trigger OOB DNS lookups, potentially leaking sensitive transaction data. Solve this lab by injecting a payload that causes a DNS request to exfiltrate transaction details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Transaction History Endpoint\", \"Lab Description\": \"The banking API's transaction history endpoint dynamically constructs SQL queries using unvalidated user inputs. Attackers can inject SQL payloads to trigger OOB DNS lookups, potentially leaking sensitive transaction data. Solve this lab by injecting a payload that causes a DNS request to exfiltrate transaction details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - Advanced SQL Injection with Account Number Validation\nDescription: The banking portalâ€™s account number validation endpoint improperly sanitizes inputs. Attackers can inject OOB payloads, leading to the exfiltration of sensitive data like the bank's internal email addresses. Solve this lab by injecting a payload that triggers an OOB DNS request and leaks the bankâ€™s internal admin email address.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Advanced SQL Injection with Account Number Validation\", \"Lab Description\": \"The banking portalâ€™s account number validation endpoint improperly sanitizes inputs. Attackers can inject OOB payloads, leading to the exfiltration of sensitive data like the bank's internal email addresses. Solve this lab by injecting a payload that triggers an OOB DNS request and leaks the bankâ€™s internal admin email address.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Login Endpoint\nDescription: The banking portalâ€™s login endpoint improperly handles user inputs in the authentication query. Attackers can inject SQL payloads to bypass authentication, trigger OOB DNS requests, and exfiltrate sensitive user information. Solve this lab by injecting a payload that causes the database to leak the admin password hash through an OOB DNS query.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Login Endpoint\", \"Lab Description\": \"The banking portalâ€™s login endpoint improperly handles user inputs in the authentication query. Attackers can inject SQL payloads to bypass authentication, trigger OOB DNS requests, and exfiltrate sensitive user information. Solve this lab by injecting a payload that causes the database to leak the admin password hash through an OOB DNS query.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Transfer Funds Endpoint\nDescription: The banking APIâ€™s fund transfer endpoint dynamically constructs SQL queries without sanitizing user inputs, allowing attackers to inject payloads. These payloads can be exploited to exfiltrate sensitive information, such as account numbers or balance information, through DNS-based OOB attacks. Solve this lab by injecting a malicious payload to leak database structure and account balances.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Transfer Funds Endpoint\", \"Lab Description\": \"The banking APIâ€™s fund transfer endpoint dynamically constructs SQL queries without sanitizing user inputs, allowing attackers to inject payloads. These payloads can be exploited to exfiltrate sensitive information, such as account numbers or balance information, through DNS-based OOB attacks. Solve this lab by injecting a malicious payload to leak database structure and account balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Application - Advanced SQL Injection in Loan Approval API\nDescription: The banking loan approval API fails to properly sanitize inputs. An attacker can inject complex SQL queries that bypass loan eligibility checks, and then trigger an OOB DNS request to leak sensitive financial data like loan applicant details. Solve this lab by injecting a payload that forces the application to leak internal financial information over DNS.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Application - Advanced SQL Injection in Loan Approval API\", \"Lab Description\": \"The banking loan approval API fails to properly sanitize inputs. An attacker can inject complex SQL queries that bypass loan eligibility checks, and then trigger an OOB DNS request to leak sensitive financial data like loan applicant details. Solve this lab by injecting a payload that forces the application to leak internal financial information over DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Customer Feedback Submission\nDescription: The customer feedback submission endpoint in the banking portal fails to sanitize inputs, allowing for SQL Injection attacks. By injecting SQL payloads, attackers can leak sensitive customer feedback data using DNS-based OOB requests. Solve this by injecting a payload to exfiltrate customer feedback data.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Customer Feedback Submission\", \"Lab Description\": \"The customer feedback submission endpoint in the banking portal fails to sanitize inputs, allowing for SQL Injection attacks. By injecting SQL payloads, attackers can leak sensitive customer feedback data using DNS-based OOB requests. Solve this by injecting a payload to exfiltrate customer feedback data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Details Endpoint\nDescription: The banking API exposes account details through an endpoint that constructs SQL queries directly from user input. Attackers can inject SQL payloads that allow OOB DNS exfiltration of account data. Solve this lab by injecting a payload to leak account details such as balance or transaction history via DNS.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Details Endpoint\", \"Lab Description\": \"The banking API exposes account details through an endpoint that constructs SQL queries directly from user input. Attackers can inject SQL payloads that allow OOB DNS exfiltration of account data. Solve this lab by injecting a payload to leak account details such as balance or transaction history via DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Application - SQL Injection in Fund Transfer Validation\nDescription: The banking application allows users to transfer funds between accounts, but the transaction validation endpoint does not sanitize inputs. By injecting SQL payloads, attackers can cause the application to leak sensitive transaction data using OOB DNS requests. Solve this by injecting a payload that triggers DNS requests containing transaction details.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Application - SQL Injection in Fund Transfer Validation\", \"Lab Description\": \"The banking application allows users to transfer funds between accounts, but the transaction validation endpoint does not sanitize inputs. By injecting SQL payloads, attackers can cause the application to leak sensitive transaction data using OOB DNS requests. Solve this by injecting a payload that triggers DNS requests containing transaction details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Application Search\nDescription: The banking portal allows users to search for loan applications, but it constructs SQL queries based on user input without sanitization. Attackers can inject SQL payloads that result in DNS-based OOB data exfiltration of loan application information. Solve this lab by crafting a payload that leaks loan applicant data.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Application Search\", \"Lab Description\": \"The banking portal allows users to search for loan applications, but it constructs SQL queries based on user input without sanitization. Attackers can inject SQL payloads that result in DNS-based OOB data exfiltration of loan application information. Solve this lab by crafting a payload that leaks loan applicant data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Transaction Logs Retrieval\nDescription: The banking API has an endpoint for retrieving transaction logs, but the endpoint is vulnerable to SQL Injection. Attackers can inject SQL payloads to extract sensitive transaction data, including amounts, account details, and dates, through DNS-based OOB requests. Solve this lab by injecting a payload to leak transaction logs.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Transaction Logs Retrieval\", \"Lab Description\": \"The banking API has an endpoint for retrieving transaction logs, but the endpoint is vulnerable to SQL Injection. Attackers can inject SQL payloads to extract sensitive transaction data, including amounts, account details, and dates, through DNS-based OOB requests. Solve this lab by injecting a payload to leak transaction logs.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Approval System\nDescription: The banking portal contains a loan approval system that fails to sanitize user input in loan application forms. An attacker can inject SQL payloads into the loan amount or borrower ID fields. The attacker can exfiltrate sensitive loan data using OOB DNS requests. The goal is to craft a payload that exfiltrates loan approval data such as loan amounts and borrower names.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Approval System\", \"Lab Description\": \"The banking portal contains a loan approval system that fails to sanitize user input in loan application forms. An attacker can inject SQL payloads into the loan amount or borrower ID fields. The attacker can exfiltrate sensitive loan data using OOB DNS requests. The goal is to craft a payload that exfiltrates loan approval data such as loan amounts and borrower names.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Profile Page\nDescription: The banking portal's user profile page is vulnerable to SQL Injection through an unprotected user ID query. The user ID is used directly in the SQL query to retrieve the profile. Attackers can inject SQL to exfiltrate sensitive user data, such as account details and transaction history, via OOB DNS requests. The challenge is to craft an injection that leaks user profile data.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Profile Page\", \"Lab Description\": \"The banking portal's user profile page is vulnerable to SQL Injection through an unprotected user ID query. The user ID is used directly in the SQL query to retrieve the profile. Attackers can inject SQL to exfiltrate sensitive user data, such as account details and transaction history, via OOB DNS requests. The challenge is to craft an injection that leaks user profile data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The banking portal allows users to view their transaction history, but fails to sanitize inputs. An attacker can inject SQL payloads into the request parameters, exfiltrating sensitive data (such as transaction IDs, amounts, and sender/receiver details) via OOB DNS requests. The task is to inject SQL payloads to exfiltrate the transaction history.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The banking portal allows users to view their transaction history, but fails to sanitize inputs. An attacker can inject SQL payloads into the request parameters, exfiltrating sensitive data (such as transaction IDs, amounts, and sender/receiver details) via OOB DNS requests. The task is to inject SQL payloads to exfiltrate the transaction history.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Balance API\nDescription: The banking API exposes account balance data to users through an unprotected endpoint, where the account number is directly inserted into an SQL query. Attackers can use SQL injection to manipulate the query, causing the server to leak account balance information through DNS-based OOB exfiltration. The challenge is to craft a SQL injection payload to exfiltrate sensitive account balance information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Balance API\", \"Lab Description\": \"The banking API exposes account balance data to users through an unprotected endpoint, where the account number is directly inserted into an SQL query. Attackers can use SQL injection to manipulate the query, causing the server to leak account balance information through DNS-based OOB exfiltration. The challenge is to craft a SQL injection payload to exfiltrate sensitive account balance information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Update Endpoint\nDescription: The banking API has an endpoint for updating user account details, but fails to sanitize inputs. Attackers can inject SQL payloads into the update request, causing the server to leak sensitive information such as account number and user details through DNS-based OOB requests. The goal is to craft a SQL injection payload to leak account data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Update Endpoint\", \"Lab Description\": \"The banking API has an endpoint for updating user account details, but fails to sanitize inputs. Attackers can inject SQL payloads into the update request, causing the server to leak sensitive information such as account number and user details through DNS-based OOB requests. The goal is to craft a SQL injection payload to leak account data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Creation\nDescription: The banking portal allows new users to create accounts, but fails to sanitize input fields, making it vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields. The goal is to inject payloads that exfiltrate sensitive user data, such as newly created account details and passwords, via DNS-based OOB exfiltration.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Creation\", \"Lab Description\": \"The banking portal allows new users to create accounts, but fails to sanitize input fields, making it vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields. The goal is to inject payloads that exfiltrate sensitive user data, such as newly created account details and passwords, via DNS-based OOB exfiltration.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Interest Calculation\nDescription: The banking portal calculates loan interest using parameters submitted via the loan application form. The system is vulnerable to SQL Injection, allowing attackers to modify the query and leak interest rate calculations, loan amounts, and associated user data via OOB DNS requests. The goal is to inject a payload that exposes loan interest rates.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Interest Calculation\", \"Lab Description\": \"The banking portal calculates loan interest using parameters submitted via the loan application form. The system is vulnerable to SQL Injection, allowing attackers to modify the query and leak interest rate calculations, loan amounts, and associated user data via OOB DNS requests. The goal is to inject a payload that exposes loan interest rates.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Login\nDescription: The login page of the banking portal is vulnerable to SQL Injection due to improper handling of user credentials in the SQL query. Attackers can inject payloads into the username and password fields to retrieve sensitive account details or bypass authentication entirely using UNION-based injection. The task is to exploit this vulnerability to exfiltrate account details.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Login\", \"Lab Description\": \"The login page of the banking portal is vulnerable to SQL Injection due to improper handling of user credentials in the SQL query. Attackers can inject payloads into the username and password fields to retrieve sensitive account details or bypass authentication entirely using UNION-based injection. The task is to exploit this vulnerability to exfiltrate account details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Transfer\nDescription: The banking portalâ€™s account transfer feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the transfer amount or recipient account number fields. This vulnerability allows an attacker to steal funds or leak account information. The goal is to craft a payload that exfiltrates transfer data via OOB DNS requests.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Transfer\", \"Lab Description\": \"The banking portalâ€™s account transfer feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the transfer amount or recipient account number fields. This vulnerability allows an attacker to steal funds or leak account information. The goal is to craft a payload that exfiltrates transfer data via OOB DNS requests.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Info API\nDescription: The banking API has an endpoint that retrieves user account information, but fails to sanitize inputs. An attacker can inject SQL payloads into the account number field, leading to SQL Injection vulnerabilities. The goal is to exfiltrate sensitive account information, such as balance and transaction history, using OOB DNS exfiltration.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Info API\", \"Lab Description\": \"The banking API has an endpoint that retrieves user account information, but fails to sanitize inputs. An attacker can inject SQL payloads into the account number field, leading to SQL Injection vulnerabilities. The goal is to exfiltrate sensitive account information, such as balance and transaction history, using OOB DNS exfiltration.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The banking portal has an endpoint that displays a userâ€™s transaction history based on the user ID. The endpoint is vulnerable to SQL Injection due to improper sanitization of input. An attacker can inject SQL payloads into the user ID parameter to extract sensitive transaction details. The goal is to craft an injection that exfiltrates the entire transaction history of a target account via OOB DNS.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The banking portal has an endpoint that displays a userâ€™s transaction history based on the user ID. The endpoint is vulnerable to SQL Injection due to improper sanitization of input. An attacker can inject SQL payloads into the user ID parameter to extract sensitive transaction details. The goal is to craft an injection that exfiltrates the entire transaction history of a target account via OOB DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Profile Update\nDescription: The profile update form in the banking portal is vulnerable to SQL Injection due to improper input sanitization. The form accepts user inputs like address, phone number, and email, which are directly inserted into a SQL query without sanitization. The goal is to exploit the SQL Injection vulnerability to modify other user profiles or retrieve sensitive data.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Profile Update\", \"Lab Description\": \"The profile update form in the banking portal is vulnerable to SQL Injection due to improper input sanitization. The form accepts user inputs like address, phone number, and email, which are directly inserted into a SQL query without sanitization. The goal is to exploit the SQL Injection vulnerability to modify other user profiles or retrieve sensitive data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Fund Transfer API\nDescription: The API endpoint responsible for fund transfers is vulnerable to SQL Injection. An attacker can manipulate the source account number and transfer amount parameters in the URL query string to exfiltrate sensitive data or steal funds. The goal is to exploit this vulnerability to steal funds or retrieve sensitive user information.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Fund Transfer API\", \"Lab Description\": \"The API endpoint responsible for fund transfers is vulnerable to SQL Injection. An attacker can manipulate the source account number and transfer amount parameters in the URL query string to exfiltrate sensitive data or steal funds. The goal is to exploit this vulnerability to steal funds or retrieve sensitive user information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Fund Withdrawal\nDescription: The banking portal is vulnerable to SQL Injection in the withdrawal form. The withdrawal amount and account number fields are susceptible to SQL injection, allowing an attacker to exfiltrate account details or modify the withdrawal amount. The goal is to inject a payload that either exfiltrates sensitive information or authorizes a withdrawal from a target account.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Fund Withdrawal\", \"Lab Description\": \"The banking portal is vulnerable to SQL Injection in the withdrawal form. The withdrawal amount and account number fields are susceptible to SQL injection, allowing an attacker to exfiltrate account details or modify the withdrawal amount. The goal is to inject a payload that either exfiltrates sensitive information or authorizes a withdrawal from a target account.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Credit Card Payment\nDescription: The payment form on the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the credit card number field or payment amount field to retrieve sensitive credit card details or bypass payment authentication. The goal is to extract sensitive credit card data using SQL Injection.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Credit Card Payment\", \"Lab Description\": \"The payment form on the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the credit card number field or payment amount field to retrieve sensitive credit card details or bypass payment authentication. The goal is to extract sensitive credit card data using SQL Injection.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Balance Check API\nDescription: The balance check API endpoint is vulnerable to SQL Injection. The user ID parameter is directly passed into the SQL query without proper sanitization. This vulnerability allows attackers to extract sensitive account balance information for any user. The goal is to inject SQL payloads that allow exfiltration of account balance data for multiple users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Balance Check API\", \"Lab Description\": \"The balance check API endpoint is vulnerable to SQL Injection. The user ID parameter is directly passed into the SQL query without proper sanitization. This vulnerability allows attackers to extract sensitive account balance information for any user. The goal is to inject SQL payloads that allow exfiltration of account balance data for multiple users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Application Form\nDescription: The loan application form in the banking portal is vulnerable to SQL Injection. The application allows users to input their loan amount and account number. The lack of input validation allows attackers to inject malicious SQL queries into these fields. The goal is to extract personal information and account details of other users by injecting SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Application Form\", \"Lab Description\": \"The loan application form in the banking portal is vulnerable to SQL Injection. The application allows users to input their loan amount and account number. The lack of input validation allows attackers to inject malicious SQL queries into these fields. The goal is to extract personal information and account details of other users by injecting SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Registration\nDescription: The account registration form is vulnerable to SQL Injection due to improper sanitization of user inputs. The attacker can inject malicious SQL code into fields such as the username or email to bypass account creation logic and retrieve existing account information. The goal is to exfiltrate existing account information through SQL injection in the registration form.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Registration\", \"Lab Description\": \"The account registration form is vulnerable to SQL Injection due to improper sanitization of user inputs. The attacker can inject malicious SQL code into fields such as the username or email to bypass account creation logic and retrieve existing account information. The goal is to exfiltrate existing account information through SQL injection in the registration form.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transfer History\nDescription: The transfer history page on the banking portal is vulnerable to SQL Injection. The page queries transfer records by user ID but does not properly sanitize the user input. An attacker can manipulate the user ID parameter to access another userâ€™s transfer history or exfiltrate data. The goal is to exploit this vulnerability to extract sensitive transfer information of other users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transfer History\", \"Lab Description\": \"The transfer history page on the banking portal is vulnerable to SQL Injection. The page queries transfer records by user ID but does not properly sanitize the user input. An attacker can manipulate the user ID parameter to access another userâ€™s transfer history or exfiltrate data. The goal is to exploit this vulnerability to extract sensitive transfer information of other users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Password Reset API\nDescription: The password reset API is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the email or username parameters, bypassing the intended password reset flow and extracting sensitive user data, such as email addresses and user names. The goal is to retrieve user data and potentially reset the passwords for targeted accounts.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Password Reset API\", \"Lab Description\": \"The password reset API is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the email or username parameters, bypassing the intended password reset flow and extracting sensitive user data, such as email addresses and user names. The goal is to retrieve user data and potentially reset the passwords for targeted accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Authentication\nDescription: The login endpoint is vulnerable to SQL Injection. The application directly injects the username and password parameters into an SQL query without proper sanitization. This flaw allows attackers to bypass authentication by injecting SQL payloads. The goal is to exploit this vulnerability to log in as an admin user without valid credentials.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Authentication\", \"Lab Description\": \"The login endpoint is vulnerable to SQL Injection. The application directly injects the username and password parameters into an SQL query without proper sanitization. This flaw allows attackers to bypass authentication by injecting SQL payloads. The goal is to exploit this vulnerability to log in as an admin user without valid credentials.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transfer Money API\nDescription: The transfer money API in the banking portal is vulnerable to SQL Injection. The amount and account number parameters are directly inserted into the SQL query, making it easy for attackers to manipulate the transaction logic. The goal is to transfer funds to an attacker-controlled account by injecting malicious SQL payloads into the amount or account number fields.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transfer Money API\", \"Lab Description\": \"The transfer money API in the banking portal is vulnerable to SQL Injection. The amount and account number parameters are directly inserted into the SQL query, making it easy for attackers to manipulate the transaction logic. The goal is to transfer funds to an attacker-controlled account by injecting malicious SQL payloads into the amount or account number fields.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Settings\nDescription: The user settings page allows users to update their personal details, but the application is vulnerable to SQL Injection. The settings API updates parameters like the user's email or phone number without sanitizing the input, allowing attackers to manipulate user data. The goal is to extract or modify sensitive user information, such as account numbers, by injecting SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Settings\", \"Lab Description\": \"The user settings page allows users to update their personal details, but the application is vulnerable to SQL Injection. The settings API updates parameters like the user's email or phone number without sanitizing the input, allowing attackers to manipulate user data. The goal is to extract or modify sensitive user information, such as account numbers, by injecting SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin Dashboard\nDescription: The admin dashboard is vulnerable to SQL Injection through a search field used to find transactions by user ID. The application does not validate user inputs, making it possible to inject SQL code into the search query. The goal is to bypass authentication and access sensitive transaction records for any user through SQL injection.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin Dashboard\", \"Lab Description\": \"The admin dashboard is vulnerable to SQL Injection through a search field used to find transactions by user ID. The application does not validate user inputs, making it possible to inject SQL code into the search query. The goal is to bypass authentication and access sensitive transaction records for any user through SQL injection.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction Status Check\nDescription: The transaction status check API is vulnerable to SQL Injection. An attacker can exploit the lack of sanitization in the transaction ID parameter to exfiltrate transaction details from the database. The goal is to use SQL Injection to retrieve the status and details of multiple transactions by injecting malicious payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction Status Check\", \"Lab Description\": \"The transaction status check API is vulnerable to SQL Injection. An attacker can exploit the lack of sanitization in the transaction ID parameter to exfiltrate transaction details from the database. The goal is to use SQL Injection to retrieve the status and details of multiple transactions by injecting malicious payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction Search\nDescription: The transaction search feature is vulnerable to SQL Injection. The search field does not properly sanitize the transaction ID parameter. Attackers can use this vulnerability to extract transaction records from the database. The goal is to use SQL injection to retrieve all transactions made by any user, including sensitive details like account numbers and balances.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction Search\", \"Lab Description\": \"The transaction search feature is vulnerable to SQL Injection. The search field does not properly sanitize the transaction ID parameter. Attackers can use this vulnerability to extract transaction records from the database. The goal is to use SQL injection to retrieve all transactions made by any user, including sensitive details like account numbers and balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Balance Check\nDescription: The account balance check feature in the banking portal is vulnerable to SQL Injection. The parameter used to retrieve the balance is not properly sanitized, allowing attackers to inject SQL payloads. The goal is to retrieve the balance of any user and modify it by injecting malicious SQL commands.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Balance Check\", \"Lab Description\": \"The account balance check feature in the banking portal is vulnerable to SQL Injection. The parameter used to retrieve the balance is not properly sanitized, allowing attackers to inject SQL payloads. The goal is to retrieve the balance of any user and modify it by injecting malicious SQL commands.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Funds Transfer Page\nDescription: The funds transfer page in the banking portal has a SQL Injection vulnerability. The page allows users to transfer funds, but the application directly inserts the amount and recipient account number into the SQL query. Attackers can inject SQL payloads to redirect funds to an attacker-controlled account. The goal is to manipulate the transaction to steal funds.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Funds Transfer Page\", \"Lab Description\": \"The funds transfer page in the banking portal has a SQL Injection vulnerability. The page allows users to transfer funds, but the application directly inserts the amount and recipient account number into the SQL query. Attackers can inject SQL payloads to redirect funds to an attacker-controlled account. The goal is to manipulate the transaction to steal funds.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin View of User Accounts\nDescription: The admin view that lists user accounts is vulnerable to SQL Injection. The admin can search for user accounts by name or ID, but this functionality is not properly sanitized. Attackers can inject SQL payloads into the search field to extract all user details, including account numbers, transaction history, and balances.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin View of User Accounts\", \"Lab Description\": \"The admin view that lists user accounts is vulnerable to SQL Injection. The admin can search for user accounts by name or ID, but this functionality is not properly sanitized. Attackers can inject SQL payloads into the search field to extract all user details, including account numbers, transaction history, and balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Approval API\nDescription: The loan approval API in the banking portal is vulnerable to SQL Injection. The API accepts user inputs like loan amount and ID without proper input validation, allowing attackers to inject SQL payloads. The goal is to manipulate the approval process and grant loans to unauthorized accounts by injecting malicious SQL commands.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Approval API\", \"Lab Description\": \"The loan approval API in the banking portal is vulnerable to SQL Injection. The API accepts user inputs like loan amount and ID without proper input validation, allowing attackers to inject SQL payloads. The goal is to manipulate the approval process and grant loans to unauthorized accounts by injecting malicious SQL commands.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Fund Transfer History\nDescription: The fund transfer history page is vulnerable to SQL Injection. The page retrieves the transfer records of a user based on the user ID parameter, which is not properly sanitized. Attackers can exploit this vulnerability to list all users' transfer records and even inject commands to alter the displayed data.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Fund Transfer History\", \"Lab Description\": \"The fund transfer history page is vulnerable to SQL Injection. The page retrieves the transfer records of a user based on the user ID parameter, which is not properly sanitized. Attackers can exploit this vulnerability to list all users' transfer records and even inject commands to alter the displayed data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Credit Card Info Retrieval\nDescription: The credit card information retrieval feature is vulnerable to SQL Injection. The application retrieves credit card details based on the card number provided by the user. Attackers can inject SQL payloads into the card number field to retrieve all credit card information stored in the database.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Credit Card Info Retrieval\", \"Lab Description\": \"The credit card information retrieval feature is vulnerable to SQL Injection. The application retrieves credit card details based on the card number provided by the user. Attackers can inject SQL payloads into the card number field to retrieve all credit card information stored in the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Profile Update\nDescription: The user profile update page is vulnerable to SQL Injection. Users can update their profile information, but the application fails to properly validate the input fields. Attackers can inject SQL payloads into these fields to manipulate their profile or even gain unauthorized access to other users' profiles.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Profile Update\", \"Lab Description\": \"The user profile update page is vulnerable to SQL Injection. Users can update their profile information, but the application fails to properly validate the input fields. Attackers can inject SQL payloads into these fields to manipulate their profile or even gain unauthorized access to other users' profiles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin Panel\nDescription: The admin panel for managing users is vulnerable to SQL Injection. Admins can search for users by ID or name, but the search functionality does not sanitize inputs. Attackers can use this to extract all user data, including account numbers, balances, and transaction histories.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin Panel\", \"Lab Description\": \"The admin panel for managing users is vulnerable to SQL Injection. Admins can search for users by ID or name, but the search functionality does not sanitize inputs. Attackers can use this to extract all user data, including account numbers, balances, and transaction histories.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Application Form\nDescription: The loan application form is vulnerable to SQL Injection. The form collects user details such as loan amount and personal information, but the application fails to validate these inputs properly. Attackers can inject SQL payloads to manipulate the loan process, allowing them to apply for loans without proper validation.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Application Form\", \"Lab Description\": \"The loan application form is vulnerable to SQL Injection. The form collects user details such as loan amount and personal information, but the application fails to validate these inputs properly. Attackers can inject SQL payloads to manipulate the loan process, allowing them to apply for loans without proper validation.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The transaction history page is vulnerable to SQL Injection. Users can filter their transaction history by date, but the date field is not properly sanitized. Attackers can inject SQL payloads to access other users' transaction data or manipulate the transaction records.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The transaction history page is vulnerable to SQL Injection. Users can filter their transaction history by date, but the date field is not properly sanitized. Attackers can inject SQL payloads to access other users' transaction data or manipulate the transaction records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Login\nDescription: The user login form is vulnerable to SQL Injection. The application fails to properly sanitize the username and password fields. Attackers can inject SQL payloads to bypass authentication and gain unauthorized access to users' accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Login\", \"Lab Description\": \"The user login form is vulnerable to SQL Injection. The application fails to properly sanitize the username and password fields. Attackers can inject SQL payloads to bypass authentication and gain unauthorized access to users' accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Balance Check\nDescription: The account balance check page is vulnerable to SQL Injection. Users can view their account balance by providing their account number. Attackers can inject SQL payloads to retrieve other users' account balances or modify their own balance.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Balance Check\", \"Lab Description\": \"The account balance check page is vulnerable to SQL Injection. Users can view their account balance by providing their account number. Attackers can inject SQL payloads to retrieve other users' account balances or modify their own balance.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Payment Processing\nDescription: The payment processing page is vulnerable to SQL Injection. The application processes payments based on the amount and user ID parameters, but fails to sanitize the input. Attackers can inject SQL payloads to alter payment amounts or access unauthorized payment records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Payment Processing\", \"Lab Description\": \"The payment processing page is vulnerable to SQL Injection. The application processes payments based on the amount and user ID parameters, but fails to sanitize the input. Attackers can inject SQL payloads to alter payment amounts or access unauthorized payment records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin Panel User Management\nDescription: The admin panel for managing user accounts is vulnerable to SQL Injection. Admins can search for users by their ID or username. Attackers can exploit this vulnerability to extract all user information, including usernames, account balances, and transaction histories.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin Panel User Management\", \"Lab Description\": \"The admin panel for managing user accounts is vulnerable to SQL Injection. Admins can search for users by their ID or username. Attackers can exploit this vulnerability to extract all user information, including usernames, account balances, and transaction histories.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - Advanced SQL Injection in Transfer Funds\nDescription: The funds transfer feature of the banking portal allows users to transfer funds to other accounts using an account number. However, the application fails to sanitize input properly, allowing for SQL injection attacks. Attackers can bypass authentication, manipulate transfer amounts, and redirect funds to different accounts.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Advanced SQL Injection in Transfer Funds\", \"Lab Description\": \"The funds transfer feature of the banking portal allows users to transfer funds to other accounts using an account number. However, the application fails to sanitize input properly, allowing for SQL injection attacks. Attackers can bypass authentication, manipulate transfer amounts, and redirect funds to different accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in API Authentication\nDescription: The API gateway that handles user authentication is vulnerable to SQL Injection in the login endpoint. Attackers can inject malicious SQL payloads in the username or password fields to bypass authentication and obtain an authentication token, gaining unauthorized access to the API.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in API Authentication\", \"Lab Description\": \"The API gateway that handles user authentication is vulnerable to SQL Injection in the login endpoint. Attackers can inject malicious SQL payloads in the username or password fields to bypass authentication and obtain an authentication token, gaining unauthorized access to the API.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Control Panel\nDescription: The IoT device control panel is vulnerable to SQL Injection. Attackers can exploit this vulnerability by manipulating device IDs in the SQL query, allowing them to control devices that they do not own or view device data from other users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Control Panel\", \"Lab Description\": \"The IoT device control panel is vulnerable to SQL Injection. Attackers can exploit this vulnerability by manipulating device IDs in the SQL query, allowing them to control devices that they do not own or view device data from other users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Blog Post Retrieval\nDescription: The CMS used by the blog site is vulnerable to SQL Injection in the post retrieval functionality. Attackers can inject SQL payloads into the post ID parameter, allowing them to retrieve any post content from the database, including unpublished or private posts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Blog Post Retrieval\", \"Lab Description\": \"The CMS used by the blog site is vulnerable to SQL Injection in the post retrieval functionality. Attackers can inject SQL payloads into the post ID parameter, allowing them to retrieve any post content from the database, including unpublished or private posts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Comment Section\nDescription: The comment section of the CMS blog is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve admin user credentials or other sensitive information stored in the database.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Comment Section\", \"Lab Description\": \"The comment section of the CMS blog is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve admin user credentials or other sensitive information stored in the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Balance Check\nDescription: The banking portal allows users to check their account balance. However, due to improper input validation, attackers can inject SQL queries into the account number field to extract balance information from unauthorized accounts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Balance Check\", \"Lab Description\": \"The banking portal allows users to check their account balance. However, due to improper input validation, attackers can inject SQL queries into the account number field to extract balance information from unauthorized accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Configuration\nDescription: The IoT dashboard allows users to configure their devices. Due to improper input sanitization, an attacker can inject malicious SQL code into the device ID field, gaining control over other users' devices and retrieving sensitive data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Configuration\", \"Lab Description\": \"The IoT dashboard allows users to configure their devices. Due to improper input sanitization, an attacker can inject malicious SQL code into the device ID field, gaining control over other users' devices and retrieving sensitive data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in User Registration\nDescription: The user registration endpoint in the API gateway is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields to bypass registration checks and add malicious accounts to the database.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in User Registration\", \"Lab Description\": \"The user registration endpoint in the API gateway is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields to bypass registration checks and add malicious accounts to the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Search Functionality\nDescription: The CMS search feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the search query, allowing them to bypass filters and retrieve sensitive information from the database, such as user credentials or unpublished content.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Search Functionality\", \"Lab Description\": \"The CMS search feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the search query, allowing them to bypass filters and retrieve sensitive information from the database, such as user credentials or unpublished content.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-Commerce Site - SQL Injection in Product Filters\nDescription: The e-commerce site's product filter functionality is vulnerable to SQL Injection. Attackers can inject SQL payloads into the filter parameters, allowing them to retrieve product details, manipulate prices, or bypass product visibility checks.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-Commerce Site - SQL Injection in Product Filters\", \"Lab Description\": \"The e-commerce site's product filter functionality is vulnerable to SQL Injection. Attackers can inject SQL payloads into the filter parameters, allowing them to retrieve product details, manipulate prices, or bypass product visibility checks.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Funds Transfer\nDescription: The funds transfer functionality in the banking portal is vulnerable to SQL Injection. An attacker can inject malicious SQL queries into the account number and amount fields, bypassing validation and transferring funds to unauthorized accounts.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Funds Transfer\", \"Lab Description\": \"The funds transfer functionality in the banking portal is vulnerable to SQL Injection. An attacker can inject malicious SQL queries into the account number and amount fields, bypassing validation and transferring funds to unauthorized accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS - SQL Injection in User Management\nDescription: The CMS has a user management system that allows administrators to add and remove users. Due to improper input sanitization, attackers can inject SQL queries into the user ID or role fields, modifying user privileges or deleting unauthorized accounts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in User Management\", \"Lab Description\": \"The CMS has a user management system that allows administrators to add and remove users. Due to improper input sanitization, attackers can inject SQL queries into the user ID or role fields, modifying user privileges or deleting unauthorized accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in Product Review\nDescription: The product review API in an e-commerce platform is vulnerable to SQL Injection. Attackers can inject malicious SQL queries into the review text or rating fields, allowing them to alter product ratings or view other users' reviews.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in Product Review\", \"Lab Description\": \"The product review API in an e-commerce platform is vulnerable to SQL Injection. Attackers can inject malicious SQL queries into the review text or rating fields, allowing them to alter product ratings or view other users' reviews.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Firmware Upload\nDescription: The IoT dashboard is vulnerable to SQL Injection in the device firmware upload feature. An attacker can inject SQL payloads into the device ID field, potentially compromising multiple devices or extracting firmware data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Firmware Upload\", \"Lab Description\": \"The IoT dashboard is vulnerable to SQL Injection in the device firmware upload feature. An attacker can inject SQL payloads into the device ID field, potentially compromising multiple devices or extracting firmware data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Statements\nDescription: The banking portal allows users to view their account statements. However, due to improper input sanitization, an attacker can inject SQL payloads into the account number field to access other users' statements and perform unauthorized operations.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Statements\", \"Lab Description\": \"The banking portal allows users to view their account statements. However, due to improper input sanitization, an attacker can inject SQL payloads into the account number field to access other users' statements and perform unauthorized operations.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in User Authentication\nDescription: The API gateway in a web application is vulnerable to SQL Injection in the user authentication process. An attacker can bypass the login process by injecting SQL payloads into the username or password fields, allowing access to the system.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in User Authentication\", \"Lab Description\": \"The API gateway in a web application is vulnerable to SQL Injection in the user authentication process. An attacker can bypass the login process by injecting SQL payloads into the username or password fields, allowing access to the system.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Search Function\nDescription: A CMS has a search functionality that allows users to search for posts by title. The search query parameter is not properly sanitized, allowing attackers to inject SQL queries and retrieve sensitive information or manipulate results.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Search Function\", \"Lab Description\": \"A CMS has a search functionality that allows users to search for posts by title. The search query parameter is not properly sanitized, allowing attackers to inject SQL queries and retrieve sensitive information or manipulate results.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The transaction history page in the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the transaction ID field, allowing them to view transactions of other users or manipulate transaction data.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The transaction history page in the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the transaction ID field, allowing them to view transactions of other users or manipulate transaction data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Control Panel\nDescription: The IoT dashboard allows users to control their connected devices. However, the device control panel is vulnerable to SQL Injection. An attacker can inject SQL queries into device ID fields, potentially controlling or compromising IoT devices.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Control Panel\", \"Lab Description\": \"The IoT dashboard allows users to control their connected devices. However, the device control panel is vulnerable to SQL Injection. An attacker can inject SQL queries into device ID fields, potentially controlling or compromising IoT devices.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Transfer Logs\nDescription: The banking portal stores logs of account transfer activities, which are displayed to administrators. Due to insufficient input sanitization, attackers can inject SQL payloads into the transaction ID or user ID fields to manipulate logs and hide unauthorized transactions.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Transfer Logs\", \"Lab Description\": \"The banking portal stores logs of account transfer activities, which are displayed to administrators. Due to insufficient input sanitization, attackers can inject SQL payloads into the transaction ID or user ID fields to manipulate logs and hide unauthorized transactions.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS - SQL Injection in Comment Section\nDescription: The CMS has a comment section where users can leave feedback. However, the system fails to sanitize user input, allowing attackers to inject SQL queries into the comment field. This can lead to the exposure of sensitive data or system manipulation.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Comment Section\", \"Lab Description\": \"The CMS has a comment section where users can leave feedback. However, the system fails to sanitize user input, allowing attackers to inject SQL queries into the comment field. This can lead to the exposure of sensitive data or system manipulation.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Login\nDescription: The banking portal's account login functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields, allowing unauthorized access to user accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Login\", \"Lab Description\": \"The banking portal's account login functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields, allowing unauthorized access to user accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in Product Search\nDescription: The product search feature of an e-commerce platform's API gateway is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve product data or access sensitive information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in Product Search\", \"Lab Description\": \"The product search feature of an e-commerce platform's API gateway is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve product data or access sensitive information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Fund Transfer\nDescription: The banking portal's fund transfer page is vulnerable to SQL Injection. An attacker can inject SQL queries into the transfer form, allowing unauthorized transactions or the leakage of account balances.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Fund Transfer\", \"Lab Description\": \"The banking portal's fund transfer page is vulnerable to SQL Injection. An attacker can inject SQL queries into the transfer form, allowing unauthorized transactions or the leakage of account balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Settings\nDescription: The IoT dashboard has a device settings page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into device parameters, allowing them to manipulate device configurations or access sensitive device data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Settings\", \"Lab Description\": \"The IoT dashboard has a device settings page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into device parameters, allowing them to manipulate device configurations or access sensitive device data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-commerce Platform - SQL Injection in Login Page\nDescription: The login page of the e-commerce platform is vulnerable to SQL Injection. Attackers can inject SQL payloads into the username or password fields to bypass authentication and gain unauthorized access to accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Platform - SQL Injection in Login Page\", \"Lab Description\": \"The login page of the e-commerce platform is vulnerable to SQL Injection. Attackers can inject SQL payloads into the username or password fields to bypass authentication and gain unauthorized access to accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API - SQL Injection in Search Endpoint\nDescription: An API endpoint used for searching products is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve unauthorized product data or manipulate the search results.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API - SQL Injection in Search Endpoint\", \"Lab Description\": \"An API endpoint used for searching products is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve unauthorized product data or manipulate the search results.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Balance Check\nDescription: The banking portal has a balance check feature that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the balance check request to retrieve sensitive information like account balances and transaction history.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Balance Check\", \"Lab Description\": \"The banking portal has a balance check feature that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the balance check request to retrieve sensitive information like account balances and transaction history.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Admin Panel - SQL Injection in User Management\nDescription: The admin panel of a web application is vulnerable to SQL Injection. The vulnerability exists in the user management section, where the admin can update or delete users. An attacker could manipulate the user data or delete users using SQL injection.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Admin Panel - SQL Injection in User Management\", \"Lab Description\": \"The admin panel of a web application is vulnerable to SQL Injection. The vulnerability exists in the user management section, where the admin can update or delete users. An attacker could manipulate the user data or delete users using SQL injection.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Device - SQL Injection in Device Configuration\nDescription: The IoT device configuration page is vulnerable to SQL Injection. Attackers can inject SQL payloads into configuration settings, allowing them to alter device configurations or retrieve sensitive data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device - SQL Injection in Device Configuration\", \"Lab Description\": \"The IoT device configuration page is vulnerable to SQL Injection. Attackers can inject SQL payloads into configuration settings, allowing them to alter device configurations or retrieve sensitive data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Content Management System - SQL Injection in Article Comments\nDescription: The article comment section of a CMS is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form, potentially extracting sensitive user information or altering articles.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Content Management System - SQL Injection in Article Comments\", \"Lab Description\": \"The article comment section of a CMS is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form, potentially extracting sensitive user information or altering articles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Cloud Storage - SQL Injection in File Search\nDescription: A cloud storage applicationâ€™s file search feature is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve file metadata or sensitive information, potentially leading to unauthorized access.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Cloud Storage - SQL Injection in File Search\", \"Lab Description\": \"A cloud storage applicationâ€™s file search feature is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve file metadata or sensitive information, potentially leading to unauthorized access.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Financial Portal - SQL Injection in Transaction History\nDescription: The financial portal's transaction history page is vulnerable to SQL Injection. Attackers can inject SQL payloads into the transaction ID field to retrieve sensitive transaction information or manipulate transaction records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Financial Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The financial portal's transaction history page is vulnerable to SQL Injection. Attackers can inject SQL payloads into the transaction ID field to retrieve sensitive transaction information or manipulate transaction records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Admin Dashboard - SQL Injection in User Deletion\nDescription: The admin dashboard allows admin users to delete accounts but is vulnerable to SQL Injection. An attacker could exploit this vulnerability to delete or alter user data from the database.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Admin Dashboard - SQL Injection in User Deletion\", \"Lab Description\": \"The admin dashboard allows admin users to delete accounts but is vulnerable to SQL Injection. An attacker could exploit this vulnerability to delete or alter user data from the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Healthcare Portal - SQL Injection in Patient Records\nDescription: The healthcare portal contains a vulnerable patient record page where an attacker can inject SQL payloads into the patient ID field to retrieve sensitive medical information, such as patient details and diagnoses.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare Portal - SQL Injection in Patient Records\", \"Lab Description\": \"The healthcare portal contains a vulnerable patient record page where an attacker can inject SQL payloads into the patient ID field to retrieve sensitive medical information, such as patient details and diagnoses.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Social Media Platform - SQL Injection in User Profile\nDescription: A social media platform's user profile page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the profile update form, enabling them to extract sensitive user data or modify profile details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Social Media Platform - SQL Injection in User Profile\", \"Lab Description\": \"A social media platform's user profile page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the profile update form, enabling them to extract sensitive user data or modify profile details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Travel Booking Portal - SQL Injection in Booking Details\nDescription: The travel booking portal has a booking details page that is vulnerable to SQL Injection. Attackers can inject SQL payloads into the booking reference field to retrieve confidential booking information such as payment details and travel itinerary.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Travel Booking Portal - SQL Injection in Booking Details\", \"Lab Description\": \"The travel booking portal has a booking details page that is vulnerable to SQL Injection. Attackers can inject SQL payloads into the booking reference field to retrieve confidential booking information such as payment details and travel itinerary.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Inventory Management System - SQL Injection in Item Lookup\nDescription: The inventory management system's item lookup page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the item ID field to retrieve item details or manipulate the inventory database.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory Management System - SQL Injection in Item Lookup\", \"Lab Description\": \"The inventory management system's item lookup page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the item ID field to retrieve item details or manipulate the inventory database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Forum - SQL Injection in Post Comments\nDescription: The online forum has a comment section where users can post comments. This section is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form to extract user information or modify posts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Forum - SQL Injection in Post Comments\", \"Lab Description\": \"The online forum has a comment section where users can post comments. This section is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form to extract user information or modify posts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Job Portal - SQL Injection in Job Application\nDescription: The job portal is vulnerable to SQL Injection in the job application form. Attackers can inject SQL payloads into the applicant ID field to retrieve sensitive job application data or modify existing records.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Job Portal - SQL Injection in Job Application\", \"Lab Description\": \"The job portal is vulnerable to SQL Injection in the job application form. Attackers can inject SQL payloads into the applicant ID field to retrieve sensitive job application data or modify existing records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Store - SQL Injection in Product Price Update\nDescription: The online store has a feature to update product prices, but the input field is vulnerable to SQL Injection. Attackers can inject SQL payloads into the price update request to change product prices or extract pricing data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Store - SQL Injection in Product Price Update\", \"Lab Description\": \"The online store has a feature to update product prices, but the input field is vulnerable to SQL Injection. Attackers can inject SQL payloads into the price update request to change product prices or extract pricing data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Online Banking - SQL Injection in Account Balance\nDescription: The online banking application is vulnerable to SQL Injection. An attacker can inject malicious SQL payloads into the account balance query to retrieve sensitive financial data or perform unauthorized transactions.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Banking - SQL Injection in Account Balance\", \"Lab Description\": \"The online banking application is vulnerable to SQL Injection. An attacker can inject malicious SQL payloads into the account balance query to retrieve sensitive financial data or perform unauthorized transactions.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-Commerce Site - SQL Injection in Product Search\nDescription: The e-commerce site's product search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract product details, including prices and descriptions.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-Commerce Site - SQL Injection in Product Search\", \"Lab Description\": \"The e-commerce site's product search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract product details, including prices and descriptions.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Forum - SQL Injection in User Login\nDescription: The online forum's user login form is vulnerable to SQL Injection. An attacker can inject SQL payloads into the login credentials to bypass authentication and gain access to user accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Forum - SQL Injection in User Login\", \"Lab Description\": \"The online forum's user login form is vulnerable to SQL Injection. An attacker can inject SQL payloads into the login credentials to bypass authentication and gain access to user accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Real Estate Portal - SQL Injection in Property Listings\nDescription: The real estate portal has a search functionality for filtering property listings based on price and location. The search is vulnerable to SQL Injection, which allows attackers to extract property information, including addresses and prices.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Real Estate Portal - SQL Injection in Property Listings\", \"Lab Description\": \"The real estate portal has a search functionality for filtering property listings based on price and location. The search is vulnerable to SQL Injection, which allows attackers to extract property information, including addresses and prices.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Student Portal - SQL Injection in Course Registration\nDescription: The student portal contains a course registration page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the student ID field to manipulate course registrations and extract sensitive student data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Student Portal - SQL Injection in Course Registration\", \"Lab Description\": \"The student portal contains a course registration page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the student ID field to manipulate course registrations and extract sensitive student data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Admin Dashboard - SQL Injection in Admin Login\nDescription: The admin dashboard's login page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username and password fields to bypass authentication and gain access to the admin interface.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Admin Dashboard - SQL Injection in Admin Login\", \"Lab Description\": \"The admin dashboard's login page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username and password fields to bypass authentication and gain access to the admin interface.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Online Shopping Cart - SQL Injection in Cart Checkout\nDescription: The online shopping cart system is vulnerable to SQL Injection during checkout. An attacker can inject SQL payloads into the checkout form to extract payment details or modify order information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Shopping Cart - SQL Injection in Cart Checkout\", \"Lab Description\": \"The online shopping cart system is vulnerable to SQL Injection during checkout. An attacker can inject SQL payloads into the checkout form to extract payment details or modify order information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Music Streaming Service - SQL Injection in Playlist Creation\nDescription: The music streaming service's playlist creation form is vulnerable to SQL Injection. Attackers can inject SQL payloads to modify existing playlists or extract sensitive data such as user information and playlist details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Music Streaming Service - SQL Injection in Playlist Creation\", \"Lab Description\": \"The music streaming service's playlist creation form is vulnerable to SQL Injection. Attackers can inject SQL payloads to modify existing playlists or extract sensitive data such as user information and playlist details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Library Management System - SQL Injection in Book Search\nDescription: The library management system's book search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract book details, including author information and publication dates.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Library Management System - SQL Injection in Book Search\", \"Lab Description\": \"The library management system's book search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract book details, including author information and publication dates.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Inventory Management System - SQL Injection in Item Search\nDescription: The inventory management system has a vulnerable item search feature. An attacker can inject SQL payloads into the item search field to retrieve sensitive inventory data, such as item prices, quantities, and supplier information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory Management System - SQL Injection in Item Search\", \"Lab Description\": \"The inventory management system has a vulnerable item search feature. An attacker can inject SQL payloads into the item search field to retrieve sensitive inventory data, such as item prices, quantities, and supplier information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Employee Portal - SQL Injection in Salary Query\nDescription: The employee portal allows employees to query their salary details. This query is vulnerable to SQL Injection, which allows attackers to extract salary data for all employees and potentially alter sensitive financial records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Employee Portal - SQL Injection in Salary Query\", \"Lab Description\": \"The employee portal allows employees to query their salary details. This query is vulnerable to SQL Injection, which allows attackers to extract salary data for all employees and potentially alter sensitive financial records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Job Portal - SQL Injection in Job Application\nDescription: The job portal allows users to apply for jobs by submitting their resumes. The job application form is vulnerable to SQL Injection, allowing an attacker to retrieve job applicant data, including resumes, personal information, and job preferences.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Job Portal - SQL Injection in Job Application\", \"Lab Description\": \"The job portal allows users to apply for jobs by submitting their resumes. The job application form is vulnerable to SQL Injection, allowing an attacker to retrieve job applicant data, including resumes, personal information, and job preferences.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Healthcare System - SQL Injection in Patient Record Search\nDescription: The healthcare system's patient record search feature is vulnerable to SQL Injection. An attacker can extract sensitive patient information, including medical history, diagnosis, and treatment records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare System - SQL Injection in Patient Record Search\", \"Lab Description\": \"The healthcare system's patient record search feature is vulnerable to SQL Injection. An attacker can extract sensitive patient information, including medical history, diagnosis, and treatment records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Customer Support Portal - SQL Injection in Ticket Management\nDescription: The customer support portal allows users to submit tickets for technical support. The ticket management system is vulnerable to SQL Injection, which can be exploited to extract sensitive support tickets or modify ticket statuses.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Customer Support Portal - SQL Injection in Ticket Management\", \"Lab Description\": \"The customer support portal allows users to submit tickets for technical support. The ticket management system is vulnerable to SQL Injection, which can be exploited to extract sensitive support tickets or modify ticket statuses.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Hotel Reservation System - SQL Injection in Room Availability Check\nDescription: The hotel reservation system is vulnerable to SQL Injection in the room availability check. An attacker can manipulate the query to extract information on available rooms, their prices, and booking details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Hotel Reservation System - SQL Injection in Room Availability Check\", \"Lab Description\": \"The hotel reservation system is vulnerable to SQL Injection in the room availability check. An attacker can manipulate the query to extract information on available rooms, their prices, and booking details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Event Management System - SQL Injection in Event Registration\nDescription: The event management system's registration form is vulnerable to SQL Injection. An attacker can use SQL injection to manipulate registration details and extract attendee information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Event Management System - SQL Injection in Event Registration\", \"Lab Description\": \"The event management system's registration form is vulnerable to SQL Injection. An attacker can use SQL injection to manipulate registration details and extract attendee information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Auction System - SQL Injection in Bid Submission\nDescription: The online auction system is vulnerable to SQL Injection in the bid submission form. An attacker can inject SQL payloads to retrieve auction details such as highest bid, bidder details, and item information.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Auction System - SQL Injection in Bid Submission\", \"Lab Description\": \"The online auction system is vulnerable to SQL Injection in the bid submission form. An attacker can inject SQL payloads to retrieve auction details such as highest bid, bidder details, and item information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-commerce Admin Portal - SQL Injection in Order Management\nDescription: The e-commerce platform's admin portal is vulnerable to SQL Injection when managing customer orders. An attacker who compromises an admin account could extract or modify customer order histories, payment statuses, and shipping details.\nDifficulty: Very Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Admin Portal - SQL Injection in Order Management\", \"Lab Description\": \"The e-commerce platform's admin portal is vulnerable to SQL Injection when managing customer orders. An attacker who compromises an admin account could extract or modify customer order histories, payment statuses, and shipping details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Very Hard\"}"}
{"prompt": "Lab: IoT Management Platform - SQL Injection in Device Configuration\nDescription: The IoT platform for device management has a vulnerable configuration upload feature that accepts SQL queries without proper sanitization. Attackers could extract device configurations, firmware versions, and private device keys.\nDifficulty: Very Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Management Platform - SQL Injection in Device Configuration\", \"Lab Description\": \"The IoT platform for device management has a vulnerable configuration upload feature that accepts SQL queries without proper sanitization. Attackers could extract device configurations, firmware versions, and private device keys.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Very Hard\"}"}
{"prompt": "Lab: Healthcare Portal - SQL Injection in Patient Record Search\nDescription: A healthcare portal allows searching patient records by name. The search functionality is vulnerable to SQL Injection, risking exposure of confidential medical records and insurance information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare Portal - SQL Injection in Patient Record Search\", \"Lab Description\": \"A healthcare portal allows searching patient records by name. The search functionality is vulnerable to SQL Injection, risking exposure of confidential medical records and insurance information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Travel Booking - SQL Injection in Flight Search\nDescription: The flight search functionality in an online travel booking system is vulnerable to SQL Injection, exposing flight reservation details and traveler profiles.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Travel Booking - SQL Injection in Flight Search\", \"Lab Description\": \"The flight search functionality in an online travel booking system is vulnerable to SQL Injection, exposing flight reservation details and traveler profiles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Platform - SQL Injection in Article Management\nDescription: The CMS article editing feature does not sanitize input properly, allowing an attacker to exploit SQL Injection to modify or delete content.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform - SQL Injection in Article Management\", \"Lab Description\": \"The CMS article editing feature does not sanitize input properly, allowing an attacker to exploit SQL Injection to modify or delete content.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking App - SQL Injection in Account Balance Retrieval\nDescription: The online banking app allows users to retrieve their account balance but lacks input sanitization, enabling attackers to view other customersâ€™ account information.\nDifficulty: Very Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking App - SQL Injection in Account Balance Retrieval\", \"Lab Description\": \"The online banking app allows users to retrieve their account balance but lacks input sanitization, enabling attackers to view other customersâ€™ account information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Very Hard\"}"}
{"prompt": "Lab: Online Marketplace - SQL Injection in Category Filter\nDescription: An online marketplace's category filter does not properly validate input, making it susceptible to SQL Injection, leading to exposure of all products and usersâ€™ personal details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Marketplace - SQL Injection in Category Filter\", \"Lab Description\": \"An online marketplace's category filter does not properly validate input, making it susceptible to SQL Injection, leading to exposure of all products and usersâ€™ personal details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Hotel Reservation System - SQL Injection in Booking Lookup\nDescription: The hotel reservation system allows users to check booking status by ID, but the lookup feature is vulnerable to SQL Injection, risking customer booking records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Hotel Reservation System - SQL Injection in Booking Lookup\", \"Lab Description\": \"The hotel reservation system allows users to check booking status by ID, but the lookup feature is vulnerable to SQL Injection, risking customer booking records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Educational Platform - SQL Injection in Exam Result Checker\nDescription: An education portalâ€™s exam result checker lacks input validation, enabling an attacker to perform SQL Injection to retrieve students' scores and grades.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Educational Platform - SQL Injection in Exam Result Checker\", \"Lab Description\": \"An education portalâ€™s exam result checker lacks input validation, enabling an attacker to perform SQL Injection to retrieve students' scores and grades.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Inventory Management System - SQL Injection in Item Update\nDescription: The inventory update feature does not properly sanitize user inputs, allowing SQL Injection to manipulate product inventory and pricing data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory Management System - SQL Injection in Item Update\", \"Lab Description\": \"The inventory update feature does not properly sanitize user inputs, allowing SQL Injection to manipulate product inventory and pricing data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Charity Donation Platform - SQL Injection in Donation History\nDescription: The donation history page is vulnerable to SQL Injection, allowing attackers to view donor personal information and donation amounts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Charity Donation Platform - SQL Injection in Donation History\", \"Lab Description\": \"The donation history page is vulnerable to SQL Injection, allowing attackers to view donor personal information and donation amounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Food Delivery App - SQL Injection in Order Tracking\nDescription: Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Food Delivery App - SQL Injection in Order Tracking\", \"Lab Description\": \"Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Food Delivery App - SQL Injection in Order Tracking\nDescription: Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Food Delivery App - SQL Injection in Order Tracking\", \"Lab Description\": \"Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - Time-Based SQL Injection in Transaction History\nDescription: Transaction history lookup uses raw SQL queries based on the account number without sanitization. The application delays response timing based on injected SQL sleep commands, allowing attackers to infer database contents using blind methods. To solve: extract admin account credentials using time-based SQLi inference.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Time-Based SQL Injection in Transaction History\", \"Lab Description\": \"Transaction history lookup uses raw SQL queries based on the account number without sanitization. The application delays response timing based on injected SQL sleep commands, allowing attackers to infer database contents using blind methods. To solve: extract admin account credentials using time-based SQLi inference.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Management Dashboard - UNION SQL Injection in Device Search\nDescription: A device search function concatenates user input into a SQL ORDER BY clause without validation, leading to UNION-based SQL Injection. Attackers can enumerate all device passwords. To solve: retrieve admin IoT credentials through crafted UNION payloads.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Management Dashboard - UNION SQL Injection in Device Search\", \"Lab Description\": \"A device search function concatenates user input into a SQL ORDER BY clause without validation, leading to UNION-based SQL Injection. Attackers can enumerate all device passwords. To solve: retrieve admin IoT credentials through crafted UNION payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Bank API Gateway - Out-of-Band SQL Injection in Payment Initiation\nDescription: The bank API for initiating payments is vulnerable to Out-of-Band (OOB) SQL Injection by mishandling 'reference_id'. Attackers can trigger DNS callbacks or HTTP exfiltration channels. To solve: perform successful OOB data exfiltration via Burp Collaborator.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank API Gateway - Out-of-Band SQL Injection in Payment Initiation\", \"Lab Description\": \"The bank API for initiating payments is vulnerable to Out-of-Band (OOB) SQL Injection by mishandling 'reference_id'. Attackers can trigger DNS callbacks or HTTP exfiltration channels. To solve: perform successful OOB data exfiltration via Burp Collaborator.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Admin Panel - Boolean-Based SQL Injection in User Role Verification\nDescription: The CMS checks administrative roles based on unsafe SQL queries using user_id parameters without sanitization. Boolean-based conditions allow attackers to infer admin roles by observing response differences. To solve: enumerate admin accounts through Boolean-based inference.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Admin Panel - Boolean-Based SQL Injection in User Role Verification\", \"Lab Description\": \"The CMS checks administrative roles based on unsafe SQL queries using user_id parameters without sanitization. Boolean-based conditions allow attackers to infer admin roles by observing response differences. To solve: enumerate admin accounts through Boolean-based inference.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - Error-Based SQL Injection in User Profile Update\nDescription: Profile update functionality includes SQL error details when invalid input is submitted. Attackers can exploit verbose error messages to extract database structure using error-based SQL Injection. To solve: leak table names and user data using crafted payloads.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Error-Based SQL Injection in User Profile Update\", \"Lab Description\": \"Profile update functionality includes SQL error details when invalid input is submitted. Attackers can exploit verbose error messages to extract database structure using error-based SQL Injection. To solve: leak table names and user data using crafted payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Bank Internal Admin Panel - UNION SQL Injection via Department Filter\nDescription: A hidden admin panel for managing bank employees accepts a 'department' filter that is vulnerable to UNION-based SQL Injection. Attackers can retrieve sensitive employee payroll data by injecting UNION payloads through the filter. To solve: leak and extract payroll records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Internal Admin Panel - UNION SQL Injection via Department Filter\", \"Lab Description\": \"A hidden admin panel for managing bank employees accepts a 'department' filter that is vulnerable to UNION-based SQL Injection. Attackers can retrieve sensitive employee payroll data by injecting UNION payloads through the filter. To solve: leak and extract payroll records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mobile Banking App API - Blind SQL Injection in Balance Inquiry\nDescription: The API endpoint '/api/balance' accepts an 'account_id' parameter that is not properly sanitized, leading to Boolean-Blind SQL Injection. Attackers can infer account balances and usernames by triggering true/false conditions. To solve: enumerate the database content using boolean-based inference.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mobile Banking App API - Blind SQL Injection in Balance Inquiry\", \"Lab Description\": \"The API endpoint '/api/balance' accepts an 'account_id' parameter that is not properly sanitized, leading to Boolean-Blind SQL Injection. Attackers can infer account balances and usernames by triggering true/false conditions. To solve: enumerate the database content using boolean-based inference.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Loan Application Portal - Error-Based SQL Injection in Application ID\nDescription: Loan applications are retrievable using an 'application_id' parameter without input validation, exposing error-based SQL Injection. Attackers can force SQL errors that leak backend table names and column data. To solve: retrieve full loan applications and customer credit scores.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Loan Application Portal - Error-Based SQL Injection in Application ID\", \"Lab Description\": \"Loan applications are retrievable using an 'application_id' parameter without input validation, exposing error-based SQL Injection. Attackers can force SQL errors that leak backend table names and column data. To solve: retrieve full loan applications and customer credit scores.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT Payment Reader API - OOB SQL Injection on Device Registration\nDescription: IoT payment readers register to the API by providing 'device_serial' numbers. Improper validation causes Out-of-Band SQL Injection, allowing attackers to exfiltrate data via external DNS servers. To solve: perform successful DNS exfiltration via crafted SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Payment Reader API - OOB SQL Injection on Device Registration\", \"Lab Description\": \"IoT payment readers register to the API by providing 'device_serial' numbers. Improper validation causes Out-of-Band SQL Injection, allowing attackers to exfiltrate data via external DNS servers. To solve: perform successful DNS exfiltration via crafted SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bank Admin Portal - Stacked Query SQL Injection in Batch Payment Processing\nDescription: The batch payment upload feature concatenates unvalidated fields directly into SQL queries. Stacked queries allow attackers to inject malicious statements, leading to privilege escalation or backdoor creation. To solve: inject stacked queries to create a rogue admin account.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Admin Portal - Stacked Query SQL Injection in Batch Payment Processing\", \"Lab Description\": \"The batch payment upload feature concatenates unvalidated fields directly into SQL queries. Stacked queries allow attackers to inject malicious statements, leading to privilege escalation or backdoor creation. To solve: inject stacked queries to create a rogue admin account.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Web Interface - SQL Injection via ORDER BY in Transaction History\nDescription: The transaction history page uses a dynamic 'sort_by' parameter in the ORDER BY clause without proper validation. This allows attackers to manipulate the clause to trigger SQL errors or extract hidden fields. To solve: exploit ORDER BY injection to leak hidden transaction metadata.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Web Interface - SQL Injection via ORDER BY in Transaction History\", \"Lab Description\": \"The transaction history page uses a dynamic 'sort_by' parameter in the ORDER BY clause without proper validation. This allows attackers to manipulate the clause to trigger SQL errors or extract hidden fields. To solve: exploit ORDER BY injection to leak hidden transaction metadata.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mobile Banking API - SQL Injection via JSON Body in Login Endpoint\nDescription: The login API parses JSON request bodies without sanitizing the 'username' field before embedding into a SQL query. Attackers can exploit this vector to perform JSON-based SQL Injection. To solve: bypass authentication and extract user roles.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mobile Banking API - SQL Injection via JSON Body in Login Endpoint\", \"Lab Description\": \"The login API parses JSON request bodies without sanitizing the 'username' field before embedding into a SQL query. Attackers can exploit this vector to perform JSON-based SQL Injection. To solve: bypass authentication and extract user roles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking CMS Panel - Time-Based SQL Injection in User Profile Edit\nDescription: The edit profile form allows updates via a 'user_id' parameter vulnerable to time-based SQL Injection. Attackers can extract admin credentials by observing response delays. To solve: exploit timing side channels to exfiltrate password hashes.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking CMS Panel - Time-Based SQL Injection in User Profile Edit\", \"Lab Description\": \"The edit profile form allows updates via a 'user_id' parameter vulnerable to time-based SQL Injection. Attackers can extract admin credentials by observing response delays. To solve: exploit timing side channels to exfiltrate password hashes.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bank Staff API - SQL Injection in XML-Based Login Service\nDescription: The legacy SOAP-based login API parses XML and injects values directly into SQL without validation. This leads to SQL Injection via XML elements. To solve: extract the database version and active session tokens.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Staff API - SQL Injection in XML-Based Login Service\", \"Lab Description\": \"The legacy SOAP-based login API parses XML and injects values directly into SQL without validation. This leads to SQL Injection via XML elements. To solve: extract the database version and active session tokens.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bank Admin Scheduler - GROUP BY SQL Injection in Event Aggregation\nDescription: Admin reports group events by user and device type using unfiltered user input. Improper use of GROUP BY enables SQL Injection leading to privilege escalation. To solve: inject payloads into GROUP BY clause to access hidden audit logs.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Admin Scheduler - GROUP BY SQL Injection in Event Aggregation\", \"Lab Description\": \"Admin reports group events by user and device type using unfiltered user input. Improper use of GROUP BY enables SQL Injection leading to privilege escalation. To solve: inject payloads into GROUP BY clause to access hidden audit logs.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Dashboard - Stacked SQL Injection via Currency Conversion Widget\nDescription: The currency converter widget takes an amount and a target currency via query params. Due to improper input sanitation, attackers can inject stacked SQL queries to modify exchange rate tables. To solve: override USD conversion rates to gain financial advantage.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Dashboard - Stacked SQL Injection via Currency Conversion Widget\", \"Lab Description\": \"The currency converter widget takes an amount and a target currency via query params. Due to improper input sanitation, attackers can inject stacked SQL queries to modify exchange rate tables. To solve: override USD conversion rates to gain financial advantage.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Reward API - UNION SQL Injection in Points Redeem System\nDescription: The points redeem system accepts a 'voucher_id' input which is injectable via UNION statements. Exploiting this reveals customer reward balances and account mappings. To solve: dump reward history of top users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Reward API - UNION SQL Injection in Points Redeem System\", \"Lab Description\": \"The points redeem system accepts a 'voucher_id' input which is injectable via UNION statements. Exploiting this reveals customer reward balances and account mappings. To solve: dump reward history of top users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Bank Internal File Access - SQL Injection via Filename Search\nDescription: The file search system queries the 'documents' table based on unvalidated 'filename' input. SQL Injection allows attackers to extract file contents and system paths. To solve: retrieve internal configuration files via SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Internal File Access - SQL Injection via Filename Search\", \"Lab Description\": \"The file search system queries the 'documents' table based on unvalidated 'filename' input. SQL Injection allows attackers to extract file contents and system paths. To solve: retrieve internal configuration files via SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Email Export Tool - Boolean SQL Injection in Filter Expression\nDescription: Email export filters use an injectable expression that gets appended to a WHERE clause. Attackers can use Boolean logic to infer email content and attachments. To solve: extract sensitive PDF reports by exploiting Boolean logic.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Email Export Tool - Boolean SQL Injection in Filter Expression\", \"Lab Description\": \"Email export filters use an injectable expression that gets appended to a WHERE clause. Attackers can use Boolean logic to infer email content and attachments. To solve: extract sensitive PDF reports by exploiting Boolean logic.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal stacked SQL injection in search query logging\nDescription: The backend logs every user search to a database without sanitizing input. The application fails to restrict multiple SQL statements in one request, allowing attackers to perform stacked queries. To solve: Inject a payload that adds a new admin user to the database via stacked query execution.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal stacked SQL injection in search query logging\", \"Lab Description\": \"The backend logs every user search to a database without sanitizing input. The application fails to restrict multiple SQL statements in one request, allowing attackers to perform stacked queries. To solve: Inject a payload that adds a new admin user to the database via stacked query execution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API gateway Boolean-based SQL injection in filter parameter\nDescription: An API accepts filter parameters for sorting transaction data. The SQL query does not properly escape the 'filter' parameter, enabling Boolean-based SQL injection. To solve: Extract the database version using a true/false inference technique.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway Boolean-based SQL injection in filter parameter\", \"Lab Description\": \"An API accepts filter parameters for sorting transaction data. The SQL query does not properly escape the 'filter' parameter, enabling Boolean-based SQL injection. To solve: Extract the database version using a true/false inference technique.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard UNION SQL injection in device filter\nDescription: The IoT dashboard uses a vulnerable SQL statement to filter devices based on type. The 'deviceType' parameter is not sanitized, allowing attackers to inject a UNION query. To solve: Leak admin credentials from the 'users' table via UNION-based injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard UNION SQL injection in device filter\", \"Lab Description\": \"The IoT dashboard uses a vulnerable SQL statement to filter devices based on type. The 'deviceType' parameter is not sanitized, allowing attackers to inject a UNION query. To solve: Leak admin credentials from the 'users' table via UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS comment section out-of-band SQL injection in author metadata\nDescription: The CMS stores commenter metadata and inserts the author value into the database without escaping. The backend firewall suppresses error messages, making exploitation detectable only via out-of-band channels. To solve: Trigger an OOB DNS request via injected SQL.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS comment section out-of-band SQL injection in author metadata\", \"Lab Description\": \"The CMS stores commenter metadata and inserts the author value into the database without escaping. The backend firewall suppresses error messages, making exploitation detectable only via out-of-band channels. To solve: Trigger an OOB DNS request via injected SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking portal SQL injection in account filtering with GROUP BY\nDescription: The backend forms a SQL query grouping accounts by status. It allows raw injection into the GROUP BY clause via user-supplied filters. To solve: Exploit the GROUP BY to inject HAVING clauses and trigger data leakage.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in account filtering with GROUP BY\", \"Lab Description\": \"The backend forms a SQL query grouping accounts by status. It allows raw injection into the GROUP BY clause via user-supplied filters. To solve: Exploit the GROUP BY to inject HAVING clauses and trigger data leakage.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking API SQL injection in nested JSON field\nDescription: The API processes nested JSON payloads and uses the 'account.id' field in a query without sanitization. This allows injection inside JSON bodies. To solve: Inject a payload to retrieve internal configuration data using a UNION SELECT.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API SQL injection in nested JSON field\", \"Lab Description\": \"The API processes nested JSON payloads and uses the 'account.id' field in a query without sanitization. This allows injection inside JSON bodies. To solve: Inject a payload to retrieve internal configuration data using a UNION SELECT.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL injection in ORDER BY parameter on blog list\nDescription: The blog list uses dynamic ORDER BY values from user input. There is no input whitelist or escaping, allowing injection into the SQL ORDER BY clause. To solve: Leak usernames using error-based payloads via ordering expressions.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL injection in ORDER BY parameter on blog list\", \"Lab Description\": \"The blog list uses dynamic ORDER BY values from user input. There is no input whitelist or escaping, allowing injection into the SQL ORDER BY clause. To solve: Leak usernames using error-based payloads via ordering expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT dashboard time-based SQL injection in settings update\nDescription: The dashboard stores device settings submitted via a POST form. The device ID is vulnerable to SQL injection with no error output. To solve: Use time-based payloads to extract the first character of the admin's password.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard time-based SQL injection in settings update\", \"Lab Description\": \"The dashboard stores device settings submitted via a POST form. The device ID is vulnerable to SQL injection with no error output. To solve: Use time-based payloads to extract the first character of the admin's password.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking portal UNION SQL injection in account balance query\nDescription: The banking portal allows users to view their balance by submitting an account number via URL parameters. However, the account number input is directly inserted into an SQL query without proper sanitization, enabling a UNION-based SQL injection attack. To solve: Use UNION to retrieve additional data from the users table and exploit this vulnerability to extract usernames and email addresses.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal UNION SQL injection in account balance query\", \"Lab Description\": \"The banking portal allows users to view their balance by submitting an account number via URL parameters. However, the account number input is directly inserted into an SQL query without proper sanitization, enabling a UNION-based SQL injection attack. To solve: Use UNION to retrieve additional data from the users table and exploit this vulnerability to extract usernames and email addresses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS POST-based SQL injection in user registration form\nDescription: A Content Management System (CMS) registration form allows users to create accounts by submitting their details. The backend SQL query used to insert these details does not sanitize input, allowing SQL injection attacks through form fields. To solve: Inject malicious SQL to create a new admin user in the systemâ€™s database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS POST-based SQL injection in user registration form\", \"Lab Description\": \"A Content Management System (CMS) registration form allows users to create accounts by submitting their details. The backend SQL query used to insert these details does not sanitize input, allowing SQL injection attacks through form fields. To solve: Inject malicious SQL to create a new admin user in the systemâ€™s database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT device dashboard Blind SQL injection in device ID input\nDescription: The IoT device dashboard accepts a device ID in the URL to fetch device status. The input is not sanitized, leading to a blind SQL injection vulnerability. To solve: Use boolean-based blind SQL injection to infer device status or other sensitive information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT device dashboard Blind SQL injection in device ID input\", \"Lab Description\": \"The IoT device dashboard accepts a device ID in the URL to fetch device status. The input is not sanitized, leading to a blind SQL injection vulnerability. To solve: Use boolean-based blind SQL injection to infer device status or other sensitive information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway SQL injection in POST parameter (nested JSON)\nDescription: The API accepts a nested JSON payload to update device configurations. The 'deviceId' in the JSON is vulnerable to SQL injection. To solve: Craft a nested SQL injection payload to retrieve data from other tables in the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in POST parameter (nested JSON)\", \"Lab Description\": \"The API accepts a nested JSON payload to update device configurations. The 'deviceId' in the JSON is vulnerable to SQL injection. To solve: Craft a nested SQL injection payload to retrieve data from other tables in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS user profile SQL injection in username parameter\nDescription: A CMS allows users to update their profiles. The 'username' field in the form is vulnerable to SQL injection, leading to potential data leakage. To solve: Inject SQL to retrieve other usersâ€™ usernames and email addresses from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS user profile SQL injection in username parameter\", \"Lab Description\": \"A CMS allows users to update their profiles. The 'username' field in the form is vulnerable to SQL injection, leading to potential data leakage. To solve: Inject SQL to retrieve other usersâ€™ usernames and email addresses from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway SQL injection in query parameter (username)\nDescription: The API gateway accepts a query parameter for user authentication based on the username. This parameter is not sanitized properly, leading to a SQL injection vulnerability. To solve: Use a UNION-based SQL injection to extract data from the users table and retrieve the admin credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in query parameter (username)\", \"Lab Description\": \"The API gateway accepts a query parameter for user authentication based on the username. This parameter is not sanitized properly, leading to a SQL injection vulnerability. To solve: Use a UNION-based SQL injection to extract data from the users table and retrieve the admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard Time-based Blind SQL injection in device name\nDescription: The IoT dashboard allows querying of device names through a vulnerable search API. The input is not sanitized, allowing for time-based blind SQL injection. To solve: Use time-based SQL injection to infer device information from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard Time-based Blind SQL injection in device name\", \"Lab Description\": \"The IoT dashboard allows querying of device names through a vulnerable search API. The input is not sanitized, allowing for time-based blind SQL injection. To solve: Use time-based SQL injection to infer device information from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking portal ORDER BY SQL injection in transaction history\nDescription: The banking portal allows users to view transaction histories through the 'order by' query parameter. However, the query does not sanitize the input, allowing an attacker to manipulate the query and gain unauthorized access to sensitive data. To solve: Use an ORDER BY-based SQL injection to enumerate columns and extract data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal ORDER BY SQL injection in transaction history\", \"Lab Description\": \"The banking portal allows users to view transaction histories through the 'order by' query parameter. However, the query does not sanitize the input, allowing an attacker to manipulate the query and gain unauthorized access to sensitive data. To solve: Use an ORDER BY-based SQL injection to enumerate columns and extract data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS product filter SQL injection in product ID\nDescription: The CMS allows users to filter products by ID, but the input is not sanitized. This creates an opportunity for SQL injection. To solve: Inject SQL payloads into the product ID filter to enumerate other products and extract their details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS product filter SQL injection in product ID\", \"Lab Description\": \"The CMS allows users to filter products by ID, but the input is not sanitized. This creates an opportunity for SQL injection. To solve: Inject SQL payloads into the product ID filter to enumerate other products and extract their details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT device control SQL injection in device control endpoint\nDescription: The IoT device control endpoint accepts device ID input via query parameters, which is directly inserted into an SQL query without sanitization. To solve: Exploit this vulnerability using a UNION SQL injection to access sensitive data, such as device configuration and user information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT device control SQL injection in device control endpoint\", \"Lab Description\": \"The IoT device control endpoint accepts device ID input via query parameters, which is directly inserted into an SQL query without sanitization. To solve: Exploit this vulnerability using a UNION SQL injection to access sensitive data, such as device configuration and user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API gateway SQL injection in user search API\nDescription: The API gateway allows admins to search for users by their username. The 'username' field is vulnerable to SQL injection, which can be exploited to extract data. To solve: Use a UNION-based SQL injection to retrieve sensitive user data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in user search API\", \"Lab Description\": \"The API gateway allows admins to search for users by their username. The 'username' field is vulnerable to SQL injection, which can be exploited to extract data. To solve: Use a UNION-based SQL injection to retrieve sensitive user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal HAVING SQL injection in transaction query\nDescription: The banking portal uses a HAVING clause to filter transactions by status. The application does not sanitize input, allowing an attacker to inject malicious SQL. To solve: Use a HAVING clause-based SQL injection to enumerate columns and extract sensitive transaction data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal HAVING SQL injection in transaction query\", \"Lab Description\": \"The banking portal uses a HAVING clause to filter transactions by status. The application does not sanitize input, allowing an attacker to inject malicious SQL. To solve: Use a HAVING clause-based SQL injection to enumerate columns and extract sensitive transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS file upload SQL injection in file name parameter\nDescription: The CMS allows users to upload profile images, but it is vulnerable to SQL injection in the 'fileName' parameter. An attacker can inject SQL into the file name, which is used in a database query. To solve: Exploit the SQL injection vulnerability to extract user data by manipulating the file name parameter.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS file upload SQL injection in file name parameter\", \"Lab Description\": \"The CMS allows users to upload profile images, but it is vulnerable to SQL injection in the 'fileName' parameter. An attacker can inject SQL into the file name, which is used in a database query. To solve: Exploit the SQL injection vulnerability to extract user data by manipulating the file name parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal XSS stored in transaction search\nDescription: The banking portal's transaction search page is vulnerable to stored XSS. An attacker can inject malicious JavaScript into the search query, which will be stored and executed in the response. To solve: Exploit the XSS vulnerability to steal session tokens.\nDifficulty: Medium\nVuln: XSS\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal XSS stored in transaction search\", \"Lab Description\": \"The banking portal's transaction search page is vulnerable to stored XSS. An attacker can inject malicious JavaScript into the search query, which will be stored and executed in the response. To solve: Exploit the XSS vulnerability to steal session tokens.\", \"Vulnerability name\": \"XSS\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard UNION-based SQL injection in device control\nDescription: The IoT dashboard allows device control based on the device ID, but it is vulnerable to SQL injection in the device ID parameter. To solve: Use a UNION-based SQL injection to extract sensitive user information from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard UNION-based SQL injection in device control\", \"Lab Description\": \"The IoT dashboard allows device control based on the device ID, but it is vulnerable to SQL injection in the device ID parameter. To solve: Use a UNION-based SQL injection to extract sensitive user information from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal Boolean-based Blind SQL injection in account balance query\nDescription: The banking portal allows querying of account balances, but it is vulnerable to Boolean-based blind SQL injection. To solve: Use Boolean-based blind SQL injection to infer account balance information by testing for true/false conditions.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal Boolean-based Blind SQL injection in account balance query\", \"Lab Description\": \"The banking portal allows querying of account balances, but it is vulnerable to Boolean-based blind SQL injection. To solve: Use Boolean-based blind SQL injection to infer account balance information by testing for true/false conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS search SQL injection in title parameter\nDescription: The CMS search functionality is vulnerable to SQL injection in the title query parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use a UNION-based SQL injection to enumerate columns and extract sensitive information.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS search SQL injection in title parameter\", \"Lab Description\": \"The CMS search functionality is vulnerable to SQL injection in the title query parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use a UNION-based SQL injection to enumerate columns and extract sensitive information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT dashboard Time-based Blind SQL injection in sensor data query\nDescription: The IoT dashboard is vulnerable to time-based blind SQL injection in the sensor data query, allowing an attacker to infer sensor data from the database by observing time delays. To solve: Use time-based blind SQL injection to retrieve sensitive data by introducing delays.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard Time-based Blind SQL injection in sensor data query\", \"Lab Description\": \"The IoT dashboard is vulnerable to time-based blind SQL injection in the sensor data query, allowing an attacker to infer sensor data from the database by observing time delays. To solve: Use time-based blind SQL injection to retrieve sensitive data by introducing delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS user authentication SQL injection in password reset endpoint\nDescription: The CMS is vulnerable to SQL injection in the password reset endpoint, where the user ID is used in an SQL query. To solve: Use UNION-based SQL injection to extract user details and bypass the authentication process.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS user authentication SQL injection in password reset endpoint\", \"Lab Description\": \"The CMS is vulnerable to SQL injection in the password reset endpoint, where the user ID is used in an SQL query. To solve: Use UNION-based SQL injection to extract user details and bypass the authentication process.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal UNION SQL injection in fund transfer\nDescription: The banking portal has a fund transfer feature that is vulnerable to UNION-based SQL injection in the transfer amount parameter. To solve: Use a UNION-based SQL injection to extract sensitive banking information from the database, including user details and account balances.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal UNION SQL injection in fund transfer\", \"Lab Description\": \"The banking portal has a fund transfer feature that is vulnerable to UNION-based SQL injection in the transfer amount parameter. To solve: Use a UNION-based SQL injection to extract sensitive banking information from the database, including user details and account balances.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS article editing SQL injection in article ID\nDescription: The CMS article editing functionality uses the article ID in an SQL query without sanitizing the input. This opens the door for SQL injection. To solve: Use SQL injection to modify or delete articles from the CMS by exploiting the vulnerability in the article ID parameter.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS article editing SQL injection in article ID\", \"Lab Description\": \"The CMS article editing functionality uses the article ID in an SQL query without sanitizing the input. This opens the door for SQL injection. To solve: Use SQL injection to modify or delete articles from the CMS by exploiting the vulnerability in the article ID parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway SQL injection in API response data query\nDescription: The API gateway exposes a vulnerable query endpoint that retrieves response data based on user input. To solve: Use SQL injection to access sensitive data from the API database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in API response data query\", \"Lab Description\": \"The API gateway exposes a vulnerable query endpoint that retrieves response data based on user input. To solve: Use SQL injection to access sensitive data from the API database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal ORDER BY SQL injection in transaction history\nDescription: The banking portal transaction history is vulnerable to SQL injection in the 'ORDER BY' clause. An attacker can inject malicious SQL queries into the 'ORDER BY' clause to bypass authentication. To solve: Use UNION-based SQL injection and manipulate the 'ORDER BY' clause to extract sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal ORDER BY SQL injection in transaction history\", \"Lab Description\": \"The banking portal transaction history is vulnerable to SQL injection in the 'ORDER BY' clause. An attacker can inject malicious SQL queries into the 'ORDER BY' clause to bypass authentication. To solve: Use UNION-based SQL injection and manipulate the 'ORDER BY' clause to extract sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS image upload SQL injection in filename parameter\nDescription: The CMS allows image uploads but does not sanitize the filename input. This can lead to SQL injection in the filename parameter. To solve: Use UNION-based SQL injection to extract sensitive database information from the vulnerable filename parameter.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS image upload SQL injection in filename parameter\", \"Lab Description\": \"The CMS allows image uploads but does not sanitize the filename input. This can lead to SQL injection in the filename parameter. To solve: Use UNION-based SQL injection to extract sensitive database information from the vulnerable filename parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking portal GROUP BY SQL injection in account transaction summary\nDescription: The banking portal has a vulnerability in the 'GROUP BY' clause of the account transaction summary query. The vulnerability allows an attacker to manipulate the query and access sensitive data. To solve: Use SQL injection to manipulate the 'GROUP BY' clause and extract account balances and transaction details.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal GROUP BY SQL injection in account transaction summary\", \"Lab Description\": \"The banking portal has a vulnerability in the 'GROUP BY' clause of the account transaction summary query. The vulnerability allows an attacker to manipulate the query and access sensitive data. To solve: Use SQL injection to manipulate the 'GROUP BY' clause and extract account balances and transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway WHERE SQL injection in product details\nDescription: The API gateway endpoint for fetching product details is vulnerable to SQL injection in the product ID parameter. This allows an attacker to extract sensitive information from the database. To solve: Use SQL injection to manipulate the 'WHERE' clause and retrieve product data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway WHERE SQL injection in product details\", \"Lab Description\": \"The API gateway endpoint for fetching product details is vulnerable to SQL injection in the product ID parameter. This allows an attacker to extract sensitive information from the database. To solve: Use SQL injection to manipulate the 'WHERE' clause and retrieve product data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS search functionality SQL injection in keywords parameter\nDescription: The CMS search functionality is vulnerable to SQL injection in the keywords parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use SQL injection to extract sensitive information from the database and enumerate articles.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS search functionality SQL injection in keywords parameter\", \"Lab Description\": \"The CMS search functionality is vulnerable to SQL injection in the keywords parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use SQL injection to extract sensitive information from the database and enumerate articles.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking portal HAVING SQL injection in account balances\nDescription: The banking portal has a vulnerability in the 'HAVING' clause of the account balance query, allowing an attacker to inject SQL and bypass security mechanisms. To solve: Use SQL injection in the HAVING clause to extract sensitive banking information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal HAVING SQL injection in account balances\", \"Lab Description\": \"The banking portal has a vulnerability in the 'HAVING' clause of the account balance query, allowing an attacker to inject SQL and bypass security mechanisms. To solve: Use SQL injection in the HAVING clause to extract sensitive banking information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS article deletion SQL injection in article ID\nDescription: The CMS has an endpoint for article deletion that is vulnerable to SQL injection in the article ID parameter. An attacker can delete articles or modify the query to retrieve data from the database. To solve: Use SQL injection to delete articles or retrieve sensitive data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS article deletion SQL injection in article ID\", \"Lab Description\": \"The CMS has an endpoint for article deletion that is vulnerable to SQL injection in the article ID parameter. An attacker can delete articles or modify the query to retrieve data from the database. To solve: Use SQL injection to delete articles or retrieve sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard ORDER BY SQL injection in sensor status query\nDescription: The IoT dashboard is vulnerable to SQL injection in the 'ORDER BY' clause of the sensor status query, allowing an attacker to bypass restrictions and extract sensitive sensor data. To solve: Use SQL injection in the 'ORDER BY' clause to retrieve system status and sensitive sensor data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard ORDER BY SQL injection in sensor status query\", \"Lab Description\": \"The IoT dashboard is vulnerable to SQL injection in the 'ORDER BY' clause of the sensor status query, allowing an attacker to bypass restrictions and extract sensitive sensor data. To solve: Use SQL injection in the 'ORDER BY' clause to retrieve system status and sensitive sensor data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway WHERE SQL injection in user profile\nDescription: The API gateway is vulnerable to SQL injection in the 'WHERE' clause of the user profile query, allowing attackers to extract sensitive user data. The 'user_id' parameter is unsanitized. To solve: Use SQL injection to manipulate the 'WHERE' clause and extract user details.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway WHERE SQL injection in user profile\", \"Lab Description\": \"The API gateway is vulnerable to SQL injection in the 'WHERE' clause of the user profile query, allowing attackers to extract sensitive user data. The 'user_id' parameter is unsanitized. To solve: Use SQL injection to manipulate the 'WHERE' clause and extract user details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal SQL injection in the account balance retrieval\nDescription: The banking portal has an SQL injection vulnerability in the account balance retrieval query, specifically in the 'account_id' parameter. This vulnerability allows attackers to access sensitive account balance information. To solve: Use SQL injection to manipulate the query and extract the account balance.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in the account balance retrieval\", \"Lab Description\": \"The banking portal has an SQL injection vulnerability in the account balance retrieval query, specifically in the 'account_id' parameter. This vulnerability allows attackers to access sensitive account balance information. To solve: Use SQL injection to manipulate the query and extract the account balance.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS comment form SQL injection in comment ID\nDescription: The CMS comment form allows for unsanitized input in the comment ID, making it vulnerable to SQL injection. An attacker can manipulate the comment ID parameter to retrieve or modify comments in the database. To solve: Use SQL injection to extract comment data and manipulate the query.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS comment form SQL injection in comment ID\", \"Lab Description\": \"The CMS comment form allows for unsanitized input in the comment ID, making it vulnerable to SQL injection. An attacker can manipulate the comment ID parameter to retrieve or modify comments in the database. To solve: Use SQL injection to extract comment data and manipulate the query.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API gateway SQL injection in product details lookup\nDescription: The API gateway has an SQL injection vulnerability in the product details lookup query, specifically in the 'product_id' parameter. An attacker can retrieve sensitive product data by exploiting the vulnerability. To solve: Use SQL injection to manipulate the 'product_id' parameter and retrieve product details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in product details lookup\", \"Lab Description\": \"The API gateway has an SQL injection vulnerability in the product details lookup query, specifically in the 'product_id' parameter. An attacker can retrieve sensitive product data by exploiting the vulnerability. To solve: Use SQL injection to manipulate the 'product_id' parameter and retrieve product details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT dashboard GROUP BY SQL injection in sensor statistics\nDescription: The IoT dashboard is vulnerable to SQL injection in the 'GROUP BY' clause of the sensor statistics query. An attacker can exploit this vulnerability to manipulate the sensor data summary. To solve: Use SQL injection to modify the 'GROUP BY' clause and retrieve sensitive statistics from the sensors database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard GROUP BY SQL injection in sensor statistics\", \"Lab Description\": \"The IoT dashboard is vulnerable to SQL injection in the 'GROUP BY' clause of the sensor statistics query. An attacker can exploit this vulnerability to manipulate the sensor data summary. To solve: Use SQL injection to modify the 'GROUP BY' clause and retrieve sensitive statistics from the sensors database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal SQL injection in account transfer page\nDescription: The banking portal account transfer page is vulnerable to SQL injection in the 'amount' parameter, which is unsanitized. An attacker can exploit this vulnerability to manipulate account transfer operations. To solve: Use SQL injection to bypass the transfer amount validation and retrieve sensitive information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in account transfer page\", \"Lab Description\": \"The banking portal account transfer page is vulnerable to SQL injection in the 'amount' parameter, which is unsanitized. An attacker can exploit this vulnerability to manipulate account transfer operations. To solve: Use SQL injection to bypass the transfer amount validation and retrieve sensitive information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Inventory API vulnerable to SQL injection via product lookup\nDescription: SQL injection is possible in the 'product lookup' due to unsanitized input, enabling attackers to extract private records. The application directly interpolates user input into SQL queries. To solve: exploit the injection to access hidden inventory data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory API vulnerable to SQL injection via product lookup\", \"Lab Description\": \"SQL injection is possible in the 'product lookup' due to unsanitized input, enabling attackers to extract private records. The application directly interpolates user input into SQL queries. To solve: exploit the injection to access hidden inventory data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Student portal SQL injection in grade report export\nDescription: The 'grade report export' fails to sanitize input, leading to SQL injection vulnerabilities in key queries. The application builds an export query using unvalidated student IDs. To solve: extract grade data for all students.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Student portal SQL injection in grade report export\", \"Lab Description\": \"The 'grade report export' fails to sanitize input, leading to SQL injection vulnerabilities in key queries. The application builds an export query using unvalidated student IDs. To solve: extract grade data for all students.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Healthcare app SQL injection in prescription history access\nDescription: The 'prescription history access' feature allows input to be injected into an SQL query that retrieves prescription records. The application lacks filtering on patient identifiers. To solve: extract prescription data for another patient.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare app SQL injection in prescription history access\", \"Lab Description\": \"The 'prescription history access' feature allows input to be injected into an SQL query that retrieves prescription records. The application lacks filtering on patient identifiers. To solve: extract prescription data for another patient.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portalâ€™s loan approval feature allows users to filter loans based on specific criteria. The application integrates user input into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive loan applicant data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portalâ€™s loan approval feature allows users to filter loans based on specific criteria. The application integrates user input into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive loan applicant data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMSâ€™s article search feature allows users to sort articles based on various criteria. The application includes unsanitized user input directly into the ORDER BY clause, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive article content and user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMSâ€™s article search feature allows users to sort articles based on various criteria. The application includes unsanitized user input directly into the ORDER BY clause, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive article content and user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboardâ€™s device statistics feature groups devices based on various user-defined criteria. The application improperly integrates user input into the GROUP BY clause, allowing for SQL injection. To solve: Exploit the GROUP BY clause to retrieve sensitive device information and credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboardâ€™s device statistics feature groups devices based on various user-defined criteria. The application improperly integrates user input into the GROUP BY clause, allowing for SQL injection. To solve: Exploit the GROUP BY clause to retrieve sensitive device information and credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API gateway exposes a feature that allows users to filter requests based on various criteria. The application improperly integrates user input into the HAVING clause, which allows SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive API credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API gateway exposes a feature that allows users to filter requests based on various criteria. The application improperly integrates user input into the HAVING clause, which allows SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive API credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portalâ€™s account search feature allows users to search for accounts based on user-defined parameters. The application integrates user input directly into the HAVING clause without sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive account data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portalâ€™s account search feature allows users to search for accounts based on user-defined parameters. The application integrates user input directly into the HAVING clause without sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive account data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMSâ€™s user content filter feature allows users to sort content based on various criteria. The application integrates user input directly into the ORDER BY clause, which leads to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user content and administrative data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMSâ€™s user content filter feature allows users to sort content based on various criteria. The application integrates user input directly into the ORDER BY clause, which leads to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user content and administrative data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard allows filtering devices based on user-defined criteria and uses a HAVING clause to refine device data. Improper input handling allows SQL injection in the HAVING clause. To solve: Exploit the HAVING clause to retrieve device secret credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard allows filtering devices based on user-defined criteria and uses a HAVING clause to refine device data. Improper input handling allows SQL injection in the HAVING clause. To solve: Exploit the HAVING clause to retrieve device secret credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portalâ€™s transaction search feature improperly includes user input into the WHERE clause, allowing for SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive transaction details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portalâ€™s transaction search feature improperly includes user input into the WHERE clause, allowing for SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMSâ€™s user filter functionality is vulnerable to SQL injection because it improperly integrates user input into the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMSâ€™s user filter functionality is vulnerable to SQL injection because it improperly integrates user input into the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows users to sort devices by various attributes. The application includes unsanitized user input directly into the ORDER BY clause, allowing for SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows users to sort devices by various attributes. The application includes unsanitized user input directly into the ORDER BY clause, allowing for SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in GROUP BY Clause\nDescription: The API gateway allows sorting and grouping of data from various endpoints. Improper handling of user input in the GROUP BY clause creates a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract sensitive API credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The API gateway allows sorting and grouping of data from various endpoints. Improper handling of user input in the GROUP BY clause creates a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract sensitive API credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portalâ€™s account balance feature improperly integrates user input into the SELECT clause, allowing for SQL injection. To solve: Exploit the SELECT clause to retrieve sensitive customer information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portalâ€™s account balance feature improperly integrates user input into the SELECT clause, allowing for SQL injection. To solve: Exploit the SELECT clause to retrieve sensitive customer information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMSâ€™s article search feature includes user input directly into the WHERE clause, making it vulnerable to SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive article and user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMSâ€™s article search feature includes user input directly into the WHERE clause, making it vulnerable to SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive article and user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboardâ€™s device filter feature improperly uses user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive device credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboardâ€™s device filter feature improperly uses user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive device credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in WHERE Clause\nDescription: The API gatewayâ€™s query endpoint improperly integrates user input into the WHERE clause, creating an SQL injection vulnerability. To solve: Exploit the WHERE clause to retrieve sensitive API credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in WHERE Clause\", \"Lab Description\": \"The API gatewayâ€™s query endpoint improperly integrates user input into the WHERE clause, creating an SQL injection vulnerability. To solve: Exploit the WHERE clause to retrieve sensitive API credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portalâ€™s transaction sorting feature includes user input in the ORDER BY clause, making it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive transaction data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portalâ€™s transaction sorting feature includes user input in the ORDER BY clause, making it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in JOIN Clause\nDescription: The CMS application joins the articles table with the authors table, but it does not sanitize user input. To solve: Exploit the JOIN clause to extract sensitive data from the authors table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in JOIN Clause\", \"Lab Description\": \"The CMS application joins the articles table with the authors table, but it does not sanitize user input. To solve: Exploit the JOIN clause to extract sensitive data from the authors table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portalâ€™s transaction summary page uses user input in the GROUP BY clause for sorting. To solve: Exploit the GROUP BY clause to retrieve sensitive account information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portalâ€™s transaction summary page uses user input in the GROUP BY clause for sorting. To solve: Exploit the GROUP BY clause to retrieve sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in LIMIT Clause\nDescription: The IoT dashboard improperly includes user input in the LIMIT clause, allowing for SQL injection. To solve: Exploit the LIMIT clause to extract sensitive device data.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in LIMIT Clause\", \"Lab Description\": \"The IoT dashboard improperly includes user input in the LIMIT clause, allowing for SQL injection. To solve: Exploit the LIMIT clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS application allows administrators to add new users through a form, but it does not properly sanitize the input in the INSERT query. To solve: Inject SQL into the INSERT clause to create a new admin user.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS application allows administrators to add new users through a form, but it does not properly sanitize the input in the INSERT query. To solve: Inject SQL into the INSERT clause to create a new admin user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in LIMIT Clause\nDescription: The API Gateway improperly uses user input in the LIMIT clause for paginating API results. To solve: Exploit the LIMIT clause to retrieve sensitive API client data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in LIMIT Clause\", \"Lab Description\": \"The API Gateway improperly uses user input in the LIMIT clause for paginating API results. To solve: Exploit the LIMIT clause to retrieve sensitive API client data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portalâ€™s report generation feature improperly handles user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive user and account information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portalâ€™s report generation feature improperly handles user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive user and account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard improperly uses user input in the ORDER BY clause, allowing SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device configuration data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard improperly uses user input in the ORDER BY clause, allowing SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device configuration data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in DELETE Clause\nDescription: The CMS allows administrators to delete posts via user input, but fails to sanitize the input properly, leaving it vulnerable to SQL injection. To solve: Inject SQL into the DELETE clause to remove data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in DELETE Clause\", \"Lab Description\": \"The CMS allows administrators to delete posts via user input, but fails to sanitize the input properly, leaving it vulnerable to SQL injection. To solve: Inject SQL into the DELETE clause to remove data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal filters transactions using user input in the WHERE clause, but does not sanitize it properly. To solve: Exploit the WHERE clause to retrieve sensitive account data from the transactions table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal filters transactions using user input in the WHERE clause, but does not sanitize it properly. To solve: Exploit the WHERE clause to retrieve sensitive account data from the transactions table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API Gateway uses user input in the ORDER BY clause to sort API results, leaving it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user credentials.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API Gateway uses user input in the ORDER BY clause to sort API results, leaving it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in LIMIT Clause\nDescription: The IoT dashboard uses user input in the LIMIT clause to paginate results. To solve: Exploit the LIMIT clause to extract device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in LIMIT Clause\", \"Lab Description\": \"The IoT dashboard uses user input in the LIMIT clause to paginate results. To solve: Exploit the LIMIT clause to extract device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in UPDATE Clause\nDescription: The CMS allows administrators to update articles but does not sanitize the input used in the UPDATE clause. To solve: Inject SQL into the UPDATE clause to modify article data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UPDATE Clause\", \"Lab Description\": \"The CMS allows administrators to update articles but does not sanitize the input used in the UPDATE clause. To solve: Inject SQL into the UPDATE clause to modify article data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal uses user input in the HAVING clause of SQL queries to filter transactions. To solve: Exploit the HAVING clause to extract sensitive account information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal uses user input in the HAVING clause of SQL queries to filter transactions. To solve: Exploit the HAVING clause to extract sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in WHERE Clause\nDescription: The IoT dashboard queries devices based on user input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive device configurations.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in WHERE Clause\", \"Lab Description\": \"The IoT dashboard queries devices based on user input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive device configurations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows users to submit content for publication, but fails to sanitize input in the INSERT clause. To solve: Inject SQL into the INSERT statement to create a new admin user.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows users to submit content for publication, but fails to sanitize input in the INSERT clause. To solve: Inject SQL into the INSERT statement to create a new admin user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portal allows users to check their transaction history but fails to sanitize user input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive account data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portal allows users to check their transaction history but fails to sanitize user input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive account data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard uses user input in the GROUP BY clause to group devices by their type. To solve: Exploit the GROUP BY clause to extract sensitive device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard uses user input in the GROUP BY clause to group devices by their type. To solve: Exploit the GROUP BY clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in DELETE Clause\nDescription: The CMS allows users to delete their own content but fails to sanitize the input used in the DELETE clause. To solve: Inject SQL into the DELETE clause to delete other users' content.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in DELETE Clause\", \"Lab Description\": \"The CMS allows users to delete their own content but fails to sanitize the input used in the DELETE clause. To solve: Inject SQL into the DELETE clause to delete other users' content.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in INSERT Clause\nDescription: The API Gateway allows users to add new records but fails to sanitize the input used in the INSERT clause. To solve: Inject SQL into the INSERT statement to add new users to the system.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in INSERT Clause\", \"Lab Description\": \"The API Gateway allows users to add new records but fails to sanitize the input used in the INSERT clause. To solve: Inject SQL into the INSERT statement to add new users to the system.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal allows users to filter transactions using the HAVING clause. To solve: Exploit the HAVING clause to extract sensitive transaction data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions using the HAVING clause. To solve: Exploit the HAVING clause to extract sensitive transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows sorting of device data by user input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows sorting of device data by user input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMS allows administrators to view articles by category using the WHERE clause. To solve: Inject SQL into the WHERE clause to retrieve all articles in the system, including hidden ones.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMS allows administrators to view articles by category using the WHERE clause. To solve: Inject SQL into the WHERE clause to retrieve all articles in the system, including hidden ones.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to filter account balances by grouping. To solve: Exploit the GROUP BY clause to extract sensitive user balance information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to filter account balances by grouping. To solve: Exploit the GROUP BY clause to extract sensitive user balance information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in WHERE Clause\nDescription: The API Gateway allows users to query specific records but fails to sanitize the input in the WHERE clause. To solve: Exploit the WHERE clause to extract user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in WHERE Clause\", \"Lab Description\": \"The API Gateway allows users to query specific records but fails to sanitize the input in the WHERE clause. To solve: Exploit the WHERE clause to extract user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal allows users to sort transactions by date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive account data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal allows users to sort transactions by date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive account data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard uses the HAVING clause to filter devices based on sensor data but fails to sanitize input. To solve: Exploit the HAVING clause to extract sensitive device data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard uses the HAVING clause to filter devices based on sensor data but fails to sanitize input. To solve: Exploit the HAVING clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in UNION Clause\nDescription: The CMS allows users to filter content based on tags but fails to sanitize user input in the UNION clause. To solve: Exploit the UNION clause to extract content-related data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UNION Clause\", \"Lab Description\": \"The CMS allows users to filter content based on tags but fails to sanitize user input in the UNION clause. To solve: Exploit the UNION clause to extract content-related data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows users to query record details but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows users to query record details but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in INSERT Clause\nDescription: The banking portal allows users to add transactions but fails to sanitize input in the INSERT clause. To solve: Inject SQL to add fake transactions.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in INSERT Clause\", \"Lab Description\": \"The banking portal allows users to add transactions but fails to sanitize input in the INSERT clause. To solve: Inject SQL to add fake transactions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in UPDATE Clause\nDescription: The IoT dashboard allows users to update device status but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in UPDATE Clause\", \"Lab Description\": \"The IoT dashboard allows users to update device status but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in UPDATE Clause\nDescription: The CMS allows administrators to update article details but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify article content.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UPDATE Clause\", \"Lab Description\": \"The CMS allows administrators to update article details but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify article content.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in DELETE Clause\nDescription: The API Gateway allows users to delete specific records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to remove records.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in DELETE Clause\", \"Lab Description\": \"The API Gateway allows users to delete specific records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to remove records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to view transactions grouped by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive account information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to view transactions grouped by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard allows users to filter devices based on their sensor data using the HAVING clause, but input is not sanitized. To solve: Exploit the HAVING clause to extract data about users and devices.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard allows users to filter devices based on their sensor data using the HAVING clause, but input is not sanitized. To solve: Exploit the HAVING clause to extract data about users and devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in SELECT Clause\nDescription: The CMS allows filtering of content based on tags but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive content.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in SELECT Clause\", \"Lab Description\": \"The CMS allows filtering of content based on tags but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive content.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in WHERE Clause\nDescription: The API Gateway allows querying records based on filters but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to inject SQL and extract sensitive data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in WHERE Clause\", \"Lab Description\": \"The API Gateway allows querying records based on filters but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to inject SQL and extract sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in DELETE Clause\nDescription: The banking portal allows deletion of transactions but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete specific records.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in DELETE Clause\", \"Lab Description\": \"The banking portal allows deletion of transactions but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete specific records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in SELECT Clause\nDescription: The IoT dashboard allows querying device information but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in SELECT Clause\", \"Lab Description\": \"The IoT dashboard allows querying device information but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows inserting new articles but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add fake articles.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows inserting new articles but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add fake articles.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in UPDATE Clause\nDescription: The API Gateway allows updating user information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user details.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in UPDATE Clause\", \"Lab Description\": \"The API Gateway allows updating user information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in LIMIT Clause\nDescription: The banking portal allows filtering transactions but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to bypass filtering and extract more data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in LIMIT Clause\", \"Lab Description\": \"The banking portal allows filtering transactions but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to bypass filtering and extract more data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal allows sorting transactions by date, but input is not sanitized in the ORDER BY clause. To solve: Exploit the ORDER BY clause to manipulate the query and extract sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal allows sorting transactions by date, but input is not sanitized in the ORDER BY clause. To solve: Exploit the ORDER BY clause to manipulate the query and extract sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in INSERT Clause\nDescription: The IoT dashboard allows users to add devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the device database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in INSERT Clause\", \"Lab Description\": \"The IoT dashboard allows users to add devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the device database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMS allows filtering of articles but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive content from the articles database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMS allows filtering of articles but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive content from the articles database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in INSERT Clause\nDescription: The API Gateway allows adding new records but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add arbitrary data into the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in INSERT Clause\", \"Lab Description\": \"The API Gateway allows adding new records but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add arbitrary data into the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portal allows filtering transactions by account type but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portal allows filtering transactions by account type but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in JOIN Clause\nDescription: The CMS allows displaying user comments on articles but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to extract user data from the 'users' table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in JOIN Clause\", \"Lab Description\": \"The CMS allows displaying user comments on articles but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to extract user data from the 'users' table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in DELETE Clause\nDescription: The API Gateway allows deleting records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete critical records from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in DELETE Clause\", \"Lab Description\": \"The API Gateway allows deleting records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete critical records from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard allows users to view device status grouped by categories but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive information from the devices table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard allows users to view device status grouped by categories but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive information from the devices table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in LIMIT Clause\nDescription: The banking portal allows limiting the number of transactions displayed but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to extract sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in LIMIT Clause\", \"Lab Description\": \"The banking portal allows limiting the number of transactions displayed but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to extract sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in INSERT Clause\nDescription: The IoT dashboard allows adding new devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the devices table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in INSERT Clause\", \"Lab Description\": \"The IoT dashboard allows adding new devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the devices table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in JOIN Clause\nDescription: The API Gateway allows querying joined data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve additional sensitive data from other tables.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in JOIN Clause\", \"Lab Description\": \"The API Gateway allows querying joined data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve additional sensitive data from other tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS allows categorizing articles by author but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS allows categorizing articles by author but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in DELETE Clause\nDescription: The IoT dashboard allows deleting devices but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete arbitrary devices from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in DELETE Clause\", \"Lab Description\": \"The IoT dashboard allows deleting devices but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete arbitrary devices from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portal allows viewing transactions by account number but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portal allows viewing transactions by account number but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMS allows sorting articles by publication date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMS allows sorting articles by publication date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in UPDATE Clause\nDescription: The API Gateway allows updating user profile information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in UPDATE Clause\", \"Lab Description\": \"The API Gateway allows updating user profile information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal allows filtering transactions by type but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal allows filtering transactions by type but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in WHERE Clause\nDescription: The IoT dashboard allows users to view device status based on device ID but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from other tables.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in WHERE Clause\", \"Lab Description\": \"The IoT dashboard allows users to view device status based on device ID but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from other tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows admins to add new categories but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the categories table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows admins to add new categories but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the categories table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows querying users by email but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows querying users by email but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal allows filtering transactions by date but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal allows filtering transactions by date but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in JOIN Clause\nDescription: The IoT dashboard allows joining device information with user data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in JOIN Clause\", \"Lab Description\": \"The IoT dashboard allows joining device information with user data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMS allows querying articles by author but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMS allows querying articles by author but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API Gateway allows ordering users by registration date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API Gateway allows ordering users by registration date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in UNION SELECT\nDescription: The banking portal allows filtering user transactions but fails to sanitize input in the UNION SELECT clause. To solve: Exploit the UNION SELECT clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in UNION SELECT\", \"Lab Description\": \"The banking portal allows filtering user transactions but fails to sanitize input in the UNION SELECT clause. To solve: Exploit the UNION SELECT clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS allows grouping articles by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS allows grouping articles by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal allows users to query their transaction history by date, but the query is vulnerable in the WHERE clause. To solve: Exploit the WHERE clause to extract unauthorized information from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal allows users to query their transaction history by date, but the query is vulnerable in the WHERE clause. To solve: Exploit the WHERE clause to extract unauthorized information from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in DELETE Clause\nDescription: The CMS allows admins to delete posts by post ID but fails to sanitize the input. To solve: Exploit the DELETE clause to remove posts or insert malicious data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in DELETE Clause\", \"Lab Description\": \"The CMS allows admins to delete posts by post ID but fails to sanitize the input. To solve: Exploit the DELETE clause to remove posts or insert malicious data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows querying user details by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows querying user details by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to group transactions by type but fails to sanitize the input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to group transactions by type but fails to sanitize the input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows sorting devices by name but fails to sanitize the input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows sorting devices by name but fails to sanitize the input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in JOIN Clause\nDescription: The CMS allows fetching articles with their associated authors but fails to sanitize the JOIN clause input. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in JOIN Clause\", \"Lab Description\": \"The CMS allows fetching articles with their associated authors but fails to sanitize the JOIN clause input. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API Gateway allows users to filter transactions by amount, but it fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API Gateway allows users to filter transactions by amount, but it fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows users to submit comments but fails to sanitize input during the INSERT operation. To solve: Exploit the INSERT clause to execute arbitrary SQL queries.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows users to submit comments but fails to sanitize input during the INSERT operation. To solve: Exploit the INSERT clause to execute arbitrary SQL queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in LIKE Clause\nDescription: The banking portal allows users to search transactions by description but fails to sanitize input in the LIKE clause. To solve: Exploit the LIKE clause to retrieve unauthorized data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in LIKE Clause\", \"Lab Description\": \"The banking portal allows users to search transactions by description but fails to sanitize input in the LIKE clause. To solve: Exploit the LIKE clause to retrieve unauthorized data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in AND Clause\nDescription: The banking portal allows users to filter transactions by status, but the query is vulnerable in the AND clause. To solve: Exploit the AND clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in AND Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions by status, but the query is vulnerable in the AND clause. To solve: Exploit the AND clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in UNION Clause\nDescription: The CMS allows users to search posts by keyword, but the query is vulnerable in the UNION clause. To solve: Exploit the UNION clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UNION Clause\", \"Lab Description\": \"The CMS allows users to search posts by keyword, but the query is vulnerable in the UNION clause. To solve: Exploit the UNION clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in GROUP BY Clause\nDescription: The API Gateway allows users to filter products by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The API Gateway allows users to filter products by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in LIMIT Clause\nDescription: The IoT dashboard allows users to view a list of devices with a limit on the number of devices shown, but the query is vulnerable in the LIMIT clause. To solve: Exploit the LIMIT clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in LIMIT Clause\", \"Lab Description\": \"The IoT dashboard allows users to view a list of devices with a limit on the number of devices shown, but the query is vulnerable in the LIMIT clause. To solve: Exploit the LIMIT clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows querying users by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows querying users by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMS allows filtering articles by tag but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS allows filtering articles by tag but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows users to sort devices by name, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows users to sort devices by name, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal allows users to filter transactions by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API Gateway allows users to filter products by price range, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API Gateway allows users to filter products by price range, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal allows users to filter account details by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal allows users to filter account details by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in JOIN Clause\nDescription: The API Gateway allows filtering users by role, but the query is vulnerable in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in JOIN Clause\", \"Lab Description\": \"The API Gateway allows filtering users by role, but the query is vulnerable in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMS allows users to sort articles by date, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMS allows users to sort articles by date, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to filter transactions by month, but the query is vulnerable in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve unauthorized data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions by month, but the query is vulnerable in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard allows users to filter devices by status, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard allows users to filter devices by status, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows filtering products by name, but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows filtering products by name, but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: This lab's OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by manipulating the redirect flow to your attacker server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"This lab's OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by manipulating the redirect flow to your attacker server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation\nDescription: This lab's GraphQL endpoint allows session fixation attacks through a vulnerable mutation. The application assigns session tokens based on client-provided values. To solve: fixate a session token and trick an admin into using it to gain privileged access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation\", \"Lab Description\": \"This lab's GraphQL endpoint allows session fixation attacks through a vulnerable mutation. The application assigns session tokens based on client-provided values. To solve: fixate a session token and trick an admin into using it to gain privileged access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: This lab's JWT verification microservice improperly validates the kid header parameter. The application allows directory traversal in the key file lookup. To solve: forge a valid admin token by forcing the server to use your malicious public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"This lab's JWT verification microservice improperly validates the kid header parameter. The application allows directory traversal in the key file lookup. To solve: forge a valid admin token by forcing the server to use your malicious public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session swapping via GraphQL batch mutation\nDescription: This lab's GraphQL endpoint processes batch mutations with session state conflicts. The application fails to isolate session contexts between parallel operations. To solve: execute a batch mutation that swaps your session ID with an admin's active session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session swapping via GraphQL batch mutation\", \"Lab Description\": \"This lab's GraphQL endpoint processes batch mutations with session state conflicts. The application fails to isolate session contexts between parallel operations. To solve: execute a batch mutation that swaps your session ID with an admin's active session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via insecure PKCE implementation\nDescription: This lab's OAuth flow implements PKCE security incorrectly. The application fails to bind the code_verifier to the authorization request. To solve: intercept an authorization code and redeem it without knowing the original code_challenge.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via insecure PKCE implementation\", \"Lab Description\": \"This lab's OAuth flow implements PKCE security incorrectly. The application fails to bind the code_verifier to the authorization request. To solve: intercept an authorization code and redeem it without knowing the original code_challenge.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature stripping via HTTP method tampering in REST API\nDescription: This lab's JWT validation endpoint is vulnerable to HTTP method manipulation. The application fails to verify signatures on HEAD requests while still returning privileged data. To solve: extract admin credentials by bypassing signature validation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping via HTTP method tampering in REST API\", \"Lab Description\": \"This lab's JWT validation endpoint is vulnerable to HTTP method manipulation. The application fails to verify signatures on HEAD requests while still returning privileged data. To solve: extract admin credentials by bypassing signature validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA authentication\nDescription: This lab's Single Page Application implements OAuth with overly permissive CORS headers. The application exposes access tokens to arbitrary origins through insecure response headers. To solve: craft a malicious website that steals OAuth tokens through cross-origin requests.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA authentication\", \"Lab Description\": \"This lab's Single Page Application implements OAuth with overly permissive CORS headers. The application exposes access tokens to arbitrary origins through insecure response headers. To solve: craft a malicious website that steals OAuth tokens through cross-origin requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation through GraphQL websocket subscriptions\nDescription: This lab's GraphQL over WebSocket implementation is vulnerable to session fixation during subscription initialization. The application accepts session identifiers from unauthenticated websocket connections. To solve: establish a websocket connection with a fixed session ID and trick an admin into using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through GraphQL websocket subscriptions\", \"Lab Description\": \"This lab's GraphQL over WebSocket implementation is vulnerable to session fixation during subscription initialization. The application accepts session identifiers from unauthenticated websocket connections. To solve: establish a websocket connection with a fixed session ID and trick an admin into using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON parsing in REST API\nDescription: This lab's JWT implementation improperly handles nested JSON objects in claims. The application fails to validate claim structures when using the 'none' algorithm. To solve: escalate privileges by injecting nested admin claims into a valid token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON parsing in REST API\", \"Lab Description\": \"This lab's JWT implementation improperly handles nested JSON objects in claims. The application fails to validate claim structures when using the 'none' algorithm. To solve: escalate privileges by injecting nested admin claims into a valid token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via state parameter reflection\nDescription: This lab's OAuth implementation reflects the state parameter without validation. The application echoes the state value in the redirect URL after authentication. To solve: craft a malicious state value that executes XSS when reflected to steal tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via state parameter reflection\", \"Lab Description\": \"This lab's OAuth implementation reflects the state parameter without validation. The application echoes the state value in the redirect URL after authentication. To solve: craft a malicious state value that executes XSS when reflected to steal tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 header compression in REST API\nDescription: This lab's session management is vulnerable to HPACK compression attacks in HTTP/2. The application accepts session IDs from compressed headers without proper validation. To solve: fixate a session ID by manipulating header compression and trick an admin into using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 header compression in REST API\", \"Lab Description\": \"This lab's session management is vulnerable to HPACK compression attacks in HTTP/2. The application accepts session IDs from compressed headers without proper validation. To solve: fixate a session ID by manipulating header compression and trick an admin into using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via JWK header injection in REST API\nDescription: This lab's JWT implementation is vulnerable to algorithm confusion attacks through JWK header injection. The application verifies tokens using different algorithms based on the provided JWK header. To solve: forge a valid admin token by forcing the server to use a public key you control.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via JWK header injection in REST API\", \"Lab Description\": \"This lab's JWT implementation is vulnerable to algorithm confusion attacks through JWK header injection. The application verifies tokens using different algorithms based on the provided JWK header. To solve: forge a valid admin token by forcing the server to use a public key you control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via OpenID configuration hijacking\nDescription: This lab's OAuth implementation dynamically loads OpenID configuration from an unverified location. The application follows redirects when fetching the OpenID configuration. To solve: hijack the configuration endpoint to point to your malicious server and steal authorization codes.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via OpenID configuration hijacking\", \"Lab Description\": \"This lab's OAuth implementation dynamically loads OpenID configuration from an unverified location. The application follows redirects when fetching the OpenID configuration. To solve: hijack the configuration endpoint to point to your malicious server and steal authorization codes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket connection ID reuse\nDescription: This lab's real-time API assigns session tokens based on WebSocket connection IDs. The application reuses connection IDs when connections are dropped unexpectedly. To solve: force a connection drop and predict the next connection ID to fixate a session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket connection ID reuse\", \"Lab Description\": \"This lab's real-time API assigns session tokens based on WebSocket connection IDs. The application reuses connection IDs when connections are dropped unexpectedly. To solve: force a connection drop and predict the next connection ID to fixate a session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key injection via x5u header in microservice authentication\nDescription: This lab's JWT validation service improperly processes x5u headers that reference external X.509 certificates. The application fails to validate certificate sources when verifying signatures. To solve: forge an admin token by injecting your own certificate chain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key injection via x5u header in microservice authentication\", \"Lab Description\": \"This lab's JWT validation service improperly processes x5u headers that reference external X.509 certificates. The application fails to validate certificate sources when verifying signatures. To solve: forge an admin token by injecting your own certificate chain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe in response_mode=form_post\nDescription: This lab's OAuth implementation uses response_mode=form_post with insufficient frame busting. The application renders the token submission form in a way that allows iframe embedding. To solve: create a malicious page that loads the OAuth callback in an iframe to intercept the token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe in response_mode=form_post\", \"Lab Description\": \"This lab's OAuth implementation uses response_mode=form_post with insufficient frame busting. The application renders the token submission form in a way that allows iframe embedding. To solve: create a malicious page that loads the OAuth callback in an iframe to intercept the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 trailer headers in REST API\nDescription: This lab's session management is vulnerable to trailer header injection in HTTP/2. The application processes Set-Cookie headers from trailers after the request body. To solve: craft a request with malicious trailer headers to fixate a session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 trailer headers in REST API\", \"Lab Description\": \"This lab's session management is vulnerable to trailer header injection in HTTP/2. The application processes Set-Cookie headers from trailers after the request body. To solve: craft a request with malicious trailer headers to fixate a session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when alg:none is specified. To solve: forge a valid admin token by modifying your JWT without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when alg:none is specified. To solve: forge a valid admin token by modifying your JWT without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by intercepting the authorization flow and modifying the redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by intercepting the authorization flow and modifying the redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in GraphQL authentication endpoint\nDescription: The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate tokens after login. To solve: fixate a session token on victim then trigger authentication to gain access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in GraphQL authentication endpoint\", \"Lab Description\": \"The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate tokens after login. To solve: fixate a session token on victim then trigger authentication to gain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification microservice improperly validates the kid (key ID) header parameter. The application allows directory traversal in key file lookup. To solve: forge a valid admin token by manipulating the kid header to reference a predictable local file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification microservice improperly validates the kid (key ID) header parameter. The application allows directory traversal in key file lookup. To solve: forge a valid admin token by manipulating the kid header to reference a predictable local file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state parameter\nDescription: The OAuth implementation fails to properly validate the state parameter between requests. The application associates tokens with the wrong session if state changes mid-flow. To solve: intercept the OAuth flow and swap the state parameter to hijack another user's token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state parameter\", \"Lab Description\": \"The OAuth implementation fails to properly validate the state parameter between requests. The application associates tokens with the wrong session if state changes mid-flow. To solve: intercept the OAuth flow and swap the state parameter to hijack another user's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session prediction via insecure cookie generation\nDescription: The application uses predictable session cookie generation based on timestamps. The cookie can be brute-forced by enumerating possible time values. To solve: predict an active admin session cookie by analyzing the cookie generation pattern.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session prediction via insecure cookie generation\", \"Lab Description\": \"The application uses predictable session cookie generation based on timestamps. The cookie can be brute-forced by enumerating possible time values. To solve: predict an active admin session cookie by analyzing the cookie generation pattern.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers. The application fails to verify the source of public keys. To solve: forge a valid admin token by hosting a malicious JWKS endpoint and injecting your public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers. The application fails to verify the source of public keys. To solve: forge a valid admin token by hosting a malicious JWKS endpoint and injecting your public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via insecure PKCE implementation\nDescription: The OAuth provider fails to properly validate Proof Key for Code Exchange (PKCE) parameters. The application accepts authorization codes without matching code verifiers. To solve: steal an authorization code and exchange it for a token without knowing the original code_verifier.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via insecure PKCE implementation\", \"Lab Description\": \"The OAuth provider fails to properly validate Proof Key for Code Exchange (PKCE) parameters. The application accepts authorization codes without matching code verifiers. To solve: steal an authorization code and exchange it for a token without knowing the original code_verifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via subdomain cookie scope\nDescription: The application sets session cookies with overly broad domain scope (.example.com). The cookie can be fixed across subdomains. To solve: obtain a session cookie from a vulnerable subdomain and reuse it on the target application.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via subdomain cookie scope\", \"Lab Description\": \"The application sets session cookies with overly broad domain scope (.example.com). The cookie can be fixed across subdomains. To solve: obtain a session cookie from a vulnerable subdomain and reuse it on the target application.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header SSRF in microservice authentication\nDescription: The JWT validation service blindly trusts x5u header certificates from external URLs. The application fails to sanitize certificate fetch requests. To solve: forge an admin token by hosting a malicious X.509 certificate and exploiting SSRF in the certificate fetching process.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header SSRF in microservice authentication\", \"Lab Description\": \"The JWT validation service blindly trusts x5u header certificates from external URLs. The application fails to sanitize certificate fetch requests. To solve: forge an admin token by hosting a malicious X.509 certificate and exploiting SSRF in the certificate fetching process.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure fragment redirect\nDescription: The OAuth implementation leaks access tokens in URL fragments during redirects. The application fails to properly handle the response_type=token flow. To solve: intercept the redirect and extract the token from the fragment before the client-side JavaScript processes it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure fragment redirect\", \"Lab Description\": \"The OAuth implementation leaks access tokens in URL fragments during redirects. The application fails to properly handle the response_type=token flow. To solve: intercept the redirect and extract the token from the fragment before the client-side JavaScript processes it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking via WebSocket authentication bypass\nDescription: The application authenticates WebSocket connections using predictable session tokens. The WebSocket endpoint fails to validate token origin. To solve: predict or intercept a WebSocket session token and hijack an active session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via WebSocket authentication bypass\", \"Lab Description\": \"The application authenticates WebSocket connections using predictable session tokens. The WebSocket endpoint fails to validate token origin. To solve: predict or intercept a WebSocket session token and hijack an active session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none exploitation in REST API authentication\nDescription: The application uses JSON Web Tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an administrative JWT by removing the signature and modifying claims.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none exploitation in REST API authentication\", \"Lab Description\": \"The application uses JSON Web Tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an administrative JWT by removing the signature and modifying claims.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri in social login\nDescription: The application's OAuth implementation fails to validate redirect_uri parameters properly, allowing authorization code interception. The vulnerable flow leaks tokens to attacker-controlled domains. To solve: steal authorization code by manipulating redirect_uri and exchange it for access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri in social login\", \"Lab Description\": \"The application's OAuth implementation fails to validate redirect_uri parameters properly, allowing authorization code interception. The vulnerable flow leaks tokens to attacker-controlled domains. To solve: steal authorization code by manipulating redirect_uri and exchange it for access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unsafe session regeneration in GraphQL endpoint\nDescription: The application's GraphQL API maintains sessions after password changes without proper invalidation. The vulnerable mutation allows maintaining active sessions post-authentication changes. To solve: fixate session on victim account before password change, then reuse session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unsafe session regeneration in GraphQL endpoint\", \"Lab Description\": \"The application's GraphQL API maintains sessions after password changes without proper invalidation. The vulnerable mutation allows maintaining active sessions post-authentication changes. To solve: fixate session on victim account before password change, then reuse session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The application's JWT validation improperly uses user-controlled kid header to load verification keys from filesystem. The vulnerable implementation allows directory traversal via kid parameter. To solve: forge admin token by forcing system to use attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly uses user-controlled kid header to load verification keys from filesystem. The vulnerable implementation allows directory traversal via kid parameter. To solve: forge admin token by forcing system to use attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session hijacking via WebSocket connection hijack\nDescription: The application's WebSocket handshake fails to validate session transition from HTTP to WS protocol. The vulnerable implementation accepts existing HTTP cookies without re-authentication. To solve: hijack active session by intercepting WebSocket upgrade request.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via WebSocket connection hijack\", \"Lab Description\": \"The application's WebSocket handshake fails to validate session transition from HTTP to WS protocol. The vulnerable implementation accepts existing HTTP cookies without re-authentication. To solve: hijack active session by intercepting WebSocket upgrade request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state parameter\nDescription: The application's OAuth flow fails to properly validate state parameter between requests. The vulnerable implementation allows swapping authorization codes between clients. To solve: intercept victim's auth code and associate it with attacker's session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state parameter\", \"Lab Description\": \"The application's OAuth flow fails to properly validate state parameter between requests. The vulnerable implementation allows swapping authorization codes between clients. To solve: intercept victim's auth code and associate it with attacker's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion attack in REST API authentication\nDescription: The application's JWT implementation fails to validate the algorithm specified in the token header against the server's expected algorithm. The vulnerable endpoint accepts RS256-signed tokens when configured for HS256. To solve: forge a valid JWT by converting public key to HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in REST API authentication\", \"Lab Description\": \"The application's JWT implementation fails to validate the algorithm specified in the token header against the server's expected algorithm. The vulnerable endpoint accepts RS256-signed tokens when configured for HS256. To solve: forge a valid JWT by converting public key to HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation race condition\nDescription: The application's GraphQL mutation for session generation contains a race condition when multiple requests are sent simultaneously. The vulnerable implementation allows session tokens to remain valid after password changes. To solve: fixate session token during password reset and maintain access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation race condition\", \"Lab Description\": \"The application's GraphQL mutation for session generation contains a race condition when multiple requests are sent simultaneously. The vulnerable implementation allows session tokens to remain valid after password changes. To solve: fixate session token during password reset and maintain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via verbose error messages\nDescription: The application's OAuth token endpoint leaks sensitive information through detailed error responses. The vulnerable implementation reveals valid tokens in error messages during race conditions. To solve: trigger token leakage through concurrent requests and harvest valid tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via verbose error messages\", \"Lab Description\": \"The application's OAuth token endpoint leaks sensitive information through detailed error responses. The vulnerable implementation reveals valid tokens in error messages during race conditions. To solve: trigger token leakage through concurrent requests and harvest valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim injection via unverified header parameters in REST API\nDescription: The application's JWT validation fails to verify all header parameters while processing tokens. The vulnerable implementation allows injecting custom claims through unverified header parameters. To solve: escalate privileges by injecting admin claims through custom headers.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via unverified header parameters in REST API\", \"Lab Description\": \"The application's JWT validation fails to verify all header parameters while processing tokens. The vulnerable implementation allows injecting custom claims through unverified header parameters. To solve: escalate privileges by injecting admin claims through custom headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket subprotocol negotiation\nDescription: The application's WebSocket implementation assigns sessions during subprotocol negotiation without proper validation. The vulnerable handshake process allows session fixation through crafted subprotocol headers. To solve: fixate session ID during WS connection and hijack authenticated session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket subprotocol negotiation\", \"Lab Description\": \"The application's WebSocket implementation assigns sessions during subprotocol negotiation without proper validation. The vulnerable handshake process allows session fixation through crafted subprotocol headers. To solve: fixate session ID during WS connection and hijack authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure PKCE implementation\nDescription: The application's OAuth PKCE flow fails to properly validate code verifier against code challenge. The vulnerable implementation allows bypassing PKCE protection through parameter manipulation. To solve: steal authorization code by intercepting and replaying requests with modified parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure PKCE implementation\", \"Lab Description\": \"The application's OAuth PKCE flow fails to properly validate code verifier against code challenge. The vulnerable implementation allows bypassing PKCE protection through parameter manipulation. To solve: steal authorization code by intercepting and replaying requests with modified parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an admin token by modifying your JWT without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an admin token by modifying your JWT without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: This lab's OAuth implementation fails to validate redirect URIs properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth code from the victim user and exchange it for an access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"This lab's OAuth implementation fails to validate redirect URIs properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth code from the victim user and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation\nDescription: This lab's GraphQL endpoint allows setting arbitrary session IDs through a mutation. The application doesn't regenerate session IDs after authentication. To solve: fixate a session ID and trick an admin into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation\", \"Lab Description\": \"This lab's GraphQL endpoint allows setting arbitrary session IDs through a mutation. The application doesn't regenerate session IDs after authentication. To solve: fixate a session ID and trick an admin into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: This lab's JWT validation improperly processes the kid header, allowing path traversal to arbitrary verification keys. The application blindly trusts the kid parameter when loading verification keys. To solve: forge a valid admin token by forcing the system to use a predictable public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"This lab's JWT validation improperly processes the kid header, allowing path traversal to arbitrary verification keys. The application blindly trusts the kid parameter when loading verification keys. To solve: forge a valid admin token by forcing the system to use a predictable public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session swapping via concurrent SOAP requests\nDescription: This lab's SOAP API maintains session state improperly during concurrent requests. The application processes authentication and session updates asynchronously. To solve: perform a race condition attack to swap a low-privilege session with an admin session before authorization checks complete.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session swapping via concurrent SOAP requests\", \"Lab Description\": \"This lab's SOAP API maintains session state improperly during concurrent requests. The application processes authentication and session updates asynchronously. To solve: perform a race condition attack to swap a low-privilege session with an admin session before authorization checks complete.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure PKCE implementation\nDescription: This lab's OAuth flow implements PKCE security incorrectly by not verifying the code_challenge method. The application accepts arbitrary code_verifier values after authorization. To solve: intercept the authorization code and redeem it with a brute-forced code_verifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure PKCE implementation\", \"Lab Description\": \"This lab's OAuth flow implements PKCE security incorrectly by not verifying the code_challenge method. The application accepts arbitrary code_verifier values after authorization. To solve: intercept the authorization code and redeem it with a brute-forced code_verifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: This lab's JWT implementation trusts arbitrary jku (JWK Set URL) headers for key verification. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWK Set and forge an admin token by forcing the server to use your public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"This lab's JWT implementation trusts arbitrary jku (JWK Set URL) headers for key verification. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWK Set and forge an admin token by forcing the server to use your public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session token leakage via GraphQL introspection\nDescription: This lab's GraphQL endpoint has introspection enabled and leaks session tokens through error messages. The application improperly handles authentication errors in the GraphQL resolver. To solve: extract valid session tokens from verbose error responses and hijack an admin session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session token leakage via GraphQL introspection\", \"Lab Description\": \"This lab's GraphQL endpoint has introspection enabled and leaks session tokens through error messages. The application improperly handles authentication errors in the GraphQL resolver. To solve: extract valid session tokens from verbose error responses and hijack an admin session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token theft via open redirect with fragment\nDescription: This lab's OAuth implementation is vulnerable to token leakage through an open redirect that preserves URL fragments. The application passes access tokens in the fragment during redirects but doesn't validate the target domain. To solve: craft a malicious redirect URL that captures the token fragment.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via open redirect with fragment\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable to token leakage through an open redirect that preserves URL fragments. The application passes access tokens in the fragment during redirects but doesn't validate the target domain. To solve: craft a malicious redirect URL that captures the token fragment.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: This lab's WebSocket implementation assigns session tokens during the handshake process without proper validation. The application accepts arbitrary session tokens in the WS upgrade request headers. To solve: fixate a session token and trick an admin into authenticating with it via WebSocket communication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"This lab's WebSocket implementation assigns session tokens during the handshake process without proper validation. The application accepts arbitrary session tokens in the WS upgrade request headers. To solve: fixate a session token and trick an admin into authenticating with it via WebSocket communication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT timestamp manipulation via nbf claim\nDescription: This lab's JWT validation improperly handles the 'nbf' (not before) claim when the server clock is skewed. The application fails to verify the timestamp against a trusted time source. To solve: forge a token with a future nbf claim and exploit clock drift to gain premature access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT timestamp manipulation via nbf claim\", \"Lab Description\": \"This lab's JWT validation improperly handles the 'nbf' (not before) claim when the server clock is skewed. The application fails to verify the timestamp against a trusted time source. To solve: forge a token with a future nbf claim and exploit clock drift to gain premature access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via mixed content\nDescription: This lab's OAuth implementation serves token responses over HTTP when initiated from HTTPS pages. The application fails to enforce strict transport security for token endpoints. To solve: perform a MITM attack to intercept tokens when victims visit mixed-content pages.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via mixed content\", \"Lab Description\": \"This lab's OAuth implementation serves token responses over HTTP when initiated from HTTPS pages. The application fails to enforce strict transport security for token endpoints. To solve: perform a MITM attack to intercept tokens when victims visit mixed-content pages.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering due to lack of signature validation\nDescription: This application's authentication mechanism uses JSON Web Tokens (JWTs) to manage user sessions. However, the backend fails to validate the signature of the JWT during decoding. The application trusts the payload content blindly. To solve: craft a tampered JWT to escalate from a regular user to admin and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering due to lack of signature validation\", \"Lab Description\": \"This application's authentication mechanism uses JSON Web Tokens (JWTs) to manage user sessions. However, the backend fails to validate the signature of the JWT during decoding. The application trusts the payload content blindly. To solve: craft a tampered JWT to escalate from a regular user to admin and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in URL\nDescription: This application uses a custom session ID passed via the URL as a GET parameter. The backend sets the session without validating ownership, enabling an attacker to force a session ID on a victim before login. To solve: fix a session for Carlos, trick him into logging in, then reuse the session ID to hijack his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in URL\", \"Lab Description\": \"This application uses a custom session ID passed via the URL as a GET parameter. The backend sets the session without validating ownership, enabling an attacker to force a session ID on a victim before login. To solve: fix a session for Carlos, trick him into logging in, then reuse the session ID to hijack his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion leads to authentication bypass\nDescription: The application uses JWTs for session management but accepts both RS256 and HS256 algorithms interchangeably. The backend uses RS256 with a public key to validate tokens, but it fails to enforce the algorithm type. The application naively uses the public key as a secret when validating HS256 tokens. To solve: craft a forged JWT to log in as the administrator user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion leads to authentication bypass\", \"Lab Description\": \"The application uses JWTs for session management but accepts both RS256 and HS256 algorithms interchangeably. The backend uses RS256 with a public key to validate tokens, but it fails to enforce the algorithm type. The application naively uses the public key as a secret when validating HS256 tokens. To solve: craft a forged JWT to log in as the administrator user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect URI validation allows token theft\nDescription: This lab simulates a vulnerable OAuth 2.0 implicit grant implementation where the redirect URI is weakly validated using substring matching. An attacker can register a malicious endpoint with a similar domain and capture access tokens. To solve: hijack the victimâ€™s OAuth access token and access their private dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI validation allows token theft\", \"Lab Description\": \"This lab simulates a vulnerable OAuth 2.0 implicit grant implementation where the redirect URI is weakly validated using substring matching. An attacker can register a malicious endpoint with a similar domain and capture access tokens. To solve: hijack the victimâ€™s OAuth access token and access their private dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation vulnerability in login endpoint\nDescription: The application assigns a session ID before authentication and fails to regenerate it after login. An attacker can set a session ID for a victim and wait for them to log in. To solve: fixate a session for the victim, log in with it, and access their profile page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The application assigns a session ID before authentication and fails to regenerate it after login. An attacker can set a session ID for a victim and wait for them to log in. To solve: fixate a session for the victim, log in with it, and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in Authorization header\nDescription: The application uses JWTs for session management but incorrectly accepts tokens with 'alg':'none'. The vulnerable Express middleware does not verify the JWT signature properly when the 'none' algorithm is provided. The application accepts any token with a valid payload and no signature. To solve: forge a valid token impersonating the user 'carlos' and access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs for session management but incorrectly accepts tokens with 'alg':'none'. The vulnerable Express middleware does not verify the JWT signature properly when the 'none' algorithm is provided. The application accepts any token with a valid payload and no signature. To solve: forge a valid token impersonating the user 'carlos' and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration leaks token via referrer header\nDescription: This OAuth-enabled app uses the implicit flow for authentication, where access tokens are returned in the URL fragment. However, it fails to sanitize or block third-party redirects that leak the access token via the Referer header. To solve: extract the victim's token by abusing an open redirect and access their account using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaks token via referrer header\", \"Lab Description\": \"This OAuth-enabled app uses the implicit flow for authentication, where access tokens are returned in the URL fragment. However, it fails to sanitize or block third-party redirects that leak the access token via the Referer header. To solve: extract the victim's token by abusing an open redirect and access their account using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login response\nDescription: This application assigns a fixed session ID before login and reuses it even after authentication, allowing session fixation. An attacker can send a victim a pre-established session and later hijack it once they log in. To solve: fixate a session ID, have the victim authenticate using it, then access their account using the same ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login response\", \"Lab Description\": \"This application assigns a fixed session ID before login and reuses it even after authentication, allowing session fixation. An attacker can send a victim a pre-established session and later hijack it once they log in. To solve: fixate a session ID, have the victim authenticate using it, then access their account using the same ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token none algorithm bypass in stateless authentication\nDescription: The stateless JWT-based authentication mechanism fails to validate the algorithm specified in the JWT header. The application accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge a token to access the admin's account dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token none algorithm bypass in stateless authentication\", \"Lab Description\": \"The stateless JWT-based authentication mechanism fails to validate the algorithm specified in the JWT header. The application accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge a token to access the admin's account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: The login process does not generate a new session identifier after authentication. This allows an attacker to fix a session for a victim before they log in. To solve: log in as Carlos using a session fixation attack.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The login process does not generate a new session identifier after authentication. This allows an attacker to fix a session for a victim before they log in. To solve: log in as Carlos using a session fixation attack.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access tokens via redirect URI manipulation\nDescription: The application uses an OAuth 2.0 provider to log users in. The 'redirect_uri' parameter is not properly validated, allowing attackers to capture tokens by injecting malicious URLs. To solve: steal Carlosâ€™s access token using an open redirect exploit.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access tokens via redirect URI manipulation\", \"Lab Description\": \"The application uses an OAuth 2.0 provider to log users in. The 'redirect_uri' parameter is not properly validated, allowing attackers to capture tokens by injecting malicious URLs. To solve: steal Carlosâ€™s access token using an open redirect exploit.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token tampering in Authorization header\nDescription: The backend uses a stateless JWT-based authentication mechanism, but it fails to validate the token's signature. The application blindly trusts the header and payload claims of the JWT token. To solve: Forge an admin-level token and access the /admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering in Authorization header\", \"Lab Description\": \"The backend uses a stateless JWT-based authentication mechanism, but it fails to validate the token's signature. The application blindly trusts the header and payload claims of the JWT token. To solve: Forge an admin-level token and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in token exchange\nDescription: The application uses OAuth 2.0 to authenticate users via a third-party provider. However, it incorrectly trusts the client-provided access token without verifying it with the OAuth server. To solve: Use a token from your own OAuth account and impersonate Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in token exchange\", \"Lab Description\": \"The application uses OAuth 2.0 to authenticate users via a third-party provider. However, it incorrectly trusts the client-provided access token without verifying it with the OAuth server. To solve: Use a token from your own OAuth account and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login endpoint\nDescription: The application issues session identifiers before authentication and fails to regenerate them upon successful login. An attacker can set a known session ID, trick a victim into using it, and take over their session post-login. To solve: Fix a session ID and hijack Carlos's session after he logs in.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login endpoint\", \"Lab Description\": \"The application issues session identifiers before authentication and fails to regenerate them upon successful login. An attacker can set a known session ID, trick a victim into using it, and take over their session post-login. To solve: Fix a session ID and hijack Carlos's session after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth session fixation via predictable redirect URI\nDescription: The application integrates a third-party OAuth provider for authentication. However, it fails to validate the `state` parameter during the OAuth flow and reuses a fixed session value across users. The application establishes a session cookie before authentication completion. To solve: force Carlos to log in through a manipulated link and hijack his session to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth session fixation via predictable redirect URI\", \"Lab Description\": \"The application integrates a third-party OAuth provider for authentication. However, it fails to validate the `state` parameter during the OAuth flow and reuses a fixed session value across users. The application establishes a session cookie before authentication completion. To solve: force Carlos to log in through a manipulated link and hijack his session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token tampering via algorithm confusion in token verification logic\nDescription: The server accepts JWTs for authentication and incorrectly supports multiple algorithms for signature verification. It uses a public RSA key but also accepts `alg=HS256`, allowing attackers to forge tokens by abusing algorithm confusion. To solve: log in as Carlos by crafting a malicious JWT using `HS256` and the server's public key as the HMAC secret.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering via algorithm confusion in token verification logic\", \"Lab Description\": \"The server accepts JWTs for authentication and incorrectly supports multiple algorithms for signature verification. It uses a public RSA key but also accepts `alg=HS256`, allowing attackers to forge tokens by abusing algorithm confusion. To solve: log in as Carlos by crafting a malicious JWT using `HS256` and the server's public key as the HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session ID leakage through verbose error logging\nDescription: The application logs errors and includes session IDs in stack traces and debug outputs. When a malformed request is sent, the session ID of the logged-in user is exposed via `/logs`. To solve: extract Carlosâ€™s session ID from the logs and reuse it to impersonate him and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session ID leakage through verbose error logging\", \"Lab Description\": \"The application logs errors and includes session IDs in stack traces and debug outputs. When a malformed request is sent, the session ID of the logged-in user is exposed via `/logs`. To solve: extract Carlosâ€™s session ID from the logs and reuse it to impersonate him and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login endpoint\nDescription: This application's session management logic does not regenerate session tokens upon login, allowing session fixation attacks. The application accepts session tokens passed in cookies and maintains them post-authentication without validation. To solve: Hijack Carlos's session using a pre-set session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login endpoint\", \"Lab Description\": \"This application's session management logic does not regenerate session tokens upon login, allowing session fixation attacks. The application accepts session tokens passed in cookies and maintains them post-authentication without validation. To solve: Hijack Carlos's session using a pre-set session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature bypass via algorithm confusion\nDescription: This application's JWT implementation accepts tokens signed using either HMAC or RSA, but fails to enforce algorithm restrictions securely. The application uses an insecure library that trusts the alg header from the user. To solve: Forge a valid JWT with alg=none to access Carlos's admin page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via algorithm confusion\", \"Lab Description\": \"This application's JWT implementation accepts tokens signed using either HMAC or RSA, but fails to enforce algorithm restrictions securely. The application uses an insecure library that trusts the alg header from the user. To solve: Forge a valid JWT with alg=none to access Carlos's admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access token via redirect\nDescription: This application uses OAuth 2.0 for login but does not validate the redirect_uri properly, allowing attackers to leak access tokens to external sites. The application supports login via third-party OAuth providers and accepts dynamic redirect URIs. To solve: Leak Carlos's OAuth token to your controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access token via redirect\", \"Lab Description\": \"This application uses OAuth 2.0 for login but does not validate the redirect_uri properly, allowing attackers to leak access tokens to external sites. The application supports login via third-party OAuth providers and accepts dynamic redirect URIs. To solve: Leak Carlos's OAuth token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature verification bypass in API Gateway\nDescription: The application uses JWTs for API authentication but improperly trusts the `alg` field without enforcing the expected signing algorithm. The application accepts tokens signed with 'none'. To solve: Forge a JWT to impersonate the admin user and access the admin dashboard endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass in API Gateway\", \"Lab Description\": \"The application uses JWTs for API authentication but improperly trusts the `alg` field without enforcing the expected signing algorithm. The application accepts tokens signed with 'none'. To solve: Forge a JWT to impersonate the admin user and access the admin dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth open redirect and token hijack in third-party flow\nDescription: The application integrates with a third-party OAuth provider but fails to validate the redirect_uri parameter. Attackers can craft a malicious link to steal access tokens. To solve: Capture Carlos's OAuth token and access his profile using the stolen token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect and token hijack in third-party flow\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to validate the redirect_uri parameter. Attackers can craft a malicious link to steal access tokens. To solve: Capture Carlos's OAuth token and access his profile using the stolen token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login workflow with predictable session ID\nDescription: The application does not regenerate session tokens upon login. This allows attackers to set a session ID before authentication and hijack the session post-login. To solve: Fixate a session for Carlos, then reuse it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login workflow with predictable session ID\", \"Lab Description\": \"The application does not regenerate session tokens upon login. This allows attackers to set a session ID before authentication and hijack the session post-login. To solve: Fixate a session for Carlos, then reuse it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session identifier in cookie\nDescription: This lab demonstrates a session fixation vulnerability where session identifiers are accepted from the user. The application does not regenerate session tokens upon login. To solve: Fix a session ID, force the victim to authenticate using that session, and access their My account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session identifier in cookie\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where session identifiers are accepted from the user. The application does not regenerate session tokens upon login. To solve: Fix a session ID, force the victim to authenticate using that session, and access their My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering using 'alg':'none' bypass\nDescription: The application uses JWT for user authentication but fails to validate the signature when the algorithm is set to 'none'. The backend incorrectly trusts JWT tokens regardless of signature when alg is 'none'. To solve: Forge an admin JWT and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'alg':'none' bypass\", \"Lab Description\": \"The application uses JWT for user authentication but fails to validate the signature when the algorithm is set to 'none'. The backend incorrectly trusts JWT tokens regardless of signature when alg is 'none'. To solve: Forge an admin JWT and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allowing code injection via open redirect\nDescription: The application uses a third-party OAuth provider for authentication but lacks proper redirect_uri validation. An attacker can inject a malicious redirect URI to intercept the authorization code. To solve: Capture a valid authorization code issued to the victim and use it to log in as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing code injection via open redirect\", \"Lab Description\": \"The application uses a third-party OAuth provider for authentication but lacks proper redirect_uri validation. An attacker can inject a malicious redirect URI to intercept the authorization code. To solve: Capture a valid authorization code issued to the victim and use it to log in as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via none algorithm in login API\nDescription: The application uses JSON Web Tokens (JWT) for session management but improperly validates the token's signature algorithm. The login endpoint issues a signed JWT that includes user roles. However, the server accepts tokens with 'alg':'none' without signature verification. To solve: escalate privileges by tampering with the JWT and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in login API\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management but improperly validates the token's signature algorithm. The login endpoint issues a signed JWT that includes user roles. However, the server accepts tokens with 'alg':'none' without signature verification. To solve: escalate privileges by tampering with the JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via static session ID assignment\nDescription: The application assigns session identifiers before authentication and fails to regenerate the session ID after login. This allows an attacker to fix a known session ID and force a victim to use it, enabling full session hijacking after login. To solve: log the victim in using the fixed session and access their profile page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via static session ID assignment\", \"Lab Description\": \"The application assigns session identifiers before authentication and fails to regenerate the session ID after login. This allows an attacker to fix a known session ID and force a victim to use it, enabling full session hijacking after login. To solve: log the victim in using the fixed session and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allowing token reuse across clients\nDescription: The app integrates with an external OAuth provider but does not restrict token audience. As a result, access tokens issued for one client (mobile app) can be reused on the web client. To solve: intercept a token issued to another client and reuse it on the vulnerable web interface to access user info.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse across clients\", \"Lab Description\": \"The app integrates with an external OAuth provider but does not restrict token audience. As a result, access tokens issued for one client (mobile app) can be reused on the web client. To solve: intercept a token issued to another client and reuse it on the vulnerable web interface to access user info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion in authorization header\nDescription: The application implements JWT-based authentication using the RS256 algorithm, but fails to properly validate the algorithm header, allowing algorithm substitution attacks. The application accepts JWT tokens in the Authorization header to access protected resources. To solve: forge a valid JWT token with admin privileges and access the /admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authorization header\", \"Lab Description\": \"The application implements JWT-based authentication using the RS256 algorithm, but fails to properly validate the algorithm header, allowing algorithm substitution attacks. The application accepts JWT tokens in the Authorization header to access protected resources. To solve: forge a valid JWT token with admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unvalidated session token reuse\nDescription: The application sets a session cookie before login but fails to generate a new session upon authentication, making it vulnerable to session fixation. The session ID is stored in a cookie named 'sessionid'. To solve: fix a session before login, force the victim to log in, and reuse their session to access their account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session token reuse\", \"Lab Description\": \"The application sets a session cookie before login but fails to generate a new session upon authentication, making it vulnerable to session fixation. The session ID is stored in a cookie named 'sessionid'. To solve: fix a session before login, force the victim to log in, and reuse their session to access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow token leak via referrer header\nDescription: The application uses the OAuth 2.0 implicit grant flow for authentication but redirects users to a third-party domain while retaining the access token in the URL fragment. This results in the token being leaked via the Referer header. To solve: steal the victim's access token and use it to retrieve their profile information.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leak via referrer header\", \"Lab Description\": \"The application uses the OAuth 2.0 implicit grant flow for authentication but redirects users to a third-party domain while retaining the access token in the URL fragment. This results in the token being leaked via the Referer header. To solve: steal the victim's access token and use it to retrieve their profile information.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Flow\nDescription: The application uses a custom session mechanism without regenerating session IDs after login. The application issues a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID, get the victim to use it, then hijack their session to access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"The application uses a custom session mechanism without regenerating session IDs after login. The application issues a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID, get the victim to use it, then hijack their session to access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering using 'none' Algorithm\nDescription: The application trusts JWTs signed with the 'none' algorithm and does not validate their integrity. The JWT is used for session authentication. To solve: Forge an admin token with 'none' as algorithm and escalate privileges.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering using 'none' Algorithm\", \"Lab Description\": \"The application trusts JWTs signed with the 'none' algorithm and does not validate their integrity. The JWT is used for session authentication. To solve: Forge an admin token with 'none' as algorithm and escalate privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Token Exchange Flow\nDescription: The application integrates with an OAuth provider but does not validate the audience (aud) field in the ID token. This allows a malicious app to reuse a token issued for another client. To solve: Use an ID token issued to another client to access protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Exchange Flow\", \"Lab Description\": \"The application integrates with an OAuth provider but does not validate the audience (aud) field in the ID token. This allows a malicious app to reuse a token issued for another client. To solve: Use an ID token issued to another client to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Cookie-Based Login Flow\nDescription: The application fails to regenerate session identifiers upon successful login. As a result, an attacker can set a session ID before authentication and reuse it post-login. The application assigns session IDs via cookies before authentication, and fails to issue a new one after. To solve: log in as Carlos using a session fixation attack.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-Based Login Flow\", \"Lab Description\": \"The application fails to regenerate session identifiers upon successful login. As a result, an attacker can set a session ID before authentication and reuse it post-login. The application assigns session IDs via cookies before authentication, and fails to issue a new one after. To solve: log in as Carlos using a session fixation attack.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in Authorization Header\nDescription: The application uses JWTs for session management but fails to validate the algorithm properly. It accepts unsigned tokens if the 'alg' is set to 'none'. To solve: forge a JWT for Carlos and access the protected account page without knowing the secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header\", \"Lab Description\": \"The application uses JWTs for session management but fails to validate the algorithm properly. It accepts unsigned tokens if the 'alg' is set to 'none'. To solve: forge a JWT for Carlos and access the protected account page without knowing the secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Token Leakage in Redirect URI\nDescription: The application uses OAuth with an implicit grant flow that leaks access tokens via a redirection URI susceptible to open redirect. This allows attackers to harvest tokens if the user authorizes the app. To solve: steal Carlos's OAuth token and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Token Leakage in Redirect URI\", \"Lab Description\": \"The application uses OAuth with an implicit grant flow that leaks access tokens via a redirection URI susceptible to open redirect. This allows attackers to harvest tokens if the user authorizes the app. To solve: steal Carlos's OAuth token and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth login session fixation in third-party auth flow\nDescription: The OAuth login implementation in this app fails to issue a new session ID after authentication. The application reuses session cookies from unauthenticated requests. To solve: force a victim to authenticate with a session you control and gain access to their authenticated session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth login session fixation in third-party auth flow\", \"Lab Description\": \"The OAuth login implementation in this app fails to issue a new session ID after authentication. The application reuses session cookies from unauthenticated requests. To solve: force a victim to authenticate with a session you control and gain access to their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via 'alg=none'\nDescription: The server trusts JWTs without properly verifying their signature when the algorithm is set to 'none'. The application decodes and accepts tokens without validation. To solve: craft a JWT with admin privileges using 'alg':'none' and access the admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'alg=none'\", \"Lab Description\": \"The server trusts JWTs without properly verifying their signature when the algorithm is set to 'none'. The application decodes and accepts tokens without validation. To solve: craft a JWT with admin privileges using 'alg':'none' and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind session hijacking via verbose error leakage\nDescription: The application exposes detailed error logs that include session identifiers when unexpected input is provided. The error handler returns stack traces with sensitive tokens. To solve: force a 500 error, extract another user's session ID from the error, and use it to impersonate them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind session hijacking via verbose error leakage\", \"Lab Description\": \"The application exposes detailed error logs that include session identifiers when unexpected input is provided. The error handler returns stack traces with sensitive tokens. To solve: force a 500 error, extract another user's session ID from the error, and use it to impersonate them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature validation bypass in authorization middleware\nDescription: The backend uses a custom JWT verification logic with a flawed secret check. The application uses the token to grant access to protected admin APIs. However, it fails to properly validate the token signature. To solve: craft a tampered JWT that grants admin access and view the protected admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature validation bypass in authorization middleware\", \"Lab Description\": \"The backend uses a custom JWT verification logic with a flawed secret check. The application uses the token to grant access to protected admin APIs. However, it fails to properly validate the token signature. To solve: craft a tampered JWT that grants admin access and view the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration allows token reuse from different client\nDescription: The OAuth implementation does not validate the client ID or redirect URI properly. The attacker can reuse a legitimate token issued for another application to gain unauthorized access. To solve: obtain a valid OAuth token and use it to impersonate Carlos by accessing the /me endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse from different client\", \"Lab Description\": \"The OAuth implementation does not validate the client ID or redirect URI properly. The attacker can reuse a legitimate token issued for another application to gain unauthorized access. To solve: obtain a valid OAuth token and use it to impersonate Carlos by accessing the /me endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login token reuse in cookie\nDescription: The application accepts a session ID in a GET parameter and reflects it back into a Set-Cookie response during login. It does not regenerate the session on login, enabling session fixation. To solve: force a victim to use a known session ID and take over their session after login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login token reuse in cookie\", \"Lab Description\": \"The application accepts a session ID in a GET parameter and reflects it back into a Set-Cookie response during login. It does not regenerate the session on login, enabling session fixation. To solve: force a victim to use a known session ID and take over their session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth session fixation in authorization endpoint\nDescription: The application improperly handles session tokens during the OAuth authorization flow. It allows pre-setting session cookies before the victim logs in, resulting in a session fixation attack. The application accepts a `session_id` from an attacker-controlled domain. To solve: hijack Carlos's session after they authorize the app and access their account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth session fixation in authorization endpoint\", \"Lab Description\": \"The application improperly handles session tokens during the OAuth authorization flow. It allows pre-setting session cookies before the victim logs in, resulting in a session fixation attack. The application accepts a `session_id` from an attacker-controlled domain. To solve: hijack Carlos's session after they authorize the app and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm\nDescription: The app uses JWT tokens to manage sessions but does not validate the algorithm specified in the header. It trusts tokens signed with 'none', allowing attackers to forge valid tokens. To solve: forge a JWT for the user 'carlos' and access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm\", \"Lab Description\": \"The app uses JWT tokens to manage sessions but does not validate the algorithm specified in the header. It trusts tokens signed with 'none', allowing attackers to forge valid tokens. To solve: forge a JWT for the user 'carlos' and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth open redirect and token leakage\nDescription: The OAuth integration with a third-party identity provider allows open redirect URLs and token leakage via the redirect_uri parameter. The app does not validate the redirect URI properly, allowing attackers to intercept tokens. To solve: capture an OAuth access token belonging to Carlos and use it to access his protected resource.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect and token leakage\", \"Lab Description\": \"The OAuth integration with a third-party identity provider allows open redirect URLs and token leakage via the redirect_uri parameter. The app does not validate the redirect URI properly, allowing attackers to intercept tokens. To solve: capture an OAuth access token belonging to Carlos and use it to access his protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Cookie-based session fixation vulnerability in login flow\nDescription: The application implements session handling using a fixed session ID stored in a cookie, but it fails to regenerate the session ID upon successful login. The application reuses the session cookie across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing their session ID pre-login and accessing their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Cookie-based session fixation vulnerability in login flow\", \"Lab Description\": \"The application implements session handling using a fixed session ID stored in a cookie, but it fails to regenerate the session ID upon successful login. The application reuses the session cookie across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing their session ID pre-login and accessing their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering vulnerability in authorization header\nDescription: The application uses JSON Web Tokens (JWT) for session validation but fails to validate the algorithm field properly. It accepts tokens signed with 'none' algorithm, allowing attackers to forge tokens without a valid signature. To solve: forge a JWT to impersonate Carlos and access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session validation but fails to validate the algorithm field properly. It accepts tokens signed with 'none' algorithm, allowing attackers to forge tokens without a valid signature. To solve: forge a JWT to impersonate Carlos and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect vulnerability in redirect_uri parameter\nDescription: The application integrates with a third-party OAuth provider for login but does not validate the 'redirect_uri' parameter. An attacker can manipulate the redirect URL to leak the access token to their domain. To solve: steal Carlos's OAuth token by crafting a malicious redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect vulnerability in redirect_uri parameter\", \"Lab Description\": \"The application integrates with a third-party OAuth provider for login but does not validate the 'redirect_uri' parameter. An attacker can manipulate the redirect URL to leak the access token to their domain. To solve: steal Carlos's OAuth token by crafting a malicious redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable token in login URL\nDescription: The application uses a session token passed via the URL. It fails to invalidate pre-authentication tokens during login. This allows attackers to fix a session and hijack it post-login. The application maintains the same session identifier before and after successful authentication. To solve: Hijack Carlos's session after forcing him to log in with a fixed token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable token in login URL\", \"Lab Description\": \"The application uses a session token passed via the URL. It fails to invalidate pre-authentication tokens during login. This allows attackers to fix a session and hijack it post-login. The application maintains the same session identifier before and after successful authentication. To solve: Hijack Carlos's session after forcing him to log in with a fixed token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass using 'none' algorithm\nDescription: The application uses a JSON Web Token (JWT) to manage sessions. It accepts tokens signed with the 'none' algorithm and skips signature verification, allowing attackers to forge tokens. To solve: Modify a JWT to impersonate the admin user and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass using 'none' algorithm\", \"Lab Description\": \"The application uses a JSON Web Token (JWT) to manage sessions. It accepts tokens signed with the 'none' algorithm and skips signature verification, allowing attackers to forge tokens. To solve: Modify a JWT to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri\nDescription: The application integrates with a third-party OAuth provider. It fails to validate the redirect_uri strictly, allowing attackers to inject their own malicious redirect. The attacker can steal the authorization code and redeem it for an access token. To solve: Hijack the OAuth flow and log in as the victim user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri\", \"Lab Description\": \"The application integrates with a third-party OAuth provider. It fails to validate the redirect_uri strictly, allowing attackers to inject their own malicious redirect. The attacker can steal the authorization code and redeem it for an access token. To solve: Hijack the OAuth flow and log in as the victim user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Persistent Session Fixation in Login Flow\nDescription: This lab demonstrates a session fixation vulnerability within the authentication process. The application maintains the same session ID across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing a known session ID prior to login, then access his My Account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Persistent Session Fixation in Login Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability within the authentication process. The application maintains the same session ID across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing a known session ID prior to login, then access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering with 'none' algorithm exploit\nDescription: This lab uses JWT for session management but does not properly enforce signature verification. The server accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge an unsigned JWT with the username 'carlos' and access his My Account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering with 'none' algorithm exploit\", \"Lab Description\": \"This lab uses JWT for session management but does not properly enforce signature verification. The server accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge an unsigned JWT with the username 'carlos' and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Redirect URI Manipulation\nDescription: This lab uses OAuth 2.0 for third-party login. The application fails to validate the redirect_uri properly. This allows redirection to an attacker-controlled page after login. To solve: intercept the OAuth flow, modify the redirect URI, and capture Carlos's access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation\", \"Lab Description\": \"This lab uses OAuth 2.0 for third-party login. The application fails to validate the redirect_uri properly. This allows redirection to an attacker-controlled page after login. To solve: intercept the OAuth flow, modify the redirect URI, and capture Carlos's access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via leaked secret in error logs\nDescription: The application uses JWT for session management but leaks the signing secret via verbose error messages. A malformed JWT results in a signed error that reveals the secret. The application accepts manipulated JWTs if they are correctly signed. To solve: Forge an admin JWT token and access the /admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via leaked secret in error logs\", \"Lab Description\": \"The application uses JWT for session management but leaks the signing secret via verbose error messages. A malformed JWT results in a signed error that reveals the secret. The application accepts manipulated JWTs if they are correctly signed. To solve: Forge an admin JWT token and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in callback\nDescription: The application uses a third-party OAuth provider to log in users. However, the redirect_uri parameter is not strictly validated, allowing attackers to inject their own callback endpoints. This enables account takeover via token theft. To solve: Intercept the OAuth code and use it to access Carlos's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in callback\", \"Lab Description\": \"The application uses a third-party OAuth provider to log in users. However, the redirect_uri parameter is not strictly validated, allowing attackers to inject their own callback endpoints. This enables account takeover via token theft. To solve: Intercept the OAuth code and use it to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The application assigns a session ID in a cookie before authentication and does not regenerate it upon login. Attackers can force a known session ID on victims, then log in using that ID themselves. To solve: Fixate a session, force Carlos to use it, and then access his account via the same ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application assigns a session ID in a cookie before authentication and does not regenerate it upon login. Attackers can force a known session ID on victims, then log in using that ID themselves. To solve: Fixate a session, force Carlos to use it, and then access his account via the same ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Tampered JWT leads to admin privilege escalation\nDescription: The application uses JSON Web Tokens (JWTs) to manage authentication and access control. The server uses the 'none' algorithm to verify tokens but does not enforce proper signature validation. The application trusts the user-supplied JWT without verifying its integrity. To solve: Modify your own JWT to escalate to the admin role and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Tampered JWT leads to admin privilege escalation\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) to manage authentication and access control. The server uses the 'none' algorithm to verify tokens but does not enforce proper signature validation. The application trusts the user-supplied JWT without verifying its integrity. To solve: Modify your own JWT to escalate to the admin role and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration leads to account takeover via third-party redirect\nDescription: The application implements OAuth login but fails to validate the 'redirect_uri' and 'state' parameters. It is possible to manipulate the OAuth flow to bind an attacker-controlled third-party account to the victimâ€™s session. To solve: Trick the system into linking your OAuth identity to Carlos's account, then access his dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to account takeover via third-party redirect\", \"Lab Description\": \"The application implements OAuth login but fails to validate the 'redirect_uri' and 'state' parameters. It is possible to manipulate the OAuth flow to bind an attacker-controlled third-party account to the victimâ€™s session. To solve: Trick the system into linking your OAuth identity to Carlos's account, then access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: The application uses predictable session IDs and does not invalidate the session token after login. This allows an attacker to set a session ID before victim login and later hijack the session. To solve: Fixate the session ID before Carlos logs in, then reuse that session ID to access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application uses predictable session IDs and does not invalidate the session token after login. This allows an attacker to set a session ID before victim login and later hijack the session. To solve: Fixate the session ID before Carlos logs in, then reuse that session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via cookie injection in login workflow\nDescription: The application does not invalidate user sessions upon authentication. Instead, it continues using any pre-authenticated session identifier, even if it was injected beforehand. The application uses cookie-based sessions without regeneration upon login. To solve: Hijack a session by fixing a session ID before victim login and access Carlos's account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via cookie injection in login workflow\", \"Lab Description\": \"The application does not invalidate user sessions upon authentication. Instead, it continues using any pre-authenticated session identifier, even if it was injected beforehand. The application uses cookie-based sessions without regeneration upon login. To solve: Hijack a session by fixing a session ID before victim login and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm exploit in Authorization header\nDescription: The backend uses JWT tokens for stateless authentication, but fails to enforce a valid algorithm for signature verification. If a token is submitted with the 'alg' field set to 'none', the backend accepts it without validating the signature. To solve: Forge a valid token for Carlos using the 'none' algorithm and access his protected resource.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm exploit in Authorization header\", \"Lab Description\": \"The backend uses JWT tokens for stateless authentication, but fails to enforce a valid algorithm for signature verification. If a token is submitted with the 'alg' field set to 'none', the backend accepts it without validating the signature. To solve: Forge a valid token for Carlos using the 'none' algorithm and access his protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit grant token leakage via referrer\nDescription: This lab implements OAuth 2.0 using the implicit grant flow. Access tokens are returned in the URL fragment, but a redirect leads to a third-party domain which leaks the token via the Referer header. To solve: Extract Carlosâ€™s access token from a leaked Referer and use it to access his data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit grant token leakage via referrer\", \"Lab Description\": \"This lab implements OAuth 2.0 using the implicit grant flow. Access tokens are returned in the URL fragment, but a redirect leads to a third-party domain which leaks the token via the Referer header. To solve: Extract Carlosâ€™s access token from a leaked Referer and use it to access his data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm exploit in session verification\nDescription: The application uses JWTs to manage authenticated sessions, but it incorrectly allows tokens with the 'alg':'none' header to be accepted as valid. The application verifies tokens without validating the signature when 'none' is specified. To solve: forge a valid session token for the user 'admin' and access the admin dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm exploit in session verification\", \"Lab Description\": \"The application uses JWTs to manage authenticated sessions, but it incorrectly allows tokens with the 'alg':'none' header to be accepted as valid. The application verifies tokens without validating the signature when 'none' is specified. To solve: forge a valid session token for the user 'admin' and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: This application does not regenerate session cookies after login. An attacker can set a session ID before login and trick the victim into logging in with it, allowing session fixation. To solve: fixate Carlos's session and access their profile using the same session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This application does not regenerate session cookies after login. An attacker can set a session ID before login and trick the victim into logging in with it, allowing session fixation. To solve: fixate Carlos's session and access their profile using the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referrer header in implicit flow\nDescription: The app implements OAuth using the implicit grant type and returns access tokens in the URL fragment. Due to misconfigured redirects, tokens are leaked through the referrer header when loading external resources. To solve: capture an access token for the victim and use it to access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referrer header in implicit flow\", \"Lab Description\": \"The app implements OAuth using the implicit grant type and returns access tokens in the URL fragment. Due to misconfigured redirects, tokens are leaked through the referrer header when loading external resources. To solve: capture an access token for the victim and use it to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via alg=none in REST API login\nDescription: The application uses JWTs to manage user sessions, but incorrectly allows the use of the 'none' algorithm. The `/api/login` endpoint accepts a username and password, returning a signed JWT. However, the server fails to validate the JWT signature properly when `alg` is set to `none`. The application treats the payload as valid without verifying the signature. To solve: forge a JWT that grants access to Carlosâ€™s account using the `alg=none` technique.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via alg=none in REST API login\", \"Lab Description\": \"The application uses JWTs to manage user sessions, but incorrectly allows the use of the 'none' algorithm. The `/api/login` endpoint accepts a username and password, returning a signed JWT. However, the server fails to validate the JWT signature properly when `alg` is set to `none`. The application treats the payload as valid without verifying the signature. To solve: forge a JWT that grants access to Carlosâ€™s account using the `alg=none` technique.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access token via redirect\nDescription: The application integrates a third-party OAuth provider for login using the `response_type=token` flow. However, it redirects the full access token to a third-party endpoint using an insecure redirect URI. This allows an attacker to intercept tokens by registering a malicious domain. To solve: craft a redirect URI pointing to a server you control and extract Carlosâ€™s access token upon login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access token via redirect\", \"Lab Description\": \"The application integrates a third-party OAuth provider for login using the `response_type=token` flow. However, it redirects the full access token to a third-party endpoint using an insecure redirect URI. This allows an attacker to intercept tokens by registering a malicious domain. To solve: craft a redirect URI pointing to a server you control and extract Carlosâ€™s access token upon login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in GraphQL login\nDescription: This application exposes a GraphQL endpoint for user authentication. Upon visiting the site, a fixed session cookie is assigned regardless of user identity. The server does not invalidate or regenerate the session after login, allowing a malicious user to predetermine a victim's session ID. To solve: predefine Carlosâ€™s session ID, get him to log in using it, then hijack the session and access his dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in GraphQL login\", \"Lab Description\": \"This application exposes a GraphQL endpoint for user authentication. Upon visiting the site, a fixed session cookie is assigned regardless of user identity. The server does not invalidate or regenerate the session after login, allowing a malicious user to predetermine a victim's session ID. To solve: predefine Carlosâ€™s session ID, get him to log in using it, then hijack the session and access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in OAuth flow\nDescription: The application uses OAuth for third-party login integration, but it fails to regenerate the session identifier after authentication. The application stores session tokens in cookies without proper rotation. To solve: Fixate your own session ID before login, then coerce the victim (Carlos) to authenticate via OAuth and capture their session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in OAuth flow\", \"Lab Description\": \"The application uses OAuth for third-party login integration, but it fails to regenerate the session identifier after authentication. The application stores session tokens in cookies without proper rotation. To solve: Fixate your own session ID before login, then coerce the victim (Carlos) to authenticate via OAuth and capture their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via algorithm confusion\nDescription: This lab implements JWT-based authentication using the 'HS256' algorithm. However, the server fails to validate the token's algorithm field. To solve the lab, forge a JWT using the 'none' algorithm and access Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via algorithm confusion\", \"Lab Description\": \"This lab implements JWT-based authentication using the 'HS256' algorithm. However, the server fails to validate the token's algorithm field. To solve the lab, forge a JWT using the 'none' algorithm and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Multi-step credential stuffing with email discovery\nDescription: This lab simulates a login form that leaks registered emails through the password reset feature. The login system does not implement account lockout, allowing credential stuffing attacks. To solve the lab, enumerate Carlos's email, then brute-force his password and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Multi-step credential stuffing with email discovery\", \"Lab Description\": \"This lab simulates a login form that leaks registered emails through the password reset feature. The login system does not implement account lockout, allowing credential stuffing attacks. To solve the lab, enumerate Carlos's email, then brute-force his password and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in stateless API\nDescription: The stateless REST API uses JSON Web Tokens (JWTs) for authentication but fails to validate the 'alg' field correctly. The backend trusts the token header and doesn't enforce algorithm restrictions. The application decodes JWTs without verifying the signature if the algorithm is set to 'none'. To solve: Forge a valid admin token and access the /admin-dashboard endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in stateless API\", \"Lab Description\": \"The stateless REST API uses JSON Web Tokens (JWTs) for authentication but fails to validate the 'alg' field correctly. The backend trusts the token header and doesn't enforce algorithm restrictions. The application decodes JWTs without verifying the signature if the algorithm is set to 'none'. To solve: Forge a valid admin token and access the /admin-dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via unregenerated session ID after login\nDescription: This web application accepts a user-provided session ID via the Cookie header. Upon successful login, the server does not regenerate the session ID, enabling session fixation. To solve: Fixate Carlosâ€™s session ID before he logs in, then use that session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unregenerated session ID after login\", \"Lab Description\": \"This web application accepts a user-provided session ID via the Cookie header. Upon successful login, the server does not regenerate the session ID, enabling session fixation. To solve: Fixate Carlosâ€™s session ID before he logs in, then use that session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access_token to referrer\nDescription: This application uses OAuth for login with an external provider but fails to correctly isolate the access_token from insecure referrer leaks. When redirected after authentication, the token is included in the URL fragment which gets exposed in referrer headers. To solve: Harvest Carlos's OAuth token and use it to impersonate him via the API.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access_token to referrer\", \"Lab Description\": \"This application uses OAuth for login with an external provider but fails to correctly isolate the access_token from insecure referrer leaks. When redirected after authentication, the token is included in the URL fragment which gets exposed in referrer headers. To solve: Harvest Carlos's OAuth token and use it to impersonate him via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion attack in Authorization header\nDescription: This lab uses JWTs for stateless session handling and verifies tokens in the Authorization header using the 'alg' field. The server trusts the algorithm declared in the JWT itself. The application uses asymmetric signing (RS256) but fails to enforce key verification. To solve: forge a valid JWT that grants admin privileges by exploiting the algorithm confusion.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in Authorization header\", \"Lab Description\": \"This lab uses JWTs for stateless session handling and verifies tokens in the Authorization header using the 'alg' field. The server trusts the algorithm declared in the JWT itself. The application uses asymmetric signing (RS256) but fails to enforce key verification. To solve: forge a valid JWT that grants admin privileges by exploiting the algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri validation\nDescription: The application allows users to authenticate via a third-party OAuth provider. However, it improperly validates the redirect_uri parameter, making it susceptible to open redirect-based token leakage. To solve: intercept the OAuth flow and steal an authorization code intended for another user, then exchange it for an access token and log in as that user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation\", \"Lab Description\": \"The application allows users to authenticate via a third-party OAuth provider. However, it improperly validates the redirect_uri parameter, making it susceptible to open redirect-based token leakage. To solve: intercept the OAuth flow and steal an authorization code intended for another user, then exchange it for an access token and log in as that user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in URL\nDescription: The application accepts session identifiers via URL query parameters and fails to regenerate them on successful login. An attacker can force a known session ID and trick a user into authenticating with it. To solve: fixate a known session ID and hijack the victimâ€™s session after login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in URL\", \"Lab Description\": \"The application accepts session identifiers via URL query parameters and fails to regenerate them on successful login. An attacker can force a known session ID and trick a user into authenticating with it. To solve: fixate a known session ID and hijack the victimâ€™s session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion in token validation\nDescription: This lab's JWT-based authentication mechanism is vulnerable due to algorithm confusion. The server mistakenly trusts the algorithm value specified in the token header without verification. The application accepts tokens signed with 'none' and allows user impersonation. To solve: forge a JWT to impersonate the user 'admin' and access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation\", \"Lab Description\": \"This lab's JWT-based authentication mechanism is vulnerable due to algorithm confusion. The server mistakenly trusts the algorithm value specified in the token header without verification. The application accepts tokens signed with 'none' and allows user impersonation. To solve: forge a JWT to impersonate the user 'admin' and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID\nDescription: This lab's session management system is vulnerable to session fixation due to predictable session IDs being accepted after login. The server issues session IDs before authentication and fails to rotate them upon login. To solve: set a session ID, trick a user into logging in, then reuse that session to access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab's session management system is vulnerable to session fixation due to predictable session IDs being accepted after login. The server issues session IDs before authentication and fails to rotate them upon login. To solve: set a session ID, trick a user into logging in, then reuse that session to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow token theft via redirect URI manipulation\nDescription: This lab uses OAuth's implicit grant type and suffers from a poorly validated redirect_uri parameter. The application incorrectly trusts any redirect_uri under the application's subdomain. To solve: inject a malicious redirect_uri that leaks the victimâ€™s access_token to your server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token theft via redirect URI manipulation\", \"Lab Description\": \"This lab uses OAuth's implicit grant type and suffers from a poorly validated redirect_uri parameter. The application incorrectly trusts any redirect_uri under the application's subdomain. To solve: inject a malicious redirect_uri that leaks the victimâ€™s access_token to your server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in API Gateway\nDescription: This lab simulates a Node.js-based API protected by JWT tokens. However, the server fails to validate the signing algorithm and blindly trusts the 'alg' header. The application accepts tokens with the 'none' algorithm and treats them as valid. To solve the lab, craft a JWT with 'none' as the algorithm and access Carlos's protected resource endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in API Gateway\", \"Lab Description\": \"This lab simulates a Node.js-based API protected by JWT tokens. However, the server fails to validate the signing algorithm and blindly trusts the 'alg' header. The application accepts tokens with the 'none' algorithm and treats them as valid. To solve the lab, craft a JWT with 'none' as the algorithm and access Carlos's protected resource endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via referer header\nDescription: The application implements OAuth 2.0 with an implicit grant flow. It redirects users with access tokens embedded in the URL fragment. However, the fragment is reflected into a third-party analytics script URL via a vulnerable referer header. To solve the lab, leak Carlos's token to your attacker server by triggering a login and capturing the referer.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header\", \"Lab Description\": \"The application implements OAuth 2.0 with an implicit grant flow. It redirects users with access tokens embedded in the URL fragment. However, the fragment is reflected into a third-party analytics script URL via a vulnerable referer header. To solve the lab, leak Carlos's token to your attacker server by triggering a login and capturing the referer.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login response\nDescription: The application issues session IDs before user authentication and fails to regenerate them after login. This allows an attacker to fix a known session ID, get a victim to log in using it, and hijack the session. To solve the lab, log in as Carlos using a fixed session and retrieve his account data from the dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login response\", \"Lab Description\": \"The application issues session IDs before user authentication and fails to regenerate them after login. This allows an attacker to fix a known session ID, get a victim to log in using it, and hijack the session. To solve the lab, log in as Carlos using a fixed session and retrieve his account data from the dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation via Predictable Token in OAuth Flow\nDescription: The OAuth login flow is improperly designed, allowing an attacker to fix the session identifier of a victim before authentication. The application accepts a static session ID from a GET parameter during the authorization phase, which persists after login. To solve: hijack Carlos's session by setting a fixed session ID before they authenticate and then reuse it to access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Token in OAuth Flow\", \"Lab Description\": \"The OAuth login flow is improperly designed, allowing an attacker to fix the session identifier of a victim before authentication. The application accepts a static session ID from a GET parameter during the authorization phase, which persists after login. To solve: hijack Carlos's session by setting a fixed session ID before they authenticate and then reuse it to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Exploitation in Token Verification\nDescription: This lab's JWT-based authentication system incorrectly allows tokens signed with the 'none' algorithm to bypass signature verification. The application fails to enforce algorithm restrictions during verification. To solve: forge a JWT token impersonating Carlos by crafting a token with 'alg: none'.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Exploitation in Token Verification\", \"Lab Description\": \"This lab's JWT-based authentication system incorrectly allows tokens signed with the 'none' algorithm to bypass signature verification. The application fails to enforce algorithm restrictions during verification. To solve: forge a JWT token impersonating Carlos by crafting a token with 'alg: none'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Broken Redirect in OAuth Callback Enables Token Theft\nDescription: The OAuth flow includes an open redirect vulnerability at the callback endpoint, allowing an attacker to steal the authorization code. The application uses an insecure redirect URI provided in the query string without validating its domain. To solve: hijack Carlosâ€™s login OAuth flow, extract the code, and use it to gain access to his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Broken Redirect in OAuth Callback Enables Token Theft\", \"Lab Description\": \"The OAuth flow includes an open redirect vulnerability at the callback endpoint, allowing an attacker to steal the authorization code. The application uses an insecure redirect URI provided in the query string without validating its domain. To solve: hijack Carlosâ€™s login OAuth flow, extract the code, and use it to gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in login API\nDescription: This lab implements stateless session management using JSON Web Tokens (JWT). The login endpoint generates a signed token that is used to authenticate subsequent requests. However, the application improperly allows the use of the 'none' algorithm. To solve: Forge a JWT token with 'alg':'none' and access Carlos's account without knowing his password.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in login API\", \"Lab Description\": \"This lab implements stateless session management using JSON Web Tokens (JWT). The login endpoint generates a signed token that is used to authenticate subsequent requests. However, the application improperly allows the use of the 'none' algorithm. To solve: Forge a JWT token with 'alg':'none' and access Carlos's account without knowing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: This lab's login system is vulnerable to session fixation because it fails to generate a new session identifier upon successful authentication. Attackers can set their own session ID and trick the victim into using it. To solve: Fix a session ID for Carlos before login, then access his account after he logs in using that ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"This lab's login system is vulnerable to session fixation because it fails to generate a new session identifier upon successful authentication. Attackers can set their own session ID and trick the victim into using it. To solve: Fix a session ID for Carlos before login, then access his account after he logs in using that ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration with open redirect and trust leak\nDescription: This OAuth login flow is misconfigured and trusts any redirect_uri parameter, allowing an attacker to steal authorization codes. The application blindly trusts the redirect_uri without validation. To solve: Steal Carlos's OAuth authorization code by crafting a malicious redirect_uri.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and trust leak\", \"Lab Description\": \"This OAuth login flow is misconfigured and trusts any redirect_uri parameter, allowing an attacker to steal authorization codes. The application blindly trusts the redirect_uri without validation. To solve: Steal Carlos's OAuth authorization code by crafting a malicious redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via 'none' algorithm in API token validation\nDescription: The application's authentication is handled via a JWT token passed in the Authorization header. The server accepts unsigned JWT tokens when the `alg` is set to 'none'. The application trusts the token's payload without signature verification. To solve: craft a forged JWT for user 'admin' and access the protected /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via 'none' algorithm in API token validation\", \"Lab Description\": \"The application's authentication is handled via a JWT token passed in the Authorization header. The server accepts unsigned JWT tokens when the `alg` is set to 'none'. The application trusts the token's payload without signature verification. To solve: craft a forged JWT for user 'admin' and access the protected /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri parameter\nDescription: The application uses OAuth 2.0 for user authentication. It trusts the 'redirect_uri' parameter without validating it against a whitelist. This allows an attacker to redirect the authorization code to their own domain and complete the OAuth flow. To solve: hijack an OAuth session and access the victimâ€™s account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri parameter\", \"Lab Description\": \"The application uses OAuth 2.0 for user authentication. It trusts the 'redirect_uri' parameter without validating it against a whitelist. This allows an attacker to redirect the authorization code to their own domain and complete the OAuth flow. To solve: hijack an OAuth session and access the victimâ€™s account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via static session ID assignment in login handler\nDescription: The application assigns a static session ID based on the username during login. An attacker can preset this ID for a victim before login. To solve: set a valid session ID for 'carlos' before he logs in, then hijack the session and access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via static session ID assignment in login handler\", \"Lab Description\": \"The application assigns a static session ID based on the username during login. An attacker can preset this ID for a victim before login. To solve: set a valid session ID for 'carlos' before he logs in, then hijack the session and access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID reuse\nDescription: The application reuses the same session ID across unauthenticated and authenticated states. When a user logs in, the existing session is not invalidated. This behavior allows session fixation. To solve: Fixate the session of the victim user Carlos and access his account after forcing a login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID reuse\", \"Lab Description\": \"The application reuses the same session ID across unauthenticated and authenticated states. When a user logs in, the existing session is not invalidated. This behavior allows session fixation. To solve: Fixate the session of the victim user Carlos and access his account after forcing a login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via 'none' algorithm attack\nDescription: The application uses JSON Web Tokens (JWT) for authentication, but fails to validate the algorithm in the JWT header. The application accepts tokens signed with 'none' algorithm, allowing attackers to forge arbitrary tokens. To solve: Forge a valid JWT token as admin using 'none' algorithm and access the /admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm attack\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for authentication, but fails to validate the algorithm in the JWT header. The application accepts tokens signed with 'none' algorithm, allowing attackers to forge arbitrary tokens. To solve: Forge a valid JWT token as admin using 'none' algorithm and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration exploiting open redirect\nDescription: The application uses OAuth for third-party login but trusts any redirect URI without validation. This enables attackers to manipulate the redirect_uri parameter to capture tokens. To solve: Abuse the redirect URI to intercept Carlos's access token and use it to access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration exploiting open redirect\", \"Lab Description\": \"The application uses OAuth for third-party login but trusts any redirect URI without validation. This enables attackers to manipulate the redirect_uri parameter to capture tokens. To solve: Abuse the redirect URI to intercept Carlos's access token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Predictable Token Injection in OAuth Flow\nDescription: The OAuth implementation in this application mishandles session tokens when delegating login to third-party providers. The session identifier is not regenerated upon successful login. The application accepts a session token from unauthenticated users and continues using it post-authentication. To solve: fixate Carlos's session ID prior to login, then hijack his session after he logs in using the third-party flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Token Injection in OAuth Flow\", \"Lab Description\": \"The OAuth implementation in this application mishandles session tokens when delegating login to third-party providers. The session identifier is not regenerated upon successful login. The application accepts a session token from unauthenticated users and continues using it post-authentication. To solve: fixate Carlos's session ID prior to login, then hijack his session after he logs in using the third-party flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Token Forgery via None Algorithm Exploit\nDescription: This application uses JWT tokens to authenticate users but fails to verify the algorithm securely. If the algorithm field is set to 'none', the backend skips signature validation entirely. To solve: forge a JWT token for user 'carlos' by changing the algorithm to 'none' and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Token Forgery via None Algorithm Exploit\", \"Lab Description\": \"This application uses JWT tokens to authenticate users but fails to verify the algorithm securely. If the algorithm field is set to 'none', the backend skips signature validation entirely. To solve: forge a JWT token for user 'carlos' by changing the algorithm to 'none' and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA Bypass via Password Reset Flow\nDescription: This application's MFA enforcement fails during the password reset flow. After a password reset, users are logged in without triggering 2FA enforcement. To solve: trigger a password reset for Carlos, set a new password, then access his account page without MFA challenge.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA Bypass via Password Reset Flow\", \"Lab Description\": \"This application's MFA enforcement fails during the password reset flow. After a password reset, users are logged in without triggering 2FA enforcement. To solve: trigger a password reset for Carlos, set a new password, then access his account page without MFA challenge.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion vulnerability in API-based login\nDescription: This lab uses JWTs to manage user sessions via a stateless REST API. The backend fails to enforce strict algorithm verification, allowing attackers to tamper with the token header and payload to bypass authentication. The application verifies tokens but trusts user-supplied algorithm types. To solve: forge a token that grants access to the admin dashboard without knowing the secret key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in API-based login\", \"Lab Description\": \"This lab uses JWTs to manage user sessions via a stateless REST API. The backend fails to enforce strict algorithm verification, allowing attackers to tamper with the token header and payload to bypass authentication. The application verifies tokens but trusts user-supplied algorithm types. To solve: forge a token that grants access to the admin dashboard without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login redirect logic\nDescription: This lab uses cookies to manage sessions. Upon login, the session ID is preserved if already present. An attacker can exploit this by sharing a pre-set session cookie with a victim and then logging in with that same session. To solve: fix a session with a victim, then hijack their authenticated session after they log in.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login redirect logic\", \"Lab Description\": \"This lab uses cookies to manage sessions. Upon login, the session ID is preserved if already present. An attacker can exploit this by sharing a pre-set session cookie with a victim and then logging in with that same session. To solve: fix a session with a victim, then hijack their authenticated session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth open redirect in callback endpoint\nDescription: This lab uses a third-party OAuth provider for user authentication. The callback endpoint is vulnerable to an open redirect allowing an attacker to intercept tokens. To solve: manipulate the redirect_uri to leak the authorization code to an attacker-controlled server and use it to impersonate the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in callback endpoint\", \"Lab Description\": \"This lab uses a third-party OAuth provider for user authentication. The callback endpoint is vulnerable to an open redirect allowing an attacker to intercept tokens. To solve: manipulate the redirect_uri to leak the authorization code to an attacker-controlled server and use it to impersonate the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'alg' field tampering to bypass signature validation\nDescription: This lab's authentication system uses JWTs for session management. The server is misconfigured to trust JWTs even when the 'alg' field is set to 'none'. The application does not properly validate the integrity of the JWT. To solve: tamper with the JWT to impersonate the user 'carlos' and access their account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'alg' field tampering to bypass signature validation\", \"Lab Description\": \"This lab's authentication system uses JWTs for session management. The server is misconfigured to trust JWTs even when the 'alg' field is set to 'none'. The application does not properly validate the integrity of the JWT. To solve: tamper with the JWT to impersonate the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri\nDescription: This lab has a misconfigured OAuth 2.0 implementation that accepts unvalidated redirect_uris. An attacker can manipulate the redirect flow to obtain a valid authorization code for another user. To solve: steal Carlos's token via redirect_uri manipulation and use it to access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri\", \"Lab Description\": \"This lab has a misconfigured OAuth 2.0 implementation that accepts unvalidated redirect_uris. An attacker can manipulate the redirect flow to obtain a valid authorization code for another user. To solve: steal Carlos's token via redirect_uri manipulation and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation through predictable session ID generation\nDescription: This labâ€™s login system accepts user-supplied session IDs, and the session ID generation is weak and predictable. The application reuses the session ID if set before login. To solve: fix a known session ID before Carlos logs in and hijack his session afterward.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through predictable session ID generation\", \"Lab Description\": \"This labâ€™s login system accepts user-supplied session IDs, and the session ID generation is weak and predictable. The application reuses the session ID if set before login. To solve: fix a known session ID before Carlos logs in and hijack his session afterward.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Login Without Session Renewal\nDescription: This lab demonstrates a session fixation vulnerability in which the session ID remains unchanged after a successful login. The application does not regenerate the session identifier during authentication. To solve: Fixate a session on the victim and log in as Carlos by reusing the same session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Login Without Session Renewal\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in which the session ID remains unchanged after a successful login. The application does not regenerate the session identifier during authentication. To solve: Fixate a session on the victim and log in as Carlos by reusing the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Signature Forgery via Error Leak in Token Validation\nDescription: The backend uses JWTs for session management, but it discloses the secret key via verbose stack traces when given a malformed token. The application fails to suppress internal verification errors. To solve: Forge a JWT as Carlos and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Signature Forgery via Error Leak in Token Validation\", \"Lab Description\": \"The backend uses JWTs for session management, but it discloses the secret key via verbose stack traces when given a malformed token. The application fails to suppress internal verification errors. To solve: Forge a JWT as Carlos and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Open Redirect in OAuth Flow\nDescription: This OAuth-based login mechanism fails to properly validate the redirect_uri parameter. The application allows an arbitrary domain to receive tokens. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth code, then exchange it for an access token and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Open Redirect in OAuth Flow\", \"Lab Description\": \"This OAuth-based login mechanism fails to properly validate the redirect_uri parameter. The application allows an arbitrary domain to receive tokens. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth code, then exchange it for an access token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in cookie-based login system\nDescription: The application uses session tokens to track users post-login but does not regenerate them after successful authentication. This allows attackers to fixate a known session ID. The application accepts a session cookie pre-authentication and reuses it post-login without renewal. To solve: force a victim to authenticate under an attacker-supplied session and hijack their session to access their profile.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in cookie-based login system\", \"Lab Description\": \"The application uses session tokens to track users post-login but does not regenerate them after successful authentication. This allows attackers to fixate a known session ID. The application accepts a session cookie pre-authentication and reuses it post-login without renewal. To solve: force a victim to authenticate under an attacker-supplied session and hijack their session to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm\nDescription: This application uses JWTs for authentication. However, it incorrectly trusts tokens with the 'alg' header set to 'none' and does not verify the signature. This allows an attacker to forge arbitrary tokens. To solve: craft a JWT granting access to the 'admin' user and access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm\", \"Lab Description\": \"This application uses JWTs for authentication. However, it incorrectly trusts tokens with the 'alg' header set to 'none' and does not verify the signature. This allows an attacker to forge arbitrary tokens. To solve: craft a JWT granting access to the 'admin' user and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect in redirect_uri parameter\nDescription: This OAuth implementation fails to validate the redirect_uri properly during authorization. Attackers can manipulate the redirect_uri to hijack authorization codes. The application whitelists any subdomain and doesn't enforce exact matching. To solve: intercept a user's OAuth flow and steal the authorization code to log in as them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in redirect_uri parameter\", \"Lab Description\": \"This OAuth implementation fails to validate the redirect_uri properly during authorization. Attackers can manipulate the redirect_uri to hijack authorization codes. The application whitelists any subdomain and doesn't enforce exact matching. To solve: intercept a user's OAuth flow and steal the authorization code to log in as them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in OAuth Authorization Flow\nDescription: This lab demonstrates a session fixation vulnerability during OAuth login using the Authorization Code grant type. The application mistakenly trusts the session cookie issued before OAuth verification is complete. The application fails to bind the session cookie to the OAuth authorization code flow. To solve: exploit the session fixation to log in as Carlos by abusing the OAuth login flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Authorization Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability during OAuth login using the Authorization Code grant type. The application mistakenly trusts the session cookie issued before OAuth verification is complete. The application fails to bind the session cookie to the OAuth authorization code flow. To solve: exploit the session fixation to log in as Carlos by abusing the OAuth login flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL Authorization Header\nDescription: This lab simulates an insecure JWT implementation within a GraphQL API that incorrectly allows tokens using the 'none' algorithm. The backend uses the Authorization Bearer token to authenticate users but skips verification if the algorithm is set to 'none'. To solve: forge a JWT with 'alg: none' and impersonate Carlos to access his profile.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL Authorization Header\", \"Lab Description\": \"This lab simulates an insecure JWT implementation within a GraphQL API that incorrectly allows tokens using the 'none' algorithm. The backend uses the Authorization Bearer token to authenticate users but skips verification if the algorithm is set to 'none'. To solve: forge a JWT with 'alg: none' and impersonate Carlos to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA Bypass via Debug Parameter Injection in REST API\nDescription: This labâ€™s REST-based login system includes a hidden debug parameter that allows bypassing the MFA challenge. When the debug=true parameter is set in the second-phase login POST request, the backend skips the MFA verification logic entirely. To solve: login as Carlos using the known password and bypass the MFA code requirement using the debug injection.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA Bypass via Debug Parameter Injection in REST API\", \"Lab Description\": \"This labâ€™s REST-based login system includes a hidden debug parameter that allows bypassing the MFA challenge. When the debug=true parameter is set in the second-phase login POST request, the backend skips the MFA verification logic entirely. To solve: login as Carlos using the known password and bypass the MFA code requirement using the debug injection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via insecure Set-Cookie logic in login response\nDescription: This lab's session management implementation is vulnerable to session fixation due to insecure handling of Set-Cookie during authentication. The application reuses a user-supplied session token without regeneration after login. To solve: hijack a victim session using a pre-authenticated session ID and access Carlos's account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure Set-Cookie logic in login response\", \"Lab Description\": \"This lab's session management implementation is vulnerable to session fixation due to insecure handling of Set-Cookie during authentication. The application reuses a user-supplied session token without regeneration after login. To solve: hijack a victim session using a pre-authenticated session ID and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion leads to signature bypass\nDescription: The app uses JWTs for authentication and fails to verify the algorithm properly, allowing an attacker to change the token's algorithm to 'none' to bypass signature verification. The application decodes and trusts any token if it passes decoding. To solve: forge a JWT token for carlos with 'none' alg and access /dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion leads to signature bypass\", \"Lab Description\": \"The app uses JWTs for authentication and fails to verify the algorithm properly, allowing an attacker to change the token's algorithm to 'none' to bypass signature verification. The application decodes and trusts any token if it passes decoding. To solve: forge a JWT token for carlos with 'none' alg and access /dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration allows token stealing via redirect\nDescription: This lab simulates a misconfigured OAuth implicit flow that reflects access tokens in the URL fragment. An attacker can inject a malicious redirect_uri to leak the token to an external site. To solve: steal Carlos's OAuth access token and use it to access his /user/settings page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration allows token stealing via redirect\", \"Lab Description\": \"This lab simulates a misconfigured OAuth implicit flow that reflects access tokens in the URL fragment. An attacker can inject a malicious redirect_uri to leak the token to an external site. To solve: steal Carlos's OAuth access token and use it to access his /user/settings page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Authentication Bypass in Authorization Header\nDescription: The application's authentication mechanism relies on JWTs passed in the Authorization header. However, the server fails to properly validate the signing algorithm. The application accepts tokens signed with 'alg':'none', bypassing signature verification. To solve: gain access to Carlos's account using a forged token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass in Authorization Header\", \"Lab Description\": \"The application's authentication mechanism relies on JWTs passed in the Authorization header. However, the server fails to properly validate the signing algorithm. The application accepts tokens signed with 'alg':'none', bypassing signature verification. To solve: gain access to Carlos's account using a forged token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in Cookie Handling\nDescription: The application assigns a session cookie to anonymous users but fails to rotate it after login. This allows an attacker to fix a victim's session beforehand and hijack their account once they log in. To solve: log in as Carlos using a pre-assigned session cookie.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Cookie Handling\", \"Lab Description\": \"The application assigns a session cookie to anonymous users but fails to rotate it after login. This allows an attacker to fix a victim's session beforehand and hijack their account once they log in. To solve: log in as Carlos using a pre-assigned session cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI\nDescription: The OAuth flow used by the application is improperly configured to allow open redirect URIs. This enables attackers to intercept access tokens by specifying their own domain. To solve: capture Carlosâ€™s OAuth access token and use it to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI\", \"Lab Description\": \"The OAuth flow used by the application is improperly configured to allow open redirect URIs. This enables attackers to intercept access tokens by specifying their own domain. To solve: capture Carlosâ€™s OAuth access token and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT-based authentication system fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT-based authentication system fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: This lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage to attacker-controlled domains. The application generates OAuth tokens after successful authentication. To solve: steal a valid OAuth token by manipulating the redirect flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"This lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage to attacker-controlled domains. The application generates OAuth tokens after successful authentication. To solve: steal a valid OAuth token by manipulating the redirect flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via insecure session regeneration in GraphQL endpoint\nDescription: This lab's GraphQL API fails to properly regenerate session tokens after authentication, allowing session fixation attacks. The application maintains the same session ID pre- and post-login. To solve: fixate a session on a victim's browser and gain access when they authenticate.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure session regeneration in GraphQL endpoint\", \"Lab Description\": \"This lab's GraphQL API fails to properly regenerate session tokens after authentication, allowing session fixation attacks. The application maintains the same session ID pre- and post-login. To solve: fixate a session on a victim's browser and gain access when they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in REST API authentication\nDescription: This lab's JWT validation improperly uses the kid header to load verification keys from the filesystem without proper sanitization. The application blindly trusts the kid parameter when selecting verification keys. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in REST API authentication\", \"Lab Description\": \"This lab's JWT validation improperly uses the kid header to load verification keys from the filesystem without proper sanitization. The application blindly trusts the kid parameter when selecting verification keys. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via state parameter reflection\nDescription: This lab's OAuth implementation fails to validate the state parameter between requests, allowing token hijacking. The application reflects the state parameter from the authorization request to the callback without validation. To solve: intercept an OAuth flow and steal a victim's token by predicting the state value.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via state parameter reflection\", \"Lab Description\": \"This lab's OAuth implementation fails to validate the state parameter between requests, allowing token hijacking. The application reflects the state parameter from the authorization request to the callback without validation. To solve: intercept an OAuth flow and steal a victim's token by predicting the state value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL introspection leaks\nDescription: This lab's GraphQL endpoint exposes session management functionality through introspection, allowing attackers to fixate sessions. The application's GraphQL schema reveals mutation fields for session handling without proper access controls. To solve: use introspection to discover session mutations and fixate a session on a victim's browser.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL introspection leaks\", \"Lab Description\": \"This lab's GraphQL endpoint exposes session management functionality through introspection, allowing attackers to fixate sessions. The application's GraphQL schema reveals mutation fields for session handling without proper access controls. To solve: use introspection to discover session mutations and fixate a session on a victim's browser.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature stripping in microservice authentication\nDescription: This lab's microservice architecture fails to properly validate JWT signatures across services. The frontend service accepts unsigned tokens when forwarded from internal services. To solve: bypass authentication by stripping the signature from a valid JWT and injecting it into internal service calls.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping in microservice authentication\", \"Lab Description\": \"This lab's microservice architecture fails to properly validate JWT signatures across services. The frontend service accepts unsigned tokens when forwarded from internal services. To solve: bypass authentication by stripping the signature from a valid JWT and injecting it into internal service calls.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure PKCE implementation\nDescription: This lab's OAuth implementation uses Proof Key for Code Exchange (PKCE) incorrectly, allowing authorization code interception. The application fails to validate the code_verifier properly during token exchange. To solve: intercept an authorization code and exchange it for a token without the original code_verifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure PKCE implementation\", \"Lab Description\": \"This lab's OAuth implementation uses Proof Key for Code Exchange (PKCE) incorrectly, allowing authorization code interception. The application fails to validate the code_verifier properly during token exchange. To solve: intercept an authorization code and exchange it for a token without the original code_verifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: This lab's WebSocket implementation creates sessions during the HTTP handshake without proper validation. The application assigns session identifiers before authentication is complete. To solve: fixate a session during the WebSocket handshake and hijack it after victim authentication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"This lab's WebSocket implementation creates sessions during the HTTP handshake without proper validation. The application assigns session identifiers before authentication is complete. To solve: fixate a session during the WebSocket handshake and hijack it after victim authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT-based authentication fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT-based authentication fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query injection in user search functionality\nDescription: The lab's GraphQL endpoint improperly sanitizes user input in search queries. The application exposes sensitive fields through introspection. To solve: extract all user credentials via a single malicious GraphQL query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query injection in user search functionality\", \"Lab Description\": \"The lab's GraphQL endpoint improperly sanitizes user input in search queries. The application exposes sensitive fields through introspection. To solve: extract all user credentials via a single malicious GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect\nDescription: The lab's OAuth implementation fails to validate redirect URIs, allowing token interception. The application uses implicit flow with improper state validation. To solve: steal an OAuth token and authenticate as another user.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect\", \"Lab Description\": \"The lab's OAuth implementation fails to validate redirect URIs, allowing token interception. The application uses implicit flow with improper state validation. To solve: steal an OAuth token and authenticate as another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: The OAuth implementation leaks authorization codes through open redirects. The application fails to validate redirect_uri against pre-registered URIs. To solve: steal an OAuth token by manipulating the redirect flow to a controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through open redirects. The application fails to validate redirect_uri against pre-registered URIs. To solve: steal an OAuth token by manipulating the redirect flow to a controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in GraphQL authentication endpoint\nDescription: The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate session tokens after login. To solve: fixate a session token on victim's browser then capture their authenticated session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in GraphQL authentication endpoint\", \"Lab Description\": \"The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate session tokens after login. To solve: fixate a session token on victim's browser then capture their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none exploitation in REST API authentication\nDescription: The application uses JSON Web Tokens for session management but fails to properly validate the signature. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT to escalate privileges to admin without valid credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none exploitation in REST API authentication\", \"Lab Description\": \"The application uses JSON Web Tokens for session management but fails to properly validate the signature. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT to escalate privileges to admin without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL batching attack in user enumeration endpoint\nDescription: The GraphQL API implements authentication checks inefficiently, allowing batch queries to bypass rate limiting. The /graphql endpoint processes multiple authentication attempts in a single request. To solve: perform credential stuffing with 100+ combinations in one HTTP request to discover valid credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack in user enumeration endpoint\", \"Lab Description\": \"The GraphQL API implements authentication checks inefficiently, allowing batch queries to bypass rate limiting. The /graphql endpoint processes multiple authentication attempts in a single request. To solve: perform credential stuffing with 100+ combinations in one HTTP request to discover valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect in authorization flow\nDescription: The OAuth 2.0 implementation fails to validate redirect_uri parameters, allowing attackers to intercept authorization codes. The vulnerable /oauth/authorize endpoint accepts arbitrary redirect destinations. To solve: construct malicious redirect URI to capture victim's token after they authenticate.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect in authorization flow\", \"Lab Description\": \"The OAuth 2.0 implementation fails to validate redirect_uri parameters, allowing attackers to intercept authorization codes. The vulnerable /oauth/authorize endpoint accepts arbitrary redirect destinations. To solve: construct malicious redirect URI to capture victim's token after they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via XSS in JWT generation endpoint\nDescription: The application's JWT generation endpoint reflects user-controlled input without proper encoding. The vulnerable /api/jwt/generate endpoint echoes back the username in JWT claims when debug mode is active. To solve: chain stored XSS with session fixation to hijack admin session tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in JWT generation endpoint\", \"Lab Description\": \"The application's JWT generation endpoint reflects user-controlled input without proper encoding. The vulnerable /api/jwt/generate endpoint echoes back the username in JWT claims when debug mode is active. To solve: chain stored XSS with session fixation to hijack admin session tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in identity provider\nDescription: The OAuth provider's CORS policy allows arbitrary origins to access token endpoints. The vulnerable /oauth/token endpoint responds with Access-Control-Allow-Origin: * headers. To solve: craft malicious JavaScript to retrieve victim's OAuth tokens cross-origin.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in identity provider\", \"Lab Description\": \"The OAuth provider's CORS policy allows arbitrary origins to access token endpoints. The vulnerable /oauth/token endpoint responds with Access-Control-Allow-Origin: * headers. To solve: craft malicious JavaScript to retrieve victim's OAuth tokens cross-origin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification service blindly trusts the kid header to load verification keys. The vulnerable /verify endpoint allows directory traversal in kid parameter. To solve: manipulate kid header to point to attacker-controlled key file and forge valid tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification service blindly trusts the kid header to load verification keys. The vulnerable /verify endpoint allows directory traversal in kid parameter. To solve: manipulate kid header to point to attacker-controlled key file and forge valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers without proper verification. The vulnerable /api/validate endpoint processes tokens with externally specified verification keys. To solve: host malicious JWK set and forge admin token with manipulated jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers without proper verification. The vulnerable /api/validate endpoint processes tokens with externally specified verification keys. To solve: host malicious JWK set and forge admin token with manipulated jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state parameter validation\nDescription: The OAuth implementation fails to properly validate state parameters during token exchange. The vulnerable /oauth/callback endpoint processes authorization codes without verifying bound state values. To solve: intercept victim's OAuth flow and swap their authorization code for an access token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state parameter validation\", \"Lab Description\": \"The OAuth implementation fails to properly validate state parameters during token exchange. The vulnerable /oauth/callback endpoint processes authorization codes without verifying bound state values. To solve: intercept victim's OAuth flow and swap their authorization code for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via insecure session migration after login\nDescription: The application maintains pre-authentication session IDs post-login without regeneration. The vulnerable /login endpoint accepts existing session cookies after authentication. To solve: fixate session on victim's browser then trigger authentication to hijack their logged-in session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure session migration after login\", \"Lab Description\": \"The application maintains pre-authentication session IDs post-login without regeneration. The vulnerable /login endpoint accepts existing session cookies after authentication. To solve: fixate session on victim's browser then trigger authentication to hijack their logged-in session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation vulnerability in login endpoint\nDescription: The login mechanism assigns a session identifier before verifying credentials. This allows an attacker to fixate a session for a victim. The application reuses the session token issued prior to authentication. To solve: hijack a session by forcing a victim to authenticate using a session token you control, then access their My account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The login mechanism assigns a session identifier before verifying credentials. This allows an attacker to fixate a session for a victim. The application reuses the session token issued prior to authentication. To solve: hijack a session by forcing a victim to authenticate using a session token you control, then access their My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering vulnerability in API authorization header\nDescription: The backend accepts JWTs signed with the 'none' algorithm. This exposes the application to JWT tampering where the payload can be altered without a valid signature. To solve: tamper with the token to elevate privileges and access the /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in API authorization header\", \"Lab Description\": \"The backend accepts JWTs signed with the 'none' algorithm. This exposes the application to JWT tampering where the payload can be altered without a valid signature. To solve: tamper with the token to elevate privileges and access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage in redirect URI through Referer header\nDescription: The OAuth implementation uses the implicit grant type and sends tokens in the URL fragment. When redirected to an insecure third-party page, the Referer header leaks the token. To solve: extract an access token leaked via the Referer header and use it to access a protected /profile endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage in redirect URI through Referer header\", \"Lab Description\": \"The OAuth implementation uses the implicit grant type and sends tokens in the URL fragment. When redirected to an insecure third-party page, the Referer header leaks the token. To solve: extract an access token leaked via the Referer header and use it to access a protected /profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login handler logic\nDescription: This application fails to regenerate session identifiers during login. If an attacker can trick a user into logging in with a known session ID, they can later hijack that session. The application allows unauthenticated session identifiers to persist after login. To solve: Hijack Carlos's session by fixing the session ID before login and accessing his My account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login handler logic\", \"Lab Description\": \"This application fails to regenerate session identifiers during login. If an attacker can trick a user into logging in with a known session ID, they can later hijack that session. The application allows unauthenticated session identifiers to persist after login. To solve: Hijack Carlos's session by fixing the session ID before login and accessing his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via 'alg: none' flaw\nDescription: This lab uses JSON Web Tokens to authenticate users but improperly trusts the 'alg' field in the token header. If the server accepts tokens signed with 'alg': 'none', an attacker can forge arbitrary tokens. To solve: Forge a JWT for the admin user and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via 'alg: none' flaw\", \"Lab Description\": \"This lab uses JSON Web Tokens to authenticate users but improperly trusts the 'alg' field in the token header. If the server accepts tokens signed with 'alg': 'none', an attacker can forge arbitrary tokens. To solve: Forge a JWT for the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirection misuse in authorization flow\nDescription: The OAuth integration in this application incorrectly trusts the 'redirect_uri' parameter without proper validation. An attacker can manipulate this to obtain authorization codes meant for other clients. To solve: Capture a valid OAuth code issued to Carlos and use it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirection misuse in authorization flow\", \"Lab Description\": \"The OAuth integration in this application incorrectly trusts the 'redirect_uri' parameter without proper validation. An attacker can manipulate this to obtain authorization codes meant for other clients. To solve: Capture a valid OAuth code issued to Carlos and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'none' algorithm bypass in Authorization Header\nDescription: This lab uses stateless JWTs to manage user sessions and relies on the `alg` claim for cryptographic validation. The application fails to enforce signature verification when the 'alg' value is set to 'none'. The application trusts the header contents without validating a signature. To solve: Forge a valid admin token and access the /admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'none' algorithm bypass in Authorization Header\", \"Lab Description\": \"This lab uses stateless JWTs to manage user sessions and relies on the `alg` claim for cryptographic validation. The application fails to enforce signature verification when the 'alg' value is set to 'none'. The application trusts the header contents without validating a signature. To solve: Forge a valid admin token and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Open redirect in OAuth login flow enables account takeover\nDescription: The app allows login using an OAuth provider and accepts any `redirect_uri` value passed during the initial auth request. This weak validation allows redirection of access tokens to attacker-controlled domains. To solve: Steal an OAuth token and access the victim's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Open redirect in OAuth login flow enables account takeover\", \"Lab Description\": \"The app allows login using an OAuth provider and accepts any `redirect_uri` value passed during the initial auth request. This weak validation allows redirection of access tokens to attacker-controlled domains. To solve: Steal an OAuth token and access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unrotated session ID after login\nDescription: This application assigns a session ID prior to authentication but does not issue a new session ID upon successful login. This allows an attacker to set a session ID for a victim and then log in with it, hijacking the session. To solve: Fixate a session and hijack Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unrotated session ID after login\", \"Lab Description\": \"This application assigns a session ID prior to authentication but does not issue a new session ID upon successful login. This allows an attacker to set a session ID for a victim and then log in with it, hijacking the session. To solve: Fixate a session and hijack Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Authentication Bypass in Authorization Header\nDescription: The application uses JWT tokens for user authentication but fails to validate the token's signing algorithm properly. It trusts tokens where the 'alg' field is set to 'none', allowing attackers to forge tokens without a valid signature. The application grants access to user-specific endpoints solely based on the decoded token. To solve: Forge a valid admin-level token and access the /admin page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens for user authentication but fails to validate the token's signing algorithm properly. It trusts tokens where the 'alg' field is set to 'none', allowing attackers to forge tokens without a valid signature. The application grants access to user-specific endpoints solely based on the decoded token. To solve: Forge a valid admin-level token and access the /admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation via URL Parameter in Cookie Assignment\nDescription: The application improperly assigns session identifiers based on a user-controlled query parameter. When a session ID is passed in the URL, the server uses it without validation, allowing attackers to pre-define the victim's session ID. To solve: Fix a session ID for Carlos before login, then log in with his credentials and hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via URL Parameter in Cookie Assignment\", \"Lab Description\": \"The application improperly assigns session identifiers based on a user-controlled query parameter. When a session ID is passed in the URL, the server uses it without validation, allowing attackers to pre-define the victim's session ID. To solve: Fix a session ID for Carlos before login, then log in with his credentials and hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Authorization Code Interception in OAuth Redirect Endpoint\nDescription: The OAuth implementation is vulnerable due to an open redirect flaw in the redirect_uri parameter. Attackers can hijack the authorization code by forcing a victim to authenticate and redirect the code to a malicious domain. To solve: Intercept Carlosâ€™s OAuth code and exchange it for an access token to access /user-info.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in OAuth Redirect Endpoint\", \"Lab Description\": \"The OAuth implementation is vulnerable due to an open redirect flaw in the redirect_uri parameter. Attackers can hijack the authorization code by forcing a victim to authenticate and redirect the code to a malicious domain. To solve: Intercept Carlosâ€™s OAuth code and exchange it for an access token to access /user-info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion in authorization middleware\nDescription: The application's authorization middleware incorrectly trusts the JWT 'alg' header value, allowing attackers to manipulate the signing algorithm. The application uses asymmetric RSA public key verification by default, but if the JWT's header is altered to use 'HS256', the server uses the public key as the HMAC secret. To solve: Forge a JWT for admin user and access their profile endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authorization middleware\", \"Lab Description\": \"The application's authorization middleware incorrectly trusts the JWT 'alg' header value, allowing attackers to manipulate the signing algorithm. The application uses asymmetric RSA public key verification by default, but if the JWT's header is altered to use 'HS256', the server uses the public key as the HMAC secret. To solve: Forge a JWT for admin user and access their profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration in redirect URI\nDescription: The application improperly validates redirect URIs during OAuth implicit flow, allowing an attacker to craft a malicious URL that steals the access token. The application accepts wildcard subdomains without proper origin validation. To solve: Capture a valid token via redirect hijack and access protected user info.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in redirect URI\", \"Lab Description\": \"The application improperly validates redirect URIs during OAuth implicit flow, allowing an attacker to craft a malicious URL that steals the access token. The application accepts wildcard subdomains without proper origin validation. To solve: Capture a valid token via redirect hijack and access protected user info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable token in login endpoint\nDescription: This application assigns a session token before authentication and does not regenerate it upon login. The token is predictable and can be reused by an attacker. To solve: Fixate Carlos's session by injecting a known session ID before they log in, then use that session to access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable token in login endpoint\", \"Lab Description\": \"This application assigns a session token before authentication and does not regenerate it upon login. The token is predictable and can be reused by an attacker. To solve: Fixate Carlos's session by injecting a known session ID before they log in, then use that session to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion in token verification endpoint\nDescription: This lab features a JSON Web Token (JWT)-based authentication mechanism where the server incorrectly trusts the 'alg' field in the token. The application verifies tokens using HMAC and exposes a `/jwt-check` API for verification. To solve: forge a valid token to access Carlos's protected account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification endpoint\", \"Lab Description\": \"This lab features a JSON Web Token (JWT)-based authentication mechanism where the server incorrectly trusts the 'alg' field in the token. The application verifies tokens using HMAC and exposes a `/jwt-check` API for verification. To solve: forge a valid token to access Carlos's protected account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow token leakage via referer header\nDescription: This lab implements OAuth 2.0 with an implicit grant flow. Upon successful login, the access token is included in the URL fragment. A third-party analytics script captures this fragment due to an insecure redirect URI. To solve: extract the access token issued to Carlos by monitoring outbound requests.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab implements OAuth 2.0 with an implicit grant flow. Upon successful login, the access token is included in the URL fragment. A third-party analytics script captures this fragment due to an insecure redirect URI. To solve: extract the access token issued to Carlos by monitoring outbound requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: This lab uses a custom session management system where session IDs are issued before login and stored in cookies. The application does not regenerate the session ID upon authentication. To solve: fix your own session ID, trick Carlos into logging in with it, then reuse the same session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"This lab uses a custom session management system where session IDs are issued before login and stored in cookies. The application does not regenerate the session ID upon authentication. To solve: fix your own session ID, trick Carlos into logging in with it, then reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in login flow with static token parameter\nDescription: The login mechanism of this web application accepts an optional session token via a query parameter. This token is reused after login without being regenerated. The application stores session tokens in cookies without validating their origin. To solve: Fixate a session token prior to login and hijack the session after authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in login flow with static token parameter\", \"Lab Description\": \"The login mechanism of this web application accepts an optional session token via a query parameter. This token is reused after login without being regenerated. The application stores session tokens in cookies without validating their origin. To solve: Fixate a session token prior to login and hijack the session after authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via alg=none in token verification middleware\nDescription: The backend verifies JWTs but does not enforce strict algorithm checks. It accepts tokens signed with 'none', allowing an attacker to forge tokens without a secret key. To solve: Forge a JWT for the admin user using alg=none and gain access to the protected /admin area.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via alg=none in token verification middleware\", \"Lab Description\": \"The backend verifies JWTs but does not enforce strict algorithm checks. It accepts tokens signed with 'none', allowing an attacker to forge tokens without a secret key. To solve: Forge a JWT for the admin user using alg=none and gain access to the protected /admin area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect via manipulated redirect_uri parameter\nDescription: The OAuth 2.0 implementation does not validate redirect_uri strictly, allowing an attacker to redirect authorization codes to their own domain. To solve: Manipulate the redirect_uri parameter to intercept an OAuth code and gain access as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect via manipulated redirect_uri parameter\", \"Lab Description\": \"The OAuth 2.0 implementation does not validate redirect_uri strictly, allowing an attacker to redirect authorization codes to their own domain. To solve: Manipulate the redirect_uri parameter to intercept an OAuth code and gain access as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login workflow via URL parameter\nDescription: The application fails to regenerate session tokens upon successful login. Instead, it allows user-supplied session IDs via the URL. An attacker can predefine a session ID, share it with a victim, and later take over the session post-login. The application reflects session identifiers in the URL without validation. To solve: hijack Carlos's session by forcing him to authenticate using an attacker-defined session ID and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login workflow via URL parameter\", \"Lab Description\": \"The application fails to regenerate session tokens upon successful login. Instead, it allows user-supplied session IDs via the URL. An attacker can predefine a session ID, share it with a victim, and later take over the session post-login. The application reflects session identifiers in the URL without validation. To solve: hijack Carlos's session by forcing him to authenticate using an attacker-defined session ID and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT token tampering via algorithm confusion in Authorization header\nDescription: The application uses JWTs for session authentication, but fails to enforce signature verification when the `alg` field is set to 'none'. It accepts unsigned tokens if the `alg` header is manipulated. The application trusts decoded claims blindly without validating token integrity. To solve: craft a JWT with 'none' algorithm and escalate privileges to impersonate Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering via algorithm confusion in Authorization header\", \"Lab Description\": \"The application uses JWTs for session authentication, but fails to enforce signature verification when the `alg` field is set to 'none'. It accepts unsigned tokens if the `alg` header is manipulated. The application trusts decoded claims blindly without validating token integrity. To solve: craft a JWT with 'none' algorithm and escalate privileges to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect in redirect_uri parameter allows account takeover\nDescription: The OAuth flow implemented in this application fails to validate the `redirect_uri` parameter strictly. An attacker can manipulate this parameter to point to a domain they control and steal the authorization code. The application exchanges this code for tokens without verifying the origin. To solve: intercept Carlos's authorization code and use it to access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in redirect_uri parameter allows account takeover\", \"Lab Description\": \"The OAuth flow implemented in this application fails to validate the `redirect_uri` parameter strictly. An attacker can manipulate this parameter to point to a domain they control and steal the authorization code. The application exchanges this code for tokens without verifying the origin. To solve: intercept Carlos's authorization code and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via 'none' algorithm in API authorization\nDescription: The application uses JSON Web Tokens (JWT) to authorize access to its internal API. However, it accepts tokens with the 'alg' field set to 'none', bypassing signature verification. The application trusts any JWT with a valid payload and does not validate its signature. To solve: Forge a JWT that impersonates the user 'carlos' and access the /api/account endpoint to retrieve their account information.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via 'none' algorithm in API authorization\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) to authorize access to its internal API. However, it accepts tokens with the 'alg' field set to 'none', bypassing signature verification. The application trusts any JWT with a valid payload and does not validate its signature. To solve: Forge a JWT that impersonates the user 'carlos' and access the /api/account endpoint to retrieve their account information.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration\nDescription: This lab integrates with an OAuth 2.0 provider using the implicit grant flow. However, it fails to validate the access token or issuer properly. The access_token is directly used as an authentication mechanism without validation. To solve: Obtain a forged access token for the victim 'carlos' and use it to log in via the /auth/callback endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"This lab integrates with an OAuth 2.0 provider using the implicit grant flow. However, it fails to validate the access token or issuer properly. The access_token is directly used as an authentication mechanism without validation. To solve: Obtain a forged access token for the victim 'carlos' and use it to log in via the /auth/callback endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect_uri manipulation leading to account takeover\nDescription: The application uses OAuth to delegate authentication to a third-party provider but improperly validates the redirect_uri parameter. The application fails to strictly match or validate trusted domains. To solve: hijack the OAuth flow and gain access to Carlosâ€™s account using a crafted redirect_uri.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation leading to account takeover\", \"Lab Description\": \"The application uses OAuth to delegate authentication to a third-party provider but improperly validates the redirect_uri parameter. The application fails to strictly match or validate trusted domains. To solve: hijack the OAuth flow and gain access to Carlosâ€™s account using a crafted redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion vulnerability\nDescription: The application uses JWTs for session handling and accepts unsigned tokens due to improper algorithm enforcement. The backend uses a vulnerable JWT library that accepts 'alg':'none'. To solve: forge an unsigned JWT to impersonate Carlos and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability\", \"Lab Description\": \"The application uses JWTs for session handling and accepts unsigned tokens due to improper algorithm enforcement. The backend uses a vulnerable JWT library that accepts 'alg':'none'. To solve: forge an unsigned JWT to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation using insecure token handling\nDescription: The application allows setting the session ID via URL query parameter. The server does not invalidate or regenerate the session after login. To solve: fix a session ID before login and trick Carlos into using it, then hijack his session post-login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation using insecure token handling\", \"Lab Description\": \"The application allows setting the session ID via URL query parameter. The server does not invalidate or regenerate the session after login. To solve: fix a session ID before login and trick Carlos into using it, then hijack his session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm manipulation in API auth header\nDescription: The application uses a JWT token for authentication, accepting the token from an Authorization: Bearer header. The backend insecurely supports the 'none' algorithm in JWT validation, allowing the signature to be bypassed. To solve: forge a token that grants admin access without knowing the original signing key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm manipulation in API auth header\", \"Lab Description\": \"The application uses a JWT token for authentication, accepting the token from an Authorization: Bearer header. The backend insecurely supports the 'none' algorithm in JWT validation, allowing the signature to be bypassed. To solve: forge a token that grants admin access without knowing the original signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit grant token leakage via Referer\nDescription: The application implements an OAuth 2.0 implicit grant flow that directly exposes access tokens in the URL fragment. When third-party JavaScript is loaded on redirect URIs, these tokens are leaked via Referer headers. To solve: extract an access token belonging to Carlos using Referer header leakage and reuse it to access protected resources.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit grant token leakage via Referer\", \"Lab Description\": \"The application implements an OAuth 2.0 implicit grant flow that directly exposes access tokens in the URL fragment. When third-party JavaScript is loaded on redirect URIs, these tokens are leaked via Referer headers. To solve: extract an access token belonging to Carlos using Referer header leakage and reuse it to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session tokens in login response\nDescription: The application sets a session cookie in a GET /set-session endpoint before login. The token is reused after successful login without regeneration. An attacker can fix a session ID and force the victim to authenticate within it. To solve: fix a session ID and log in as Carlos within that session to hijack the login state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens in login response\", \"Lab Description\": \"The application sets a session cookie in a GET /set-session endpoint before login. The token is reused after successful login without regeneration. An attacker can fix a session ID and force the victim to authenticate within it. To solve: fix a session ID and log in as Carlos within that session to hijack the login state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The login mechanism fails to assign a new session token after authentication. The application reuses the session token set prior to login. To solve: fixate a session for the victim user, log them in using social engineering or automation, then access their account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The login mechanism fails to assign a new session token after authentication. The application reuses the session token set prior to login. To solve: fixate a session for the victim user, log them in using social engineering or automation, then access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT tampering via algorithm confusion vulnerability in token validation\nDescription: The server accepts and trusts JWTs with the `alg` header set to `none`, allowing unsigned tokens to be accepted. The application trusts the payload without validating its integrity. To solve: craft a forged JWT token impersonating Carlos and use it to access /my-account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion vulnerability in token validation\", \"Lab Description\": \"The server accepts and trusts JWTs with the `alg` header set to `none`, allowing unsigned tokens to be accepted. The application trusts the payload without validating its integrity. To solve: craft a forged JWT token impersonating Carlos and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token manipulation in third-party login integration\nDescription: The application integrates with an OAuth provider but does not properly validate the `access_token` or `id_token` audience and issuer. It only parses the token payload to extract the email. To solve: forge a valid-looking token for Carlos with a fake OAuth issuer and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token manipulation in third-party login integration\", \"Lab Description\": \"The application integrates with an OAuth provider but does not properly validate the `access_token` or `id_token` audience and issuer. It only parses the token payload to extract the email. To solve: forge a valid-looking token for Carlos with a fake OAuth issuer and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login flow\nDescription: This labâ€™s login mechanism is vulnerable to session fixation. The application does not assign a new session identifier upon successful login. As a result, an attacker can set a session ID before login and reuse it. To solve the lab, gain access to Carlos's account using a pre-established session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This labâ€™s login mechanism is vulnerable to session fixation. The application does not assign a new session identifier upon successful login. As a result, an attacker can set a session ID before login and reuse it. To solve the lab, gain access to Carlos's account using a pre-established session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm\nDescription: The application uses JWT for authentication but fails to validate the token signature algorithm correctly. If the algorithm is changed to 'none', the server accepts the token as valid without verification. To solve the lab, forge a valid JWT for Carlos and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm\", \"Lab Description\": \"The application uses JWT for authentication but fails to validate the token signature algorithm correctly. If the algorithm is changed to 'none', the server accepts the token as valid without verification. To solve the lab, forge a valid JWT for Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation\nDescription: The OAuth implementation accepts arbitrary redirect URIs without proper whitelisting, allowing an attacker to intercept tokens. This can be abused to steal Carlos's OAuth access token. To solve the lab, leak his token and use it to access his account data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The OAuth implementation accepts arbitrary redirect URIs without proper whitelisting, allowing an attacker to intercept tokens. This can be abused to steal Carlos's OAuth access token. To solve the lab, leak his token and use it to access his account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The application does not invalidate or regenerate the session ID upon successful login. This enables an attacker to fix a session for a victim prior to authentication. The application reuses existing session tokens across user privilege states. To solve: Hijack Carlos's session after setting it yourself and gaining access to /my-account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application does not invalidate or regenerate the session ID upon successful login. This enables an attacker to fix a session for a victim prior to authentication. The application reuses existing session tokens across user privilege states. To solve: Hijack Carlos's session after setting it yourself and gaining access to /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via 'none' algorithm in token verification\nDescription: The application accepts JWT tokens for authentication and does not properly enforce algorithm constraints. It accepts unsigned tokens by trusting the 'none' algorithm. To solve: Modify your token to impersonate Carlos and access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in token verification\", \"Lab Description\": \"The application accepts JWT tokens for authentication and does not properly enforce algorithm constraints. It accepts unsigned tokens by trusting the 'none' algorithm. To solve: Modify your token to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect vulnerability in redirect_uri parameter\nDescription: The application improperly validates redirect URIs during OAuth flows, allowing an attacker to redirect tokens to arbitrary domains. The `redirect_uri` parameter is partially whitelisted, but allows open redirects via parameter manipulation. To solve: Steal Carlosâ€™s OAuth token and access his protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect vulnerability in redirect_uri parameter\", \"Lab Description\": \"The application improperly validates redirect URIs during OAuth flows, allowing an attacker to redirect tokens to arbitrary domains. The `redirect_uri` parameter is partially whitelisted, but allows open redirects via parameter manipulation. To solve: Steal Carlosâ€™s OAuth token and access his protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm in login token verification\nDescription: This lab's login system is vulnerable due to insecure JWT handling. The application accepts the 'alg' value from the header without verification. An attacker can tamper with the token's payload and set the 'alg' to 'none' to forge authentication. To solve: forge a valid JWT for user 'carlos' and access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm in login token verification\", \"Lab Description\": \"This lab's login system is vulnerable due to insecure JWT handling. The application accepts the 'alg' value from the header without verification. An attacker can tamper with the token's payload and set the 'alg' to 'none' to forge authentication. To solve: forge a valid JWT for user 'carlos' and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in session ID issued on login via Set-Cookie header\nDescription: This application allows session fixation through predictable session tokens. The server issues session IDs in a predictable manner and does not regenerate them after successful login. To solve: fix a session ID for 'carlos' before he logs in, and then reuse it to access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in session ID issued on login via Set-Cookie header\", \"Lab Description\": \"This application allows session fixation through predictable session tokens. The server issues session IDs in a predictable manner and does not regenerate them after successful login. To solve: fix a session ID for 'carlos' before he logs in, and then reuse it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri parameter\nDescription: This lab demonstrates an OAuth 2.0 misconfiguration where the `redirect_uri` parameter is insufficiently validated, allowing attackers to steal authorization codes. To solve: capture a valid OAuth code for 'carlos' using a malicious redirect URI and exchange it for a token to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri parameter\", \"Lab Description\": \"This lab demonstrates an OAuth 2.0 misconfiguration where the `redirect_uri` parameter is insufficiently validated, allowing attackers to steal authorization codes. To solve: capture a valid OAuth code for 'carlos' using a malicious redirect URI and exchange it for a token to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in login flow\nDescription: The application improperly handles session tokens during login. Instead of rotating the session ID after authentication, it preserves the existing token. The application allows an attacker to fix a session ID before the victim logs in. To solve: hijack Carlos's session using a fixed session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in login flow\", \"Lab Description\": \"The application improperly handles session tokens during login. Instead of rotating the session ID after authentication, it preserves the existing token. The application allows an attacker to fix a session ID before the victim logs in. To solve: hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT none algorithm bypass in access tokens\nDescription: The application uses JWT tokens for authorization but does not properly verify the signing algorithm. By setting the algorithm to 'none', attackers can forge valid tokens without the secret key. To solve: access Carlos's account page using a tampered JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in access tokens\", \"Lab Description\": \"The application uses JWT tokens for authorization but does not properly verify the signing algorithm. By setting the algorithm to 'none', attackers can forge valid tokens without the secret key. To solve: access Carlos's account page using a tampered JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect in callback URL\nDescription: The OAuth implementation fails to properly validate redirect URIs. Attackers can inject arbitrary URLs to steal authorization codes or tokens. To solve: hijack Carlosâ€™s OAuth flow by injecting a malicious redirect URI to capture his access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in callback URL\", \"Lab Description\": \"The OAuth implementation fails to properly validate redirect URIs. Attackers can inject arbitrary URLs to steal authorization codes or tokens. To solve: hijack Carlosâ€™s OAuth flow by injecting a malicious redirect URI to capture his access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stay logged in cookie brute-force vulnerability in login mechanism\nDescription: The application's 'Stay logged in' feature uses a predictable session cookie format. Upon successful login, the server issues a persistent cookie without strong randomness or HMAC validation. To solve: Brute-force a valid session cookie to impersonate Carlos and access his account page.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stay logged in cookie brute-force vulnerability in login mechanism\", \"Lab Description\": \"The application's 'Stay logged in' feature uses a predictable session cookie format. Upon successful login, the server issues a persistent cookie without strong randomness or HMAC validation. To solve: Brute-force a valid session cookie to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT signature validation bypass via 'none' algorithm in authentication token\nDescription: The application uses JWT for session management but fails to properly validate the token signature when the 'alg' field is set to 'none'. To solve: Forge a valid-looking token granting admin access and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature validation bypass via 'none' algorithm in authentication token\", \"Lab Description\": \"The application uses JWT for session management but fails to properly validate the token signature when the 'alg' field is set to 'none'. To solve: Forge a valid-looking token granting admin access and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth authorization code interception in redirect_uri misconfiguration\nDescription: The application uses OAuth for login, but the redirect_uri parameter is not properly validated, allowing attackers to intercept authorization codes. To solve: Intercept an authorization code for Carlos by injecting your own redirect URI and gain access to their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth authorization code interception in redirect_uri misconfiguration\", \"Lab Description\": \"The application uses OAuth for login, but the redirect_uri parameter is not properly validated, allowing attackers to intercept authorization codes. To solve: Intercept an authorization code for Carlos by injecting your own redirect URI and gain access to their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation vulnerability in login process\nDescription: The session management mechanism allows the session identifier to be set via a query parameter before login. The application fails to regenerate a new session ID after successful authentication, allowing attackers to fixate a session ID and impersonate a user after they log in. To solve: hijack Carlos's session after forcing him to log in via a session you control.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login process\", \"Lab Description\": \"The session management mechanism allows the session identifier to be set via a query parameter before login. The application fails to regenerate a new session ID after successful authentication, allowing attackers to fixate a session ID and impersonate a user after they log in. To solve: hijack Carlos's session after forcing him to log in via a session you control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering vulnerability in Authorization Header\nDescription: The application uses JSON Web Tokens (JWTs) for session management but fails to properly validate the signature algorithm. The backend accepts tokens using the 'none' algorithm, allowing an attacker to forge arbitrary tokens without a signature. To solve: tamper with the JWT to impersonate Carlos.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization Header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management but fails to properly validate the signature algorithm. The backend accepts tokens using the 'none' algorithm, allowing an attacker to forge arbitrary tokens without a signature. To solve: tamper with the JWT to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation in login flow\nDescription: The application implements OAuth for third-party authentication but fails to validate the redirect_uri parameter against a whitelist. This allows an attacker to abuse the login process and capture authorization codes or tokens. To solve: redirect the victim to a malicious callback, extract the token, and impersonate them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in login flow\", \"Lab Description\": \"The application implements OAuth for third-party authentication but fails to validate the redirect_uri parameter against a whitelist. This allows an attacker to abuse the login process and capture authorization codes or tokens. To solve: redirect the victim to a malicious callback, extract the token, and impersonate them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login flow in session middleware\nDescription: The application fails to regenerate the session ID after login, allowing an attacker to fix a session before authentication. The session ID remains unchanged after login, enabling session hijacking. To solve: hijack Carlosâ€™s session using a fixed session ID to access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login flow in session middleware\", \"Lab Description\": \"The application fails to regenerate the session ID after login, allowing an attacker to fix a session before authentication. The session ID remains unchanged after login, enabling session hijacking. To solve: hijack Carlosâ€™s session using a fixed session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature verification bypass using none algorithm in Authorization header\nDescription: The app uses JWT for session management but fails to validate the 'alg' claim properly. It accepts unsigned tokens when 'alg' is set to 'none'. To solve: forge a valid token for Carlos without signing it, and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass using none algorithm in Authorization header\", \"Lab Description\": \"The app uses JWT for session management but fails to validate the 'alg' claim properly. It accepts unsigned tokens when 'alg' is set to 'none'. To solve: forge a valid token for Carlos without signing it, and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation in OAuth provider callback\nDescription: The application integrates OAuth login via a third-party provider but improperly validates redirect URIs. It allows open redirection using the `redirect_uri` parameter. To solve: manipulate the `redirect_uri` to hijack the access token and access Carlos's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in OAuth provider callback\", \"Lab Description\": \"The application integrates OAuth login via a third-party provider but improperly validates redirect URIs. It allows open redirection using the `redirect_uri` parameter. To solve: manipulate the `redirect_uri` to hijack the access token and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation vulnerability in login flow\nDescription: The login process does not regenerate session identifiers after authentication. The application issues a session cookie before login, and the same session is reused post-authentication. This allows an attacker to fixate a session ID and trick a user into authenticating with it. To solve: hijack Carlos's session using a fixed session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login flow\", \"Lab Description\": \"The login process does not regenerate session identifiers after authentication. The application issues a session cookie before login, and the same session is reused post-authentication. This allows an attacker to fixate a session ID and trick a user into authenticating with it. To solve: hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering vulnerability in authentication header\nDescription: The application uses JWTs for authentication, but fails to verify the token signature when the algorithm is set to 'none'. This allows attackers to forge a valid token without needing the secret key. To solve: forge a token with 'none' algorithm to impersonate Carlos and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in authentication header\", \"Lab Description\": \"The application uses JWTs for authentication, but fails to verify the token signature when the algorithm is set to 'none'. This allows attackers to forge a valid token without needing the secret key. To solve: forge a token with 'none' algorithm to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Open redirect vulnerability in OAuth callback endpoint\nDescription: The OAuth flow accepts arbitrary redirect_uri values without strict validation. This allows attackers to capture tokens or force victim logins on attacker-controlled domains. To solve: craft a redirect_uri that steals Carlos's OAuth token and gain access to his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Open redirect vulnerability in OAuth callback endpoint\", \"Lab Description\": \"The OAuth flow accepts arbitrary redirect_uri values without strict validation. This allows attackers to capture tokens or force victim logins on attacker-controlled domains. To solve: craft a redirect_uri that steals Carlos's OAuth token and gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature verification bypass via 'none' algorithm in token validation logic\nDescription: The application uses JWTs for session management but fails to properly verify the token's signature. Specifically, it accepts tokens with the 'none' algorithm without validating their integrity. This flaw allows attackers to forge tokens and impersonate other users. To solve: Forge a JWT for the 'admin' user and access the admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass via 'none' algorithm in token validation logic\", \"Lab Description\": \"The application uses JWTs for session management but fails to properly verify the token's signature. Specifically, it accepts tokens with the 'none' algorithm without validating their integrity. This flaw allows attackers to forge tokens and impersonate other users. To solve: Forge a JWT for the 'admin' user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth 2.0 misconfiguration in redirect URI validation\nDescription: The application integrates with a third-party OAuth provider for authentication. However, it fails to properly validate the 'redirect_uri' parameter during the OAuth flow, allowing attackers to manipulate it and capture authorization codes meant for other users. To solve: Exploit the misconfiguration to obtain an access token for the 'admin' user and access the admin dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth 2.0 misconfiguration in redirect URI validation\", \"Lab Description\": \"The application integrates with a third-party OAuth provider for authentication. However, it fails to properly validate the 'redirect_uri' parameter during the OAuth flow, allowing attackers to manipulate it and capture authorization codes meant for other users. To solve: Exploit the misconfiguration to obtain an access token for the 'admin' user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session IDs in session management\nDescription: The application assigns session IDs in a predictable manner and does not regenerate them upon user login. This flaw allows attackers to set a known session ID for a victim and hijack their session after they log in. To solve: Set a known session ID, trick the victim into logging in, and use the same session ID to access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs in session management\", \"Lab Description\": \"The application assigns session IDs in a predictable manner and does not regenerate them upon user login. This flaw allows attackers to set a known session ID for a victim and hijack their session after they log in. To solve: Set a known session ID, trick the victim into logging in, and use the same session ID to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query batching attack in user enumeration\nDescription: The GraphQL endpoint processes batched queries sequentially without rate limiting. The application leaks timing differences in error responses. To solve: identify valid usernames through differential response analysis using batched authentication attempts.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query batching attack in user enumeration\", \"Lab Description\": \"The GraphQL endpoint processes batched queries sequentially without rate limiting. The application leaks timing differences in error responses. To solve: identify valid usernames through differential response analysis using batched authentication attempts.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through insecure redirect_uri\nDescription: The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to attacker-controlled domains. To solve: intercept the OAuth flow and redirect the authorization code to your exploit server.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through insecure redirect_uri\", \"Lab Description\": \"The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to attacker-controlled domains. To solve: intercept the OAuth flow and redirect the authorization code to your exploit server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via pre-set Session-ID in OAuth callback\nDescription: The OAuth implementation sets predictable session IDs before authentication. The application maintains the same session after privilege elevation. To solve: fixate a session ID before authentication and reuse it post-OAuth flow to gain admin access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via pre-set Session-ID in OAuth callback\", \"Lab Description\": \"The OAuth implementation sets predictable session IDs before authentication. The application maintains the same session after privilege elevation. To solve: fixate a session ID before authentication and reuse it post-OAuth flow to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification uses kid header to load keys from filesystem without proper sanitization. The application's debug endpoint leaks key paths. To solve: craft a JWT with kid pointing to known public key file and sign with corresponding private key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification uses kid header to load keys from filesystem without proper sanitization. The application's debug endpoint leaks key paths. To solve: craft a JWT with kid pointing to known public key file and sign with corresponding private key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass through state parameter manipulation in SAML flow\nDescription: The SAML implementation improperly validates state parameters during MFA initiation. The application skips MFA when receiving crafted state values. To solve: intercept SAML response and modify state parameter to known bypass value.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass through state parameter manipulation in SAML flow\", \"Lab Description\": \"The SAML implementation improperly validates state parameters during MFA initiation. The application skips MFA when receiving crafted state values. To solve: intercept SAML response and modify state parameter to known bypass value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation improperly trusts the jku header to fetch verification keys. The application doesn't restrict allowed domains for key URLs. To solve: host a malicious public key and craft a JWT pointing to it with admin claims.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation improperly trusts the jku header to fetch verification keys. The application doesn't restrict allowed domains for key URLs. To solve: host a malicious public key and craft a JWT pointing to it with admin claims.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through open redirect in mobile client\nDescription: The mobile OAuth flow fails to validate redirect URIs properly when handling deep links. The application leaks access tokens to arbitrary domains via 302 redirects. To solve: chain an open redirect with the OAuth callback to intercept the token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through open redirect in mobile client\", \"Lab Description\": \"The mobile OAuth flow fails to validate redirect URIs properly when handling deep links. The application leaks access tokens to arbitrary domains via 302 redirects. To solve: chain an open redirect with the OAuth callback to intercept the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking through WebSocket authentication bypass\nDescription: The WebSocket upgrade request reuses HTTP session cookies without revalidation. The application maintains WebSocket connections after session expiration. To solve: hijack active WebSocket connection by replaying captured cookie during upgrade.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking through WebSocket authentication bypass\", \"Lab Description\": \"The WebSocket upgrade request reuses HTTP session cookies without revalidation. The application maintains WebSocket connections after session expiration. To solve: hijack active WebSocket connection by replaying captured cookie during upgrade.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON parsing flaw\nDescription: The JWT verification improperly handles nested JSON structures in claims. The application's deep object merging overwrites security controls. To solve: inject admin privileges through crafted nested claims in a valid JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON parsing flaw\", \"Lab Description\": \"The JWT verification improperly handles nested JSON structures in claims. The application's deep object merging overwrites security controls. To solve: inject admin privileges through crafted nested claims in a valid JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping through parameter pollution\nDescription: The OAuth token exchange endpoint is vulnerable to HTTP parameter pollution. The application uses the first token parameter while logging the last. To solve: swap tokens during the exchange flow to gain elevated privileges.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping through parameter pollution\", \"Lab Description\": \"The OAuth token exchange endpoint is vulnerable to HTTP parameter pollution. The application uses the first token parameter while logging the last. To solve: swap tokens during the exchange flow to gain elevated privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through GraphQL batch query caching\nDescription: The GraphQL endpoint caches session tokens improperly when processing batch queries. The application reuses the first valid session for subsequent operations. To solve: fixate session through batch query and hijack victim's authenticated state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through GraphQL batch query caching\", \"Lab Description\": \"The GraphQL endpoint caches session tokens improperly when processing batch queries. The application reuses the first valid session for subsequent operations. To solve: fixate session through batch query and hijack victim's authenticated state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via leaked debug endpoint\nDescription: The application exposes a debug endpoint that leaks the public key used for JWT verification. The JWT implementation is vulnerable to algorithm confusion attacks. To solve: obtain the public key, craft an HS256-signed token with admin claims, and bypass authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via leaked debug endpoint\", \"Lab Description\": \"The application exposes a debug endpoint that leaks the public key used for JWT verification. The JWT implementation is vulnerable to algorithm confusion attacks. To solve: obtain the public key, craft an HS256-signed token with admin claims, and bypass authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA\nDescription: The OAuth implementation in the Single Page Application has overly permissive CORS headers. The application leaks access tokens to arbitrary origins through XHR requests. To solve: craft a malicious page that steals OAuth tokens via CORS and uses them to access protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA\", \"Lab Description\": \"The OAuth implementation in the Single Page Application has overly permissive CORS headers. The application leaks access tokens to arbitrary origins through XHR requests. To solve: craft a malicious page that steals OAuth tokens via CORS and uses them to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake parameter injection\nDescription: The WebSocket upgrade process improperly handles session identifiers passed as URL parameters. The application accepts WebSocket session IDs through query strings without validation. To solve: fixate a session ID through crafted WebSocket URL and hijack victim's authenticated connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake parameter injection\", \"Lab Description\": \"The WebSocket upgrade process improperly handles session identifiers passed as URL parameters. The application accepts WebSocket session IDs through query strings without validation. To solve: fixate a session ID through crafted WebSocket URL and hijack victim's authenticated connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering vulnerability in Authorization Header\nDescription: The application uses JWT tokens for API authorization, but the server fails to validate token signatures properly. The token's algorithm is set to 'none', and the backend fails to enforce cryptographic verification. To solve: forge a valid JWT to access the admin resource and retrieve sensitive user data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens for API authorization, but the server fails to validate token signatures properly. The token's algorithm is set to 'none', and the backend fails to enforce cryptographic verification. To solve: forge a valid JWT to access the admin resource and retrieve sensitive user data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The web app reuses pre-login session IDs after authentication, without regenerating them. An attacker can pre-set a known session ID and then trick a victim into logging in using that same ID. To solve: hijack Carlos's session by setting a fixed session ID before login and access his account page post-authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The web app reuses pre-login session IDs after authentication, without regenerating them. An attacker can pre-set a known session ID and then trick a victim into logging in using that same ID. To solve: hijack Carlos's session by setting a fixed session ID before login and access his account page post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth redirect_uri misconfiguration in OAuth callback endpoint\nDescription: The OAuth implementation lacks strict validation of the redirect_uri parameter, allowing open redirect-based session hijacking. The application trusts any domain containing the correct base string. To solve: craft a malicious authorization URL that captures a valid OAuth token for Carlosâ€™s session.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect_uri misconfiguration in OAuth callback endpoint\", \"Lab Description\": \"The OAuth implementation lacks strict validation of the redirect_uri parameter, allowing open redirect-based session hijacking. The application trusts any domain containing the correct base string. To solve: craft a malicious authorization URL that captures a valid OAuth token for Carlosâ€™s session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT authentication bypass via 'none' algorithm in Authorization header\nDescription: The backend uses JWTs for session management and relies on the 'alg' field of the JWT to determine verification logic. The server is misconfigured to accept unsigned tokens by trusting the 'none' algorithm. The application grants access to authenticated endpoints based solely on the decoded payload. To solve: craft a tampered token to access Carlos's account by bypassing signature verification.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm in Authorization header\", \"Lab Description\": \"The backend uses JWTs for session management and relies on the 'alg' field of the JWT to determine verification logic. The server is misconfigured to accept unsigned tokens by trusting the 'none' algorithm. The application grants access to authenticated endpoints based solely on the decoded payload. To solve: craft a tampered token to access Carlos's account by bypassing signature verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in cookie-based authentication on login route\nDescription: This application uses a fixed `sessionID` value that is issued prior to authentication and is not regenerated upon login. The session ID is accepted from the client and trusted server-side, leading to session fixation. To solve: pre-fixate a session ID and trick the server into accepting it as Carlosâ€™s session after login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in cookie-based authentication on login route\", \"Lab Description\": \"This application uses a fixed `sessionID` value that is issued prior to authentication and is not regenerated upon login. The session ID is accepted from the client and trusted server-side, leading to session fixation. To solve: pre-fixate a session ID and trick the server into accepting it as Carlosâ€™s session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri trust chain\nDescription: This application integrates a third-party OAuth provider. However, it fails to validate the redirect_uri parameter correctly, allowing an attacker to supply an arbitrary value. This allows leaking the access token to an attacker-controlled domain. To solve: exploit the misconfigured OAuth flow and extract the access_token for Carlosâ€™s account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri trust chain\", \"Lab Description\": \"This application integrates a third-party OAuth provider. However, it fails to validate the redirect_uri parameter correctly, allowing an attacker to supply an arbitrary value. This allows leaking the access token to an attacker-controlled domain. To solve: exploit the misconfigured OAuth flow and extract the access_token for Carlosâ€™s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via algorithm confusion in Authorization header\nDescription: This lab's API uses JWTs for authentication, but fails to enforce algorithm verification properly. The application accepts the 'alg' field in the token header without validating it against a whitelist. An attacker can modify the token's algorithm to 'none' and forge authentication tokens. The application uses these tokens for REST API access to protected resources. To solve: forge a valid admin token using algorithm tampering to access the /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in Authorization header\", \"Lab Description\": \"This lab's API uses JWTs for authentication, but fails to enforce algorithm verification properly. The application accepts the 'alg' field in the token header without validating it against a whitelist. An attacker can modify the token's algorithm to 'none' and forge authentication tokens. The application uses these tokens for REST API access to protected resources. To solve: forge a valid admin token using algorithm tampering to access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow hijack via open redirect in redirect_uri\nDescription: This lab simulates a web application using OAuth 2.0 for authentication through a third-party provider. The application improperly validates redirect URIs, allowing arbitrary open redirect manipulation. An attacker can poison the redirect_uri parameter to capture a victim's access token. To solve: craft a malicious OAuth URL to leak Carlos's token and use it to access the protected resource.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow hijack via open redirect in redirect_uri\", \"Lab Description\": \"This lab simulates a web application using OAuth 2.0 for authentication through a third-party provider. The application improperly validates redirect URIs, allowing arbitrary open redirect manipulation. An attacker can poison the redirect_uri parameter to capture a victim's access token. To solve: craft a malicious OAuth URL to leak Carlos's token and use it to access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow via preset session cookie\nDescription: This lab's login process reuses the session ID that was initially assigned before authentication. The application fails to regenerate a session upon successful login, allowing session fixation. An attacker can pre-assign a session ID to a victim and hijack the session after login. To solve: fixate Carlosâ€™s session ID, then reuse it to access his /dashboard page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow via preset session cookie\", \"Lab Description\": \"This lab's login process reuses the session ID that was initially assigned before authentication. The application fails to regenerate a session upon successful login, allowing session fixation. An attacker can pre-assign a session ID to a victim and hijack the session after login. To solve: fixate Carlosâ€™s session ID, then reuse it to access his /dashboard page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass using 'none' algorithm in authentication middleware\nDescription: The application uses JWTs for session management but does not validate the signature algorithm securely. The token is decoded without verifying the signature if the 'alg' field is set to 'none'. The application blindly trusts unsigned JWTs. To solve: Forge a valid admin session by tampering with the JWT payload.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm in authentication middleware\", \"Lab Description\": \"The application uses JWTs for session management but does not validate the signature algorithm securely. The token is decoded without verifying the signature if the 'alg' field is set to 'none'. The application blindly trusts unsigned JWTs. To solve: Forge a valid admin session by tampering with the JWT payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in login flow using pre-authenticated session IDs\nDescription: The application does not regenerate session tokens upon successful login, allowing an attacker to pre-assign a session to the victim. The attacker forces the victim to authenticate using a known session ID. To solve: Fix a session ID for Carlos, get him to log in, and reuse that session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login flow using pre-authenticated session IDs\", \"Lab Description\": \"The application does not regenerate session tokens upon successful login, allowing an attacker to pre-assign a session to the victim. The attacker forces the victim to authenticate using a known session ID. To solve: Fix a session ID for Carlos, get him to log in, and reuse that session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit grant token leakage via referrer\nDescription: The application uses OAuth2 Implicit Grant flow with the access token exposed in the URL fragment. Due to improper redirect URI configuration, the token leaks through referrer headers when redirected to third-party content. To solve: Capture Carlos's access token from a leaked referrer and use it to access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit grant token leakage via referrer\", \"Lab Description\": \"The application uses OAuth2 Implicit Grant flow with the access token exposed in the URL fragment. Due to improper redirect URI configuration, the token leaks through referrer headers when redirected to third-party content. To solve: Capture Carlos's access token from a leaked referrer and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering Authentication bypass in API endpoint\nDescription: The backend API uses JWTs to authenticate users, but fails to properly verify the signing algorithm. The application trusts the 'alg' value in the token header and skips verification if it's set to 'none'. To solve: Access the admin endpoint using a forged token that impersonates the user 'carlos'.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering Authentication bypass in API endpoint\", \"Lab Description\": \"The backend API uses JWTs to authenticate users, but fails to properly verify the signing algorithm. The application trusts the 'alg' value in the token header and skips verification if it's set to 'none'. To solve: Access the admin endpoint using a forged token that impersonates the user 'carlos'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The session management mechanism reuses a client-supplied session ID even after successful authentication. The application does not regenerate session tokens upon login. To solve: Inject a known session ID and get the victim (Carlos) to log in using that ID, then hijack the session and access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The session management mechanism reuses a client-supplied session ID even after successful authentication. The application does not regenerate session tokens upon login. To solve: Inject a known session ID and get the victim (Carlos) to log in using that ID, then hijack the session and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect URI\nDescription: The OAuth implementation fails to validate the redirect URI strictly, allowing open redirection and leakage of the authorization code. An attacker can inject a malicious URI with their own domain. To solve: Intercept the OAuth code for Carlos and exchange it for an access token to access the /api/userinfo endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI\", \"Lab Description\": \"The OAuth implementation fails to validate the redirect URI strictly, allowing open redirection and leakage of the authorization code. An attacker can inject a malicious URI with their own domain. To solve: Intercept the OAuth code for Carlos and exchange it for an access token to access the /api/userinfo endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'none' algorithm authentication bypass in login API\nDescription: This lab uses JSON Web Tokens (JWTs) to manage user sessions. The backend fails to validate the `alg` field properly, accepting unsigned tokens when `alg` is set to `none`. The application returns a JWT after login and uses it for accessing protected endpoints. To solve: tamper with the JWT to impersonate Carlos and access his account without valid credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'none' algorithm authentication bypass in login API\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWTs) to manage user sessions. The backend fails to validate the `alg` field properly, accepting unsigned tokens when `alg` is set to `none`. The application returns a JWT after login and uses it for accessing protected endpoints. To solve: tamper with the JWT to impersonate Carlos and access his account without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in login flow via GET parameter\nDescription: This lab implements session management using a custom session ID passed as a URL parameter and stored as a cookie. However, the session is not regenerated after login, making it vulnerable to session fixation. To solve: set a session ID for Carlos before login and hijack his session after he authenticates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login flow via GET parameter\", \"Lab Description\": \"This lab implements session management using a custom session ID passed as a URL parameter and stored as a cookie. However, the session is not regenerated after login, making it vulnerable to session fixation. To solve: set a session ID for Carlos before login and hijack his session after he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token reuse due to lack of client binding\nDescription: This lab involves an OAuth flow where the access token is not bound to a specific client application. A malicious actor can reuse a token issued to one client on another. The application does not validate the `aud` or `client_id`. To solve: reuse an access token issued to your app to impersonate Carlos on the victim app.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token reuse due to lack of client binding\", \"Lab Description\": \"This lab involves an OAuth flow where the access token is not bound to a specific client application. A malicious actor can reuse a token issued to one client on another. The application does not validate the `aud` or `client_id`. To solve: reuse an access token issued to your app to impersonate Carlos on the victim app.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The application initializes a session ID before user authentication and fails to regenerate it after login. The session ID remains fixed, allowing an attacker to hijack authenticated sessions. The application trusts any valid session ID. To solve: Hijack Carlos's authenticated session by forcing him to reuse your crafted session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application initializes a session ID before user authentication and fails to regenerate it after login. The session ID remains fixed, allowing an attacker to hijack authenticated sessions. The application trusts any valid session ID. To solve: Hijack Carlos's authenticated session by forcing him to reuse your crafted session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature verification bypass using 'none' algorithm\nDescription: This application uses JWT for session management but fails to validate the signature algorithm securely. If the 'alg' field in the JWT header is set to 'none', the server skips signature verification. To solve: Forge a JWT with 'alg':'none' and escalate privileges to access Carlos's account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass using 'none' algorithm\", \"Lab Description\": \"This application uses JWT for session management but fails to validate the signature algorithm securely. If the 'alg' field in the JWT header is set to 'none', the server skips signature verification. To solve: Forge a JWT with 'alg':'none' and escalate privileges to access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leak in redirect_uri via fragment mismanagement\nDescription: The app uses OAuth2 with implicit flow for third-party login. It misuses the redirect_uri allowing an attacker to inject a malicious domain. The access token is returned in the fragment portion of the URI and can be exfiltrated. To solve: Extract Carlos's token by crafting a redirect_uri to a domain under your control.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leak in redirect_uri via fragment mismanagement\", \"Lab Description\": \"The app uses OAuth2 with implicit flow for third-party login. It misuses the redirect_uri allowing an attacker to inject a malicious domain. The access token is returned in the fragment portion of the URI and can be exfiltrated. To solve: Extract Carlos's token by crafting a redirect_uri to a domain under your control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion vulnerability in login authentication\nDescription: The application uses JWT for authentication and is vulnerable due to insecure algorithm handling. It accepts tokens signed with 'none' algorithm if the header is tampered. The application does not verify the integrity of the JWT properly, allowing attackers to forge tokens. To solve: forge a valid token to impersonate the user 'admin' and access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login authentication\", \"Lab Description\": \"The application uses JWT for authentication and is vulnerable due to insecure algorithm handling. It accepts tokens signed with 'none' algorithm if the header is tampered. The application does not verify the integrity of the JWT properly, allowing attackers to forge tokens. To solve: forge a valid token to impersonate the user 'admin' and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in third-party redirect\nDescription: The application uses OAuth for login via a third-party provider, but after authentication, it leaks the access token through the Referer header when redirecting to a third-party domain. This token can be captured by any attacker-controlled site in the redirect chain. To solve: capture Carlos's access token and use it to access their profile endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in third-party redirect\", \"Lab Description\": \"The application uses OAuth for login via a third-party provider, but after authentication, it leaks the access token through the Referer header when redirecting to a third-party domain. This token can be captured by any attacker-controlled site in the redirect chain. To solve: capture Carlos's access token and use it to access their profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login redirect\nDescription: This application initializes a session before login and uses the same session ID post-login. If an attacker can set a session ID for a victim before they log in, the attacker can hijack the session. To solve: force Carlos to use a session ID you control, then log in as Carlos and access his profile with your fixed session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login redirect\", \"Lab Description\": \"This application initializes a session before login and uses the same session ID post-login. If an attacker can set a session ID for a victim before they log in, the attacker can hijack the session. To solve: force Carlos to use a session ID you control, then log in as Carlos and access his profile with your fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature none algorithm tampering in session authentication\nDescription: The application uses JWT tokens to manage session state, but fails to validate the token signature algorithm properly. The backend accepts 'none' as a valid algorithm, bypassing token integrity verification. To solve: Forge a valid JWT token for the user 'carlos' and access his account page without needing credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature none algorithm tampering in session authentication\", \"Lab Description\": \"The application uses JWT tokens to manage session state, but fails to validate the token signature algorithm properly. The backend accepts 'none' as a valid algorithm, bypassing token integrity verification. To solve: Forge a valid JWT token for the user 'carlos' and access his account page without needing credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration with implicit grant leaking tokens via redirect\nDescription: The application uses OAuth with the implicit flow and incorrectly allows redirect URIs to be manipulated, causing access tokens to be leaked to third-party domains. To solve: Capture Carlosâ€™s access token and use it to access his protected profile page via the API.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with implicit grant leaking tokens via redirect\", \"Lab Description\": \"The application uses OAuth with the implicit flow and incorrectly allows redirect URIs to be manipulated, causing access tokens to be leaked to third-party domains. To solve: Capture Carlosâ€™s access token and use it to access his protected profile page via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unvalidated session token reuse\nDescription: The login endpoint fails to issue a new session identifier upon successful authentication, allowing an attacker to pre-define a session ID and force it onto a victim. To solve: Fixate Carlos's session ID, get him to log in using it, and hijack the session by accessing his My Account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session token reuse\", \"Lab Description\": \"The login endpoint fails to issue a new session identifier upon successful authentication, allowing an attacker to pre-define a session ID and force it onto a victim. To solve: Fixate Carlos's session ID, get him to log in using it, and hijack the session by accessing his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allows session fixation attack in login flow\nDescription: The application implements OAuth 2.0 for third-party authentication, but fails to regenerate the session ID after login. An attacker can fixate a session ID and force the victim to authenticate with it. The application reuses the original session after OAuth login. To solve: Hijack Carlosâ€™s session by initiating login via a pre-fixed session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows session fixation attack in login flow\", \"Lab Description\": \"The application implements OAuth 2.0 for third-party authentication, but fails to regenerate the session ID after login. An attacker can fixate a session ID and force the victim to authenticate with it. The application reuses the original session after OAuth login. To solve: Hijack Carlosâ€™s session by initiating login via a pre-fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token tampering with 'none' algorithm in Authorization header\nDescription: The application uses JWTs to control access to user accounts. It does not validate the algorithm field when decoding JWTs. Exploiting this, attackers can replace the token algorithm with 'none' and forge admin tokens. To solve: Modify the token to impersonate Carlos and access /my-account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering with 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs to control access to user accounts. It does not validate the algorithm field when decoding JWTs. Exploiting this, attackers can replace the token algorithm with 'none' and forge admin tokens. To solve: Modify the token to impersonate Carlos and access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Verbose logging leaks API key allowing unauthorized REST API access\nDescription: The REST API backend logs full request headers including Authorization. The verbose debug output is exposed publicly via /logs endpoint. The attacker can extract Carlosâ€™s API key from logs and reuse it for privilege escalation. To solve: Extract and reuse Carlosâ€™s key to access restricted resource.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Verbose logging leaks API key allowing unauthorized REST API access\", \"Lab Description\": \"The REST API backend logs full request headers including Authorization. The verbose debug output is exposed publicly via /logs endpoint. The attacker can extract Carlosâ€™s API key from logs and reuse it for privilege escalation. To solve: Extract and reuse Carlosâ€™s key to access restricted resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: REST-based Session Fixation in Login Flow\nDescription: This lab's REST API implements insecure session handling that enables session fixation. The application generates a session ID before login, which is then reused post-authentication. To solve: Hijack a valid user session after fixing the session identifier in the victim's browser.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"REST-based Session Fixation in Login Flow\", \"Lab Description\": \"This lab's REST API implements insecure session handling that enables session fixation. The application generates a session ID before login, which is then reused post-authentication. To solve: Hijack a valid user session after fixing the session identifier in the victim's browser.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Authentication Bypass via None Algorithm\nDescription: This lab uses JWTs for API authentication but improperly supports the `none` algorithm. This allows an attacker to forge a valid token without signing it. To solve: Generate a forged JWT for the admin user and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via None Algorithm\", \"Lab Description\": \"This lab uses JWTs for API authentication but improperly supports the `none` algorithm. This allows an attacker to forge a valid token without signing it. To solve: Generate a forged JWT for the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Redirection Misconfiguration in Authorization Server\nDescription: This lab demonstrates an insecure OAuth implementation where the redirect URI is not properly validated. The attacker can intercept the authorization code and exchange it for a token. To solve: Hijack Carlosâ€™s OAuth token by injecting a malicious redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirection Misconfiguration in Authorization Server\", \"Lab Description\": \"This lab demonstrates an insecure OAuth implementation where the redirect URI is not properly validated. The attacker can intercept the authorization code and exchange it for a token. To solve: Hijack Carlosâ€™s OAuth token by injecting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Algorithm Confusion in Token Verification\nDescription: The application uses JSON Web Tokens (JWTs) for session management but improperly handles the 'alg' field in the token header. Instead of verifying the signature with a secret key, it trusts tokens with 'none' as the algorithm and accepts them without verification. The application grants access if a valid token for 'carlos' is submitted. To solve: Forge a token with alg set to 'none' and impersonate Carlos.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Token Verification\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management but improperly handles the 'alg' field in the token header. Instead of verifying the signature with a secret key, it trusts tokens with 'none' as the algorithm and accepts them without verification. The application grants access if a valid token for 'carlos' is submitted. To solve: Forge a token with alg set to 'none' and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in Login Endpoint\nDescription: This application generates a session cookie before login and doesn't renew it post-authentication. This allows an attacker to pre-set a valid session cookie and trick a victim into authenticating using that session. The attacker can then hijack the session to gain access. To solve: Fixate Carlos's session ID, make him log in, then use the same session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Endpoint\", \"Lab Description\": \"This application generates a session cookie before login and doesn't renew it post-authentication. This allows an attacker to pre-set a valid session cookie and trick a victim into authenticating using that session. The attacker can then hijack the session to gain access. To solve: Fixate Carlos's session ID, make him log in, then use the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI Validation\nDescription: The application uses OAuth 2.0 for authentication, but its redirect_uri parameter validation is flawed. It accepts subdomain-based open redirect patterns, allowing attackers to steal authorization codes. To solve: Construct a malicious redirect_uri that leads to a domain you control, extract Carlos's authorization code, and complete the OAuth login flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application uses OAuth 2.0 for authentication, but its redirect_uri parameter validation is flawed. It accepts subdomain-based open redirect patterns, allowing attackers to steal authorization codes. To solve: Construct a malicious redirect_uri that leads to a domain you control, extract Carlos's authorization code, and complete the OAuth login flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via algorithm confusion in login API\nDescription: The application uses JSON Web Tokens (JWT) for session management but fails to enforce secure verification of token signatures. The login endpoint signs JWTs with HMAC using a shared secret, but the backend accepts 'none' as the algorithm, bypassing signature validation entirely. To solve: Forge a valid JWT that grants access to Carlosâ€™s account without needing valid credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via algorithm confusion in login API\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management but fails to enforce secure verification of token signatures. The login endpoint signs JWTs with HMAC using a shared secret, but the backend accepts 'none' as the algorithm, bypassing signature validation entirely. To solve: Forge a valid JWT that grants access to Carlosâ€™s account without needing valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID\nDescription: The application issues session cookies using a sequential session ID pattern during unauthenticated visits. Upon login, the session ID is not regenerated. An attacker can set a victimâ€™s session ID ahead of login and hijack the authenticated session. To solve: Fix Carlosâ€™s session ID before he logs in, then hijack his session after he authenticates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The application issues session cookies using a sequential session ID pattern during unauthenticated visits. Upon login, the session ID is not regenerated. An attacker can set a victimâ€™s session ID ahead of login and hijack the authenticated session. To solve: Fix Carlosâ€™s session ID before he logs in, then hijack his session after he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leading to open redirect trust abuse\nDescription: The application uses a third-party OAuth provider to handle login via redirects. The redirect_uri is not validated securely, allowing attackers to inject arbitrary URLs and harvest authorization codes. To solve: Trick the OAuth flow to leak Carlosâ€™s token and use it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to open redirect trust abuse\", \"Lab Description\": \"The application uses a third-party OAuth provider to handle login via redirects. The redirect_uri is not validated securely, allowing attackers to inject arbitrary URLs and harvest authorization codes. To solve: Trick the OAuth flow to leak Carlosâ€™s token and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via algorithm confusion\nDescription: This lab's login system uses JWTs for session management and accepts unsigned tokens due to a flawed algorithm check. The application fails to validate the algorithm used in the JWT header. To solve: Forge a JWT token that grants access to Carlos's account using algorithm confusion.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion\", \"Lab Description\": \"This lab's login system uses JWTs for session management and accepts unsigned tokens due to a flawed algorithm check. The application fails to validate the algorithm used in the JWT header. To solve: Forge a JWT token that grants access to Carlos's account using algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via insecure session handling\nDescription: This lab's session management system is vulnerable to session fixation. It reuses session IDs across login flows and does not regenerate tokens upon authentication. The application accepts pre-assigned session cookies before login. To solve: Fixate a session and force Carlos to use it, then access /my-account with the same session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure session handling\", \"Lab Description\": \"This lab's session management system is vulnerable to session fixation. It reuses session IDs across login flows and does not regenerate tokens upon authentication. The application accepts pre-assigned session cookies before login. To solve: Fixate a session and force Carlos to use it, then access /my-account with the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect manipulation leading to account takeover\nDescription: This lab's OAuth flow contains an open redirect flaw on the redirect_uri parameter. The application trusts user-supplied redirect URIs without proper validation, enabling account takeover via third-party OAuth provider token reuse. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth token and use it to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect manipulation leading to account takeover\", \"Lab Description\": \"This lab's OAuth flow contains an open redirect flaw on the redirect_uri parameter. The application trusts user-supplied redirect URIs without proper validation, enabling account takeover via third-party OAuth provider token reuse. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth token and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation leads to MFA bypass\nDescription: The application incorrectly allows session identifiers to persist across authentication states, including 2FA. Once a valid user completes login, the session ID issued before 2FA is reused without validation. The application trusts the existing session cookie to grant full access after 2FA step, without re-verifying ownership. To solve: Use session fixation to access Carlos's account without completing MFA.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation leads to MFA bypass\", \"Lab Description\": \"The application incorrectly allows session identifiers to persist across authentication states, including 2FA. Once a valid user completes login, the session ID issued before 2FA is reused without validation. The application trusts the existing session cookie to grant full access after 2FA step, without re-verifying ownership. To solve: Use session fixation to access Carlos's account without completing MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via 'none' algorithm\nDescription: The application uses JWT tokens for session management but fails to validate the cryptographic algorithm used. If the 'alg' field in the JWT header is set to 'none', the application accepts unsigned tokens. To solve: Forge a JWT token with 'none' algorithm to impersonate Carlos and access the protected account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm\", \"Lab Description\": \"The application uses JWT tokens for session management but fails to validate the cryptographic algorithm used. If the 'alg' field in the JWT header is set to 'none', the application accepts unsigned tokens. To solve: Forge a JWT token with 'none' algorithm to impersonate Carlos and access the protected account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect\nDescription: This lab demonstrates an OAuth misconfiguration where the 'redirect_uri' parameter is not properly validated during the authorization flow. The application allows arbitrary redirect URIs, enabling token theft via open redirection. To solve: Intercept Carlos's OAuth authorization and redirect the token to your own server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the 'redirect_uri' parameter is not properly validated during the authorization flow. The application allows arbitrary redirect URIs, enabling token theft via open redirection. To solve: Intercept Carlos's OAuth authorization and redirect the token to your own server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token none algorithm bypass in API auth flow\nDescription: This lab's REST API uses JWT tokens for authentication. The server does not validate the JWT signature when the algorithm is set to 'none'. The application processes JWTs without verifying the integrity of the claims. To solve: forge a JWT for the user 'carlos' and access the protected API endpoint /api/account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token none algorithm bypass in API auth flow\", \"Lab Description\": \"This lab's REST API uses JWT tokens for authentication. The server does not validate the JWT signature when the algorithm is set to 'none'. The application processes JWTs without verifying the integrity of the claims. To solve: forge a JWT for the user 'carlos' and access the protected API endpoint /api/account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable token reuse\nDescription: The application uses session tokens in URL parameters and fails to regenerate the session upon authentication. An attacker can fix a session identifier and trick the victim into logging in with it, gaining access to their authenticated session. To solve: hijack Carlosâ€™s session by pre-setting a known session token before login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable token reuse\", \"Lab Description\": \"The application uses session tokens in URL parameters and fails to regenerate the session upon authentication. An attacker can fix a session identifier and trick the victim into logging in with it, gaining access to their authenticated session. To solve: hijack Carlosâ€™s session by pre-setting a known session token before login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration with open redirect and no state parameter\nDescription: This lab demonstrates an OAuth implementation that fails to validate the 'state' parameter, exposing it to CSRF and token theft via open redirection. The application blindly trusts the redirect URI and leaks access tokens. To solve: craft a malicious authorization request that sends Carlosâ€™s token to your controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and no state parameter\", \"Lab Description\": \"This lab demonstrates an OAuth implementation that fails to validate the 'state' parameter, exposing it to CSRF and token theft via open redirection. The application blindly trusts the redirect URI and leaks access tokens. To solve: craft a malicious authorization request that sends Carlosâ€™s token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion in token verification endpoint\nDescription: This lab implements a stateless authentication mechanism using JSON Web Tokens (JWTs). However, the server is vulnerable to an algorithm confusion flaw due to improper handling of the JWT 'alg' field. The application accepts tokens signed using both 'HS256' and 'RS256', using a single public key to verify all incoming tokens. To solve the lab, forge a valid admin token and access the administrative panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification endpoint\", \"Lab Description\": \"This lab implements a stateless authentication mechanism using JSON Web Tokens (JWTs). However, the server is vulnerable to an algorithm confusion flaw due to improper handling of the JWT 'alg' field. The application accepts tokens signed using both 'HS256' and 'RS256', using a single public key to verify all incoming tokens. To solve the lab, forge a valid admin token and access the administrative panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via insecure cookie reassignment\nDescription: This lab's session management is flawed. The application does not regenerate the session ID upon successful login, allowing an attacker to fix the victim's session ID prior to authentication. The application accepts a session ID as a query parameter and reflects it into a cookie. To solve the lab, fix a session ID for Carlos and trick him into logging in, then use the same session ID to access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure cookie reassignment\", \"Lab Description\": \"This lab's session management is flawed. The application does not regenerate the session ID upon successful login, allowing an attacker to fix the victim's session ID prior to authentication. The application accepts a session ID as a query parameter and reflects it into a cookie. To solve the lab, fix a session ID for Carlos and trick him into logging in, then use the same session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow token leakage via referrer header\nDescription: This lab demonstrates how improper use of the OAuth 2.0 implicit flow results in access token leakage via the HTTP Referer header. The vulnerable application redirects users with an access token in the URL fragment. An attacker-controlled site can trick authenticated users into visiting a resource which leaks the token in the Referer header. To solve the lab, steal Carlos's access token and access the /private-data endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referrer header\", \"Lab Description\": \"This lab demonstrates how improper use of the OAuth 2.0 implicit flow results in access token leakage via the HTTP Referer header. The vulnerable application redirects users with an access token in the URL fragment. An attacker-controlled site can trick authenticated users into visiting a resource which leaks the token in the Referer header. To solve the lab, steal Carlos's access token and access the /private-data endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm bypass in REST API login flow\nDescription: The application uses JSON Web Tokens (JWTs) to manage sessions and validate authenticated users via a RESTful login API. However, it incorrectly accepts the 'none' algorithm in JWTs, allowing token forgery. The application trusts the JWT payload without signature verification when 'alg' is set to 'none'. To solve: Forge a JWT for the user carlos and access their account page using the tampered token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in REST API login flow\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) to manage sessions and validate authenticated users via a RESTful login API. However, it incorrectly accepts the 'none' algorithm in JWTs, allowing token forgery. The application trusts the JWT payload without signature verification when 'alg' is set to 'none'. To solve: Forge a JWT for the user carlos and access their account page using the tampered token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation\nDescription: This application uses OAuth2 for third-party login, but fails to properly validate redirect URIs. It accepts user-controlled input in the redirect_uri parameter during the authorization flow. To solve: Trick the OAuth provider to send an access token to your controlled domain, then use the token to gain access to Carlosâ€™s account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"This application uses OAuth2 for third-party login, but fails to properly validate redirect URIs. It accepts user-controlled input in the redirect_uri parameter during the authorization flow. To solve: Trick the OAuth provider to send an access token to your controlled domain, then use the token to gain access to Carlosâ€™s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login response\nDescription: The application assigns session IDs before login and fails to regenerate them upon successful authentication. An attacker can predetermine a session and then trick a user into authenticating with it. To solve: Set a fixed session ID for Carlos before he logs in, then hijack the session to access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login response\", \"Lab Description\": \"The application assigns session IDs before login and fails to regenerate them upon successful authentication. An attacker can predetermine a session and then trick a user into authenticating with it. To solve: Set a fixed session ID for Carlos before he logs in, then hijack the session to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Secret Key Brute-Force in Authorization Header\nDescription: This lab uses JWT tokens for stateless authentication but fails to use a secure secret key. The token is signed with a guessable value, making it vulnerable to brute-force attacks. The application verifies the signature using a hardcoded secret and grants access based on the 'admin' claim. To solve: Forge a valid JWT token with 'admin':true and access the /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Secret Key Brute-Force in Authorization Header\", \"Lab Description\": \"This lab uses JWT tokens for stateless authentication but fails to use a secure secret key. The token is signed with a guessable value, making it vulnerable to brute-force attacks. The application verifies the signature using a hardcoded secret and grants access based on the 'admin' claim. To solve: Forge a valid JWT token with 'admin':true and access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation via Weak Token Binding\nDescription: The application assigns a session cookie before login and fails to regenerate it after authentication. Attackers can set a known session ID and trick the victim into logging in with it. To solve: Fix a session ID, trick the victim to log in, then reuse the session ID to access /my-account as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Weak Token Binding\", \"Lab Description\": \"The application assigns a session cookie before login and fails to regenerate it after authentication. Attackers can set a known session ID and trick the victim into logging in with it. To solve: Fix a session ID, trick the victim to log in, then reuse the session ID to access /my-account as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Implicit Flow Token Theft via Referer Leak\nDescription: This lab uses OAuth 2.0 implicit flow to obtain access tokens via redirects. The redirection target page leaks the access token in the Referer header. To solve: Intercept the redirect and steal the token using a malicious third-party page, then access /oauth/user-info as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Theft via Referer Leak\", \"Lab Description\": \"This lab uses OAuth 2.0 implicit flow to obtain access tokens via redirects. The redirection target page leaks the access token in the Referer header. To solve: Intercept the redirect and steal the token using a malicious third-party page, then access /oauth/user-info as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature 'none' bypass in Authorization header\nDescription: The application uses JWT tokens for authentication but does not validate the token's signature algorithm properly. It allows an attacker to manipulate the JWT by setting the `alg` header to 'none'. The application accepts unsigned tokens. To solve: forge a JWT with `alg: none` to access Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature 'none' bypass in Authorization header\", \"Lab Description\": \"The application uses JWT tokens for authentication but does not validate the token's signature algorithm properly. It allows an attacker to manipulate the JWT by setting the `alg` header to 'none'. The application accepts unsigned tokens. To solve: forge a JWT with `alg: none` to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in pre-login cookie assignment\nDescription: This application sets a session ID cookie before authentication. Upon login, it reuses the existing session instead of regenerating it, allowing session fixation attacks. To solve: fix a session, get Carlos to log in using it, then hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in pre-login cookie assignment\", \"Lab Description\": \"This application sets a session ID cookie before authentication. Upon login, it reuses the existing session instead of regenerating it, allowing session fixation attacks. To solve: fix a session, get Carlos to log in using it, then hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via redirect URI manipulation\nDescription: The app implements OAuth login but does not properly validate redirect URIs during token exchange. An attacker can manipulate the redirect_uri parameter to capture tokens. To solve: leak Carlosâ€™s token using a crafted malicious redirect_uri.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect URI manipulation\", \"Lab Description\": \"The app implements OAuth login but does not properly validate redirect URIs during token exchange. An attacker can manipulate the redirect_uri parameter to capture tokens. To solve: leak Carlosâ€™s token using a crafted malicious redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg field is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg field is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL introspection query exposing authentication fields\nDescription: The GraphQL endpoint has introspection enabled, revealing sensitive authentication fields and mutations. The application exposes password reset functionality through undocumented GraphQL mutations. To solve: exploit the exposed mutation to reset the admin password.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL introspection query exposing authentication fields\", \"Lab Description\": \"The GraphQL endpoint has introspection enabled, revealing sensitive authentication fields and mutations. The application exposes password reset functionality through undocumented GraphQL mutations. To solve: exploit the exposed mutation to reset the admin password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through open redirect\nDescription: The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URLs during OAuth token exchange. To solve: steal an OAuth token by tricking a user into authenticating through your malicious redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through open redirect\", \"Lab Description\": \"The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URLs during OAuth token exchange. To solve: steal an OAuth token by tricking a user into authenticating through your malicious redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in SOAP API authentication\nDescription: The lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application accepts pre-defined session IDs during login without proper validation. To solve: fixate a session ID and trick an admin into authenticating with it to gain privileged access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SOAP API authentication\", \"Lab Description\": \"The lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application accepts pre-defined session IDs during login without proper validation. To solve: fixate a session ID and trick an admin into authenticating with it to gain privileged access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in REST microservice\nDescription: The JWT validation service is vulnerable to key path traversal via the kid header parameter. The application uses the kid value to load verification keys without sanitization. To solve: craft a JWT that forces the server to use a predictable public key for verification.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in REST microservice\", \"Lab Description\": \"The JWT validation service is vulnerable to key path traversal via the kid header parameter. The application uses the kid value to load verification keys without sanitization. To solve: craft a JWT that forces the server to use a predictable public key for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage through verbose error messages\nDescription: The OAuth token endpoint leaks sensitive information through detailed error responses. The application reveals valid tokens in error messages when malformed requests are sent. To solve: extract a valid OAuth token by analyzing error responses and use it to access protected resources.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through verbose error messages\", \"Lab Description\": \"The OAuth token endpoint leaks sensitive information through detailed error responses. The application reveals valid tokens in error messages when malformed requests are sent. To solve: extract a valid OAuth token by analyzing error responses and use it to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT role escalation via unsigned JWKS endpoint\nDescription: The application's JSON Web Key Set (JWKS) endpoint returns unsigned public keys that can be manipulated to forge admin tokens. The application [fails to validate key signatures during JWT verification]. To solve: [craft a valid JWT with admin privileges by injecting a malicious key into the JWKS response].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT role escalation via unsigned JWKS endpoint\", \"Lab Description\": \"The application's JSON Web Key Set (JWKS) endpoint returns unsigned public keys that can be manipulated to forge admin tokens. The application [fails to validate key signatures during JWT verification]. To solve: [craft a valid JWT with admin privileges by injecting a malicious key into the JWKS response].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping through parameter pollution\nDescription: The OAuth 2.0 implementation is vulnerable to access token substitution via duplicate parameter injection. The application [processes multiple token parameters inconsistently]. To solve: [steal an admin access token by injecting duplicate token parameters in the authorization flow].\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping through parameter pollution\", \"Lab Description\": \"The OAuth 2.0 implementation is vulnerable to access token substitution via duplicate parameter injection. The application [processes multiple token parameters inconsistently]. To solve: [steal an admin access token by injecting duplicate token parameters in the authorization flow].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking through GraphQL batch query abuse\nDescription: The GraphQL endpoint processes batch operations with inconsistent session handling. The application [executes multiple mutations in a single request while maintaining session state]. To solve: [hijack an admin session by injecting session ID into batch mutation operation].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking through GraphQL batch query abuse\", \"Lab Description\": \"The GraphQL endpoint processes batch operations with inconsistent session handling. The application [executes multiple mutations in a single request while maintaining session state]. To solve: [hijack an admin session by injecting session ID into batch mutation operation].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT public key injection via x5u header\nDescription: The JWT validation service trusts arbitrary x5u header URLs to fetch verification certificates. The application [fails to validate certificate chain authenticity when processing x5u headers]. To solve: [forge a valid admin token by injecting a malicious x5u URL pointing to attacker-controlled X.509 certificate].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key injection via x5u header\", \"Lab Description\": \"The JWT validation service trusts arbitrary x5u header URLs to fetch verification certificates. The application [fails to validate certificate chain authenticity when processing x5u headers]. To solve: [forge a valid admin token by injecting a malicious x5u URL pointing to attacker-controlled X.509 certificate].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token replay through state parameter injection\nDescription: The OAuth implementation fails to validate state parameter binding during token redemption. The application [accepts previously used authorization codes when accompanied by a new state parameter]. To solve: [intercept an authorization code and replay it with a forged state parameter to obtain fresh access tokens].\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token replay through state parameter injection\", \"Lab Description\": \"The OAuth implementation fails to validate state parameter binding during token redemption. The application [accepts previously used authorization codes when accompanied by a new state parameter]. To solve: [intercept an authorization code and replay it with a forged state parameter to obtain fresh access tokens].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through WebSocket handshake hijacking\nDescription: The WebSocket authentication handshake accepts arbitrary session identifiers. The application [assigns privileged sessions based on unvalidated WS-Session headers during WebSocket upgrades]. To solve: [fixate a privileged session ID through WebSocket handshake manipulation and hijack admin access].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through WebSocket handshake hijacking\", \"Lab Description\": \"The WebSocket authentication handshake accepts arbitrary session identifiers. The application [assigns privileged sessions based on unvalidated WS-Session headers during WebSocket upgrades]. To solve: [fixate a privileged session ID through WebSocket handshake manipulation and hijack admin access].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via jwk header injection\nDescription: The JWT validation endpoint is vulnerable to algorithm confusion attacks through JWK header injection. The application [trusts client-provided JWK headers when verifying tokens signed with symmetric keys]. To solve: [forge a valid admin token by injecting a malicious JWK header and signing with the public key as if it were HMAC].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via jwk header injection\", \"Lab Description\": \"The JWT validation endpoint is vulnerable to algorithm confusion attacks through JWK header injection. The application [trusts client-provided JWK headers when verifying tokens signed with symmetric keys]. To solve: [forge a valid admin token by injecting a malicious JWK header and signing with the public key as if it were HMAC].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through misconfigured CORS\nDescription: The OAuth token endpoint has overly permissive CORS headers, allowing token theft from malicious sites. The application [exposes access tokens through CORS-enabled responses without proper origin validation]. To solve: [craft a cross-domain request to steal OAuth tokens and use them to access protected resources].\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through misconfigured CORS\", \"Lab Description\": \"The OAuth token endpoint has overly permissive CORS headers, allowing token theft from malicious sites. The application [exposes access tokens through CORS-enabled responses without proper origin validation]. To solve: [craft a cross-domain request to steal OAuth tokens and use them to access protected resources].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through HTTP/2 header compression\nDescription: The application's HTTP/2 implementation leaks session IDs through header compression side channels. The application [assigns session IDs before authentication and maintains them through HPACK compression contexts]. To solve: [analyze HPACK compression ratios to fixate and hijack privileged sessions].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through HTTP/2 header compression\", \"Lab Description\": \"The application's HTTP/2 implementation leaks session IDs through header compression side channels. The application [assigns session IDs before authentication and maintains them through HPACK compression contexts]. To solve: [analyze HPACK compression ratios to fixate and hijack privileged sessions].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT-based authentication fails to validate the algorithm properly. The application accepts unsigned tokens when the 'alg' header is set to 'none'. To solve: craft a modified JWT to gain admin access without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT-based authentication fails to validate the algorithm properly. The application accepts unsigned tokens when the 'alg' header is set to 'none'. To solve: craft a modified JWT to gain admin access without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured callback in SPA\nDescription: The OAuth implementation leaks authorization codes through URL fragments in single-page applications. The application fails to validate the redirect_uri properly. To solve: intercept the OAuth flow and steal the victim's token through an open redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured callback in SPA\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through URL fragments in single-page applications. The application fails to validate the redirect_uri properly. To solve: intercept the OAuth flow and steal the victim's token through an open redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batching attack against authentication rate limiting\nDescription: The GraphQL endpoint processes batched queries without proper rate limiting checks. The application fails to count each authentication attempt separately in a batch. To solve: bypass login attempt restrictions using query batching to brute-force credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack against authentication rate limiting\", \"Lab Description\": \"The GraphQL endpoint processes batched queries without proper rate limiting checks. The application fails to count each authentication attempt separately in a batch. To solve: bypass login attempt restrictions using query batching to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via XSS in OAuth callback handler\nDescription: The OAuth implementation suffers from session fixation combined with DOM-based XSS in the callback handler. The application fails to regenerate session tokens after OAuth flow completion. To solve: chain XSS with session fixation to hijack an admin session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in OAuth callback handler\", \"Lab Description\": \"The OAuth implementation suffers from session fixation combined with DOM-based XSS in the callback handler. The application fails to regenerate session tokens after OAuth flow completion. To solve: chain XSS with session fixation to hijack an admin session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification uses the kid header to load verification keys without proper sanitization. The application allows directory traversal in key file paths. To solve: craft a JWT signed with a predictable local file's contents to gain admin access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification uses the kid header to load verification keys without proper sanitization. The application allows directory traversal in key file paths. To solve: craft a JWT signed with a predictable local file's contents to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification state\nDescription: The multi-factor authentication suffers from a race condition where the verification state isn't properly synchronized. The application uses a global variable to track MFA status. To solve: send parallel requests to bypass MFA by winning the race condition.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification state\", \"Lab Description\": \"The multi-factor authentication suffers from a race condition where the verification state isn't properly synchronized. The application uses a global variable to track MFA status. To solve: send parallel requests to bypass MFA by winning the race condition.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation improperly trusts the jku header to fetch verification keys from external URLs. The application fails to validate the jku domain. To solve: host a malicious JWKS file and craft a JWT that forces the server to use your public key for verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation improperly trusts the jku header to fetch verification keys from external URLs. The application fails to validate the jku domain. To solve: host a malicious JWKS file and craft a JWT that forces the server to use your public key for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure custom URI scheme\nDescription: The mobile OAuth implementation uses insecure custom URI schemes for redirects, allowing token interception. The application fails to validate redirect URIs properly. To solve: register a malicious URI handler and intercept tokens from deep links.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure custom URI scheme\", \"Lab Description\": \"The mobile OAuth implementation uses insecure custom URI schemes for redirects, allowing token interception. The application fails to validate redirect URIs properly. To solve: register a malicious URI handler and intercept tokens from deep links.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket authentication handshake\nDescription: The WebSocket upgrade process accepts existing session IDs without regeneration. The application authenticates WebSocket connections using cookies without proper session rotation. To solve: fixate session via HTTP then upgrade to WebSocket with same session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket authentication handshake\", \"Lab Description\": \"The WebSocket upgrade process accepts existing session IDs without regeneration. The application authenticates WebSocket connections using cookies without proper session rotation. To solve: fixate session via HTTP then upgrade to WebSocket with same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT role escalation via nested token injection\nDescription: The JWT implementation improperly processes nested JSON structures in token claims. The application fails to properly sanitize nested objects in the JWT payload. To solve: craft a JWT with nested role objects to escalate privileges to admin.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT role escalation via nested token injection\", \"Lab Description\": \"The JWT implementation improperly processes nested JSON structures in token claims. The application fails to properly sanitize nested objects in the JWT payload. To solve: craft a JWT with nested role objects to escalate privileges to admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via state parameter reflection\nDescription: The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain state server-side. To solve: craft a malicious link that captures victim's OAuth tokens via reflected state.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via state parameter reflection\", \"Lab Description\": \"The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain state server-side. To solve: craft a malicious link that captures victim's OAuth tokens via reflected state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL WebSocket connection\nDescription: The GraphQL subscription endpoint accepts existing session cookies for WebSocket connections without regeneration. The application fails to rotate session identifiers during WebSocket upgrade. To solve: fixate session via HTTP then establish GraphQL subscription with same session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL WebSocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint accepts existing session cookies for WebSocket connections without regeneration. The application fails to rotate session identifiers during WebSocket upgrade. To solve: fixate session via HTTP then establish GraphQL subscription with same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via x5u header injection\nDescription: The JWT implementation trusts x5u header to fetch verification certificates without proper validation. The application fails to verify the certificate chain when switching from HMAC to RSA. To solve: host a malicious certificate and force the server to verify tokens using your public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via x5u header injection\", \"Lab Description\": \"The JWT implementation trusts x5u header to fetch verification certificates without proper validation. The application fails to verify the certificate chain when switching from HMAC to RSA. To solve: host a malicious certificate and force the server to verify tokens using your public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure postMessage handler\nDescription: The OAuth popup implementation uses postMessage without proper origin validation. The application fails to verify the message source when processing OAuth tokens. To solve: craft a malicious page that intercepts tokens via postMessage event listeners.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure postMessage handler\", \"Lab Description\": \"The OAuth popup implementation uses postMessage without proper origin validation. The application fails to verify the message source when processing OAuth tokens. To solve: craft a malicious page that intercepts tokens via postMessage event listeners.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 Server Push headers\nDescription: The HTTP/2 implementation pushes session cookies without proper validation. The application assigns session IDs during resource push before authentication. To solve: intercept HTTP/2 push stream to fixate session then authenticate with known credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 Server Push headers\", \"Lab Description\": \"The HTTP/2 implementation pushes session cookies without proper validation. The application assigns session IDs during resource push before authentication. To solve: intercept HTTP/2 push stream to fixate session then authenticate with known credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query abuse in user profile API\nDescription: This lab's GraphQL endpoint exposes sensitive user information through introspection and lacks proper rate limiting. The application allows unlimited query depth that can lead to data leakage. To solve: extract all user credentials through a crafted GraphQL query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query abuse in user profile API\", \"Lab Description\": \"This lab's GraphQL endpoint exposes sensitive user information through introspection and lacks proper rate limiting. The application allows unlimited query depth that can lead to data leakage. To solve: extract all user credentials through a crafted GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through open redirect\nDescription: This lab's OAuth implementation is vulnerable to token leakage through an open redirect in the callback URL. The application fails to validate redirect URIs properly. To solve: steal an OAuth token by tricking a user into visiting a malicious link.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through open redirect\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable to token leakage through an open redirect in the callback URL. The application fails to validate redirect URIs properly. To solve: steal an OAuth token by tricking a user into visiting a malicious link.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in SOAP API authentication\nDescription: This lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application assigns session tokens before authentication and doesn't regenerate them after login. To solve: fixate a session token on victim's browser and hijack their authenticated session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SOAP API authentication\", \"Lab Description\": \"This lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application assigns session tokens before authentication and doesn't regenerate them after login. To solve: fixate a session token on victim's browser and hijack their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice architecture\nDescription: This lab's JWT verification microservice is vulnerable to key path traversal through the kid header parameter. The application uses the kid value to load verification keys without proper sanitization. To solve: craft a JWT token that forces the server to use a predictable public key file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice architecture\", \"Lab Description\": \"This lab's JWT verification microservice is vulnerable to key path traversal through the kid header parameter. The application uses the kid value to load verification keys without proper sanitization. To solve: craft a JWT token that forces the server to use a predictable public key file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through verbose error messages\nDescription: This lab's OAuth implementation leaks sensitive information through verbose error messages. The application reveals access tokens in stack traces during failed token validation. To solve: trigger error conditions to extract valid tokens from other users.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through verbose error messages\", \"Lab Description\": \"This lab's OAuth implementation leaks sensitive information through verbose error messages. The application reveals access tokens in stack traces during failed token validation. To solve: trigger error conditions to extract valid tokens from other users.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT role escalation via unsigned key confusion\nDescription: This lab's JWT implementation fails to verify the signing algorithm when processing tokens. The application accepts unsigned tokens when expecting RS256-signed ones. To solve: craft a token with admin privileges by exploiting algorithm confusion.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT role escalation via unsigned key confusion\", \"Lab Description\": \"This lab's JWT implementation fails to verify the signing algorithm when processing tokens. The application accepts unsigned tokens when expecting RS256-signed ones. To solve: craft a token with admin privileges by exploiting algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through state parameter reflection\nDescription: This lab's OAuth flow reflects the state parameter in the URL fragment after redirection. The application fails to validate that the returned state matches the original. To solve: intercept the OAuth flow and modify the state to leak the access token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through state parameter reflection\", \"Lab Description\": \"This lab's OAuth flow reflects the state parameter in the URL fragment after redirection. The application fails to validate that the returned state matches the original. To solve: intercept the OAuth flow and modify the state to leak the access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through GraphQL WebSocket connection\nDescription: This lab's GraphQL subscription endpoint assigns session tokens over WebSocket before authentication. The application fails to regenerate tokens after login. To solve: establish a WebSocket connection to fixate a session token, then authenticate to hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through GraphQL WebSocket connection\", \"Lab Description\": \"This lab's GraphQL subscription endpoint assigns session tokens over WebSocket before authentication. The application fails to regenerate tokens after login. To solve: establish a WebSocket connection to fixate a session token, then authenticate to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON objects\nDescription: This lab's JWT processing incorrectly handles nested JSON objects in claims. The application fails to properly validate claim structures when verifying tokens. To solve: inject a nested 'admin' claim to escalate privileges.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON objects\", \"Lab Description\": \"This lab's JWT processing incorrectly handles nested JSON objects in claims. The application fails to properly validate claim structures when verifying tokens. To solve: inject a nested 'admin' claim to escalate privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping through parameter pollution\nDescription: This lab's OAuth implementation is vulnerable to HTTP parameter pollution during token exchange. The application processes multiple token parameters inconsistently. To solve: inject a second token parameter to swap privileges.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping through parameter pollution\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable to HTTP parameter pollution during token exchange. The application processes multiple token parameters inconsistently. To solve: inject a second token parameter to swap privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session token leakage through GraphQL batch requests\nDescription: This lab's GraphQL endpoint processes batch requests sequentially while maintaining session state. The application leaks session tokens between requests in a batch. To solve: craft a batch query that leaks another user's session token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session token leakage through GraphQL batch requests\", \"Lab Description\": \"This lab's GraphQL endpoint processes batch requests sequentially while maintaining session state. The application leaks session tokens between requests in a batch. To solve: craft a batch query that leaks another user's session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT header parameter injection via URI fragments\nDescription: This lab's JWT implementation incorrectly processes URI fragments in the kid header parameter. The application fetches verification keys from untrusted locations when special characters are used. To solve: inject a malicious key URI to forge admin tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT header parameter injection via URI fragments\", \"Lab Description\": \"This lab's JWT implementation incorrectly processes URI fragments in the kid header parameter. The application fetches verification keys from untrusted locations when special characters are used. To solve: inject a malicious key URI to forge admin tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via iframe timing attack\nDescription: This lab's OAuth implementation leaks token validity through iframe response times. The application processes valid tokens slower due to database lookups. To solve: measure iframe load times to brute-force active tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via iframe timing attack\", \"Lab Description\": \"This lab's OAuth implementation leaks token validity through iframe response times. The application processes valid tokens slower due to database lookups. To solve: measure iframe load times to brute-force active tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation through WebSocket subprotocol negotiation\nDescription: This lab's WebSocket implementation assigns sessions during subprotocol negotiation. The application fails to regenerate session tokens after authentication. To solve: fixate a session during WS handshake then authenticate to hijack.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through WebSocket subprotocol negotiation\", \"Lab Description\": \"This lab's WebSocket implementation assigns sessions during subprotocol negotiation. The application fails to regenerate session tokens after authentication. To solve: fixate a session during WS handshake then authenticate to hijack.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: REST API JWT role escalation via unverified header injection\nDescription: The REST API endpoint validates JWT tokens but fails to verify custom headers. The application blindly trusts X-Role headers when present. To solve: craft a request combining a low-privilege JWT with a malicious X-Role header to gain admin access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"REST API JWT role escalation via unverified header injection\", \"Lab Description\": \"The REST API endpoint validates JWT tokens but fails to verify custom headers. The application blindly trusts X-Role headers when present. To solve: craft a request combining a low-privilege JWT with a malicious X-Role header to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token hijacking via state parameter reflection\nDescription: The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain server-side state. To solve: intercept the OAuth flow and modify the state parameter to hijack another user's session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via state parameter reflection\", \"Lab Description\": \"The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain server-side state. To solve: intercept the OAuth flow and modify the state parameter to hijack another user's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batched query authentication bypass\nDescription: The GraphQL endpoint processes batched queries sequentially without proper authorization checks between operations. The application fails to validate query interdependencies. To solve: craft a batched query that combines an authentication mutation with a privileged query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batched query authentication bypass\", \"Lab Description\": \"The GraphQL endpoint processes batched queries sequentially without proper authorization checks between operations. The application fails to validate query interdependencies. To solve: craft a batched query that combines an authentication mutation with a privileged query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via JSONP callback parameter\nDescription: The application sets session cookies through a JSONP endpoint that reflects callback parameters. The vulnerable implementation allows session fixation attacks. To solve: craft a malicious page that fixes a session ID for the victim then triggers authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JSONP callback parameter\", \"Lab Description\": \"The application sets session cookies through a JSONP endpoint that reflects callback parameters. The vulnerable implementation allows session fixation attacks. To solve: craft a malicious page that fixes a session ID for the victim then triggers authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT verification accepts arbitrary jku (JWK Set URL) headers without validation. The application fails to whitelist trusted key servers. To solve: host a malicious JWK Set and craft a token signed with your own key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT verification accepts arbitrary jku (JWK Set URL) headers without validation. The application fails to whitelist trusted key servers. To solve: host a malicious JWK Set and craft a token signed with your own key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Forwarded-Host header\nDescription: The password reset functionality uses the Host header to generate reset links without proper validation. The application trusts X-Forwarded-Host headers. To solve: poison the reset link generation to send tokens to an attacker-controlled domain.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Forwarded-Host header\", \"Lab Description\": \"The password reset functionality uses the Host header to generate reset links without proper validation. The application trusts X-Forwarded-Host headers. To solve: poison the reset link generation to send tokens to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification state\nDescription: The multi-factor authentication flow has a race condition between verification and session state update. The application uses eventual consistency for MFA status. To solve: send parallel requests to bypass MFA before state propagation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification state\", \"Lab Description\": \"The multi-factor authentication flow has a race condition between verification and session state update. The application uses eventual consistency for MFA status. To solve: send parallel requests to bypass MFA before state propagation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Credential stuffing via case-insensitive password comparison\nDescription: The login endpoint performs case-insensitive password comparison. The application fails to normalize input before hashing. To solve: exploit the case-insensitive check to reduce password entropy for brute-forcing.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-insensitive password comparison\", \"Lab Description\": \"The login endpoint performs case-insensitive password comparison. The application fails to normalize input before hashing. To solve: exploit the case-insensitive check to reduce password entropy for brute-forcing.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in Node.js authentication middleware\nDescription: The lab's JWT authentication implementation accepts unsigned tokens when alg:none is specified. The application fails to validate token signatures properly. To solve: forge a valid admin token by exploiting the alg:none vulnerability.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in Node.js authentication middleware\", \"Lab Description\": \"The lab's JWT authentication implementation accepts unsigned tokens when alg:none is specified. The application fails to validate token signatures properly. To solve: forge a valid admin token by exploiting the alg:none vulnerability.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via open redirect in callback endpoint\nDescription: The OAuth implementation leaks access tokens through an unvalidated redirect parameter in the callback endpoint. The application fails to check redirect URLs against a whitelist. To solve: steal the OAuth token by forcing it to be sent to an attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via open redirect in callback endpoint\", \"Lab Description\": \"The OAuth implementation leaks access tokens through an unvalidated redirect parameter in the callback endpoint. The application fails to check redirect URLs against a whitelist. To solve: steal the OAuth token by forcing it to be sent to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unprotected session regeneration\nDescription: The application assigns session IDs before authentication and doesn't regenerate them after login. The vulnerable behavior allows session fixation attacks. To solve: fixate a session ID on victim's browser then wait for them to authenticate.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unprotected session regeneration\", \"Lab Description\": \"The application assigns session IDs before authentication and doesn't regenerate them after login. The vulnerable behavior allows session fixation attacks. To solve: fixate a session ID on victim's browser then wait for them to authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL introspection leads to unauthorized data access\nDescription: The GraphQL endpoint has introspection enabled, exposing sensitive schema information. The application doesn't implement proper authorization checks. To solve: extract hidden mutations through introspection then execute privileged operations.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL introspection leads to unauthorized data access\", \"Lab Description\": \"The GraphQL endpoint has introspection enabled, exposing sensitive schema information. The application doesn't implement proper authorization checks. To solve: extract hidden mutations through introspection then execute privileged operations.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The multi-factor authentication flow can be bypassed by modifying the status parameter. The application trusts client-side state for authentication decisions. To solve: intercept and modify the MFA verification request to bypass the check.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow can be bypassed by modifying the status parameter. The application trusts client-side state for authentication decisions. To solve: intercept and modify the MFA verification request to bypass the check.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via weak rate limiting on login\nDescription: The login endpoint has insufficient rate limiting, allowing credential stuffing attacks. The application doesn't implement proper account lockout mechanisms. To solve: perform a credential stuffing attack using known password lists.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via weak rate limiting on login\", \"Lab Description\": \"The login endpoint has insufficient rate limiting, allowing credential stuffing attacks. The application doesn't implement proper account lockout mechanisms. To solve: perform a credential stuffing attack using known password lists.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SOAP API authentication bypass via XML comments\nDescription: The SOAP endpoint processes XML comments as part of the authentication logic. The application's XML parser improperly handles comments in authentication elements. To solve: bypass authentication by injecting comments in the SOAP body.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SOAP API authentication bypass via XML comments\", \"Lab Description\": \"The SOAP endpoint processes XML comments as part of the authentication logic. The application's XML parser improperly handles comments in authentication elements. To solve: bypass authentication by injecting comments in the SOAP body.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query batching authentication bypass\nDescription: The lab's GraphQL endpoint is vulnerable to query batching attacks that can bypass rate limiting on authentication attempts. The application processes batched queries sequentially without proper session checks. To solve: craft a batch query that simultaneously tests multiple credentials while appearing as a single request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query batching authentication bypass\", \"Lab Description\": \"The lab's GraphQL endpoint is vulnerable to query batching attacks that can bypass rate limiting on authentication attempts. The application processes batched queries sequentially without proper session checks. To solve: craft a batch query that simultaneously tests multiple credentials while appearing as a single request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through insecure redirect_uri\nDescription: The lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage. The application generates OAuth tokens before validating the redirect URI. To solve: intercept the OAuth flow and modify the redirect_uri to point to your attacker server to capture the authorization code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through insecure redirect_uri\", \"Lab Description\": \"The lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage. The application generates OAuth tokens before validating the redirect URI. To solve: intercept the OAuth flow and modify the redirect_uri to point to your attacker server to capture the authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via XSS in JWT token endpoint\nDescription: The lab's JWT generation endpoint is vulnerable to XSS injection in custom claims, allowing session fixation attacks. The application fails to sanitize user-controlled input when generating tokens. To solve: craft a malicious JWT that executes XSS when decoded by the admin panel, then fixate this token as the admin's session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in JWT token endpoint\", \"Lab Description\": \"The lab's JWT generation endpoint is vulnerable to XSS injection in custom claims, allowing session fixation attacks. The application fails to sanitize user-controlled input when generating tokens. To solve: craft a malicious JWT that executes XSS when decoded by the admin panel, then fixate this token as the admin's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through misconfigured CORS in REST API\nDescription: The lab's OAuth implementation has overly permissive CORS headers, allowing token leakage to arbitrary domains. The application returns Access-Control-Allow-Credentials: true with wildcard origins. To solve: craft a malicious web page that steals OAuth tokens through credentialed CORS requests.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through misconfigured CORS in REST API\", \"Lab Description\": \"The lab's OAuth implementation has overly permissive CORS headers, allowing token leakage to arbitrary domains. The application returns Access-Control-Allow-Credentials: true with wildcard origins. To solve: craft a malicious web page that steals OAuth tokens through credentialed CORS requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT key confusion attack through exposed JWKS endpoint\nDescription: The lab's authentication system exposes a JWKS endpoint with leaked RSA private key parameters while accepting HS256-signed tokens. The application fails to validate the signing algorithm properly. To solve: convert the public key to HMAC secret, then craft an admin token signed with the converted key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT key confusion attack through exposed JWKS endpoint\", \"Lab Description\": \"The lab's authentication system exposes a JWKS endpoint with leaked RSA private key parameters while accepting HS256-signed tokens. The application fails to validate the signing algorithm properly. To solve: convert the public key to HMAC secret, then craft an admin token signed with the converted key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The lab's JWT validation microservice is vulnerable to key path traversal through the kid header. The application uses user-controlled kid values to load verification keys without proper sanitization. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The lab's JWT validation microservice is vulnerable to key path traversal through the kid header. The application uses user-controlled kid values to load verification keys without proper sanitization. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth state parameter CSRF with open redirect\nDescription: The lab's OAuth implementation fails to validate state parameters properly while having an open redirect vulnerability. The application accepts arbitrary redirect_uri values and doesn't store state parameters server-side. To solve: craft a malicious link that captures victim tokens through CSRF and open redirect chaining.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth state parameter CSRF with open redirect\", \"Lab Description\": \"The lab's OAuth implementation fails to validate state parameters properly while having an open redirect vulnerability. The application accepts arbitrary redirect_uri values and doesn't store state parameters server-side. To solve: craft a malicious link that captures victim tokens through CSRF and open redirect chaining.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session swapping via concurrent login race condition\nDescription: The lab's session management system is vulnerable to race conditions during concurrent login attempts. The application generates session tokens before validating credentials, allowing session swapping between users. To solve: perform concurrent login attempts to swap a low-privilege session with an admin session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session swapping via concurrent login race condition\", \"Lab Description\": \"The lab's session management system is vulnerable to race conditions during concurrent login attempts. The application generates session tokens before validating credentials, allowing session swapping between users. To solve: perform concurrent login attempts to swap a low-privilege session with an admin session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via pre-authentication session fixation\nDescription: The lab's multi-factor authentication creates authenticated sessions before MFA completion. The application assigns session cookies during username/password validation but doesn't invalidate them if MFA fails. To solve: fixate a pre-MFA session and brute-force the verification code while maintaining the session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via pre-authentication session fixation\", \"Lab Description\": \"The lab's multi-factor authentication creates authenticated sessions before MFA completion. The application assigns session cookies during username/password validation but doesn't invalidate them if MFA fails. To solve: fixate a pre-MFA session and brute-force the verification code while maintaining the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim injection via GraphQL introspection\nDescription: The lab's GraphQL endpoint exposes JWT generation through introspection while failing to validate nested claims. The application processes arbitrary claim injection through nested query parameters. To solve: craft a GraphQL query that injects admin privileges into a self-generated JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via GraphQL introspection\", \"Lab Description\": \"The lab's GraphQL endpoint exposes JWT generation through introspection while failing to validate nested claims. The application processes arbitrary claim injection through nested query parameters. To solve: craft a GraphQL query that injects admin privileges into a self-generated JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through WebSocket handshake\nDescription: The lab's OAuth implementation leaks tokens during WebSocket upgrades by including them in clear text. The application fails to strip authentication headers during protocol switching. To solve: intercept the WebSocket handshake to harvest active OAuth tokens from other users.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through WebSocket handshake\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens during WebSocket upgrades by including them in clear text. The application fails to strip authentication headers during protocol switching. To solve: intercept the WebSocket handshake to harvest active OAuth tokens from other users.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via malformed SAML assertion\nDescription: The lab's SAML implementation accepts unsigned assertions in certain conditions. The application fails to properly validate XML signatures when receiving malformed NameID elements. To solve: craft a SAML response with a malformed NameID to fixate a session for any user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via malformed SAML assertion\", \"Lab Description\": \"The lab's SAML implementation accepts unsigned assertions in certain conditions. The application fails to properly validate XML signatures when receiving malformed NameID elements. To solve: craft a SAML response with a malformed NameID to fixate a session for any user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter injection\nDescription: The lab's MFA verification accepts state parameters that modify the target account. The application fails to validate state consistency between initiation and completion. To solve: inject a target username in the state parameter during MFA initiation to bypass verification for that account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter injection\", \"Lab Description\": \"The lab's MFA verification accepts state parameters that modify the target account. The application fails to validate state consistency between initiation and completion. To solve: inject a target username in the state parameter during MFA initiation to bypass verification for that account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm downgrade via HTTP/2 request smuggling\nDescription: The lab's JWT validation is vulnerable to algorithm downgrade attacks when processing HTTP/2 requests. The application fails to properly validate the alg header when requests are smuggled through HTTP/2 connection coalescing. To solve: craft an HTTP/2 request that smuggles a JWT with none algorithm while appearing as a valid RS256 token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm downgrade via HTTP/2 request smuggling\", \"Lab Description\": \"The lab's JWT validation is vulnerable to algorithm downgrade attacks when processing HTTP/2 requests. The application fails to properly validate the alg header when requests are smuggled through HTTP/2 connection coalescing. To solve: craft an HTTP/2 request that smuggles a JWT with none algorithm while appearing as a valid RS256 token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through DNS rebinding\nDescription: The lab's OAuth implementation is vulnerable to DNS rebinding attacks during token redemption. The application fails to validate the Host header against the redirect_uri domain during token exchange. To solve: create a malicious site that performs DNS rebinding to capture OAuth tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through DNS rebinding\", \"Lab Description\": \"The lab's OAuth implementation is vulnerable to DNS rebinding attacks during token redemption. The application fails to validate the Host header against the redirect_uri domain during token exchange. To solve: create a malicious site that performs DNS rebinding to capture OAuth tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebRTC ICE candidate leakage\nDescription: The lab's WebRTC implementation leaks session tokens through ICE candidate messages. The application includes session cookies in STUN/TURN authentication and fails to filter them from ICE candidate responses. To solve: intercept WebRTC negotiation to harvest session tokens from ICE candidates.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebRTC ICE candidate leakage\", \"Lab Description\": \"The lab's WebRTC implementation leaks session tokens through ICE candidate messages. The application includes session cookies in STUN/TURN authentication and fails to filter them from ICE candidate responses. To solve: intercept WebRTC negotiation to harvest session tokens from ICE candidates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via WebSocket session inheritance\nDescription: The lab's MFA verification inherits WebSocket sessions from pre-authentication connections. The application associates MFA state with WebSocket connections rather than HTTP sessions. To solve: establish a WebSocket connection before authentication, complete MFA on a different channel, then reuse the WebSocket connection.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebSocket session inheritance\", \"Lab Description\": \"The lab's MFA verification inherits WebSocket sessions from pre-authentication connections. The application associates MFA state with WebSocket connections rather than HTTP sessions. To solve: establish a WebSocket connection before authentication, complete MFA on a different channel, then reuse the WebSocket connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim smuggling via HTTP/2 pseudo-headers\nDescription: The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 pseudo-header manipulation. The application fails to properly validate the :path pseudo-header when extracting claims, allowing duplicate claims in different header contexts. To solve: craft an HTTP/2 request that smuggles conflicting claims through pseudo-header manipulation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim smuggling via HTTP/2 pseudo-headers\", \"Lab Description\": \"The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 pseudo-header manipulation. The application fails to properly validate the :path pseudo-header when extracting claims, allowing duplicate claims in different header contexts. To solve: craft an HTTP/2 request that smuggles conflicting claims through pseudo-header manipulation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through DNS-over-HTTPS cache poisoning\nDescription: The lab's OAuth implementation is vulnerable to DNS cache poisoning via DNS-over-HTTPS (DoH) that leads to token leakage. The application uses DoH for redirect_uri validation but fails to properly cache responses, allowing redirection to attacker-controlled domains. To solve: poison the DoH cache to redirect OAuth tokens to a malicious domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through DNS-over-HTTPS cache poisoning\", \"Lab Description\": \"The lab's OAuth implementation is vulnerable to DNS cache poisoning via DNS-over-HTTPS (DoH) that leads to token leakage. The application uses DoH for redirect_uri validation but fails to properly cache responses, allowing redirection to attacker-controlled domains. To solve: poison the DoH cache to redirect OAuth tokens to a malicious domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebTransport session IDs\nDescription: The lab's WebTransport implementation uses predictable session IDs that can be fixated before authentication. The application generates session tokens based on client-provided Session-ID headers without proper validation. To solve: predict and fixate a WebTransport session ID before authentication, then hijack the session after login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport session IDs\", \"Lab Description\": \"The lab's WebTransport implementation uses predictable session IDs that can be fixated before authentication. The application generates session tokens based on client-provided Session-ID headers without proper validation. To solve: predict and fixate a WebTransport session ID before authentication, then hijack the session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via QUIC connection migration\nDescription: The lab's MFA verification is vulnerable to bypass through QUIC connection migration. The application associates MFA state with QUIC connection IDs rather than authentication tokens. To solve: initiate MFA verification, then migrate QUIC connection to bypass verification while maintaining authenticated state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via QUIC connection migration\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through QUIC connection migration. The application associates MFA state with QUIC connection IDs rather than authentication tokens. To solve: initiate MFA verification, then migrate QUIC connection to bypass verification while maintaining authenticated state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm substitution via HTTP/3 connection migration\nDescription: The lab's JWT validation is vulnerable to algorithm substitution when connections migrate between HTTP/3 and HTTP/2. The application fails to maintain consistent algorithm validation during protocol transitions. To solve: initiate authentication over HTTP/3, migrate to HTTP/2 mid-session, and substitute the algorithm header to bypass validation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm substitution via HTTP/3 connection migration\", \"Lab Description\": \"The lab's JWT validation is vulnerable to algorithm substitution when connections migrate between HTTP/3 and HTTP/2. The application fails to maintain consistent algorithm validation during protocol transitions. To solve: initiate authentication over HTTP/3, migrate to HTTP/2 mid-session, and substitute the algorithm header to bypass validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via WebSocket subprotocol negotiation\nDescription: The lab's OAuth implementation leaks tokens during WebSocket subprotocol negotiation. The application includes OAuth tokens in Sec-WebSocket-Protocol headers when negotiating subprotocols. To solve: intercept WebSocket handshake, manipulate subprotocol negotiation to capture tokens, and reuse them for API access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via WebSocket subprotocol negotiation\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens during WebSocket subprotocol negotiation. The application includes OAuth tokens in Sec-WebSocket-Protocol headers when negotiating subprotocols. To solve: intercept WebSocket handshake, manipulate subprotocol negotiation to capture tokens, and reuse them for API access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP Trailers header injection\nDescription: The lab's session management is vulnerable to fixation through HTTP Trailers headers. The application processes session cookies from trailing headers after the main headers, allowing session override. To solve: craft a request with malicious session in Trailers header that overrides legitimate session after authentication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP Trailers header injection\", \"Lab Description\": \"The lab's session management is vulnerable to fixation through HTTP Trailers headers. The application processes session cookies from trailing headers after the main headers, allowing session override. To solve: craft a request with malicious session in Trailers header that overrides legitimate session after authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via WebTransport datagram fragmentation\nDescription: The lab's MFA verification is vulnerable to bypass through WebTransport datagram fragmentation. The application fails to properly reassemble fragmented MFA codes sent over unreliable datagram channels. To solve: fragment MFA verification packets to trigger partial validation and bypass full code requirement.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebTransport datagram fragmentation\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through WebTransport datagram fragmentation. The application fails to properly reassemble fragmented MFA codes sent over unreliable datagram channels. To solve: fragment MFA verification packets to trigger partial validation and bypass full code requirement.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim smuggling via HTTP/2 trailer headers\nDescription: The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 trailer headers. The application processes trailer headers after initial JWT validation, allowing additional claims to be injected. To solve: craft an HTTP/2 request with malicious claims in trailer headers that override original JWT claims after validation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim smuggling via HTTP/2 trailer headers\", \"Lab Description\": \"The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 trailer headers. The application processes trailer headers after initial JWT validation, allowing additional claims to be injected. To solve: craft an HTTP/2 request with malicious claims in trailer headers that override original JWT claims after validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via HTTP/3 connection migration\nDescription: The lab's OAuth implementation leaks tokens during HTTP/3 connection migration. The application fails to properly clear authentication state when connections migrate between networks. To solve: initiate OAuth flow on one network, force connection migration, and capture tokens from the new connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via HTTP/3 connection migration\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens during HTTP/3 connection migration. The application fails to properly clear authentication state when connections migrate between networks. To solve: initiate OAuth flow on one network, force connection migration, and capture tokens from the new connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket subprotocol downgrade\nDescription: The lab's WebSocket implementation is vulnerable to session fixation through subprotocol downgrade attacks. The application maintains session state when downgrading from secure to insecure subprotocols. To solve: establish WebSocket with secure subprotocol, force downgrade, and fixate session identifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket subprotocol downgrade\", \"Lab Description\": \"The lab's WebSocket implementation is vulnerable to session fixation through subprotocol downgrade attacks. The application maintains session state when downgrading from secure to insecure subprotocols. To solve: establish WebSocket with secure subprotocol, force downgrade, and fixate session identifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via HTTP/3 connection coalescing\nDescription: The lab's JWT validation is vulnerable to algorithm confusion when HTTP/3 connections coalesce. The application fails to properly isolate cryptographic contexts when multiple hosts share an IP address. To solve: craft a JWT that appears as RS256 when validated by Host A but becomes HS256 when processed by Host B on the same IP.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via HTTP/3 connection coalescing\", \"Lab Description\": \"The lab's JWT validation is vulnerable to algorithm confusion when HTTP/3 connections coalesce. The application fails to properly isolate cryptographic contexts when multiple hosts share an IP address. To solve: craft a JWT that appears as RS256 when validated by Host A but becomes HS256 when processed by Host B on the same IP.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via HTTP/2 PRIORITY_UPDATE frames\nDescription: The lab's OAuth implementation leaks tokens in HTTP/2 PRIORITY_UPDATE frame metadata. The application includes sensitive tokens in stream priority weight calculations. To solve: manipulate stream dependencies to force token leakage in connection state updates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via HTTP/2 PRIORITY_UPDATE frames\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens in HTTP/2 PRIORITY_UPDATE frame metadata. The application includes sensitive tokens in stream priority weight calculations. To solve: manipulate stream dependencies to force token leakage in connection state updates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via HTTP Trailers in gRPC streaming\nDescription: The lab's MFA verification is vulnerable to bypass through gRPC streaming trailer manipulation. The application processes MFA verification status in trailers but fails to validate them against the stream body. To solve: send valid MFA code in stream messages but override verification status in trailers.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP Trailers in gRPC streaming\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through gRPC streaming trailer manipulation. The application processes MFA verification status in trailers but fails to validate them against the stream body. To solve: send valid MFA code in stream messages but override verification status in trailers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT validation bypass via HTTP/2 CONTINUATION frame injection\nDescription: The lab's JWT validation is vulnerable to header splitting through HTTP/2 CONTINUATION frames. The application fails to properly reconstruct headers split across multiple CONTINUATION frames, allowing JWT claims to be smuggled. To solve: craft a request with malicious JWT claims in CONTINUATION frames that override the original token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT validation bypass via HTTP/2 CONTINUATION frame injection\", \"Lab Description\": \"The lab's JWT validation is vulnerable to header splitting through HTTP/2 CONTINUATION frames. The application fails to properly reconstruct headers split across multiple CONTINUATION frames, allowing JWT claims to be smuggled. To solve: craft a request with malicious JWT claims in CONTINUATION frames that override the original token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via HTTP/3 GREASE frames\nDescription: The lab's OAuth implementation leaks tokens in HTTP/3 GREASE frame metadata. The application includes sensitive tokens in reserved frame type processing. To solve: craft GREASE frames that trigger token leakage in connection state updates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via HTTP/3 GREASE frames\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens in HTTP/3 GREASE frame metadata. The application includes sensitive tokens in reserved frame type processing. To solve: craft GREASE frames that trigger token leakage in connection state updates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebTransport stream priority inversion\nDescription: The lab's session management is vulnerable to fixation through WebTransport stream priority manipulation. The application associates sessions with stream priorities but fails to validate them on stream recreation. To solve: create high-priority stream, fixate session, then recreate stream with same priority to resume session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport stream priority inversion\", \"Lab Description\": \"The lab's session management is vulnerable to fixation through WebTransport stream priority manipulation. The application associates sessions with stream priorities but fails to validate them on stream recreation. To solve: create high-priority stream, fixate session, then recreate stream with same priority to resume session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via gRPC metadata compression oracle\nDescription: The lab's MFA verification is vulnerable to bypass through gRPC metadata compression analysis. The application leaks verification status through compression ratios of error messages. To solve: analyze compression differences between valid and invalid MFA codes to derive correct code.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via gRPC metadata compression oracle\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through gRPC metadata compression analysis. The application leaks verification status through compression ratios of error messages. To solve: analyze compression differences between valid and invalid MFA codes to derive correct code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The application uses JWT for session management but fails to properly validate the algorithm. The vulnerable endpoint /api/admin accepts unsigned tokens when alg:none is specified. To solve: Forge an administrative JWT without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The application uses JWT for session management but fails to properly validate the algorithm. The vulnerable endpoint /api/admin accepts unsigned tokens when alg:none is specified. To solve: Forge an administrative JWT without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured callback in SPA\nDescription: The single-page application implements OAuth 2.0 with implicit flow but exposes access tokens in browser history due to improper callback handling. The application stores OAuth tokens in URL fragments. To solve: Retrieve victim's access token from browser history and access their profile data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured callback in SPA\", \"Lab Description\": \"The single-page application implements OAuth 2.0 with implicit flow but exposes access tokens in browser history due to improper callback handling. The application stores OAuth tokens in URL fragments. To solve: Retrieve victim's access token from browser history and access their profile data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation\nDescription: The GraphQL API allows session fixation by accepting arbitrary session identifiers through the createSession mutation. The application doesn't regenerate session IDs after authentication. To solve: Fixate a session ID and trick the victim into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation\", \"Lab Description\": \"The GraphQL API allows session fixation by accepting arbitrary session identifiers through the createSession mutation. The application doesn't regenerate session IDs after authentication. To solve: Fixate a session ID and trick the victim into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via state parameter manipulation in SOAP service\nDescription: The SOAP-based authentication service implements MFA but fails to validate the state parameter between steps. The application trusts client-provided state values after MFA verification. To solve: Bypass MFA by manipulating state parameters in the authentication flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter manipulation in SOAP service\", \"Lab Description\": \"The SOAP-based authentication service implements MFA but fails to validate the state parameter between steps. The application trusts client-provided state values after MFA verification. To solve: Bypass MFA by manipulating state parameters in the authentication flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header injection in microservice authentication\nDescription: The microservice architecture uses JWT with kid header pointing to local files for key verification. The application fails to sanitize kid header values, allowing path traversal. To solve: Forge admin JWT by loading arbitrary local files as verification keys.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header injection in microservice authentication\", \"Lab Description\": \"The microservice architecture uses JWT with kid header pointing to local files for key verification. The application fails to sanitize kid header values, allowing path traversal. To solve: Forge admin JWT by loading arbitrary local files as verification keys.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state validation\nDescription: The OAuth implementation in the React frontend fails to properly validate state parameters during callback. The application trusts client-side state verification, allowing token swapping. To solve: Intercept OAuth flow and replace victim's auth code with your own while maintaining valid state.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state validation\", \"Lab Description\": \"The OAuth implementation in the React frontend fails to properly validate state parameters during callback. The application trusts client-side state verification, allowing token swapping. To solve: Intercept OAuth flow and replace victim's auth code with your own while maintaining valid state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session token leakage via GraphQL verbose errors\nDescription: The GraphQL endpoint leaks session tokens through verbose error messages when malformed queries are submitted. The application's debug mode remains enabled in production. To solve: Extract valid session tokens from error responses and hijack user sessions.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session token leakage via GraphQL verbose errors\", \"Lab Description\": \"The GraphQL endpoint leaks session tokens through verbose error messages when malformed queries are submitted. The application's debug mode remains enabled in production. To solve: Extract valid session tokens from error responses and hijack user sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: MFA bypass via race condition in REST API\nDescription: The MFA verification endpoint suffers from a race condition where the first valid code disables verification for subsequent requests. The application fails to implement proper transaction locking. To solve: Send parallel requests with valid and invalid codes to bypass MFA protection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in REST API\", \"Lab Description\": \"The MFA verification endpoint suffers from a race condition where the first valid code disables verification for subsequent requests. The application fails to implement proper transaction locking. To solve: Send parallel requests with valid and invalid codes to bypass MFA protection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature stripping via header injection in REST API\nDescription: The API endpoint /admin/panel uses JWT authentication but fails to validate signature when custom headers are injected. The application processes unsigned tokens if x-algorithm header is present. To solve: Gain admin access by stripping JWT signature while maintaining valid payload.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping via header injection in REST API\", \"Lab Description\": \"The API endpoint /admin/panel uses JWT authentication but fails to validate signature when custom headers are injected. The application processes unsigned tokens if x-algorithm header is present. To solve: Gain admin access by stripping JWT signature while maintaining valid payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via insecure redirect_uri validation\nDescription: The OAuth implementation fails to properly validate redirect_uri parameters, allowing tokens to be leaked to attacker-controlled domains. The application doesn't verify exact match of registered callback URLs. To solve: Steal authorization code by modifying redirect_uri to point to malicious server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure redirect_uri validation\", \"Lab Description\": \"The OAuth implementation fails to properly validate redirect_uri parameters, allowing tokens to be leaked to attacker-controlled domains. The application doesn't verify exact match of registered callback URLs. To solve: Steal authorization code by modifying redirect_uri to point to malicious server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint over websockets accepts arbitrary session IDs during connection initialization. The application doesn't regenerate session IDs after authentication. To solve: Fixate session ID through websocket connection and hijack authenticated session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint over websockets accepts arbitrary session IDs during connection initialization. The application doesn't regenerate session IDs after authentication. To solve: Fixate session ID through websocket connection and hijack authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via time-limited code reuse\nDescription: The MFA implementation allows previously used codes to remain valid for short time windows after being consumed. The application fails to immediately invalidate used codes. To solve: Intercept valid MFA code and reuse it within the allowed time frame.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-limited code reuse\", \"Lab Description\": \"The MFA implementation allows previously used codes to remain valid for short time windows after being consumed. The application fails to immediately invalidate used codes. To solve: Intercept valid MFA code and reuse it within the allowed time frame.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via exposed public key in REST API\nDescription: The API exposes its public key at /jwks.json endpoint but fails to properly validate JWT algorithm. The application accepts RS256-signed tokens when configured for HS256. To solve: Forge admin token by signing with public key as HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via exposed public key in REST API\", \"Lab Description\": \"The API exposes its public key at /jwks.json endpoint but fails to properly validate JWT algorithm. The application accepts RS256-signed tokens when configured for HS256. To solve: Forge admin token by signing with public key as HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure PKCE implementation\nDescription: The OAuth flow uses PKCE but fails to properly validate code_verifier. The application doesn't enforce code_challenge_method matching. To solve: Bypass PKCE protection by omitting code_verifier parameter during token exchange.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure PKCE implementation\", \"Lab Description\": \"The OAuth flow uses PKCE but fails to properly validate code_verifier. The application doesn't enforce code_challenge_method matching. To solve: Bypass PKCE protection by omitting code_verifier parameter during token exchange.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 connection coalescing\nDescription: The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 connection coalescing\", \"Lab Description\": \"The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter tampering in SOAP API\nDescription: The SOAP-based MFA verification trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Modify state parameter to bypass MFA after initial authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter tampering in SOAP API\", \"Lab Description\": \"The SOAP-based MFA verification trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Modify state parameter to bypass MFA after initial authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via key confusion in microservice architecture\nDescription: The microservice authentication gateway accepts both HS256 and RS256 tokens but fails to properly validate key material. The application exposes public keys via /.well-known/jwks.json endpoint. To solve: Forge admin token by signing with public key as HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via key confusion in microservice architecture\", \"Lab Description\": \"The microservice authentication gateway accepts both HS256 and RS256 tokens but fails to properly validate key material. The application exposes public keys via /.well-known/jwks.json endpoint. To solve: Forge admin token by signing with public key as HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via open redirect in mobile app deep linking\nDescription: The mobile app's OAuth implementation accepts arbitrary redirect URIs in the deep link handler. The application fails to validate redirect_uri against allowlist when processing authorization codes. To solve: Steal authorization code by intercepting deep link with attacker-controlled redirect URI.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via open redirect in mobile app deep linking\", \"Lab Description\": \"The mobile app's OAuth implementation accepts arbitrary redirect URIs in the deep link handler. The application fails to validate redirect_uri against allowlist when processing authorization codes. To solve: Steal authorization code by intercepting deep link with attacker-controlled redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket connection ID reuse\nDescription: The real-time application assigns session tokens during WebSocket connection establishment. The server reuses session IDs for reconnecting clients with same connection ID. To solve: Fixate session ID by forcing victim to reuse your WebSocket connection parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket connection ID reuse\", \"Lab Description\": \"The real-time application assigns session tokens during WebSocket connection establishment. The server reuses session IDs for reconnecting clients with same connection ID. To solve: Fixate session ID by forcing victim to reuse your WebSocket connection parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via time-of-check to time-of-use race condition\nDescription: The MFA verification endpoint has a race window between code validation and session marking. The application doesn't use atomic operations for MFA state transitions. To solve: Send parallel requests to bypass MFA by exploiting the race condition.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-of-check to time-of-use race condition\", \"Lab Description\": \"The MFA verification endpoint has a race window between code validation and session marking. The application doesn't use atomic operations for MFA state transitions. To solve: Send parallel requests to bypass MFA by exploiting the race condition.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via header injection in API gateway\nDescription: The API gateway validates JWT tokens but fails to properly sanitize header values. The application processes unsigned tokens when x-verify-algorithm header is present. To solve: Gain admin access by stripping JWT signature while injecting custom verification header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via header injection in API gateway\", \"Lab Description\": \"The API gateway validates JWT tokens but fails to properly sanitize header values. The application processes unsigned tokens when x-verify-algorithm header is present. To solve: Gain admin access by stripping JWT signature while injecting custom verification header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA\nDescription: The single-page application implements OAuth with overly permissive CORS headers. The API endpoints allow arbitrary origins and include credentials in responses. To solve: Retrieve access token by making cross-origin requests from malicious site.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA\", \"Lab Description\": \"The single-page application implements OAuth with overly permissive CORS headers. The API endpoints allow arbitrary origins and include credentials in responses. To solve: Retrieve access token by making cross-origin requests from malicious site.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 connection coalescing\nDescription: The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 connection coalescing\", \"Lab Description\": \"The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter manipulation in REST API\nDescription: The MFA verification endpoint trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Bypass MFA by modifying state parameter to match initial request value.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter manipulation in REST API\", \"Lab Description\": \"The MFA verification endpoint trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Bypass MFA by modifying state parameter to match initial request value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The application uses JWT for session management but fails to validate the algorithm properly. The vulnerable endpoint accepts unsigned tokens when alg:none is specified. To solve: craft a valid JWT with alg:none and escalate privileges to admin.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The application uses JWT for session management but fails to validate the algorithm properly. The vulnerable endpoint accepts unsigned tokens when alg:none is specified. To solve: craft a valid JWT with alg:none and escalate privileges to admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured callback in SPA\nDescription: The OAuth implementation leaks access tokens through verbose error messages when invalid callback URLs are provided. The application fails to validate redirect URIs properly. To solve: exploit the token leakage to gain access to another user's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured callback in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through verbose error messages when invalid callback URLs are provided. The application fails to validate redirect URIs properly. To solve: exploit the token leakage to gain access to another user's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation in user authentication\nDescription: The GraphQL API allows setting arbitrary session IDs during login through a vulnerable mutation. The application doesn't regenerate session tokens after authentication. To solve: fixate a session ID and trick a victim into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation in user authentication\", \"Lab Description\": \"The GraphQL API allows setting arbitrary session IDs during login through a vulnerable mutation. The application doesn't regenerate session tokens after authentication. To solve: fixate a session ID and trick a victim into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass through race condition in SOAP API\nDescription: The SOAP-based authentication service is vulnerable to race conditions during MFA verification. The application doesn't properly lock the account during verification attempts. To solve: exploit the race window to bypass MFA by sending parallel requests.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass through race condition in SOAP API\", \"Lab Description\": \"The SOAP-based authentication service is vulnerable to race conditions during MFA verification. The application doesn't properly lock the account during verification attempts. To solve: exploit the race window to bypass MFA by sending parallel requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header injection in microservice authentication\nDescription: The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service reads verification keys from filesystem based on untrusted kid value. To solve: forge admin token by injecting path to attacker-controlled key file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service reads verification keys from filesystem based on untrusted kid value. To solve: forge admin token by injecting path to attacker-controlled key file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via state parameter tampering\nDescription: The OAuth implementation fails to validate state parameter consistency between requests, allowing token swapping attacks. The vulnerable flow leaks tokens in frontend JavaScript. To solve: intercept victim's OAuth flow and swap tokens using modified state parameter.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via state parameter tampering\", \"Lab Description\": \"The OAuth implementation fails to validate state parameter consistency between requests, allowing token swapping attacks. The vulnerable flow leaks tokens in frontend JavaScript. To solve: intercept victim's OAuth flow and swap tokens using modified state parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint assigns sessions based on initial WebSocket connection parameters. The application doesn't regenerate session IDs after authentication. To solve: establish WebSocket connection with fixed session ID and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint assigns sessions based on initial WebSocket connection parameters. The application doesn't regenerate session IDs after authentication. To solve: establish WebSocket connection with fixed session ID and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via HTTP verb tampering in REST API\nDescription: The MFA verification endpoint fails to properly validate HTTP methods, allowing bypass via verb tampering. The vulnerable API accepts GET requests for actions requiring POST. To solve: bypass MFA by converting POST request to GET with parameters in query string.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP verb tampering in REST API\", \"Lab Description\": \"The MFA verification endpoint fails to properly validate HTTP methods, allowing bypass via verb tampering. The vulnerable API accepts GET requests for actions requiring POST. To solve: bypass MFA by converting POST request to GET with parameters in query string.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header injection in federated authentication\nDescription: The application's JWT validation improperly processes x5u header, allowing arbitrary certificate URL specification. The vulnerable endpoint fetches verification certificates from attacker-controlled locations. To solve: forge admin token by hosting malicious certificate and injecting URL in x5u header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header injection in federated authentication\", \"Lab Description\": \"The application's JWT validation improperly processes x5u header, allowing arbitrary certificate URL specification. The vulnerable endpoint fetches verification certificates from attacker-controlled locations. To solve: forge admin token by hosting malicious certificate and injecting URL in x5u header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA\nDescription: The OAuth implementation leaks access tokens through overly permissive CORS headers. The vulnerable endpoint includes tokens in responses to cross-origin requests. To solve: craft malicious page that retrieves victim's token via JavaScript fetch request.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through overly permissive CORS headers. The vulnerable endpoint includes tokens in responses to cross-origin requests. To solve: craft malicious page that retrieves victim's token via JavaScript fetch request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 header injection\nDescription: The application assigns sessions based on HTTP/2 pseudo-headers without proper validation. The vulnerable server processes :path header as session identifier. To solve: establish connection with malicious :path header and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 header injection\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 pseudo-headers without proper validation. The vulnerable server processes :path header as session identifier. To solve: establish connection with malicious :path header and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via case-sensitive endpoint in REST API\nDescription: The MFA verification endpoint is case-sensitive while the authentication service is not. The vulnerable API accepts different case variations for the same endpoint. To solve: bypass MFA by changing endpoint case while maintaining valid session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via case-sensitive endpoint in REST API\", \"Lab Description\": \"The MFA verification endpoint is case-sensitive while the authentication service is not. The vulnerable API accepts different case variations for the same endpoint. To solve: bypass MFA by changing endpoint case while maintaining valid session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT jku header injection in microservice authentication\nDescription: The application's JWT validation improperly validates the jku header parameter, allowing arbitrary JWKS endpoint specification. The vulnerable service fetches verification keys from untrusted locations. To solve: forge admin token by hosting malicious JWKS endpoint and injecting URL in jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT jku header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly validates the jku header parameter, allowing arbitrary JWKS endpoint specification. The vulnerable service fetches verification keys from untrusted locations. To solve: forge admin token by hosting malicious JWKS endpoint and injecting URL in jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure redirect_uri validation\nDescription: The OAuth implementation fails to properly validate redirect_uri parameters against whitelisted domains. The vulnerable flow allows token delivery to attacker-controlled endpoints. To solve: intercept authorization code and modify redirect_uri to capture tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure redirect_uri validation\", \"Lab Description\": \"The OAuth implementation fails to properly validate redirect_uri parameters against whitelisted domains. The vulnerable flow allows token delivery to attacker-controlled endpoints. To solve: intercept authorization code and modify redirect_uri to capture tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket subprotocol negotiation\nDescription: The application assigns sessions based on WebSocket subprotocol headers without proper validation. The vulnerable server uses Sec-WebSocket-Protocol header as session identifier. To solve: establish WebSocket connection with malicious subprotocol and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket subprotocol negotiation\", \"Lab Description\": \"The application assigns sessions based on WebSocket subprotocol headers without proper validation. The vulnerable server uses Sec-WebSocket-Protocol header as session identifier. To solve: establish WebSocket connection with malicious subprotocol and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via HTTP method confusion in REST API\nDescription: The MFA verification endpoint fails to enforce proper HTTP method restrictions. The vulnerable API accepts GET requests for actions requiring POST when using X-HTTP-Method-Override header. To solve: bypass MFA by converting request method while maintaining parameters.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP method confusion in REST API\", \"Lab Description\": \"The MFA verification endpoint fails to enforce proper HTTP method restrictions. The vulnerable API accepts GET requests for actions requiring POST when using X-HTTP-Method-Override header. To solve: bypass MFA by converting request method while maintaining parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm downgrade in API gateway authentication\nDescription: The API gateway fails to enforce JWT algorithm restrictions, allowing attackers to downgrade from RS256 to HS256. The vulnerable endpoint accepts HMAC-signed tokens while expecting RSA. To solve: forge admin token by re-signing with HMAC using public key as secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm downgrade in API gateway authentication\", \"Lab Description\": \"The API gateway fails to enforce JWT algorithm restrictions, allowing attackers to downgrade from RS256 to HS256. The vulnerable endpoint accepts HMAC-signed tokens while expecting RSA. To solve: forge admin token by re-signing with HMAC using public key as secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in SPA\nDescription: The OAuth implementation leaks access tokens through referer headers when loading external resources. The vulnerable SPA includes tokens in requests to third-party domains. To solve: create malicious page that forces token leakage via image tag.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through referer headers when loading external resources. The vulnerable SPA includes tokens in requests to third-party domains. To solve: create malicious page that forces token leakage via image tag.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL batch query\nDescription: The GraphQL endpoint assigns sessions based on batch operation IDs without proper validation. The vulnerable server uses operation names as session identifiers. To solve: craft batch query with fixed operation ID and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL batch query\", \"Lab Description\": \"The GraphQL endpoint assigns sessions based on batch operation IDs without proper validation. The vulnerable server uses operation names as session identifiers. To solve: craft batch query with fixed operation ID and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON parameter pollution in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON parameter pollution. The vulnerable API processes duplicate keys inconsistently. To solve: bypass MFA by injecting duplicate verified parameter with conflicting values.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON parameter pollution in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON parameter pollution. The vulnerable API processes duplicate keys inconsistently. To solve: bypass MFA by injecting duplicate verified parameter with conflicting values.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5c header injection in microservice authentication\nDescription: The application's JWT validation improperly processes x5c header certificates, allowing arbitrary certificate injection. The vulnerable endpoint trusts any certificate provided in the x5c header. To solve: forge admin token by injecting attacker-controlled certificate in x5c header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5c header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly processes x5c header certificates, allowing arbitrary certificate injection. The vulnerable endpoint trusts any certificate provided in the x5c header. To solve: forge admin token by injecting attacker-controlled certificate in x5c header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via open redirect in SPA\nDescription: The OAuth implementation contains an open redirect vulnerability that leaks access tokens. The vulnerable endpoint redirects to attacker-controlled domains with tokens in URL fragments. To solve: craft malicious redirect URL to capture victim's token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via open redirect in SPA\", \"Lab Description\": \"The OAuth implementation contains an open redirect vulnerability that leaks access tokens. The vulnerable endpoint redirects to attacker-controlled domains with tokens in URL fragments. To solve: craft malicious redirect URL to capture victim's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 trailer headers\nDescription: The application assigns sessions based on HTTP/2 trailer headers without validation. The vulnerable server processes session-id trailer header as authentication token. To solve: establish connection with malicious trailer header and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 trailer headers\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 trailer headers without validation. The vulnerable server processes session-id trailer header as authentication token. To solve: establish connection with malicious trailer header and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON array wrapping in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON array wrapping. The vulnerable API processes the first element when arrays are provided. To solve: bypass MFA by wrapping parameters in arrays.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON array wrapping in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON array wrapping. The vulnerable API processes the first element when arrays are provided. To solve: bypass MFA by wrapping parameters in arrays.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT cty header injection in API gateway authentication\nDescription: The API gateway improperly processes JWT content-type (cty) headers, allowing content type confusion attacks. The vulnerable endpoint executes JWTs with content-type 'text/xml' as XML documents. To solve: forge admin token by setting cty header to 'text/xml' and injecting XML payload.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT cty header injection in API gateway authentication\", \"Lab Description\": \"The API gateway improperly processes JWT content-type (cty) headers, allowing content type confusion attacks. The vulnerable endpoint executes JWTs with content-type 'text/xml' as XML documents. To solve: forge admin token by setting cty header to 'text/xml' and injecting XML payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebSocket subprotocol negotiation\nDescription: The OAuth implementation leaks access tokens through WebSocket subprotocol headers during connection upgrades. The vulnerable endpoint includes tokens in Sec-WebSocket-Protocol headers. To solve: establish WebSocket connection and capture token from subprotocol negotiation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebSocket subprotocol negotiation\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebSocket subprotocol headers during connection upgrades. The vulnerable endpoint includes tokens in Sec-WebSocket-Protocol headers. To solve: establish WebSocket connection and capture token from subprotocol negotiation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 QUIC transport parameters\nDescription: The application assigns sessions based on HTTP/3 QUIC transport parameters without validation. The vulnerable server uses initial_max_streams_bidi parameter as session identifier. To solve: establish QUIC connection with malicious transport parameter and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 QUIC transport parameters\", \"Lab Description\": \"The application assigns sessions based on HTTP/3 QUIC transport parameters without validation. The vulnerable server uses initial_max_streams_bidi parameter as session identifier. To solve: establish QUIC connection with malicious transport parameter and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON comment injection in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON comment injection. The vulnerable API parser processes comments in JSON payloads. To solve: bypass MFA by injecting commented-out verified parameter.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON comment injection in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON comment injection. The vulnerable API parser processes comments in JSON payloads. To solve: bypass MFA by injecting commented-out verified parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT typ header injection in microservice authentication\nDescription: The application's JWT validation improperly processes the typ header parameter, allowing type confusion attacks. The vulnerable endpoint accepts JWTs with typ 'xml' as XML documents. To solve: forge admin token by setting typ header to 'xml' and injecting XML payload.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT typ header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly processes the typ header parameter, allowing type confusion attacks. The vulnerable endpoint accepts JWTs with typ 'xml' as XML documents. To solve: forge admin token by setting typ header to 'xml' and injecting XML payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via DNS rebinding in SPA\nDescription: The OAuth implementation is vulnerable to DNS rebinding attacks through improperly validated redirect URIs. The vulnerable endpoint accepts IP addresses that can be rebound to attacker-controlled servers. To solve: exploit DNS rebinding to capture victim's token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via DNS rebinding in SPA\", \"Lab Description\": \"The OAuth implementation is vulnerable to DNS rebinding attacks through improperly validated redirect URIs. The vulnerable endpoint accepts IP addresses that can be rebound to attacker-controlled servers. To solve: exploit DNS rebinding to capture victim's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 PRIORITY frames\nDescription: The application assigns sessions based on HTTP/2 PRIORITY frame stream dependencies. The vulnerable server uses stream dependency IDs as session identifiers. To solve: establish connection with malicious PRIORITY frame and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 PRIORITY frames\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 PRIORITY frame stream dependencies. The vulnerable server uses stream dependency IDs as session identifiers. To solve: establish connection with malicious PRIORITY frame and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON numeric overflow in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON numeric overflow. The vulnerable API fails to properly validate large numeric codes. To solve: bypass MFA by submitting max integer value as verification code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON numeric overflow in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON numeric overflow. The vulnerable API fails to properly validate large numeric codes. To solve: bypass MFA by submitting max integer value as verification code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header SSRF in API gateway authentication\nDescription: The API gateway's JWT validation improperly processes x5u headers, allowing Server-Side Request Forgery (SSRF) attacks. The vulnerable endpoint fetches verification certificates from URLs specified in x5u headers without proper validation. To solve: forge admin token by hosting malicious certificate and injecting internal URL in x5u header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header SSRF in API gateway authentication\", \"Lab Description\": \"The API gateway's JWT validation improperly processes x5u headers, allowing Server-Side Request Forgery (SSRF) attacks. The vulnerable endpoint fetches verification certificates from URLs specified in x5u headers without proper validation. To solve: forge admin token by hosting malicious certificate and injecting internal URL in x5u header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebTransport session initiation\nDescription: The OAuth implementation leaks access tokens through WebTransport session initiation headers. The vulnerable endpoint includes tokens in session initiation metadata. To solve: establish WebTransport connection and capture token from session headers.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebTransport session initiation\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebTransport session initiation headers. The vulnerable endpoint includes tokens in session initiation metadata. To solve: establish WebTransport connection and capture token from session headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 SETTINGS parameters\nDescription: The application assigns sessions based on HTTP/3 SETTINGS frame parameters without validation. The vulnerable server uses MAX_FIELD_SECTION_SIZE parameter as session identifier. To solve: establish QUIC connection with malicious SETTINGS parameter and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 SETTINGS parameters\", \"Lab Description\": \"The application assigns sessions based on HTTP/3 SETTINGS frame parameters without validation. The vulnerable server uses MAX_FIELD_SECTION_SIZE parameter as session identifier. To solve: establish QUIC connection with malicious SETTINGS parameter and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON BigInt poisoning in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON BigInt poisoning. The vulnerable API fails to properly validate BigInt numeric codes. To solve: bypass MFA by submitting extremely large BigInt value as verification code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON BigInt poisoning in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON BigInt poisoning. The vulnerable API fails to properly validate BigInt numeric codes. To solve: bypass MFA by submitting extremely large BigInt value as verification code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5t parameter injection in microservice authentication\nDescription: The application's JWT validation improperly processes x5t (certificate thumbprint) parameters, allowing certificate spoofing. The vulnerable endpoint accepts any certificate matching the thumbprint in the JWT header. To solve: forge admin token by generating certificate with matching thumbprint and injecting into JWT header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5t parameter injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly processes x5t (certificate thumbprint) parameters, allowing certificate spoofing. The vulnerable endpoint accepts any certificate matching the thumbprint in the JWT header. To solve: forge admin token by generating certificate with matching thumbprint and injecting into JWT header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebRTC data channels\nDescription: The OAuth implementation leaks access tokens through WebRTC data channel establishment. The vulnerable endpoint includes tokens in SDP offers. To solve: establish WebRTC connection and capture token from SDP negotiation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebRTC data channels\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebRTC data channel establishment. The vulnerable endpoint includes tokens in SDP offers. To solve: establish WebRTC connection and capture token from SDP negotiation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 ALTSVC frames\nDescription: The application assigns sessions based on HTTP/2 ALTSVC frame parameters without validation. The vulnerable server uses alternative service identifiers as session tokens. To solve: establish connection with malicious ALTSVC frame and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 ALTSVC frames\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 ALTSVC frame parameters without validation. The vulnerable server uses alternative service identifiers as session tokens. To solve: establish connection with malicious ALTSVC frame and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON prototype pollution in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON prototype pollution. The vulnerable API fails to properly sanitize nested objects. To solve: bypass MFA by polluting Object prototype with verified property.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON prototype pollution in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON prototype pollution. The vulnerable API fails to properly sanitize nested objects. To solve: bypass MFA by polluting Object prototype with verified property.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none vulnerability in REST API authentication\nDescription: The application uses JWT tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when 'alg:none' is specified. To solve: Craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none vulnerability in REST API authentication\", \"Lab Description\": \"The application uses JWT tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when 'alg:none' is specified. To solve: Craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in social login\nDescription: The application's OAuth implementation leaks access tokens through referer headers when loading external resources. To solve: Capture the leaked token and use it to authenticate as another user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in social login\", \"Lab Description\": \"The application's OAuth implementation leaks access tokens through referer headers when loading external resources. To solve: Capture the leaked token and use it to authenticate as another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login CSRF in GraphQL endpoint\nDescription: The GraphQL API assigns session tokens before authentication is complete. To solve: Fixate a session token and force a victim to authenticate with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login CSRF in GraphQL endpoint\", \"Lab Description\": \"The GraphQL API assigns session tokens before authentication is complete. To solve: Fixate a session token and force a victim to authenticate with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The application checks MFA status via client-side parameter that can be manipulated. To solve: Bypass MFA by modifying the status parameter after partial authentication.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The application checks MFA status via client-side parameter that can be manipulated. To solve: Bypass MFA by modifying the status parameter after partial authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via insecure API rate limiting\nDescription: The login API has inconsistent rate limiting allowing credential stuffing attacks. To solve: Bypass rate limits using header manipulation and common credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via insecure API rate limiting\", \"Lab Description\": \"The login API has inconsistent rate limiting allowing credential stuffing attacks. To solve: Bypass rate limits using header manipulation and common credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session hijacking via subdomain cookie scope\nDescription: The application sets session cookies to parent domain allowing subdomain takeover. To solve: Exploit overly permissive cookie scope to hijack sessions across subdomains.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via subdomain cookie scope\", \"Lab Description\": \"The application sets session cookies to parent domain allowing subdomain takeover. To solve: Exploit overly permissive cookie scope to hijack sessions across subdomains.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header injection in microservice authentication\nDescription: The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service [trusts kid header without sanitization]. To solve: Forge a valid admin token by exploiting the kid parameter to load a predictable secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service [trusts kid header without sanitization]. To solve: Forge a valid admin token by exploiting the kid parameter to load a predictable secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via state parameter tampering\nDescription: The OAuth implementation fails to validate state parameters properly during token exchange. The application [maintains session state through unprotected cookies]. To solve: Hijack another user's OAuth flow by intercepting and modifying state parameters.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via state parameter tampering\", \"Lab Description\": \"The OAuth implementation fails to validate state parameters properly during token exchange. The application [maintains session state through unprotected cookies]. To solve: Hijack another user's OAuth flow by intercepting and modifying state parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses WS connections for multiple operations]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses WS connections for multiple operations]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification API\nDescription: The MFA verification endpoint suffers from a race condition when handling concurrent requests. The application [uses non-atomic operations for verification status]. To solve: Send parallel requests to bypass MFA by exploiting timing window between verification and status update.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification API\", \"Lab Description\": \"The MFA verification endpoint suffers from a race condition when handling concurrent requests. The application [uses non-atomic operations for verification status]. To solve: Send parallel requests to bypass MFA by exploiting timing window between verification and status update.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via JSONP authentication endpoint\nDescription: The legacy JSONP authentication endpoint lacks rate limiting and proper CORS headers. The application [exposes user enumeration through subtle response differences]. To solve: Perform credential stuffing attack via JSONP callbacks to bypass same-origin policy.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via JSONP authentication endpoint\", \"Lab Description\": \"The legacy JSONP authentication endpoint lacks rate limiting and proper CORS headers. The application [exposes user enumeration through subtle response differences]. To solve: Perform credential stuffing attack via JSONP callbacks to bypass same-origin policy.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation improperly trusts the jku header to fetch verification keys from external sources. The application [fails to validate jku domains]. To solve: Forge admin token by hosting malicious JWKS file and injecting your jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation improperly trusts the jku header to fetch verification keys from external sources. The application [fails to validate jku domains]. To solve: Forge admin token by hosting malicious JWKS file and injecting your jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via XSS in OAuth redirect_uri parameter\nDescription: The OAuth implementation allows arbitrary redirect_uri values and reflects session tokens in URL fragments. The application [stores session tokens client-side]. To solve: Chain XSS in redirect_uri with session fixation to hijack user sessions.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in OAuth redirect_uri parameter\", \"Lab Description\": \"The OAuth implementation allows arbitrary redirect_uri values and reflects session tokens in URL fragments. The application [stores session tokens client-side]. To solve: Chain XSS in redirect_uri with session fixation to hijack user sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via HTTP method tampering on verification endpoint\nDescription: The MFA verification endpoint fails to enforce proper HTTP method validation. The application [processes GET and POST identically]. To solve: Bypass MFA by converting POST verification to GET request with parameters in query string.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP method tampering on verification endpoint\", \"Lab Description\": \"The MFA verification endpoint fails to enforce proper HTTP method validation. The application [processes GET and POST identically]. To solve: Bypass MFA by converting POST verification to GET request with parameters in query string.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via case-sensitive password comparison\nDescription: The authentication endpoint performs case-sensitive password comparison against lowercase stored values. The application [stores passwords in lowercase]. To solve: Perform credential stuffing attack using lowercase variants of known password leaks.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-sensitive password comparison\", \"Lab Description\": \"The authentication endpoint performs case-sensitive password comparison against lowercase stored values. The application [stores passwords in lowercase]. To solve: Perform credential stuffing attack using lowercase variants of known password leaks.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking via GraphQL batch query IDOR\nDescription: The GraphQL endpoint processes batch queries with shared authentication context. The application [reuses session for all queries in batch]. To solve: Inject unauthorized queries alongside legitimate ones in batch request to access other users' data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via GraphQL batch query IDOR\", \"Lab Description\": \"The GraphQL endpoint processes batch queries with shared authentication context. The application [reuses session for all queries in batch]. To solve: Inject unauthorized queries alongside legitimate ones in batch request to access other users' data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT brute-force via weak HS256 secret in debug endpoint\nDescription: The debug endpoint leaks JWT verification secrets through verbose error messages. The application [exposes secret in HMAC-SHA256 validation failures]. To solve: Extract weak secret from error response and forge admin token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT brute-force via weak HS256 secret in debug endpoint\", \"Lab Description\": \"The debug endpoint leaks JWT verification secrets through verbose error messages. The application [exposes secret in HMAC-SHA256 validation failures]. To solve: Extract weak secret from error response and forge admin token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via asymmetric to symmetric substitution\nDescription: The JWT implementation accepts both asymmetric and symmetric algorithms but fails to validate the signing method consistently. The application [treats RS256 as HS256 when key is embedded]. To solve: Convert public key to symmetric secret and forge valid tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via asymmetric to symmetric substitution\", \"Lab Description\": \"The JWT implementation accepts both asymmetric and symmetric algorithms but fails to validate the signing method consistently. The application [treats RS256 as HS256 when key is embedded]. To solve: Convert public key to symmetric secret and forge valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe CSP bypass\nDescription: The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe CSP bypass\", \"Lab Description\": \"The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake parameter injection\nDescription: The WebSocket connection assigns session tokens based on unvalidated handshake parameters. The application [trusts ws:// URL parameters for session binding]. To solve: Inject session token through crafted WebSocket URL and force victim to authenticate.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake parameter injection\", \"Lab Description\": \"The WebSocket connection assigns session tokens based on unvalidated handshake parameters. The application [trusts ws:// URL parameters for session binding]. To solve: Inject session token through crafted WebSocket URL and force victim to authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via time-based one-time password prediction\nDescription: The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable MFA seeds based on username]. To solve: Calculate valid TOTP codes by reverse-engineering the seed generation algorithm.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-based one-time password prediction\", \"Lab Description\": \"The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable MFA seeds based on username]. To solve: Calculate valid TOTP codes by reverse-engineering the seed generation algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via case-insensitive username matching\nDescription: The authentication endpoint performs case-insensitive username comparison but case-sensitive password checks. The application [stores usernames in lowercase but preserves case in passwords]. To solve: Perform credential stuffing with case-varied usernames against known password lists.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-insensitive username matching\", \"Lab Description\": \"The authentication endpoint performs case-insensitive username comparison but case-sensitive password checks. The application [stores usernames in lowercase but preserves case in passwords]. To solve: Perform credential stuffing with case-varied usernames against known password lists.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT key injection via jwk header parameter\nDescription: The JWT validation improperly processes embedded jwk headers in tokens. The application [trusts self-signed keys without verification]. To solve: Inject malicious RSA public key in jwk header and sign token with corresponding private key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT key injection via jwk header parameter\", \"Lab Description\": \"The JWT validation improperly processes embedded jwk headers in tokens. The application [trusts self-signed keys without verification]. To solve: Inject malicious RSA public key in jwk header and sign token with corresponding private key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect\nDescription: The OAuth implementation allows arbitrary redirect_uri values through an open redirect vulnerability. The application [leaks tokens in URL fragments]. To solve: Chain open redirect with token leakage to steal authentication tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect\", \"Lab Description\": \"The OAuth implementation allows arbitrary redirect_uri values through an open redirect vulnerability. The application [leaks tokens in URL fragments]. To solve: Chain open redirect with token leakage to steal authentication tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket subscriptions\nDescription: The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses connection IDs as session tokens]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket subscriptions\", \"Lab Description\": \"The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses connection IDs as session tokens]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via status code manipulation\nDescription: The MFA verification endpoint relies on client-side status code interpretation. The application [processes failed verifications as successes]. To solve: Intercept and modify status code from 403 to 200 to bypass MFA.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status code manipulation\", \"Lab Description\": \"The MFA verification endpoint relies on client-side status code interpretation. The application [processes failed verifications as successes]. To solve: Intercept and modify status code from 403 to 200 to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via password reset timing attack\nDescription: The password reset endpoint leaks account existence through response timing. The application [takes longer to respond for valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with known passwords.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via password reset timing attack\", \"Lab Description\": \"The password reset endpoint leaks account existence through response timing. The application [takes longer to respond for valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with known passwords.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking via JWT cross-service replay\nDescription: The same JWT secret is used across multiple microservices. The application [shares verification keys between services]. To solve: Capture low-privilege token from one service and replay it to privileged endpoints in another service.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via JWT cross-service replay\", \"Lab Description\": \"The same JWT secret is used across multiple microservices. The application [shares verification keys between services]. To solve: Capture low-privilege token from one service and replay it to privileged endpoints in another service.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via empty signature\nDescription: The JWT validation fails when encountering tokens with empty signatures. The application [incorrectly processes unsigned tokens as valid]. To solve: Remove the signature portion from a valid JWT while keeping the header and payload intact to bypass authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via empty signature\", \"Lab Description\": \"The JWT validation fails when encountering tokens with empty signatures. The application [incorrectly processes unsigned tokens as valid]. To solve: Remove the signature portion from a valid JWT while keeping the header and payload intact to bypass authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS\nDescription: The OAuth token endpoint has overly permissive CORS headers. The application [exposes tokens to arbitrary origins]. To solve: Craft malicious JavaScript to retrieve tokens cross-origin and exfiltrate them to an attacker-controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS\", \"Lab Description\": \"The OAuth token endpoint has overly permissive CORS headers. The application [exposes tokens to arbitrary origins]. To solve: Craft malicious JavaScript to retrieve tokens cross-origin and exfiltrate them to an attacker-controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via JSON Web Encryption\nDescription: The application uses JWE tokens for session management but fails to validate key ownership. The application [accepts encrypted tokens with attacker-controlled keys]. To solve: Generate new encryption key pair, create JWE token with victim's session data, and fixate session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JSON Web Encryption\", \"Lab Description\": \"The application uses JWE tokens for session management but fails to validate key ownership. The application [accepts encrypted tokens with attacker-controlled keys]. To solve: Generate new encryption key pair, create JWE token with victim's session data, and fixate session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via parallel session exploitation\nDescription: The MFA verification doesn't invalidate existing sessions after completion. The application [allows multiple concurrent sessions]. To solve: Maintain authenticated session while completing MFA in different browser to bypass verification requirement.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via parallel session exploitation\", \"Lab Description\": \"The MFA verification doesn't invalidate existing sessions after completion. The application [allows multiple concurrent sessions]. To solve: Maintain authenticated session while completing MFA in different browser to bypass verification requirement.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via key confusion attack\nDescription: The JWT implementation accepts both symmetric and asymmetric algorithms but fails to properly validate key types. The application [treats public keys as HMAC secrets]. To solve: Exploit algorithm confusion to forge valid tokens by signing with the public key as an HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via key confusion attack\", \"Lab Description\": \"The JWT implementation accepts both symmetric and asymmetric algorithms but fails to properly validate key types. The application [treats public keys as HMAC secrets]. To solve: Exploit algorithm confusion to forge valid tokens by signing with the public key as an HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via referer header leakage\nDescription: The OAuth implementation leaks access tokens through referer headers when loading external resources. The application [includes tokens in GET parameters]. To solve: Craft malicious page that triggers resource loading to capture tokens through referer headers.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via referer header leakage\", \"Lab Description\": \"The OAuth implementation leaks access tokens through referer headers when loading external resources. The application [includes tokens in GET parameters]. To solve: Craft malicious page that triggers resource loading to capture tokens through referer headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 request smuggling\nDescription: The application's HTTP/2 implementation improperly processes session cookies across multiplexed streams. The application [assigns sessions based on first request's headers]. To solve: Craft HTTP/2 requests to fixate session cookie across multiple connections.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 request smuggling\", \"Lab Description\": \"The application's HTTP/2 implementation improperly processes session cookies across multiplexed streams. The application [assigns sessions based on first request's headers]. To solve: Craft HTTP/2 requests to fixate session cookie across multiple connections.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via response manipulation\nDescription: The MFA verification relies on client-side validation of success responses. The application [processes all 200 responses as successful]. To solve: Intercept and modify failed verification responses to appear successful.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via response manipulation\", \"Lab Description\": \"The MFA verification relies on client-side validation of success responses. The application [processes all 200 responses as successful]. To solve: Intercept and modify failed verification responses to appear successful.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via password reset timing attack\nDescription: The password reset endpoint leaks account existence through response timing. The application [takes longer to process valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with common passwords.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via password reset timing attack\", \"Lab Description\": \"The password reset endpoint leaks account existence through response timing. The application [takes longer to process valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with common passwords.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via null signature attack\nDescription: The JWT validation fails to properly handle tokens with null bytes in the signature. The application [incorrectly validates truncated signatures]. To solve: Craft a token with null bytes in the signature to bypass validation while maintaining valid header and payload.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via null signature attack\", \"Lab Description\": \"The JWT validation fails to properly handle tokens with null bytes in the signature. The application [incorrectly validates truncated signatures]. To solve: Craft a token with null bytes in the signature to bypass validation while maintaining valid header and payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebSocket subprotocol negotiation\nDescription: The OAuth implementation leaks tokens during WebSocket subprotocol handshake. The application [includes sensitive tokens in Sec-WebSocket-Protocol headers]. To solve: Intercept WebSocket connections and extract tokens from handshake headers.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebSocket subprotocol negotiation\", \"Lab Description\": \"The OAuth implementation leaks tokens during WebSocket subprotocol handshake. The application [includes sensitive tokens in Sec-WebSocket-Protocol headers]. To solve: Intercept WebSocket connections and extract tokens from handshake headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 connection migration\nDescription: The HTTP/3 implementation assigns session tokens based on QUIC connection IDs. The application [reuses session state across migrated connections]. To solve: Fixate session by forcing connection migration before authentication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 connection migration\", \"Lab Description\": \"The HTTP/3 implementation assigns session tokens based on QUIC connection IDs. The application [reuses session state across migrated connections]. To solve: Fixate session by forcing connection migration before authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via WebAuthn replay attack\nDescription: The WebAuthn implementation fails to validate challenge nonces properly. The application [accepts reused authentication assertions]. To solve: Capture valid WebAuthn assertion and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebAuthn replay attack\", \"Lab Description\": \"The WebAuthn implementation fails to validate challenge nonces properly. The application [accepts reused authentication assertions]. To solve: Capture valid WebAuthn assertion and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via case-sensitive cookie parsing\nDescription: The authentication system processes cookies with case-sensitive inconsistencies. The application [treats 'Session' and 'session' as different cookies]. To solve: Perform credential stuffing with case-varied cookie names to bypass authentication.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-sensitive cookie parsing\", \"Lab Description\": \"The authentication system processes cookies with case-sensitive inconsistencies. The application [treats 'Session' and 'session' as different cookies]. To solve: Perform credential stuffing with case-varied cookie names to bypass authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT authentication bypass via key ID confusion\nDescription: The JWT implementation incorrectly processes key IDs from untrusted sources. The application [uses kid header to select verification keys without proper validation]. To solve: Inject malicious kid header pointing to attacker-controlled key to forge valid tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via key ID confusion\", \"Lab Description\": \"The JWT implementation incorrectly processes key IDs from untrusted sources. The application [uses kid header to select verification keys without proper validation]. To solve: Inject malicious kid header pointing to attacker-controlled key to forge valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via iframe CSP bypass\nDescription: The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via iframe CSP bypass\", \"Lab Description\": \"The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 stream prioritization\nDescription: The HTTP/2 implementation assigns sessions based on stream dependencies. The application [reuses session state across dependent streams]. To solve: Craft HTTP/2 requests with malicious stream dependencies to fixate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 stream prioritization\", \"Lab Description\": \"The HTTP/2 implementation assigns sessions based on stream dependencies. The application [reuses session state across dependent streams]. To solve: Craft HTTP/2 requests with malicious stream dependencies to fixate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via TOTP prediction\nDescription: The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable OTP sequences]. To solve: Capture multiple OTPs and reverse-engineer the generation algorithm to predict valid codes.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via TOTP prediction\", \"Lab Description\": \"The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable OTP sequences]. To solve: Capture multiple OTPs and reverse-engineer the generation algorithm to predict valid codes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via header parameter injection\nDescription: The JWT implementation fails to properly sanitize header parameters before verification. The application [processes malicious x5u header values as valid certificate URLs]. To solve: Inject x5u header pointing to attacker-controlled certificate to bypass signature validation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via header parameter injection\", \"Lab Description\": \"The JWT implementation fails to properly sanitize header parameters before verification. The application [processes malicious x5u header values as valid certificate URLs]. To solve: Inject x5u header pointing to attacker-controlled certificate to bypass signature validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via DNS prefetch\nDescription: The OAuth implementation includes tokens in external resource URLs that trigger DNS prefetching. The application [leaks tokens through DNS lookups]. To solve: Craft malicious page with resource links containing tokens to capture them via DNS exfiltration.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via DNS prefetch\", \"Lab Description\": \"The OAuth implementation includes tokens in external resource URLs that trigger DNS prefetching. The application [leaks tokens through DNS lookups]. To solve: Craft malicious page with resource links containing tokens to capture them via DNS exfiltration.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebTransport session IDs\nDescription: The WebTransport implementation assigns session tokens before authentication. The application [uses connection IDs as session tokens]. To solve: Establish WebTransport connection, fixate session ID, and force victim to authenticate over same connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport session IDs\", \"Lab Description\": \"The WebTransport implementation assigns session tokens before authentication. The application [uses connection IDs as session tokens]. To solve: Establish WebTransport connection, fixate session ID, and force victim to authenticate over same connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter tampering\nDescription: The MFA verification relies on client-supplied state parameters. The application [trusts state parameters without server-side validation]. To solve: Modify state parameter to bypass verification after initial MFA challenge.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter tampering\", \"Lab Description\": \"The MFA verification relies on client-supplied state parameters. The application [trusts state parameters without server-side validation]. To solve: Modify state parameter to bypass verification after initial MFA challenge.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via HTTP/3 connection reuse\nDescription: The authentication system reuses HTTP/3 connections for multiple requests. The application [maintains session state across requests on same connection]. To solve: Perform credential stuffing by reusing established connections to bypass rate limits.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via HTTP/3 connection reuse\", \"Lab Description\": \"The authentication system reuses HTTP/3 connections for multiple requests. The application [maintains session state across requests on same connection]. To solve: Perform credential stuffing by reusing established connections to bypass rate limits.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm switching vulnerability in REST API\nDescription: The lab's authentication system uses JWTs with flawed algorithm validation. The application accepts unsigned tokens when the algorithm is switched to 'none'. To solve: forge a valid JWT for the admin user by exploiting algorithm confusion.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm switching vulnerability in REST API\", \"Lab Description\": \"The lab's authentication system uses JWTs with flawed algorithm validation. The application accepts unsigned tokens when the algorithm is switched to 'none'. To solve: forge a valid JWT for the admin user by exploiting algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in SPA\nDescription: The OAuth implementation leaks authorization codes through referer headers when loading external resources. The application doesn't validate the redirect_uri properly. To solve: steal an OAuth token by intercepting the referer header and gain access to the victim's data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in SPA\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through referer headers when loading external resources. The application doesn't validate the redirect_uri properly. To solve: steal an OAuth token by intercepting the referer header and gain access to the victim's data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batching attack on auth mutation\nDescription: The GraphQL endpoint processes authentication mutations in batches without rate limiting. The application fails to track login attempts across batched requests. To solve: perform a credential stuffing attack by sending 1000 password guesses in a single GraphQL batch request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack on auth mutation\", \"Lab Description\": \"The GraphQL endpoint processes authentication mutations in batches without rate limiting. The application fails to track login attempts across batched requests. To solve: perform a credential stuffing attack by sending 1000 password guesses in a single GraphQL batch request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via pre-authenticated JWT in SOAP API\nDescription: The SOAP-based authentication service issues JWTs before email verification is complete. The application doesn't invalidate pre-verification tokens after verification. To solve: fixate a session by obtaining a pre-verification token, completing verification, then using the original token to access the account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via pre-authenticated JWT in SOAP API\", \"Lab Description\": \"The SOAP-based authentication service issues JWTs before email verification is complete. The application doesn't invalidate pre-verification tokens after verification. To solve: fixate a session by obtaining a pre-verification token, completing verification, then using the original token to access the account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The multi-factor authentication flow can be bypassed by manipulating the status parameter in the verification request. The application fails to validate the MFA completion state server-side. To solve: intercept the MFA verification process and modify the status parameter to 'verified' before the code is validated.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow can be bypassed by manipulating the status parameter in the verification request. The application fails to validate the MFA completion state server-side. To solve: intercept the MFA verification process and modify the status parameter to 'verified' before the code is validated.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT validation service vulnerable to key path traversal via kid header. The application loads verification keys from filesystem without sanitization. To solve: forge admin token by forcing system to use public key from predictable location.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT validation service vulnerable to key path traversal via kid header. The application loads verification keys from filesystem without sanitization. To solve: forge admin token by forcing system to use public key from predictable location.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth state parameter CSRF in social login flow\nDescription: The OAuth implementation fails to validate state parameter in callback handler. The application accepts any state value after initial redirect. To solve: craft malicious link that authenticates victim to attacker's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth state parameter CSRF in social login flow\", \"Lab Description\": \"The OAuth implementation fails to validate state parameter in callback handler. The application accepts any state value after initial redirect. To solve: craft malicious link that authenticates victim to attacker's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via JSONP callback parameter\nDescription: The JSONP endpoint leaks session tokens through callback parameter reflection. The application embeds sensitive data in JavaScript responses. To solve: fixate victim's session by crafting malicious JSONP request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JSONP callback parameter\", \"Lab Description\": \"The JSONP endpoint leaks session tokens through callback parameter reflection. The application embeds sensitive data in JavaScript responses. To solve: fixate victim's session by crafting malicious JSONP request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Forwarded-Host\nDescription: The password reset functionality trusts X-Forwarded-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Forwarded-Host\", \"Lab Description\": \"The password reset functionality trusts X-Forwarded-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header SSRF in banking API\nDescription: The JWT validation vulnerable to SSRF via x5u header fetching external certificates. The application processes x5u URLs without proper validation. To solve: forge admin token by forcing server to fetch verification certificate from attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header SSRF in banking API\", \"Lab Description\": \"The JWT validation vulnerable to SSRF via x5u header fetching external certificates. The application processes x5u URLs without proper validation. To solve: forge admin token by forcing server to fetch verification certificate from attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via parameter pollution\nDescription: The OAuth token endpoint vulnerable to parameter pollution in redirect_uri. The application processes multiple redirect_uri parameters inconsistently. To solve: steal authorization code by injecting secondary redirect_uri pointing to attacker server.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via parameter pollution\", \"Lab Description\": \"The OAuth token endpoint vulnerable to parameter pollution in redirect_uri. The application processes multiple redirect_uri parameters inconsistently. To solve: steal authorization code by injecting secondary redirect_uri pointing to attacker server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: The WebSocket connection assigns sessions based on handshake headers. The application reuses existing session cookies without regeneration. To solve: fixate victim's session by forcing WebSocket connection with predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"The WebSocket connection assigns sessions based on handshake headers. The application reuses existing session cookies without regeneration. To solve: fixate victim's session by forcing WebSocket connection with predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via Host header\nDescription: The password reset functionality trusts dynamic Host header for link generation. The application doesn't validate host against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via Host header\", \"Lab Description\": \"The password reset functionality trusts dynamic Host header for link generation. The application doesn't validate host against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via x5c header injection\nDescription: The JWT validation accepts arbitrary x5c headers containing embedded certificates. The application doesn't verify certificate chain. To solve: forge admin token by embedding attacker-generated certificate in x5c header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via x5c header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary x5c headers containing embedded certificates. The application doesn't verify certificate chain. To solve: forge admin token by embedding attacker-generated certificate in x5c header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT typ header injection in healthcare API\nDescription: The JWT validation vulnerable to algorithm confusion via typ header manipulation. The application processes tokens with typ=None without proper verification. To solve: forge admin token by switching algorithm to none and removing signature.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT typ header injection in healthcare API\", \"Lab Description\": \"The JWT validation vulnerable to algorithm confusion via typ header manipulation. The application processes tokens with typ=None without proper verification. To solve: forge admin token by switching algorithm to none and removing signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via iframe in SPA\nDescription: The OAuth implementation leaks access tokens through postMessage in embedded iframes. The application doesn't validate message origins in token callbacks. To solve: steal OAuth token by crafting malicious page that intercepts postMessage communications.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through postMessage in embedded iframes. The application doesn't validate message origins in token callbacks. To solve: steal OAuth token by crafting malicious page that intercepts postMessage communications.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket initialization\nDescription: The GraphQL subscription endpoint assigns sessions during websocket connection. The application reuses session cookies from HTTP requests without regeneration. To solve: fixate victim's session by forcing websocket connection with predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket initialization\", \"Lab Description\": \"The GraphQL subscription endpoint assigns sessions during websocket connection. The application reuses session cookies from HTTP requests without regeneration. To solve: fixate victim's session by forcing websocket connection with predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Original-Host header\nDescription: The password reset functionality trusts X-Original-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Original-Host header\", \"Lab Description\": \"The password reset functionality trusts X-Original-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jwk header injection\nDescription: The JWT validation accepts arbitrary jwk headers containing embedded keys. The application doesn't verify key provenance. To solve: forge admin token by embedding attacker-generated public key in jwk header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jwk header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary jwk headers containing embedded keys. The application doesn't verify key provenance. To solve: forge admin token by embedding attacker-generated public key in jwk header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT cty header injection in banking API\nDescription: The JWT validation vulnerable to content type confusion via cty header manipulation. The application processes tokens with cty=text/plain without signature verification. To solve: forge admin token by switching content type and removing signature.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT cty header injection in banking API\", \"Lab Description\": \"The JWT validation vulnerable to content type confusion via cty header manipulation. The application processes tokens with cty=text/plain without signature verification. To solve: forge admin token by switching content type and removing signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebSocket in SPA\nDescription: The OAuth implementation leaks access tokens through WebSocket connection parameters. The application embeds tokens in WebSocket URLs without validation. To solve: steal OAuth token by intercepting WebSocket initialization requests.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebSocket in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebSocket connection parameters. The application embeds tokens in WebSocket URLs without validation. To solve: steal OAuth token by intercepting WebSocket initialization requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 push promise\nDescription: The HTTP/2 server pushes session cookies via push promises without proper validation. The application accepts pushed cookies from unauthorized sources. To solve: fixate victim's session by injecting malicious push promises containing predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 push promise\", \"Lab Description\": \"The HTTP/2 server pushes session cookies via push promises without proper validation. The application accepts pushed cookies from unauthorized sources. To solve: fixate victim's session by injecting malicious push promises containing predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Rewrite-URL header\nDescription: The password reset functionality trusts X-Rewrite-URL header for link generation. The application doesn't validate rewrite headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Rewrite-URL header\", \"Lab Description\": \"The password reset functionality trusts X-Rewrite-URL header for link generation. The application doesn't validate rewrite headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via x5t header injection\nDescription: The JWT validation accepts arbitrary x5t headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing certificate thumbprint in x5t header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via x5t header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary x5t headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing certificate thumbprint in x5t header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg=none bypass in healthcare API\nDescription: The JWT validation accepts unsigned tokens when alg=none is specified in the header. The application fails to properly validate token signatures. To solve: forge an admin token by setting algorithm to none and removing the signature.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg=none bypass in healthcare API\", \"Lab Description\": \"The JWT validation accepts unsigned tokens when alg=none is specified in the header. The application fails to properly validate token signatures. To solve: forge an admin token by setting algorithm to none and removing the signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via Referer header\nDescription: The OAuth implementation leaks authorization codes through Referer headers when loading external resources. The application fails to strip sensitive tokens from Referer headers. To solve: steal an OAuth token by forcing a request to an attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via Referer header\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through Referer headers when loading external resources. The application fails to strip sensitive tokens from Referer headers. To solve: steal an OAuth token by forcing a request to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint assigns sessions during websocket initialization without proper validation. The application reuses session IDs from connection parameters. To solve: fixate a victim's session by forcing them to connect with a predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint assigns sessions during websocket initialization without proper validation. The application reuses session IDs from connection parameters. To solve: fixate a victim's session by forcing them to connect with a predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Forwarded-Prefix\nDescription: The password reset functionality trusts X-Forwarded-Prefix header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison the reset link to point to an attacker-controlled domain.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Forwarded-Prefix\", \"Lab Description\": \"The password reset functionality trusts X-Forwarded-Prefix header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison the reset link to point to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header\nDescription: The JWT validation accepts arbitrary jku headers pointing to external public keys. The application doesn't verify the key server's authenticity. To solve: forge an admin token by hosting a malicious public key and referencing it in the jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header\", \"Lab Description\": \"The JWT validation accepts arbitrary jku headers pointing to external public keys. The application doesn't verify the key server's authenticity. To solve: forge an admin token by hosting a malicious public key and referencing it in the jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT cnf claim injection in healthcare API\nDescription: The JWT validation vulnerable to key confusion via cnf claim manipulation. The application processes cnf claims without proper verification of key ownership. To solve: forge admin token by injecting malicious cnf claim pointing to attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT cnf claim injection in healthcare API\", \"Lab Description\": \"The JWT validation vulnerable to key confusion via cnf claim manipulation. The application processes cnf claims without proper verification of key ownership. To solve: forge admin token by injecting malicious cnf claim pointing to attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebRTC in SPA\nDescription: The OAuth implementation leaks access tokens through WebRTC ICE candidates. The application embeds tokens in STUN/TURN server credentials without proper sanitization. To solve: steal OAuth token by intercepting WebRTC negotiation messages.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebRTC in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebRTC ICE candidates. The application embeds tokens in STUN/TURN server credentials without proper sanitization. To solve: steal OAuth token by intercepting WebRTC negotiation messages.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 early data\nDescription: The HTTP/3 server accepts session cookies in early data (0-RTT) without proper validation. The application reuses session IDs from previous connections. To solve: fixate victim's session by forcing 0-RTT request with predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 early data\", \"Lab Description\": \"The HTTP/3 server accepts session cookies in early data (0-RTT) without proper validation. The application reuses session IDs from previous connections. To solve: fixate victim's session by forcing 0-RTT request with predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Original-URL header\nDescription: The password reset functionality trusts X-Original-URL header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison reset link to point to attacker-controlled domain.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Original-URL header\", \"Lab Description\": \"The password reset functionality trusts X-Original-URL header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison reset link to point to attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via x5t#S256 header injection\nDescription: The JWT validation accepts arbitrary x5t#S256 headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing SHA-256 certificate thumbprint in x5t#S256 header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via x5t#S256 header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary x5t#S256 headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing SHA-256 certificate thumbprint in x5t#S256 header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API\nDescription: The lab's authentication system uses JWTs with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for admin user by exploiting signature verification flaws.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API\", \"Lab Description\": \"The lab's authentication system uses JWTs with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for admin user by exploiting signature verification flaws.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via open redirect\nDescription: The OAuth implementation leaks authorization codes through unvalidated redirect URLs. The application fails to verify redirect_uri against whitelisted domains. To solve: steal an OAuth token by chaining an open redirect with the OAuth flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via open redirect\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through unvalidated redirect URLs. The application fails to verify redirect_uri against whitelisted domains. To solve: steal an OAuth token by chaining an open redirect with the OAuth flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batching attack on auth endpoint\nDescription: The GraphQL API allows query batching that bypasses rate limiting on authentication attempts. The application processes batched queries sequentially without cumulative rate checks. To solve: brute-force credentials by sending 100 login attempts in a single batch request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack on auth endpoint\", \"Lab Description\": \"The GraphQL API allows query batching that bypasses rate limiting on authentication attempts. The application processes batched queries sequentially without cumulative rate checks. To solve: brute-force credentials by sending 100 login attempts in a single batch request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via subdomain cookie scope\nDescription: The application sets session cookies without proper domain restrictions, allowing fixation attacks across subdomains. The vulnerable component accepts pre-set session IDs from untrusted subdomains. To solve: fix a session cookie on a subdomain then trick the victim into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via subdomain cookie scope\", \"Lab Description\": \"The application sets session cookies without proper domain restrictions, allowing fixation attacks across subdomains. The vulnerable component accepts pre-set session IDs from untrusted subdomains. To solve: fix a session cookie on a subdomain then trick the victim into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via state parameter manipulation\nDescription: The multi-factor authentication flow relies on client-side state validation. The application fails to verify server-side that the same device completes both authentication steps. To solve: initiate MFA on attacker device then complete on victim device by copying state parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow relies on client-side state validation. The application fails to verify server-side that the same device completes both authentication steps. To solve: initiate MFA on attacker device then complete on victim device by copying state parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice auth\nDescription: The JWT validation service improperly processes kid header values, allowing local file inclusion. The application blindly trusts the kid parameter to load verification keys. To solve: forge a valid admin token by forcing the system to use a predictable local file as the verification key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice auth\", \"Lab Description\": \"The JWT validation service improperly processes kid header values, allowing local file inclusion. The application blindly trusts the kid parameter to load verification keys. To solve: forge a valid admin token by forcing the system to use a predictable local file as the verification key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via state parameter injection\nDescription: The OAuth implementation fails to properly bind state parameters to session contexts. The application accepts valid tokens with mismatched state values. To solve: intercept another user's OAuth flow and swap their authorization code into your session while maintaining your original state parameter.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via state parameter injection\", \"Lab Description\": \"The OAuth implementation fails to properly bind state parameters to session contexts. The application accepts valid tokens with mismatched state values. To solve: intercept another user's OAuth flow and swap their authorization code into your session while maintaining your original state parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session prediction via JTI collision in JWT revocation\nDescription: The JWT revocation system uses predictable jti claims that can be brute-forced. The application fails to properly randomize unique token identifiers. To solve: predict valid jti values for active sessions and bypass token revocation checks.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session prediction via JTI collision in JWT revocation\", \"Lab Description\": \"The JWT revocation system uses predictable jti claims that can be brute-forced. The application fails to properly randomize unique token identifiers. To solve: predict valid jti values for active sessions and bypass token revocation checks.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification state\nDescription: The multi-factor authentication system has a race window between verification and session update. The application checks MFA status without proper synchronization. To solve: send parallel requests to exploit the time gap between verification and session marking.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification state\", \"Lab Description\": \"The multi-factor authentication system has a race window between verification and session update. The application checks MFA status without proper synchronization. To solve: send parallel requests to exploit the time gap between verification and session marking.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Credential stuffing via HTTP verb tampering on auth endpoint\nDescription: The authentication endpoint processes credentials differently based on HTTP methods. The application fails to properly validate credentials on HEAD requests while still returning valid session cookies. To solve: perform credential stuffing attacks using HEAD requests to bypass rate limiting.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via HTTP verb tampering on auth endpoint\", \"Lab Description\": \"The authentication endpoint processes credentials differently based on HTTP methods. The application fails to properly validate credentials on HEAD requests while still returning valid session cookies. To solve: perform credential stuffing attacks using HEAD requests to bypass rate limiting.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON objects\nDescription: The JWT parser incorrectly processes nested JSON objects in claims, allowing privilege escalation. The application fails to properly validate claim structures when performing authorization checks. To solve: inject nested role objects to bypass admin checks while maintaining valid signature.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON objects\", \"Lab Description\": \"The JWT parser incorrectly processes nested JSON objects in claims, allowing privilege escalation. The application fails to properly validate claim structures when performing authorization checks. To solve: inject nested role objects to bypass admin checks while maintaining valid signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe CSP bypass\nDescription: The OAuth implementation leaks tokens through insecure iframe communication that bypasses CSP protections. The application fails to properly validate message origins in postMessage handlers. To solve: craft malicious page that extracts tokens via iframe contentWindow communication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe CSP bypass\", \"Lab Description\": \"The OAuth implementation leaks tokens through insecure iframe communication that bypasses CSP protections. The application fails to properly validate message origins in postMessage handlers. To solve: craft malicious page that extracts tokens via iframe contentWindow communication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: The application establishes sessions through WebSocket connections before authentication. The WebSocket handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WS connection then authenticate to hijack the session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"The application establishes sessions through WebSocket connections before authentication. The WebSocket handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WS connection then authenticate to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via time-limited backup code reuse\nDescription: The multi-factor authentication system improperly validates backup codes, allowing unlimited reuse within the expiration window. The application fails to track used backup codes in real-time. To solve: intercept valid backup code and reuse it before server-side invalidation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-limited backup code reuse\", \"Lab Description\": \"The multi-factor authentication system improperly validates backup codes, allowing unlimited reuse within the expiration window. The application fails to track used backup codes in real-time. To solve: intercept valid backup code and reuse it before server-side invalidation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via case-insensitive password comparison\nDescription: The authentication system performs case-insensitive password comparison, reducing effective password entropy. The application converts all passwords to lowercase before comparison. To solve: perform credential stuffing with case variations of known passwords.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-insensitive password comparison\", \"Lab Description\": \"The authentication system performs case-insensitive password comparison, reducing effective password entropy. The application converts all passwords to lowercase before comparison. To solve: perform credential stuffing with case variations of known passwords.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT public key substitution via jwk header injection\nDescription: The JWT validation endpoint improperly processes jwk header parameters, allowing attackers to specify their own verification keys. The application fails to validate the origin of supplied keys. To solve: forge a valid admin token by injecting a malicious jwk header with attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jwk header injection\", \"Lab Description\": \"The JWT validation endpoint improperly processes jwk header parameters, allowing attackers to specify their own verification keys. The application fails to validate the origin of supplied keys. To solve: forge a valid admin token by injecting a malicious jwk header with attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure redirect_uri wildcards\nDescription: The OAuth implementation accepts overly permissive redirect_uri values containing wildcards, allowing token interception. The application fails to properly validate redirect URLs against registered patterns. To solve: steal authorization codes by registering malicious callback endpoint matching wildcard pattern.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure redirect_uri wildcards\", \"Lab Description\": \"The OAuth implementation accepts overly permissive redirect_uri values containing wildcards, allowing token interception. The application fails to properly validate redirect URLs against registered patterns. To solve: steal authorization codes by registering malicious callback endpoint matching wildcard pattern.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 header compression\nDescription: The application assigns session IDs based on HTTP/2 header values that can be manipulated through compression contexts. The server fails to reset compression contexts between connections. To solve: fixate session ID by manipulating HPACK header compression state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 header compression\", \"Lab Description\": \"The application assigns session IDs based on HTTP/2 header values that can be manipulated through compression contexts. The server fails to reset compression contexts between connections. To solve: fixate session ID by manipulating HPACK header compression state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter reflection\nDescription: The multi-factor authentication flow reflects unvalidated state parameters in successful responses. The application fails to maintain server-side state validation. To solve: bypass MFA by injecting arbitrary state parameters that get reflected back after verification.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter reflection\", \"Lab Description\": \"The multi-factor authentication flow reflects unvalidated state parameters in successful responses. The application fails to maintain server-side state validation. To solve: bypass MFA by injecting arbitrary state parameters that get reflected back after verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via password hash timing leak\nDescription: The authentication system leaks valid usernames through password hash comparison timing differences. The application uses insecure string comparison for password hashes. To solve: enumerate valid users via timing attacks then perform targeted credential stuffing.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via password hash timing leak\", \"Lab Description\": \"The authentication system leaks valid usernames through password hash comparison timing differences. The application uses insecure string comparison for password hashes. To solve: enumerate valid users via timing attacks then perform targeted credential stuffing.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via x5u header injection\nDescription: The JWT validation endpoint improperly processes x5u header parameters, allowing algorithm confusion attacks. The application fails to validate certificate chain when loading verification keys from URLs. To solve: forge a valid admin token by injecting malicious x5u header pointing to attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via x5u header injection\", \"Lab Description\": \"The JWT validation endpoint improperly processes x5u header parameters, allowing algorithm confusion attacks. The application fails to validate certificate chain when loading verification keys from URLs. To solve: forge a valid admin token by injecting malicious x5u header pointing to attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe referrer policy\nDescription: The OAuth implementation leaks tokens through insecure iframe referrer policies. The application fails to set proper referrer policies on iframe elements containing sensitive tokens. To solve: exfiltrate OAuth tokens by crafting malicious page that reads iframe document.referrer.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe referrer policy\", \"Lab Description\": \"The OAuth implementation leaks tokens through insecure iframe referrer policies. The application fails to set proper referrer policies on iframe elements containing sensitive tokens. To solve: exfiltrate OAuth tokens by crafting malicious page that reads iframe document.referrer.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebTransport protocol\nDescription: The application establishes sessions through WebTransport connections before authentication. The WebTransport handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WebTransport connection then authenticate to hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport protocol\", \"Lab Description\": \"The application establishes sessions through WebTransport connections before authentication. The WebTransport handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WebTransport connection then authenticate to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via biometric replay\nDescription: The multi-factor authentication system accepts replayed biometric verification data. The application fails to implement proper anti-replay protections for biometric authentication. To solve: intercept valid biometric data during authentication and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via biometric replay\", \"Lab Description\": \"The multi-factor authentication system accepts replayed biometric verification data. The application fails to implement proper anti-replay protections for biometric authentication. To solve: intercept valid biometric data during authentication and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via HTTP/3 connection reuse\nDescription: The authentication system improperly reuses HTTP/3 connections for different users. The application fails to properly isolate connection contexts between authentication attempts. To solve: perform credential stuffing by reusing established HTTP/3 connection across multiple authentication attempts.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via HTTP/3 connection reuse\", \"Lab Description\": \"The authentication system improperly reuses HTTP/3 connections for different users. The application fails to properly isolate connection contexts between authentication attempts. To solve: perform credential stuffing by reusing established HTTP/3 connection across multiple authentication attempts.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API\nDescription: The lab's authentication system uses JSON Web Tokens with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for the admin user by exploiting this vulnerability.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API\", \"Lab Description\": \"The lab's authentication system uses JSON Web Tokens with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for the admin user by exploiting this vulnerability.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query depth exploitation\nDescription: The GraphQL endpoint lacks proper depth limiting controls, allowing recursive queries that can lead to denial of service or data leakage. The application processes nested queries without restrictions. To solve: craft a recursive query to extract all user data from the database.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query depth exploitation\", \"Lab Description\": \"The GraphQL endpoint lacks proper depth limiting controls, allowing recursive queries that can lead to denial of service or data leakage. The application processes nested queries without restrictions. To solve: craft a recursive query to extract all user data from the database.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect\nDescription: The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URIs during token exchange. To solve: steal an OAuth token by crafting a malicious redirect URI and use it to authenticate as another user.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect\", \"Lab Description\": \"The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URIs during token exchange. To solve: steal an OAuth token by crafting a malicious redirect URI and use it to authenticate as another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via JWT in URL fragment\nDescription: The application sets JWT tokens from URL fragments without proper validation, allowing session fixation attacks. The vulnerable endpoint accepts tokens from untrusted sources. To solve: craft a URL with a fixed session token and trick a user into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JWT in URL fragment\", \"Lab Description\": \"The application sets JWT tokens from URL fragments without proper validation, allowing session fixation attacks. The vulnerable endpoint accepts tokens from untrusted sources. To solve: craft a URL with a fixed session token and trick a user into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The multi-factor authentication flow relies on client-side status parameters that can be manipulated. The application fails to verify MFA completion server-side before granting access. To solve: bypass MFA by modifying the authentication status parameter after initial login.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow relies on client-side status parameters that can be manipulated. The application fails to verify MFA completion server-side before granting access. To solve: bypass MFA by modifying the authentication status parameter after initial login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice architecture\nDescription: The JWT validation service improperly processes the kid header, allowing path traversal to load arbitrary verification keys. The application trusts unsigned tokens when key loading fails. To solve: forge a valid admin token by forcing the system to use a predictable key file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice architecture\", \"Lab Description\": \"The JWT validation service improperly processes the kid header, allowing path traversal to load arbitrary verification keys. The application trusts unsigned tokens when key loading fails. To solve: forge a valid admin token by forcing the system to use a predictable key file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth state parameter CSRF with JSONP callback\nDescription: The OAuth implementation accepts state parameters via JSONP callbacks, enabling CSRF attacks. The application fails to validate the state parameter origin during token exchange. To solve: craft a malicious site that steals OAuth tokens via automatic callback execution.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth state parameter CSRF with JSONP callback\", \"Lab Description\": \"The OAuth implementation accepts state parameters via JSONP callbacks, enabling CSRF attacks. The application fails to validate the state parameter origin during token exchange. To solve: craft a malicious site that steals OAuth tokens via automatic callback execution.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: The WebSocket connection handshake accepts arbitrary session identifiers, allowing session fixation attacks. The application reuses HTTP session tokens for WebSocket authentication without regeneration. To solve: establish a WebSocket connection with a fixed session ID and trick a user into adopting it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"The WebSocket connection handshake accepts arbitrary session identifiers, allowing session fixation attacks. The application reuses HTTP session tokens for WebSocket authentication without regeneration. To solve: establish a WebSocket connection with a fixed session ID and trick a user into adopting it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via race condition\nDescription: The multi-factor authentication endpoint is vulnerable to race conditions during verification state checks. The application uses non-atomic operations to update MFA status. To solve: send parallel verification requests to bypass MFA before the state is finalized.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition\", \"Lab Description\": \"The multi-factor authentication endpoint is vulnerable to race conditions during verification state checks. The application uses non-atomic operations to update MFA status. To solve: send parallel verification requests to bypass MFA before the state is finalized.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL batch queries\nDescription: The GraphQL endpoint allows unlimited batch authentication attempts in a single request. The application fails to implement rate limiting on batched operations. To solve: craft a batch query testing 100+ credential pairs against the login mutation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL batch queries\", \"Lab Description\": \"The GraphQL endpoint allows unlimited batch authentication attempts in a single request. The application fails to implement rate limiting on batched operations. To solve: craft a batch query testing 100+ credential pairs against the login mutation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation endpoint improperly trusts the jku header to fetch verification keys from external domains. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWKS file and forge admin tokens by injecting your jku endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation endpoint improperly trusts the jku header to fetch verification keys from external domains. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWKS file and forge admin tokens by injecting your jku endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe CSP bypass\nDescription: The OAuth callback page embeds user-sensitive tokens in URL fragments while having overly permissive CSP headers. The application fails to strip tokens from history.pushState calls. To solve: craft a malicious page that exfiltrates tokens via CSP-bypassed iframe techniques.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe CSP bypass\", \"Lab Description\": \"The OAuth callback page embeds user-sensitive tokens in URL fragments while having overly permissive CSP headers. The application fails to strip tokens from history.pushState calls. To solve: craft a malicious page that exfiltrates tokens via CSP-bypassed iframe techniques.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 trailer headers\nDescription: The application processes session identifiers from HTTP/2 trailer headers after main headers, allowing session fixation. The server fails to validate trailer header timing. To solve: craft HTTP/2 requests with malicious session IDs in trailers to override legitimate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 trailer headers\", \"Lab Description\": \"The application processes session identifiers from HTTP/2 trailer headers after main headers, allowing session fixation. The server fails to validate trailer header timing. To solve: craft HTTP/2 requests with malicious session IDs in trailers to override legitimate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via WebAuthn replay\nDescription: The WebAuthn implementation fails to properly validate challenge nonces, allowing authentication replay attacks. The server accepts previously used assertion signatures. To solve: intercept a valid WebAuthn assertion and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebAuthn replay\", \"Lab Description\": \"The WebAuthn implementation fails to properly validate challenge nonces, allowing authentication replay attacks. The server accepts previously used assertion signatures. To solve: intercept a valid WebAuthn assertion and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL aliases\nDescription: The GraphQL endpoint allows unlimited authentication attempts using query aliases in a single request. The application fails to rate limit aliased operations. To solve: craft a single query with 100+ aliased login attempts to brute-force credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL aliases\", \"Lab Description\": \"The GraphQL endpoint allows unlimited authentication attempts using query aliases in a single request. The application fails to rate limit aliased operations. To solve: craft a single query with 100+ aliased login attempts to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature stripping via nested JSON parser\nDescription: The JWT validation service improperly processes nested JSON structures in token claims, allowing signature verification bypass. The application fails to validate the complete token structure when encountering nested objects. To solve: craft a JWT with nested claims that bypasses signature verification while maintaining admin privileges.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping via nested JSON parser\", \"Lab Description\": \"The JWT validation service improperly processes nested JSON structures in token claims, allowing signature verification bypass. The application fails to validate the complete token structure when encountering nested objects. To solve: craft a JWT with nested claims that bypasses signature verification while maintaining admin privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via dangling callback parameters\nDescription: The OAuth implementation retains callback parameters in client-side storage after authentication, allowing token theft via DOM-based XSS. The application fails to clear sensitive OAuth state from browser storage post-authentication. To solve: craft a malicious page that extracts OAuth tokens from residual callback parameters.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via dangling callback parameters\", \"Lab Description\": \"The OAuth implementation retains callback parameters in client-side storage after authentication, allowing token theft via DOM-based XSS. The application fails to clear sensitive OAuth state from browser storage post-authentication. To solve: craft a malicious page that extracts OAuth tokens from residual callback parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 early data\nDescription: The application accepts session identifiers in HTTP/3 early data (0-RTT) before TLS handshake completion, allowing session fixation. The server fails to validate session creation timing. To solve: craft HTTP/3 requests with malicious session IDs in early data to override legitimate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 early data\", \"Lab Description\": \"The application accepts session identifiers in HTTP/3 early data (0-RTT) before TLS handshake completion, allowing session fixation. The server fails to validate session creation timing. To solve: craft HTTP/3 requests with malicious session IDs in early data to override legitimate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via biometric replay\nDescription: The biometric authentication endpoint accepts previously recorded biometric data, allowing replay attacks. The server fails to validate liveness indicators in biometric submissions. To solve: intercept a valid biometric authentication and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via biometric replay\", \"Lab Description\": \"The biometric authentication endpoint accepts previously recorded biometric data, allowing replay attacks. The server fails to validate liveness indicators in biometric submissions. To solve: intercept a valid biometric authentication and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL directive overloading\nDescription: The GraphQL endpoint allows unlimited authentication attempts using query directives in a single request. The application fails to rate limit directive-processed operations. To solve: craft a single query with 100+ directive-modified login attempts to brute-force credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL directive overloading\", \"Lab Description\": \"The GraphQL endpoint allows unlimited authentication attempts using query directives in a single request. The application fails to rate limit directive-processed operations. To solve: craft a single query with 100+ directive-modified login attempts to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via key wrapping\nDescription: The JWT endpoint accepts wrapped encryption keys in the header, allowing algorithm confusion attacks. The application fails to validate key wrapping parameters against the specified algorithm. To solve: craft a token with mismatched algorithm declarations to bypass signature verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via key wrapping\", \"Lab Description\": \"The JWT endpoint accepts wrapped encryption keys in the header, allowing algorithm confusion attacks. The application fails to validate key wrapping parameters against the specified algorithm. To solve: craft a token with mismatched algorithm declarations to bypass signature verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebTransport session\nDescription: The OAuth implementation stores tokens in WebTransport session state, which persists across origins. The application fails to isolate session storage between domains. To solve: craft a malicious page that accesses the victim's OAuth tokens via WebTransport session inheritance.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebTransport session\", \"Lab Description\": \"The OAuth implementation stores tokens in WebTransport session state, which persists across origins. The application fails to isolate session storage between domains. To solve: craft a malicious page that accesses the victim's OAuth tokens via WebTransport session inheritance.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via QUIC connection IDs\nDescription: The application assigns session identifiers based on QUIC connection IDs, which can be predicted. The server fails to use cryptographic randomness for session ID generation. To solve: craft QUIC packets with predetermined connection IDs to fixate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via QUIC connection IDs\", \"Lab Description\": \"The application assigns session identifiers based on QUIC connection IDs, which can be predicted. The server fails to use cryptographic randomness for session ID generation. To solve: craft QUIC packets with predetermined connection IDs to fixate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via FIDO2 assertion replay\nDescription: The FIDO2 implementation fails to validate assertion counters, allowing replay attacks. The server accepts previously used authenticator assertions. To solve: intercept a valid FIDO2 assertion and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via FIDO2 assertion replay\", \"Lab Description\": \"The FIDO2 implementation fails to validate assertion counters, allowing replay attacks. The server accepts previously used authenticator assertions. To solve: intercept a valid FIDO2 assertion and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL @defer directives\nDescription: The GraphQL endpoint processes @defer directives sequentially, allowing unlimited authentication attempts. The application fails to rate limit deferred operations. To solve: craft a query with 100+ deferred login attempts to brute-force credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL @defer directives\", \"Lab Description\": \"The GraphQL endpoint processes @defer directives sequentially, allowing unlimited authentication attempts. The application fails to rate limit deferred operations. To solve: craft a query with 100+ deferred login attempts to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering in SOAP-based authentication\nDescription: The authentication system of this app uses JSON Web Tokens (JWTs) for session management via a SOAP API. The backend trusts the 'alg' header in JWTs without enforcing validation. The application decodes the JWT using the algorithm specified in the token header without verifying the signature. To solve: Forge an administrator token and access the admin dashboard endpoint using the SOAP login endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering in SOAP-based authentication\", \"Lab Description\": \"The authentication system of this app uses JSON Web Tokens (JWTs) for session management via a SOAP API. The backend trusts the 'alg' header in JWTs without enforcing validation. The application decodes the JWT using the algorithm specified in the token header without verifying the signature. To solve: Forge an administrator token and access the admin dashboard endpoint using the SOAP login endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in REST-based login\nDescription: This REST API authenticates users by issuing a session cookie. However, it does not invalidate or regenerate the session ID upon successful login. The application accepts a user-supplied session ID via a query parameter and binds it to a user after login. To solve: Fix a session for a victim and use it to hijack their session post-login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in REST-based login\", \"Lab Description\": \"This REST API authenticates users by issuing a session cookie. However, it does not invalidate or regenerate the session ID upon successful login. The application accepts a user-supplied session ID via a query parameter and binds it to a user after login. To solve: Fix a session for a victim and use it to hijack their session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in third-party login\nDescription: This application allows third-party OAuth login via a vulnerable endpoint that accepts the `redirect_uri` parameter from the user without validation. The application trusts the `email` claim from the OAuth provider without verifying its source. To solve: Exploit the misconfiguration to impersonate the victim via a forged email claim and access their account dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login\", \"Lab Description\": \"This application allows third-party OAuth login via a vulnerable endpoint that accepts the `redirect_uri` parameter from the user without validation. The application trusts the `email` claim from the OAuth provider without verifying its source. To solve: Exploit the misconfiguration to impersonate the victim via a forged email claim and access their account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Redirection Flow\nDescription: This lab's login flow is vulnerable to session fixation due to improper session regeneration. The application uses a session cookie that is preserved across unauthenticated and authenticated states. To solve: hijack Carlos's authenticated session using a fixed session ID and access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Redirection Flow\", \"Lab Description\": \"This lab's login flow is vulnerable to session fixation due to improper session regeneration. The application uses a session cookie that is preserved across unauthenticated and authenticated states. To solve: hijack Carlos's authenticated session using a fixed session ID and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in GraphQL API Authentication\nDescription: This application uses JWT tokens to authorize users through its GraphQL login mutation. The backend fails to verify the `alg` field properly, allowing a `none` algorithm attack. To solve: forge a JWT to impersonate Carlos and access the admin dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in GraphQL API Authentication\", \"Lab Description\": \"This application uses JWT tokens to authorize users through its GraphQL login mutation. The backend fails to verify the `alg` field properly, allowing a `none` algorithm attack. To solve: forge a JWT to impersonate Carlos and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI Handling\nDescription: This app implements OAuth login using a third-party provider but fails to validate redirect URIs securely. The misconfiguration allows stealing authorization codes via open redirect abuse. To solve: capture Carlosâ€™s OAuth code and use it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Handling\", \"Lab Description\": \"This app implements OAuth login using a third-party provider but fails to validate redirect URIs securely. The misconfiguration allows stealing authorization codes via open redirect abuse. To solve: capture Carlosâ€™s OAuth code and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature algorithm confusion in login endpoint\nDescription: The login endpoint of this REST API accepts JWTs for session validation. However, due to misconfigured signature verification, the server improperly accepts unsigned tokens when 'alg' is set to 'none'. The application trusts this token without verifying its signature. To solve: Forge a valid JWT for the admin user and access their account page without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature algorithm confusion in login endpoint\", \"Lab Description\": \"The login endpoint of this REST API accepts JWTs for session validation. However, due to misconfigured signature verification, the server improperly accepts unsigned tokens when 'alg' is set to 'none'. The application trusts this token without verifying its signature. To solve: Forge a valid JWT for the admin user and access their account page without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via cookie reuse in login flow\nDescription: This application sets a session cookie before user authentication, but fails to rotate it post-login. This allows a malicious actor to fix a session ID and later force the victim to use it, enabling full session hijack. To solve: Fix a session ID for Carlos and hijack his session using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via cookie reuse in login flow\", \"Lab Description\": \"This application sets a session cookie before user authentication, but fails to rotate it post-login. This allows a malicious actor to fix a session ID and later force the victim to use it, enabling full session hijack. To solve: Fix a session ID for Carlos and hijack his session using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allows account takeover via unvalidated redirect URI\nDescription: This app uses OAuth to authenticate users with a third-party provider. Due to misconfigured redirect URI validation, an attacker can manipulate the redirect_uri parameter to send the authorization code to their own server. To solve: Intercept and steal Carlos's OAuth authorization code and exchange it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows account takeover via unvalidated redirect URI\", \"Lab Description\": \"This app uses OAuth to authenticate users with a third-party provider. Due to misconfigured redirect URI validation, an attacker can manipulate the redirect_uri parameter to send the authorization code to their own server. To solve: Intercept and steal Carlos's OAuth authorization code and exchange it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm bypass in GraphQL mutation\nDescription: The application uses JWT for session management, embedded in a GraphQL mutation API. Due to improper validation of the JWT 'alg' field, an attacker can sign tokens using the 'none' algorithm. The application fails to validate the algorithm properly and trusts any unsigned token. To solve: forge a JWT to impersonate the admin and retrieve their account data.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in GraphQL mutation\", \"Lab Description\": \"The application uses JWT for session management, embedded in a GraphQL mutation API. Due to improper validation of the JWT 'alg' field, an attacker can sign tokens using the 'none' algorithm. The application fails to validate the algorithm properly and trusts any unsigned token. To solve: forge a JWT to impersonate the admin and retrieve their account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via OAuth state reuse\nDescription: The application uses OAuth for SSO login but does not properly validate the OAuth 'state' parameter. This makes it vulnerable to session fixation. The attacker can initiate an OAuth flow and trick the victim into logging in with the attacker's session. To solve: hijack a session and access the victim's dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via OAuth state reuse\", \"Lab Description\": \"The application uses OAuth for SSO login but does not properly validate the OAuth 'state' parameter. This makes it vulnerable to session fixation. The attacker can initiate an OAuth flow and trick the victim into logging in with the attacker's session. To solve: hijack a session and access the victim's dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SOAP API session fixation via Set-Cookie override\nDescription: The application uses a SOAP API for authentication and sets session cookies during login. A flaw allows overriding the session identifier via a crafted Set-Cookie header, leading to session fixation. To solve: fix a session for the victim and access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SOAP API session fixation via Set-Cookie override\", \"Lab Description\": \"The application uses a SOAP API for authentication and sets session cookies during login. A flaw allows overriding the session identifier via a crafted Set-Cookie header, leading to session fixation. To solve: fix a session for the victim and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in SOAP Login API\nDescription: The SOAP-based authentication system incorrectly maintains session identifiers across users. The application sets a session cookie during the initial request and does not regenerate it post-login. To solve: Hijack a victim's authenticated session by fixing a known session ID before login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in SOAP Login API\", \"Lab Description\": \"The SOAP-based authentication system incorrectly maintains session identifiers across users. The application sets a session cookie during the initial request and does not regenerate it post-login. To solve: Hijack a victim's authenticated session by fixing a known session ID before login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature none algorithm tampering\nDescription: The REST API uses JWT for authentication but does not validate the signature algorithm correctly. The backend accepts tokens with the `alg` header set to `none` and skips signature verification. To solve: Forge an administrative token and access the admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature none algorithm tampering\", \"Lab Description\": \"The REST API uses JWT for authentication but does not validate the signature algorithm correctly. The backend accepts tokens with the `alg` header set to `none` and skips signature verification. To solve: Forge an administrative token and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration with open redirect and implicit flow\nDescription: The OAuth integration uses the implicit flow without validating redirect URIs properly. This allows token interception via an attacker-controlled domain. To solve: Trick the victim into authorizing on your redirect URI, capture their token, and access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and implicit flow\", \"Lab Description\": \"The OAuth integration uses the implicit flow without validating redirect URIs properly. This allows token interception via an attacker-controlled domain. To solve: Trick the victim into authorizing on your redirect URI, capture their token, and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Pre-Auth Token Reuse in Login Flow\nDescription: The application mishandles session identifiers during the authentication process. It fails to regenerate session IDs upon login, allowing session fixation attacks. The application uses a fixed session cookie across unauthenticated and authenticated states. To solve: Hijack Carlos's session by fixing the session ID before they log in, then access their My Account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Auth Token Reuse in Login Flow\", \"Lab Description\": \"The application mishandles session identifiers during the authentication process. It fails to regenerate session IDs upon login, allowing session fixation attacks. The application uses a fixed session cookie across unauthenticated and authenticated states. To solve: Hijack Carlos's session by fixing the session ID before they log in, then access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Key Confusion via Algorithm Downgrade in GraphQL API\nDescription: The app uses JWTs to authorize GraphQL requests but does not enforce strict algorithm checking, accepting tokens signed with 'none'. This allows algorithm confusion where the attacker forges a token using 'none' to impersonate users. To solve: Access the sensitive data node for Carlos by forging a valid-looking JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Key Confusion via Algorithm Downgrade in GraphQL API\", \"Lab Description\": \"The app uses JWTs to authorize GraphQL requests but does not enforce strict algorithm checking, accepting tokens signed with 'none'. This allows algorithm confusion where the attacker forges a token using 'none' to impersonate users. To solve: Access the sensitive data node for Carlos by forging a valid-looking JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Authorization Code Interception via Open Redirect\nDescription: The application integrates with a third-party OAuth provider but lacks validation on the redirect_uri parameter, enabling open redirect attacks. This allows intercepting the authorization code during OAuth login. To solve: Steal Carlos's OAuth authorization code and use it to log in as Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but lacks validation on the redirect_uri parameter, enabling open redirect attacks. This allows intercepting the authorization code during OAuth login. To solve: Steal Carlos's OAuth authorization code and use it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Redirection Mechanism\nDescription: The application incorrectly allows pre-authenticated session IDs to persist through login. An attacker can fix a session ID for a victim and hijack the session post-login. The application accepts session IDs via URL query parameters and uses them post-login. To solve: hijack Carlosâ€™s session by fixing a session ID and accessing his account page after login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Redirection Mechanism\", \"Lab Description\": \"The application incorrectly allows pre-authenticated session IDs to persist through login. An attacker can fix a session ID for a victim and hijack the session post-login. The application accepts session IDs via URL query parameters and uses them post-login. To solve: hijack Carlosâ€™s session by fixing a session ID and accessing his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in GraphQL Authorization Header\nDescription: This GraphQL-based API uses JWT for user authentication, but improperly accepts tokens signed with 'alg':'none'. This allows attackers to forge arbitrary tokens. The vulnerable middleware fails to verify the signature when alg=none. To solve: forge an admin JWT and query the adminGraph.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in GraphQL Authorization Header\", \"Lab Description\": \"This GraphQL-based API uses JWT for user authentication, but improperly accepts tokens signed with 'alg':'none'. This allows attackers to forge arbitrary tokens. The vulnerable middleware fails to verify the signature when alg=none. To solve: forge an admin JWT and query the adminGraph.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI Handling\nDescription: The application integrates with a third-party OAuth provider but improperly validates the redirect_uri parameter. An attacker can manipulate this parameter to intercept OAuth tokens. The system allows open redirect behavior with a whitelisted domain suffix only. To solve: capture Carlosâ€™s OAuth code via redirect hijack and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Handling\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but improperly validates the redirect_uri parameter. An attacker can manipulate this parameter to intercept OAuth tokens. The system allows open redirect behavior with a whitelisted domain suffix only. To solve: capture Carlosâ€™s OAuth code via redirect hijack and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in SAML SSO login flow\nDescription: This lab simulates a vulnerable Single Sign-On (SSO) integration using SAML. Due to poor session handling during the pre-authentication phase, attackers can fix a session ID before login. The application reuses the existing session after successful SAML login without regenerating a new session ID. To solve: Hijack Carlosâ€™s account session using a pre-fixed session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SAML SSO login flow\", \"Lab Description\": \"This lab simulates a vulnerable Single Sign-On (SSO) integration using SAML. Due to poor session handling during the pre-authentication phase, attackers can fix a session ID before login. The application reuses the existing session after successful SAML login without regenerating a new session ID. To solve: Hijack Carlosâ€™s account session using a pre-fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm authentication bypass\nDescription: The application uses JSON Web Tokens (JWTs) for session management. However, the token verification logic does not enforce algorithm validation, allowing an attacker to forge tokens using 'alg: none'. To solve: Forge a valid JWT with admin privileges and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm authentication bypass\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. However, the token verification logic does not enforce algorithm validation, allowing an attacker to forge tokens using 'alg: none'. To solve: Forge a valid JWT with admin privileges and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking authorization code to attacker\nDescription: The application uses OAuth for user authentication. It incorrectly allows redirection to arbitrary domains, including those under attacker control. This redirection vulnerability enables the attacker to intercept the authorization code. To solve: Capture Carlosâ€™s authorization code using a malicious redirect URI and exchange it for an access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking authorization code to attacker\", \"Lab Description\": \"The application uses OAuth for user authentication. It incorrectly allows redirection to arbitrary domains, including those under attacker control. This redirection vulnerability enables the attacker to intercept the authorization code. To solve: Capture Carlosâ€™s authorization code using a malicious redirect URI and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST-based login endpoint\nDescription: The application's login mechanism is vulnerable to session fixation due to session ID reuse. The application does not regenerate the session ID upon successful login. To solve: Fixate the victimâ€™s session ID before they log in, then hijack their session and access their profile page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST-based login endpoint\", \"Lab Description\": \"The application's login mechanism is vulnerable to session fixation due to session ID reuse. The application does not regenerate the session ID upon successful login. To solve: Fixate the victimâ€™s session ID before they log in, then hijack their session and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'none' algorithm authentication bypass in GraphQL API\nDescription: The GraphQL login API accepts JWT tokens with 'none' algorithm and skips signature verification. To solve: Forge a JWT with alg=none to impersonate Carlos and access the /graphql profile query.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'none' algorithm authentication bypass in GraphQL API\", \"Lab Description\": \"The GraphQL login API accepts JWT tokens with 'none' algorithm and skips signature verification. To solve: Forge a JWT with alg=none to impersonate Carlos and access the /graphql profile query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via redirect URI in SOAP-based client\nDescription: The application uses OAuth implicit flow and allows arbitrary redirect URIs. This leads to token leakage when attackers inject malicious redirect URIs. To solve: Extract the victim's access token via a crafted OAuth authorization link, then use it to call a SOAP action on behalf of Carlos.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect URI in SOAP-based client\", \"Lab Description\": \"The application uses OAuth implicit flow and allows arbitrary redirect URIs. This leads to token leakage when attackers inject malicious redirect URIs. To solve: Extract the victim's access token via a crafted OAuth authorization link, then use it to call a SOAP action on behalf of Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in GraphQL Login Mutation\nDescription: The GraphQL API login endpoint uses a fixed session ID before authentication, allowing session fixation. The application accepts a `sessionid` cookie that is issued before login and preserved after authentication. To solve: Hijack a victim's session by predefining a session ID, tricking them into using it, and authenticating as them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in GraphQL Login Mutation\", \"Lab Description\": \"The GraphQL API login endpoint uses a fixed session ID before authentication, allowing session fixation. The application accepts a `sessionid` cookie that is issued before login and preserved after authentication. To solve: Hijack a victim's session by predefining a session ID, tricking them into using it, and authenticating as them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Authentication Bypass via 'none' Algorithm in REST API\nDescription: The application uses JWT tokens for user sessions, but fails to validate the `alg` field. The server accepts JWTs with `alg: none`, allowing unsigned tokens. To solve: Forge a JWT token for the user `carlos` and access the protected profile endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via 'none' Algorithm in REST API\", \"Lab Description\": \"The application uses JWT tokens for user sessions, but fails to validate the `alg` field. The server accepts JWTs with `alg: none`, allowing unsigned tokens. To solve: Forge a JWT token for the user `carlos` and access the protected profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Implicit Flow Misconfiguration in SOAP API\nDescription: The app uses an OAuth implicit flow but fails to validate the `aud` (audience) parameter. Attackers can supply their own token intended for a different client ID to gain access. To solve: Forge an access token using a public OAuth tool and access the SOAP profile service.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Misconfiguration in SOAP API\", \"Lab Description\": \"The app uses an OAuth implicit flow but fails to validate the `aud` (audience) parameter. Attackers can supply their own token intended for a different client ID to gain access. To solve: Forge an access token using a public OAuth tool and access the SOAP profile service.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session fixation vulnerability in login response headers\nDescription: The application issues a session identifier before login and does not regenerate it upon successful authentication. The session ID remains constant, allowing fixation attacks. The application stores sessions using cookies. To solve: hijack Carlos's session by fixing a known session ID and using it after they log in.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login response headers\", \"Lab Description\": \"The application issues a session identifier before login and does not regenerate it upon successful authentication. The session ID remains constant, allowing fixation attacks. The application stores sessions using cookies. To solve: hijack Carlos's session by fixing a known session ID and using it after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in implicit grant redirect\nDescription: The application uses OAuth 2.0 for third-party authentication but accepts arbitrary redirect URIs without validation. Attackers can hijack tokens using a crafted malicious redirect. To solve: intercept Carlosâ€™s OAuth token using a poisoned redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in implicit grant redirect\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party authentication but accepts arbitrary redirect URIs without validation. Attackers can hijack tokens using a crafted malicious redirect. To solve: intercept Carlosâ€™s OAuth token using a poisoned redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Cookie Injection in REST API\nDescription: This lab demonstrates a session fixation vulnerability in a RESTful login system. The backend accepts user-supplied session tokens without regenerating them after authentication. The application reflects session tokens provided in requests, and fails to assign a new one on login. To solve: fixate Carlosâ€™s session, then access his account using the pre-established session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in REST API\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in a RESTful login system. The backend accepts user-supplied session tokens without regenerating them after authentication. The application reflects session tokens provided in requests, and fails to assign a new one on login. To solve: fixate Carlosâ€™s session, then access his account using the pre-established session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Tampering in GraphQL API\nDescription: This lab exposes a JWT tampering flaw via the 'none' algorithm in a GraphQL-based authentication endpoint. The JWT is accepted without signature verification when alg=none is used. To solve: Forge a JWT token as 'admin' and access the sensitive adminGraph endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in GraphQL API\", \"Lab Description\": \"This lab exposes a JWT tampering flaw via the 'none' algorithm in a GraphQL-based authentication endpoint. The JWT is accepted without signature verification when alg=none is used. To solve: Forge a JWT token as 'admin' and access the sensitive adminGraph endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Implicit Flow Token Leak via Redirect Manipulation in SOAP Endpoint\nDescription: The application uses OAuth implicit flow and allows arbitrary redirect URIs, exposing access tokens via fragment identifiers to untrusted domains. The SOAP authentication callback endpoint reflects redirect URLs without validation. To solve: Capture Carlos's access token by crafting a malicious redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leak via Redirect Manipulation in SOAP Endpoint\", \"Lab Description\": \"The application uses OAuth implicit flow and allows arbitrary redirect URIs, exposing access tokens via fragment identifiers to untrusted domains. The SOAP authentication callback endpoint reflects redirect URLs without validation. To solve: Capture Carlos's access token by crafting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Reused Auth Token in SOAP API\nDescription: The application's SOAP-based login system fails to issue new session identifiers upon re-authentication. The application retains the initial session ID for subsequent logins. To solve: exploit session fixation to gain access to the victim's session by tricking them into logging in with a fixed session identifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Reused Auth Token in SOAP API\", \"Lab Description\": \"The application's SOAP-based login system fails to issue new session identifiers upon re-authentication. The application retains the initial session ID for subsequent logins. To solve: exploit session fixation to gain access to the victim's session by tricking them into logging in with a fixed session identifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Signature Confusion in Authorization Header\nDescription: The application uses a JWKS endpoint to validate JWTs but does not validate the 'kid' field properly. This allows attackers to supply a custom public key and forge tokens. To solve: forge an admin token by injecting a manipulated 'kid' field and supplying your own matching public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Signature Confusion in Authorization Header\", \"Lab Description\": \"The application uses a JWKS endpoint to validate JWTs but does not validate the 'kid' field properly. This allows attackers to supply a custom public key and forge tokens. To solve: forge an admin token by injecting a manipulated 'kid' field and supplying your own matching public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration via Open Redirect in Redirect URI\nDescription: The application allows arbitrary redirect URIs after OAuth login. This misconfiguration can be abused to steal access tokens. To solve: capture a valid access token for the victim by injecting a malicious redirect_uri that sends the token to your server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration via Open Redirect in Redirect URI\", \"Lab Description\": \"The application allows arbitrary redirect URIs after OAuth login. This misconfiguration can be abused to steal access tokens. To solve: capture a valid access token for the victim by injecting a malicious redirect_uri that sends the token to your server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST API login flow\nDescription: This lab's session management is vulnerable to session fixation through insecure handling of session cookies during login. The application sets a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID and force Carlos to authenticate using the attacker-defined session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST API login flow\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation through insecure handling of session cookies during login. The application sets a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID and force Carlos to authenticate using the attacker-defined session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via alg=none in GraphQL authentication\nDescription: The GraphQL login endpoint returns a JWT that is improperly validated. The server does not enforce signature verification when the alg field is set to 'none'. To solve: Modify a valid JWT to impersonate Carlos by removing the signature and setting alg to none.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via alg=none in GraphQL authentication\", \"Lab Description\": \"The GraphQL login endpoint returns a JWT that is improperly validated. The server does not enforce signature verification when the alg field is set to 'none'. To solve: Modify a valid JWT to impersonate Carlos by removing the signature and setting alg to none.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in redirect URI validation\nDescription: The application implements OAuth implicit flow but fails to strictly validate redirect URIs. An attacker can hijack tokens by manipulating the redirect URI to point to a domain they control. To solve: Capture the access token issued for Carlos by hijacking the redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in redirect URI validation\", \"Lab Description\": \"The application implements OAuth implicit flow but fails to strictly validate redirect URIs. An attacker can hijack tokens by manipulating the redirect URI to point to a domain they control. To solve: Capture the access token issued for Carlos by hijacking the redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in SOAP API login flow\nDescription: This lab demonstrates session fixation via SOAP-based authentication. The application reuses an existing session ID after login instead of generating a new one. This allows attackers to fix a session ID before victim login. The SOAP API accepts session tokens via HTTP headers, and the server provides overly verbose XML errors on failed authentication. To solve: fix a session ID, force the victim to authenticate into it, and access their profile page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in SOAP API login flow\", \"Lab Description\": \"This lab demonstrates session fixation via SOAP-based authentication. The application reuses an existing session ID after login instead of generating a new one. This allows attackers to fix a session ID before victim login. The SOAP API accepts session tokens via HTTP headers, and the server provides overly verbose XML errors on failed authentication. To solve: fix a session ID, force the victim to authenticate into it, and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Authentication Bypass via 'none' algorithm in REST API\nDescription: The lab uses JWTs for REST API authentication but does not properly verify the token signature algorithm. The server accepts tokens with 'alg':'none' and does not enforce a secret check. To solve: forge a JWT with 'none' algorithm to impersonate Carlos and access the /api/userinfo endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via 'none' algorithm in REST API\", \"Lab Description\": \"The lab uses JWTs for REST API authentication but does not properly verify the token signature algorithm. The server accepts tokens with 'alg':'none' and does not enforce a secret check. To solve: forge a JWT with 'none' algorithm to impersonate Carlos and access the /api/userinfo endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Code Interception in GraphQL Login Flow\nDescription: The application implements login via OAuth in a GraphQL mutation using the authorization code grant. However, the client doesn't bind the authorization code to the session. An attacker can intercept the code and redeem it on their session to hijack the victim's login. To solve: intercept Carlos's OAuth code and redeem it via GraphQL to impersonate him.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Code Interception in GraphQL Login Flow\", \"Lab Description\": \"The application implements login via OAuth in a GraphQL mutation using the authorization code grant. However, the client doesn't bind the authorization code to the session. An attacker can intercept the code and redeem it on their session to hijack the victim's login. To solve: intercept Carlos's OAuth code and redeem it via GraphQL to impersonate him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session fixation in SOAP login handler\nDescription: The application's SOAP-based login mechanism does not regenerate session tokens after authentication. The application accepts externally provided session tokens via a JSESSIONID cookie. This allows an attacker to fixate a session ID for a victim prior to authentication. To solve: fixate a session and hijack Carlos's authenticated session using a shared SOAP login channel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SOAP login handler\", \"Lab Description\": \"The application's SOAP-based login mechanism does not regenerate session tokens after authentication. The application accepts externally provided session tokens via a JSESSIONID cookie. This allows an attacker to fixate a session ID for a victim prior to authentication. To solve: fixate a session and hijack Carlos's authenticated session using a shared SOAP login channel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm tampering in GraphQL login\nDescription: The application uses JWTs signed with HS256 but accepts unsigned JWTs due to improper algorithm checks. The login mutation accepts a token returned in the login response and trusts it without re-verification. To solve: manipulate the JWT's alg claim and gain access to Carlos's protected GraphQL data.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm tampering in GraphQL login\", \"Lab Description\": \"The application uses JWTs signed with HS256 but accepts unsigned JWTs due to improper algorithm checks. The login mutation accepts a token returned in the login response and trusts it without re-verification. To solve: manipulate the JWT's alg claim and gain access to Carlos's protected GraphQL data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth access token leakage in Referer header\nDescription: The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth access token leakage in Referer header\", \"Lab Description\": \"The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: OAuth access token leakage in Referer header\nDescription: The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth access token leakage in Referer header\", \"Lab Description\": \"The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session Fixation via SOAP login flow in Session Management\nDescription: The application processes login sessions through a SOAP-based authentication handler. It fails to regenerate session identifiers upon successful login. The server accepts session IDs via the JSESSIONID cookie and binds them to accounts without invalidation. To solve: fixate a session ID before login and use it to hijack Carlosâ€™s session post-authentication.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via SOAP login flow in Session Management\", \"Lab Description\": \"The application processes login sessions through a SOAP-based authentication handler. It fails to regenerate session identifiers upon successful login. The server accepts session IDs via the JSESSIONID cookie and binds them to accounts without invalidation. To solve: fixate a session ID before login and use it to hijack Carlosâ€™s session post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT algorithm confusion in Authorization header in Bearer Token Authentication\nDescription: The API accepts JWT tokens using the Authorization header. It trusts the 'alg' field in the token without verifying if a valid signature is provided. This flaw allows switching from HS256 to 'none' algorithm, effectively bypassing signature validation. To solve: forge a token granting admin access and retrieve Carlosâ€™s profile data.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in Authorization header in Bearer Token Authentication\", \"Lab Description\": \"The API accepts JWT tokens using the Authorization header. It trusts the 'alg' field in the token without verifying if a valid signature is provided. This flaw allows switching from HS256 to 'none' algorithm, effectively bypassing signature validation. To solve: forge a token granting admin access and retrieve Carlosâ€™s profile data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth 2.0 token leakage in redirect_uri parameter via Authorization Code Flow\nDescription: The app uses OAuth 2.0 Authorization Code flow for third-party authentication. It fails to validate exact matching of redirect_uri during code-to-token exchange, enabling token hijacking by supplying a malicious redirect URI on callback. To solve: steal Carlosâ€™s access token using an attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth 2.0 token leakage in redirect_uri parameter via Authorization Code Flow\", \"Lab Description\": \"The app uses OAuth 2.0 Authorization Code flow for third-party authentication. It fails to validate exact matching of redirect_uri during code-to-token exchange, enabling token hijacking by supplying a malicious redirect URI on callback. To solve: steal Carlosâ€™s access token using an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST login flow\nDescription: This application improperly handles session identifiers during the login process. A fixed session cookie provided before authentication is retained after successful login. The application binds authenticated sessions to pre-login identifiers, allowing attackers to force users to authenticate into attacker-controlled sessions. To solve: hijack Carlos's session and access his account dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST login flow\", \"Lab Description\": \"This application improperly handles session identifiers during the login process. A fixed session cookie provided before authentication is retained after successful login. The application binds authenticated sessions to pre-login identifiers, allowing attackers to force users to authenticate into attacker-controlled sessions. To solve: hijack Carlos's session and access his account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None algorithm bypass in GraphQL login mutation\nDescription: The GraphQL login mutation issues a JWT for session management but fails to enforce signature validation when the 'alg' header is set to 'none'. This misconfiguration allows an attacker to forge arbitrary tokens without knowing the secret key. To solve: forge a JWT for Carlos and access the /graphql me query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None algorithm bypass in GraphQL login mutation\", \"Lab Description\": \"The GraphQL login mutation issues a JWT for session management but fails to enforce signature validation when the 'alg' header is set to 'none'. This misconfiguration allows an attacker to forge arbitrary tokens without knowing the secret key. To solve: forge a JWT for Carlos and access the /graphql me query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect\nDescription: The OAuth flow implemented in the app allows open redirect on the 'redirect_uri' parameter during authorization, enabling attackers to capture tokens issued for other users. To solve: intercept the authorization code for Carlos by crafting a redirect to an attacker-controlled domain, then exchange it for a token and access Carlos's profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect\", \"Lab Description\": \"The OAuth flow implemented in the app allows open redirect on the 'redirect_uri' parameter during authorization, enabling attackers to capture tokens issued for other users. To solve: intercept the authorization code for Carlos by crafting a redirect to an attacker-controlled domain, then exchange it for a token and access Carlos's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Flow\nDescription: The application fails to invalidate pre-authentication session tokens during login. The application generates a session token upon initial visit and reuses it after login without regenerating it. This allows a malicious user to fix a session ID before the victim logs in. To solve: hijack Carlos's session by fixing a session ID before he authenticates and access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"The application fails to invalidate pre-authentication session tokens during login. The application generates a session token upon initial visit and reuses it after login without regenerating it. This allows a malicious user to fix a session ID before the victim logs in. To solve: hijack Carlos's session by fixing a session ID before he authenticates and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in Token Validation\nDescription: The application's login API uses JWTs for authentication but fails to verify the token signature correctly when the 'alg' header is modified. The application accepts unsigned JWTs when the 'alg' is set to 'none'. To solve: tamper with a JWT to escalate privileges and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in Token Validation\", \"Lab Description\": \"The application's login API uses JWTs for authentication but fails to verify the token signature correctly when the 'alg' header is modified. The application accepts unsigned JWTs when the 'alg' is set to 'none'. To solve: tamper with a JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering in Bearer token authentication\nDescription: The application uses stateless JWT-based Bearer tokens for user authentication and authorizes access based on the embedded role claim. The server does not validate the JWT signature properly. To solve: Forge a valid-looking token granting admin access and retrieve the flag from the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering in Bearer token authentication\", \"Lab Description\": \"The application uses stateless JWT-based Bearer tokens for user authentication and authorizes access based on the embedded role claim. The server does not validate the JWT signature properly. To solve: Forge a valid-looking token granting admin access and retrieve the flag from the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in GraphQL login flow\nDescription: The application uses GraphQL for authentication but fails to issue new session cookies on successful login, allowing session fixation. To solve: Fixate a session ID before login, then authenticate as a privileged user using that session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in GraphQL login flow\", \"Lab Description\": \"The application uses GraphQL for authentication but fails to issue new session cookies on successful login, allowing session fixation. To solve: Fixate a session ID before login, then authenticate as a privileged user using that session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration leaking access tokens\nDescription: The app uses OAuth 2.0 implicit grant for third-party login but exposes access tokens in the URL fragment (#) and reflects them in HTTP responses. To solve: Capture and replay a leaked token to access a protected resource.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaking access tokens\", \"Lab Description\": \"The app uses OAuth 2.0 implicit grant for third-party login but exposes access tokens in the URL fragment (#) and reflects them in HTTP responses. To solve: Capture and replay a leaked token to access a protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session mismanagement in SOAP login API\nDescription: This SOAP-based authentication system exposes session IDs in the SOAP response and accepts reused session tokens. To solve: Reuse an intercepted session ID from a privileged user to access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session mismanagement in SOAP login API\", \"Lab Description\": \"This SOAP-based authentication system exposes session IDs in the SOAP response and accepts reused session tokens. To solve: Reuse an intercepted session ID from a privileged user to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login redirect handler\nDescription: The session token is assigned before user authentication and not regenerated upon login. This allows session fixation. The application reuses session tokens post-login, enabling an attacker to set a session for the victim. To solve: Fix a session ID and log in as Carlos to access his dashboard.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login redirect handler\", \"Lab Description\": \"The session token is assigned before user authentication and not regenerated upon login. This allows session fixation. The application reuses session tokens post-login, enabling an attacker to set a session for the victim. To solve: Fix a session ID and log in as Carlos to access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT authentication bypass using 'none' algorithm\nDescription: The app uses JWTs for stateless authentication. It does not verify the algorithm used in the token header, allowing attackers to forge tokens by setting the alg field to 'none'. To solve: Access the protected /admin panel as user Carlos without a valid signature.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass using 'none' algorithm\", \"Lab Description\": \"The app uses JWTs for stateless authentication. It does not verify the algorithm used in the token header, allowing attackers to forge tokens by setting the alg field to 'none'. To solve: Access the protected /admin panel as user Carlos without a valid signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri\nDescription: The app integrates third-party OAuth for authentication. It incorrectly validates the redirect_uri, allowing attackers to inject malicious URLs that leak access tokens. To solve: Leak Carlosâ€™s access token to your server and access his protected profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri\", \"Lab Description\": \"The app integrates third-party OAuth for authentication. It incorrectly validates the redirect_uri, allowing attackers to inject malicious URLs that leak access tokens. To solve: Leak Carlosâ€™s access token to your server and access his protected profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm manipulation vulnerability in login API\nDescription: The application uses JSON Web Tokens (JWTs) for session management. It incorrectly trusts the `alg` field in JWT headers without verifying against a server-side whitelist. The backend accepts tokens signed with HMAC even though RS256 is intended. The application exposes its public key. To solve: Gain unauthorized access to the admin panel using a forged JWT by exploiting the algorithm confusion bug.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm manipulation vulnerability in login API\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. It incorrectly trusts the `alg` field in JWT headers without verifying against a server-side whitelist. The backend accepts tokens signed with HMAC even though RS256 is intended. The application exposes its public key. To solve: Gain unauthorized access to the admin panel using a forged JWT by exploiting the algorithm confusion bug.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login session handler\nDescription: This application assigns a session cookie prior to login and fails to regenerate it post-authentication. The same session ID remains active across login transitions. To solve: Fixate a session before login, lure a victim to use it, and then hijack their session once they authenticate.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login session handler\", \"Lab Description\": \"This application assigns a session cookie prior to login and fails to regenerate it post-authentication. The same session ID remains active across login transitions. To solve: Fixate a session before login, lure a victim to use it, and then hijack their session once they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri validation\nDescription: The application uses OAuth2 implicit flow with a poorly validated redirect_uri parameter. It allows any domain starting with https://trusted.com. The application also reflects access tokens in URL fragments. To solve: Trick the OAuth provider into redirecting the access token to an attacker-controlled domain using an open redirect embedded in a subdomain of https://trusted.com.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation\", \"Lab Description\": \"The application uses OAuth2 implicit flow with a poorly validated redirect_uri parameter. It allows any domain starting with https://trusted.com. The application also reflects access tokens in URL fragments. To solve: Trick the OAuth provider into redirecting the access token to an attacker-controlled domain using an open redirect embedded in a subdomain of https://trusted.com.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation vulnerability in REST login endpoint\nDescription: This lab demonstrates a session fixation flaw in a RESTful authentication flow. The application issues session cookies before login, and fails to re-issue them upon authentication. This allows an attacker to predefine a session ID and force a victim to use it. To solve: log in as Carlos by fixing the session ID in advance and hijacking his authenticated session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in REST login endpoint\", \"Lab Description\": \"This lab demonstrates a session fixation flaw in a RESTful authentication flow. The application issues session cookies before login, and fails to re-issue them upon authentication. This allows an attacker to predefine a session ID and force a victim to use it. To solve: log in as Carlos by fixing the session ID in advance and hijacking his authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via alg=None in GraphQL-based login\nDescription: This lab simulates a vulnerable GraphQL login where JWTs are not validated correctly. The backend fails to verify the 'alg' parameter in the token header, allowing tampering. To solve: create a JWT token with 'alg' set to 'none' and access Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via alg=None in GraphQL-based login\", \"Lab Description\": \"This lab simulates a vulnerable GraphQL login where JWTs are not validated correctly. The backend fails to verify the 'alg' parameter in the token header, allowing tampering. To solve: create a JWT token with 'alg' set to 'none' and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in REST token exchange endpoint\nDescription: This lab uses a flawed OAuth token exchange where the client ID is not verified against the redirect URI. An attacker can use a trusted client ID but redirect to their own URI and gain access. To solve: obtain an access token for Carlos by modifying the OAuth request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in REST token exchange endpoint\", \"Lab Description\": \"This lab uses a flawed OAuth token exchange where the client ID is not verified against the redirect URI. An attacker can use a trusted client ID but redirect to their own URI and gain access. To solve: obtain an access token for Carlos by modifying the OAuth request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via reused token in SOAP authentication flow\nDescription: This SOAP-based login system allows bypassing MFA if a previously issued token is reused. The server does not invalidate tokens after successful login, allowing attackers to replay captured tokens. To solve: reuse a captured MFA token to access Carlos's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via reused token in SOAP authentication flow\", \"Lab Description\": \"This SOAP-based login system allows bypassing MFA if a previously issued token is reused. The server does not invalidate tokens after successful login, allowing attackers to replay captured tokens. To solve: reuse a captured MFA token to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Predictable Session Fixation in REST Authentication Flow\nDescription: The login endpoint sets a session ID based on a user-supplied value. If an attacker can predefine the session ID, they can fix a session for a victim prior to login. The application trusts the session without checking session ownership. To solve: hijack a valid user's session using fixation to access their dashboard.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Predictable Session Fixation in REST Authentication Flow\", \"Lab Description\": \"The login endpoint sets a session ID based on a user-supplied value. If an attacker can predefine the session ID, they can fix a session for a victim prior to login. The application trusts the session without checking session ownership. To solve: hijack a valid user's session using fixation to access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL API\nDescription: The application uses JWT for authentication in a GraphQL API, but improperly validates the algorithm field. The backend accepts tokens with 'alg':'none' and skips verification. To solve: forge a JWT token impersonating the admin user and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL API\", \"Lab Description\": \"The application uses JWT for authentication in a GraphQL API, but improperly validates the algorithm field. The backend accepts tokens with 'alg':'none' and skips verification. To solve: forge a JWT token impersonating the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Authorization Code Interception and Token Substitution\nDescription: This app integrates with an external OAuth provider but does not verify that the access token returned belongs to the initiating user. It trusts any access token blindly. To solve: intercept a leaked authorization code and exchange it to impersonate another user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception and Token Substitution\", \"Lab Description\": \"This app integrates with an external OAuth provider but does not verify that the access token returned belongs to the initiating user. It trusts any access token blindly. To solve: intercept a leaked authorization code and exchange it to impersonate another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Cookie Injection in REST API Login\nDescription: The REST-based login endpoint is vulnerable to session fixation due to insecure session regeneration. The application reuses the session identifier after successful login, allowing an attacker to predetermine the victim's session ID. To solve: Fixate a session ID, trick the victim to log in using it, and access their authenticated area.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in REST API Login\", \"Lab Description\": \"The REST-based login endpoint is vulnerable to session fixation due to insecure session regeneration. The application reuses the session identifier after successful login, allowing an attacker to predetermine the victim's session ID. To solve: Fixate a session ID, trick the victim to log in using it, and access their authenticated area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Tampering via None Algorithm in GraphQL Auth Header\nDescription: The GraphQL API uses JWT for authentication but improperly validates the algorithm in the JWT header. The application accepts tokens signed with 'none', allowing tampering without a signature. To solve: Modify a valid token and access the admin dashboard with elevated privileges.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering via None Algorithm in GraphQL Auth Header\", \"Lab Description\": \"The GraphQL API uses JWT for authentication but improperly validates the algorithm in the JWT header. The application accepts tokens signed with 'none', allowing tampering without a signature. To solve: Modify a valid token and access the admin dashboard with elevated privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Misconfiguration via Open Redirect in SOAP SSO Flow\nDescription: The SOAP-based SSO service fails to validate the redirect_uri in OAuth flows. The attacker can manipulate the redirect URI to capture access tokens. To solve: Exploit the redirect URI flaw to leak Carlosâ€™s token and access the My Account page as Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration via Open Redirect in SOAP SSO Flow\", \"Lab Description\": \"The SOAP-based SSO service fails to validate the redirect_uri in OAuth flows. The attacker can manipulate the redirect URI to capture access tokens. To solve: Exploit the redirect URI flaw to leak Carlosâ€™s token and access the My Account page as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in GraphQL Authentication Flow\nDescription: This application's GraphQL-based login mutation uses a predictable session token before user authentication, which is not regenerated after login. The application accepts a session token passed via a cookie. To solve: hijack Carlosâ€™s session using a fixed token and access the /account endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in GraphQL Authentication Flow\", \"Lab Description\": \"This application's GraphQL-based login mutation uses a predictable session token before user authentication, which is not regenerated after login. The application accepts a session token passed via a cookie. To solve: hijack Carlosâ€™s session using a fixed token and access the /account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Bypass via None Algorithm in REST Login Flow\nDescription: The REST login system uses JWTs for session authentication but fails to validate the algorithm used. The server accepts tokens signed with 'none' algorithm and does not verify the signature. To solve: craft a fake JWT token impersonating Carlos and access the protected /dashboard endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Bypass via None Algorithm in REST Login Flow\", \"Lab Description\": \"The REST login system uses JWTs for session authentication but fails to validate the algorithm used. The server accepts tokens signed with 'none' algorithm and does not verify the signature. To solve: craft a fake JWT token impersonating Carlos and access the protected /dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Redirect URI Manipulation in Authorization Server\nDescription: This application integrates OAuth with a third-party provider but fails to validate exact redirect URIs. An attacker can manipulate the redirect_uri to capture authorization codes. To solve: intercept an OAuth authorization code issued to Carlos and redeem it to access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation in Authorization Server\", \"Lab Description\": \"This application integrates OAuth with a third-party provider but fails to validate exact redirect URIs. An attacker can manipulate the redirect_uri to capture authorization codes. To solve: intercept an OAuth authorization code issued to Carlos and redeem it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL JWT claim manipulation in token-based authentication\nDescription: The application uses JWT-based authentication within its GraphQL API. JWT tokens are signed using a symmetric secret that can be brute-forced. The application does not verify claims properly during GraphQL authorization. To solve: Gain admin access and query sensitive user data through GraphQL introspection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL JWT claim manipulation in token-based authentication\", \"Lab Description\": \"The application uses JWT-based authentication within its GraphQL API. JWT tokens are signed using a symmetric secret that can be brute-forced. The application does not verify claims properly during GraphQL authorization. To solve: Gain admin access and query sensitive user data through GraphQL introspection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unvalidated session token reuse in REST login\nDescription: The REST-based login system fails to invalidate old session tokens after successful login. Attacker can fix a known session ID and trick victim into using it. To solve: Fix a session ID, perform login with victim credentials, and access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session token reuse in REST login\", \"Lab Description\": \"The REST-based login system fails to invalidate old session tokens after successful login. Attacker can fix a known session ID and trick victim into using it. To solve: Fix a session ID, perform login with victim credentials, and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration in third-party login integration\nDescription: The app uses OAuth implicit grant flow to log users in via a third-party provider. The redirect URI is vulnerable to open redirect abuse and the state parameter is not validated. To solve: Steal an access token from a victim user using a malicious redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in third-party login integration\", \"Lab Description\": \"The app uses OAuth implicit grant flow to log users in via a third-party provider. The redirect URI is vulnerable to open redirect abuse and the state parameter is not validated. To solve: Steal an access token from a victim user using a malicious redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via SOAP Login Token Mismanagement in Legacy Auth Service\nDescription: The application uses a legacy SOAP-based authentication API that improperly binds session tokens before credential verification. The application generates a session cookie as soon as the login page loads, and this session is not invalidated after a successful login. To solve: Fixate a session ID before login, use it to authenticate as the victim, and access their private profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via SOAP Login Token Mismanagement in Legacy Auth Service\", \"Lab Description\": \"The application uses a legacy SOAP-based authentication API that improperly binds session tokens before credential verification. The application generates a session cookie as soon as the login page loads, and this session is not invalidated after a successful login. To solve: Fixate a session ID before login, use it to authenticate as the victim, and access their private profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Authentication Bypass via 'none' Algorithm in GraphQL Login\nDescription: This application uses JWTs for user session management via GraphQL login mutation. The backend fails to validate the algorithm field of the JWT. To solve: Tamper with a valid JWT and forge one using 'none' algorithm to impersonate the admin user and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via 'none' Algorithm in GraphQL Login\", \"Lab Description\": \"This application uses JWTs for user session management via GraphQL login mutation. The backend fails to validate the algorithm field of the JWT. To solve: Tamper with a valid JWT and forge one using 'none' algorithm to impersonate the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Implicit Flow Token Theft via Redirect URI Manipulation in Login Flow\nDescription: The application uses an implicit OAuth flow and accepts user-defined redirect URIs without proper validation. The access token is leaked via the URI fragment. To solve: Inject a malicious redirect URI to steal the access token of the victim and access their account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Theft via Redirect URI Manipulation in Login Flow\", \"Lab Description\": \"The application uses an implicit OAuth flow and accepts user-defined redirect URIs without proper validation. The access token is leaked via the URI fragment. To solve: Inject a malicious redirect URI to steal the access token of the victim and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session fixation via unvalidated session reuse in SOAP login endpoint\nDescription: The application's SOAP-based login mechanism incorrectly reuses session identifiers without regenerating them upon authentication. The session ID can be pre-set and persists across login boundaries. The application stores session tokens before authentication and promotes them post-login without invalidation. To solve: Hijack a victim's session by planting a known session ID and force them to authenticate.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session reuse in SOAP login endpoint\", \"Lab Description\": \"The application's SOAP-based login mechanism incorrectly reuses session identifiers without regenerating them upon authentication. The session ID can be pre-set and persists across login boundaries. The application stores session tokens before authentication and promotes them post-login without invalidation. To solve: Hijack a victim's session by planting a known session ID and force them to authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature confusion with none algorithm in GraphQL login\nDescription: The application uses a JWT token for authentication and accepts tokens passed via a GraphQL mutation. The backend does not enforce algorithm constraints, allowing a forged token using the `none` algorithm. The application accepts unsigned tokens if the header specifies 'alg':'none'. To solve: Forge a valid token for the user 'carlos' and access the GraphQL-protected dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature confusion with none algorithm in GraphQL login\", \"Lab Description\": \"The application uses a JWT token for authentication and accepts tokens passed via a GraphQL mutation. The backend does not enforce algorithm constraints, allowing a forged token using the `none` algorithm. The application accepts unsigned tokens if the header specifies 'alg':'none'. To solve: Forge a valid token for the user 'carlos' and access the GraphQL-protected dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth client misconfiguration leads to token reuse\nDescription: The application relies on a third-party OAuth 2.0 provider for authentication. However, it reuses access tokens across clients without verifying the `aud` or `client_id` fields. This enables attackers to use access tokens from other apps to impersonate users. To solve: Acquire a valid OAuth token from your test app and reuse it on this site to gain access to Carlosâ€™s account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth client misconfiguration leads to token reuse\", \"Lab Description\": \"The application relies on a third-party OAuth 2.0 provider for authentication. However, it reuses access tokens across clients without verifying the `aud` or `client_id` fields. This enables attackers to use access tokens from other apps to impersonate users. To solve: Acquire a valid OAuth token from your test app and reuse it on this site to gain access to Carlosâ€™s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Cookie Injection in OAuth Callback Handler\nDescription: This lab's OAuth callback implementation is vulnerable to session fixation. The application does not regenerate the session upon login via OAuth. Instead, it continues using any pre-authentication session value. To solve: Fixate a session ID, then log in as the victim via OAuth, and hijack their session using the fixed cookie.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in OAuth Callback Handler\", \"Lab Description\": \"This lab's OAuth callback implementation is vulnerable to session fixation. The application does not regenerate the session upon login via OAuth. Instead, it continues using any pre-authentication session value. To solve: Fixate a session ID, then log in as the victim via OAuth, and hijack their session using the fixed cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL Login API\nDescription: This lab uses JSON Web Tokens to protect user sessions. However, the backend incorrectly allows tokens signed with the 'none' algorithm. To solve: Forge a JWT with 'alg':'none' and impersonate the victim user to access their GraphQL profile.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL Login API\", \"Lab Description\": \"This lab uses JSON Web Tokens to protect user sessions. However, the backend incorrectly allows tokens signed with the 'none' algorithm. To solve: Forge a JWT with 'alg':'none' and impersonate the victim user to access their GraphQL profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SOAP API Key Leakage via Verbose Debugging in MFA Bypass\nDescription: This lab uses a SOAP API for multi-factor authentication. The application logs sensitive API keys in verbose mode. By inducing an error during MFA verification, an attacker can leak the victimâ€™s API key. To solve: Trigger the debug message, extract the key, and bypass MFA for the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SOAP API Key Leakage via Verbose Debugging in MFA Bypass\", \"Lab Description\": \"This lab uses a SOAP API for multi-factor authentication. The application logs sensitive API keys in verbose mode. By inducing an error during MFA verification, an attacker can leak the victimâ€™s API key. To solve: Trigger the debug message, extract the key, and bypass MFA for the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST API session management\nDescription: The application uses predictable session tokens stored in a REST cookie without invalidation upon login. The vulnerable login process does not reset the session token after authentication. To solve: Fixate a session and hijack Carlos's authenticated session using the same token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST API session management\", \"Lab Description\": \"The application uses predictable session tokens stored in a REST cookie without invalidation upon login. The vulnerable login process does not reset the session token after authentication. To solve: Fixate a session and hijack Carlos's authenticated session using the same token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL auth mutation\nDescription: The application uses JWT to protect a GraphQL mutation-based login but accepts the 'none' algorithm for tokens. To solve: Forge a valid token by removing the signature and gain access to the admin GraphQL endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL auth mutation\", \"Lab Description\": \"The application uses JWT to protect a GraphQL mutation-based login but accepts the 'none' algorithm for tokens. To solve: Forge a valid token by removing the signature and gain access to the admin GraphQL endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via open redirect URI\nDescription: The application uses OAuth 2.0 for authentication, but the token redirect URI is improperly validated. This allows attackers to hijack access tokens. To solve: Craft a redirect URI to leak Carlos's token and use it to access protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via open redirect URI\", \"Lab Description\": \"The application uses OAuth 2.0 for authentication, but the token redirect URI is improperly validated. This allows attackers to hijack access tokens. To solve: Craft a redirect URI to leak Carlos's token and use it to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: 2FA bypass via duplicate parameters in SOAP login request\nDescription: A SOAP-based login API expects a 2FA code, but fails when multiple <2faCode> elements are submitted. The first one is ignored, and the second is trusted. To solve: Inject duplicate 2FA parameters and force authentication without a valid code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"2FA bypass via duplicate parameters in SOAP login request\", \"Lab Description\": \"A SOAP-based login API expects a 2FA code, but fails when multiple <2faCode> elements are submitted. The first one is ignored, and the second is trusted. To solve: Inject duplicate 2FA parameters and force authentication without a valid code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in legacy SOAP endpoint\nDescription: The application uses a legacy SOAP authentication endpoint vulnerable to session fixation. The session ID can be preset and is accepted post-login. The application does not regenerate session tokens upon authentication. To solve: fix a session ID, authenticate as Carlos, and access his dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in legacy SOAP endpoint\", \"Lab Description\": \"The application uses a legacy SOAP authentication endpoint vulnerable to session fixation. The session ID can be preset and is accepted post-login. The application does not regenerate session tokens upon authentication. To solve: fix a session ID, authenticate as Carlos, and access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering in GraphQL login resolver\nDescription: The GraphQL login resolver issues JWT tokens signed with the 'none' algorithm when 'alg' is tampered in the header. The backend uses a misconfigured JWT library that does not enforce algorithm validation. To solve: craft a JWT with 'alg':'none', impersonate Carlos, and access /profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering in GraphQL login resolver\", \"Lab Description\": \"The GraphQL login resolver issues JWT tokens signed with the 'none' algorithm when 'alg' is tampered in the header. The backend uses a misconfigured JWT library that does not enforce algorithm validation. To solve: craft a JWT with 'alg':'none', impersonate Carlos, and access /profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri\nDescription: The application implements OAuth Implicit Grant but fails to validate redirect_uri strictly. It allows open redirect injection, enabling token capture. To solve: trick the auth server to redirect Carlos's token to your server and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri\", \"Lab Description\": \"The application implements OAuth Implicit Grant but fails to validate redirect_uri strictly. It allows open redirect injection, enabling token capture. To solve: trick the auth server to redirect Carlos's token to your server and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session ID leakage in verbose debug logs\nDescription: The application exposes internal debug logs via a REST endpoint. These logs contain session tokens in plaintext due to poor log filtering. To solve: extract Carlosâ€™s session ID from logs and use it to access /my-account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session ID leakage in verbose debug logs\", \"Lab Description\": \"The application exposes internal debug logs via a REST endpoint. These logs contain session tokens in plaintext due to poor log filtering. To solve: extract Carlosâ€™s session ID from logs and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session Fixation in Legacy Cookie Management via REST Login\nDescription: The application uses legacy cookie-based session management without proper regeneration of session identifiers after login. The session cookie is issued pre-authentication and persists after login without changes. To solve: Fixate a session ID pre-login, then log in as the victim using that ID to hijack their session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Legacy Cookie Management via REST Login\", \"Lab Description\": \"The application uses legacy cookie-based session management without proper regeneration of session identifiers after login. The session cookie is issued pre-authentication and persists after login without changes. To solve: Fixate a session ID pre-login, then log in as the victim using that ID to hijack their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Tampering in GraphQL Login Token\nDescription: The application uses JWTs for authentication with user-supplied tokens via Authorization headers. The token signature verification logic fails to enforce a valid signing algorithm. To solve: Forge a JWT using 'alg':'none' and impersonate the victim by submitting it to a protected GraphQL query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in GraphQL Login Token\", \"Lab Description\": \"The application uses JWTs for authentication with user-supplied tokens via Authorization headers. The token signature verification logic fails to enforce a valid signing algorithm. To solve: Forge a JWT using 'alg':'none' and impersonate the victim by submitting it to a protected GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Redirect URI Manipulation in REST Authorization Flow\nDescription: The application integrates OAuth for login via a third-party provider. However, the redirect_uri parameter is not properly validated during the authorization flow. To solve: Manipulate the redirect_uri to point to an attacker-controlled page and capture the authorization code to impersonate Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation in REST Authorization Flow\", \"Lab Description\": \"The application integrates OAuth for login via a third-party provider. However, the redirect_uri parameter is not properly validated during the authorization flow. To solve: Manipulate the redirect_uri to point to an attacker-controlled page and capture the authorization code to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in SOAP-based Login Endpoint\nDescription: This lab's SOAP-based login API suffers from a session fixation vulnerability due to insecure session token handling. The application assigns a session ID before user authentication and does not renew it after login, allowing attackers to hijack user sessions. To solve: hijack Carlos's session and access his account page.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in SOAP-based Login Endpoint\", \"Lab Description\": \"This lab's SOAP-based login API suffers from a session fixation vulnerability due to insecure session token handling. The application assigns a session ID before user authentication and does not renew it after login, allowing attackers to hijack user sessions. To solve: hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT Tampering in GraphQL Login Token Handling\nDescription: The application's GraphQL login system uses JWTs for session management but fails to validate the algorithm securely. The JWT library accepts tokens signed with 'alg':'none', allowing an attacker to forge tokens. To solve: forge a valid JWT to impersonate Carlos and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in GraphQL Login Token Handling\", \"Lab Description\": \"The application's GraphQL login system uses JWTs for session management but fails to validate the algorithm securely. The JWT library accepts tokens signed with 'alg':'none', allowing an attacker to forge tokens. To solve: forge a valid JWT to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Authorization Code Flow\nDescription: The application uses OAuth with an external provider, but the authorization code is not properly bound to the client ID. This allows attackers to inject a stolen code into the REST /oauth-callback endpoint. To solve: perform an authorization code injection to hijack Carlos's OAuth session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Authorization Code Flow\", \"Lab Description\": \"The application uses OAuth with an external provider, but the authorization code is not properly bound to the client ID. This allows attackers to inject a stolen code into the REST /oauth-callback endpoint. To solve: perform an authorization code injection to hijack Carlos's OAuth session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
