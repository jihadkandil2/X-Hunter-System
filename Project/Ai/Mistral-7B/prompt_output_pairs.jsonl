{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following:\nSELECT * FROM products WHERE category = 'Gifts' AND released = 1\nTo solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products.", "target": "{\"Lab scenario\": \"SQL injection vulnerability in WHERE clause allowing retrieval of hidden data\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following:\\nSELECT * FROM products WHERE category = 'Gifts' AND released = 1\\nTo solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection vulnerability allowing login bypass", "target": "{\"Lab scenario\": \"SQL injection vulnerability allowing login bypass\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the login function.\\nTo solve the lab, perform a SQL injection attack that logs in to the application as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection attack, querying the database type and version on oracle", "target": "{\"Lab scenario\": \"SQL injection attack, querying the database type and version on Oracle\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.\\nTo solve the lab, display the database version string.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection attack, querying the database type and version on MySQL and Microsoft", "target": "{\"Lab scenario\": \"SQL injection attack, querying the database type and version on MySQL and Microsoft\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.\\nTo solve the lab, display the database version string.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\nTo solve the lab, log in as the administrator user.", "target": "{\"Lab scenario\": \"SQL injection attack, listing the database contents on non-Oracle databases\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection attack, listing the database contents on oracle", "target": "{\"Lab scenario\": \"SQL injection attack, listing the database contents on Oracle\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.\nTo solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.", "target": "{\"Lab scenario\": \"SQL injection UNION attack, determining the number of columns returned by the query\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.\\nTo solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.\nThe lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.", "target": "{\"Lab scenario\": \"SQL injection UNION attack, finding a column containing text\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.\\nThe lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection UNION attack, retrieving data from other tables", "target": "{\"Lab scenario\": \"SQL injection UNION attack, retrieving data from other tables\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.\\nThe database contains a different table called users, with columns called username and password.\\nTo solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection UNION attack, retrieving multiple values in a single column", "target": "{\"Lab scenario\": \"SQL injection UNION attack, retrieving multiple values in a single column\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.\\nThe database contains a different table called users, with columns called username and password.\\nTo solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where blind sql injection with conditional responses", "target": "{\"Lab scenario\": \"Blind SQL injection with conditional responses\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and no error messages are displayed. But the application includes a Welcome back message in the page if the query returns any rows.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Blind SQL injection with conditional errors", "target": "{\"Lab scenario\": \"Blind SQL injection with conditional errors\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows. If the SQL query causes an error, then the application returns a custom error message.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie. The results of the SQL query are not returned.\nThe database contains a different table called users, with columns called username and password. To solve the lab, find a way to leak the password for the administrator user, then log in to their account.", "target": "{\"Lab scenario\": \"Visible error-based SQL injection\", \"Lab Description\": \"This lab contains a SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie. The results of the SQL query are not returned.\\nThe database contains a different table called users, with columns called username and password. To solve the lab, find a way to leak the password for the administrator user, then log in to their account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: blind sql injection with time delays", "target": "{\"Lab scenario\": \"Blind SQL injection with time delays\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.\\nTo solve the lab, exploit the SQL injection vulnerability to cause a 10 second delay.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Blind SQL injection with time delays and information retrieval", "target": "{\"Lab scenario\": \"Blind SQL injection with time delays and information retrieval\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe SQL query is executed asynchronously and has no effect on the application's response. However, you can trigger out-of-band interactions with an external domain.\nTo solve the lab, exploit the SQL injection vulnerability to cause a DNS lookup to Burp Collaborator.", "target": "{\"Lab scenario\": \"Blind SQL injection with out-of-band interaction\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe SQL query is executed asynchronously and has no effect on the application's response. However, you can trigger out-of-band interactions with an external domain.\\nTo solve the lab, exploit the SQL injection vulnerability to cause a DNS lookup to Burp Collaborator.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: blind sql injection with out-of-band data exfiltration", "target": "{\"Lab scenario\": \"Blind SQL injection with out-of-band data exfiltration\", \"Lab Description\": \"This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\\nThe SQL query is executed asynchronously and has no effect on the application's response. However, you can trigger out-of-band interactions with an external domain.\\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\\nTo solve the lab, log in as the administrator user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a SQL injection vulnerability in its stock check feature. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables.\nThe database contains a users table, which contains the usernames and passwords of registered users. To solve the lab, perform a SQL injection attack to retrieve the admin user's credentials, then log in to their account.", "target": "{\"Lab scenario\": \"SQL injection with filter bypass via XML encoding\", \"Lab Description\": \"This lab contains a SQL injection vulnerability in its stock check feature. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables.\\nThe database contains a users table, which contains the usernames and passwords of registered users. To solve the lab, perform a SQL injection attack to retrieve the admin user's credentials, then log in to their account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss into html context with nothing encoded", "target": "{\"Lab scenario\": \"Reflected XSS into HTML context with nothing encoded\", \"Lab Description\": \"This lab contains a simple reflected cross-site scripting vulnerability in the search functionality.\\nTo solve the lab, perform a cross-site scripting attack that calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS into HTML context with nothing encoded", "target": "{\"Lab scenario\": \"Stored XSS into HTML context with nothing encoded\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in the comment functionality.\\nTo solve this lab, submit a comment that calls the alert function when the blog post is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss in document.write sink using source location.search", "target": "{\"Lab scenario\": \"DOM XSS in document.write sink using source location.search\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search, which you can control using the website URL.\\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search.\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.", "target": "{\"Lab scenario\": \"DOM XSS in innerHTML sink using source location.search\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search.\\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in jQuery anchor href attribute sink using location.search source", "target": "{\"Lab scenario\": \"DOM XSS in jQuery anchor href attribute sink using location.search source\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library's $ selector function to find an anchor element, and changes its href attribute using data from location.search.\\nTo solve this lab, make the \\\"back\\\" link alert document.cookie.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in jQuery selector sink using a hashchange event", "target": "{\"Lab scenario\": \"DOM XSS in jQuery selector sink using a hashchange event\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery's $() selector function to auto-scroll to a given post, whose title is passed via the location.hash property.\\nTo solve the lab, deliver an exploit to the victim that calls the print() function in their browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function.", "target": "{\"Lab scenario\": \"Reflected XSS into attribute with angle brackets HTML-encoded\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: stored xss into anchor href attribute with double quotes html-encoded", "target": "{\"Lab scenario\": \"Stored XSS into anchor href attribute with double quotes HTML-encoded\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the comment author name is clicked.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss into a javascript string with angle brackets html encoded", "target": "{\"Lab scenario\": \"Reflected XSS into a JavaScript string with angle brackets HTML encoded\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. The reflection occurs inside a JavaScript string. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss in document.write sink using source location.search inside a select element", "target": "{\"Lab scenario\": \"DOM XSS in document.write sink using source location.search inside a select element\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search which you can control using the website URL. The data is enclosed within a select element.\\nTo solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss in angularjs expression with angle brackets and double quotes html-encoded", "target": "{\"Lab scenario\": \"DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in a AngularJS expression within the search functionality.\\nAngularJS is a popular JavaScript library, which scans the contents of HTML nodes containing the ng-app attribute (also known as an AngularJS directive). When a directive is added to the HTML code, you can execute JavaScript expressions within double curly braces. This technique is useful when angle brackets are being encoded.\\nTo solve this lab, perform a cross-site scripting attack that executes an AngularJS expression and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected dom xss", "target": "{\"Lab scenario\": \"Reflected DOM XSS\", \"Lab Description\": \"This lab demonstrates a reflected DOM vulnerability. Reflected DOM vulnerabilities occur when the server-side application processes data from a request and echoes the data in the response. A script on the page then processes the reflected data in an unsafe way, ultimately writing it to a dangerous sink.\\nTo solve this lab, create an injection that calls the alert() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored dom xss", "target": "{\"Lab scenario\": \"Stored DOM XSS\", \"Lab Description\": \"This lab demonstrates a stored DOM vulnerability in the blog comment functionality. To solve this lab, exploit this vulnerability to call the alert() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS into HTML context with most tags and attributes blocked", "target": "{\"Lab scenario\": \"Reflected XSS into HTML context with most tags and attributes blocked\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in the search functionality but uses a web application firewall (WAF) to protect against common XSS vectors.\\nTo solve the lab, perform a cross-site scripting attack that bypasses the WAF and calls the print() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS into HTML context with all tags blocked except custom ones", "target": "{\"Lab scenario\": \"Reflected XSS into HTML context with all tags blocked except custom ones\", \"Lab Description\": \"This lab blocks all HTML tags except custom ones.\\nTo solve the lab, perform a cross-site scripting attack that injects a custom tag and automatically alerts document.cookie.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss with some svg markup allowed", "target": "{\"Lab scenario\": \"Reflected XSS with some SVG markup allowed\", \"Lab Description\": \"This lab has a simple reflected XSS vulnerability. The site is blocking common tags but misses some SVG tags and events.\\nTo solve the lab, perform a cross-site scripting attack that calls the alert() function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in canonical link tag", "target": "{\"Lab scenario\": \"Reflected XSS in canonical link tag\", \"Lab Description\": \"This lab reflects user input in a canonical link tag and escapes angle brackets.\\nTo solve the lab, perform a cross-site scripting attack on the home page that injects an attribute that calls the alert function.\\nTo assist with your exploit, you can assume that the simulated user will press the following key combinations:\\nPlease note that the intended solution to this lab is only possible in Chrome.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss into a javascript string with single quote and backslash escaped", "target": "{\"Lab scenario\": \"Reflected XSS into a JavaScript string with single quote and backslash escaped\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality. The reflection occurs inside a JavaScript string with single quotes and backslashes escaped.\\nTo solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss into a javascript string with angle brackets and double quotes html-encoded and single quotes escaped", "target": "{\"Lab scenario\": \"Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets and double are HTML encoded and single quotes are escaped.\\nTo solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss into onclick event with angle brackets and double quotes html-encoded and single quotes and backslash escaped", "target": "{\"Lab scenario\": \"Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in the comment functionality.\\nTo solve this lab, submit a comment that calls the alert function when the comment author name is clicked.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped", "target": "{\"Lab scenario\": \"Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped\", \"Lab Description\": \"This lab contains a reflected cross-site scripting vulnerability in the search blog functionality. The reflection occurs inside a template string with angle brackets, single, and double quotes HTML encoded, and backticks escaped. To solve this lab, perform a cross-site scripting attack that calls the alert function inside the template string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: exploiting cross-site scripting to steal cookies", "target": "{\"Lab scenario\": \"Exploiting cross-site scripting to steal cookies\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim's session cookie, then use this cookie to impersonate the victim.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim's username and password then use these credentials to log in to the victim's account.", "target": "{\"Lab scenario\": \"Exploiting cross-site scripting to capture passwords\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim's username and password then use these credentials to log in to the victim's account.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Exploiting XSS to bypass CSRF defenses", "target": "{\"Lab scenario\": \"Exploiting XSS to bypass CSRF defenses\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the blog comments function. To solve the lab, exploit the vulnerability to steal a CSRF token, which you can then use to change the email address of someone who views the blog post comments.\\nYou can log in to your own account using the following credentials: wiener:peter\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS with AngularJS sandbox escape without strings", "target": "{\"Lab scenario\": \"Reflected XSS with AngularJS sandbox escape without strings\", \"Lab Description\": \"This lab uses AngularJS in an unusual way where the $eval function is not available and you will be unable to use any strings in AngularJS.\\nTo solve the lab, perform a cross-site scripting attack that escapes the sandbox and executes the alert function without using the $eval function.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses CSP and AngularJS.\nTo solve the lab, perform a cross-site scripting attack that bypasses CSP, escapes the AngularJS sandbox, and alerts document.cookie.", "target": "{\"Lab scenario\": \"Reflected XSS with AngularJS sandbox escape and CSP\", \"Lab Description\": \"This lab uses CSP and AngularJS.\\nTo solve the lab, perform a cross-site scripting attack that bypasses CSP, escapes the AngularJS sandbox, and alerts document.cookie.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss with event handlers and href attributes blocked", "target": "{\"Lab scenario\": \"Reflected XSS with event handlers and href attributes blocked\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability with some whitelisted tags, but all events and anchor href attributes are blocked.\\nTo solve the lab, perform a cross-site scripting attack that injects a vector that, when clicked, calls the alert function.\\nNote that you need to label your vector with the word \\\"Click\\\" in order to induce the simulated lab user to click your vector. For example:\\n<a href=\\\"\\\">Click me</a>\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: reflected xss in a javascript url with some characters blocked", "target": "{\"Lab scenario\": \"Reflected XSS in a JavaScript URL with some characters blocked\", \"Lab Description\": \"This lab reflects your input in a JavaScript URL, but all is not as it seems. This initially seems like a trivial challenge; however, the application is blocking some characters in an attempt to prevent XSS attacks.\\nTo solve the lab, perform a cross-site scripting attack that calls the alert function with the string 1337 contained somewhere in the alert message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss protected by very strict csp, with dangling markup attack", "target": "{\"Lab scenario\": \"Reflected XSS protected by very strict CSP, with dangling markup attack\", \"Lab Description\": \"This lab using a strict CSP that blocks outgoing requests to external web sites.\\nTo solve the lab, first perform a cross-site scripting attack that bypasses the CSP and exfiltrates a simulated victim user's CSRF token using Burp Collaborator. You then need to change the simulated user's email address to hacker@evil-user.net.\\nYou must label your vector with the word \\\"Click\\\" in order to induce the simulated user to click it. For example:\\n<a href=\\\"\\\">Click me</a>\\nYou can log in to your own account using the following credentials: wiener:peter\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: reflected xss protected by csp, with csp bypass", "target": "{\"Lab scenario\": \"Reflected XSS protected by CSP, with CSP bypass\", \"Lab Description\": \"This lab uses CSP and contains a reflected XSS vulnerability.\\nTo solve the lab, perform a cross-site scripting attack that bypasses the CSP and calls the alert function.\\nPlease note that the intended solution to this lab is only possible in Chrome.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.", "target": "{\"Lab scenario\": \"Username enumeration via different responses\", \"Lab Description\": \"This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where 2fa simple bypass", "target": "{\"Lab scenario\": \"2FA simple bypass\", \"Lab Description\": \"This lab's two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Password reset broken logic", "target": "{\"Lab scenario\": \"Password reset broken logic\", \"Lab Description\": \"This lab's password reset functionality is vulnerable. To solve the lab, reset Carlos's password then log in and access his \\\"My account\\\" page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.", "target": "{\"Lab scenario\": \"Username enumeration via subtly different responses\", \"Lab Description\": \"This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:\\nTo solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: username enumeration via response timing", "target": "{\"Lab scenario\": \"Username enumeration via response timing\", \"Lab Description\": \"This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim's password, then log in and access their account page.", "target": "{\"Lab scenario\": \"Broken brute-force protection, IP block\", \"Lab Description\": \"This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim's password, then log in and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where username enumeration via account lock", "target": "{\"Lab scenario\": \"Username enumeration via account lock\", \"Lab Description\": \"This lab is vulnerable to username enumeration. It uses account locking, but this contains a logic flaw. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos's account page.\nYou also have access to the email server to receive your 2FA verification code.", "target": "{\"Lab scenario\": \"2FA broken logic\", \"Lab Description\": \"This lab's two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos's account page.\\nYou also have access to the email server to receive your 2FA verification code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where brute-forcing a stay-logged-in cookie", "target": "{\"Lab scenario\": \"Brute-forcing a stay-logged-in cookie\", \"Lab Description\": \"This lab allows users to stay logged in even after they close their browser session. The cookie used to provide this functionality is vulnerable to brute-forcing.\\nTo solve the lab, brute-force Carlos's cookie to gain access to his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Offline password cracking", "target": "{\"Lab scenario\": \"Offline password cracking\", \"Lab Description\": \"This lab stores the user's password hash in a cookie. The lab also contains an XSS vulnerability in the comment functionality. To solve the lab, obtain Carlos's stay-logged-in cookie and use it to crack his password. Then, log in as carlos and delete his account from the \\\"My account\\\" page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where password reset poisoning via middleware", "target": "{\"Lab scenario\": \"Password reset poisoning via middleware\", \"Lab Description\": \"This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos's account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Password brute-force via password change", "target": "{\"Lab scenario\": \"Password brute-force via password change\", \"Lab Description\": \"This lab's password change functionality makes it vulnerable to brute-force attacks. To solve the lab, use the list of candidate passwords to brute-force Carlos's account and access his \\\"My account\\\" page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: broken brute-force protection, multiple credentials per request", "target": "{\"Lab scenario\": \"Broken brute-force protection, multiple credentials per request\", \"Lab Description\": \"This lab is vulnerable due to a logic flaw in its brute-force protection. To solve the lab, brute-force Carlos's password, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's two-factor authentication is vulnerable to brute-forcing. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, brute-force the 2FA code and access Carlos's account page.\nVictim's credentials: carlos:montoya", "target": "{\"Lab scenario\": \"2FA bypass using a brute-force attack\", \"Lab Description\": \"This lab's two-factor authentication is vulnerable to brute-forcing. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, brute-force the 2FA code and access Carlos's account page.\\nVictim's credentials: carlos:montoya\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in pdf generator's metadata", "target": "{\"Lab scenario\": \"Stored XSS in PDF Generator's Metadata\", \"Lab Description\": \"The application allows users to upload documents and generates downloadable PDFs. However, the PDF metadata fields (e.g., title, author) are not sanitized. The application directly embeds user input into the PDF metadata.\\nTo solve: Inject a JavaScript payload into the metadata field and trigger execution upon opening the document in a web viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in WebSocket Chat Application", "target": "{\"Lab scenario\": \"DOM-based XSS in WebSocket Chat Application\", \"Lab Description\": \"A WebSocket-based chat application dynamically updates messages on the page using JavaScript innerHTML. User input is passed directly to the DOM without sanitization.\\nTo solve: Inject a JavaScript payload into the chat input and trigger it upon rendering the received message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss via http header in error logging", "target": "{\"Lab scenario\": \"Reflected XSS via HTTP Header in Error Logging\", \"Lab Description\": \"An API exposes an error page that reflects user-controlled data from the 'Referer' header without encoding. Attackers can inject JavaScript payloads via crafted HTTP requests.\\nTo solve: Inject a payload into the 'Referer' header and trigger execution on the error page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-based XSS via Form Autofill", "target": "{\"Lab scenario\": \"Mutation-based XSS via Form Autofill\", \"Lab Description\": \"The web application includes an autofill mechanism that modifies DOM elements dynamically based on user input. However, it fails to properly sanitize input before updating the DOM, allowing attackers to execute malicious scripts.\\nTo solve: Exploit the mutation event handler to trigger XSS upon autofill activation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in jsonp callback parameter", "target": "{\"Lab scenario\": \"Reflected XSS in JSONP Callback Parameter\", \"Lab Description\": \"An API endpoint provides JSONP responses and accepts a user-supplied callback parameter without proper sanitization. This vulnerability allows an attacker to inject malicious JavaScript code that is executed in the context of the victim's browser when the response is loaded.\\nTo solve: Craft a request with a malicious callback value that triggers script execution upon the JSONP response being processed by the browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in comment system with emoji rendering", "target": "{\"Lab scenario\": \"Stored XSS in Comment System with Emoji Rendering\", \"Lab Description\": \"The application's comment system supports emoji rendering, but fails to properly sanitize user input before processing. Attackers can inject JavaScript payloads disguised as emoji text.\\nTo solve: Inject a payload inside a comment and trigger execution upon rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in JSON API Response", "target": "{\"Lab scenario\": \"Reflected XSS in JSON API Response\", \"Lab Description\": \"The API returns user-provided input directly in a JSON response without encoding. JavaScript code injected into the 'message' parameter executes when viewed in certain browsers.\\nTo solve: Inject a JavaScript payload into the 'message' parameter and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A GraphQL API endpoint echoes user-controlled input in responses without sanitization. Attackers can inject malicious JavaScript that executes when another user queries the API.\nTo solve: Inject an XSS payload in a stored query field and retrieve it through another API call.", "target": "{\"Lab scenario\": \"Stored XSS in GraphQL Query Response\", \"Lab Description\": \"A GraphQL API endpoint echoes user-controlled input in responses without sanitization. Attackers can inject malicious JavaScript that executes when another user queries the API.\\nTo solve: Inject an XSS payload in a stored query field and retrieve it through another API call.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation-based xss in event listener", "target": "{\"Lab scenario\": \"Mutation-based XSS in Event Listener\", \"Lab Description\": \"The application listens for user input events and updates the DOM dynamically. Malicious input can modify the event handler to execute arbitrary JavaScript.\\nTo solve: Inject an XSS payload using an unexpected mutation event and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A WebSocket-based chat application broadcasts user messages without proper sanitization, allowing stored XSS. The application directly inserts unsanitized messages into the DOM of connected clients.\nTo solve: Inject a JavaScript payload into a chat message and trigger execution on another client.", "target": "{\"Lab scenario\": \"Stored XSS in WebSocket Chat Application\", \"Lab Description\": \"A WebSocket-based chat application broadcasts user messages without proper sanitization, allowing stored XSS. The application directly inserts unsanitized messages into the DOM of connected clients.\\nTo solve: Inject a JavaScript payload into a chat message and trigger execution on another client.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom-based xss via window.name property", "target": "{\"Lab scenario\": \"DOM-based XSS via window.name Property\", \"Lab Description\": \"This lab demonstrates a DOM-based XSS vulnerability where the application reads the window.name property and injects its value into the HTML without sanitization.\\nTo solve: Modify window.name with a JavaScript payload and trigger its execution on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-Based XSS in Content Editable Element", "target": "{\"Lab scenario\": \"Mutation-Based XSS in Content Editable Element\", \"Lab Description\": \"The application provides a contenteditable div for user input without proper sanitization, allowing an attacker to inject malicious scripts. The vulnerability lies in the dynamic mutation of the DOM based on user input.\\nTo solve: Inject a JavaScript payload into the contenteditable area and trigger its execution upon re-rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in http response header", "target": "{\"Lab scenario\": \"Reflected XSS in HTTP Response Header\", \"Lab Description\": \"This lab targets a vulnerability where the application reflects data from a custom HTTP header into the response header without sanitization. Attackers can inject malicious scripts that execute in the browser.\\nTo solve: Inject an XSS payload in a custom header and observe its execution when the response header is processed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in GraphQL Comment Field", "target": "{\"Lab scenario\": \"Stored XSS in GraphQL Comment Field\", \"Lab Description\": \"A GraphQL API endpoint accepts and stores user comments without proper sanitization. When these comments are later rendered on a web page, the unsanitized content triggers an XSS attack.\\nTo solve: Inject a JavaScript payload via a GraphQL mutation and trigger its execution during comment retrieval.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application maintains a notification panel where server-stored messages are rendered on the client without proper sanitization. Attackers can inject JavaScript payloads into notification messages that persist and execute when viewed.\nTo solve: Inject a payload into the notification submission and trigger its execution when the panel reloads.", "target": "{\"Lab scenario\": \"Stored XSS in Notification Panel\", \"Lab Description\": \"The application maintains a notification panel where server-stored messages are rendered on the client without proper sanitization. Attackers can inject JavaScript payloads into notification messages that persist and execute when viewed.\\nTo solve: Inject a payload into the notification submission and trigger its execution when the panel reloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in GraphQL Subscription Display", "target": "{\"Lab scenario\": \"DOM-based XSS in GraphQL Subscription Display\", \"Lab Description\": \"This lab involves a GraphQL subscription that delivers real-time updates to a client-side dashboard. The subscription data is inserted into the DOM without proper encoding, allowing an attacker to deliver a malicious payload via the subscription stream.\\nTo solve: Inject a payload through the subscription endpoint and trigger it when the client renders the data.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The client-side script extracts the URL fragment (window.location.hash) and injects it into the DOM without proper sanitization. An attacker can craft a URL with a malicious hash that executes arbitrary JavaScript when the page loads.\nTo solve: Modify the URL fragment to include a payload and trigger its execution in the browser.", "target": "{\"Lab scenario\": \"Reflected XSS in URL Fragment Parsing\", \"Lab Description\": \"The client-side script extracts the URL fragment (window.location.hash) and injects it into the DOM without proper sanitization. An attacker can craft a URL with a malicious hash that executes arbitrary JavaScript when the page loads.\\nTo solve: Modify the URL fragment to include a payload and trigger its execution in the browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user profile update section", "target": "{\"Lab scenario\": \"Stored XSS in User Profile Update Section\", \"Lab Description\": \"Users can update their profile information, including a bio, which is stored on the server and rendered on their profile page. Lack of sanitization allows malicious scripts to persist and execute in the profile view.\\nTo solve: Inject a JavaScript payload in the bio update and verify execution when the profile is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation-based xss via drag-and-drop file upload", "target": "{\"Lab scenario\": \"Mutation-based XSS via Drag-and-Drop File Upload\", \"Lab Description\": \"The application supports drag-and-drop file uploads and displays file metadata in a preview panel. The preview code unsafely uses innerHTML to render metadata, allowing mutation-based XSS when an attacker uploads a file with a maliciously crafted metadata field.\\nTo solve: Modify the file metadata to include a payload and trigger its execution when the preview is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS via Local Storage Injection", "target": "{\"Lab scenario\": \"DOM-based XSS via Local Storage Injection\", \"Lab Description\": \"The application saves user preferences in the browser's localStorage and later reads them to personalize the UI. However, it fails to sanitize the stored values before inserting them into the DOM, allowing attackers to inject malicious scripts.\\nTo solve: Inject a JavaScript payload into localStorage using browser DevTools and trigger its execution when the page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in rest api error message", "target": "{\"Lab scenario\": \"Reflected XSS in REST API Error Message\", \"Lab Description\": \"An API endpoint designed to handle user requests returns error messages containing the unsanitized user input. An attacker can supply a malicious value that gets reflected in the error message, leading to XSS when the error is displayed in the browser.\\nTo solve: Craft a request with a payload in the input parameter and trigger the reflected error message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in online forum post", "target": "{\"Lab scenario\": \"Stored XSS in Online Forum Post\", \"Lab Description\": \"The forum application allows users to post messages that are stored on the server and later rendered on forum threads. The posts are not sanitized before display, letting attackers inject malicious scripts that persist across sessions.\\nTo solve: Submit a forum post containing a payload and verify that it executes when the thread is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A widget loader dynamically generates content using document.write based on a URL parameter. The parameter is not sanitized, allowing an attacker to supply a malicious payload that executes when the widget is loaded.\nTo solve: Modify the URL parameter to include a script payload and trigger its execution in the widget's output.", "target": "{\"Lab scenario\": \"DOM-based XSS via document.write in Widget Loader\", \"Lab Description\": \"A widget loader dynamically generates content using document.write based on a URL parameter. The parameter is not sanitized, allowing an attacker to supply a malicious payload that executes when the widget is loaded.\\nTo solve: Modify the URL parameter to include a script payload and trigger its execution in the widget's output.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-based XSS in Dynamic Theme Editor", "target": "{\"Lab scenario\": \"Mutation-based XSS in Dynamic Theme Editor\", \"Lab Description\": \"The application provides a dynamic theme editor that allows users to customize the website's appearance by updating CSS stored on the server. The editor applies the submitted CSS directly into a style tag without sanitization, permitting XSS via malicious CSS payloads.\\nTo solve: Inject a CSS-based payload using mutation events that triggers JavaScript execution when the theme is applied.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in search query parameter", "target": "{\"Lab scenario\": \"Reflected XSS in Search Query Parameter\", \"Lab Description\": \"The application provides a search feature where user input is reflected back into the page without proper sanitization. Attackers can inject scripts through the search parameter to achieve XSS.\\nTo solve: Craft a malicious payload in the search query and observe if it executes on the response page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in product review system", "target": "{\"Lab scenario\": \"Stored XSS in Product Review System\", \"Lab Description\": \"Users can leave reviews on product pages. The application does not sanitize or escape the user-submitted content before rendering it, leading to stored XSS.\\nTo solve: Submit a malicious script in the review form and revisit the product page to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses `location.hash` to dynamically update content on the page without sanitization. This allows attackers to inject scripts that execute when the hash is processed.\nTo solve: Inject a script payload into the URL hash and observe its execution in the page.", "target": "{\"Lab scenario\": \"DOM-based XSS in Location Hash\", \"Lab Description\": \"The application uses `location.hash` to dynamically update content on the page without sanitization. This allows attackers to inject scripts that execute when the hash is processed.\\nTo solve: Inject a script payload into the URL hash and observe its execution in the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user profile bio", "target": "{\"Lab scenario\": \"Stored XSS in User Profile Bio\", \"Lab Description\": \"Users can update their profile bio. The application displays this information without escaping HTML content, leading to persistent XSS on profile pages.\\nTo solve: Insert a payload in the bio field and revisit your profile page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via JavaScript URL in HREF Attribute", "target": "{\"Lab scenario\": \"XSS via JavaScript URL in HREF Attribute\", \"Lab Description\": \"The application includes user-controlled links using anchor tags where the href is directly set to user input. This allows attackers to inject `javascript:` URLs to execute code when the link is clicked.\\nTo solve: Inject a `javascript:` payload and click the link to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in client-side comment preview feature", "target": "{\"Lab scenario\": \"XSS in Client-Side Comment Preview Feature\", \"Lab Description\": \"The application has a live comment preview implemented entirely on the client-side. User input is inserted into the DOM using `innerHTML` without sanitization, allowing for DOM-based XSS.\\nTo solve: Inject a payload in the comment box and observe the live preview triggering script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in admin feedback viewer", "target": "{\"Lab scenario\": \"Stored XSS in Admin Feedback Viewer\", \"Lab Description\": \"Users can submit feedback via a contact form. The feedback is stored and later viewed by an admin. Since the admin interface renders raw HTML from stored feedback, it's vulnerable to stored XSS.\\nTo solve: Submit a feedback with a payload and wait for the admin to view it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in unescaped error message", "target": "{\"Lab scenario\": \"XSS in Unescaped Error Message\", \"Lab Description\": \"The application displays error messages using unsanitized user input. If the user submits malformed input, it is echoed in the error output, enabling reflected XSS.\\nTo solve: Trigger an error that includes a payload in the message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss via unescaped url parameter in template", "target": "{\"Lab scenario\": \"DOM XSS via Unescaped URL Parameter in Template\", \"Lab Description\": \"The application loads a `title` parameter from the URL and inserts it directly into a DOM template using `innerHTML`. If not escaped, this allows DOM-based XSS via the `title` parameter.\\nTo solve: Inject a payload into the title parameter and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via File Name in File Upload Confirmation Page", "target": "{\"Lab scenario\": \"XSS via File Name in File Upload Confirmation Page\", \"Lab Description\": \"When users upload a file, the server reflects the original filename back into the confirmation message without sanitization. This allows attackers to upload files with malicious names containing XSS payloads.\\nTo solve: Upload a file with a filename containing a script and confirm that it executes on the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Search Query Parameter", "target": "{\"Lab scenario\": \"Reflected XSS via Search Query Parameter\", \"Lab Description\": \"The application has a search functionality that reflects user input directly into the results page without encoding or sanitization. An attacker can inject malicious scripts via the search query.\\nTo solve: Inject a payload in the search parameter and confirm its execution in the results page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user profile bio", "target": "{\"Lab scenario\": \"Stored XSS in User Profile Bio\", \"Lab Description\": \"Users can update their profile including a 'bio' field. The bio is displayed on their public profile page without escaping HTML. An attacker can store a payload in the bio that executes whenever someone views their profile.\\nTo solve: Submit a malicious bio and visit the profile to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in javascript context via url parameter", "target": "{\"Lab scenario\": \"XSS in JavaScript Context via URL Parameter\", \"Lab Description\": \"The page dynamically sets a JavaScript variable using a URL parameter without proper sanitization. Injecting unescaped characters allows breaking out of the script context and executing arbitrary code.\\nTo solve: Inject a payload that escapes the JavaScript string and executes your code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The page uses JavaScript to read the URL fragment (`location.hash`) and inserts it into the page using `innerHTML`. This allows attackers to craft a malicious link that executes code when opened.\nTo solve: Craft a URL with a malicious hash and verify code execution.", "target": "{\"Lab scenario\": \"DOM XSS via Fragment Identifier Injection\", \"Lab Description\": \"The page uses JavaScript to read the URL fragment (`location.hash`) and inserts it into the page using `innerHTML`. This allows attackers to craft a malicious link that executes code when opened.\\nTo solve: Craft a URL with a malicious hash and verify code execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Product Review Rendering", "target": "{\"Lab scenario\": \"XSS in Product Review Rendering\", \"Lab Description\": \"Users can leave reviews on products. These reviews are displayed on the product page without sanitization. Malicious users can inject HTML/JavaScript into the review content.\\nTo solve: Submit a review containing a script and reload the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application fetches a user profile via JSON and renders fields like 'nickname' using `innerHTML`. A malicious user can inject a script in their nickname, which is then executed when another user views the profile.", "target": "{\"Lab scenario\": \"XSS in JSON Response Rendered via innerHTML\", \"Lab Description\": \"The application fetches a user profile via JSON and renders fields like 'nickname' using `innerHTML`. A malicious user can inject a script in their nickname, which is then executed when another user views the profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in comment section with markdown parsing", "target": "{\"Lab scenario\": \"XSS in Comment Section with Markdown Parsing\", \"Lab Description\": \"The app allows Markdown-formatted comments but doesnâ€™t properly sanitize embedded HTML. Attackers can bypass Markdown rendering with raw HTML containing XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in support ticket system", "target": "{\"Lab scenario\": \"Stored XSS in Support Ticket System\", \"Lab Description\": \"Users can submit support tickets with titles and descriptions. These values are later reviewed by admins. The input is rendered without encoding, allowing attackers to inject stored XSS payloads into ticket fields.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Event Handler Injection in User Settings", "target": "{\"Lab scenario\": \"XSS via Event Handler Injection in User Settings\", \"Lab Description\": \"The app displays user settings including a customizable profile badge with attributes like color and label. Input is reflected in HTML attributes without validation, allowing injection of `onmouseover`, `onclick`, etc.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss in history pushstate injection", "target": "{\"Lab scenario\": \"DOM XSS in History PushState Injection\", \"Lab Description\": \"The page uses `history.pushState` to change the visible URL and then updates part of the DOM using the value of `location.pathname`. An attacker can inject crafted content into the DOM by manipulating the path.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Error Message Parameter", "target": "{\"Lab scenario\": \"Reflected XSS via Error Message Parameter\", \"Lab Description\": \"The application reflects an error message from a query parameter directly into the page without sanitization. Attackers can inject JavaScript payloads through the `error` query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS via Location Hash Injection", "target": "{\"Lab scenario\": \"DOM XSS via Location Hash Injection\", \"Lab Description\": \"The app uses `location.hash` to dynamically insert content into the page using `innerHTML`. This allows attackers to trigger XSS by modifying the fragment identifier.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The search feature displays autocomplete suggestions fetched from the server and rendered using `innerHTML`. Malicious input from the query is reflected without sanitization.", "target": "{\"Lab scenario\": \"XSS in Search Autocomplete Suggestions\", \"Lab Description\": \"The search feature displays autocomplete suggestions fetched from the server and rendered using `innerHTML`. Malicious input from the query is reflected without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in user bio with unsafe render", "target": "{\"Lab scenario\": \"Stored XSS in User Bio with Unsafe Render\", \"Lab Description\": \"Users can set their bio on their profile. The server stores this content and later displays it without escaping or sanitizing, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via unsanitized image caption in gallery", "target": "{\"Lab scenario\": \"XSS via Unsanitized Image Caption in Gallery\", \"Lab Description\": \"Users upload images with optional captions. These captions are rendered directly into the gallery view using `innerHTML`. Attackers can upload a benign image with a malicious caption.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in email preview template", "target": "{\"Lab scenario\": \"Reflected XSS in Email Preview Template\", \"Lab Description\": \"The webmail client has a preview feature for incoming emails. It takes query parameters like subject and body to render a mock preview. However, user-supplied values are injected into the DOM without sanitization, leading to reflected XSS.\\nTo solve: Inject a script in the body parameter to trigger an alert when the preview is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An image gallery allows users to comment on pictures. These comments are stored and displayed under the images. The input is not sanitized, leading to persistent XSS on image pages.\nTo solve: Submit a comment with a script payload and revisit the image page to see the script execute.", "target": "{\"Lab scenario\": \"Stored XSS in Comment Section of Image Gallery\", \"Lab Description\": \"An image gallery allows users to comment on pictures. These comments are stored and displayed under the images. The input is not sanitized, leading to persistent XSS on image pages.\\nTo solve: Submit a comment with a script payload and revisit the image page to see the script execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in notification renderer", "target": "{\"Lab scenario\": \"DOM-based XSS in Notification Renderer\", \"Lab Description\": \"The application fetches notifications from localStorage and renders them inside an alert panel. The values are inserted into the DOM with innerHTML, making it vulnerable to DOM-based XSS.\\nTo solve: Inject a malicious payload via localStorage and reload the app to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in redirect url", "target": "{\"Lab scenario\": \"Reflected XSS in Redirect URL\", \"Lab Description\": \"The login page accepts a `redirect` parameter in the URL to know where to send users after login. However, the parameter is directly embedded in the page without sanitization, enabling reflected XSS.\\nTo solve: Craft a redirect value containing a script and observe it executing when the login page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Profile Bio Field", "target": "{\"Lab scenario\": \"Stored XSS in Profile Bio Field\", \"Lab Description\": \"The application lets users customize their profile bio. However, the bio is rendered using innerHTML on the profile page without sanitization. An attacker can inject a persistent XSS payload into their own bio.\\nTo solve: Update your profile with a script payload and view your profile page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via jsonp callback in analytics dashboard", "target": "{\"Lab scenario\": \"DOM XSS via JSONP Callback in Analytics Dashboard\", \"Lab Description\": \"A marketing dashboard loads analytics from a third-party endpoint using a JSONP callback. The callback name is passed via the URL and dynamically injected into a script tag using innerHTML. This leads to DOM-based XSS if a malicious callback name is passed.\\nTo solve: Inject a payload in the `callback` parameter to execute JavaScript when the page loads the script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A file upload endpoint returns a success message including the file name, which is reflected into the HTML without escaping. An attacker can upload a file with a crafted name containing script code to trigger XSS when users view the upload confirmation.\nTo solve: Upload a file with an XSS payload in the filename.", "target": "{\"Lab scenario\": \"XSS via File Name Injection in File Upload Success Page\", \"Lab Description\": \"A file upload endpoint returns a success message including the file name, which is reflected into the HTML without escaping. An attacker can upload a file with a crafted name containing script code to trigger XSS when users view the upload confirmation.\\nTo solve: Upload a file with an XSS payload in the filename.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via websocket chat broadcast", "target": "{\"Lab scenario\": \"XSS via WebSocket Chat Broadcast\", \"Lab Description\": \"A real-time chat system uses WebSocket to broadcast messages. The server relays all messages to connected clients without any sanitization, and the frontend renders them using `innerHTML`. This leads to reflected XSS through chat messages.\\nTo solve: Send a message containing a script payload through WebSocket and observe execution on other clients.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in pdf viewer via document title injection", "target": "{\"Lab scenario\": \"XSS in PDF Viewer via Document Title Injection\", \"Lab Description\": \"The app uses an embedded PDF viewer that shows the document title in the page header. The title is passed via URL query and injected into the DOM without escaping. XSS is triggered when users view a document with a malicious title.\\nTo solve: Craft a malicious URL with a script in the `title` parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in dynamic survey system", "target": "{\"Lab scenario\": \"Stored XSS in Dynamic Survey System\", \"Lab Description\": \"A feedback survey stores user responses, including free-text answers, and displays them to admins for review. The stored answers are rendered without sanitization, allowing stored XSS if a malicious user submits a script payload.\\nTo solve: Submit a survey response with a script, then view the results as an admin.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via svg image editor export feature", "target": "{\"Lab scenario\": \"XSS via SVG Image Editor Export Feature\", \"Lab Description\": \"The application includes a browser-based SVG image editor that allows users to export their work. The exported SVG is displayed directly using innerHTML without validation. An attacker can craft a malicious SVG file with embedded JavaScript to trigger XSS when previewed.\\nTo solve: Craft an SVG with an embedded script and upload it, then trigger the preview feature.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss via custom 404 page search reflection", "target": "{\"Lab scenario\": \"Reflected XSS via Custom 404 Page Search Reflection\", \"Lab Description\": \"A custom 404 error page reflects the missing URL into the response body for debugging purposes. The application fails to sanitize the reflected path, allowing attackers to inject scripts via the URL, leading to reflected XSS when users land on an invalid link.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application includes an email verification link with a `next` parameter that dictates where the user will be redirected after confirming their email. This value is also shown as a tooltip or confirmation. An attacker can inject HTML/JS into this parameter, resulting in XSS.", "target": "{\"Lab scenario\": \"XSS via Redirect URL in Email Verification\", \"Lab Description\": \"The application includes an email verification link with a `next` parameter that dictates where the user will be redirected after confirming their email. This value is also shown as a tooltip or confirmation. An attacker can inject HTML/JS into this parameter, resulting in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Misconfigured React dangerouslySetInnerHTML", "target": "{\"Lab scenario\": \"XSS via Misconfigured React dangerouslySetInnerHTML\", \"Lab Description\": \"A React-based application uses `dangerouslySetInnerHTML` to render dynamic content for FAQs. An admin can submit new FAQs through a CMS, but the rendered content is not sanitized. An attacker with access to the CMS submits a malicious FAQ that executes code for all frontend users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Webhook Tester via Reflected Webhook Event", "target": "{\"Lab scenario\": \"XSS in Webhook Tester via Reflected Webhook Event\", \"Lab Description\": \"A webhook testing tool reflects incoming event data on a dashboard for debugging. It renders event contents in real-time using innerHTML without escaping, allowing attackers to trigger XSS by sending malicious event payloads.\\nTo solve: Send a crafted webhook payload with HTML or script tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Drag-and-Drop HTML Builder", "target": "{\"Lab scenario\": \"XSS via Drag-and-Drop HTML Builder\", \"Lab Description\": \"The application includes a WYSIWYG HTML page builder that allows users to drag and drop elements (like images, buttons, text blocks) to create pages. The builder saves the generated HTML and renders it using innerHTML for previews. This allows attackers to inject malicious elements that execute scripts when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Real-time Chat Notification Tooltip", "target": "{\"Lab scenario\": \"XSS via Real-time Chat Notification Tooltip\", \"Lab Description\": \"A chat app notifies users of new messages via tooltips on message previews. The tooltips use message content and are rendered using innerHTML for formatting. An attacker can send a specially crafted message to another user that contains an XSS payload executed when the tooltip shows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via third-party comment embed with markup support", "target": "{\"Lab scenario\": \"XSS via Third-Party Comment Embed with Markup Support\", \"Lab Description\": \"A news site uses a third-party comment plugin that allows limited HTML tags for formatting. However, the sanitization process fails to properly strip event handlers in allowed tags. This can be exploited to inject XSS via seemingly allowed markup like `<b onmouseover>`.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: dom xss via dynamic profile tabs", "target": "{\"Lab scenario\": \"DOM XSS via Dynamic Profile Tabs\", \"Lab Description\": \"The user profile page uses client-side JavaScript to dynamically switch between tabs (Posts, Info, Settings). Tab names are passed via URL hash and directly injected into the DOM without validation. An attacker can craft a malicious URL that injects a script through the hash.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in language switcher via localized json injection", "target": "{\"Lab scenario\": \"XSS in Language Switcher via Localized JSON Injection\", \"Lab Description\": \"The web app supports multiple languages and loads localized JSON files dynamically based on a `lang` parameter in the URL. The chosen language file is parsed and rendered into the DOM without filtering. An attacker can inject malicious content by tampering with the language file or abusing the input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Markdown Rendering in Internal Wiki", "target": "{\"Lab scenario\": \"XSS via Markdown Rendering in Internal Wiki\", \"Lab Description\": \"An internal documentation tool allows employees to create wiki pages using Markdown. The Markdown parser supports raw HTML for flexibility, but no sanitization is applied before rendering. This allows attackers to inject raw HTML and JavaScript, leading to stored XSS across internal teams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Interactive Data Dashboard Filters", "target": "{\"Lab scenario\": \"XSS in Interactive Data Dashboard Filters\", \"Lab Description\": \"A financial dashboard allows users to create custom filters for viewing metrics. These filters are stored and reflected into a dynamic URL fragment and into the DOM for preview. Due to improper escaping, attackers can create malicious filters that result in DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Error Logging Endpoint", "target": "{\"Lab scenario\": \"Reflected XSS via Error Logging Endpoint\", \"Lab Description\": \"A developer debugging panel reflects error messages in real-time using query parameters. When a script fails, the message is passed via the URL and rendered without sanitization into the page. This can be exploited by injecting JavaScript into the `msg` parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in survey form builder preview", "target": "{\"Lab scenario\": \"XSS in Survey Form Builder Preview\", \"Lab Description\": \"A survey creation tool lets users preview their forms. The form fields are built dynamically from user inputs (question titles, button labels, etc.) and rendered using innerHTML. This exposes the system to XSS if a malicious input is added in the preview stage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Admin Report Export Viewer", "target": "{\"Lab scenario\": \"XSS via Admin Report Export Viewer\", \"Lab Description\": \"An internal admin panel allows exported report files (JSON) to be viewed in the browser. The system parses the JSON and injects the content directly into the page. Malicious entries inside the JSON can lead to XSS if not properly escaped before rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in email template preview with merge tags", "target": "{\"Lab scenario\": \"XSS in Email Template Preview with Merge Tags\", \"Lab Description\": \"A marketing automation platform allows users to build email templates using merge tags like {{user.name}}. When previewing an email, the system renders these values using innerHTML without escaping. If an attacker injects HTML or JavaScript in the name field, it leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Third-Party Widget Configuration Interface", "target": "{\"Lab scenario\": \"XSS via Third-Party Widget Configuration Interface\", \"Lab Description\": \"A SaaS dashboard allows users to embed third-party widgets by providing a custom name and HTML snippet. The snippet is injected into an iframe for rendering, but the widget name is rendered directly in the parent DOM. Improper sanitization of the name field causes a reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in ai chatbot response rendering", "target": "{\"Lab scenario\": \"XSS in AI Chatbot Response Rendering\", \"Lab Description\": \"An internal HR portal integrates an AI assistant that displays formatted chatbot responses. The backend sends responses as HTML to support formatting. Due to lack of sanitization, specially crafted user questions can poison the output with malicious script, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in resume parser tool for job portal", "target": "{\"Lab scenario\": \"XSS in Resume Parser Tool for Job Portal\", \"Lab Description\": \"An online recruitment portal parses resumes and shows key fields (name, title, skills) in a review panel. If a user uploads a resume with a malicious name or skill value, the data is rendered into the DOM via innerHTML during the recruiter review phase.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Event Tracking Dashboard Tooltip", "target": "{\"Lab scenario\": \"XSS via Event Tracking Dashboard Tooltip\", \"Lab Description\": \"An analytics tool shows live user activity on a map. Hovering over a session point displays user-agent and location in a tooltip. If user-agent is not sanitized, a malicious user can inject payloads via browser headers to trigger XSS in the map UI.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An internal feedback tool allows managers to print submitted feedback for offline review. When a feedback entry is selected, the system loads it into a print preview modal using innerHTML. Input from users is not sanitized, allowing stored XSS when feedback is rendered for printing.", "target": "{\"Lab scenario\": \"XSS in User Feedback Print Preview Panel\", \"Lab Description\": \"An internal feedback tool allows managers to print submitted feedback for offline review. When a feedback entry is selected, the system loads it into a print preview modal using innerHTML. Input from users is not sanitized, allowing stored XSS when feedback is rendered for printing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A project management system includes a Markdown editor with a live preview for issue descriptions. The server renders Markdown to HTML without sanitizing raw HTML inside the input, allowing script tags and event handlers to be injected through formatted issue reports.", "target": "{\"Lab scenario\": \"XSS in Issue Tracker Markdown Preview Panel\", \"Lab Description\": \"A project management system includes a Markdown editor with a live preview for issue descriptions. The server renders Markdown to HTML without sanitizing raw HTML inside the input, allowing script tags and event handlers to be injected through formatted issue reports.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Notification Message Renderer via API Hook", "target": "{\"Lab scenario\": \"XSS in Notification Message Renderer via API Hook\", \"Lab Description\": \"An internal platform allows third-party services to send messages to a notification widget using a POST API. These messages are shown in the UI using `.innerHTML`. An attacker exploiting an API integration can send malicious HTML that triggers XSS when a user views their notifications.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in E-Commerce Order Notes Renderer", "target": "{\"Lab scenario\": \"XSS in E-Commerce Order Notes Renderer\", \"Lab Description\": \"A back-office admin panel for an e-commerce store allows customers to add order notes. These notes are later displayed to the admin using innerHTML. An attacker can place a payload in the note during checkout that results in stored XSS when the admin views the order.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Chat System Mention Renderer", "target": "{\"Lab scenario\": \"XSS in Chat System Mention Renderer\", \"Lab Description\": \"A real-time chat system allows users to mention others using @username. Mentions are converted into profile links and displayed via innerHTML in the message thread. If a malicious user sets their username to a payload, it can result in stored XSS when others view the message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in real-time task board via websocket broadcast", "target": "{\"Lab scenario\": \"XSS in Real-Time Task Board via WebSocket Broadcast\", \"Lab Description\": \"A team collaboration tool uses WebSockets to broadcast real-time task updates. When a task is updated, the title is sent to all clients and rendered using innerHTML in the task board. No input validation is performed, allowing an attacker to send a task update with a script payload that executes on all clients.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in drag-and-drop file uploader preview", "target": "{\"Lab scenario\": \"XSS in Drag-and-Drop File Uploader Preview\", \"Lab Description\": \"A media management app previews filenames uploaded through a drag-and-drop interface. The filenames are directly rendered into the DOM via innerHTML without sanitization. A specially crafted filename with HTML/JS can trigger XSS during preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Email Template Editor with Dynamic Variables", "target": "{\"Lab scenario\": \"XSS via Email Template Editor with Dynamic Variables\", \"Lab Description\": \"An email marketing platform allows users to design templates and preview them with dynamic variables like {{user.name}}. A preview engine substitutes variables with user-provided data and renders the email content with innerHTML. If user data includes malicious HTML, XSS occurs in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Dynamic Tooltip Library with Data Attributes", "target": "{\"Lab scenario\": \"XSS in Dynamic Tooltip Library with Data Attributes\", \"Lab Description\": \"A dashboard uses a tooltip library that reads content from `data-tooltip` attributes and sets it using `.innerHTML` inside a floating div. An attacker can inject HTML content into the `data-tooltip` attribute via an input field, leading to XSS when the user hovers over the element.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via video player custom subtitle track", "target": "{\"Lab scenario\": \"XSS via Video Player Custom Subtitle Track\", \"Lab Description\": \"A video streaming platform allows users to upload custom subtitle files which are rendered as captions. When rendering the caption preview, the system uses innerHTML to inject the subtitle line directly into a DOM element. A malicious subtitle line can inject and execute arbitrary scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in ai chatbot summary feature", "target": "{\"Lab scenario\": \"XSS in AI Chatbot Summary Feature\", \"Lab Description\": \"A SaaS application integrates an AI chatbot that summarizes user conversations and stores them in a dashboard. The summary text is rendered using innerHTML for rich formatting. If a malicious input is added to the chat and reflected in the summary, it can trigger XSS in the dashboard view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An e-commerce admin panel allows staff to add internal notes to invoices. These notes are later rendered inside a modal popup using innerHTML when the invoice is viewed. A malicious staff user can inject an XSS payload via the note field, affecting any admin who views the invoice.", "target": "{\"Lab scenario\": \"XSS in E-commerce Invoice Note Field\", \"Lab Description\": \"An e-commerce admin panel allows staff to add internal notes to invoices. These notes are later rendered inside a modal popup using innerHTML when the invoice is viewed. A malicious staff user can inject an XSS payload via the note field, affecting any admin who views the invoice.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Project Management Mention System", "target": "{\"Lab scenario\": \"XSS in Project Management Mention System\", \"Lab Description\": \"A project management tool allows users to tag teammates using `@username` in comments. Mentions are converted to HTML spans with innerHTML for profile popups. An attacker can bypass mention sanitization by including HTML in their comment, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in lms code submission feedback section", "target": "{\"Lab scenario\": \"XSS in LMS Code Submission Feedback Section\", \"Lab Description\": \"A Learning Management System (LMS) lets students submit code assignments and receive feedback. Instructor comments are shown next to the code using innerHTML. If an instructor accidentally includes unsafe HTML or JavaScript in the feedback, XSS can be triggered when students view it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A collaborative documentation tool uses a Markdown editor and allows users to preview the rendered HTML. The Markdown engine fails to sanitize raw HTML tags, so a user can insert `<script>` tags directly. When another collaborator opens the preview, XSS is triggered.", "target": "{\"Lab scenario\": \"XSS in Collaborative Markdown Editor with Preview\", \"Lab Description\": \"A collaborative documentation tool uses a Markdown editor and allows users to preview the rendered HTML. The Markdown engine fails to sanitize raw HTML tags, so a user can insert `<script>` tags directly. When another collaborator opens the preview, XSS is triggered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Custom CRM Search Autocomplete", "target": "{\"Lab scenario\": \"XSS in Custom CRM Search Autocomplete\", \"Lab Description\": \"A custom-built CRM system includes a search bar with autocomplete suggestions for contacts. The suggestions are injected via JavaScript into the DOM without proper sanitization. An attacker can inject malicious scripts via a contactâ€™s name, which is then shown as part of the autocomplete dropdown.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in saas admin analytics embed tool", "target": "{\"Lab scenario\": \"XSS in SaaS Admin Analytics Embed Tool\", \"Lab Description\": \"A SaaS platform allows admins to embed custom analytics widgets using raw HTML snippets. These snippets are stored and injected into the dashboard. If an attacker saves a malicious script in the embed HTML, it will execute when the dashboard loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in mobile push notification preview", "target": "{\"Lab scenario\": \"XSS in Mobile Push Notification Preview\", \"Lab Description\": \"An admin interface for sending mobile push notifications displays a preview before sending. The message is rendered using innerHTML to simulate what users would see. If the admin inserts an HTML payload, it executes in the preview, causing an XSS vulnerability.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in email template test renderer", "target": "{\"Lab scenario\": \"XSS in Email Template Test Renderer\", \"Lab Description\": \"A web platform lets users build and preview email templates. When testing, the email content is rendered using innerHTML to simulate appearance. If malicious HTML is added to the content body, it results in XSS during the test render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Product Customizer Live Preview", "target": "{\"Lab scenario\": \"XSS in Product Customizer Live Preview\", \"Lab Description\": \"An online merchandise store includes a live preview feature for customizing t-shirts with text. The text input is rendered into the preview using innerHTML. Injecting HTML tags in the input results in XSS execution during live preview rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss in user feedback preview", "target": "{\"Lab scenario\": \"Reflected XSS in User Feedback Preview\", \"Lab Description\": \"The application allows users to preview their feedback before submission. The preview is rendered using innerHTML without sanitization, making it vulnerable to reflected XSS. The feedback text is taken from a query parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss via contact form rendering in admin panel", "target": "{\"Lab scenario\": \"Stored XSS via Contact Form Rendering in Admin Panel\", \"Lab Description\": \"The application stores contact form messages in a database. The admin panel renders these messages without encoding, resulting in stored XSS when a message contains malicious JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in Search Suggestion Autocomplete", "target": "{\"Lab scenario\": \"DOM-based XSS in Search Suggestion Autocomplete\", \"Lab Description\": \"The app provides live search suggestions using JavaScript and appends search terms directly to the DOM using innerHTML. If the search term is attacker-controlled, this introduces DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in blog comment section", "target": "{\"Lab scenario\": \"Stored XSS in Blog Comment Section\", \"Lab Description\": \"Users can leave comments on blog posts. Comments are stored and displayed using innerHTML without sanitization, allowing stored XSS if an attacker injects a malicious script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The app includes a debug mode that shows detailed error messages with user input echoed back on failure. The error is printed inside the HTML body using unsanitized user data, leading to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Error Message Display\", \"Lab Description\": \"The app includes a debug mode that shows detailed error messages with user input echoed back on failure. The error is printed inside the HTML body using unsanitized user data, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS via Profile Settings JSON Reflection", "target": "{\"Lab scenario\": \"DOM XSS via Profile Settings JSON Reflection\", \"Lab Description\": \"The app allows users to update their profile settings via a JSON-based endpoint. The server reflects user input into the page using a script block and JSON.parse without escaping. This allows XSS when crafted JSON is interpreted as script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Custom Status Messages", "target": "{\"Lab scenario\": \"Stored XSS in Custom Status Messages\", \"Lab Description\": \"Users can set a custom status message. The message is displayed in their profile and stored server-side. When other users visit the profile, the unsanitized message renders as HTML, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app shows a welcome notification popup if a `msg` parameter is passed in the URL. The message is injected into the DOM using innerHTML, allowing reflected XSS via the query string.", "target": "{\"Lab scenario\": \"Reflected XSS in Notification Popup via Query Parameter\", \"Lab Description\": \"The app shows a welcome notification popup if a `msg` parameter is passed in the URL. The message is injected into the DOM using innerHTML, allowing reflected XSS via the query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss via username in public posts", "target": "{\"Lab scenario\": \"Stored XSS via Username in Public Posts\", \"Lab Description\": \"Users can publish short posts under their usernames. The app displays the posts along with the username, but does not sanitize it, allowing stored XSS via username injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss via hash fragment injection", "target": "{\"Lab scenario\": \"DOM-based XSS via Hash Fragment Injection\", \"Lab Description\": \"The app reads the `location.hash` value and writes it directly into the DOM using innerHTML to simulate tab switching. An attacker can craft a malicious link with a script in the hash fragment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app includes an email reset form that returns an error message if the email is invalid. The error is reflected in the page without proper encoding, leading to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS via Error Message in Email Reset\", \"Lab Description\": \"The app includes an email reset form that returns an error message if the email is invalid. The error is reflected in the page without proper encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in event title on calendar app", "target": "{\"Lab scenario\": \"Stored XSS in Event Title on Calendar App\", \"Lab Description\": \"A calendar app allows users to add events with a title and description. The event title is displayed without sanitization, making the app vulnerable to stored XSS when a malicious title is entered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via search suggestion rendering", "target": "{\"Lab scenario\": \"DOM XSS via Search Suggestion Rendering\", \"Lab Description\": \"As users type into the search bar, the app fetches and renders suggestions directly from the server. Suggestions are injected using innerHTML, leading to DOM-based XSS when malicious entries are returned.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A forum application includes a search page that displays the search query as part of the results heading. The query is injected directly into the HTML without encoding, allowing reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Forum Search Results\", \"Lab Description\": \"A forum application includes a search page that displays the search query as part of the results heading. The query is injected directly into the HTML without encoding, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can leave feedback using a widget that displays the most recent comments on the homepage. The app fails to sanitize input before rendering, leading to persistent XSS.", "target": "{\"Lab scenario\": \"Stored XSS via Feedback Widget\", \"Lab Description\": \"Users can leave feedback using a widget that displays the most recent comments on the homepage. The app fails to sanitize input before rendering, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in Chat Mention Highlighting", "target": "{\"Lab scenario\": \"DOM XSS in Chat Mention Highlighting\", \"Lab Description\": \"A real-time chat application highlights mentions (e.g., @username) by wrapping them with a span. The replacement is done using innerHTML without escaping, which can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user badge label", "target": "{\"Lab scenario\": \"Stored XSS in User Badge Label\", \"Lab Description\": \"The platform lets users set a badge label that appears next to their name. The label is rendered without output encoding, which leads to stored XSS when a malicious label is saved.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app lets users send invite links with custom messages. The message is reflected in the invite preview without encoding, which leads to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS via Invite Link Preview\", \"Lab Description\": \"The app lets users send invite links with custom messages. The message is reflected in the invite preview without encoding, which leads to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss via public link description", "target": "{\"Lab scenario\": \"Stored XSS via Public Link Description\", \"Lab Description\": \"Users can share public links with descriptions. These are displayed in a shared gallery. The description field is vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in document viewer page name", "target": "{\"Lab scenario\": \"Reflected XSS in Document Viewer Page Name\", \"Lab Description\": \"A document viewer allows previewing documents with a custom page name set via a query parameter. The page name is used in a heading without sanitization, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via hash-based router in single page app", "target": "{\"Lab scenario\": \"DOM XSS via Hash-Based Router in Single Page App\", \"Lab Description\": \"The application uses a hash-based router to load views in a single-page application. The router reads `window.location.hash` and uses `innerHTML` to insert dynamic content, allowing for DOM-based XSS via crafted URL fragments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS via Product FAQ Answer Field", "target": "{\"Lab scenario\": \"Stored XSS via Product FAQ Answer Field\", \"Lab Description\": \"Users can submit FAQs for products. The answer field is stored and later rendered without escaping. This allows persistent XSS via the answer field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Order Confirmation Message", "target": "{\"Lab scenario\": \"Reflected XSS in Order Confirmation Message\", \"Lab Description\": \"After placing an order, the app displays a custom message using a `msg` query parameter. This parameter is reflected without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss via email signature setting", "target": "{\"Lab scenario\": \"Stored XSS via Email Signature Setting\", \"Lab Description\": \"Users can customize an email signature that appears on every message they send. The signature is rendered as HTML without sanitization, allowing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in JSONP Callback Parameter", "target": "{\"Lab scenario\": \"Reflected XSS in JSONP Callback Parameter\", \"Lab Description\": \"An endpoint supports JSONP responses using a `callback` parameter. The callback name is not validated or sanitized, allowing XSS if script tags are injected.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The web calendar allows users to add events with custom titles and descriptions. Titles are rendered on the main calendar interface without sanitization, enabling persistent XSS.", "target": "{\"Lab scenario\": \"Stored XSS in User-Generated Calendar Event Titles\", \"Lab Description\": \"The web calendar allows users to add events with custom titles and descriptions. Titles are rendered on the main calendar interface without sanitization, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Feedback Search Query", "target": "{\"Lab scenario\": \"Reflected XSS in Feedback Search Query\", \"Lab Description\": \"The feedback search feature reflects the user query directly into the results page title without proper escaping, allowing reflected XSS through the query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user-supplied video titles", "target": "{\"Lab scenario\": \"Stored XSS in User-Supplied Video Titles\", \"Lab Description\": \"The video sharing platform allows users to upload videos and provide a title. These titles are rendered in the homepage feed without escaping, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A dynamic viewer loads content based on the `window.location.hash` and directly injects it into the DOM. This leads to a DOM-based XSS vulnerability via the URL fragment.", "target": "{\"Lab scenario\": \"DOM XSS via URL Fragment Injection in Dynamic Viewer\", \"Lab Description\": \"A dynamic viewer loads content based on the `window.location.hash` and directly injects it into the DOM. This leads to a DOM-based XSS vulnerability via the URL fragment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in poll option text", "target": "{\"Lab scenario\": \"Stored XSS in Poll Option Text\", \"Lab Description\": \"Users can create polls and define custom options. Option text is rendered into a voting form without escaping, making the app vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in ticket support system - message preview", "target": "{\"Lab scenario\": \"XSS in Ticket Support System - Message Preview\", \"Lab Description\": \"A customer support portal displays a preview of a message before submitting a ticket. The message content is rendered in real-time on the preview panel without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in search page with dynamic breadcrumb", "target": "{\"Lab scenario\": \"Reflected XSS in Search Page with Dynamic Breadcrumb\", \"Lab Description\": \"The search feature updates the page breadcrumb dynamically based on the search query. The search term is reflected into an innerHTML context without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss via client-side parsed json data", "target": "{\"Lab scenario\": \"DOM XSS via Client-side Parsed JSON Data\", \"Lab Description\": \"A blog site loads post content from a JSON file and injects it into the DOM using `innerHTML`. Malicious script in the JSON data can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A forum app renders user comments using JavaScript template literals without escaping content, allowing injection of script tags.", "target": "{\"Lab scenario\": \"XSS in User Comments with Template Literals\", \"Lab Description\": \"A forum app renders user comments using JavaScript template literals without escaping content, allowing injection of script tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A blogging platform allows users to post content using Markdown. The Markdown is rendered client-side, but HTML tags inside the Markdown are not sanitized.", "target": "{\"Lab scenario\": \"Stored XSS in Markdown Blog Renderer\", \"Lab Description\": \"A blogging platform allows users to post content using Markdown. The Markdown is rendered client-side, but HTML tags inside the Markdown are not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Email Verification Error Message", "target": "{\"Lab scenario\": \"Reflected XSS in Email Verification Error Message\", \"Lab Description\": \"An email verification system reflects the email address directly into an error message when a malformed email is entered. The input is rendered unsanitized into an HTML element.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A shopping site allows users to leave reviews on products. Reviews are displayed on the product page without sanitizing HTML tags.", "target": "{\"Lab scenario\": \"Stored XSS in Product Reviews Section\", \"Lab Description\": \"A shopping site allows users to leave reviews on products. Reviews are displayed on the product page without sanitizing HTML tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss via url fragment injection", "target": "{\"Lab scenario\": \"DOM XSS via URL Fragment Injection\", \"Lab Description\": \"A single-page app reads the URL hash fragment and displays it in the interface without validation. This allows an attacker to inject JavaScript that executes in the DOM context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in admin-only notes panel (privilege escalation risk)", "target": "{\"Lab scenario\": \"XSS in Admin-only Notes Panel (Privilege Escalation Risk)\", \"Lab Description\": \"Admin panel loads user notes stored in a database and renders them into a dashboard using innerHTML. Users can insert stored notes which, if viewed by admin, execute XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Image Upload Preview using FileReader", "target": "{\"Lab scenario\": \"XSS in Image Upload Preview using FileReader\", \"Lab Description\": \"The application previews uploaded image filenames using FileReader and injects the name into the DOM without sanitization, allowing for payloads in fake image names.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via profile avatar upload preview", "target": "{\"Lab scenario\": \"XSS via Profile Avatar Upload Preview\", \"Lab Description\": \"The web application allows users to upload profile pictures. It provides an immediate preview by rendering the uploaded image file name into an `img` tag using client-side JavaScript. However, no sanitization is applied to the file name, leading to potential script injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in search auto-completion suggestions", "target": "{\"Lab scenario\": \"XSS in Search Auto-Completion Suggestions\", \"Lab Description\": \"The application returns dynamic auto-suggestions for search input. The response is built using unsanitized input directly rendered into a dropdown list without escaping, allowing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application reflects submitted data in a confirmation page after the user fills out the contact form. The input is echoed back without encoding, leading to reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Contact Us Confirmation\", \"Lab Description\": \"The application reflects submitted data in a confirmation page after the user fills out the contact form. The input is echoed back without encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in e-commerce coupon feedback", "target": "{\"Lab scenario\": \"XSS in E-Commerce Coupon Feedback\", \"Lab Description\": \"An e-commerce site allows users to submit coupon feedback. The feedback is stored and displayed on a page using innerHTML without sanitization, introducing a DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Newsletter Subscription Confirmation Page", "target": "{\"Lab scenario\": \"XSS in Newsletter Subscription Confirmation Page\", \"Lab Description\": \"After signing up for a newsletter, the application reflects the submitted email on a confirmation page using innerHTML. No sanitization is applied.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via redirect message in oauth flow", "target": "{\"Lab scenario\": \"XSS via Redirect Message in OAuth Flow\", \"Lab Description\": \"An application uses a message passed in the redirect URL during OAuth flow to display feedback. The message is inserted into the DOM without sanitization, leading to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can submit images with custom captions. The captions are rendered under the image using innerHTML without sanitization, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"XSS in Image Gallery Caption\", \"Lab Description\": \"Users can submit images with custom captions. The captions are rendered under the image using innerHTML without sanitization, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admin panel shows alert messages based on URL parameters. This is inserted directly into the page using innerHTML.", "target": "{\"Lab scenario\": \"XSS via Admin Panel Alert Message\", \"Lab Description\": \"Admin panel shows alert messages based on URL parameters. This is inserted directly into the page using innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Blog allows filtering posts by tag using a `tag` URL parameter. The tag name is echoed on the page title and body unsanitized.", "target": "{\"Lab scenario\": \"XSS in Tag-Based Blog Filtering\", \"Lab Description\": \"Blog allows filtering posts by tag using a `tag` URL parameter. The tag name is echoed on the page title and body unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in live chat widget", "target": "{\"Lab scenario\": \"XSS in Live Chat Widget\", \"Lab Description\": \"The live chat widget reflects user input messages using innerHTML without sanitization. This leads to real-time DOM-based XSS for other users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in newsletter archive viewer", "target": "{\"Lab scenario\": \"XSS in Newsletter Archive Viewer\", \"Lab Description\": \"The application archives past newsletters and displays them via an ID in the URL. The raw HTML content of the newsletter is rendered without sanitization, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: After placing an order, the application reflects the user's full name in the confirmation message via a GET parameter. This reflection happens directly in the HTML response without escaping.", "target": "{\"Lab scenario\": \"Reflected XSS via Order Confirmation Message\", \"Lab Description\": \"After placing an order, the application reflects the user's full name in the confirmation message via a GET parameter. This reflection happens directly in the HTML response without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Dynamic FAQ Generator", "target": "{\"Lab scenario\": \"XSS in Dynamic FAQ Generator\", \"Lab Description\": \"The FAQ page allows admins to update questions and answers dynamically. These entries are stored and rendered as HTML blocks without escaping user input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in job application portal", "target": "{\"Lab scenario\": \"Stored XSS in Job Application Portal\", \"Lab Description\": \"Applicants can submit resumes along with a cover letter. The letter is stored and displayed to HR staff using unsafe innerHTML rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application allows users to preview markdown content. However, certain HTML is not stripped properly, enabling attackers to inject malicious scripts.", "target": "{\"Lab scenario\": \"XSS in Markdown Previewer\", \"Lab Description\": \"The application allows users to preview markdown content. However, certain HTML is not stripped properly, enabling attackers to inject malicious scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A SaaS accounting platform allows users to add internal comments on invoices. These comments are rendered using raw HTML without sanitization when the invoice is viewed by managers.", "target": "{\"Lab scenario\": \"XSS in Invoice Comments Section\", \"Lab Description\": \"A SaaS accounting platform allows users to add internal comments on invoices. These comments are rendered using raw HTML without sanitization when the invoice is viewed by managers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Chat Message Formatting", "target": "{\"Lab scenario\": \"XSS in Chat Message Formatting\", \"Lab Description\": \"A real-time support chat allows users to format their messages using pseudo-HTML tags. These tags are not properly parsed or sanitized before rendering, leading to script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in project collaboration comments", "target": "{\"Lab scenario\": \"Stored XSS in Project Collaboration Comments\", \"Lab Description\": \"Team members can leave comments on shared tasks within a collaboration platform. These comments are stored in plain text but rendered as HTML without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application displays summary results of a public survey. One of the questions allows free text input and is rendered in the admin dashboard without escaping.", "target": "{\"Lab scenario\": \"XSS in Survey Answer Summary\", \"Lab Description\": \"The application displays summary results of a public survey. One of the questions allows free text input and is rendered in the admin dashboard without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in payment status checker", "target": "{\"Lab scenario\": \"Reflected XSS in Payment Status Checker\", \"Lab Description\": \"The application shows payment status based on user input via a GET parameter. The input is reflected into the page directly, introducing a reflected XSS vulnerability.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Product Feedback Widget", "target": "{\"Lab scenario\": \"Stored XSS in Product Feedback Widget\", \"Lab Description\": \"An e-commerce site includes a feedback widget where users can share thoughts about products. These inputs are stored and displayed in the admin review page without proper sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in document preview tool", "target": "{\"Lab scenario\": \"Reflected XSS in Document Preview Tool\", \"Lab Description\": \"An internal document preview tool reflects filename input from a query parameter without escaping. Malicious users can inject scripts through this input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A calendar app allows users to create public events with descriptions. The description field is rendered as raw HTML when attendees view the event details.", "target": "{\"Lab scenario\": \"Stored XSS in Event Description Field\", \"Lab Description\": \"A calendar app allows users to create public events with descriptions. The description field is rendered as raw HTML when attendees view the event details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Job Application Message", "target": "{\"Lab scenario\": \"Stored XSS in Job Application Message\", \"Lab Description\": \"A job portal allows applicants to write a personal message to recruiters. These messages are displayed directly in the recruiter's dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in report generator title", "target": "{\"Lab scenario\": \"Reflected XSS in Report Generator Title\", \"Lab Description\": \"A business intelligence tool takes a title input via URL to label generated reports. This input is reflected on the report view page without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: An internal support tool allows users to send messages to support agents. Messages are stored and rendered directly in the agent's inbox dashboard, exposing them to stored XSS.", "target": "{\"Lab scenario\": \"Stored XSS in Internal Support Chat System\", \"Lab Description\": \"An internal support tool allows users to send messages to support agents. Messages are stored and rendered directly in the agent's inbox dashboard, exposing them to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A billing portal reflects user-provided invoice notes in the invoice preview URL without escaping input. Attackers can trick users into opening a crafted preview link.", "target": "{\"Lab scenario\": \"Reflected XSS in Customer Invoice Preview\", \"Lab Description\": \"A billing portal reflects user-provided invoice notes in the invoice preview URL without escaping input. Attackers can trick users into opening a crafted preview link.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in course review submissions", "target": "{\"Lab scenario\": \"Stored XSS in Course Review Submissions\", \"Lab Description\": \"An online learning platform lets students write course reviews. Reviews are shown to instructors and future students without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The contact form includes the user's submitted name and subject in error messages when validation fails. These inputs are reflected without sanitization.", "target": "{\"Lab scenario\": \"Reflected XSS in Contact Form Error Display\", \"Lab Description\": \"The contact form includes the user's submitted name and subject in error messages when validation fails. These inputs are reflected without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in custom profile badge generator", "target": "{\"Lab scenario\": \"Stored XSS in Custom Profile Badge Generator\", \"Lab Description\": \"A developer forum allows users to design profile badges using HTML snippets. These snippets are rendered as-is in member profiles, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in project description field", "target": "{\"Lab scenario\": \"Stored XSS in Project Description Field\", \"Lab Description\": \"A project management tool allows users to update project descriptions. The input is rendered in the project dashboard without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss in job search portal", "target": "{\"Lab scenario\": \"Reflected XSS in Job Search Portal\", \"Lab Description\": \"A job board reflects user-provided keywords in the search results page title without encoding. This creates a vector for reflected XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in e-commerce order notes", "target": "{\"Lab scenario\": \"Stored XSS in E-commerce Order Notes\", \"Lab Description\": \"An e-commerce platform allows customers to leave optional notes on orders. These notes are shown to admins in the order panel without any sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A survey tool displays answers in the result page directly using query parameters. Inputs are not escaped properly, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Survey Result Page\", \"Lab Description\": \"A survey tool displays answers in the result page directly using query parameters. Inputs are not escaped properly, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in File Sharing App File Titles", "target": "{\"Lab scenario\": \"Stored XSS in File Sharing App File Titles\", \"Lab Description\": \"A file sharing service allows users to upload files and set custom titles. The titles are rendered in other usersâ€™ dashboards without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An event platform allows users to create events and specify the location. The location is displayed on the public event page without sanitization, making it vulnerable to stored XSS.", "target": "{\"Lab scenario\": \"Stored XSS in Event Management App Location Field\", \"Lab Description\": \"An event platform allows users to create events and specify the location. The location is displayed on the public event page without sanitization, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An admin portal allows previewing an invitation email before sending. The name field is directly injected into the email preview without proper encoding.", "target": "{\"Lab scenario\": \"Reflected XSS in User Invitation Email Preview\", \"Lab Description\": \"An admin portal allows previewing an invitation email before sending. The name field is directly injected into the email preview without proper encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in video platform commenting system", "target": "{\"Lab scenario\": \"Stored XSS in Video Platform Commenting System\", \"Lab Description\": \"A video-sharing platform allows users to comment under videos. Comments are rendered using innerHTML without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A support dashboard reads the ticket title from the URL hash and injects it using innerHTML into the page header without validation.", "target": "{\"Lab scenario\": \"DOM-based XSS in Support Ticket Viewer\", \"Lab Description\": \"A support dashboard reads the ticket title from the URL hash and injects it using innerHTML into the page header without validation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in portfolio site testimonial submission", "target": "{\"Lab scenario\": \"Stored XSS in Portfolio Site Testimonial Submission\", \"Lab Description\": \"A personal portfolio website allows visitors to submit testimonials. Submissions are stored and displayed in the testimonials section without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An e-commerce site reflects the coupon code directly into the cart confirmation page. The input is inserted into the DOM without escaping, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Shopping Cart Coupon Code Input\", \"Lab Description\": \"An e-commerce site reflects the coupon code directly into the cart confirmation page. The input is inserted into the DOM without escaping, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A learning platform lets students leave reviews on courses. Reviews are rendered using raw HTML, and no sanitization is applied to the input.", "target": "{\"Lab scenario\": \"Stored XSS in Online Course Review\", \"Lab Description\": \"A learning platform lets students leave reviews on courses. Reviews are rendered using raw HTML, and no sanitization is applied to the input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A blog viewer script displays additional notes from the URL fragment. The content is inserted using innerHTML, making it exploitable for DOM-based XSS.", "target": "{\"Lab scenario\": \"DOM-based XSS in Blog Article Viewer via Location Fragment\", \"Lab Description\": \"A blog viewer script displays additional notes from the URL fragment. The content is inserted using innerHTML, making it exploitable for DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in team collaboration chat", "target": "{\"Lab scenario\": \"Stored XSS in Team Collaboration Chat\", \"Lab Description\": \"A collaboration tool allows users to send chat messages in a team workspace. Messages are rendered using innerHTML without sanitization, making the system vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Travel Booking Confirmation Page", "target": "{\"Lab scenario\": \"Reflected XSS in Travel Booking Confirmation Page\", \"Lab Description\": \"A travel site reflects user names from query parameters on the booking confirmation page. The name is displayed in raw HTML, enabling XSS if not properly encoded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: reflected xss in password reset token display", "target": "{\"Lab scenario\": \"Reflected XSS in Password Reset Token Display\", \"Lab Description\": \"A password reset tool echoes the token from the URL onto the page for debugging. The token is inserted into the DOM using innerHTML, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in e-Learning Quiz Feedback", "target": "{\"Lab scenario\": \"Stored XSS in e-Learning Quiz Feedback\", \"Lab Description\": \"An online quiz system lets users leave feedback on questions. Feedback is rendered without escaping input, making it vulnerable to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Survey System Result Page", "target": "{\"Lab scenario\": \"Reflected XSS in Survey System Result Page\", \"Lab Description\": \"A survey result page reflects survey answers from the URL query. The answer is written to the DOM directly using innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in issue tracker comment section", "target": "{\"Lab scenario\": \"Stored XSS in Issue Tracker Comment Section\", \"Lab Description\": \"An internal issue tracker allows engineers to leave comments. The comments are rendered using raw HTML, enabling XSS via stored payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom-based xss in url-based search filter", "target": "{\"Lab scenario\": \"DOM-based XSS in URL-Based Search Filter\", \"Lab Description\": \"A product listing page updates the search term from the URL hash and injects it into the DOM using innerHTML without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in blog comment reply system", "target": "{\"Lab scenario\": \"Stored XSS in Blog Comment Reply System\", \"Lab Description\": \"A blogging platform allows users to reply to comments. Replies are displayed without escaping user input, leading to stored XSS when viewing blog posts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in newsletter preview", "target": "{\"Lab scenario\": \"Reflected XSS in Newsletter Preview\", \"Lab Description\": \"The admin panel of a newsletter system previews email content by reflecting a `preview` parameter in the response. The content is injected directly into a content block using innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in job portal search", "target": "{\"Lab scenario\": \"DOM-based XSS in Job Portal Search\", \"Lab Description\": \"A job search page updates a results heading based on a keyword from the URL fragment. It inserts the value into the DOM via innerHTML, making it vulnerable to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in event management comments", "target": "{\"Lab scenario\": \"Stored XSS in Event Management Comments\", \"Lab Description\": \"An event platform allows users to comment on event pages. Comments are stored and rendered without escaping, leading to persistent XSS when others view the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A web-based calculator reflects the input expression in the output panel using innerHTML without sanitization. This allows reflected XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Online Calculator Input Echo\", \"Lab Description\": \"A web-based calculator reflects the input expression in the output panel using innerHTML without sanitization. This allows reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in online ticket booking summary", "target": "{\"Lab scenario\": \"Reflected XSS in Online Ticket Booking Summary\", \"Lab Description\": \"A travel site reflects ticket details from the query string into the booking summary using innerHTML without sanitization, exposing a reflected XSS vector.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in team collaboration notes", "target": "{\"Lab scenario\": \"Stored XSS in Team Collaboration Notes\", \"Lab Description\": \"A collaboration app lets team members add notes to shared boards. Notes are stored and rendered using raw HTML without escaping, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in forum topic preview", "target": "{\"Lab scenario\": \"DOM-based XSS in Forum Topic Preview\", \"Lab Description\": \"A forum allows previewing a topic by parsing the `#preview` hash and inserting it via innerHTML. JavaScript in the hash executes due to no sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A discount preview feature reflects the coupon code from the query string into a message without sanitization. JavaScript payloads in the parameter result in XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in E-commerce Discount Preview\", \"Lab Description\": \"A discount preview feature reflects the coupon code from the query string into a message without sanitization. JavaScript payloads in the parameter result in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in custom badge generator", "target": "{\"Lab scenario\": \"Stored XSS in Custom Badge Generator\", \"Lab Description\": \"Users can create custom badges with titles. These titles are stored and rendered across the platform using innerHTML, allowing XSS if script tags are submitted.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An e-commerce site integrates a third-party payment gateway that redirects users back to a user-specified return URL after payment. The application reflects the `returnUrl` parameter on the payment status page without proper encoding, making it vulnerable to XSS.", "target": "{\"Lab scenario\": \"XSS in Payment Gateway Redirect URL\", \"Lab Description\": \"An e-commerce site integrates a third-party payment gateway that redirects users back to a user-specified return URL after payment. The application reflects the `returnUrl` parameter on the payment status page without proper encoding, making it vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A blog platform dynamically creates modal dialogs using data from query parameters for showing user-submitted alerts. The `message` parameter is inserted directly into the modal content without sanitization, allowing XSS.", "target": "{\"Lab scenario\": \"XSS in Dynamic Modal Dialog\", \"Lab Description\": \"A blog platform dynamically creates modal dialogs using data from query parameters for showing user-submitted alerts. The `message` parameter is inserted directly into the modal content without sanitization, allowing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application retrieves notifications from user profiles and inserts them directly into DOM via innerHTML to display popups. The notification content is not sanitized server-side, leading to a stored XSS vulnerability.", "target": "{\"Lab scenario\": \"XSS in Notification Popups\", \"Lab Description\": \"The application retrieves notifications from user profiles and inserts them directly into DOM via innerHTML to display popups. The notification content is not sanitized server-side, leading to a stored XSS vulnerability.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Survey Preview Feature", "target": "{\"Lab scenario\": \"XSS in Survey Preview Feature\", \"Lab Description\": \"The survey builder feature allows users to preview their questions before submission. The preview uses unescaped question text provided in a query string parameter, which is directly embedded in the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Document Title in Analytics Dashboard", "target": "{\"Lab scenario\": \"XSS via Document Title in Analytics Dashboard\", \"Lab Description\": \"An analytics dashboard generates a custom report title from user input and reflects it in the document title. The title is inserted using template literals in a script block, allowing DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An internal tool allows team members to preview email invitations before sending. The email message is reflected directly from the `message` query parameter into the email body preview page without encoding.", "target": "{\"Lab scenario\": \"Reflected XSS in Email Invitation Preview\", \"Lab Description\": \"An internal tool allows team members to preview email invitations before sending. The email message is reflected directly from the `message` query parameter into the email body preview page without encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Job Application Confirmation Page", "target": "{\"Lab scenario\": \"XSS in Job Application Confirmation Page\", \"Lab Description\": \"After submitting a job application, users are redirected to a confirmation page that shows their submitted name. The name is reflected into the DOM without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A discussion forum allows users to set custom signatures. These signatures are displayed under every post without being sanitized, making it a vector for stored XSS.", "target": "{\"Lab scenario\": \"Stored XSS in Forum Signature\", \"Lab Description\": \"A discussion forum allows users to set custom signatures. These signatures are displayed under every post without being sanitized, making it a vector for stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss via fragment identifier injection", "target": "{\"Lab scenario\": \"DOM XSS via Fragment Identifier Injection\", \"Lab Description\": \"A client-side script reads the URL fragment (`window.location.hash`) and writes it directly to the DOM to display a section title. No sanitization is performed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Help Center Feedback Box", "target": "{\"Lab scenario\": \"XSS in Help Center Feedback Box\", \"Lab Description\": \"A help center page allows users to submit feedback. Submitted messages are displayed to admins without proper encoding, allowing a stored XSS attack via the feedback box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Bug Tracker Ticket Title", "target": "{\"Lab scenario\": \"XSS in Bug Tracker Ticket Title\", \"Lab Description\": \"A bug tracking system displays ticket titles in the admin dashboard without sanitizing user input. Attackers can exploit this by creating a ticket with an XSS payload as the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in file sharing platform filename", "target": "{\"Lab scenario\": \"XSS in File Sharing Platform Filename\", \"Lab Description\": \"A file sharing platform shows uploaded filenames in a list. Filenames containing scripts are rendered directly into the page without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in blog comment timestamp field", "target": "{\"Lab scenario\": \"XSS in Blog Comment Timestamp Field\", \"Lab Description\": \"A blogging platform allows users to specify the time of their comment. The timestamp is rendered directly into the HTML without encoding, which allows for a reflected XSS attack.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss in search filter category", "target": "{\"Lab scenario\": \"DOM XSS in Search Filter Category\", \"Lab Description\": \"An e-commerce site uses JavaScript to display the selected category from the URL hash (e.g., `#category=shoes`). The value is injected directly into the DOM without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A newsletter subscription endpoint reflects the user's email in the response message. This reflection is done insecurely, allowing attackers to inject scripts via the email field.", "target": "{\"Lab scenario\": \"XSS in Newsletter Subscription Response\", \"Lab Description\": \"A newsletter subscription endpoint reflects the user's email in the response message. This reflection is done insecurely, allowing attackers to inject scripts via the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in help desk ticket notes", "target": "{\"Lab scenario\": \"XSS in Help Desk Ticket Notes\", \"Lab Description\": \"A help desk application allows support agents to add notes to user tickets. These notes are rendered in the admin panel without sanitization, leading to stored XSS when a malicious note is added.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in Job Application Search", "target": "{\"Lab scenario\": \"Reflected XSS in Job Application Search\", \"Lab Description\": \"A job portal allows searching applicants using a keyword in the query string. The search term is reflected back into the page without proper escaping, making it vulnerable to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A community platform lets organizers create events and input the event location. The location is displayed on the event page without sanitization, leading to stored XSS.", "target": "{\"Lab scenario\": \"XSS in Community Event Organizer Location Input\", \"Lab Description\": \"A community platform lets organizers create events and input the event location. The location is displayed on the event page without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Banking admins can view past support chat transcripts. If a malicious user injects a script into a chat message, it is displayed in the admin panel without sanitization.", "target": "{\"Lab scenario\": \"XSS in Banking Support Chat Transcript Viewer\", \"Lab Description\": \"Banking admins can view past support chat transcripts. If a malicious user injects a script into a chat message, it is displayed in the admin panel without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in real estate listing description", "target": "{\"Lab scenario\": \"XSS in Real Estate Listing Description\", \"Lab Description\": \"A real estate portal allows sellers to add property listings with descriptions. Malicious users can inject scripts into the description, which are executed when viewed by others.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss in social media hashtag search", "target": "{\"Lab scenario\": \"XSS in Social Media Hashtag Search\", \"Lab Description\": \"A social media platform allows users to search for hashtags. The searched term is directly reflected in the page content without sanitization, making it vulnerable to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in product inventory notes", "target": "{\"Lab scenario\": \"Stored XSS in Product Inventory Notes\", \"Lab Description\": \"Warehouse staff can leave notes on products. These notes are shown on the inventory dashboard, which renders unsanitized HTML, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in developer forum signature", "target": "{\"Lab scenario\": \"XSS in Developer Forum Signature\", \"Lab Description\": \"Developers can add signatures to their forum profile. These signatures are shown in each post and are rendered as HTML without sanitization, introducing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in real-time auction comments", "target": "{\"Lab scenario\": \"Stored XSS in Real-Time Auction Comments\", \"Lab Description\": \"Users can comment on live auction items. These comments are stored and displayed on the bidding page without any sanitization, allowing persistent XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Academic Portal Feedback Form", "target": "{\"Lab scenario\": \"XSS in Academic Portal Feedback Form\", \"Lab Description\": \"A university feedback form allows students to submit anonymous reviews. These reviews are shown to lecturers in their dashboard without proper escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application shows a list of recently viewed items using local storage values. These values are injected directly into the DOM on page load without proper sanitization, allowing DOM-based XSS.", "target": "{\"Lab scenario\": \"XSS in Recently Viewed Items Feature\", \"Lab Description\": \"The application shows a list of recently viewed items using local storage values. These values are injected directly into the DOM on page load without proper sanitization, allowing DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: User bios are displayed as tooltips when hovering over usernames. The bios are rendered using the title attribute directly from unescaped user input, enabling stored XSS via malicious bios.", "target": "{\"Lab scenario\": \"XSS in User Bio Tooltip Feature\", \"Lab Description\": \"User bios are displayed as tooltips when hovering over usernames. The bios are rendered using the title attribute directly from unescaped user input, enabling stored XSS via malicious bios.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in email subscription confirmation", "target": "{\"Lab scenario\": \"Reflected XSS in Email Subscription Confirmation\", \"Lab Description\": \"When users subscribe to the newsletter, the system reflects their email in the confirmation message without encoding it properly, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS in Profile Settings Preview", "target": "{\"Lab scenario\": \"DOM XSS in Profile Settings Preview\", \"Lab Description\": \"The application allows users to preview changes to their profile, including custom signatures. The signature is rendered inside innerHTML without sanitization, leading to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in announcement banner from admin panel", "target": "{\"Lab scenario\": \"XSS in Announcement Banner from Admin Panel\", \"Lab Description\": \"The admin panel allows adding an announcement banner. Content entered is saved and injected directly into the homepage without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where online course platform stored xss in assignment feedback", "target": "{\"Lab scenario\": \"Online Course Platform Stored XSS in Assignment Feedback\", \"Lab Description\": \"The application allows instructors to leave feedback on student assignments. This feedback is rendered inside an HTML template without sanitization. The feedback field directly renders stored content, leading to stored XSS. To solve: Craft and submit a feedback entry that triggers JavaScript execution when a student views the assignment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in custom tooltip renderer of crm application", "target": "{\"Lab scenario\": \"XSS in Custom Tooltip Renderer of CRM Application\", \"Lab Description\": \"The CRM system renders tooltips with dynamic content from query parameters. The tooltip content is directly injected into a JavaScript handler that updates innerHTML, introducing a DOM-based XSS vector. To solve: Inject a payload into the tooltip parameter that leads to JavaScript execution when hovering over a contact name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in project management chat mention renderer", "target": "{\"Lab scenario\": \"XSS in Project Management Chat Mention Renderer\", \"Lab Description\": \"A project management tool parses mentions (e.g. @username) from chat messages and renders them as HTML. The parser fails to sanitize HTML tags embedded in usernames, enabling XSS through crafted mentions. To solve: Inject a mention that breaks out of the renderer logic and executes JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The e-commerce product page includes a Q&A section where users can submit questions. The submitted content is rendered in HTML without encoding. This allows attackers to submit script payloads which are then displayed to future users. To solve: Inject an XSS payload in a new question and trigger it by revisiting the product page.", "target": "{\"Lab scenario\": \"Stored XSS in Product Q&A Module of E-Commerce Platform\", \"Lab Description\": \"The e-commerce product page includes a Q&A section where users can submit questions. The submitted content is rendered in HTML without encoding. This allows attackers to submit script payloads which are then displayed to future users. To solve: Inject an XSS payload in a new question and trigger it by revisiting the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The image gallery application generates preview content using a hash value in the URL. The hash is parsed and injected into the DOM using innerHTML without validation. To solve: Manipulate the hash value in the URL to inject an XSS payload that executes JavaScript in the context of the gallery.", "target": "{\"Lab scenario\": \"DOM XSS in Image Gallery Preview Generator\", \"Lab Description\": \"The image gallery application generates preview content using a hash value in the URL. The hash is parsed and injected into the DOM using innerHTML without validation. To solve: Manipulate the hash value in the URL to inject an XSS payload that executes JavaScript in the context of the gallery.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: profile update xss via avatar url in gaming community", "target": "{\"Lab scenario\": \"Profile Update XSS via Avatar URL in Gaming Community\", \"Lab Description\": \"The application allows users to update their profile including avatar image URL. The backend does not validate the URL format and embeds it directly into an <img> tag, enabling XSS via crafted image URLs. To solve: Inject a malicious image source that executes JavaScript when rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A support chat widget stores and reflects recent messages without sanitization. HTML tags are allowed to style messages but scripts are not filtered effectively. To solve: Inject a hidden script that triggers when a staff member views chat history.", "target": "{\"Lab scenario\": \"XSS in Support Chat via Hidden HTML Injection\", \"Lab Description\": \"A support chat widget stores and reflects recent messages without sanitization. HTML tags are allowed to style messages but scripts are not filtered effectively. To solve: Inject a hidden script that triggers when a staff member views chat history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in tag suggestions feature via json injection", "target": "{\"Lab scenario\": \"XSS in Tag Suggestions Feature via JSON Injection\", \"Lab Description\": \"The blog platform provides real-time tag suggestions. A user's custom tag input is embedded in a JavaScript array without escaping, causing JSON context injection. To solve: Inject a payload that breaks out of the array and executes JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: embedded poll widget xss in news portal", "target": "{\"Lab scenario\": \"Embedded Poll Widget XSS in News Portal\", \"Lab Description\": \"The news website embeds a poll widget that reflects the poll question in HTML. The question text comes from a GET parameter, which is inserted without sanitization. To solve: Inject an HTML-breaking payload that leads to script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where markdown preview xss via link rendering", "target": "{\"Lab scenario\": \"Markdown Preview XSS via Link Rendering\", \"Lab Description\": \"A markdown editor allows users to preview their formatted content. Links are rendered as HTML <a> tags without validating the href, enabling JavaScript URIs to be injected. To solve: Inject a markdown link with JavaScript URI and trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A community forum allows users to post comments under articles. The submitted comment content is rendered on the page without proper HTML sanitization. To solve: Inject a script in the comment field and confirm it runs when viewed.", "target": "{\"Lab scenario\": \"User Comment System XSS via Unfiltered Input in Forum Post\", \"Lab Description\": \"A community forum allows users to post comments under articles. The submitted comment content is rendered on the page without proper HTML sanitization. To solve: Inject a script in the comment field and confirm it runs when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Search Result Page XSS via Reflected Query Parameter", "target": "{\"Lab scenario\": \"Search Result Page XSS via Reflected Query Parameter\", \"Lab Description\": \"The search functionality on the travel website displays the query term directly on the results page without encoding. This allows attackers to inject JavaScript through the search parameter. To solve: Inject a script in the query parameter and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in custom greeting card preview via template injection", "target": "{\"Lab scenario\": \"XSS in Custom Greeting Card Preview via Template Injection\", \"Lab Description\": \"An online greeting card maker allows users to preview a card with a custom message. The message is inserted into the HTML using template literals without escaping, allowing DOM-based XSS. To solve: Inject a payload into the message to break out of the template and execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in helpdesk ticket viewer via subject reflection", "target": "{\"Lab scenario\": \"XSS in Helpdesk Ticket Viewer via Subject Reflection\", \"Lab Description\": \"The helpdesk interface displays the subject of a ticket by reflecting a query parameter directly in HTML. No encoding or escaping is applied. To solve: Inject a script into the subject and trigger XSS on the ticket view page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in notification dropdown via stored alert text", "target": "{\"Lab scenario\": \"XSS in Notification Dropdown via Stored Alert Text\", \"Lab Description\": \"The web app stores notification alerts entered by users, such as system warnings or admin announcements. When rendering, the alert text is inserted into a dropdown using innerHTML, allowing stored XSS. To solve: Inject a malicious string into the alert and trigger it when the dropdown is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via image caption injection in photography portfolio", "target": "{\"Lab scenario\": \"XSS via Image Caption Injection in Photography Portfolio\", \"Lab Description\": \"A photography site allows photographers to submit captions for their images. These captions are rendered in the gallery without HTML escaping. This allows an attacker to inject HTML or scripts into the gallery view. To solve: Inject a payload as a caption and verify it executes in the gallery.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in FAQ Accordion via Question Parameter", "target": "{\"Lab scenario\": \"XSS in FAQ Accordion via Question Parameter\", \"Lab Description\": \"An FAQ section loads question data dynamically based on a query parameter and reflects it inside expandable accordion elements. The input is not sanitized before being injected into the HTML, enabling DOM-based XSS. To solve: Inject a script via the question parameter and trigger it when the accordion renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Feedback Summary on Admin Dashboard", "target": "{\"Lab scenario\": \"XSS via Feedback Summary on Admin Dashboard\", \"Lab Description\": \"A user feedback form collects input and stores it in a database. The admin dashboard displays recent feedback using innerHTML without encoding. Attackers can submit malicious input that is rendered when the admin views the dashboard. To solve: Submit a payload as feedback and trigger stored XSS on admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in User Badge Description Field on Profile Page", "target": "{\"Lab scenario\": \"XSS in User Badge Description Field on Profile Page\", \"Lab Description\": \"Users can earn badges and set custom badge descriptions. These descriptions are rendered directly in profile pages using dangerouslySetInnerHTML. Without proper validation, this leads to stored XSS. To solve: Submit a badge description with an XSS payload and view it from another profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.", "target": "{\"Lab scenario\": \"XSS in Admin Announcement Viewer via Stored HTML\", \"Lab Description\": \"An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Image Caption Injection in Photography Portfolio", "target": "{\"Lab scenario\": \"XSS via Image Caption Injection in Photography Portfolio\", \"Lab Description\": \"A photography site allows photographers to submit captions for their images. These captions are rendered in the gallery without HTML escaping. This allows an attacker to inject HTML or scripts into the gallery view. To solve: Inject a payload as a caption and verify it executes in the gallery.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in FAQ Accordion via Question Parameter", "target": "{\"Lab scenario\": \"XSS in FAQ Accordion via Question Parameter\", \"Lab Description\": \"An FAQ section loads question data dynamically based on a query parameter and reflects it inside expandable accordion elements. The input is not sanitized before being injected into the HTML, enabling DOM-based XSS. To solve: Inject a script via the question parameter and trigger it when the accordion renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via feedback summary on admin dashboard", "target": "{\"Lab scenario\": \"XSS via Feedback Summary on Admin Dashboard\", \"Lab Description\": \"A user feedback form collects input and stores it in a database. The admin dashboard displays recent feedback using innerHTML without encoding. Attackers can submit malicious input that is rendered when the admin views the dashboard. To solve: Submit a payload as feedback and trigger stored XSS on admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in User Badge Description Field on Profile Page", "target": "{\"Lab scenario\": \"XSS in User Badge Description Field on Profile Page\", \"Lab Description\": \"Users can earn badges and set custom badge descriptions. These descriptions are rendered directly in profile pages using dangerouslySetInnerHTML. Without proper validation, this leads to stored XSS. To solve: Submit a badge description with an XSS payload and view it from another profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in admin announcement viewer via stored html", "target": "{\"Lab scenario\": \"XSS in Admin Announcement Viewer via Stored HTML\", \"Lab Description\": \"An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where webmail xss in subject preview tooltip", "target": "{\"Lab scenario\": \"Webmail XSS in Subject Preview Tooltip\", \"Lab Description\": \"A webmail client shows incoming emails with subject preview tooltips. The subject is stored and directly reflected inside a tooltip using an HTML attribute without proper encoding. To solve: Inject an XSS payload in the email subject that executes JavaScript when the tooltip renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss in qr code generator text field", "target": "{\"Lab scenario\": \"XSS in QR Code Generator Text Field\", \"Lab Description\": \"An online QR generator embeds the text input directly into a JavaScript function to generate the code. It fails to escape special characters in the input. To solve: Inject a payload that breaks out of the JS string and executes a script when generating the QR code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via URL Metadata Preview in Bookmark Manager", "target": "{\"Lab scenario\": \"XSS via URL Metadata Preview in Bookmark Manager\", \"Lab Description\": \"The app lets users save URLs and fetches a metadata preview using Open Graph scraping. However, the meta description is injected directly into the page without sanitization. To solve: Host a URL with malicious meta content and save it to the app.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A polling application shows poll results where labels are user-generated. These labels are rendered inside the DOM using innerHTML in a script block, leading to DOM-based XSS. To solve: Inject malicious HTML as a label to execute script when viewing results.", "target": "{\"Lab scenario\": \"XSS in Dynamic Poll Result Label\", \"Lab Description\": \"A polling application shows poll results where labels are user-generated. These labels are rendered inside the DOM using innerHTML in a script block, leading to DOM-based XSS. To solve: Inject malicious HTML as a label to execute script when viewing results.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in E-Commerce Product Comparison Table", "target": "{\"Lab scenario\": \"XSS in E-Commerce Product Comparison Table\", \"Lab Description\": \"The platform allows users to compare products and attach notes to each item. These notes are reflected in a table and injected using raw HTML. No sanitization is done on note content. To solve: Inject a note that executes JavaScript when the table loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where banking portal stored xss in internal messaging system", "target": "{\"Lab scenario\": \"Banking Portal Stored XSS in Internal Messaging System\", \"Lab Description\": \"A banking web application includes a secure internal messaging feature for communication between users and bank staff. The message content is rendered using `innerHTML` without sanitization, allowing stored XSS. To solve: Inject a message with a payload and trigger it by visiting the inbox.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where e-commerce xss in wishlist notes feature", "target": "{\"Lab scenario\": \"E-commerce XSS in Wishlist Notes Feature\", \"Lab Description\": \"An e-commerce site allows users to attach notes to wishlist items. The notes are reflected using innerHTML when viewing the wishlist. Due to missing sanitization, this leads to reflected XSS. To solve: Inject a crafted payload into the note and revisit the wishlist.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Project Management Tool XSS in Task Description", "target": "{\"Lab scenario\": \"Project Management Tool XSS in Task Description\", \"Lab Description\": \"A project management tool allows users to describe tasks with detailed HTML content. Task descriptions are rendered without sanitization in the dashboard. To solve: Create a task with a malicious description that triggers XSS when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where healthcare portal reflected xss in appointment notes", "target": "{\"Lab scenario\": \"Healthcare Portal Reflected XSS in Appointment Notes\", \"Lab Description\": \"A healthcare scheduling portal allows patients to add optional notes when booking appointments. These notes are echoed in the confirmation screen without encoding. This leads to reflected XSS. To solve: Inject a crafted payload in the notes field and reach the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where learning management system xss in forum post preview", "target": "{\"Lab scenario\": \"Learning Management System XSS in Forum Post Preview\", \"Lab Description\": \"A learning platform includes a forum where users can preview their posts before submitting. The preview feature renders HTML from user input using innerHTML. Thereâ€™s no output encoding, leading to reflected XSS. To solve: Inject an XSS payload in a forum post preview and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: job application portal reflected xss in search suggestions", "target": "{\"Lab scenario\": \"Job Application Portal Reflected XSS in Search Suggestions\", \"Lab Description\": \"A job portal includes a search bar with live suggestions based on user input. The search term is reflected directly into the DOM using innerHTML without sanitization. This introduces DOM-based XSS. To solve: Inject a payload into the search query that executes when suggestions render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: travel booking app xss in hotel feedback submission", "target": "{\"Lab scenario\": \"Travel Booking App XSS in Hotel Feedback Submission\", \"Lab Description\": \"Users of a travel booking app can submit feedback for hotels. Feedback comments are shown to future visitors. Since input is rendered without escaping, stored XSS is possible. To solve: Submit a malicious comment and confirm it executes when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A gamified e-learning dashboard shows pop-up notifications using dynamic HTML when users earn badges. Badge names are inserted directly into HTML via template strings without encoding. To solve: Inject a payload into a badge name and wait for the notification to appear.", "target": "{\"Lab scenario\": \"Learning Dashboard XSS in Achievement Notification\", \"Lab Description\": \"A gamified e-learning dashboard shows pop-up notifications using dynamic HTML when users earn badges. Badge names are inserted directly into HTML via template strings without encoding. To solve: Inject a payload into a badge name and wait for the notification to appear.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: recipe sharing platform reflected xss in title preview", "target": "{\"Lab scenario\": \"Recipe Sharing Platform Reflected XSS in Title Preview\", \"Lab Description\": \"Users writing a new recipe can preview the recipe title before submission. The preview is done via client-side rendering using innerHTML with unescaped user input. This introduces reflected XSS. To solve: Inject a payload into the title field and preview the recipe.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where online survey tool xss in response review panel", "target": "{\"Lab scenario\": \"Online Survey Tool XSS in Response Review Panel\", \"Lab Description\": \"Survey results in this tool are shown in an admin panel where user-submitted answers are rendered as HTML. Lack of sanitization introduces a stored XSS vector. To solve: Inject a malicious answer and trigger it by viewing the admin review panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can set a custom username which appears on the public leaderboard. The application renders usernames directly using innerHTML, creating a stored XSS vector. To solve: Inject a payload into the username and trigger its execution from the leaderboard page.", "target": "{\"Lab scenario\": \"Fitness App Leaderboard XSS in Custom Username Field\", \"Lab Description\": \"Users can set a custom username which appears on the public leaderboard. The application renders usernames directly using innerHTML, creating a stored XSS vector. To solve: Inject a payload into the username and trigger its execution from the leaderboard page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where education platform xss in quiz result summary", "target": "{\"Lab scenario\": \"Education Platform XSS in Quiz Result Summary\", \"Lab Description\": \"After completing a quiz, users receive a result summary that includes their name and score. The summary page renders these details using template literals inside script tags, allowing DOM-based XSS via the name field. To solve: Inject a payload in the name field to execute a script upon result viewing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Support agents can view user-submitted ticket notes in the admin dashboard. The application renders notes directly into the DOM using dangerouslySetInnerHTML in a templated admin UI. This leads to stored XSS. To solve: Submit a malicious note and verify execution upon admin view.", "target": "{\"Lab scenario\": \"Customer Support Ticketing XSS in Ticket Notes Viewer\", \"Lab Description\": \"Support agents can view user-submitted ticket notes in the admin dashboard. The application renders notes directly into the DOM using dangerouslySetInnerHTML in a templated admin UI. This leads to stored XSS. To solve: Submit a malicious note and verify execution upon admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where project management tool xss in task title preview modal", "target": "{\"Lab scenario\": \"Project Management Tool XSS in Task Title Preview Modal\", \"Lab Description\": \"A project management tool provides a modal preview for task titles. User input is passed directly into innerHTML within the modal. Lack of sanitization introduces reflected XSS. To solve: Inject an XSS payload into the task title field and preview it to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Bookstore Review Section Stored XSS via Star Rating Comments", "target": "{\"Lab scenario\": \"Bookstore Review Section Stored XSS via Star Rating Comments\", \"Lab Description\": \"A review section in a bookstore web app allows users to leave comments with star ratings. These are rendered without escaping, introducing stored XSS. To solve: Submit a crafted review that triggers script execution when other users view it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The collaboration platform provides a live Markdown preview panel. The application fails to sanitize embedded HTML within Markdown content and renders it directly inside an iframe. This opens up the possibility of script injection via raw HTML. To solve: Inject a script payload wrapped in Markdown and verify execution inside the preview pane.", "target": "{\"Lab scenario\": \"Content Collaboration XSS in Markdown Preview Panel\", \"Lab Description\": \"The collaboration platform provides a live Markdown preview panel. The application fails to sanitize embedded HTML within Markdown content and renders it directly inside an iframe. This opens up the possibility of script injection via raw HTML. To solve: Inject a script payload wrapped in Markdown and verify execution inside the preview pane.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where order tracking xss via invoice id in print preview", "target": "{\"Lab scenario\": \"Order Tracking XSS via Invoice ID in Print Preview\", \"Lab Description\": \"The order tracking system allows users to view a print-friendly version of their invoices. The invoice ID is reflected without encoding inside the HTML title and print header. To solve: Inject a payload into the invoice ID parameter and trigger script execution on the print preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a high Cross-site scripting lab for: xss in social sharing metadata injection", "target": "{\"Lab scenario\": \"XSS in Social Sharing Metadata Injection\", \"Lab Description\": \"The blogging platform generates dynamic Open Graph and Twitter meta tags for each post based on user-defined titles and summaries. These values are not properly escaped, resulting in XSS when malicious scripts are injected via post titles. To solve: Inject an XSS payload into a new post title and visit its social sharing preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via shopping cart notes on order confirmation page", "target": "{\"Lab scenario\": \"XSS via Shopping Cart Notes on Order Confirmation Page\", \"Lab Description\": \"The e-commerce platform allows customers to leave 'special notes' in their cart before checkout. These notes are injected into the order confirmation page without sanitization. To solve: Inject a malicious payload in the note field, complete the order, and trigger script execution on the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via project tag input in task management app", "target": "{\"Lab scenario\": \"XSS via Project Tag Input in Task Management App\", \"Lab Description\": \"A task management tool supports project-specific tags entered by users. These tags are displayed as interactive HTML elements but are not encoded before being rendered. To solve: Create a tag with embedded JavaScript and verify execution when the tag list is displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Feedback Subject in Support Portal Email Preview", "target": "{\"Lab scenario\": \"XSS via Feedback Subject in Support Portal Email Preview\", \"Lab Description\": \"A support portal allows users to submit feedback with a subject line that is shown in the email preview pane. The subject is not sanitized and is inserted inside the HTML body of the preview. To solve: Inject a payload in the subject field, then view the email preview as support staff and trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via profile tagline in social networking site", "target": "{\"Lab scenario\": \"XSS via Profile Tagline in Social Networking Site\", \"Lab Description\": \"A social networking platform lets users write a short 'tagline' that appears below their username. The tagline is stored and rendered without escaping, making it possible to inject JavaScript. To solve: Inject a payload in the tagline field and visit the user profile page to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A travel booking app allows users to leave optional notes for hotel staff. These notes appear unfiltered in the booking confirmation page after checkout. The system fails to sanitize HTML or JavaScript in this field. To solve: Inject a payload as the note, complete the booking, and confirm script execution.", "target": "{\"Lab scenario\": \"XSS in Booking Notes on Travel Confirmation Page\", \"Lab Description\": \"A travel booking app allows users to leave optional notes for hotel staff. These notes appear unfiltered in the booking confirmation page after checkout. The system fails to sanitize HTML or JavaScript in this field. To solve: Inject a payload as the note, complete the booking, and confirm script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Internal Chat Mentions Feature", "target": "{\"Lab scenario\": \"XSS in Internal Chat Mentions Feature\", \"Lab Description\": \"An internal messaging system auto-links @mentions in chat messages. However, it processes message content using a replace function without escaping dangerous characters, allowing injection of script tags. To solve: Send a chat message containing an XSS payload that gets executed in the chat history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via address field in delivery tracking app", "target": "{\"Lab scenario\": \"XSS via Address Field in Delivery Tracking App\", \"Lab Description\": \"A delivery tracking platform displays user-supplied addresses on a tracking page. The address input is not encoded before being inserted into a div container, allowing attackers to inject HTML or JavaScript. To solve: Inject a payload into the address field and trigger it via the tracking page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A project management tool allows users to add tasks, and the task name is rendered directly in the dashboard without output encoding. The dashboard uses a JavaScript templating engine that does not sanitize content. To solve: Inject a script into the task name and confirm execution in the rendered dashboard view.", "target": "{\"Lab scenario\": \"XSS in Task Name Field of Project Management Dashboard\", \"Lab Description\": \"A project management tool allows users to add tasks, and the task name is rendered directly in the dashboard without output encoding. The dashboard uses a JavaScript templating engine that does not sanitize content. To solve: Inject a script into the task name and confirm execution in the rendered dashboard view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in 'Company Bio' Field of Job Posting Portal", "target": "{\"Lab scenario\": \"XSS in 'Company Bio' Field of Job Posting Portal\", \"Lab Description\": \"A job portal allows companies to publish job listings with a 'company bio' field that is reflected unescaped in the job description page. This bio is stored as-is and injected directly into the HTML body. To solve: Craft a malicious bio, view the job post page, and confirm payload execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via comment field on online course reviews", "target": "{\"Lab scenario\": \"XSS via Comment Field on Online Course Reviews\", \"Lab Description\": \"An educational platform allows users to leave reviews. The comment content is rendered directly without sanitization on the course page. This results in stored XSS if malicious input is submitted. To solve: Submit a malicious comment and view it on the course detail page to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in newsletter preview feature using user bio", "target": "{\"Lab scenario\": \"XSS in Newsletter Preview Feature Using User Bio\", \"Lab Description\": \"A newsletter creation tool allows insertion of dynamic user bios into the newsletter preview. The bio is fetched and embedded without encoding, leading to XSS if a user injects malicious content. To solve: Modify your bio with a payload and generate a preview that triggers the XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Search Query Parameter on Product Listing Page", "target": "{\"Lab scenario\": \"XSS in Search Query Parameter on Product Listing Page\", \"Lab Description\": \"An e-commerce website reflects the search query parameter in the product listing title. The query is injected without proper sanitization inside a heading tag. To solve: Inject a payload through the search box and confirm its execution when the search results page is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in 'Name' Field of Event Registration Confirmation Page", "target": "{\"Lab scenario\": \"XSS in 'Name' Field of Event Registration Confirmation Page\", \"Lab Description\": \"An event management system takes the user's name from the registration form and reflects it directly in the confirmation message. The message is built using string concatenation in the HTML response without encoding. To solve: Inject a payload through the name field and confirm script execution on the confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A community site lists public events and includes the location submitted by the event organizer. The location is rendered without HTML encoding in a map tooltip. To solve: Inject a script into the location field and confirm its execution in the tooltip.", "target": "{\"Lab scenario\": \"XSS in 'Location' Field on Public Event Listings\", \"Lab Description\": \"A community site lists public events and includes the location submitted by the event organizer. The location is rendered without HTML encoding in a map tooltip. To solve: Inject a script into the location field and confirm its execution in the tooltip.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a high Cross-site scripting lab for: xss via embedded message in internal messaging system", "target": "{\"Lab scenario\": \"XSS via Embedded Message in Internal Messaging System\", \"Lab Description\": \"An internal messaging tool allows users to send HTML messages. These are rendered as-is without sanitization, allowing stored XSS. To solve: Send a crafted message to another user, then view the inbox to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A feedback widget on a documentation portal takes user input and displays it immediately for confirmation without any encoding. The feedback preview reflects unescaped HTML. To solve: Submit a script in the feedback and confirm it executes on the preview page.", "target": "{\"Lab scenario\": \"XSS in Feedback Widget on Documentation Portal\", \"Lab Description\": \"A feedback widget on a documentation portal takes user input and displays it immediately for confirmation without any encoding. The feedback preview reflects unescaped HTML. To solve: Submit a script in the feedback and confirm it executes on the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in 'favorite quote' section of user profile", "target": "{\"Lab scenario\": \"XSS in 'Favorite Quote' Section of User Profile\", \"Lab Description\": \"A social platform allows users to save and display a favorite quote in their profile. The quote is stored and rendered without escaping, resulting in stored XSS. To solve: Set a quote with a script tag, visit your profile, and observe payload execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via 'company' field on job posting portal", "target": "{\"Lab scenario\": \"XSS via 'Company' Field on Job Posting Portal\", \"Lab Description\": \"A job posting form allows employers to specify a company name that is displayed on job listings. The company name is rendered using raw HTML with no sanitization. To solve: Inject a script in the company name and confirm it executes on the listing page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Product Review Section of E-commerce Platform", "target": "{\"Lab scenario\": \"XSS in Product Review Section of E-commerce Platform\", \"Lab Description\": \"A review form on an e-commerce product page allows users to leave feedback that is displayed publicly. The review content is rendered as HTML without escaping. To solve: Submit a review containing a script payload and observe its execution on the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A single-page help center loads content dynamically based on the URL hash and injects it into the page using `innerHTML`. This allows attackers to inject scripts by manipulating the hash. To solve: Craft a URL with a malicious hash and confirm script execution.", "target": "{\"Lab scenario\": \"DOM XSS via Hash Fragment Injection in Help Page\", \"Lab Description\": \"A single-page help center loads content dynamically based on the URL hash and injects it into the page using `innerHTML`. This allows attackers to inject scripts by manipulating the hash. To solve: Craft a URL with a malicious hash and confirm script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in url parameter reflected in error message", "target": "{\"Lab scenario\": \"XSS in URL Parameter Reflected in Error Message\", \"Lab Description\": \"An application displays error messages using a URL parameter for user input. The input is reflected in the message directly without escaping. To solve: Inject a payload in the query parameter and trigger the error message to confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Notes Feature of Task Manager App", "target": "{\"Lab scenario\": \"Stored XSS in Notes Feature of Task Manager App\", \"Lab Description\": \"Users can add custom notes to their tasks. The notes are stored and rendered without HTML sanitization. This allows stored XSS. To solve: Save a malicious script in the note, reload the tasks page, and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: cms plugin store xss in plugin preview renderer", "target": "{\"Lab scenario\": \"CMS Plugin Store XSS in Plugin Preview Renderer\", \"Lab Description\": \"The CMS provides a plugin marketplace where users can preview plugin UI before installation. The preview renders server-fetched plugin metadata including the 'description' field directly into the DOM using innerHTML. No sanitization is applied, allowing attackers to inject scripts via a crafted plugin.json file. To solve: Upload a malicious plugin and trigger preview rendering to execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: event management panel xss in attendee name", "target": "{\"Lab scenario\": \"Event Management Panel XSS in Attendee Name\", \"Lab Description\": \"An event admin panel allows CSV import of attendee data, which includes names and contact details. The imported names are rendered using innerHTML inside a table. No validation is applied during parsing, permitting injection through the 'name' field. To solve: Craft a malicious CSV and upload it to trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Chatbot Integration XSS via User Alias", "target": "{\"Lab scenario\": \"Chatbot Integration XSS via User Alias\", \"Lab Description\": \"A helpdesk chatbot uses user-defined aliases to personalize responses. These aliases are stored in local storage and rendered in the chat window using innerHTML. The alias input is not sanitized, enabling XSS through alias injection. To solve: Inject a payload into the alias field and trigger it by sending a message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Online Resume Builder via Experience Field", "target": "{\"Lab scenario\": \"XSS in Online Resume Builder via Experience Field\", \"Lab Description\": \"The application provides a live preview of resumes, rendering JSON input fields like 'experience' into a preview section. The server returns these fields directly, and the frontend uses dangerouslySetInnerHTML to render them. The 'experience' field allows injected markup. To solve: Inject JavaScript via this field and observe execution on preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: knowledge base editor xss in markdown preview", "target": "{\"Lab scenario\": \"Knowledge Base Editor XSS in Markdown Preview\", \"Lab Description\": \"The internal knowledge base editor supports Markdown preview, rendering raw HTML if included in markdown. The editor does not sanitize input before rendering preview, allowing embedded scripts. To solve: Craft malicious markdown and trigger preview to confirm script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A university portal allows students to submit course feedback, which is displayed to professors via a dashboard. The feedback content is inserted directly into a DOM container using innerHTML without sanitization. To solve: Inject a payload through the feedback field and trigger execution when a professor views it.", "target": "{\"Lab scenario\": \"Student Portal XSS in Course Feedback Field\", \"Lab Description\": \"A university portal allows students to submit course feedback, which is displayed to professors via a dashboard. The feedback content is inserted directly into a DOM container using innerHTML without sanitization. To solve: Inject a payload through the feedback field and trigger execution when a professor views it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: project management tool xss via project title", "target": "{\"Lab scenario\": \"Project Management Tool XSS via Project Title\", \"Lab Description\": \"In a collaborative project tool, users can name projects and view them in a list. Project titles are rendered with innerHTML directly into the interface. Input is not sanitized, leading to potential DOM XSS. To solve: Create a project with a malicious title and view it on the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where file tracker xss via filename display", "target": "{\"Lab scenario\": \"File Tracker XSS via Filename Display\", \"Lab Description\": \"A file management tool displays recently uploaded filenames using dangerouslySetInnerHTML in a React component. The backend does not sanitize filenames, and attackers can upload files with embedded scripts. To solve: Upload a file with a malicious name and view it in the recent uploads panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: bug tracker xss in issue description field", "target": "{\"Lab scenario\": \"Bug Tracker XSS in Issue Description Field\", \"Lab Description\": \"A bug tracker application allows users to report issues. Issue descriptions are rendered using innerHTML when browsing the list of open tickets. Improper handling allows attackers to inject scripts into the description. To solve: Create a bug report with a malicious description and visit the issue list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Support agents can add internal notes to customer tickets, which are rendered with innerHTML when viewed later. The input form allows arbitrary HTML, leading to stored XSS. To solve: Inject a script into a ticket note and revisit it to trigger execution.", "target": "{\"Lab scenario\": \"Customer Support Portal XSS in Ticket Notes\", \"Lab Description\": \"Support agents can add internal notes to customer tickets, which are rendered with innerHTML when viewed later. The input form allows arbitrary HTML, leading to stored XSS. To solve: Inject a script into a ticket note and revisit it to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A job board lets recruiters post job listings with a company name field. The listings are displayed using innerHTML without input sanitization. The application trusts the company name input. To solve: Inject a payload into the company name and view the listing to trigger execution.", "target": "{\"Lab scenario\": \"Job Board Platform XSS in Company Name Field\", \"Lab Description\": \"A job board lets recruiters post job listings with a company name field. The listings are displayed using innerHTML without input sanitization. The application trusts the company name input. To solve: Inject a payload into the company name and view the listing to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where e-commerce review system xss in review content", "target": "{\"Lab scenario\": \"E-commerce Review System XSS in Review Content\", \"Lab Description\": \"An online store allows users to post reviews on products. The review content is displayed via innerHTML in product pages without escaping special characters. Attackers can exploit this to run arbitrary scripts. To solve: Submit a crafted review and trigger execution on the product page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where support chat application xss in message body", "target": "{\"Lab scenario\": \"Support Chat Application XSS in Message Body\", \"Lab Description\": \"A live support chat displays incoming messages in real-time by appending message content via innerHTML. Inputs are not sanitized before rendering. Malicious users can send messages containing scripts. To solve: Send a crafted message to support and confirm script execution in agent's browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where travel blog xss in comment field", "target": "{\"Lab scenario\": \"Travel Blog XSS in Comment Field\", \"Lab Description\": \"Users can comment on blog posts in a travel site. The comment is displayed with innerHTML and stored unsanitized. An attacker can inject scripts that execute when comments are viewed. To solve: Submit a comment containing XSS and visit the blog to trigger it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where music sharing site xss in playlist name", "target": "{\"Lab scenario\": \"Music Sharing Site XSS in Playlist Name\", \"Lab Description\": \"A music-sharing app allows users to create playlists. Playlist names are displayed using innerHTML on the main dashboard. No input sanitization is applied to the names. Attackers can use this to inject scripts. To solve: Create a malicious playlist name and view it on the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: fitness tracker app xss in goal title", "target": "{\"Lab scenario\": \"Fitness Tracker App XSS in Goal Title\", \"Lab Description\": \"A fitness tracker allows users to set custom goals with a title. The title is displayed on the user's dashboard using innerHTML without sanitization. The application reflects the goal title directly. To solve: Inject a script into a goal title and trigger it on the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: movie review site xss in reviewer name", "target": "{\"Lab scenario\": \"Movie Review Site XSS in Reviewer Name\", \"Lab Description\": \"A movie site displays reviews and includes the reviewer's name using innerHTML. The name field is not sanitized, and malicious input is rendered into the DOM. To solve: Submit a crafted reviewer name and view the reviews page to execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: education portal xss in assignment title", "target": "{\"Lab scenario\": \"Education Portal XSS in Assignment Title\", \"Lab Description\": \"Teachers can post assignments with a title that is shown to students via innerHTML. The title field is not escaped or sanitized. This allows a teacher or attacker to inject scripts. To solve: Create an assignment with a payload in the title and view it as a student.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: developer forum xss in thread title", "target": "{\"Lab scenario\": \"Developer Forum XSS in Thread Title\", \"Lab Description\": \"A coding forum allows users to create discussion threads with a title. The title is displayed on the homepage using innerHTML. No sanitization is done on input. To solve: Inject a payload into a thread title and verify execution when browsing the forum.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Photography Sharing Site XSS in Album Description", "target": "{\"Lab scenario\": \"Photography Sharing Site XSS in Album Description\", \"Lab Description\": \"A photo-sharing site allows users to add a description to their albums. The description is shown using innerHTML on the album page. Input is not sanitized, allowing XSS. To solve: Submit a malicious description and trigger the payload by visiting the album.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: e-commerce platform xss in wishlist item name", "target": "{\"Lab scenario\": \"E-Commerce Platform XSS in Wishlist Item Name\", \"Lab Description\": \"An e-commerce site allows users to add custom item names to their wishlist. These names are rendered using innerHTML on the wishlist page without sanitization. The application does not validate HTML/JS input. To solve: Inject a script payload into the item name and trigger it via the wishlist display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A social media platform allows users to update their bio. This bio is reflected on the user's public profile page using innerHTML without escaping tags. Malicious scripts can be embedded and executed. To solve: Inject a payload into the bio and trigger it on the profile page.", "target": "{\"Lab scenario\": \"Social Media App XSS in Bio Field\", \"Lab Description\": \"A social media platform allows users to update their bio. This bio is reflected on the user's public profile page using innerHTML without escaping tags. Malicious scripts can be embedded and executed. To solve: Inject a payload into the bio and trigger it on the profile page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Travel Booking Portal XSS in Destination Notes", "target": "{\"Lab scenario\": \"Travel Booking Portal XSS in Destination Notes\", \"Lab Description\": \"A travel app lets users add 'notes' for destinations they plan to visit. These notes are shown on a trip summary page using innerHTML. No escaping is applied, allowing JavaScript injection. To solve: Add an XSS payload to a note and access the summary page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where food delivery app xss in feedback comments", "target": "{\"Lab scenario\": \"Food Delivery App XSS in Feedback Comments\", \"Lab Description\": \"Customers submit feedback with optional comments. These are displayed to admins using innerHTML. Since comments are not sanitized, a malicious user can inject JavaScript. To solve: Inject an XSS payload in the comment and trigger it in the admin interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where healthcare portal xss in appointment notes", "target": "{\"Lab scenario\": \"Healthcare Portal XSS in Appointment Notes\", \"Lab Description\": \"Doctors can leave notes for each appointment. These notes are shown on the appointment review page using innerHTML. The application does not sanitize or encode user input. To solve: Insert a script payload into a doctor's note and execute it on the review page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Product Customization XSS in E-Commerce Configurator", "target": "{\"Lab scenario\": \"Product Customization XSS in E-Commerce Configurator\", \"Lab Description\": \"An e-commerce site allows users to customize products before adding them to the cart. Custom text (e.g., engraved message) is previewed live using innerHTML inside a product detail component. The preview renderer fails to sanitize user-supplied input, leading to DOM-based XSS. To solve: Inject malicious input via the customization field to execute arbitrary JavaScript in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via contact info display in job applicant portal", "target": "{\"Lab scenario\": \"XSS via Contact Info Display in Job Applicant Portal\", \"Lab Description\": \"A job portal allows applicants to preview how their submitted contact info will appear to recruiters. The application reflects submitted form values directly into a DOM container without encoding. To solve: Craft a malicious payload in the contact info form that leads to script execution when previewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A real estate platform offers search suggestions as users type queries. The suggestions are dynamically inserted into the page without escaping, using string concatenation with innerHTML. To solve: Inject a payload via search input that executes JavaScript when the suggestion dropdown renders.", "target": "{\"Lab scenario\": \"XSS in Search Suggestions for Real Estate Listings\", \"Lab Description\": \"A real estate platform offers search suggestions as users type queries. The suggestions are dynamically inserted into the page without escaping, using string concatenation with innerHTML. To solve: Inject a payload via search input that executes JavaScript when the suggestion dropdown renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An admin interface allows configuration of notification templates using custom text fields. The custom message is rendered directly into a preview area using innerHTML. Due to lack of sanitization, arbitrary HTML/JS can be injected. To solve: Exploit the preview system by crafting an XSS payload as the custom message.", "target": "{\"Lab scenario\": \"XSS via Custom Notification Templates in Admin Panel\", \"Lab Description\": \"An admin interface allows configuration of notification templates using custom text fields. The custom message is rendered directly into a preview area using innerHTML. Due to lack of sanitization, arbitrary HTML/JS can be injected. To solve: Exploit the preview system by crafting an XSS payload as the custom message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: dom xss via meta description injection in blog cms", "target": "{\"Lab scenario\": \"DOM XSS via Meta Description Injection in Blog CMS\", \"Lab Description\": \"A blog CMS allows post authors to add custom meta descriptions. These descriptions are inserted into the DOM using JavaScript after loading the post. Due to lack of escaping, this allows DOM-based XSS. To solve: Inject a payload in the meta description that leads to execution on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in personalized finance news feed", "target": "{\"Lab scenario\": \"XSS in Personalized Finance News Feed\", \"Lab Description\": \"The financial application offers personalized news feeds based on user preferences. These preferences are reflected directly into the HTML without proper sanitization, allowing attackers to inject JavaScript into news headlines. To solve: Exploit the unsanitized headline rendering to execute arbitrary script when the page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in openid redirect parameter", "target": "{\"Lab scenario\": \"Reflected XSS in OpenID Redirect Parameter\", \"Lab Description\": \"An OpenID login endpoint reflects the redirect URL back to the page during error handling. Improper validation of the redirect parameter leads to an XSS sink in a script context. To solve: Inject a payload into the redirect query string and trigger script execution during login failure.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in avatar preview generator", "target": "{\"Lab scenario\": \"XSS in Avatar Preview Generator\", \"Lab Description\": \"Users can customize avatars using a generator that displays a live preview. The avatar preview is rendered with user-submitted data directly placed into an innerHTML attribute, making it vulnerable to DOM-based XSS. To solve: Inject a malicious payload in the avatar name field that results in script execution inside the preview box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A bug tracker application allows users to submit bug reports. The admin panel renders submitted summaries into a table with no sanitization. This enables attackers to inject JavaScript payloads that execute when an admin opens the panel. To solve: Submit a bug report with a crafted summary field that executes a script on the /admin-bugs page.", "target": "{\"Lab scenario\": \"XSS via Bug Report Summary in Admin Panel\", \"Lab Description\": \"A bug tracker application allows users to submit bug reports. The admin panel renders submitted summaries into a table with no sanitization. This enables attackers to inject JavaScript payloads that execute when an admin opens the panel. To solve: Submit a bug report with a crafted summary field that executes a script on the /admin-bugs page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in shared task description", "target": "{\"Lab scenario\": \"Stored XSS in Shared Task Description\", \"Lab Description\": \"A collaborative to-do app allows users to share task descriptions publicly. The application renders task descriptions in the shared view using dangerouslySetInnerHTML-style rendering without sanitization. To solve: Inject a stored XSS payload in a task and access the public share page to trigger it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: The application's search feature includes a tooltip showing the last searched term. The tooltip is updated using innerHTML directly from the URL parameter without proper encoding. To solve: Inject a payload via the `term` query string to trigger JavaScript execution when the tooltip renders.", "target": "{\"Lab scenario\": \"DOM XSS in Search Suggestion Tooltip\", \"Lab Description\": \"The application's search feature includes a tooltip showing the last searched term. The tooltip is updated using innerHTML directly from the URL parameter without proper encoding. To solve: Inject a payload via the `term` query string to trigger JavaScript execution when the tooltip renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in feedback form subject", "target": "{\"Lab scenario\": \"Reflected XSS in Feedback Form Subject\", \"Lab Description\": \"The feedback page echoes the submitted subject value back in a confirmation message. It does so by embedding the subject value directly into HTML without escaping. To solve: Inject a payload in the subject input to execute code when the confirmation is rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in forum post title", "target": "{\"Lab scenario\": \"Stored XSS in Forum Post Title\", \"Lab Description\": \"A forum allows users to post discussion threads. The thread titles are stored and displayed in a list on the homepage. Titles are rendered into the DOM without sanitization. To solve: Submit a new post with an XSS payload in the title and verify that it executes on homepage load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in Profile Badge Generator", "target": "{\"Lab scenario\": \"XSS in Profile Badge Generator\", \"Lab Description\": \"The application lets users generate HTML badges for embedding in external blogs. The badge content includes user-provided name and is rendered with innerHTML. To solve: Inject a payload in the name and view the generated badge HTML to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom-based xss in hash-based routing", "target": "{\"Lab scenario\": \"DOM-based XSS in Hash-Based Routing\", \"Lab Description\": \"A single-page application reads the hash part of the URL to render navigation state. It updates the DOM using `document.getElementById('view').innerHTML = location.hash`. This leads to DOM-based XSS if the hash includes script or dangerous HTML. To solve: Inject a payload in the URL hash to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Task Manager Note Field", "target": "{\"Lab scenario\": \"Stored XSS in Task Manager Note Field\", \"Lab Description\": \"The task manager app allows users to add notes to tasks. These notes are stored and later displayed without sanitization in the task detail page using innerHTML. The application directly injects note content into a div. To solve: Inject a script payload into the note field and view the task to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An email client renders previews of received emails by injecting subject lines using innerHTML. If the subject includes HTML tags, they are interpreted without sanitization. To solve: Inject a payload into the subject query parameter and confirm execution in the preview.", "target": "{\"Lab scenario\": \"DOM XSS in Email Preview Feature\", \"Lab Description\": \"An email client renders previews of received emails by injecting subject lines using innerHTML. If the subject includes HTML tags, they are interpreted without sanitization. To solve: Inject a payload into the subject query parameter and confirm execution in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in product search filter", "target": "{\"Lab scenario\": \"Reflected XSS in Product Search Filter\", \"Lab Description\": \"The product search page reflects the `category` parameter in a JavaScript variable to customize the UI. The category value is embedded in a script tag via template literal. To solve: Inject a payload that escapes the JS context and triggers script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Commenting System", "target": "{\"Lab scenario\": \"Stored XSS in Commenting System\", \"Lab Description\": \"A commenting system allows users to post comments, which are displayed below blog posts. The content is rendered without sanitization using raw HTML. To solve: Submit a comment with an XSS payload and revisit the blog to observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM XSS via Location Hash in Navigation Tab", "target": "{\"Lab scenario\": \"DOM XSS via Location Hash in Navigation Tab\", \"Lab Description\": \"The app reads the URL hash and uses it to dynamically highlight a tab in the navigation bar. The tab name is inserted into the DOM using innerHTML without validation. To solve: Inject a malicious payload in the hash to trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in user bio field on profile page", "target": "{\"Lab scenario\": \"Stored XSS in User Bio Field on Profile Page\", \"Lab Description\": \"A user profile page displays the bio field submitted during registration. The content is rendered with innerHTML when another user views the profile. The application stores and reflects this bio without escaping. To solve: Submit a script payload in the bio and visit the profile to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The search input reflects the user query in a JavaScript variable using template literals. This is vulnerable because the search query is not escaped before being included in a script tag. To solve: Inject a payload that breaks out of the JS context and executes code.", "target": "{\"Lab scenario\": \"DOM XSS via Search Input Reflection in Script Block\", \"Lab Description\": \"The search input reflects the user query in a JavaScript variable using template literals. This is vulnerable because the search query is not escaped before being included in a script tag. To solve: Inject a payload that breaks out of the JS context and executes code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The password reset feature reflects the email query parameter in an error message when an invalid email is submitted. The message is rendered via innerHTML in the frontend. To solve: Inject a script in the email parameter and submit it to trigger XSS.", "target": "{\"Lab scenario\": \"Reflected XSS in Error Message of Password Reset\", \"Lab Description\": \"The password reset feature reflects the email query parameter in an error message when an invalid email is submitted. The message is rendered via innerHTML in the frontend. To solve: Inject a script in the email parameter and submit it to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in Feedback Message Panel", "target": "{\"Lab scenario\": \"Stored XSS in Feedback Message Panel\", \"Lab Description\": \"The application allows users to submit feedback that is stored and shown to admins in a panel. The feedback is rendered with raw HTML inside a review box. To solve: Submit a payload as feedback and access the admin panel to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The chat app sets a user's name via a query parameter and reflects it in a greeting using innerHTML. If the name contains HTML or scripts, they are rendered without sanitization. To solve: Inject a script in the name parameter to execute code on page load.", "target": "{\"Lab scenario\": \"DOM XSS in Real-Time Chat Name Binding\", \"Lab Description\": \"The chat app sets a user's name via a query parameter and reflects it in a greeting using innerHTML. If the name contains HTML or scripts, they are rendered without sanitization. To solve: Inject a script in the name parameter to execute code on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can earn badges and customize their labels. These labels are rendered with innerHTML on the profile page. A crafted label can trigger XSS in the profile viewer.", "target": "{\"Lab scenario\": \"XSS via user badge label in gamified profile\", \"Lab Description\": \"Users can earn badges and customize their labels. These labels are rendered with innerHTML on the profile page. A crafted label can trigger XSS in the profile viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave comments on invoices, which are rendered in a PDF-like preview using innerHTML. A malicious comment results in XSS.", "target": "{\"Lab scenario\": \"XSS via invoice comment in PDF viewer\", \"Lab Description\": \"Users can leave comments on invoices, which are rendered in a PDF-like preview using innerHTML. A malicious comment results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Poll creators can define custom answer options. These options are displayed as HTML radio buttons using innerHTML. A crafted option label causes XSS.", "target": "{\"Lab scenario\": \"XSS via poll answer option rendering\", \"Lab Description\": \"Poll creators can define custom answer options. These options are displayed as HTML radio buttons using innerHTML. A crafted option label causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via webhook response rendering", "target": "{\"Lab scenario\": \"XSS via webhook response rendering\", \"Lab Description\": \"The admin dashboard logs webhook responses for debugging. If a webhook includes attacker-controlled content, it is rendered via innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via chatroom room name injection", "target": "{\"Lab scenario\": \"XSS via chatroom room name injection\", \"Lab Description\": \"Users can create chatrooms with custom names. Room names are rendered into the chat interface using innerHTML. A malicious name triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via transaction category labels in expense tracker", "target": "{\"Lab scenario\": \"XSS via transaction category labels in expense tracker\", \"Lab Description\": \"The financial tracker allows custom labels for spending categories. These are rendered using innerHTML in charts and summaries.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via delivery note comment on order receipt", "target": "{\"Lab scenario\": \"XSS via delivery note comment on order receipt\", \"Lab Description\": \"The order confirmation page reflects delivery notes added by the customer. These are rendered with innerHTML and may trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via iframe-embedded error reporting message", "target": "{\"Lab scenario\": \"XSS via iframe-embedded error reporting message\", \"Lab Description\": \"A support widget displays error messages submitted via URL. These are injected into an iframe via srcdoc using user input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via push notification content in preview mode", "target": "{\"Lab scenario\": \"XSS via push notification content in preview mode\", \"Lab Description\": \"Admins can preview a push notification before sending. The content is injected into a simulation UI using innerHTML. XSS is possible via payloads in notification text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Player aliases are shown on leaderboards and profile pages. When displayed using innerHTML, a crafted alias can lead to script execution.", "target": "{\"Lab scenario\": \"XSS via leaderboard player alias\", \"Lab Description\": \"Player aliases are shown on leaderboards and profile pages. When displayed using innerHTML, a crafted alias can lead to script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic tab title in workspace manager", "target": "{\"Lab scenario\": \"XSS via dynamic tab title in workspace manager\", \"Lab Description\": \"Each user workspace tab allows setting a custom title. The title is rendered in the UI using innerHTML. Injecting a script into the title triggers XSS upon switching tabs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app logs all user-issued voice commands. These commands are displayed via innerHTML in a console view. Injecting HTML into a command triggers XSS.", "target": "{\"Lab scenario\": \"XSS via voice assistant command history log\", \"Lab Description\": \"The app logs all user-issued voice commands. These commands are displayed via innerHTML in a console view. Injecting HTML into a command triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via timeline entry in project journal", "target": "{\"Lab scenario\": \"XSS via timeline entry in project journal\", \"Lab Description\": \"The journal logs project updates as timeline entries. Each entry is displayed using innerHTML. A crafted entry leads to script injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via search history tag cloud", "target": "{\"Lab scenario\": \"XSS via search history tag cloud\", \"Lab Description\": \"The app builds a visual tag cloud from users' past search terms. Terms are rendered via innerHTML. Injected HTML in a search term executes code on render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via custom error message in form validation override", "target": "{\"Lab scenario\": \"XSS via custom error message in form validation override\", \"Lab Description\": \"Admins can define custom error messages for failed validations. These are rendered via innerHTML in form fields. Malicious input causes script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via blog post tag rendering", "target": "{\"Lab scenario\": \"XSS via blog post tag rendering\", \"Lab Description\": \"The blog platform allows users to assign custom tags to posts. These tags are rendered using innerHTML. A malicious tag can trigger XSS when viewed on the blog post page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via RSS feed item title injection", "target": "{\"Lab scenario\": \"XSS via RSS feed item title injection\", \"Lab Description\": \"The application displays titles from external RSS feeds. If an attacker controls a feed item title and it is rendered via innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via dynamic avatar tooltip description", "target": "{\"Lab scenario\": \"XSS via dynamic avatar tooltip description\", \"Lab Description\": \"The app shows a tooltip with user bio when hovering over avatars. Bios are inserted into the tooltip container using innerHTML. A malicious bio can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via autocomplete address suggestions", "target": "{\"Lab scenario\": \"XSS via autocomplete address suggestions\", \"Lab Description\": \"The checkout form provides address suggestions based on previous inputs. These are rendered using innerHTML in a datalist. A malicious address triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via forum thread subject preview", "target": "{\"Lab scenario\": \"XSS via forum thread subject preview\", \"Lab Description\": \"The forum displays a preview of the latest thread titles. These are injected into the page using innerHTML. A malicious subject line can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via product review headline", "target": "{\"Lab scenario\": \"XSS via product review headline\", \"Lab Description\": \"Users can submit reviews with headlines. These headlines are shown on product pages using innerHTML. A malicious headline can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via interactive onboarding tip content", "target": "{\"Lab scenario\": \"XSS via interactive onboarding tip content\", \"Lab Description\": \"The onboarding tutorial system displays tips from server-configured content. These tips are rendered into a floating box using innerHTML. If a tip is compromised, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via invoice line-item notes", "target": "{\"Lab scenario\": \"XSS via invoice line-item notes\", \"Lab Description\": \"Line items in invoices can have custom notes. These are rendered with innerHTML in the invoice breakdown. A malicious note results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Kanban cards include editable status fields. These values are rendered with innerHTML. A crafted status text allows XSS injection in the task board.", "target": "{\"Lab scenario\": \"XSS via project status field in kanban board\", \"Lab Description\": \"Kanban cards include editable status fields. These values are rendered with innerHTML. A crafted status text allows XSS injection in the task board.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via calendar event description popup", "target": "{\"Lab scenario\": \"XSS via calendar event description popup\", \"Lab Description\": \"Calendar events show descriptions in a popup when clicked. If the description is rendered using innerHTML, a crafted value can lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via dynamic faq answer content", "target": "{\"Lab scenario\": \"XSS via dynamic FAQ answer content\", \"Lab Description\": \"The FAQ section allows administrators to write answers in rich text. These answers are rendered using innerHTML. A malicious answer content leads to stored XSS when a user visits the FAQ page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via job application cover letter preview", "target": "{\"Lab scenario\": \"XSS via job application cover letter preview\", \"Lab Description\": \"Applicants can enter a cover letter that’s previewed before submission. If the content is injected using innerHTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via editable survey question title", "target": "{\"Lab scenario\": \"XSS via editable survey question title\", \"Lab Description\": \"Admins can add and edit survey questions. The titles are rendered directly into the page. A crafted title allows stored XSS execution when the survey is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via live chat username rendering", "target": "{\"Lab scenario\": \"XSS via live chat username rendering\", \"Lab Description\": \"In the live chat system, usernames are rendered with innerHTML when they join the chat. An attacker can inject script via the username.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via file upload success message", "target": "{\"Lab scenario\": \"XSS via file upload success message\", \"Lab Description\": \"When users upload files, the file name is reflected back in the success message. If rendered unsanitized, this can result in reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via app notification message rendering", "target": "{\"Lab scenario\": \"XSS via app notification message rendering\", \"Lab Description\": \"System-generated notifications may include user-generated content such as names or messages. These are displayed using innerHTML, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via contest entry title", "target": "{\"Lab scenario\": \"XSS via contest entry title\", \"Lab Description\": \"Users can submit creative titles for a contest. These are rendered for public voting using innerHTML. Malicious entries lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic welcome banner", "target": "{\"Lab scenario\": \"XSS via dynamic welcome banner\", \"Lab Description\": \"The homepage shows a personalized welcome message using the user's name. If the name is rendered unsanitized, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via email template custom footer", "target": "{\"Lab scenario\": \"XSS via email template custom footer\", \"Lab Description\": \"Marketing users can set a footer message in the email builder. If rendered in the preview or final email without escaping, stored XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via group chat topic title", "target": "{\"Lab scenario\": \"XSS via group chat topic title\", \"Lab Description\": \"Group chats allow setting a topic. The topic is rendered on top of the chatroom using innerHTML. XSS can occur if the title is unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via custom 404 error message rendering", "target": "{\"Lab scenario\": \"XSS via custom 404 error message rendering\", \"Lab Description\": \"The application allows admins to configure custom 404 error messages. If the message is rendered using innerHTML, attackers can inject a script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via poll results graph labels", "target": "{\"Lab scenario\": \"XSS via poll results graph labels\", \"Lab Description\": \"Poll results are shown using a bar graph. Each bar has a label sourced from user-submitted answers. If labels are rendered using innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via profile 'about me' html bio field", "target": "{\"Lab scenario\": \"XSS via profile 'about me' HTML bio field\", \"Lab Description\": \"The profile page includes an 'about me' field which supports limited HTML. If not sanitized properly, a malicious script can be stored and executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via project feedback suggestion text", "target": "{\"Lab scenario\": \"XSS via project feedback suggestion text\", \"Lab Description\": \"Feedback on projects includes a suggestion text field. These are displayed to admins using innerHTML. XSS is possible through malicious suggestion input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via team dashboard widget name", "target": "{\"Lab scenario\": \"XSS via team dashboard widget name\", \"Lab Description\": \"Teams can customize widget names on their dashboard. These names are injected into the UI using innerHTML. A crafted name results in persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via comment system reply preview", "target": "{\"Lab scenario\": \"XSS via comment system reply preview\", \"Lab Description\": \"When replying to a comment, a live preview is shown using the input. If the content is reflected using innerHTML, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via bug tracker issue title", "target": "{\"Lab scenario\": \"XSS via bug tracker issue title\", \"Lab Description\": \"Bug reports include titles that are rendered in an issue tracker. If innerHTML is used for rendering without escaping, a malicious title triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The activity log renders user actions using innerHTML. A manipulated action message can result in persistent XSS when viewed by an admin.", "target": "{\"Lab scenario\": \"XSS via activity log detail description\", \"Lab Description\": \"The activity log renders user actions using innerHTML. A manipulated action message can result in persistent XSS when viewed by an admin.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via calendar invite title preview", "target": "{\"Lab scenario\": \"XSS via calendar invite title preview\", \"Lab Description\": \"Users can preview the title of a calendar invite before sending it. The title is rendered in a header using innerHTML. If not sanitized, this can lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via webhook configuration name", "target": "{\"Lab scenario\": \"XSS via webhook configuration name\", \"Lab Description\": \"Users can configure and name webhooks. These names are listed in the webhook dashboard using innerHTML. A malicious name triggers XSS in the list view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can set a short status message on their profile. This message is displayed using innerHTML on various pages like friends list and search results. A malicious message leads to XSS.", "target": "{\"Lab scenario\": \"XSS via profile status message rendering\", \"Lab Description\": \"Users can set a short status message on their profile. This message is displayed using innerHTML on various pages like friends list and search results. A malicious message leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via newsletter unsubscribe confirmation page", "target": "{\"Lab scenario\": \"XSS via newsletter unsubscribe confirmation page\", \"Lab Description\": \"After clicking an unsubscribe link, users are shown a confirmation message that includes their email address. The email is reflected using innerHTML. Malicious parameters can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via invoice recipient name rendering", "target": "{\"Lab scenario\": \"XSS via invoice recipient name rendering\", \"Lab Description\": \"Invoices display the recipient's name in the header. If this field is user-controlled and rendered with innerHTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Incoming chat messages are previewed in pop-up notifications. If messages are rendered using innerHTML without filtering, stored XSS is possible.", "target": "{\"Lab scenario\": \"XSS via chat message preview notification\", \"Lab Description\": \"Incoming chat messages are previewed in pop-up notifications. If messages are rendered using innerHTML without filtering, stored XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via music playlist description rendering", "target": "{\"Lab scenario\": \"XSS via music playlist description rendering\", \"Lab Description\": \"Users can add descriptions to playlists. These descriptions are rendered using innerHTML. A malicious description triggers stored XSS on playlist load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via customer support ticket subject line", "target": "{\"Lab scenario\": \"XSS via customer support ticket subject line\", \"Lab Description\": \"Support tickets include a subject line set by the user. If this is rendered in the dashboard with innerHTML, stored XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via event rsvp name rendering", "target": "{\"Lab scenario\": \"XSS via event RSVP name rendering\", \"Lab Description\": \"The RSVP list displays attendee names on the public event page. If names are rendered unsanitized via innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via blog archive post snippet rendering", "target": "{\"Lab scenario\": \"XSS via blog archive post snippet rendering\", \"Lab Description\": \"The blog archive displays a snippet of each post. If the snippet is rendered using innerHTML and contains user-controlled content, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via shipping instruction note", "target": "{\"Lab scenario\": \"XSS via shipping instruction note\", \"Lab Description\": \"Customers can leave special instructions during checkout. These are rendered using innerHTML on the order summary. Malicious notes lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via announcement banner title", "target": "{\"Lab scenario\": \"XSS via announcement banner title\", \"Lab Description\": \"Admins can create banners to be shown site-wide. Banner titles are rendered using innerHTML on all pages. A malicious banner title results in persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via task board column title", "target": "{\"Lab scenario\": \"XSS via task board column title\", \"Lab Description\": \"In the task board view, users can rename column titles (e.g. 'To Do', 'In Progress'). These titles are injected using innerHTML. A malicious title leads to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via file manager folder name", "target": "{\"Lab scenario\": \"XSS via file manager folder name\", \"Lab Description\": \"The web-based file manager allows users to name folders. If the folder name is displayed using innerHTML, it can be abused to execute arbitrary scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via custom footer message in landing page builder", "target": "{\"Lab scenario\": \"XSS via custom footer message in landing page builder\", \"Lab Description\": \"The landing page builder allows setting custom footer text. If rendered without sanitization using innerHTML, this opens the door for stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via e-learning module title input", "target": "{\"Lab scenario\": \"XSS via e-learning module title input\", \"Lab Description\": \"Course creators can enter module titles in the LMS. These titles are rendered in the course overview using innerHTML. XSS occurs when a malicious title is entered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via code snippet filename in ide preview", "target": "{\"Lab scenario\": \"XSS via code snippet filename in IDE preview\", \"Lab Description\": \"The in-browser IDE displays filenames next to code snippets. If the name is unsanitized and rendered with innerHTML, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Job posters can specify custom locations. These locations are displayed using innerHTML on job listings. A malicious location results in stored XSS.", "target": "{\"Lab scenario\": \"XSS via job listing custom location field\", \"Lab Description\": \"Job posters can specify custom locations. These locations are displayed using innerHTML on job listings. A malicious location results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via personal goal title in productivity app", "target": "{\"Lab scenario\": \"XSS via personal goal title in productivity app\", \"Lab Description\": \"Users can set personal goals with titles. These titles are rendered in the dashboard via innerHTML. A crafted title leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via document annotation popup content", "target": "{\"Lab scenario\": \"XSS via document annotation popup content\", \"Lab Description\": \"The document viewer displays popup annotations on hover. If annotations are stored using innerHTML, XSS can be triggered via crafted annotation content.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The financial dashboard allows tracking stock tickers. If the symbol is reflected in the UI using innerHTML, attackers can inject XSS via the ticker name.", "target": "{\"Lab scenario\": \"XSS via stock ticker symbol display\", \"Lab Description\": \"The financial dashboard allows tracking stock tickers. If the symbol is reflected in the UI using innerHTML, attackers can inject XSS via the ticker name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: System administrators can configure custom alert messages. If the message is reflected using innerHTML, XSS may occur in global alert modals.", "target": "{\"Lab scenario\": \"XSS via system alert configuration message\", \"Lab Description\": \"System administrators can configure custom alert messages. If the message is reflected using innerHTML, XSS may occur in global alert modals.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via api key description in developer dashboard", "target": "{\"Lab scenario\": \"XSS via API key description in developer dashboard\", \"Lab Description\": \"The developer dashboard allows users to label their API keys with custom descriptions. These labels are rendered using innerHTML. A malicious description leads to persistent XSS when viewing the key list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via event log tag entry in admin panel", "target": "{\"Lab scenario\": \"XSS via event log tag entry in admin panel\", \"Lab Description\": \"Event logs are tagged for easier filtering. Tags are rendered into filter dropdowns using innerHTML. A malicious tag name can lead to XSS when admins browse filters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via user's 'current mood' status", "target": "{\"Lab scenario\": \"XSS via user's 'current mood' status\", \"Lab Description\": \"Social profiles display a 'current mood' message submitted by users. The message is shown using innerHTML, and a malicious payload can lead to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via custom bookmark folder name", "target": "{\"Lab scenario\": \"XSS via custom bookmark folder name\", \"Lab Description\": \"Users can organize saved pages into folders with custom names. If the folder name is rendered using innerHTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can assign custom text labels to emoji reactions. These labels are shown in tooltips using innerHTML. A crafted label triggers XSS on hover.", "target": "{\"Lab scenario\": \"XSS via comment system reaction emoji label\", \"Lab Description\": \"Users can assign custom text labels to emoji reactions. These labels are shown in tooltips using innerHTML. A crafted label triggers XSS on hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via account deletion reason", "target": "{\"Lab scenario\": \"XSS via account deletion reason\", \"Lab Description\": \"When a user deletes their account, they can submit a reason. Admins review this input in a panel that uses innerHTML, allowing for persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Sales agents can log notes on client records. If these notes are rendered using innerHTML, a malicious note can trigger XSS.", "target": "{\"Lab scenario\": \"XSS via CRM contact note rendering\", \"Lab Description\": \"Sales agents can log notes on client records. If these notes are rendered using innerHTML, a malicious note can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Vendors can define custom shipping method names. If rendered unsanitized, these names can introduce XSS in the checkout interface.", "target": "{\"Lab scenario\": \"XSS via online store shipping method label\", \"Lab Description\": \"Vendors can define custom shipping method names. If rendered unsanitized, these names can introduce XSS in the checkout interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via appointment title in calendar tooltip", "target": "{\"Lab scenario\": \"XSS via appointment title in calendar tooltip\", \"Lab Description\": \"Calendar events display their titles in tooltips. If the title includes a malicious payload and is rendered with innerHTML, XSS can occur on hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via live auction item name", "target": "{\"Lab scenario\": \"XSS via live auction item name\", \"Lab Description\": \"The auction platform allows sellers to name items freely. These names are rendered in real-time to all viewers using innerHTML. A crafted name results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via profile badge custom label", "target": "{\"Lab scenario\": \"XSS via profile badge custom label\", \"Lab Description\": \"Users can customize labels for their profile badges. These labels are rendered using innerHTML on profile visits. A malicious label can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Team pages allow admins to add an intro blurb. This is shown on public team profiles using innerHTML. Unsanitized input leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via team introduction blurb\", \"Lab Description\": \"Team pages allow admins to add an intro blurb. This is shown on public team profiles using innerHTML. Unsanitized input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via meeting agenda topic title", "target": "{\"Lab scenario\": \"XSS via meeting agenda topic title\", \"Lab Description\": \"Meeting organizers can define custom agenda topics. These are shown on shared pages using innerHTML. A malicious title results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via job applicant cover letter filename", "target": "{\"Lab scenario\": \"XSS via job applicant cover letter filename\", \"Lab Description\": \"HR portal displays uploaded cover letter filenames. These are inserted into HTML using innerHTML. If filenames are not sanitized, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via food delivery special instruction field", "target": "{\"Lab scenario\": \"XSS via food delivery special instruction field\", \"Lab Description\": \"The app allows customers to provide delivery instructions. These are shown to the courier using innerHTML. A malicious instruction leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via transaction note in personal finance tracker", "target": "{\"Lab scenario\": \"XSS via transaction note in personal finance tracker\", \"Lab Description\": \"Users can tag transactions with notes. These are rendered in reports using innerHTML. A crafted note results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via user-submitted bug reproduction steps", "target": "{\"Lab scenario\": \"XSS via user-submitted bug reproduction steps\", \"Lab Description\": \"Bug reporters can enter reproduction steps. These are shown to developers in HTML view. A malicious step can trigger XSS if innerHTML is used.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via recipe comment in cooking platform", "target": "{\"Lab scenario\": \"XSS via recipe comment in cooking platform\", \"Lab Description\": \"Users can leave comments under recipes. These are rendered using innerHTML. A malicious comment results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via payment failure reason on checkout", "target": "{\"Lab scenario\": \"XSS via payment failure reason on checkout\", \"Lab Description\": \"If a payment fails, the gateway may include a failure reason in the redirect. This is reflected using innerHTML, allowing for reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via resume headline field in job portal", "target": "{\"Lab scenario\": \"XSS via resume headline field in job portal\", \"Lab Description\": \"Job seekers can add a headline to their resume. This field is displayed on search results using innerHTML. A malicious headline leads to stored XSS when viewed by recruiters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via calendar event location field", "target": "{\"Lab scenario\": \"XSS via calendar event location field\", \"Lab Description\": \"Users can add a location to calendar events. The location is rendered using innerHTML in the event details panel. A crafted location can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via social media post caption", "target": "{\"Lab scenario\": \"XSS via social media post caption\", \"Lab Description\": \"Users can create posts with captions. These are rendered using innerHTML on public feeds. A malicious caption leads to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via iot device label in smart home dashboard", "target": "{\"Lab scenario\": \"XSS via IoT device label in smart home dashboard\", \"Lab Description\": \"Users can assign custom names to their IoT devices. These names are rendered using innerHTML in the dashboard. A crafted name can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can report posts with a reason. These reasons are shown to moderators using innerHTML. A malicious reason can cause stored XSS in the mod view.", "target": "{\"Lab scenario\": \"XSS via user report description in moderation panel\", \"Lab Description\": \"Users can report posts with a reason. These reasons are shown to moderators using innerHTML. A malicious reason can cause stored XSS in the mod view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can create custom playlists on a video platform. Playlist titles are rendered using innerHTML. A malicious title can lead to stored XSS on the playlist viewer page.", "target": "{\"Lab scenario\": \"XSS via video playlist title in streaming platform\", \"Lab Description\": \"Users can create custom playlists on a video platform. Playlist titles are rendered using innerHTML. A malicious title can lead to stored XSS on the playlist viewer page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via friend group name in messaging app", "target": "{\"Lab scenario\": \"XSS via friend group name in messaging app\", \"Lab Description\": \"The app allows grouping contacts under custom labels. Group names are rendered using innerHTML in the sidebar. A crafted group name causes XSS when the group is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can assign labels to QR codes. These labels are rendered using innerHTML in dashboards. A malicious label can trigger XSS in QR viewer.", "target": "{\"Lab scenario\": \"XSS via QR code label in scanner dashboard\", \"Lab Description\": \"Admins can assign labels to QR codes. These labels are rendered using innerHTML in dashboards. A malicious label can trigger XSS in QR viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can tag images with custom text. Tag names are rendered using innerHTML below each image. A malicious tag can cause XSS.", "target": "{\"Lab scenario\": \"XSS via image gallery tag name\", \"Lab Description\": \"Users can tag images with custom text. Tag names are rendered using innerHTML below each image. A malicious tag can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via donation message in charity platform", "target": "{\"Lab scenario\": \"XSS via donation message in charity platform\", \"Lab Description\": \"Supporters can leave a message with their donations. Messages are rendered using innerHTML in public feed. Malicious input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Multiplayer games allow custom lobby names. These are broadcasted live to all players using innerHTML. A crafted name leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via real-time game lobby name\", \"Lab Description\": \"Multiplayer games allow custom lobby names. These are broadcasted live to all players using innerHTML. A crafted name leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via auction bid comment field", "target": "{\"Lab scenario\": \"XSS via auction bid comment field\", \"Lab Description\": \"Bidders can leave a comment with their bids. These comments are shown using innerHTML. A malicious comment triggers stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via shipping provider name in tracking system", "target": "{\"Lab scenario\": \"XSS via shipping provider name in tracking system\", \"Lab Description\": \"Admins can add shipping provider names manually. These are rendered via innerHTML in the tracking status page. A malicious name leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via leaderboard player nickname", "target": "{\"Lab scenario\": \"XSS via leaderboard player nickname\", \"Lab Description\": \"Players can set nicknames in leaderboards. If rendered via innerHTML, a crafted name leads to persistent XSS for viewers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via code review comment in dev collaboration tool", "target": "{\"Lab scenario\": \"XSS via code review comment in dev collaboration tool\", \"Lab Description\": \"Reviewers can comment on code snippets. Comments are rendered with innerHTML next to code. A crafted comment triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via onboarding welcome message customization", "target": "{\"Lab scenario\": \"XSS via onboarding welcome message customization\", \"Lab Description\": \"Admins can customize the welcome message shown to new users during onboarding. If this message is rendered using innerHTML, a malicious input can result in stored XSS for every new user.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via refund reason field in e-commerce admin", "target": "{\"Lab scenario\": \"XSS via refund reason field in e-commerce admin\", \"Lab Description\": \"When a refund is issued, admins can specify a reason which is displayed to the user. If the input is rendered without sanitization, reflected XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via fitness challenge team name", "target": "{\"Lab scenario\": \"XSS via fitness challenge team name\", \"Lab Description\": \"Users can create fitness challenges and assign their own team names. These are rendered on challenge pages via innerHTML. A crafted name results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via CMS plugin configuration field", "target": "{\"Lab scenario\": \"XSS via CMS plugin configuration field\", \"Lab Description\": \"A CMS plugin allows user-defined descriptions to appear in its output. These fields are rendered with innerHTML. A malicious input can lead to stored XSS on the frontend.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via guestbook entry on public page", "target": "{\"Lab scenario\": \"XSS via guestbook entry on public page\", \"Lab Description\": \"A public-facing guestbook allows anonymous users to leave messages. Entries are rendered using innerHTML without proper escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via banking memo field in transaction list", "target": "{\"Lab scenario\": \"XSS via banking memo field in transaction list\", \"Lab Description\": \"Bank customers can attach memos to transfers. These are displayed in the transaction history using innerHTML. XSS is possible if input is not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via email alias name in mailbox overview", "target": "{\"Lab scenario\": \"XSS via email alias name in mailbox overview\", \"Lab Description\": \"Users can create email aliases with custom names. These are rendered in the UI using innerHTML. XSS occurs if input is not escaped.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via survey title in analytics dashboard", "target": "{\"Lab scenario\": \"XSS via survey title in analytics dashboard\", \"Lab Description\": \"Survey creators can name their surveys. These titles appear in dashboards using innerHTML. A malicious title leads to stored XSS for admins.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Developers can add descriptions to API routes. These are rendered in the API gateway UI using innerHTML. If not sanitized, they are vulnerable to XSS.", "target": "{\"Lab scenario\": \"XSS via API gateway route description\", \"Lab Description\": \"Developers can add descriptions to API routes. These are rendered in the API gateway UI using innerHTML. If not sanitized, they are vulnerable to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via education platform lesson subtitle", "target": "{\"Lab scenario\": \"XSS via education platform lesson subtitle\", \"Lab Description\": \"Lesson creators can provide subtitles. These appear under videos using innerHTML. A malicious subtitle leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via job title in internal HR portal", "target": "{\"Lab scenario\": \"XSS via job title in internal HR portal\", \"Lab Description\": \"Employees can submit custom job titles that appear in internal directories. These titles are rendered with innerHTML. A crafted title causes stored XSS when viewed by other employees.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can submit custom answers in live polls. These answers are displayed live using innerHTML. If not sanitized, this can lead to DOM-based XSS.", "target": "{\"Lab scenario\": \"XSS via live polling answer text\", \"Lab Description\": \"Users can submit custom answers in live polls. These answers are displayed live using innerHTML. If not sanitized, this can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via feedback category label in support portal", "target": "{\"Lab scenario\": \"XSS via feedback category label in support portal\", \"Lab Description\": \"Users can suggest custom feedback categories. These are displayed to all users using innerHTML. A malicious label causes persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via weather widget city name", "target": "{\"Lab scenario\": \"XSS via weather widget city name\", \"Lab Description\": \"Users can add custom cities to their weather widgets. If the city name is injected unsanitized into innerHTML, XSS can occur in the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via mobile app push notification title", "target": "{\"Lab scenario\": \"XSS via mobile app push notification title\", \"Lab Description\": \"Admins can create push notifications. If the title is displayed using innerHTML in the web version, an XSS attack can be triggered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can set nicknames for contacts in their address book. These nicknames are rendered in the UI using innerHTML. XSS occurs if input is not sanitized.", "target": "{\"Lab scenario\": \"XSS via address book contact nickname\", \"Lab Description\": \"Users can set nicknames for contacts in their address book. These nicknames are rendered in the UI using innerHTML. XSS occurs if input is not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via conference attendee badge title", "target": "{\"Lab scenario\": \"XSS via conference attendee badge title\", \"Lab Description\": \"Attendees can enter a badge title. This title is rendered in the live event viewer using innerHTML. XSS is possible if not sanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via custom reaction label in messaging platform", "target": "{\"Lab scenario\": \"XSS via custom reaction label in messaging platform\", \"Lab Description\": \"Users can add custom labels to emoji reactions. Labels are rendered in tooltips via innerHTML. A crafted label can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can add descriptions to their music playlists. These are rendered in the app UI using innerHTML. If not escaped, a malicious description can cause XSS.", "target": "{\"Lab scenario\": \"XSS via playlist description in music app\", \"Lab Description\": \"Users can add descriptions to their music playlists. These are rendered in the app UI using innerHTML. If not escaped, a malicious description can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via virtual classroom whiteboard notes", "target": "{\"Lab scenario\": \"XSS via virtual classroom whiteboard notes\", \"Lab Description\": \"Teachers can push quick notes to a virtual whiteboard. These notes are rendered in student browsers using innerHTML. A malicious note results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via live chat channel topic", "target": "{\"Lab scenario\": \"XSS via live chat channel topic\", \"Lab Description\": \"Users can set topics for chat channels. These topics are rendered in the chat header using innerHTML. If unsanitized, a crafted topic results in persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via expense report note field", "target": "{\"Lab scenario\": \"XSS via expense report note field\", \"Lab Description\": \"Employees can attach notes to expense reports. These notes are rendered in finance dashboards using innerHTML. A malicious note can cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via smart device custom label in iot platform", "target": "{\"Lab scenario\": \"XSS via smart device custom label in IoT platform\", \"Lab Description\": \"Users can rename their devices. Labels are rendered via innerHTML in dashboards. A crafted name leads to XSS when the device is displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Instructors can create custom quiz questions. If these are rendered with innerHTML, a malicious question text can result in stored XSS.", "target": "{\"Lab scenario\": \"XSS via e-learning quiz question field\", \"Lab Description\": \"Instructors can create custom quiz questions. If these are rendered with innerHTML, a malicious question text can result in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via booking confirmation message", "target": "{\"Lab scenario\": \"XSS via booking confirmation message\", \"Lab Description\": \"Users receive confirmation messages for bookings. These are constructed with innerHTML using submitted notes. A crafted note can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via project tag in team management tool", "target": "{\"Lab scenario\": \"XSS via project tag in team management tool\", \"Lab Description\": \"Project managers can add custom tags to projects. Tags are displayed using innerHTML. If unsanitized, a crafted tag causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users sign documents with a typed signature. The name is rendered using innerHTML in the final preview. A crafted name triggers XSS.", "target": "{\"Lab scenario\": \"XSS via digital signature name in approval system\", \"Lab Description\": \"Users sign documents with a typed signature. The name is rendered using innerHTML in the final preview. A crafted name triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via bug tracker issue label", "target": "{\"Lab scenario\": \"XSS via bug tracker issue label\", \"Lab Description\": \"Developers can label issues with custom text. If rendered via innerHTML, a crafted label causes stored XSS in the issue list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can assign nicknames to vehicles. These are rendered in dashboards via innerHTML. If unsanitized, XSS occurs.", "target": "{\"Lab scenario\": \"XSS via vehicle nickname in fleet management\", \"Lab Description\": \"Admins can assign nicknames to vehicles. These are rendered in dashboards via innerHTML. If unsanitized, XSS occurs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Top reviews are highlighted with a custom title. If rendered unsanitized using innerHTML, XSS occurs on product detail view.", "target": "{\"Lab scenario\": \"XSS via featured review title on product page\", \"Lab Description\": \"Top reviews are highlighted with a custom title. If rendered unsanitized using innerHTML, XSS occurs on product detail view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via invoice note in billing platform", "target": "{\"Lab scenario\": \"XSS via invoice note in billing platform\", \"Lab Description\": \"Clients can attach notes to invoices. These notes are displayed in the client portal using innerHTML. If unsanitized, the note can cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Marketing teams can name newsletter campaigns. Campaign names appear in the dashboard via innerHTML. Malicious names trigger XSS.", "target": "{\"Lab scenario\": \"XSS via newsletter campaign name\", \"Lab Description\": \"Marketing teams can name newsletter campaigns. Campaign names appear in the dashboard via innerHTML. Malicious names trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via virtual event room name", "target": "{\"Lab scenario\": \"XSS via virtual event room name\", \"Lab Description\": \"Event organizers can name virtual rooms. These names are reflected into the frontend using innerHTML. A malicious name results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can add books with custom titles. These are rendered via innerHTML on the catalog page. Unsanitized input causes XSS.", "target": "{\"Lab scenario\": \"XSS via book title in online library system\", \"Lab Description\": \"Admins can add books with custom titles. These are rendered via innerHTML on the catalog page. Unsanitized input causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via system announcement title", "target": "{\"Lab scenario\": \"XSS via system announcement title\", \"Lab Description\": \"Admins can post announcements. The title is displayed on the homepage using innerHTML. If not sanitized, XSS occurs for all users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Users can build travel itineraries with named stops. These names are rendered in the app using innerHTML. A crafted name results in XSS.", "target": "{\"Lab scenario\": \"XSS via travel itinerary stop name\", \"Lab Description\": \"Users can build travel itineraries with named stops. These names are rendered in the app using innerHTML. A crafted name results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via personal goal title in productivity tracker", "target": "{\"Lab scenario\": \"XSS via personal goal title in productivity tracker\", \"Lab Description\": \"Users can set personal goals with titles. Titles are rendered in goal overviews using innerHTML. Malicious input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via virtual workspace tab name", "target": "{\"Lab scenario\": \"XSS via virtual workspace tab name\", \"Lab Description\": \"Users can create tabs within their workspace. Tab names are displayed in the interface using innerHTML. A malicious name causes DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via clinic appointment reason text", "target": "{\"Lab scenario\": \"XSS via clinic appointment reason text\", \"Lab Description\": \"Patients can provide appointment reasons. These are rendered in the doctor dashboard using innerHTML. XSS is possible if unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via warehouse product bin label", "target": "{\"Lab scenario\": \"XSS via warehouse product bin label\", \"Lab Description\": \"Warehouse managers can label storage bins. Labels are rendered via innerHTML in the inventory app. A malicious label can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via forum signature field", "target": "{\"Lab scenario\": \"XSS via forum signature field\", \"Lab Description\": \"Users can add signatures to their forum profiles. These are displayed under every post using innerHTML. A malicious signature causes stored XSS on every thread visit.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via peer review comment title", "target": "{\"Lab scenario\": \"XSS via peer review comment title\", \"Lab Description\": \"Students can leave peer reviews with custom titles. These titles are rendered in the review summary using innerHTML. A crafted title results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via emergency alert title in control dashboard", "target": "{\"Lab scenario\": \"XSS via emergency alert title in control dashboard\", \"Lab Description\": \"Admins can broadcast emergency alerts. Alert titles are rendered with innerHTML in a dashboard. If unsanitized, this results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via code snippet title in sharing platform", "target": "{\"Lab scenario\": \"XSS via code snippet title in sharing platform\", \"Lab Description\": \"Users can share code snippets with titles. These titles are shown in listings using innerHTML. A malicious title results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via bug bounty report summary", "target": "{\"Lab scenario\": \"XSS via bug bounty report summary\", \"Lab Description\": \"Researchers submit summaries for their bug reports. These are displayed to the security team using innerHTML. Unsanitized input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via comment section username", "target": "{\"Lab scenario\": \"XSS via comment section username\", \"Lab Description\": \"Usernames are displayed beside comments using innerHTML. If usernames are not sanitized, stored XSS can be executed by simply posting a comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via product category name in inventory app", "target": "{\"Lab scenario\": \"XSS via product category name in inventory app\", \"Lab Description\": \"Admins can create custom product categories. Category names appear in dropdowns using innerHTML. A malicious name results in DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via meeting agenda point in scheduler", "target": "{\"Lab scenario\": \"XSS via meeting agenda point in scheduler\", \"Lab Description\": \"Team leads can set meeting points. Points are rendered via innerHTML in the scheduler. A crafted point triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Log entries include a user-supplied detail field. These are rendered using innerHTML in the admin log viewer. Unsanitized values allow stored XSS.", "target": "{\"Lab scenario\": \"XSS via log entry detail field in admin panel\", \"Lab Description\": \"Log entries include a user-supplied detail field. These are rendered using innerHTML in the admin log viewer. Unsanitized values allow stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via ai assistant custom command label", "target": "{\"Lab scenario\": \"XSS via AI assistant custom command label\", \"Lab Description\": \"Users can name their custom AI assistant commands. These names are rendered using innerHTML in the assistant UI. A malicious name results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via contact form department selector label", "target": "{\"Lab scenario\": \"XSS via contact form department selector label\", \"Lab Description\": \"The contact form dynamically displays the selected department name using innerHTML. A maliciously crafted department name can lead to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The chatbot suggests reply labels, generated from prior messages. These are inserted into the page using innerHTML. Malicious content can cause XSS.", "target": "{\"Lab scenario\": \"XSS via chatbot suggested reply label\", \"Lab Description\": \"The chatbot suggests reply labels, generated from prior messages. These are inserted into the page using innerHTML. Malicious content can cause XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via audio track title in music playlist viewer", "target": "{\"Lab scenario\": \"XSS via audio track title in music playlist viewer\", \"Lab Description\": \"Users can add audio tracks with custom titles. These titles appear in playlists using innerHTML. A malicious title results in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via reviewer's position in testimonial section", "target": "{\"Lab scenario\": \"XSS via reviewer's position in testimonial section\", \"Lab Description\": \"Users providing testimonials can specify a position. This appears on the public site using innerHTML. A crafted position causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The system stores responses from webhook targets and renders titles using innerHTML. A malicious response payload can trigger stored XSS.", "target": "{\"Lab scenario\": \"XSS via webhook response preview title\", \"Lab Description\": \"The system stores responses from webhook targets and renders titles using innerHTML. A malicious response payload can trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via remote config key name in devops dashboard", "target": "{\"Lab scenario\": \"XSS via remote config key name in DevOps dashboard\", \"Lab Description\": \"DevOps users can define remote config keys. Key names are rendered in real-time using innerHTML. A malicious name can result in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can define aliases for travel destinations. These appear in confirmations using innerHTML. A crafted alias causes XSS.", "target": "{\"Lab scenario\": \"XSS via booking location alias in travel system\", \"Lab Description\": \"Users can define aliases for travel destinations. These appear in confirmations using innerHTML. A crafted alias causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Project milestones can be named by users. These names are rendered in task boards using innerHTML. Unsanitized names cause stored XSS.", "target": "{\"Lab scenario\": \"XSS via project milestone name in Kanban board\", \"Lab Description\": \"Project milestones can be named by users. These names are rendered in task boards using innerHTML. Unsanitized names cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can place custom markers with labels. These labels are rendered using innerHTML. A malicious label causes XSS when the map is loaded.", "target": "{\"Lab scenario\": \"XSS via map marker label in geo-tracking app\", \"Lab Description\": \"Users can place custom markers with labels. These labels are rendered using innerHTML. A malicious label causes XSS when the map is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via payment reference note in invoice preview", "target": "{\"Lab scenario\": \"XSS via payment reference note in invoice preview\", \"Lab Description\": \"Users can add a reference note when paying invoices. These are displayed in preview using innerHTML. Unsanitized input leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via file upload label name in document management system", "target": "{\"Lab scenario\": \"XSS via file upload label name in document management system\", \"Lab Description\": \"Users can assign custom labels to uploaded files. These labels are rendered using innerHTML in the file listing panel. A crafted label can result in stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via product customization field in checkout form", "target": "{\"Lab scenario\": \"XSS via product customization field in checkout form\", \"Lab Description\": \"Users can add customization notes for products. These are rendered in the order summary using innerHTML. Unsanitized notes cause stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via bug tracker component name", "target": "{\"Lab scenario\": \"XSS via bug tracker component name\", \"Lab Description\": \"Bug reports allow setting the affected component name. This is displayed in listings using innerHTML. A crafted name leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can name API clients. These names appear next to tokens using innerHTML. Malicious input leads to stored XSS in the panel.", "target": "{\"Lab scenario\": \"XSS via API client name in token manager\", \"Lab Description\": \"Admins can name API clients. These names appear next to tokens using innerHTML. Malicious input leads to stored XSS in the panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via chat bot trigger word display", "target": "{\"Lab scenario\": \"XSS via chat bot trigger word display\", \"Lab Description\": \"Custom trigger words for bots are shown in logs. These are rendered using innerHTML. A malicious trigger word results in XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via email subject line preview", "target": "{\"Lab scenario\": \"XSS via email subject line preview\", \"Lab Description\": \"The email preview interface displays the subject via innerHTML. A crafted subject line can result in reflected XSS when loaded from query parameters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: After importing CSV data, confirmation screen renders raw values via innerHTML. A crafted CSV cell value can trigger stored XSS.", "target": "{\"Lab scenario\": \"XSS via CSV import confirmation screen\", \"Lab Description\": \"After importing CSV data, confirmation screen renders raw values via innerHTML. A crafted CSV cell value can trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Developers can write changelogs. Entries are rendered via innerHTML in the version viewer. A malicious changelog causes persistent XSS.", "target": "{\"Lab scenario\": \"XSS via app update changelog entry\", \"Lab Description\": \"Developers can write changelogs. Entries are rendered via innerHTML in the version viewer. A malicious changelog causes persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via social media group description", "target": "{\"Lab scenario\": \"XSS via social media group description\", \"Lab Description\": \"Group creators can set descriptions. Descriptions are shown via innerHTML in group pages. A crafted description causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave suggestions via a floating widget. Suggestions appear in the admin panel using innerHTML. Unsanitized input triggers stored XSS.", "target": "{\"Lab scenario\": \"XSS via feedback widget suggestion field\", \"Lab Description\": \"Users can leave suggestions via a floating widget. Suggestions appear in the admin panel using innerHTML. Unsanitized input triggers stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave timestamp-tagged comments on videos. These timestamps are rendered using innerHTML. A malicious timestamp tag can trigger stored XSS.", "target": "{\"Lab scenario\": \"XSS via video comment timestamp tag\", \"Lab Description\": \"Users can leave timestamp-tagged comments on videos. These timestamps are rendered using innerHTML. A malicious timestamp tag can trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: IoT logs allow custom tags. These tags are reflected in logs using innerHTML. Malicious tags can trigger stored XSS in admin dashboards.", "target": "{\"Lab scenario\": \"XSS via IoT device debug log tag\", \"Lab Description\": \"IoT logs allow custom tags. These tags are reflected in logs using innerHTML. Malicious tags can trigger stored XSS in admin dashboards.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via qr code label in asset management system", "target": "{\"Lab scenario\": \"XSS via QR code label in asset management system\", \"Lab Description\": \"Labels assigned to assets are shown with the QR code using innerHTML. A malicious label can cause XSS on asset inspection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Live polls in stream chats allow user-submitted options. These are inserted via innerHTML. A crafted poll option causes stored XSS.", "target": "{\"Lab scenario\": \"XSS via live stream chat poll option text\", \"Lab Description\": \"Live polls in stream chats allow user-submitted options. These are inserted via innerHTML. A crafted poll option causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: DevOps users can write release notes. These are rendered in dashboards using innerHTML. Unsanitized notes trigger persistent XSS.", "target": "{\"Lab scenario\": \"XSS via release note entry in CI/CD tool\", \"Lab Description\": \"DevOps users can write release notes. These are rendered in dashboards using innerHTML. Unsanitized notes trigger persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via game character nickname field", "target": "{\"Lab scenario\": \"XSS via game character nickname field\", \"Lab Description\": \"Players can assign nicknames to characters. These names are shown in the scoreboard using innerHTML. A malicious nickname causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via virtual tour stop title", "target": "{\"Lab scenario\": \"XSS via virtual tour stop title\", \"Lab Description\": \"Admins can name virtual stops in a tour. Titles are rendered via innerHTML. Unsanitized input causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Prompt history is saved and rendered using innerHTML. A crafted prompt string can result in stored XSS when revisiting history.", "target": "{\"Lab scenario\": \"XSS via AI prompt history entry\", \"Lab Description\": \"Prompt history is saved and rendered using innerHTML. A crafted prompt string can result in stored XSS when revisiting history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via external service alias in integrations dashboard", "target": "{\"Lab scenario\": \"XSS via external service alias in integrations dashboard\", \"Lab Description\": \"Users can create aliases for external services. These aliases are rendered via innerHTML in the integrations panel. A malicious alias causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via user-created playlist folder name", "target": "{\"Lab scenario\": \"XSS via user-created playlist folder name\", \"Lab Description\": \"Users can group playlists into folders. Folder names are rendered via innerHTML. A crafted folder name causes XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can create calendar events with titles. These titles are rendered using innerHTML in event popups. A crafted title causes stored XSS.", "target": "{\"Lab scenario\": \"XSS via custom calendar event title\", \"Lab Description\": \"Users can create calendar events with titles. These titles are rendered using innerHTML in event popups. A crafted title causes stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via invoice recipient name in billing dashboard", "target": "{\"Lab scenario\": \"XSS via invoice recipient name in billing dashboard\", \"Lab Description\": \"Invoices include recipient names displayed using innerHTML. A crafted name can trigger XSS when viewing invoice history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via push notification preview content", "target": "{\"Lab scenario\": \"XSS via push notification preview content\", \"Lab Description\": \"Push notifications can be previewed before sending. The content is rendered using innerHTML. Malicious content triggers reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via voice assistant custom command name", "target": "{\"Lab scenario\": \"XSS via voice assistant custom command name\", \"Lab Description\": \"Users can define voice commands. These names are rendered using innerHTML in the web dashboard. A crafted command causes persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can add survey questions. Questions are rendered via innerHTML in response forms. A crafted question leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via survey question field in feedback system\", \"Lab Description\": \"Admins can add survey questions. Questions are rendered via innerHTML in response forms. A crafted question leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in feedback widget", "target": "{\"Lab scenario\": \"Stored XSS in Feedback Widget\", \"Lab Description\": \"The feedback widget stores user-submitted feedback and displays it for admin review. The text is injected into the DOM using innerHTML without escaping, allowing stored XSS.\\nTo solve: Submit a feedback entry with script code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in newsletter signup confirmation", "target": "{\"Lab scenario\": \"Reflected XSS in Newsletter Signup Confirmation\", \"Lab Description\": \"After a newsletter signup, the server reflects the name parameter in a confirmation message. This allows reflected XSS via the URL.\\nTo solve: Inject script in the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in Chat Preview", "target": "{\"Lab scenario\": \"DOM-based XSS in Chat Preview\", \"Lab Description\": \"A chat preview interface uses localStorage to show the last message in the DOM via innerHTML. A crafted value can execute code when the preview is loaded.\\nTo solve: Inject XSS via localStorage and refresh the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in blog post comments", "target": "{\"Lab scenario\": \"Stored XSS in Blog Post Comments\", \"Lab Description\": \"A blog page lets users comment on posts. Comments are stored in memory and rendered directly on the blog without sanitization, allowing stored XSS.\\nTo solve: Submit a comment containing a script and refresh the blog to see it execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in support ticket viewer", "target": "{\"Lab scenario\": \"Reflected XSS in Support Ticket Viewer\", \"Lab Description\": \"The support dashboard displays ticket previews by taking `title` and `desc` as query parameters. These are inserted into the DOM without escaping, allowing reflected XSS via the `desc` field.\\nTo solve: Inject a script in the desc parameter to trigger an alert on preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS via Drag-and-Drop Upload Preview", "target": "{\"Lab scenario\": \"DOM-based XSS via Drag-and-Drop Upload Preview\", \"Lab Description\": \"The dashboard includes a drag-and-drop file upload zone with preview text. The application sets the preview using `innerHTML` from the dragged file name without sanitization.\\nTo solve: Simulate a drag-drop event with a crafted filename triggering script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A web-based chatbot logs previous interactions and loads them from local storage using `innerHTML`. Messages are not encoded before rendering, allowing injection.\nTo solve: Inject a payload into localStorage and reload to trigger XSS.", "target": "{\"Lab scenario\": \"Stored XSS in ChatBot Interaction History\", \"Lab Description\": \"A web-based chatbot logs previous interactions and loads them from local storage using `innerHTML`. Messages are not encoded before rendering, allowing injection.\\nTo solve: Inject a payload into localStorage and reload to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Username in WebSocket Debug Echo", "target": "{\"Lab scenario\": \"Reflected XSS via Username in WebSocket Debug Echo\", \"Lab Description\": \"A debug tool sends WebSocket messages with a username in the query string. The page reflects the username using `document.write`, exposing it to XSS.\\nTo solve: Craft a URL with a payload in the `user` parameter that executes in real-time.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where stored xss in theme name for admin preview", "target": "{\"Lab scenario\": \"Stored XSS in Theme Name for Admin Preview\", \"Lab Description\": \"Admin panel allows creating custom UI themes. The theme name is stored and reflected without escaping in a preview panel using `innerHTML`.\\nTo solve: Inject a payload as a theme name, save it, and preview to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in url fragment-based loader", "target": "{\"Lab scenario\": \"DOM-based XSS in URL Fragment-based Loader\", \"Lab Description\": \"A documentation site loads pages based on the URL fragment and injects it into the DOM using `innerHTML`. No validation is done on the hash, enabling XSS.\\nTo solve: Craft a URL with a malicious hash and observe DOM execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via Search Suggestion Parameter", "target": "{\"Lab scenario\": \"Reflected XSS via Search Suggestion Parameter\", \"Lab Description\": \"The search page accepts a `suggest` parameter that is reflected directly into a live suggestion box using `innerHTML`. There is no sanitization, and script injection is possible.\\nTo solve: Inject a payload via the suggest parameter and trigger execution in the suggestion box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: stored xss in comment system avatar field", "target": "{\"Lab scenario\": \"Stored XSS in Comment System Avatar Field\", \"Lab Description\": \"Users can leave comments with a custom avatar URL. The server stores the avatar field and renders it in an <img> tag without validation.\\nTo solve: Submit a comment with an avatar containing a malicious payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom xss via dynamic faq loader", "target": "{\"Lab scenario\": \"DOM XSS via Dynamic FAQ Loader\", \"Lab Description\": \"The FAQ page loads answers based on the question ID from the URL and inserts content using `innerHTML`. It trusts hash fragments and does not sanitize them.\\nTo solve: Inject a payload into the fragment and observe script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where reflected xss in email invitation link", "target": "{\"Lab scenario\": \"Reflected XSS in Email Invitation Link\", \"Lab Description\": \"A collaboration tool sends invitation links with a `ref` parameter that gets rendered on the join page using `document.write`. There’s no escaping.\\nTo solve: Craft a malicious `ref` that executes JavaScript when opened.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An image gallery allows uploading a picture with a title. The title is rendered with `innerHTML` and stored without sanitization, allowing persistent XSS.\nTo solve: Upload an image with a malicious title payload.", "target": "{\"Lab scenario\": \"Stored XSS in Image Gallery Title Field\", \"Lab Description\": \"An image gallery allows uploading a picture with a title. The title is rendered with `innerHTML` and stored without sanitization, allowing persistent XSS.\\nTo solve: Upload an image with a malicious title payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via mathml inside svg", "target": "{\"Lab scenario\": \"XSS via MathML inside SVG\", \"Lab Description\": \"The app allows users to upload and preview SVG content. When MathML is embedded within the SVG and improperly sanitized, script execution becomes possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via jsonp callback reflection", "target": "{\"Lab scenario\": \"XSS via JSONP callback reflection\", \"Lab Description\": \"The app provides JSONP API for legacy support. The callback parameter is not sanitized, allowing injection of arbitrary scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via base64 decoded input injection", "target": "{\"Lab scenario\": \"XSS via base64 decoded input injection\", \"Lab Description\": \"User input is expected to be base64 encoded. App decodes it and renders it directly without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app generates email previews using user input for testing. Email body is inserted directly into the preview with no output encoding.", "target": "{\"Lab scenario\": \"XSS via email template injection\", \"Lab Description\": \"The app generates email previews using user input for testing. Email body is inserted directly into the preview with no output encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a high Cross-site scripting lab for: xss via pdf annotation preview", "target": "{\"Lab scenario\": \"XSS via PDF annotation preview\", \"Lab Description\": \"The app previews PDF annotation content in HTML. Malicious input in annotation text gets rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via JavaScript URI in dynamically created script tag", "target": "{\"Lab scenario\": \"XSS via JavaScript URI in dynamically created script tag\", \"Lab Description\": \"The application allows users to submit URLs that are later injected into dynamically created script tags. JavaScript URIs are not filtered, allowing for immediate execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in real-time log console via WebSocket echo", "target": "{\"Lab scenario\": \"XSS in real-time log console via WebSocket echo\", \"Lab Description\": \"Admin panel shows logs via WebSocket. Logs reflect user actions in real-time. Injecting a script into the action message causes script execution on admin’s panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via open redirect preview page", "target": "{\"Lab scenario\": \"XSS via open redirect preview page\", \"Lab Description\": \"User can preview a redirect destination. The redirect URL is rendered in a sandboxed iframe. Improper escaping in `srcdoc` leads to JS execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via `<object>` tag with data attribute", "target": "{\"Lab scenario\": \"XSS via `<object>` tag with data attribute\", \"Lab Description\": \"App uses `<object>` tags to display user-provided content from the `data` attribute. Improper validation of data leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app renders user comments using innerHTML, but accepts malformed tags. Browsers correct the tag structure, allowing execution of orphaned scripts.", "target": "{\"Lab scenario\": \"XSS via malformed comment rendering\", \"Lab Description\": \"The app renders user comments using innerHTML, but accepts malformed tags. Browsers correct the tag structure, allowing execution of orphaned scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Low\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via CSS `attr()` Injection", "target": "{\"Lab scenario\": \"XSS via CSS `attr()` Injection\", \"Lab Description\": \"The application reflects user input in a custom attribute used in CSS `content: attr(...)`, leading to script execution via `expression()` in legacy browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss through `svg` foreignobject execution", "target": "{\"Lab scenario\": \"XSS through `svg` ForeignObject Execution\", \"Lab Description\": \"App renders user input inside an `<svg>` tag. Malicious `<foreignObject>` embedded allows HTML + JS inside SVG context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss inside event handler json-to-html rendering", "target": "{\"Lab scenario\": \"XSS inside Event Handler JSON-to-HTML Rendering\", \"Lab Description\": \"Application parses user-submitted JSON and injects values into event handler attributes (`onclick`, etc.), allowing code injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in `srcdoc` Attribute of iframe", "target": "{\"Lab scenario\": \"XSS in `srcdoc` Attribute of iframe\", \"Lab Description\": \"App allows user input inside iframe `srcdoc`, which is directly rendered as inline HTML and JS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via `details` and `summary` Expansion", "target": "{\"Lab scenario\": \"XSS via `details` and `summary` Expansion\", \"Lab Description\": \"User input rendered inside a `details` block gets interpreted as full HTML, including executable scripts or event handlers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Low\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via misused `meta` refresh tag", "target": "{\"Lab scenario\": \"XSS via Misused `meta` Refresh Tag\", \"Lab Description\": \"Application allows user input inside a meta refresh tag, enabling injection of JavaScript via `URL` attribute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss through data uri in iframe source", "target": "{\"Lab scenario\": \"XSS through Data URI in iframe Source\", \"Lab Description\": \"User input is embedded directly into an iframe `src`, allowing crafted `data:text/html` URIs with embedded scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in `<math>` tag with malicious `href`", "target": "{\"Lab scenario\": \"XSS in `<math>` Tag with Malicious `href`\", \"Lab Description\": \"The app allows mathML rendering but doesn’t sanitize attributes. Injecting an `href` with `javascript:` scheme executes code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via Object `data` Attribute", "target": "{\"Lab scenario\": \"XSS via Object `data` Attribute\", \"Lab Description\": \"User input is embedded into an `<object>` tag’s `data` attribute, allowing attacker to inject `data:` URLs with malicious HTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: App includes a `<template>` element and clones its content via JS. Injected script inside template gets executed after cloning.", "target": "{\"Lab scenario\": \"XSS inside `template` Element via DOM Cloning\", \"Lab Description\": \"App includes a `<template>` element and clones its content via JS. Injected script inside template gets executed after cloning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via CSS Expression in Legacy Quirks Mode", "target": "{\"Lab scenario\": \"XSS via CSS Expression in Legacy Quirks Mode\", \"Lab Description\": \"A legacy page renders in quirks mode and allows inline styles. Internet Explorer interprets CSS expressions as JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss in svg <animate> element injection", "target": "{\"Lab scenario\": \"XSS in SVG <animate> Element Injection\", \"Lab Description\": \"User-submitted SVG is embedded without sanitization. The attacker abuses <animate> and other SVG elements to trigger JavaScript execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in URL Path via 404 Handler", "target": "{\"Lab scenario\": \"Reflected XSS in URL Path via 404 Handler\", \"Lab Description\": \"The 404 error handler reflects the requested URL back to the page. By crafting the URL with script tags, the attacker injects code into the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The app uses custom elements but doesn't filter content before setting innerHTML. Even without event attributes, inserting <script> can trigger parsing.", "target": "{\"Lab scenario\": \"Mutation XSS in innerHTML with Event-less Custom Elements\", \"Lab Description\": \"The app uses custom elements but doesn't filter content before setting innerHTML. Even without event attributes, inserting <script> can trigger parsing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in JSONP Callback Parameter", "target": "{\"Lab scenario\": \"XSS in JSONP Callback Parameter\", \"Lab Description\": \"The API provides JSONP support with a callback parameter. An attacker injects a malicious callback function to execute arbitrary JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via javascript url in clickable breadcrumb", "target": "{\"Lab scenario\": \"XSS via JavaScript URL in clickable breadcrumb\", \"Lab Description\": \"The breadcrumb component builds navigation paths using query parameters and sets them in anchor `href` attributes. Supplying a `javascript:` link causes execution on click.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via clipboard injection in paste event", "target": "{\"Lab scenario\": \"XSS via clipboard injection in paste event\", \"Lab Description\": \"The web app handles `paste` events and directly injects clipboard content into the DOM using innerHTML. If an attacker copies malicious HTML, pasting triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS in tag suggestions dropdown", "target": "{\"Lab scenario\": \"XSS in tag suggestions dropdown\", \"Lab Description\": \"User-created tags are stored and rendered in a tag suggestions dropdown using innerHTML. A malicious tag name leads to XSS when suggestions are shown.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via SVG title tooltip injection", "target": "{\"Lab scenario\": \"XSS via SVG title tooltip injection\", \"Lab Description\": \"User-submitted content appears in the `<title>` element of inline SVG. Some browsers render this as tooltips, and malformed SVG titles can trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via username in audio transcript captions", "target": "{\"Lab scenario\": \"XSS via username in audio transcript captions\", \"Lab Description\": \"The app generates captions for audio recordings. Usernames are shown in speaker labels inside the transcript, inserted via innerHTML. Injected scripts run in the captions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application receives postMessage events from an iframe and injects the message into the DOM without validation. An attacker can craft a malicious iframe that sends a script payload via postMessage.", "target": "{\"Lab scenario\": \"XSS via postMessage Reflection in Parent Window\", \"Lab Description\": \"The application receives postMessage events from an iframe and injects the message into the DOM without validation. An attacker can craft a malicious iframe that sends a script payload via postMessage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via template tag cloning in shadow dom", "target": "{\"Lab scenario\": \"XSS via template tag cloning in shadow DOM\", \"Lab Description\": \"The app uses a `<template>` tag within a shadow DOM to dynamically clone and inject HTML. Injected HTML inside the template escapes default sanitizers and executes upon cloning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The app attempts to render user HTML input, and on failure falls back to innerText. However, if the original input remains in the DOM, some browsers may parse and execute delayed scripts.", "target": "{\"Lab scenario\": \"XSS via innerText fallback after failed rendering\", \"Lab Description\": \"The app attempts to render user HTML input, and on failure falls back to innerText. However, if the original input remains in the DOM, some browsers may parse and execute delayed scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via localization translation key injection", "target": "{\"Lab scenario\": \"XSS via localization translation key injection\", \"Lab Description\": \"The app supports multilingual labels stored in a key-value object. If a user can manipulate keys, injecting HTML in a translation value leads to XSS when rendered via innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via `onanimationstart` in CSS keyframes", "target": "{\"Lab scenario\": \"XSS via `onanimationstart` in CSS keyframes\", \"Lab Description\": \"Some browsers allow triggering JS via `onanimationstart` events in HTML tags. If an element uses an animation with JS in event handler, XSS is possible.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application includes a public message board with a content-editable area for writing. When malicious HTML is copied and pasted, it executes instantly because the app trusts clipboard HTML and injects it using `insertAdjacentHTML`.", "target": "{\"Lab scenario\": \"XSS via clipboard hijack on content-editable element\", \"Lab Description\": \"The application includes a public message board with a content-editable area for writing. When malicious HTML is copied and pasted, it executes instantly because the app trusts clipboard HTML and injects it using `insertAdjacentHTML`.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss in csv export rendered as html preview", "target": "{\"Lab scenario\": \"XSS in CSV export rendered as HTML preview\", \"Lab Description\": \"The web application offers a CSV preview feature before download. Malicious cells with formula-like payloads are rendered using `innerHTML`, allowing execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss through malformed image alt attribute in cms", "target": "{\"Lab scenario\": \"XSS through malformed image alt attribute in CMS\", \"Lab Description\": \"The CMS allows editors to insert images with custom `alt` text. If the `alt` text contains malformed attributes or tags, it's rendered inside an image preview tooltip, which is injected with innerHTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via `aria-label` reflection in accessibility component", "target": "{\"Lab scenario\": \"XSS via `aria-label` reflection in accessibility component\", \"Lab Description\": \"The site supports screen readers with `aria-label` attributes on buttons and links. User-controlled values are inserted without escaping, allowing JS injection inside the DOM structure.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via css variable injection inside style tag", "target": "{\"Lab scenario\": \"XSS via CSS variable injection inside style tag\", \"Lab Description\": \"Users can define CSS variables (e.g., for themes), but values are interpolated directly into a `<style>` tag, allowing for JS injection in some browsers via `url(javascript:...)`.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via dynamic script injection in error stack trace viewer", "target": "{\"Lab scenario\": \"XSS via dynamic script injection in error stack trace viewer\", \"Lab Description\": \"The application displays backend error stack traces for debugging. User input is sometimes logged and reflected in the error message, which is rendered with innerHTML for styling. An attacker can trigger an error with a crafted payload that executes in the trace viewer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Markdown input is rendered to HTML using a parser that does not escape special characters in image `alt` attributes. A payload in the alt text leads to DOM injection.", "target": "{\"Lab scenario\": \"XSS via Markdown image alt injection in preview pane\", \"Lab Description\": \"Markdown input is rendered to HTML using a parser that does not escape special characters in image `alt` attributes. A payload in the alt text leads to DOM injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Keyboard shortcuts are rendered from user-defined actions. The key description is inserted into tooltip HTML using innerHTML, leading to XSS when hovering.", "target": "{\"Lab scenario\": \"XSS via keyboard shortcut tooltip injection\", \"Lab Description\": \"Keyboard shortcuts are rendered from user-defined actions. The key description is inserted into tooltip HTML using innerHTML, leading to XSS when hovering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via video player subtitle track injection", "target": "{\"Lab scenario\": \"XSS via video player subtitle track injection\", \"Lab Description\": \"The platform allows uploading subtitle (VTT) tracks that are rendered as HTML in a caption viewer. Malicious captions can contain script tags or on-event attributes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application lazy-loads components by injecting script and HTML fragments based on user input. A payload in the load path is inserted into an `img` tag as `src`, allowing `onerror` to execute.", "target": "{\"Lab scenario\": \"XSS via dynamic `onload` injection in lazy-loaded components\", \"Lab Description\": \"The application lazy-loads components by injecting script and HTML fragments based on user input. A payload in the load path is inserted into an `img` tag as `src`, allowing `onerror` to execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via QR Code data reflection in preview screen", "target": "{\"Lab scenario\": \"XSS via QR Code data reflection in preview screen\", \"Lab Description\": \"The application allows users to generate QR codes and preview the data embedded inside. The raw data is reflected in the preview window using innerHTML without escaping. If the data contains HTML, it will be executed in the browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via voice assistant command transcript display", "target": "{\"Lab scenario\": \"XSS via voice assistant command transcript display\", \"Lab Description\": \"The application includes a voice command recognition system that transcribes spoken input and displays it on the interface. If an attacker controls the input (e.g., via audio injection), the transcript can include executable HTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via image gallery caption rendering", "target": "{\"Lab scenario\": \"XSS via image gallery caption rendering\", \"Lab Description\": \"Users can upload images and add captions. The captions are rendered using innerHTML below the images. If a caption contains a script or event handler, it will be executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The web-based CLI interface reflects command results using innerHTML. If a command returns crafted HTML, it gets executed in the terminal output.", "target": "{\"Lab scenario\": \"XSS via terminal output rendering in web-based CLI\", \"Lab Description\": \"The web-based CLI interface reflects command results using innerHTML. If a command returns crafted HTML, it gets executed in the terminal output.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via chat bot training phrase injection", "target": "{\"Lab scenario\": \"XSS via chat bot training phrase injection\", \"Lab Description\": \"The app allows users to submit new training phrases for a chat bot. These phrases are listed in the UI for review, and are rendered via innerHTML. A malicious phrase can execute script code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via toast notification rendering", "target": "{\"Lab scenario\": \"XSS via toast notification rendering\", \"Lab Description\": \"The application uses custom toast notifications to show user feedback messages. These messages are rendered using innerHTML. If attacker input is reflected in the message, arbitrary HTML can be injected and executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The calendar app displays event titles in hover tooltips. These titles are user-controlled and inserted into the DOM without sanitization. JavaScript can be injected via the title.", "target": "{\"Lab scenario\": \"XSS via calendar event title injection\", \"Lab Description\": \"The calendar app displays event titles in hover tooltips. These titles are user-controlled and inserted into the DOM without sanitization. JavaScript can be injected via the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via file rename form field", "target": "{\"Lab scenario\": \"XSS via file rename form field\", \"Lab Description\": \"The file manager allows renaming files via a form. The new name is displayed as a label using innerHTML. Malicious input as filename can inject HTML or script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via chat emoji replacement feature", "target": "{\"Lab scenario\": \"XSS via chat emoji replacement feature\", \"Lab Description\": \"The chat system replaces emoji shortcodes (e.g., :smile:) with images using innerHTML. If an attacker injects a pseudo-emoji string that contains HTML, it is directly parsed and executed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via html5 draggable attribute content", "target": "{\"Lab scenario\": \"XSS via HTML5 draggable attribute content\", \"Lab Description\": \"The application allows creating draggable items with custom labels. Labels are rendered using innerHTML. An attacker can inject script via a draggable item.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via dynamic favicon generator", "target": "{\"Lab scenario\": \"XSS via dynamic favicon generator\", \"Lab Description\": \"The application lets users generate custom favicon previews from submitted SVG code. The SVG is directly rendered as a favicon and also previewed in a full-size viewer using innerHTML, making it vulnerable to script injection via SVG tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The 3D viewer app allows users to add annotations to models. These annotations are shown as tooltips rendered using innerHTML. Malicious input leads to XSS when hovering over annotation points.", "target": "{\"Lab scenario\": \"XSS via 3D model annotation tooltips\", \"Lab Description\": \"The 3D viewer app allows users to add annotations to models. These annotations are shown as tooltips rendered using innerHTML. Malicious input leads to XSS when hovering over annotation points.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via music playlist name rendering", "target": "{\"Lab scenario\": \"XSS via music playlist name rendering\", \"Lab Description\": \"The music app allows users to create custom playlist names. These names are rendered in the DOM using innerHTML when displaying playlists. A malicious name results in script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via real-time poll voting labels", "target": "{\"Lab scenario\": \"XSS via real-time poll voting labels\", \"Lab Description\": \"The poll app displays live results and includes user-submitted vote labels. These are rendered using innerHTML, and malicious labels can trigger XSS when displayed in the poll chart.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app allows switching between multiple languages. If a language label is attacker-controlled and reflected directly in a dropdown using innerHTML, it leads to XSS.", "target": "{\"Lab scenario\": \"XSS via language switcher label reflection\", \"Lab Description\": \"The app allows switching between multiple languages. If a language label is attacker-controlled and reflected directly in a dropdown using innerHTML, it leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via user-generated page title injection", "target": "{\"Lab scenario\": \"XSS via user-generated page title injection\", \"Lab Description\": \"The app allows users to set custom titles for pages they create. These titles are inserted into the `<title>` tag of the HTML document without sanitization, enabling XSS through script injection in the title context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via user-submitted avatar preview filename", "target": "{\"Lab scenario\": \"XSS via user-submitted avatar preview filename\", \"Lab Description\": \"Users can upload avatar images and preview them. The preview includes the uploaded file name as a caption. If the file name contains script, and is rendered without escaping, it triggers XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via iframe sandbox escape with malformed srcdoc", "target": "{\"Lab scenario\": \"XSS via iframe sandbox escape with malformed srcdoc\", \"Lab Description\": \"The app loads user input into an iframe using the `srcdoc` attribute. When the input contains malformed tags or escaping characters, browsers may incorrectly parse and execute embedded scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via search autocomplete history rendering", "target": "{\"Lab scenario\": \"XSS via search autocomplete history rendering\", \"Lab Description\": \"The app stores user search terms and displays them as autocomplete suggestions in a dropdown. If search history includes injected HTML, it is rendered via innerHTML in the suggestion box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via embedded comment in html rendering", "target": "{\"Lab scenario\": \"XSS via embedded comment in HTML rendering\", \"Lab Description\": \"The app displays article comments and allows HTML-like formatting. It uses innerHTML to render comments. An attacker can inject malformed comments with script inside a fake HTML comment, which may be parsed and executed in certain browsers or contexts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via dynamic meta tag content injection", "target": "{\"Lab scenario\": \"XSS via dynamic meta tag content injection\", \"Lab Description\": \"The application sets meta tags dynamically based on user input, such as `<meta name='description'>`. The content attribute is directly populated from unescaped input, which allows for injection inside the HTML head.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app previews file names in a table using innerHTML. Maliciously crafted filenames with script or malformed tags get executed when previewed.", "target": "{\"Lab scenario\": \"XSS via file preview in filename-based viewer\", \"Lab Description\": \"The app previews file names in a table using innerHTML. Maliciously crafted filenames with script or malformed tags get executed when previewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via browser notification content injection", "target": "{\"Lab scenario\": \"XSS via browser notification content injection\", \"Lab Description\": \"The app generates browser notifications based on user actions. Notification body content is passed via user input and used directly without sanitization, enabling payload injection that can trigger via the Notification API.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via modal dialog dynamic content", "target": "{\"Lab scenario\": \"XSS via modal dialog dynamic content\", \"Lab Description\": \"The application opens modal dialogs with content fetched from user-controlled sources. This content is injected into the modal body using innerHTML, allowing for script execution if malicious HTML is provided.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app provides printable reports and allows users to insert text blocks. These are rendered in a print preview window using innerHTML. Injected HTML leads to XSS on load or print.", "target": "{\"Lab scenario\": \"XSS via print preview injection in report builder\", \"Lab Description\": \"The app provides printable reports and allows users to insert text blocks. These are rendered in a print preview window using innerHTML. Injected HTML leads to XSS on load or print.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic breadcrumb trail rendering", "target": "{\"Lab scenario\": \"XSS via dynamic breadcrumb trail rendering\", \"Lab Description\": \"The application constructs breadcrumb navigation based on the current path or user input. The labels are rendered using innerHTML without proper sanitization, allowing script injection through crafted breadcrumb segments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via survey builder preview text", "target": "{\"Lab scenario\": \"XSS via survey builder preview text\", \"Lab Description\": \"The app allows users to build surveys with custom questions and preview them. The question text is rendered using innerHTML, allowing an attacker to inject script in a question label.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via system log viewer with user input reflection", "target": "{\"Lab scenario\": \"XSS via system log viewer with user input reflection\", \"Lab Description\": \"The log viewer displays server logs that include some user input (e.g., usernames, actions). If the log output is rendered using innerHTML without sanitization, attackers can inject malicious HTML into logs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app generates a tag cloud based on user-defined tags for images. The tags are inserted directly into the DOM using innerHTML, leading to XSS when a tag contains executable HTML.", "target": "{\"Lab scenario\": \"XSS via photo album tag cloud rendering\", \"Lab Description\": \"The app generates a tag cloud based on user-defined tags for images. The tags are inserted directly into the DOM using innerHTML, leading to XSS when a tag contains executable HTML.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: Users can set a custom status on their profile. This value is displayed as a badge using innerHTML. If the input is not sanitized, it enables arbitrary HTML injection.", "target": "{\"Lab scenario\": \"XSS via dynamic status badge on profile\", \"Lab Description\": \"Users can set a custom status on their profile. This value is displayed as a badge using innerHTML. If the input is not sanitized, it enables arbitrary HTML injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via live preview of social media post", "target": "{\"Lab scenario\": \"XSS via live preview of social media post\", \"Lab Description\": \"The app allows users to draft social media posts and preview them before publishing. The preview panel renders the post using innerHTML. If the input contains HTML or scripts, it executes in the preview pane.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via status message in real-time activity feed", "target": "{\"Lab scenario\": \"XSS via status message in real-time activity feed\", \"Lab Description\": \"User status updates are broadcast to a real-time feed using WebSocket. Messages are injected into the feed container via innerHTML. A crafted message can include HTML that executes instantly.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via theme color name in CSS injection", "target": "{\"Lab scenario\": \"XSS via theme color name in CSS injection\", \"Lab Description\": \"Users can define theme settings including color names. These names are injected into a `<style>` tag for live theming. Malicious names can break out of CSS and inject HTML or JS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via forum quote reply injection", "target": "{\"Lab scenario\": \"XSS via forum quote reply injection\", \"Lab Description\": \"In the forum, replying to a post quotes the original message. The quote content is copied and rendered with innerHTML. If the original contains a payload, the reply will include executable code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The platform supports embedding widgets via iframe or script snippet. The widget accepts parameters via query string. If these values are reflected in the widget HTML, XSS can occur.", "target": "{\"Lab scenario\": \"XSS via embedded widget parameter injection\", \"Lab Description\": \"The platform supports embedding widgets via iframe or script snippet. The widget accepts parameters via query string. If these values are reflected in the widget HTML, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via notification sound name in audio tag", "target": "{\"Lab scenario\": \"XSS via notification sound name in audio tag\", \"Lab Description\": \"The app allows users to customize their notification sound by selecting a named sound file. The selected name is inserted into an `<audio>` tag’s `src` attribute using innerHTML. A malicious name can break out of the attribute and inject script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via tooltip for user reaction emoji", "target": "{\"Lab scenario\": \"XSS via tooltip for user reaction emoji\", \"Lab Description\": \"The app shows emoji reactions with user tooltips. When hovering over a reaction, a tooltip displays the user’s name. If names are rendered using innerHTML, XSS can be triggered via a malicious username.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app allows users to set a custom email signature. The signature is rendered as-is in the compose window using innerHTML. A malicious payload in the signature leads to XSS.", "target": "{\"Lab scenario\": \"XSS via email signature HTML rendering\", \"Lab Description\": \"The app allows users to set a custom email signature. The signature is rendered as-is in the compose window using innerHTML. A malicious payload in the signature leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app auto-saves drafts from a rich text editor and previews the last saved content using innerHTML. If an attacker injects a payload, it executes when the preview is shown.", "target": "{\"Lab scenario\": \"XSS via rich text editor auto-save preview\", \"Lab Description\": \"The app auto-saves drafts from a rich text editor and previews the last saved content using innerHTML. If an attacker injects a payload, it executes when the preview is shown.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The login page displays an error message when authentication fails. If the username is reflected in the error using innerHTML, an attacker can inject a payload to be executed after failed login.", "target": "{\"Lab scenario\": \"XSS via failed login error message\", \"Lab Description\": \"The login page displays an error message when authentication fails. If the username is reflected in the error using innerHTML, an attacker can inject a payload to be executed after failed login.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: xss via feedback form confirmation message", "target": "{\"Lab scenario\": \"XSS via feedback form confirmation message\", \"Lab Description\": \"The feedback form displays a confirmation message after submission that includes the user’s name. The name is rendered using innerHTML without sanitization, allowing XSS via crafted input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application renders progress bars with custom labels provided by users. These labels are injected into innerHTML of progress components. A malicious label leads to XSS.", "target": "{\"Lab scenario\": \"XSS via custom label in dynamic progress bar\", \"Lab Description\": \"The application renders progress bars with custom labels provided by users. These labels are injected into innerHTML of progress components. A malicious label leads to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The image gallery shows the `alt` text of images in a lightbox preview. If the `alt` attribute is set by the user and rendered using innerHTML, it enables XSS.", "target": "{\"Lab scenario\": \"XSS via image alt-text in gallery lightbox viewer\", \"Lab Description\": \"The image gallery shows the `alt` text of images in a lightbox preview. If the `alt` attribute is set by the user and rendered using innerHTML, it enables XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via url shortening preview page", "target": "{\"Lab scenario\": \"XSS via URL shortening preview page\", \"Lab Description\": \"The app generates previews for shortened URLs by displaying the destination page title. If the destination includes attacker-controlled HTML in its title, it can be injected into the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via custom dashboard widget title", "target": "{\"Lab scenario\": \"XSS via custom dashboard widget title\", \"Lab Description\": \"Users can add widgets to a customizable dashboard and set titles for them. These titles are rendered in cards using innerHTML. If malicious content is set as title, it leads to XSS on render.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via dynamic breadcrumb JSON injection in SPA routing", "target": "{\"Lab scenario\": \"XSS via dynamic breadcrumb JSON injection in SPA routing\", \"Lab Description\": \"The app uses client-side JavaScript to generate breadcrumb navigation from a JSON structure passed via query parameters. The values are inserted into the DOM using innerHTML. If attackers inject script via breadcrumb labels, it results in DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via chart label injection in analytics dashboard", "target": "{\"Lab scenario\": \"XSS via chart label injection in analytics dashboard\", \"Lab Description\": \"The dashboard allows users to label chart segments (like pie slices). Labels are rendered in the legend via innerHTML. If a label contains HTML, it gets executed when the chart renders.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via newsletter topic selection preview", "target": "{\"Lab scenario\": \"XSS via newsletter topic selection preview\", \"Lab Description\": \"Users can choose newsletter topics and preview their newsletter. Topic names are displayed using innerHTML. Injected topic names result in XSS inside the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via browser tab title injection from form field", "target": "{\"Lab scenario\": \"XSS via browser tab title injection from form field\", \"Lab Description\": \"The site allows setting a custom browser tab title using input from a form. The title is inserted using `document.title = ...`, and if the value contains HTML with closing tags, script can escape and execute.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via form autofill memory viewer", "target": "{\"Lab scenario\": \"XSS via form autofill memory viewer\", \"Lab Description\": \"The app allows users to see recently submitted values for form inputs as suggestions. These values are rendered via innerHTML inside a dropdown. If user input is stored unsanitized, XSS can occur.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application displays a podcast playlist with user-defined episode titles. Titles are rendered using innerHTML in a list. A malicious title can inject and execute scripts when the list is loaded.", "target": "{\"Lab scenario\": \"XSS via podcast episode title in media playlist\", \"Lab Description\": \"The application displays a podcast playlist with user-defined episode titles. Titles are rendered using innerHTML in a list. A malicious title can inject and execute scripts when the list is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Admins can set a global notification banner that appears on every page. The message is stored and injected into a top banner using innerHTML. Malicious content leads to stored XSS.", "target": "{\"Lab scenario\": \"XSS via custom notification banner text\", \"Lab Description\": \"Admins can set a global notification banner that appears on every page. The message is stored and injected into a top banner using innerHTML. Malicious content leads to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Users can leave custom notes per item in their cart. These notes are rendered inside the cart summary using innerHTML. A malicious note can trigger script execution.", "target": "{\"Lab scenario\": \"XSS via shopping cart item customization note\", \"Lab Description\": \"Users can leave custom notes per item in their cart. These notes are rendered inside the cart summary using innerHTML. A malicious note can trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: xss via video player caption editor", "target": "{\"Lab scenario\": \"XSS via video player caption editor\", \"Lab Description\": \"Users can upload or edit captions for videos. These captions are rendered under the video using innerHTML. A caption line with HTML triggers script execution when played or displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where xss via project milestone label in timeline", "target": "{\"Lab scenario\": \"XSS via project milestone label in timeline\", \"Lab Description\": \"The project management interface allows naming milestones. The names appear in a visual timeline using innerHTML. A malicious name results in DOM-based XSS when the timeline loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: cms stored xss in blog post title rendering", "target": "{\"Lab scenario\": \"CMS Stored XSS in blog post title rendering\", \"Lab Description\": \"This lab simulates a CMS where blog post titles are stored and displayed without sanitization. The application displays the post title directly in the HTML document title tag. To solve: Inject a JavaScript payload that executes when any user opens the blog post.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: api gateway dom-based xss in error message handling", "target": "{\"Lab scenario\": \"API gateway DOM-based XSS in error message handling\", \"Lab Description\": \"This lab simulates a DOM-based XSS vulnerability in an API gateway's debug interface. Client-side JavaScript updates error messages dynamically using `innerHTML`. To solve: Exploit an error endpoint to inject a DOM-based XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab mimics an IoT dashboard where widgets can be renamed inline. The application uses a mutation observer to react to DOM changes but fails to sanitize new content. To solve: Inject malicious content that gets executed when the dashboard mutates the DOM.", "target": "{\"Lab scenario\": \"IoT dashboard Mutation-based XSS via dynamic widget rename\", \"Lab Description\": \"This lab mimics an IoT dashboard where widgets can be renamed inline. The application uses a mutation observer to react to DOM changes but fails to sanitize new content. To solve: Inject malicious content that gets executed when the dashboard mutates the DOM.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where banking portal reflected xss in http error page", "target": "{\"Lab scenario\": \"Banking portal Reflected XSS in HTTP error page\", \"Lab Description\": \"This lab exposes a reflected XSS flaw in the 404 error page of a banking portal. The URL path is reflected into the error template without encoding. To solve: Inject a JavaScript payload in the URL that causes a popup when visiting a broken link.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: cms dom-based xss via live preview panel", "target": "{\"Lab scenario\": \"CMS DOM-based XSS via live preview panel\", \"Lab Description\": \"This lab simulates a WYSIWYG editor in a CMS where user content is shown in a live preview using `innerHTML`. The editor does not strip script tags before rendering. To solve: Inject a script that executes inside the live preview panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab mimics a hospital portal where doctors can save notes on patients. These notes are rendered in the admin dashboard without sanitization. The application stores the note input directly and renders it as HTML. To solve: Inject a script in the patient notes to trigger when an admin reviews them.", "target": "{\"Lab scenario\": \"Healthcare portal Stored XSS in patient notes\", \"Lab Description\": \"This lab mimics a hospital portal where doctors can save notes on patients. These notes are rendered in the admin dashboard without sanitization. The application stores the note input directly and renders it as HTML. To solve: Inject a script in the patient notes to trigger when an admin reviews them.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: E-learning platform DOM-based XSS in quiz result summary", "target": "{\"Lab scenario\": \"E-learning platform DOM-based XSS in quiz result summary\", \"Lab Description\": \"This lab features a DOM-based XSS vulnerability where quiz scores are reflected on the result page without escaping. The application uses location.hash to read and write data via innerHTML. To solve: Inject a malicious script in the fragment that executes in the DOM context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where online forum reflected xss in topic preview tooltip", "target": "{\"Lab scenario\": \"Online forum Reflected XSS in topic preview tooltip\", \"Lab Description\": \"This lab simulates a forum where hovering over a topic shows a preview using query parameters. The content is not sanitized before insertion into an HTML attribute, leading to reflected XSS. To solve: Inject payload via URL to trigger alert on hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Admin panel Stored XSS in system notification editor", "target": "{\"Lab scenario\": \"Admin panel Stored XSS in system notification editor\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in a system where admins post internal notifications to all users. The input is saved and directly rendered on user dashboards. To solve: Inject a payload as an admin that triggers a script when a user logs in.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: IoT smart home DOM-based XSS in log viewer tab", "target": "{\"Lab scenario\": \"IoT smart home DOM-based XSS in log viewer tab\", \"Lab Description\": \"This lab simulates a smart home dashboard that shows device logs. Logs are appended to the DOM using `innerHTML` from localStorage, allowing injection. To solve: Inject a payload into localStorage and reload the page to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where job portal stored xss in resume upload notes", "target": "{\"Lab scenario\": \"Job portal Stored XSS in resume upload notes\", \"Lab Description\": \"The application allows job seekers to upload resumes with optional notes. These notes are displayed to employers reviewing applications. However, the notes field is stored and rendered without sanitization. To solve: Inject a malicious script into the notes field to execute when the employer views it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app generates HTML <img> tags from user-provided image URLs and returns them in a preview. The input is not properly sanitized, and special characters can break out of the tag context. To solve: Inject JavaScript into the image URL parameter and force execution.", "target": "{\"Lab scenario\": \"Social media app Reflected XSS in image tag generator\", \"Lab Description\": \"The app generates HTML <img> tags from user-provided image URLs and returns them in a preview. The input is not properly sanitized, and special characters can break out of the tag context. To solve: Inject JavaScript into the image URL parameter and force execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: customer support platform stored xss in ticket subject field", "target": "{\"Lab scenario\": \"Customer support platform Stored XSS in ticket subject field\", \"Lab Description\": \"A support ticketing system logs user-submitted issues. The subject of the ticket is directly rendered in the admin panel without escaping, resulting in a stored XSS risk. To solve: Inject a script in the subject field to trigger on admin view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: API documentation tool DOM-based XSS via hash injection", "target": "{\"Lab scenario\": \"API documentation tool DOM-based XSS via hash injection\", \"Lab Description\": \"A JavaScript-powered API doc site uses the URL fragment to display endpoint-specific documentation. The fragment is parsed and inserted into a div via innerHTML. This allows DOM-based XSS when a malicious hash value is used. To solve: Inject a payload into the hash and reload to trigger the XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: CMS Mutation-based XSS via JavaScript content injection", "target": "{\"Lab scenario\": \"CMS Mutation-based XSS via JavaScript content injection\", \"Lab Description\": \"A custom CMS allows inline content editing and uses DOM mutation observers to re-parse user input. Malicious HTML with embedded event handlers is not sanitized before being reinjected. To solve: Use mutation-based injection to trigger execution during DOM parsing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where e-commerce dashboard stored xss in product review system", "target": "{\"Lab scenario\": \"E-commerce dashboard Stored XSS in product review system\", \"Lab Description\": \"The application allows users to leave product reviews, which are rendered on product pages. The review text is not sanitized or escaped before rendering. To solve: Inject a stored XSS payload into a review and trigger it on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where forum platform reflected xss in search suggestion api", "target": "{\"Lab scenario\": \"Forum platform Reflected XSS in search suggestion API\", \"Lab Description\": \"The forum uses a live search suggestion endpoint that echoes input directly into a JavaScript-rendered dropdown. No escaping is done on the reflected value. To solve: Inject a script payload into the search box and trigger execution through the live results.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: IoT dashboard DOM-based XSS in device label field", "target": "{\"Lab scenario\": \"IoT dashboard DOM-based XSS in device label field\", \"Lab Description\": \"An IoT device management panel allows setting custom labels for devices. These labels are read from `localStorage` and rendered using `innerHTML` in the dashboard. There's no sanitization before rendering, leading to DOM-based XSS. To solve: Inject a payload into localStorage and reload the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: online invoice app reflected xss via pdf generation name field", "target": "{\"Lab scenario\": \"Online invoice app Reflected XSS via PDF generation name field\", \"Lab Description\": \"The invoice generator embeds user input directly into an HTML-based invoice that is rendered then converted into a PDF. No sanitization is applied before rendering. To solve: Inject a script that executes during the preview phase of invoice generation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cross-site scripting lab where chat widget dom-based xss via dynamic welcome message", "target": "{\"Lab scenario\": \"Chat widget DOM-based XSS via dynamic welcome message\", \"Lab Description\": \"A customer support chat widget includes a dynamic welcome message based on the current user. This message is inserted using `innerHTML` from a URL query param. There's no sanitization, enabling DOM-based XSS. To solve: Craft a URL with a payload in the query parameter and trigger the widget.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: A content management system allows contributors to tag articles with arbitrary labels. These tags are rendered without sanitization on the article view page. To solve: Inject a script as a tag and verify it executes when the article is opened.", "target": "{\"Lab scenario\": \"CMS plugin Stored XSS in article tags\", \"Lab Description\": \"A content management system allows contributors to tag articles with arbitrary labels. These tags are rendered without sanitization on the article view page. To solve: Inject a script as a tag and verify it executes when the article is opened.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The blog's custom 404 page reflects the requested URL path directly into the error page without encoding. This allows attackers to inject scripts into the error message display. To solve: Craft a malicious URL path that triggers script execution on error.", "target": "{\"Lab scenario\": \"Blog engine Reflected XSS in 404 error message\", \"Lab Description\": \"The blog's custom 404 page reflects the requested URL path directly into the error page without encoding. This allows attackers to inject scripts into the error message display. To solve: Craft a malicious URL path that triggers script execution on error.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The dashboard lets users create custom charts and label them with titles stored in `sessionStorage`. These are later rendered with innerHTML for display without validation. To solve: Inject a payload into `sessionStorage` and reload the page to trigger.", "target": "{\"Lab scenario\": \"Analytics dashboard DOM-based XSS via chart titles\", \"Lab Description\": \"The dashboard lets users create custom charts and label them with titles stored in `sessionStorage`. These are later rendered with innerHTML for display without validation. To solve: Inject a payload into `sessionStorage` and reload the page to trigger.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: event registration app mutation-based xss in live form preview", "target": "{\"Lab scenario\": \"Event registration app Mutation-based XSS in live form preview\", \"Lab Description\": \"The registration app provides a live preview of custom HTML invitations. The preview renderer mutates and appends the user's raw HTML input, enabling event-based script injection. To solve: Inject a script via onmouseover or onclick and observe execution in the preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: job board reflected xss via email contact form", "target": "{\"Lab scenario\": \"Job board Reflected XSS via email contact form\", \"Lab Description\": \"A job posting site includes a contact form that displays submitted data back to the user in a confirmation message. The name field is reflected into the DOM without escaping. To solve: Inject XSS payloads into the name input and submit the form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: support ticket system stored xss in issue title", "target": "{\"Lab scenario\": \"Support ticket system Stored XSS in issue title\", \"Lab Description\": \"The support system allows users to submit tickets with custom titles. These titles are rendered on the admin dashboard without sanitization. To solve: Inject an XSS payload in the title field and trigger execution when viewed by an admin.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: IoT dashboard DOM-based XSS in log viewer", "target": "{\"Lab scenario\": \"IoT dashboard DOM-based XSS in log viewer\", \"Lab Description\": \"The IoT device dashboard pulls log messages from local storage and renders them using `innerHTML`. Malicious content injected into localStorage can lead to XSS. To solve: Store a malicious payload in localStorage and reload the logs view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: online quiz app reflected xss in question preview", "target": "{\"Lab scenario\": \"Online quiz app Reflected XSS in question preview\", \"Lab Description\": \"Instructors can preview custom questions by appending content to a preview URL. The question content is reflected into the HTML without escaping. To solve: Inject a payload into the question text parameter and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: e-commerce product manager stored xss in custom attributes", "target": "{\"Lab scenario\": \"E-commerce product manager Stored XSS in custom attributes\", \"Lab Description\": \"Vendors can add custom HTML attributes to product cards, which are rendered in the admin dashboard. These attributes aren't sanitized, allowing script injection. To solve: Inject JavaScript into a custom attribute and trigger execution when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where marketing email preview mutation-based xss in dynamic editor", "target": "{\"Lab scenario\": \"Marketing email preview Mutation-based XSS in dynamic editor\", \"Lab Description\": \"The dynamic email editor allows marketing staff to preview raw HTML email content. The content is rendered with `innerHTML`, allowing injected payloads to mutate the DOM. To solve: Inject a script via onerror or <svg> and observe execution in preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: dom xss in websocket message handling", "target": "{\"Lab scenario\": \"DOM XSS in WebSocket message handling\", \"Lab Description\": \"This lab contains a DOM-based cross-site scripting vulnerability in a WebSocket-based chat application. The application dynamically updates messages without proper sanitization, allowing attackers to inject malicious scripts. To solve: Inject an XSS payload via WebSocket and execute JavaScript in the victim's browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS in CMS user profile", "target": "{\"Lab scenario\": \"Stored XSS in CMS user profile\", \"Lab Description\": \"This lab contains a stored cross-site scripting vulnerability in a CMS profile update feature. The application does not properly escape user input before rendering it on the dashboard. To solve: Inject a persistent XSS payload in the profile description and trigger script execution for other users.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via HTTP header manipulation", "target": "{\"Lab scenario\": \"Reflected XSS via HTTP header manipulation\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in an HTTP response header. The application echoes back user-supplied data without encoding it properly. To solve: Inject a JavaScript payload in a request header and execute an alert().\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation xss via dom property injection", "target": "{\"Lab scenario\": \"Mutation XSS via DOM property injection\", \"Lab Description\": \"This lab demonstrates a mutation-based XSS vulnerability. The application modifies DOM properties dynamically based on user input. To solve: Inject an XSS payload that mutates into an executable script after DOM manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability via an SVG file upload feature. The application fails to sanitize embedded JavaScript inside SVG images. To solve: Upload a malicious SVG file containing an XSS payload and trigger script execution when an administrator views it.", "target": "{\"Lab scenario\": \"Stored XSS via SVG file upload\", \"Lab Description\": \"This lab contains a stored XSS vulnerability via an SVG file upload feature. The application fails to sanitize embedded JavaScript inside SVG images. To solve: Upload a malicious SVG file containing an XSS payload and trigger script execution when an administrator views it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab contains a DOM-based XSS vulnerability in an iframe source attribute assignment. The application sets the iframe src dynamically based on user input without sanitization. To solve: Inject an XSS payload in the URL parameter to execute JavaScript inside the iframe.", "target": "{\"Lab scenario\": \"DOM XSS via dynamically generated iframe src attribute\", \"Lab Description\": \"This lab contains a DOM-based XSS vulnerability in an iframe source attribute assignment. The application sets the iframe src dynamically based on user input without sanitization. To solve: Inject an XSS payload in the URL parameter to execute JavaScript inside the iframe.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cross-site scripting lab for: stored xss in comment section with markdown processing", "target": "{\"Lab scenario\": \"Stored XSS in comment section with Markdown processing\", \"Lab Description\": \"This lab contains a stored XSS vulnerability due to improper sanitization in a Markdown-based comment system. The application incorrectly allows JavaScript execution within user-submitted comments. To solve: Submit a crafted Markdown payload that executes JavaScript when rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS via vulnerable JSON endpoint", "target": "{\"Lab scenario\": \"Reflected XSS via vulnerable JSON endpoint\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in a JSON API response. The application returns user input directly in the response without encoding. To solve: Inject an XSS payload in a query parameter and execute JavaScript when parsing the JSON response.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where mutation xss via attribute-based event handler injection", "target": "{\"Lab scenario\": \"Mutation XSS via attribute-based event handler injection\", \"Lab Description\": \"This lab demonstrates a mutation-based XSS vulnerability where user input is inserted into an attribute, mutating into an event handler. The application improperly handles attribute-based user input, allowing execution of JavaScript. To solve: Inject an XSS payload that mutates and executes JavaScript after DOM modification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Stored XSS via JSON Web Token (JWT) payload", "target": "{\"Lab scenario\": \"Stored XSS via JSON Web Token (JWT) payload\", \"Lab Description\": \"This lab contains a stored XSS vulnerability where an attacker can inject malicious JavaScript into a JWT payload. The application decodes and reflects the JWT payload in an admin dashboard without proper sanitization. To solve: Modify the JWT payload to include a stored XSS attack.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability in the user profile bio field. The application allows users to enter bio descriptions, which are displayed on their profile pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the profile.", "target": "{\"Lab scenario\": \"Stored XSS in user profile bio field\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the user profile bio field. The application allows users to enter bio descriptions, which are displayed on their profile pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Cross-site scripting lab where dom-based xss in dynamic comment rendering", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic comment rendering\", \"Lab Description\": \"This lab contains a DOM-based XSS vulnerability in a comment rendering feature. The application updates comments dynamically in the DOM using innerHTML without proper sanitization. To solve: Inject JavaScript code that executes in another user's browser when they load comments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Mutation-based XSS via event handlers in chat application", "target": "{\"Lab scenario\": \"Mutation-based XSS via event handlers in chat application\", \"Lab Description\": \"This lab contains a mutation-based XSS vulnerability where user-generated content is manipulated by client-side scripts. The application modifies chat messages, allowing attackers to inject event-based malicious scripts. To solve: Exploit DOM mutation to inject an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: Reflected XSS in search query results", "target": "{\"Lab scenario\": \"Reflected XSS in search query results\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in the search functionality. The application dynamically displays user input without proper encoding. To solve: Craft a malicious search query that triggers JavaScript execution in the user's browser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab contains an XSS vulnerability in a WebSocket-based messaging system. The application broadcasts user messages to all connected clients without validation. To solve: Inject a malicious payload into the WebSocket message stream to trigger execution.", "target": "{\"Lab scenario\": \"XSS via WebSocket message injection\", \"Lab Description\": \"This lab contains an XSS vulnerability in a WebSocket-based messaging system. The application broadcasts user messages to all connected clients without validation. To solve: Inject a malicious payload into the WebSocket message stream to trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab contains a stored XSS vulnerability in the product review section. The application allows users to submit reviews, which are displayed on product pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the product review.", "target": "{\"Lab scenario\": \"Stored XSS in product review section\", \"Lab Description\": \"This lab contains a stored XSS vulnerability in the product review section. The application allows users to submit reviews, which are displayed on product pages without proper sanitization. To solve: Inject a malicious script that executes whenever another user views the product review.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: DOM-based XSS in real-time notifications", "target": "{\"Lab scenario\": \"DOM-based XSS in real-time notifications\", \"Lab Description\": \"This lab contains a DOM-based XSS vulnerability in the real-time notifications feature. Notifications are inserted into the DOM dynamically using innerHTML without proper sanitization. To solve: Inject a script that executes when another user receives a notification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Cross-site scripting lab for: reflected xss in feedback form submission", "target": "{\"Lab scenario\": \"Reflected XSS in feedback form submission\", \"Lab Description\": \"This lab contains a reflected XSS vulnerability in the feedback submission form. The application includes user input in the response page without proper encoding. To solve: Inject a script that executes when the form submission result is displayed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Cross-site scripting lab for: xss via manipulated url parameters in image preview", "target": "{\"Lab scenario\": \"XSS via manipulated URL parameters in image preview\", \"Lab Description\": \"This lab contains an XSS vulnerability in an image preview feature where the image URL is taken directly from a URL parameter and displayed without sanitization. To solve: Inject a payload that triggers JavaScript execution when an image is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Cross-site scripting scenario. Example: XSS via injected script in WebSocket chat application", "target": "{\"Lab scenario\": \"XSS via injected script in WebSocket chat application\", \"Lab Description\": \"This lab contains an XSS vulnerability in a WebSocket-based chat application where user messages are broadcast to all connected clients without validation. To solve: Inject a malicious script that executes when another user receives the message.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Portal SQL injection in ORDER BY Clause via UNION Attack", "target": "{\"Lab scenario\": \"Banking Portal SQL injection in ORDER BY Clause via UNION Attack\", \"Lab Description\": \"The transaction sorting feature in a banking portal directly concatenates user input into ORDER BY clauses. The application leaks database errors through verbose logging. To solve: Extract account balances using UNION-based injection while bypassing column type restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager boolean-based blind sqli in having clause", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based Blind SQLi in HAVING Clause\", \"Lab Description\": \"An IoT device management dashboard filters sensor data using vulnerable HAVING conditions. No direct output is shown, but HTTP 200/500 status codes indicate query truthiness. To solve: Determine admin API key through binary search of character space.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: cms user search time-based injection via graphql", "target": "{\"Lab scenario\": \"CMS User Search Time-Based Injection via GraphQL\", \"Lab Description\": \"A headless CMS exposes GraphQL endpoint with vulnerable user search. Responses show identical success/failure states. To solve: Exfiltrate password hashes through conditional response delays using DNS over HTTP.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where rest api gateway union injection through json parameter", "target": "{\"Lab scenario\": \"REST API Gateway UNION Injection Through JSON Parameter\", \"Lab Description\": \"An inventory management API processes JSON payloads without type validation. The /search endpoint concatenates JSON array values directly into SELECT. To solve: Dump user credentials through type juggling attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Payment Processor Error-Based Injection in GROUP BY", "target": "{\"Lab scenario\": \"Payment Processor Error-Based Injection in GROUP BY\", \"Lab Description\": \"A payment analytics dashboard leaks PostgreSQL errors through misconfigured grouping. To solve: Extract PCI-compliant credit card numbers using verbose error messages with CTE injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal second-order sqli in user registration", "target": "{\"Lab scenario\": \"Healthcare Portal Second-Order SQLi in User Registration\", \"Lab Description\": \"Patient registration form stores unsanitized input later used in batch reports. To solve: Trigger delayed injection during nightly report generation using temp table pollution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce Platform JSON Array Injection in WHERE Clause", "target": "{\"Lab scenario\": \"E-Commerce Platform JSON Array Injection in WHERE Clause\", \"Lab Description\": \"Product search feature parses JSON arrays directly into SQL conditions. To solve: Bypass parameterized queries through JSON nesting and type confusion attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy SQL injection lab for: inventory management union injection with column padding", "target": "{\"Lab scenario\": \"Inventory Management UNION Injection with Column Padding\", \"Lab Description\": \"Legacy inventory system uses fixed column counts in UNION queries. To solve: Bypass column count validation through NULL padding and type coercion.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where crm system blind injection via websocket messages", "target": "{\"Lab scenario\": \"CRM System Blind Injection via WebSocket Messages\", \"Lab Description\": \"Real-time contact search uses WebSockets with no input validation. To solve: Perform blind boolean injection through response message ordering.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Grade export feature vulnerable to injection through CSV formula fields. To solve: Execute operating system commands through SQL injection with PostgreSQL large object imports.", "target": "{\"Lab scenario\": \"Learning Management System Polyglot Injection in CSV Export\", \"Lab Description\": \"Grade export feature vulnerable to injection through CSV formula fields. To solve: Execute operating system commands through SQL injection with PostgreSQL large object imports.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where rest api boolean-based blind sqli in login", "target": "{\"Lab scenario\": \"REST API Boolean-Based Blind SQLi in Login\", \"Lab Description\": \"A REST API login endpoint uses dynamic SQL without sanitization. No error messages are returned, but a JWT token is issued on success. To solve: Perform boolean-based blind SQLi to extract the admin password character-by-character.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: GraphQL Union-Based SQLi in IoT Device Query", "target": "{\"Lab scenario\": \"GraphQL Union-Based SQLi in IoT Device Query\", \"Lab Description\": \"A GraphQL resolver for IoT devices concatenates user input into a SQL query. Results are returned as JSON. To solve: Use UNION injection to retrieve device API keys from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms header-based blind sqli with boolean inference", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi with Boolean Inference\", \"Lab Description\": \"A CMS logs HTTP headers into a SQL database. A log preview feature reflects entries matching boolean conditions. To solve: Extract admin email via boolean-based blind SQLi in the X-Search-Token header.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: soap api time-based sqli with xml input", "target": "{\"Lab scenario\": \"SOAP API Time-Based SQLi with XML Input\", \"Lab Description\": \"A SOAP login service uses XML input in dynamic SQL. Responses lack feedback, but delays indicate query truthiness. To solve: Extract admin password via time-based delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A product grouping feature uses unsanitized input in GROUP BY. The application returns grouped results as JSON. To solve: Extract database schema via UNION-based injection.", "target": "{\"Lab scenario\": \"E-Commerce GROUP BY SQLi with UNION Payloads\", \"Lab Description\": \"A product grouping feature uses unsanitized input in GROUP BY. The application returns grouped results as JSON. To solve: Extract database schema via UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where newsletter signup error-based sqli with url encoding", "target": "{\"Lab scenario\": \"Newsletter Signup Error-Based SQLi with URL Encoding\", \"Lab Description\": \"A newsletter endpoint uses URL parameters directly in SQL. Verbose errors leak database information. To solve: Extract subscriber emails via UNION-based error injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where sqlite stacked queries in login form", "target": "{\"Lab scenario\": \"SQLite Stacked Queries in Login Form\", \"Lab Description\": \"A login form allows stacked queries in SQLite. To solve: Update the admin password and authenticate.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An autocomplete endpoint uses unsanitized input in a LIKE clause. To solve: Extract user emails via UNION injection.", "target": "{\"Lab scenario\": \"AJAX Autocomplete UNION SQLi in LIKE Clause\", \"Lab Description\": \"An autocomplete endpoint uses unsanitized input in a LIKE clause. To solve: Extract user emails via UNION injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where blog comment form insert-based sqli with error extraction", "target": "{\"Lab scenario\": \"Blog Comment Form INSERT-Based SQLi with Error Extraction\", \"Lab Description\": \"The blog comment system directly interpolates user input into an INSERT statement. While UNION injection isn't possible, error messages leak schema information. To solve: Extract table names via error-based SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where cookie-based authentication bypass with tautology", "target": "{\"Lab scenario\": \"Cookie-Based Authentication Bypass with Tautology\", \"Lab Description\": \"Session validation uses cookies in a WHERE clause without sanitization. To solve: Bypass authentication using boolean logic and access admin profile.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API Key Validation UNION SQLi with Column Matching", "target": "{\"Lab scenario\": \"API Key Validation UNION SQLi with Column Matching\", \"Lab Description\": \"API key validation vulnerable to UNION injection. To solve: Determine column count and extract user credentials through careful UNION payload construction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where second-order sqli in analytics report generation", "target": "{\"Lab scenario\": \"Second-Order SQLi in Analytics Report Generation\", \"Lab Description\": \"Bio field stored without sanitization and later used in admin reports. To solve: Poison bio field with SQL that executes during report generation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: dynamic table name sqli with system table access", "target": "{\"Lab scenario\": \"Dynamic Table Name SQLi with System Table Access\", \"Lab Description\": \"Table parameter vulnerable to schema enumeration. To solve: Extract database structure through controlled UNION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where json body sqli with content-type bypass", "target": "{\"Lab scenario\": \"JSON Body SQLi with Content-Type Bypass\", \"Lab Description\": \"API endpoint vulnerable through JSON parameter injection. To solve: Bypass Content-Type validation and extract sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Error-Based Password Recovery SQLi", "target": "{\"Lab scenario\": \"Error-Based Password Recovery SQLi\", \"Lab Description\": \"Password recovery form leaks schema through verbose errors. To solve: Extract table structure via type conversion errors.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where verification token sqli with stacked queries", "target": "{\"Lab scenario\": \"Verification Token SQLi with Stacked Queries\", \"Lab Description\": \"Verification endpoint vulnerable to stacked queries in PostgreSQL. To solve: Escalate privileges through batched SQL commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Pagination logic vulnerable through OFFSET parameter. To solve: Inject UNION payload into numeric parameter to extract database version.", "target": "{\"Lab scenario\": \"Pagination SQLi with OFFSET Clause Manipulation\", \"Lab Description\": \"Pagination logic vulnerable through OFFSET parameter. To solve: Inject UNION payload into numeric parameter to extract database version.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce portal union-based sqli in order by clause", "target": "{\"Lab scenario\": \"E-Commerce Portal UNION-Based SQLi in ORDER BY Clause\", \"Lab Description\": \"Product sorting feature in Node.js application directly concatenates user input into ORDER BY clause. The application returns full query errors. To solve: Extract user credentials through UNION attack requiring column type matching.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare api boolean-based blind sqli in where clause", "target": "{\"Lab scenario\": \"Healthcare API Boolean-Based Blind SQLi in WHERE Clause\", \"Lab Description\": \"Patient lookup API returns HTTP 200/404 status codes based on query results. No error messages. To solve: Determine sensitive patient SSN through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager time-based sqli in group by clause", "target": "{\"Lab scenario\": \"IoT Device Manager Time-Based SQLi in GROUP BY Clause\", \"Lab Description\": \"Device analytics dashboard vulnerable to blind injection through GROUP BY parameter. Responses identical but delay observable. To solve: Exfiltrate API keys through conditional response delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where cms platform error-based sqli in having clause", "target": "{\"Lab scenario\": \"CMS Platform Error-Based SQLi in HAVING Clause\", \"Lab Description\": \"Content analytics page leaks PostgreSQL errors through misconfigured HAVING clause. To solve: Extract admin credentials through verbose error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where banking portal second-order sqli in user registration", "target": "{\"Lab scenario\": \"Banking Portal Second-Order SQLi in User Registration\", \"Lab Description\": \"User registration stores unsanitized input used in batch reports. To solve: Trigger scheduled report generation to exfiltrate account balances.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where rest api gateway union sqli in json parameter", "target": "{\"Lab scenario\": \"REST API Gateway UNION SQLi in JSON Parameter\", \"Lab Description\": \"Inventory API processes JSON array input without validation. To solve: Bypass WAF protections and extract database schema through UNION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: government portal out-of-band sqli in pdf generator", "target": "{\"Lab scenario\": \"Government Portal Out-of-Band SQLi in PDF Generator\", \"Lab Description\": \"Report generation feature allows DNS exfiltration through malicious SQL queries. To solve: Extract sensitive records using OOB techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: search feature with waf blocking common sqli patterns. to solve: bypass filters using alternative syntax and encoding.", "target": "{\"Lab scenario\": \"Search feature with WAF blocking common SQLi patterns. To solve: Bypass filters using alternative syntax and encoding.\", \"Lab Description\": \"The application uses a web application firewall blocking UNION and SELECT keywords. To solve: Extract user emails using alternative syntax and comment bypasses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Education Platform JWT-Triggered SQLi", "target": "{\"Lab scenario\": \"Education Platform JWT-Triggered SQLi\", \"Lab Description\": \"User dashboard vulnerable to SQLi through JWT claims. To solve: Modify JWT to inject SQL payloads through user ID claim.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Logistics Tracking System Polyglot SQLi in XML Parameter", "target": "{\"Lab scenario\": \"Logistics Tracking System Polyglot SQLi in XML Parameter\", \"Lab Description\": \"Shipment tracking API vulnerable through XML/SQL polyglot payloads. To solve: Achieve RCE via stacked queries and COPY FROM PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal error-based sqli in having clause", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in HAVING Clause\", \"Lab Description\": \"A hospital's patient statistics dashboard allows filtering by department and uses the user input directly in the HAVING clause of a SQL query. Due to lack of input sanitization, attackers can trigger error-based SQL injection to extract sensitive database metadata. This lab demonstrates exploitation using PostgreSQL type casting errors and common table expressions (CTEs) to enumerate tables and leak medical record IDs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device time-based sqli via mqtt protocol", "target": "{\"Lab scenario\": \"IoT Device Time-Based SQLi via MQTT Protocol\", \"Lab Description\": \"An MQTT broker receives JSON-encoded telemetry data from smart devices and writes it to a SQL database. Since the MQTT handler does not sanitize incoming values, attackers can inject SQL into the `device_id` field. This lab explores time-based SQL injection to exfiltrate API keys from the database by measuring conditional delays caused by `pg_sleep`.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: cms second-order sqli in user registration", "target": "{\"Lab scenario\": \"CMS Second-Order SQLi in User Registration\", \"Lab Description\": \"A content management system stores user input during registration and later uses it unsanitized during scheduled report generation. This lab demonstrates second-order SQL injection, where malicious data triggers SQL execution not during entry, but during later backend processing (e.g., admin reporting or logs).\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: banking portal boolean-blind sqli in transaction search", "target": "{\"Lab scenario\": \"Banking Portal Boolean-Blind SQLi in Transaction Search\", \"Lab Description\": \"The transaction search feature returns true/false based on user-defined queries. Since there's no direct error or output, Boolean-based blind SQL injection is needed. Attackers can infer information like account balances by manipulating the query logic and observing application behavior.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce filter evasion sqli with unicode bypass", "target": "{\"Lab scenario\": \"E-Commerce Filter Evasion SQLi with Unicode Bypass\", \"Lab Description\": \"The product search field filters user input by stripping single quotes, but it fails to detect alternate encodings. Attackers can exploit this by using Unicode-encoded apostrophes to bypass the sanitization and extract payment data from the backend.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: logistics tracking out-of-band sqli via dns", "target": "{\"Lab scenario\": \"Logistics Tracking Out-of-Band SQLi via DNS\", \"Lab Description\": \"A vulnerable shipment tracker constructs SQL queries from user input and allows attackers to trigger out-of-band SQLi using DNS exfiltration. This lab illustrates exfiltrating AWS keys via DNS queries using the `LOAD_FILE` or `MAKE_SET` functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT tokens and places the 'sub' claim directly into SQL queries to load user profiles. An attacker can forge a token and manipulate the claim to perform SQL injection. This lab demonstrates bypassing authentication and accessing another user's messages.", "target": "{\"Lab scenario\": \"Social Media JWT-Triggered SQLi in Profile Load\", \"Lab Description\": \"The application uses JWT tokens and places the 'sub' claim directly into SQL queries to load user profiles. An attacker can forge a token and manipulate the claim to perform SQL injection. This lab demonstrates bypassing authentication and accessing another user's messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An export feature accepts filtering criteria in a query used in PostgreSQL's COPY command. Lack of sanitization allows stacked SQL queries. This lab shows how attackers can chain malicious SQL to perform remote command execution (RCE) via COPY FROM PROGRAM.", "target": "{\"Lab scenario\": \"Education Platform Stacked SQLi in CSV Export\", \"Lab Description\": \"An export feature accepts filtering criteria in a query used in PostgreSQL's COPY command. Lack of sanitization allows stacked SQL queries. This lab shows how attackers can chain malicious SQL to perform remote command execution (RCE) via COPY FROM PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal XML SQLi in SOAP Service", "target": "{\"Lab scenario\": \"Government Portal XML SQLi in SOAP Service\", \"Lab Description\": \"A SOAP endpoint accepts XML input and uses XPath to extract user input before inserting it into a SQL query. This allows hybrid XML-SQL injection. Attackers can use CDATA or entity expansion to inject SQL and retrieve citizen SSNs from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where pharmacy management system error-based sqli in having clause", "target": "{\"Lab scenario\": \"Pharmacy Management System Error-Based SQLi in HAVING Clause\", \"Lab Description\": \"A medication inventory system generates reports using vulnerable HAVING conditions. The PostgreSQL backend returns verbose type conversion errors containing sensitive data. The application aggregates results from multiple tables but fails to sanitize the 'threshold' parameter. To solve: Extract patient SSNs by forcing mismatched data type errors through controlled CAST operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where insurance claim system union-based sqli with type juggling", "target": "{\"Lab scenario\": \"Insurance Claim System UNION-Based SQLi with Type Juggling\", \"Lab Description\": \"A claims processing portal constructs dynamic UNION queries using unsanitized user input in the 'document_type' parameter. The MySQL backend performs implicit type conversion between JSON and string types. To solve: Bypass column type checks using JSON_ARRAY and extract adjuster credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: e-commerce platform second-order sqli in product reviews", "target": "{\"Lab scenario\": \"E-Commerce Platform Second-Order SQLi in Product Reviews\", \"Lab Description\": \"A product review system stores unsanitized user comments that later get used in inventory management SQL queries. The Node.js backend escapes output but not storage. To solve: Poison the review system with delayed payloads that trigger during stock reconciliation cron jobs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Telemedicine Platform JSON Path SQLi in Patient Search", "target": "{\"Lab scenario\": \"Telemedicine Platform JSON Path SQLi in Patient Search\", \"Lab Description\": \"A patient lookup feature uses JSONB path expressions in PostgreSQL with unsanitized input. The system allows path traversal via lateral joins. To solve: Extract mental health records by abusing jsonb_to_recordset function in WHERE clause.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A financial auditing feature generates CSV reports using unsanitized input in ORDER BY clauses. The Oracle backend allows UNION injection through numeric column manipulation. Error messages reveal full query structure but are masked in production. To solve: Extract SWIFT codes from international_transfers table while maintaining column type consistency and bypassing CSV escaping mechanisms.", "target": "{\"Lab scenario\": \"Banking Transaction Audit System - UNION-Based SQLi in CSV Export\", \"Lab Description\": \"A financial auditing feature generates CSV reports using unsanitized input in ORDER BY clauses. The Oracle backend allows UNION injection through numeric column manipulation. Error messages reveal full query structure but are masked in production. To solve: Extract SWIFT codes from international_transfers table while maintaining column type consistency and bypassing CSV escaping mechanisms.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Time-Based SQLi in User Registration", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi in User Registration\", \"Lab Description\": \"The user registration form stores unsanitized input used in password reset emails. The MySQL backend allows time-based injection through delayed query execution. To solve: Extract administrator password hash through conditional SLEEP operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal Error-Based SQLi in GROUP BY", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in GROUP BY\", \"Lab Description\": \"Patient statistics dashboard leaks PostgreSQL errors through vulnerable GROUP BY clause. The application displays full query syntax in debug mode. To solve: Extract medical record IDs using type conversion errors and CTE injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: e-commerce platform boolean-based sqli in search", "target": "{\"Lab scenario\": \"E-Commerce Platform Boolean-Based SQLi in Search\", \"Lab Description\": \"Product search feature returns different HTTP status codes based on query truthiness. The SQLite backend allows boolean inference through response variation. To solve: Extract credit card numbers through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Platform JWT-SQLi in Profile Load", "target": "{\"Lab scenario\": \"Social Media Platform JWT-SQLi in Profile Load\", \"Lab Description\": \"User profile endpoint uses JWT claims directly in SQL queries. The application allows JWT algorithm none and has broken signature validation. To solve: Forge admin token and extract private messages through UNION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform union-based sqli in product filter", "target": "{\"Lab scenario\": \"E-Commerce Platform UNION-Based SQLi in Product Filter\", \"Lab Description\": \"The product search feature directly concatenates user input into a WHERE clause with no parameterization. The MySQL backend returns verbose errors containing database structure details. The application executes: SELECT * FROM products WHERE category = '${input}' AND status = 1. To solve: Extract customer credit card numbers through UNION attacks while bypassing column type restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal Boolean-Blind SQLi in Document Search", "target": "{\"Lab scenario\": \"Government Portal Boolean-Blind SQLi in Document Search\", \"Lab Description\": \"The public records search feature uses unsanitized input in a HAVING clause with identical 200/404 responses. The PostgreSQL backend allows boolean inference through response existence checks. The application executes: SELECT doc_id FROM archives GROUP BY doc_id HAVING ${input}. To solve: Extract classified document titles through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Platform Second-Order SQLi in Comments", "target": "{\"Lab scenario\": \"Social Media Platform Second-Order SQLi in Comments\", \"Lab Description\": \"Comment storage system escapes output but not input validation, allowing second-order injection in analytics reports. The application executes: INSERT INTO comments (text) VALUES ('${input}') and later SELECT * FROM comments WHERE ${reportFilter}. To solve: Poison comment system to execute malicious payloads during report generation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Online gradebook system leaks MySQL errors through vulnerable GROUP BY clause. The application executes: SELECT student_id FROM grades GROUP BY ${input}. To solve: Extract hashed passwords through type conversion errors and UNION payloads.", "target": "{\"Lab scenario\": \"Education Platform Error-Based SQLi in Gradebook\", \"Lab Description\": \"Online gradebook system leaks MySQL errors through vulnerable GROUP BY clause. The application executes: SELECT student_id FROM grades GROUP BY ${input}. To solve: Extract hashed passwords through type conversion errors and UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Package tracking system incorporates user input directly into ORDER BY clauses. The application executes: SELECT * FROM shipments ORDER BY ${input}. To solve: Extract sensitive customer addresses through UNION attacks with explicit type casting.", "target": "{\"Lab scenario\": \"Shipping Logistics UNION SQLi in Tracking API\", \"Lab Description\": \"Package tracking system incorporates user input directly into ORDER BY clauses. The application executes: SELECT * FROM shipments ORDER BY ${input}. To solve: Extract sensitive customer addresses through UNION attacks with explicit type casting.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Device control API uses JWT claims directly in SQL queries with broken signature validation. The application executes: SELECT * FROM devices WHERE owner = '${jwt.sub}'. To solve: Forge admin JWT and takeover all smart devices.", "target": "{\"Lab scenario\": \"Smart Home Controller JWT-SQLi in Device Management\", \"Lab Description\": \"Device control API uses JWT claims directly in SQL queries with broken signature validation. The application executes: SELECT * FROM devices WHERE owner = '${jwt.sub}'. To solve: Forge admin JWT and takeover all smart devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An online voting application displays poll results aggregated via SQL. The `poll_id` is taken from a GET parameter and directly injected into a GROUP BY query without sanitization. By leveraging error-based SQL injection with improper type casting, an attacker can extract database names and user tables using verbose PostgreSQL error messages. This lab demonstrates how misusing numeric casting in error messages can lead to data disclosure.", "target": "{\"Lab scenario\": \"Voting System - Error-Based SQL Injection in Poll Results\", \"Lab Description\": \"An online voting application displays poll results aggregated via SQL. The `poll_id` is taken from a GET parameter and directly injected into a GROUP BY query without sanitization. By leveraging error-based SQL injection with improper type casting, an attacker can extract database names and user tables using verbose PostgreSQL error messages. This lab demonstrates how misusing numeric casting in error messages can lead to data disclosure.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CRM Application - Time-Based SQL Injection in Login Form", "target": "{\"Lab scenario\": \"CRM Application - Time-Based SQL Injection in Login Form\", \"Lab Description\": \"A Customer Relationship Management (CRM) application has a vulnerable login system. Although errors are suppressed, an attacker can infer SQL injection by measuring time delays. This lab uses PostgreSQL's `pg_sleep` to demonstrate blind SQL injection through the username field, allowing attackers to brute-force credentials using conditional delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A payment platform allows filtering logs via a query string parameter. The system only returns a status of 'true' or 'false', but the backend query is injectable. Attackers can infer sensitive payment info like card digits by manipulating boolean logic within the WHERE clause and observing the true/false behavior.", "target": "{\"Lab scenario\": \"Payment Processor - Boolean-Blind SQLi in Transaction Logs\", \"Lab Description\": \"A payment platform allows filtering logs via a query string parameter. The system only returns a status of 'true' or 'false', but the backend query is injectable. Attackers can infer sensitive payment info like card digits by manipulating boolean logic within the WHERE clause and observing the true/false behavior.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: iot device dashboard - sqli via mqtt message injection", "target": "{\"Lab scenario\": \"IoT Device Dashboard - SQLi via MQTT Message Injection\", \"Lab Description\": \"IoT telemetry data sent over MQTT is processed into a PostgreSQL database. The message handler lacks proper validation, allowing SQL injection via MQTT payloads. This lab focuses on out-of-band time-based attacks and showcases how IoT protocols can become attack surfaces.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: support portal - second-order sql injection in ticket system", "target": "{\"Lab scenario\": \"Support Portal - Second-Order SQL Injection in Ticket System\", \"Lab Description\": \"The application stores user-submitted tickets that are later used in admin SQL queries. The stored malicious data becomes effective only after a separate action triggers it, demonstrating second-order SQL injection. The attacker poisons input via the ticket submission page and waits for it to be processed in a vulnerable report generation feature.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: saas analytics - sqli in export feature using stacked queries", "target": "{\"Lab scenario\": \"SaaS Analytics - SQLi in Export Feature Using Stacked Queries\", \"Lab Description\": \"The export CSV feature builds a dynamic query based on filters and directly executes it. Attackers can append stacked queries using semicolons to create new tables, copy data, or trigger remote command execution (PostgreSQL COPY FROM PROGRAM). This lab simulates privilege escalation via SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A mobile app sends JSON bodies to an API endpoint that joins JSON values into SQL filters. An attacker can exploit this by inserting SQL logic within array elements, bypassing filters and leaking authentication tokens. The vulnerability stems from improper concatenation of JSON strings into SQL clauses.", "target": "{\"Lab scenario\": \"Mobile App Backend - JSON-Based SQLi via REST API\", \"Lab Description\": \"A mobile app sends JSON bodies to an API endpoint that joins JSON values into SQL filters. An attacker can exploit this by inserting SQL logic within array elements, bypassing filters and leaking authentication tokens. The vulnerability stems from improper concatenation of JSON strings into SQL clauses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where blog engine - union sqli via tag search", "target": "{\"Lab scenario\": \"Blog Engine - Union SQLi via Tag Search\", \"Lab Description\": \"The blog application offers tag-based article filtering. Tags are concatenated into a WHERE clause with no sanitization, leading to a UNION-based SQL injection vulnerability. An attacker can extract full user records by appending a secondary query into the tag filter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where admin panel - sqli via cookie injection", "target": "{\"Lab scenario\": \"Admin Panel - SQLi via Cookie Injection\", \"Lab Description\": \"The admin dashboard uses cookie-based authentication, which is parsed and inserted into a query without sanitization. A malicious user can modify their cookie value to execute SQL injection and access admin-only resources or dump data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where banking portal union-based sqli in csv export order clause", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in CSV Export Order Clause\", \"Lab Description\": \"A financial report export feature in a banking portal directly concatenates user-controlled sorting parameters into an ORDER BY clause within a PostgreSQL COPY command. The application leaks verbose errors containing sensitive database metadata. Attackers can exploit this to exfiltrate account balances and transaction histories by bypassing column type checks through explicit casting and UNION payloads. The vulnerability stems from improper input sanitization and debug-mode error reporting in production.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform json array injection with type confusion", "target": "{\"Lab scenario\": \"E-Commerce Platform JSON Array Injection with Type Confusion\", \"Lab Description\": \"A product search API processes JSON arrays containing filter conditions without type validation. Attackers can bypass parameterized queries by nesting objects and exploiting SQLite's dynamic typing system. This lab demonstrates credential extraction through type juggling and JSON aggregation functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: social media platform jwt-sqli in notifications", "target": "{\"Lab scenario\": \"Social Media Platform JWT-SQLi in Notifications\", \"Lab Description\": \"A notification system inserts JWT 'sub' claims directly into SQL queries without validation. Attackers can forge tokens with UNION payloads to hijack user sessions and exfiltrate private messages through malformed JSON responses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where telemedicine platform xml/sql polyglot injection", "target": "{\"Lab scenario\": \"Telemedicine Platform XML/SQL Polyglot Injection\", \"Lab Description\": \"A patient portal processes XML input containing CDATA-wrapped SQL fragments. Attackers can bypass XML entity encoding through hybrid polyglot payloads to extract sensitive medical records using PostgreSQL's xmlagg() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: smart home dashboard – sqli in device group aggregation", "target": "{\"Lab scenario\": \"Smart Home Dashboard – SQLi in Device Group Aggregation\", \"Lab Description\": \"The smart home admin dashboard allows users to aggregate device energy usage by group. The server-side logic dynamically builds the SQL `GROUP BY` and `ORDER BY` clauses based on user-supplied parameters. An attacker can exploit this by injecting a UNION-based payload through the group query, exfiltrating device secrets or configuration files. The vulnerability arises due to lack of input validation and direct string interpolation into SQL clauses. This mimics real-world attacks in IoT management platforms.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: library search engine – sqli via boolean conditions in search filter", "target": "{\"Lab scenario\": \"Library Search Engine – SQLi via Boolean Conditions in Search Filter\", \"Lab Description\": \"A digital library platform allows users to search books using various filters including author and genre. The search input is vulnerable to Boolean-based blind SQL injection due to its dynamic usage in the `WHERE` clause without sanitization. By leveraging timing functions such as `pg_sleep` or `SLEEP`, an attacker can enumerate database content even when no output is directly returned. The challenge highlights data inference via blind channels and can simulate real-world research archive systems.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where insurance claim portal – sqli in policy id lookup", "target": "{\"Lab scenario\": \"Insurance Claim Portal – SQLi in Policy ID Lookup\", \"Lab Description\": \"An insurance web portal allows users to track claim status by providing a policy ID. The policy ID is directly concatenated into a SQL `WHERE` clause without proper escaping. This enables classic SQL injection attacks, allowing attackers to enumerate policy details, retrieve confidential claim attachments, and bypass access controls. This scenario mimics legacy financial services APIs that rely on ID-based filtering.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The course feedback system in a university's e-learning portal is vulnerable to stacked SQL injection. When students submit feedback, the comments are concatenated into a SQL statement used in administrative analysis reports. A malicious student can exploit this by submitting a comment that injects multiple SQL statements, enabling unauthorized access to staff tables or privilege escalation. The lab simulates real-world educational platforms that rely on weak report generators.", "target": "{\"Lab scenario\": \"Online Education Platform – SQLi via Feedback System\", \"Lab Description\": \"The course feedback system in a university's e-learning portal is vulnerable to stacked SQL injection. When students submit feedback, the comments are concatenated into a SQL statement used in administrative analysis reports. A malicious student can exploit this by submitting a comment that injects multiple SQL statements, enabling unauthorized access to staff tables or privilege escalation. The lab simulates real-world educational platforms that rely on weak report generators.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: medical record app – sqli in filtered lab test results", "target": "{\"Lab scenario\": \"Medical Record App – SQLi in Filtered Lab Test Results\", \"Lab Description\": \"A hospital management system provides an endpoint for querying lab test results filtered by test type. The SQL query uses the user input in a dynamic string with no validation, making it vulnerable to error-based SQL injection. The attacker can leverage PostgreSQL's error reporting to infer the structure of underlying tables and extract lab results or patient identifiers. This scenario is based on actual flaws seen in healthcare reporting interfaces.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Retail Chain API – SQLi via Internal Analytics Dashboard", "target": "{\"Lab scenario\": \"Retail Chain API – SQLi via Internal Analytics Dashboard\", \"Lab Description\": \"A retail chain's internal dashboard accepts analytics queries via a web UI, where filter strings are passed to a SQL backend. Due to weak validation, attackers can inject time-based SQL payloads to exfiltrate sensitive inventory and sales data, especially when UNION-based methods are blocked. The attack vector uses PostgreSQL's `pg_sleep` and conditional subqueries, ideal for time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: university login panel – sqli bypass via cookie manipulation", "target": "{\"Lab scenario\": \"University Login Panel – SQLi Bypass via Cookie Manipulation\", \"Lab Description\": \"The login system of a university portal relies on a user-supplied `auth_token` cookie, which is directly included in a SQL query. An attacker can forge the token to include a SQLi payload, bypassing authentication checks. This lab simulates real-world flaws in legacy systems where session data is not validated cryptographically.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An internal admin panel allows assigning roles to users through a vulnerable SQL query concatenated with user-controlled input. The input is directly passed to the SQL `UPDATE` query without proper sanitization. An attacker with limited access can escalate privileges by injecting into the role assignment input field. This scenario simulates a common misconfiguration where admin interfaces are assumed safe and are poorly validated.", "target": "{\"Lab scenario\": \"Internal Admin Panel – SQLi in Role Assignment\", \"Lab Description\": \"An internal admin panel allows assigning roles to users through a vulnerable SQL query concatenated with user-controlled input. The input is directly passed to the SQL `UPDATE` query without proper sanitization. An attacker with limited access can escalate privileges by injecting into the role assignment input field. This scenario simulates a common misconfiguration where admin interfaces are assumed safe and are poorly validated.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Payment History Portal – SQLi in Dynamic Column Filter", "target": "{\"Lab scenario\": \"Payment History Portal – SQLi in Dynamic Column Filter\", \"Lab Description\": \"The application backend allows users to search their payment history by various columns like `amount`, `status`, or `method`. The filter column name is user-controlled and directly used in the SQL query, leading to a classic SQLi vulnerability through the `ORDER BY` clause. An attacker can exploit this to inject malicious SQL and dump the full transaction history or manipulate sorting logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: NGO Donor Portal – SQLi via Search Field with LIKE", "target": "{\"Lab scenario\": \"NGO Donor Portal – SQLi via Search Field with LIKE\", \"Lab Description\": \"The NGO's donation search feature is vulnerable due to unsanitized use of user input in a `LIKE` clause. Attackers can inject SQL using special characters and extract sensitive donor information such as email addresses, donation amount, and messages. This is a common real-world vulnerability due to poor filter design in keyword searches.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: graphql backend – sql injection in resolver function", "target": "{\"Lab scenario\": \"GraphQL Backend – SQL Injection in Resolver Function\", \"Lab Description\": \"A GraphQL resolver directly includes user input from a search query in the SQL statement, making it vulnerable to SQL injection. The injection point is in the GraphQL `searchProducts(term: String)` operation. Exploiting this can lead to arbitrary SQL execution and access to sensitive product inventory details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application lets users filter travel packages by country. However, the country parameter is unsanitized and directly included in the SQL query. This allows attackers to enumerate packages in other users’ accounts by bypassing country-level access control using injection in the filter parameter.", "target": "{\"Lab scenario\": \"Travel Booking – SQLi in Country Filter with Enumeration\", \"Lab Description\": \"This application lets users filter travel packages by country. However, the country parameter is unsanitized and directly included in the SQL query. This allows attackers to enumerate packages in other users’ accounts by bypassing country-level access control using injection in the filter parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A cloud service uses a weak implementation for API key lookup. It concatenates the `x-api-key` header value directly into a query. A malicious actor could modify the header and extract data from other tenants’ records or even bypass authentication altogether.", "target": "{\"Lab scenario\": \"Cloud Service – SQL Injection in API Key Authorization\", \"Lab Description\": \"A cloud service uses a weak implementation for API key lookup. It concatenates the `x-api-key` header value directly into a query. A malicious actor could modify the header and extract data from other tenants’ records or even bypass authentication altogether.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a SQL injection lab where employee portal – sql injection in login field", "target": "{\"Lab scenario\": \"Employee Portal – SQL Injection in Login Field\", \"Lab Description\": \"The login form for internal employee authentication takes the username and password and embeds them directly into a SQL query. There is no use of prepared statements or sanitization, making it highly vulnerable. This classic injection can be used to bypass login and access internal records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Mobile API – SQL Injection in JSON Body Parameter", "target": "{\"Lab scenario\": \"Mobile API – SQL Injection in JSON Body Parameter\", \"Lab Description\": \"The mobile application sends JSON data containing search filters. The backend fails to validate or sanitize the `title` parameter in the JSON body. An attacker could send a malicious JSON payload to inject arbitrary SQL into the backend and retrieve internal documents.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Support Chat System – SQL Injection via Cookie Parameter", "target": "{\"Lab scenario\": \"Support Chat System – SQL Injection via Cookie Parameter\", \"Lab Description\": \"The application identifies users using a session cookie that is directly passed to a SQL query. If an attacker modifies the cookie value to include SQL, it can be used to retrieve or manipulate chat history, impersonate another user, or drop session tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking api union-based sqli with column padding", "target": "{\"Lab scenario\": \"Banking API UNION-Based SQLi with Column Padding\", \"Lab Description\": \"A financial transactions API endpoint directly incorporates unsanitized user input into ORDER BY clauses of PostgreSQL queries. The application returns verbose errors containing full query syntax and database structure. Attackers can bypass column count restrictions through NULL padding and explicit type casting to extract SHA-256 hashed PIN codes from the accounts table. The vulnerability stems from debug-mode error handling in production and lack of parameterized queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Medical Imaging System Error-Based SQLi in DICOM Metadata", "target": "{\"Lab scenario\": \"Medical Imaging System Error-Based SQLi in DICOM Metadata\", \"Lab Description\": \"A hospital PACS system improperly handles DICOM metadata fields in MySQL INSERT statements. PatientName tags (0010,0010) containing SQL fragments trigger type conversion errors that leak radiation therapy records through verbose database exceptions. Attackers can exfiltrate treatment plans containing sensitive Protected Health Information (PHI) by manipulating VR (Value Representation) fields.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where blockchain oracle sqli with signature bypass", "target": "{\"Lab scenario\": \"Blockchain Oracle SQLi with Signature Bypass\", \"Lab Description\": \"A DeFi price oracle using EIP-712 signatures fails to validate query parameters in PostgreSQL. Attackers can forge signed requests to manipulate token prices through UNION injections in symbol parameterization. Vulnerability arises from improper separation of signing logic and SQL construction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: industrial plc code injection via modbus", "target": "{\"Lab scenario\": \"Industrial PLC Code Injection via Modbus\", \"Lab Description\": \"A PLC management interface processes Modbus FC23 messages with unsanitized register values in SQLite. Attackers can overwrite ladder logic through stacked queries containing CODESYS compiler commands. Vulnerability stems from mixing control logic storage with operational telemetry.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Telecom SS7 MAP Protocol SQLi", "target": "{\"Lab scenario\": \"Telecom SS7 MAP Protocol SQLi\", \"Lab Description\": \"Mobile core network MAP interface improperly handles IMSI values in Oracle PL/SQL. Attackers can inject UNION payloads in UpdateLocation requests to exfiltrate subscriber SMS contents through SCCP routing bypass. Combines SS7 protocol weaknesses with dynamic SQL execution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where smart contract metadata sqli", "target": "{\"Lab scenario\": \"Smart Contract Metadata SQLi\", \"Lab Description\": \"NFT marketplace processes ERC-721 metadata with vulnerable JSONB queries in PostgreSQL. Attackers exploit JSON concatenation precedence to exfiltrate wallet keys through corrupted rarity scores. Vulnerability combines JSON operator precedence with lack of parameterization.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where drone navigation sqli via mavlink", "target": "{\"Lab scenario\": \"Drone Navigation SQLi via MAVLink\", \"Lab Description\": \"UAV ground control system processes MAVLink mission items with unsanitized parameters. Attackers inject coordinate updates through stacked queries to modify flight paths. Vulnerability stems from mixing navigation data storage with real-time control.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Quantum compiler processes OpenQASM files with vulnerable creg names. Attackers inject SQL payloads to exfiltrate IBMQ credentials through transpilation errors. Combines quantum programming syntax with traditional SQLi.", "target": "{\"Lab scenario\": \"Quantum Circuit SQLi in QASM\", \"Lab Description\": \"Quantum compiler processes OpenQASM files with vulnerable creg names. Attackers inject SQL payloads to exfiltrate IBMQ credentials through transpilation errors. Combines quantum programming syntax with traditional SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare radiology sqli", "target": "{\"Lab scenario\": \"Healthcare Radiology SQLi\", \"Lab Description\": \"Medical imaging system stores radiology notes in PostgreSQL with vulnerable plv8 functions. Attackers chain SQLi with JavaScript execution to leak DICOM files. Combines improper output encoding with excessive DB privileges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where vehicle can bus sqli", "target": "{\"Lab scenario\": \"Vehicle CAN Bus SQLi\", \"Lab Description\": \"Telematics system processes J1939 messages with unsanitized PIDs in SQLite. Attackers forge OBD-II packets to overwrite firmware hashes. Vulnerability arises from mixing diagnostic data with update logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Decentralized organization uses vulnerable JSONB queries for Snapshot voting. Attackers manipulate delegation power through ENS record injections. Combines Web3 technologies with traditional SQLi.", "target": "{\"Lab scenario\": \"DAO Governance SQLi\", \"Lab Description\": \"Decentralized organization uses vulnerable JSONB queries for Snapshot voting. Attackers manipulate delegation power through ENS record injections. Combines Web3 technologies with traditional SQLi.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce product filter sql injection via json parameter", "target": "{\"Lab scenario\": \"E-Commerce Product Filter SQL Injection via JSON Parameter\", \"Lab Description\": \"An e-commerce platform's product filtering API accepts JSON-formatted filter parameters that are directly concatenated into SQL WHERE clauses. The Node.js backend fails to validate array types, allowing attackers to bypass input sanitization and execute UNION-based injections. The PostgreSQL database returns full query errors in production, leaking column structures. To solve: Extract SHA-256 hashed admin credentials and credit card tokenization keys from the payment_gateway_config table while evading WAF rules using Unicode-encoded quotes.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Patient Portal Boolean-Based Blind SQLi", "target": "{\"Lab scenario\": \"Healthcare Patient Portal Boolean-Based Blind SQLi\", \"Lab Description\": \"A hospital patient portal uses unsanitized input in medication lookup queries. The Oracle backend suppresses errors but returns HTTP 200/404 status codes based on query validity. To solve: Determine sensitive patient allergy records through bitwise binary search of ASCII values using DBMS_PIPE packaged functions. The challenge requires precise timing analysis and evasion of request throttling mechanisms.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot device management union-based sqli in api endpoint", "target": "{\"Lab scenario\": \"IoT Device Management UNION-Based SQLi in API Endpoint\", \"Lab Description\": \"An industrial IoT dashboard constructs SQL queries using unsanitized device IDs from REST parameters. The MySQL backend allows stacked queries but blocks UNION unless column counts match exactly. To solve: Extract AWS IoT Core certificates by forcing JSON type coercion through CONCAT(0x7b,private_key) and bypassing TLS fingerprint validation in the management API.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where social media platform error-based sqli in comment section", "target": "{\"Lab scenario\": \"Social Media Platform Error-Based SQLi in Comment Section\", \"Lab Description\": \"A social media platform's comment moderation system directly interpolates user input into DELETE statements. The Microsoft SQL Server leaks full query plans through verbose errors when invalid type conversions occur. To solve: Exfiltrate OAuth tokens and DM conversations by forcing arithmetic overflow errors in XML PATH queries containing secret data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Application Second-Order SQLi in User Registration", "target": "{\"Lab scenario\": \"Banking Application Second-Order SQLi in User Registration\", \"Lab Description\": \"A neo-banking app stores unsanitized occupation fields that get used in nightly KYC report generation. The PostgreSQL cron job runs with elevated privileges, allowing attackers to overwrite audit logs. To solve: Poison user profiles with CTE expressions containing pg_cancel_backend() and COPY TO PROGRAM calls to establish reverse shells through delayed job execution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Educational Platform Time-Based SQLi in Course Enrollment", "target": "{\"Lab scenario\": \"Educational Platform Time-Based SQLi in Course Enrollment\", \"Lab Description\": \"A university course enrollment system uses unsanitized student IDs in SQLite queries. The system returns identical error pages but allows time-based inference through randomblob() function calls. To solve: Extract exam answers and grade curves by measuring response delays when querying encrypted BLOB columns in the course_materials table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: government portal union sqli in document search", "target": "{\"Lab scenario\": \"Government Portal UNION SQLi in Document Search\", \"Lab Description\": \"A classified document search portal concatenates user input into ORDER BY clauses of Oracle queries. The application uses APEX authentication but leaks execution plans through utl_http calls. To solve: Exfiltrate nuclear facility blueprints by bypassing ORA-00904 errors through OUTER JOIN payloads and converting BFILEs to Base64-encoded strings in UNION SELECT clauses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A freight tracking system's CSV export feature uses unsanitized input in COPY TO statements. Attackers can execute OS commands through PostgreSQL's COPY FROM PROGRAM and create reverse shells using Python subprocesses encoded in hex. The vulnerability is compounded by the application running as root with NOPASSWD sudo privileges.", "target": "{\"Lab scenario\": \"Logistics Management System Stacked Queries via CSV Export\", \"Lab Description\": \"A freight tracking system's CSV export feature uses unsanitized input in COPY TO statements. Attackers can execute OS commands through PostgreSQL's COPY FROM PROGRAM and create reverse shells using Python subprocesses encoded in hex. The vulnerability is compounded by the application running as root with NOPASSWD sudo privileges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Telemedicine App JWT-Triggered SQLi in Patient Records", "target": "{\"Lab scenario\": \"Telemedicine App JWT-Triggered SQLi in Patient Records\", \"Lab Description\": \"A HIPAA-compliant telemedicine platform embeds JWT claims in SQL WHERE clauses without validation. Attackers can forge tokens with UNION payloads containing XPath expressions to extract radiology images stored as PostgreSQL BYTEA. The challenge requires bypassing Content Security Policies and reconstructing DICOM files from hex-encoded binary chunks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cloud storage api sql injection via metadata field", "target": "{\"Lab scenario\": \"Cloud Storage API SQL Injection via Metadata Field\", \"Lab Description\": \"A cloud storage service processes file metadata using vulnerable JSONB path queries in PostgreSQL. Attackers can exploit jsonb_set() function to overwrite IAM policies and exfiltrate S3 pre-signed URLs through malformed JSON responses containing UNION-injected bucket permissions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The search functionality does not properly sanitize user input, allowing for SQL injection. The application uses user-supplied search terms directly in SQL queries, exposing it to attack. To solve: Inject malicious SQL to retrieve sensitive data or modify the database.", "target": "{\"Lab scenario\": \"SQL Injection in Search Functionality\", \"Lab Description\": \"The search functionality does not properly sanitize user input, allowing for SQL injection. The application uses user-supplied search terms directly in SQL queries, exposing it to attack. To solve: Inject malicious SQL to retrieve sensitive data or modify the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in a REST API's product search query", "target": "{\"Lab scenario\": \"SQL injection in a REST API's product search query\", \"Lab Description\": \"This lab demonstrates a UNION-based SQL injection vulnerability in a product search query of a REST API. The API takes a product name as a query parameter and executes a direct SQL query without sanitization. To solve the lab, exploit this vulnerability to enumerate the database version.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a boolean-based blind SQL injection vulnerability in a login form. The application uses a vulnerable query that doesn't provide direct error messages but does change the page content based on the result. To solve the lab, infer the administrator's password length using boolean conditions.", "target": "{\"Lab scenario\": \"Boolean-based blind SQL injection in login form\", \"Lab Description\": \"This lab demonstrates a boolean-based blind SQL injection vulnerability in a login form. The application uses a vulnerable query that doesn't provide direct error messages but does change the page content based on the result. To solve the lab, infer the administrator's password length using boolean conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Time-based SQL injection in account balance query", "target": "{\"Lab scenario\": \"Time-based SQL injection in account balance query\", \"Lab Description\": \"This lab demonstrates a time-based SQL injection vulnerability in an account balance query. The application performs a delay in response when an invalid query is executed. To solve the lab, infer the balance of a target account by sending time-delayed SQL injection queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a SQL injection vulnerability where input filters only allow certain characters. The application sanitizes input but does not properly handle case differences. To solve the lab, bypass the filter and perform a UNION-based SQL injection attack.", "target": "{\"Lab scenario\": \"SQL injection bypassing input filters with case manipulation\", \"Lab Description\": \"This lab demonstrates a SQL injection vulnerability where input filters only allow certain characters. The application sanitizes input but does not properly handle case differences. To solve the lab, bypass the filter and perform a UNION-based SQL injection attack.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a SQL injection vulnerability in a SOAP API. The API accepts parameters through XML input, which is not sanitized properly. To solve the lab, perform an SQL injection attack using UNION to retrieve sensitive data from the database.", "target": "{\"Lab scenario\": \"SQL injection in SOAP API\", \"Lab Description\": \"This lab demonstrates a SQL injection vulnerability in a SOAP API. The API accepts parameters through XML input, which is not sanitized properly. To solve the lab, perform an SQL injection attack using UNION to retrieve sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Blockchain Oracle SQLi with Smart Contract Trigger", "target": "{\"Lab scenario\": \"Blockchain Oracle SQLi with Smart Contract Trigger\", \"Lab Description\": \"A DeFi price oracle executes SQL queries based on Ethereum smart contract events stored in PostgreSQL. The Node.js listener fails to validate calldata parameters, allowing attackers to inject UNION payloads through forged ERC-721 Transfer events. The vulnerability enables manipulation of token price feeds by concatenating malicious WHERE clauses containing arithmetic overflow conditions. To solve: Exploit the Chainlink external adapter interface to overwrite ETH/USD rates using hex-encoded byte32 payloads containing pg_notify() calls.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Surgical Robot Control System Time-Based SQLi", "target": "{\"Lab scenario\": \"Surgical Robot Control System Time-Based SQLi\", \"Lab Description\": \"A ROS2-based surgical interface stores procedure logs in SQLite with unsanitized JSON metadata. The C++ middleware allows time-based inference through std::this_thread::sleep_for() calls in WHERE clauses. To solve: Exfiltrate patient biometric encryption keys by measuring 50ms response delay variances using SUBSTR(SHA3-256(ecg_data),1,4) comparisons and bypass CRC32 checksum validation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Satellite Ground Station UNION SQLi via CCSDS Telemetry", "target": "{\"Lab scenario\": \"Satellite Ground Station UNION SQLi via CCSDS Telemetry\", \"Lab Description\": \"A satellite command system processes CCSDS packet APIDs through vulnerable PostgreSQL stored procedures. Attackers can inject frame_count parameters containing UNION SELECT payloads to overwrite NORAD TLE data. The challenge requires bypassing Reed-Solomon error correction and aligning columns using SPIREnt test equipment timing.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where quantum database error-based sqli in shor's algorithm", "target": "{\"Lab scenario\": \"Quantum Database Error-Based SQLi in Shor's Algorithm\", \"Lab Description\": \"A post-quantum cryptography system implements Grover's algorithm for SQL optimization, leaking error states through IBM Qiskit backend exceptions. Attackers can force modulus overflow errors in WHERE clauses containing factored primes. To solve: Extract RSA-4096 private keys by solving discrete logarithm problems revealed in amplitude amplification error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where 5g core network sqli in amf registration", "target": "{\"Lab scenario\": \"5G Core Network SQLi in AMF Registration\", \"Lab Description\": \"A 5G Access and Mobility Management Function (AMF) stores UE contexts in MariaDB with unsanitized SUPI parameters. Attackers can inject Handover Required messages containing GTP-U extensions with UNION payloads to disclose Kseaf derivation keys. Requires bypassing PFCP session validation and aligning column counts using NAS encryption type offsets.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Industrial SCADA SQLi via Modbus/TCP", "target": "{\"Lab scenario\": \"Industrial SCADA SQLi via Modbus/TCP\", \"Lab Description\": \"A SCADA system maps Modbus holding registers to SQLite queries using function code 0x17. Attackers can overwrite PID controller setpoints through injected WHERE clauses containing IEEE-754 floating point exploits. The challenge requires precise timing to bypass CRC checks and align payloads with RTU poll cycles.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A UAV ground control system stores flight paths in PostgreSQL with unsanitized MAVLink MISSION_ITEM_INT parameters. Attackers can inject arbitrary SRID transformations through UNION payloads containing ST_Transform() calls to redirect drones. Requires bypassing packet sequence validation and aligning column counts with PG_GEOMETRY metadata.", "target": "{\"Lab scenario\": \"Military Drone SQLi in MAVLink Mission Protocol\", \"Lab Description\": \"A UAV ground control system stores flight paths in PostgreSQL with unsanitized MAVLink MISSION_ITEM_INT parameters. Attackers can inject arbitrary SRID transformations through UNION payloads containing ST_Transform() calls to redirect drones. Requires bypassing packet sequence validation and aligning column counts with PG_GEOMETRY metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A power distribution system maps IEC 61850 GOOSE messages to MySQL queries. Attackers can inject Logical Node names containing boolean-based payloads to disable circuit breakers. The challenge requires precise timing to bypass SMV sampling synchronization and manipulate CURRENT_TAP_SETTING values.", "target": "{\"Lab scenario\": \"Smart Grid SQLi via IEC 61850 GOOSE\", \"Lab Description\": \"A power distribution system maps IEC 61850 GOOSE messages to MySQL queries. Attackers can inject Logical Node names containing boolean-based payloads to disable circuit breakers. The challenge requires precise timing to bypass SMV sampling synchronization and manipulate CURRENT_TAP_SETTING values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where nuclear plant sqli in opc ua historian", "target": "{\"Lab scenario\": \"Nuclear Plant SQLi in OPC UA Historian\", \"Lab Description\": \"A reactor monitoring system stores OPC UA historized data in TimescaleDB. Attackers can inject malformed NodeIds containing UNION payloads to falsify core temperature readings. Requires bypassing UA SecureChannel nonce validation and aligning column types using IEEE-754 DOUBLE conversions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where submarine cable sqli via otn framing", "target": "{\"Lab scenario\": \"Submarine Cable SQLi via OTN Framing\", \"Lab Description\": \"An undersea DWDM network maps OTN OPU payloads to PostgreSQL BLOB queries. Attackers can inject GFP-T frames containing hex-encoded UNION payloads to exfiltrate BGP peering keys. Requires precise alignment with ODUflex containers and bypassing FEC checks using soft-decision decoding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Time-Based SQLi via GraphQL Batch Query", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi via GraphQL Batch Query\", \"Lab Description\": \"Headless CMS implements vulnerable GraphQL resolvers that concatenate user input into PostgreSQL pg_sleep() calls. The Java backend suppresses errors but leaks timing differentials through N+1 query patterns. To solve: Exfiltrate admin API keys through conditional response delays using DNS-over-HTTPS tunneling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks full error messages containing AWS RDS instance metadata through verbose logging. To solve: Extract DynamoDB access keys using geometry type conversion errors in MULTIPOINT() functions.", "target": "{\"Lab scenario\": \"API Gateway Error-Based SQLi in JSON Array\", \"Lab Description\": \"Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks full error messages containing AWS RDS instance metadata through verbose logging. To solve: Extract DynamoDB access keys using geometry type conversion errors in MULTIPOINT() functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce union-based sqli with column padding", "target": "{\"Lab scenario\": \"E-Commerce UNION-Based SQLi with Column Padding\", \"Lab Description\": \"Product search feature uses fixed-width UNION column validation in MySQL. The application truncates overflow data but leaks information through JSON encoding errors. To solve: Bypass column count restrictions using NULL padding and extract PCI-compliant credit card numbers through CONCAT(LPAD()) length exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: social media boolean-based blind sqli in dm search", "target": "{\"Lab scenario\": \"Social Media Boolean-Based Blind SQLi in DM Search\", \"Lab Description\": \"Direct message search functionality uses unsanitized input in SQL Server FULLTEXT predicates. The .NET backend suppresses errors but reveals truthiness through emoji reaction counts. To solve: Exfiltrate OAuth tokens through BITAND() comparisons of UNICODE() values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: User profile endpoint incorporates JWT 'sub' claim directly into SQL Server OPENJSON queries. The application leaks decrypted sensitive columns through XML FOR JSON PATH conversion errors. To solve: Extract encrypted SSNs by forcing type mismatches in JSON_VALUE() path expressions.", "target": "{\"Lab scenario\": \"REST API Error-Based SQLi in JWT Claims\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' claim directly into SQL Server OPENJSON queries. The application leaks decrypted sensitive columns through XML FOR JSON PATH conversion errors. To solve: Extract encrypted SSNs by forcing type mismatches in JSON_VALUE() path expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Header-Based Blind SQLi in Audit Logs", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi in Audit Logs\", \"Lab Description\": \"User activity tracking system incorporates X-Forwarded-For headers into MySQL INSERT statements. The PHP backend suppresses errors but reveals query success through UUID generation patterns. To solve: Extract admin password hashes using BENCHMARK() timing attacks and rainbow table reversal.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking App Time-Based SQLi in OAuth Callback", "target": "{\"Lab scenario\": \"Banking App Time-Based SQLi in OAuth Callback\", \"Lab Description\": \"OAuth 2.0 token exchange endpoint incorporates state parameters into SQLite queries. The Go backend leaks query execution time through improperly batched database transactions. To solve: Exfiltrate transaction PINs using CASE WHEN delays and statistical timing analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Medical imaging system stores DICOM tags in MySQL GEOMETRY columns. The Python backend leaks patient diagnoses through invalid WKB format exceptions. To solve: Extract radiation therapy records using POLYGON() type conversion attacks and ST_AsText() function exploitation.", "target": "{\"Lab scenario\": \"Telemedicine Platform Error-Based SQLi in DICOM Metadata\", \"Lab Description\": \"Medical imaging system stores DICOM tags in MySQL GEOMETRY columns. The Python backend leaks patient diagnoses through invalid WKB format exceptions. To solve: Extract radiation therapy records using POLYGON() type conversion attacks and ST_AsText() function exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal second-order sqli in patient notes", "target": "{\"Lab scenario\": \"Healthcare Portal Second-Order SQLi in Patient Notes\", \"Lab Description\": \"A patient record system stores unsanitized medical notes that get concatenated into nightly backup SQL queries. The MySQL backend allows attackers to poison audit logs through delayed payload execution. This lab demonstrates how to leak sensitive diagnoses via batch job error messages using time-triggered subqueries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The device analytics page uses unsanitized input in HAVING conditions with identical success/failure responses. The SQLite backend allows boolean inference through HTTP status codes. To solve: Determine device API keys through binary search character extraction.", "target": "{\"Lab scenario\": \"IoT Dashboard Boolean-Blind SQLi in HAVING Clause\", \"Lab Description\": \"The device analytics page uses unsanitized input in HAVING conditions with identical success/failure responses. The SQLite backend allows boolean inference through HTTP status codes. To solve: Determine device API keys through binary search character extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking portal union-based sqli in transaction sorting", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in Transaction Sorting\", \"Lab Description\": \"The transaction history page directly incorporates user-controlled parameters into PostgreSQL ORDER BY clauses without sanitization. The application leaks column count through verbose error messages in debug mode. To solve: Extract account numbers and balances using NULL-padded UNION payloads while evading WAF restrictions with whitespace obfuscation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot device manager boolean-based blind sqli in sensor filter", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based Blind SQLi in Sensor Filter\", \"Lab Description\": \"Device telemetry dashboard uses unsanitized HAVING clauses in SQLite queries. The application returns HTTP 200/404 status codes through misconfigured REST error handling. To solve: Extract device API keys through bitwise binary search of SUBSTR(hex(key),1,1) comparisons.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Time-Based SQLi via GraphQL Batch Query", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi via GraphQL Batch Query\", \"Lab Description\": \"Headless CMS implements vulnerable resolver that concatenates user input into PostgreSQL pg_sleep() calls. The Java backend leaks timing differentials through N+1 query patterns. To solve: Exfiltrate admin credentials through conditional response delays using DNS-over-HTTPS tunneling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks AWS RDS metadata through geometry function conversion errors. To solve: Extract S3 credentials using ST_GeomFromText() type juggling attacks.", "target": "{\"Lab scenario\": \"API Gateway Error-Based SQLi in JSON Parameter\", \"Lab Description\": \"Inventory management system processes JSON arrays directly in WHERE clauses with MySQL. The application leaks AWS RDS metadata through geometry function conversion errors. To solve: Extract S3 credentials using ST_GeomFromText() type juggling attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal second-order sqli in patient notes", "target": "{\"Lab scenario\": \"Healthcare Portal Second-Order SQLi in Patient Notes\", \"Lab Description\": \"Patient registration system stores unsanitized notes used in nightly HL7 report generation. The PostgreSQL backend allows stacked queries through JDBC batch updates. To solve: Execute reverse shell via COPY FROM PROGRAM during report generation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-commerce union-based sqli with type juggling", "target": "{\"Lab scenario\": \"E-Commerce UNION-Based SQLi with Type Juggling\", \"Lab Description\": \"Product filter uses strict column type validation in MySQL. The application leaks truncated data through JSON encoding errors. To solve: Extract credit card numbers using CONCAT(LPAD()) length exploitation and NULL padding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Boolean-Blind SQLi in Direct Messages", "target": "{\"Lab scenario\": \"Social Media Boolean-Blind SQLi in Direct Messages\", \"Lab Description\": \"Message search functionality uses unsanitized input in SQL Server CONTAINS predicates. The .NET backend reveals query truthiness through emoji reaction counts. To solve: Extract OAuth tokens through BITAND() ASCII comparisons.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: REST API Error-Based SQLi in JWT Claims", "target": "{\"Lab scenario\": \"REST API Error-Based SQLi in JWT Claims\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' directly into SQL Server OPENJSON queries. The application leaks SSNs through XML conversion errors. To solve: Extract encrypted SSNs using JSON_VALUE() type mismatches.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager stacked queries via mqtt", "target": "{\"Lab scenario\": \"IoT Device Manager Stacked Queries via MQTT\", \"Lab Description\": \"Device config updates process MQTT payloads in PostgreSQL without validation. The C++ backend allows stacked queries through libpq's PQexec(). To solve: Execute reverse shell via COPY FROM PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Audit logging system incorporates X-Forwarded-For headers into MySQL INSERTs. The PHP backend reveals query success through UUID patterns. To solve: Extract password hashes using BENCHMARK() timing attacks.", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi in Audit Logs\", \"Lab Description\": \"Audit logging system incorporates X-Forwarded-For headers into MySQL INSERTs. The PHP backend reveals query success through UUID patterns. To solve: Extract password hashes using BENCHMARK() timing attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal UNION-Based SQLi in PDF Export", "target": "{\"Lab scenario\": \"Government Portal UNION-Based SQLi in PDF Export\", \"Lab Description\": \"Report generation feature concatenates user input into PostgreSQL COPY TO statements. The Java backend allows UNION injections in CSV headers. To solve: Exfiltrate classified docs via hex-encoded LOAD_FILE().\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Device telemetry aggregation uses unsanitized HAVING conditions in SQLite queries. The REST API returns HTTP 200 for true conditions and 404 for false through misconfigured rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based Blind SQLi in HAVING Clause\", \"Lab Description\": \"Device telemetry aggregation uses unsanitized HAVING conditions in SQLite queries. The REST API returns HTTP 200 for true conditions and 404 for false through misconfigured rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal time-based sqli in patient lookup", "target": "{\"Lab scenario\": \"Healthcare Portal Time-Based SQLi in Patient Lookup\", \"Lab Description\": \"Patient search functionality uses unsanitized input in MySQL WHERE clauses with identical error pages. The application leaks query truthiness through response timing variations in JSON Web Token generation. To solve: Exfiltrate medical record IDs through conditional SLEEP(3) delays correlated with ASCII value ranges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Product search API processes JSON array filters directly in PostgreSQL WHERE clauses. The Node.js backend allows type confusion attacks through improper array validation. To solve: Bypass parameterized queries using nested JSON objects and extract credit card tokens through base64-encoded UNION payloads.", "target": "{\"Lab scenario\": \"E-Commerce Platform UNION-Based SQLi in JSON Filter\", \"Lab Description\": \"Product search API processes JSON array filters directly in PostgreSQL WHERE clauses. The Node.js backend allows type confusion attacks through improper array validation. To solve: Bypass parameterized queries using nested JSON objects and extract credit card tokens through base64-encoded UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Report generation feature constructs vulnerable COPY queries with user-controlled ORDER BY clauses. The Java backend leaks AWS credentials through verbose PostgreSQL errors containing IAM role details. To solve: Exfiltrate access keys using CTE expressions and forced geometry conversion errors.", "target": "{\"Lab scenario\": \"Government Portal Error-Based SQLi in PDF Export\", \"Lab Description\": \"Report generation feature constructs vulnerable COPY queries with user-controlled ORDER BY clauses. The Java backend leaks AWS credentials through verbose PostgreSQL errors containing IAM role details. To solve: Exfiltrate access keys using CTE expressions and forced geometry conversion errors.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS Second-Order SQLi in User Registration", "target": "{\"Lab scenario\": \"CMS Second-Order SQLi in User Registration\", \"Lab Description\": \"User registration stores unsanitized input used in nightly report generation. The MySQL backend allows stacked queries through batched statement execution. To solve: Trigger delayed reverse shell during batch processing using temp table creation and LOAD_FILE() exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where api gateway union sqli in jwt claim processing", "target": "{\"Lab scenario\": \"API Gateway UNION SQLi in JWT Claim Processing\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' claims directly into SQL Server OPENJSON queries. The .NET backend leaks encrypted SSNs through XML conversion errors. To solve: Extract sensitive data using forced type mismatches in JSON_VALUE() path expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: IoT Sensor Network Boolean-Based SQLi in Data Filtering", "target": "{\"Lab scenario\": \"IoT Sensor Network Boolean-Based SQLi in Data Filtering\", \"Lab Description\": \"Sensor data dashboard uses unsanitized input in HAVING clauses with SQLite. The REST API returns HTTP 200 for true queries through misconfigured row existence checks. To solve: Extract device encryption keys through BITAND() comparisons of SUBSTR(hex(key),1,1) values.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal UNION SQLi in Radiology Reports", "target": "{\"Lab scenario\": \"Healthcare Portal UNION SQLi in Radiology Reports\", \"Lab Description\": \"DICOM report viewer concatenates user input into PostgreSQL ORDER BY clauses. The application leaks sensitive metadata through verbose COPY command errors. To solve: Extract encrypted patient diagnoses using NULL-padded UNION payloads and hex encoding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform error-based sqli in product filter", "target": "{\"Lab scenario\": \"E-Commerce Platform Error-Based SQLi in Product Filter\", \"Lab Description\": \"Product search feature uses unsanitized input in MySQL WHERE clauses. The application leaks database structure through GEOMETRY type conversion errors in MariaDB. To solve: Extract PCI-compliant credit card numbers using ST_GeomFromText() function exploitation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: SOAP endpoint processes XML input with vulnerable XPath extraction into PostgreSQL queries. The Java backend allows UNION injections through CDATA section bypasses. To solve: Exfiltrate classified documents using xmlagg() and base64 encoding.", "target": "{\"Lab scenario\": \"Government API Gateway UNION SQLi in XML Processing\", \"Lab Description\": \"SOAP endpoint processes XML input with vulnerable XPath extraction into PostgreSQL queries. The Java backend allows UNION injections through CDATA section bypasses. To solve: Exfiltrate classified documents using xmlagg() and base64 encoding.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Vehicle telemetry system processes MQTT payloads in PostgreSQL without input validation. The C++ backend allows stacked queries through PQexec() non-atomic execution. To solve: Execute remote code via COPY FROM PROGRAM and establish persistent access.", "target": "{\"Lab scenario\": \"IoT Fleet Management Stacked SQLi via MQTT\", \"Lab Description\": \"Vehicle telemetry system processes MQTT payloads in PostgreSQL without input validation. The C++ backend allows stacked queries through PQexec() non-atomic execution. To solve: Execute remote code via COPY FROM PROGRAM and establish persistent access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Zigbee device management interface constructs SQLite queries with unsanitized HAVING clauses in sensor aggregation reports. The REST API returns HTTP 200/404 status codes through misconfigurened rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.", "target": "{\"Lab scenario\": \"IoT Dashboard Boolean-Blind SQLi in Sensor Filtering\", \"Lab Description\": \"A Zigbee device management interface constructs SQLite queries with unsanitized HAVING clauses in sensor aggregation reports. The REST API returns HTTP 200/404 status codes through misconfigurened rowCount checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where e-commerce platform union sqli in json filter", "target": "{\"Lab scenario\": \"E-Commerce Platform UNION SQLi in JSON Filter\", \"Lab Description\": \"A product search API processes JSON array filters directly in PostgreSQL WHERE clauses through vulnerable Node.js middleware. The application allows type confusion attacks through improper array validation. To solve: Bypass parameterized queries using nested JSON objects and extract PCI tokens through base64-encoded UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where government portal error-based sqli in pdf export", "target": "{\"Lab scenario\": \"Government Portal Error-Based SQLi in PDF Export\", \"Lab Description\": \"A classified document export feature constructs vulnerable COPY queries with user-controlled ORDER BY clauses in PostgreSQL. The Java backend leaks AWS credentials through verbose error messages containing IAM role details. To solve: Exfiltrate access keys using CTE expressions and forced geometry conversion errors.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API Gateway JWT-Based SQLi in Profile Endpoint", "target": "{\"Lab scenario\": \"API Gateway JWT-Based SQLi in Profile Endpoint\", \"Lab Description\": \"A user profile endpoint incorporates JWT 'sub' claims directly into SQL Server OPENJSON queries. The .NET backend leaks encrypted SSNs through XML conversion errors. To solve: Extract sensitive data using forced type mismatches in JSON_VALUE() path expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms platform second-order sqli in scheduled report generation", "target": "{\"Lab scenario\": \"CMS Platform Second-Order SQLi in Scheduled Report Generation\", \"Lab Description\": \"A content management system stores unsanitized user comments that are later used in PostgreSQL queries during nightly report generation. The Node.js backend executes vulnerable SQL statements through a cron job without input validation. To solve: Inject a payload during comment submission that triggers remote code execution via database functions during report processing.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare API Gateway UNION-Based SQLi in Patient Search Endpoint", "target": "{\"Lab scenario\": \"Healthcare API Gateway UNION-Based SQLi in Patient Search Endpoint\", \"Lab Description\": \"A HIPAA-compliant healthcare API contains vulnerable patient search functionality using unsanitized JSON input in WHERE clause construction. The application returns detailed error messages through debug headers and allows UNION operators. To solve: Extract Social Security Numbers from the 'patients' table while bypassing input sanitization that strips quotes and spaces. Successful exploitation requires content-type manipulation and NULL byte injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An online marketplace's product filtering system concatenates user-controlled parameters into GROUP BY clauses without validation. The application provides no direct error feedback but returns HTTP 200 when queries succeed. To solve: Determine administrator password hash through boolean response analysis using bit-shifting techniques and conditional error triggers.", "target": "{\"Lab scenario\": \"E-Commerce Platform Boolean-Blind SQLi in Product Filter GROUP BY\", \"Lab Description\": \"An online marketplace's product filtering system concatenates user-controlled parameters into GROUP BY clauses without validation. The application provides no direct error feedback but returns HTTP 200 when queries succeed. To solve: Determine administrator password hash through boolean response analysis using bit-shifting techniques and conditional error triggers.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A municipal document archive system contains vulnerable LIMIT/OFFSET parameters in its PostgreSQL backend. The application provides no visual feedback but allows stacked queries. To solve: Exfiltrate sensitive tax records through DNS-based out-of-band channel using pg_sleep() conditional delays and COPY TO PROGRAM vector.", "target": "{\"Lab scenario\": \"Government Portal Time-Based SQLi in Document Search Pagination\", \"Lab Description\": \"A municipal document archive system contains vulnerable LIMIT/OFFSET parameters in its PostgreSQL backend. The application provides no visual feedback but allows stacked queries. To solve: Exfiltrate sensitive tax records through DNS-based out-of-band channel using pg_sleep() conditional delays and COPY TO PROGRAM vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A dating application's friend recommendation feature constructs ORDER BY clauses directly from user input. The MySQL backend returns unionized results in JSON responses. To solve: Extract OAuth tokens from the 'sessions' table using column type-matching and hex-encoded payloads while bypassing JSON escaping filters.", "target": "{\"Lab scenario\": \"Social Media Platform UNION SQLi in Friend Search ORDER BY\", \"Lab Description\": \"A dating application's friend recommendation feature constructs ORDER BY clauses directly from user input. The MySQL backend returns unionized results in JSON responses. To solve: Extract OAuth tokens from the 'sessions' table using column type-matching and hex-encoded payloads while bypassing JSON escaping filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking App Error-Based SQLi in Account Balance HAVING Clause", "target": "{\"Lab scenario\": \"Banking App Error-Based SQLi in Account Balance HAVING Clause\", \"Lab Description\": \"A mobile banking web interface contains vulnerable HAVING clause construction in its balance aggregation feature. The Microsoft SQL Server backend returns detailed error messages through verbose logging. To solve: Extract account numbers and balances using error-induced data exfiltration and second-order injection via scheduled transactions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot device manager blind sqli in sensor group filter", "target": "{\"Lab scenario\": \"IoT Device Manager Blind SQLi in Sensor Group Filter\", \"Lab Description\": \"An industrial IoT control panel contains vulnerable input handling in sensor grouping parameters. The SQLite backend provides no error feedback but returns HTTP 404 when queries fail. To solve: Map database schema through boolean response analysis and timing attacks using nested CASE statements and WAL journal analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: REST API UNION SQLi in User Search Endpoint", "target": "{\"Lab scenario\": \"REST API UNION SQLi in User Search Endpoint\", \"Lab Description\": \"A user management REST API contains vulnerable parameter binding in search queries. The PostgreSQL backend allows UNION operators but requires explicit type casting. To solve: Extract bcrypt password hashes using column type coercion and array_agg() functions while bypassing input length restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms time-based sqli in article comment filter", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi in Article Comment Filter\", \"Lab Description\": \"A WordPress-based CMS contains vulnerable comment filtering that allows stacked time-based injections. The MySQL backend has FILE privileges but blocks UNION operators. To solve: Write web shell to server using INTO OUTFILE and execute commands through User-Agent validation bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Inventory System Second-Order SQLi in CSV Export", "target": "{\"Lab scenario\": \"Inventory System Second-Order SQLi in CSV Export\", \"Lab Description\": \"A retail inventory system stores unsanitized user input that gets used in later CSV export queries. The Oracle backend allows PL/SQL injection but filters semicolons. To solve: Poison product descriptions with time-based payloads and trigger export job to execute OS commands via DBMS_SCHEDULER.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: travel booking system out-of-band sqli in loyalty points", "target": "{\"Lab scenario\": \"Travel Booking System Out-of-Band SQLi in Loyalty Points\", \"Lab Description\": \"An airline loyalty program contains vulnerable points redemption logic with MSSQL xp_cmdshell access. The application blocks direct error output but allows DNS-based exfiltration. To solve: Execute reverse shell via SQL injection chain and pivot to internal payment systems using cracked service account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Internal Admin Panel – SQLi in Role Assignment", "target": "{\"Lab scenario\": \"Internal Admin Panel – SQLi in Role Assignment\", \"Lab Description\": \"An internal admin panel allows assigning roles to users through a vulnerable SQL query concatenated with user-controlled input. The input is directly passed to the SQL `UPDATE` query without proper sanitization. An attacker with limited access can escalate privileges by injecting into the role assignment input field. This scenario simulates a common misconfiguration where admin interfaces are assumed safe and are poorly validated.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: payment history portal – sqli in dynamic column filter", "target": "{\"Lab scenario\": \"Payment History Portal – SQLi in Dynamic Column Filter\", \"Lab Description\": \"The application backend allows users to search their payment history by various columns like `amount`, `status`, or `method`. The filter column name is user-controlled and directly used in the SQL query, leading to a classic SQLi vulnerability through the `ORDER BY` clause. An attacker can exploit this to inject malicious SQL and dump the full transaction history or manipulate sorting logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The NGO's donation search feature is vulnerable due to unsanitized use of user input in a `LIKE` clause. Attackers can inject SQL using special characters and extract sensitive donor information such as email addresses, donation amount, and messages. This is a common real-world vulnerability due to poor filter design in keyword searches.", "target": "{\"Lab scenario\": \"NGO Donor Portal – SQLi via Search Field with LIKE\", \"Lab Description\": \"The NGO's donation search feature is vulnerable due to unsanitized use of user input in a `LIKE` clause. Attackers can inject SQL using special characters and extract sensitive donor information such as email addresses, donation amount, and messages. This is a common real-world vulnerability due to poor filter design in keyword searches.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where graphql backend – sql injection in resolver function", "target": "{\"Lab scenario\": \"GraphQL Backend – SQL Injection in Resolver Function\", \"Lab Description\": \"A GraphQL resolver directly includes user input from a search query in the SQL statement, making it vulnerable to SQL injection. The injection point is in the GraphQL `searchProducts(term: String)` operation. Exploiting this can lead to arbitrary SQL execution and access to sensitive product inventory details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Travel Booking – SQLi in Country Filter with Enumeration", "target": "{\"Lab scenario\": \"Travel Booking – SQLi in Country Filter with Enumeration\", \"Lab Description\": \"This application lets users filter travel packages by country. However, the country parameter is unsanitized and directly included in the SQL query. This allows attackers to enumerate packages in other users’ accounts by bypassing country-level access control using injection in the filter parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a high SQL injection lab for: cloud service - sql injection in api key authorization", "target": "{\"Lab scenario\": \"Cloud Service - SQL Injection in API Key Authorization\", \"Lab Description\": \"A cloud service uses a weak implementation for API key lookup. It concatenates the `x-api-key` header value directly into a query. A malicious actor could modify the header and extract data from other tenants’ records or even bypass authentication altogether.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Employee Portal - SQL Injection in Login Field", "target": "{\"Lab scenario\": \"Employee Portal - SQL Injection in Login Field\", \"Lab Description\": \"The login form for internal employee authentication takes the username and password and embeds them directly into a SQL query. There is no use of prepared statements or sanitization, making it highly vulnerable. This classic injection can be used to bypass login and access internal records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where mobile api - sql injection in json body parameter", "target": "{\"Lab scenario\": \"Mobile API - SQL Injection in JSON Body Parameter\", \"Lab Description\": \"The mobile application sends JSON data containing search filters. The backend fails to validate or sanitize the `title` parameter in the JSON body. An attacker could send a malicious JSON payload to inject arbitrary SQL into the backend and retrieve internal documents.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: support chat system - sql injection via cookie parameter", "target": "{\"Lab scenario\": \"Support Chat System - SQL Injection via Cookie Parameter\", \"Lab Description\": \"The application identifies users using a session cookie that is directly passed to a SQL query. If an attacker modifies the cookie value to include SQL, it can be used to retrieve or manipulate chat history, impersonate another user, or drop session tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce API Gateway UNION-Based SQLi in Product Filtering", "target": "{\"Lab scenario\": \"E-Commerce API Gateway UNION-Based SQLi in Product Filtering\", \"Lab Description\": \"A REST API for an online marketplace constructs SQL queries using unsanitized JSON input in WHERE clause parameters. The vulnerable endpoint returns detailed error messages through debug headers and allows UNION operators with explicit type casting. To solve: Extract credit card tokens from the 'payments' table using hex-encoded payloads while bypassing WAF filters that block quote characters and whitespace.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A HIPAA-compliant patient management system constructs HAVING clauses using unsanitized user input with boolean response patterns. The application provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract sensitive medical record IDs using bitwise brute-force techniques and response timing analysis while evading rate limiting controls.", "target": "{\"Lab scenario\": \"Healthcare Portal Blind SQLi in Patient Search HAVING Clause\", \"Lab Description\": \"A HIPAA-compliant patient management system constructs HAVING clauses using unsanitized user input with boolean response patterns. The application provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract sensitive medical record IDs using bitwise brute-force techniques and response timing analysis while evading rate limiting controls.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: banking app error-based sqli in transaction sorting", "target": "{\"Lab scenario\": \"Banking App Error-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A mobile banking application constructs ORDER BY clauses using unsanitized user input with verbose error logging enabled. The Microsoft SQL Server backend leaks database schema information through type conversion errors. To solve: Extract account numbers and balances using nested error-induced data exfiltration and second-order injection via scheduled transaction comments.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot dashboard time-based sqli in device telemetry", "target": "{\"Lab scenario\": \"IoT Dashboard Time-Based SQLi in Device Telemetry\", \"Lab Description\": \"An industrial IoT monitoring system constructs SQL queries using unsanitized device IDs in WHERE clauses. The PostgreSQL backend allows stacked queries with pg_sleep() function access but provides no direct output. To solve: Exfiltrate admin credentials through DNS-based out-of-band channel using conditional time delays and COPY TO PROGRAM vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A content management system constructs SQL queries using unsanitized comment IDs with boolean response patterns. The MySQL backend provides no error messages but returns different HTML templates for true/false conditions. To solve: Extract administrator API keys through bit-shifting brute-force techniques and differential response analysis.", "target": "{\"Lab scenario\": \"CMS Boolean-Based Blind SQLi in Article Comments\", \"Lab Description\": \"A content management system constructs SQL queries using unsanitized comment IDs with boolean response patterns. The MySQL backend provides no error messages but returns different HTML templates for true/false conditions. To solve: Extract administrator API keys through bit-shifting brute-force techniques and differential response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: government portal union sqli in document metadata", "target": "{\"Lab scenario\": \"Government Portal UNION SQLi in Document Metadata\", \"Lab Description\": \"A municipal document archive system constructs SQL queries using unsanitized document IDs with UNION operator support. The Oracle backend requires explicit NULL type casting and provides detailed error messages. To solve: Extract sensitive tax records through multi-stage UNION attacks with column type matching and XML encoding bypasses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where social media platform out-of-band sqli in notifications", "target": "{\"Lab scenario\": \"Social Media Platform Out-of-Band SQLi in Notifications\", \"Lab Description\": \"A social media platform constructs SQL queries using unsanitized notification IDs with MSSQL xp_cmdshell access. The application blocks direct error output but allows DNS-based exfiltration. To solve: Execute reverse shell via SQL injection chain and pivot to internal chat systems using cracked service account credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: education portal second-order sqli in course registration", "target": "{\"Lab scenario\": \"Education Portal Second-Order SQLi in Course Registration\", \"Lab Description\": \"A university portal stores unsanitized user input in course enrollment records that later gets used in batch processing queries. The PostgreSQL backend allows prepared statement bypass through JSON encoding. To solve: Poison course descriptions with time-based payloads and trigger nightly batch job to execute OS commands via COPY TO PROGRAM.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Logistics System Time-Based SQLi in Shipment Tracking", "target": "{\"Lab scenario\": \"Logistics System Time-Based SQLi in Shipment Tracking\", \"Lab Description\": \"A global logistics platform constructs SQL queries using unsanitized tracking numbers in WHERE clauses. The MariaDB backend allows stacked queries with SLEEP() function access but provides no direct output. To solve: Exfiltrate shipment manifests through DNS-based out-of-band channel using conditional time delays and LOAD_FILE() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where hr system union-based sqli in employee search", "target": "{\"Lab scenario\": \"HR System Union-Based SQLi in Employee Search\", \"Lab Description\": \"A corporate HR platform constructs SQL queries using unsanitized search parameters in ORDER BY clauses. The MySQL backend returns unionized results in JSON format with type validation. To solve: Extract salary information and SSNs through multi-stage UNION attacks with explicit type casting and JSON array bypass techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab features a login form in a banking portal that uses unsafe string concatenation to authenticate users. It is vulnerable to time-based blind SQL injection using conditional delays. The application does not return errors or success messages clearly, but response delay can be used to infer success or failure. To solve: Exploit the time delay vulnerability to enumerate the administrator password one character at a time using tools like sqlmap or a custom Python script.", "target": "{\"Lab scenario\": \"Banking Portal Time-Based SQL Injection in Login Authentication\", \"Lab Description\": \"This lab features a login form in a banking portal that uses unsafe string concatenation to authenticate users. It is vulnerable to time-based blind SQL injection using conditional delays. The application does not return errors or success messages clearly, but response delay can be used to infer success or failure. To solve: Exploit the time delay vulnerability to enumerate the administrator password one character at a time using tools like sqlmap or a custom Python script.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking api graphql union-based sqli in transaction history", "target": "{\"Lab scenario\": \"Banking API GraphQL Union-Based SQLi in Transaction History\", \"Lab Description\": \"A financial institution's GraphQL endpoint constructs SQL queries using unsanitized input from 'orderBy' arguments in transaction history requests. The vulnerable implementation uses string concatenation for field sorting and returns full query errors through debug headers. To solve: Exfiltrate account PIN hashes using multi-stage UNION attacks with type coercion and GraphQL alias bypass techniques while evading special character filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An industrial sensor monitoring system constructs HAVING clauses using unsanitized group IDs with boolean response patterns. The SQLite backend provides no direct error feedback but returns HTTP 204 for valid queries. To solve: Extract device admin credentials using bitwise brute-force techniques and differential timing analysis while bypassing request throttling limits.", "target": "{\"Lab scenario\": \"IoT Device Boolean-Blind SQLi in Sensor Group HAVING Clause\", \"Lab Description\": \"An industrial sensor monitoring system constructs HAVING clauses using unsanitized group IDs with boolean response patterns. The SQLite backend provides no direct error feedback but returns HTTP 204 for valid queries. To solve: Extract device admin credentials using bitwise brute-force techniques and differential timing analysis while bypassing request throttling limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare portal time-based sqli in patient search limit clause", "target": "{\"Lab scenario\": \"Healthcare Portal Time-Based SQLi in Patient Search LIMIT Clause\", \"Lab Description\": \"A medical records system constructs LIMIT/OFFSET clauses using unsanitized pagination parameters with PostgreSQL backend. The application provides no visual feedback but allows stacked queries with pg_sleep(). To solve: Exfiltrate sensitive diagnosis codes through DNS-based out-of-band channel using conditional time delays and COPY TO PROGRAM vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce Platform Union-Based SQLi in Product Filter ORDER BY", "target": "{\"Lab scenario\": \"E-Commerce Platform Union-Based SQLi in Product Filter ORDER BY\", \"Lab Description\": \"An online marketplace constructs ORDER BY clauses using unsanitized JSON input parameters with MSSQL backend. The vulnerable endpoint returns detailed type conversion errors through debug headers. To solve: Extract credit card tokens using multi-stage UNION attacks with explicit type casting and FOR JSON PATH output bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where government portal second-order sqli in document comments", "target": "{\"Lab scenario\": \"Government Portal Second-Order SQLi in Document Comments\", \"Lab Description\": \"A municipal document system stores unsanitized user input in comment metadata that later gets used in report generation queries. The Oracle backend allows DBMS_SCHEDULER access but filters semicolons. To solve: Poison document metadata with time-based payloads and trigger PDF export to execute OS commands via external tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A financial REST API endpoint vulnerable to SQL injection in the 'sort' parameter of transaction history requests. The application constructs ORDER BY clauses using unsanitized user input and returns detailed error messages through debug headers. The Microsoft SQL Server backend requires precise type matching for UNION attacks. To solve: Extract account numbers and balances using column type coercion and error-based data exfiltration while bypassing WAF filters that block UNION operators.", "target": "{\"Lab scenario\": \"Banking API UNION-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A financial REST API endpoint vulnerable to SQL injection in the 'sort' parameter of transaction history requests. The application constructs ORDER BY clauses using unsanitized user input and returns detailed error messages through debug headers. The Microsoft SQL Server backend requires precise type matching for UNION attacks. To solve: Extract account numbers and balances using column type coercion and error-based data exfiltration while bypassing WAF filters that block UNION operators.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An industrial control system vulnerable to boolean-based blind SQL injection in the device grouping parameter. The PostgreSQL backend provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract admin credentials through bitwise brute-force techniques and differential response analysis while evading HTTP request throttling limits.", "target": "{\"Lab scenario\": \"IoT Dashboard Blind SQLi in Device Group Filter\", \"Lab Description\": \"An industrial control system vulnerable to boolean-based blind SQL injection in the device grouping parameter. The PostgreSQL backend provides no direct error feedback but returns different HTTP status codes for true/false conditions. To solve: Extract admin credentials through bitwise brute-force techniques and differential response analysis while evading HTTP request throttling limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal Time-Based SQLi in Patient Search", "target": "{\"Lab scenario\": \"Healthcare Portal Time-Based SQLi in Patient Search\", \"Lab Description\": \"A medical records system vulnerable to stacked time-based SQL injection in pagination parameters. The MySQL backend allows delayed query execution but filters UNION operators. To solve: Exfiltrate sensitive diagnosis codes through DNS-based out-of-band channel using conditional SLEEP() statements and LOAD_FILE() function while bypassing file privilege restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An online marketplace vulnerable to verbose error-based SQL injection in JSON search parameters. The Oracle backend leaks database schema through unhandled type conversion errors. To solve: Extract credit card tokens using nested error-induced data exfiltration and second-order injection via product review comments.", "target": "{\"Lab scenario\": \"E-Commerce Platform Error-Based SQLi in Product Filter\", \"Lab Description\": \"An online marketplace vulnerable to verbose error-based SQL injection in JSON search parameters. The Oracle backend leaks database schema through unhandled type conversion errors. To solve: Extract credit card tokens using nested error-induced data exfiltration and second-order injection via product review comments.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: cms second-order sqli in user registration", "target": "{\"Lab scenario\": \"CMS Second-Order SQLi in User Registration\", \"Lab Description\": \"A content management system stores unsanitized user input during registration that later gets used in password reset queries. The SQLite backend allows stacked queries but filters semicolons. To solve: Poison user metadata with time-based payloads and trigger password reset to execute OS commands via ATTACH DATABASE vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Government Portal Union-Based SQLi in Document Metadata", "target": "{\"Lab scenario\": \"Government Portal Union-Based SQLi in Document Metadata\", \"Lab Description\": \"A municipal records system constructs SQL queries using unsanitized document IDs in SELECT clauses. The PostgreSQL backend requires explicit type casting for UNION operators and returns JSON-formatted results. To solve: Extract sensitive tax records through multi-stage type-coerced UNION attacks and XML encoding bypasses while evading content security policies.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where social media platform time-based sqli in notifications", "target": "{\"Lab scenario\": \"Social Media Platform Time-Based SQLi in Notifications\", \"Lab Description\": \"A social network vulnerable to stacked time-based injection in notification tracking parameters. The MySQL backend allows delayed query execution but filters UNION operators. To solve: Exfiltrate private messages through DNS-based out-of-band channel using conditional BENCHMARK() delays and INTO OUTFILE vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare api boolean-blind sqli in patient search", "target": "{\"Lab scenario\": \"Healthcare API Boolean-Blind SQLi in Patient Search\", \"Lab Description\": \"A HIPAA-compliant patient portal vulnerable to boolean-based blind injection in JSON search parameters. The Microsoft SQL Server backend provides no error feedback but returns different HTTP status codes. To solve: Extract medical record numbers through bitwise brute-force techniques and differential header analysis while bypassing request rate limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce Platform Second-Order SQLi in Product Reviews", "target": "{\"Lab scenario\": \"E-Commerce Platform Second-Order SQLi in Product Reviews\", \"Lab Description\": \"An online marketplace stores unsanitized user input in product reviews that later gets used in inventory queries. The SQLite backend allows stacked queries through multiple statement execution. To solve: Poison review content with time-based payloads and trigger inventory export to execute OS commands via ATTACH DATABASE vector.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An industrial IoT controller vulnerable to verbose error-based injection in firmware version parameters. The MySQL backend leaks schema information through unhandled constraint violations. To solve: Extract device credentials through nested error-induced data exfiltration and second-order injection via configuration backups.", "target": "{\"Lab scenario\": \"IoT Device Error-Based SQLi in Firmware Updates\", \"Lab Description\": \"An industrial IoT controller vulnerable to verbose error-based injection in firmware version parameters. The MySQL backend leaks schema information through unhandled constraint violations. To solve: Extract device credentials through nested error-induced data exfiltration and second-order injection via configuration backups.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: education portal boolean-based sqli in gradebook having clause", "target": "{\"Lab scenario\": \"Education Portal Boolean-Based SQLi in Gradebook HAVING Clause\", \"Lab Description\": \"A university grading system vulnerable to boolean-based injection in assignment grouping parameters. The MySQL backend provides no direct error feedback but returns different CSV formats for true/false conditions. To solve: Extract student SSNs through differential response analysis and bit-shifting brute-force techniques while evading request throttling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Logistics System Time-Based SQLi in Shipment Tracking", "target": "{\"Lab scenario\": \"Logistics System Time-Based SQLi in Shipment Tracking\", \"Lab Description\": \"A package tracking system vulnerable to stacked time-based injection in tracking number parameters. The SQLite backend allows delayed query execution through randomblob() function. To solve: Exfiltrate shipment manifests through response timing analysis and filesystem operations via LOAD_EXTENSION attacks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where healthcare iot device blind sqli in sensor calibration", "target": "{\"Lab scenario\": \"Healthcare IoT Device Blind SQLi in Sensor Calibration\", \"Lab Description\": \"A medical device calibration interface vulnerable to boolean-based blind injection in firmware version parameters. The SQLite backend provides no error feedback but returns different calibration status codes. To solve: Extract device admin credentials through bitwise brute-force and statistical response analysis while bypassing HMAC validation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: e-commerce cms second-order sqli in product imports", "target": "{\"Lab scenario\": \"E-Commerce CMS Second-Order SQLi in Product Imports\", \"Lab Description\": \"A product management system vulnerable to second-order injection through CSV import functionality. The MySQL backend executes stored procedures using unsanitized import metadata. To solve: Poison product descriptions with stacked query payloads and trigger inventory sync to execute OS commands via sys_exec() UDF.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Mobile App Union-Based SQLi in Transaction Sorting", "target": "{\"Lab scenario\": \"Banking Mobile App Union-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A mobile banking application vulnerable to UNION-based injection in the transaction history sorting parameter. The MySQL backend returns verbose errors through debug build flags. To solve: Extract account PIN hashes using multi-phase type coercion and JSON array bypass techniques while evading mobile API signature checks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: healthcare iot device blind sqli in patient monitoring", "target": "{\"Lab scenario\": \"Healthcare IoT Device Blind SQLi in Patient Monitoring\", \"Lab Description\": \"A medical IoT hub vulnerable to time-based blind injection in patient vital aggregation. The SQLite backend allows stacked queries through firmware debugging interfaces. To solve: Exfiltrate PHI data through differential power analysis of query execution times and EMF side-channel leakage.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Transaction history endpoint concatenates the user‑supplied `sort` parameter directly into the SQL `ORDER BY` clause without any sanitization. Due to verbose debug logging and error leakage, failed injections reveal column counts and types. The application fails open, returning query results even when extra columns are included. To solve: retrieve the database version string by injecting a UNION SELECT payload into the `sort` parameter.", "target": "{\"Lab scenario\": \"Banking portal UNION-based SQL injection in transaction history ORDER BY clause\", \"Lab Description\": \"Transaction history endpoint concatenates the user‑supplied `sort` parameter directly into the SQL `ORDER BY` clause without any sanitization. Due to verbose debug logging and error leakage, failed injections reveal column counts and types. The application fails open, returning query results even when extra columns are included. To solve: retrieve the database version string by injecting a UNION SELECT payload into the `sort` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS UNION-based SQL injection in article analytics GROUP BY clause", "target": "{\"Lab scenario\": \"CMS UNION-based SQL injection in article analytics GROUP BY clause\", \"Lab Description\": \"Article analytics endpoint groups pageviews by an unsanitized `group` parameter in the `GROUP BY` clause. Error leakage reveals grouping errors and allowed column names. The application logs full stack traces. To solve: extract administrator email from `users` table via UNION SELECT in the `group` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: api gateway union-based sql injection in graphql resolver", "target": "{\"Lab scenario\": \"API gateway UNION-based SQL injection in GraphQL resolver\", \"Lab Description\": \"A GraphQL `posts(filter)` resolver directly interpolates the `filter` argument into a PostgreSQL query without sanitization. Failed injections leak timing and errors. To solve: enumerate database tables by injecting a UNION SELECT in the `filter` argument.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where iot dashboard union-based sql injection in device status rest endpoint", "target": "{\"Lab scenario\": \"IoT dashboard UNION-based SQL injection in device status REST endpoint\", \"Lab Description\": \"The `/devices/:id/status` REST endpoint interpolates the `id` path parameter into a MySQL query without sanitization. Error messages reveal file paths. To solve: extract device secret key from `iot_keys` table via UNION SELECT in the `id` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: enterprise soap api union-based sql injection in getuserdetails", "target": "{\"Lab scenario\": \"Enterprise SOAP API UNION-based SQL injection in getUserDetails\", \"Lab Description\": \"A SOAP API `/soap` endpoint parses XML input and directly concatenates the `<userId>` element into an SQL query without sanitization. Verbose XML parser errors leak SQL. To solve: retrieve the list of roles from `user_roles` via a UNION SELECT injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social media platform UNION-based SQL injection in comment search", "target": "{\"Lab scenario\": \"Social media platform UNION-based SQL injection in comment search\", \"Lab Description\": \"The comment search feature accepts a `q` parameter which is directly used in a DELETE statement for moderation logs. Error-based feedback leaks query syntax. To solve: exfiltrate OAuth tokens from `oauth_tokens` via UNION SELECT injection in the `q` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Cloud storage API UNION-based SQL injection in JSONB metadata", "target": "{\"Lab scenario\": \"Cloud storage API UNION-based SQL injection in JSONB metadata\", \"Lab Description\": \"File metadata endpoint accepts a JSON payload and uses `jsonb_extract_path_text()` directly in an SQL query without sanitization. Error leakage reveals JSON path errors. To solve: extract AWS credentials from `aws_creds` via UNION SELECT injection in the JSON path.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: government portal union-based sql injection in document search order by", "target": "{\"Lab scenario\": \"Government portal UNION-based SQL injection in document search ORDER BY\", \"Lab Description\": \"Classified document search uses the `sort` parameter unsafely in an Oracle `ORDER BY` clause. Verbose errors leak OOB function calls. To solve: exfiltrate `blueprints` table filenames via UNION SELECT injection in the `sort` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E‑commerce REST API UNION-based SQL injection in product search", "target": "{\"Lab scenario\": \"E‑commerce REST API UNION-based SQL injection in product search\", \"Lab Description\": \"Product search endpoint uses the `name` query parameter directly in an SQLite query. Error messages leak schema. To solve: enumerate table names via UNION SELECT injection in the `name` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking portal OOB UNION-based SQL injection in audit logs", "target": "{\"Lab scenario\": \"Banking portal OOB UNION-based SQL injection in audit logs\", \"Lab Description\": \"Audit log retrieval endpoint uses the `id` parameter in a MySQL query unsafely. OOB DNS exfiltration is possible via `LOAD_FILE` and a DNS-triggered webhook. To solve: exfiltrate administrator password hash using out-of-band injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Login endpoint uses unsanitized `username` and `password` in an SQLite query. No error messages are shown, but login success/failure differs. To solve: infer the administrator's password length and characters via Boolean-based blind SQL injections.", "target": "{\"Lab scenario\": \"User login Boolean-based blind SQL injection in banking portal\", \"Lab Description\": \"Login endpoint uses unsanitized `username` and `password` in an SQLite query. No error messages are shown, but login success/failure differs. To solve: infer the administrator's password length and characters via Boolean-based blind SQL injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium SQL injection lab for: iot dashboard boolean-based blind sql injection in having clause", "target": "{\"Lab scenario\": \"IoT dashboard Boolean-based blind SQL injection in HAVING clause\", \"Lab Description\": \"Device analytics endpoint uses a `HAVING` clause with unsanitized input. Responses return HTTP 200 if rows exist and 404 otherwise, without errors. To solve: extract API keys via Boolean-based blind injections in the `having` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Audit middleware logs the `X-Forwarded-For` header directly into an INSERT without sanitization. It suppresses errors but uses UUID generation time as a proxy: longer insertion times indicate true conditions. To solve: extract admin password hash using Boolean blind injections and timing side channels.", "target": "{\"Lab scenario\": \"CMS header-based Boolean blind SQL injection in audit logs\", \"Lab Description\": \"Audit middleware logs the `X-Forwarded-For` header directly into an INSERT without sanitization. It suppresses errors but uses UUID generation time as a proxy: longer insertion times indicate true conditions. To solve: extract admin password hash using Boolean blind injections and timing side channels.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social media Boolean-based blind SQL injection in DM search", "target": "{\"Lab scenario\": \"Social media Boolean-based blind SQL injection in DM search\", \"Lab Description\": \"Direct message search uses unsanitized input in a SQL Server `CONTAINS` predicate. No errors are shown, but the number of emoji reactions in responses indicate true/false. To solve: extract OAuth token characters via Boolean blind injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API gateway Boolean-based blind SQL injection in JSON filters", "target": "{\"Lab scenario\": \"API gateway Boolean-based blind SQL injection in JSON filters\", \"Lab Description\": \"Inventory search endpoint takes a JSON array of filter strings, concatenates them into a MySQL `WHERE` clause, and leaks full error messages. No direct errors are shown, but differing HTTP status codes indicate true/false. To solve: extract AWS secret key characters via Boolean blind injections in JSON filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Course enrollment endpoint takes `student_id` unsafely in an SQLite query. The application returns identical pages, but time delays (via `randomblob`) reveal true conditions. To solve: extract exam answer characters via time-based inference.", "target": "{\"Lab scenario\": \"Educational platform time-based SQL injection in enrollment\", \"Lab Description\": \"Course enrollment endpoint takes `student_id` unsafely in an SQLite query. The application returns identical pages, but time delays (via `randomblob`) reveal true conditions. To solve: extract exam answer characters via time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: healthcare portal time-based sql injection in get-medications", "target": "{\"Lab scenario\": \"Healthcare portal time-based SQL injection in get-medications\", \"Lab Description\": \"Patient portal uses an Oracle query to retrieve medications by `patientId` without sanitization. Responses return HTTP 200 or 404 based on row count; time delays (via `DBMS_PIPE.RECEIVE_MESSAGE`) reveal true conditions. To solve: extract allergy info characters via time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: banking portal time-based sql injection in account balance query", "target": "{\"Lab scenario\": \"Banking portal time-based SQL injection in account balance query\", \"Lab Description\": \"Balance check endpoint takes `id` unsafely into an SQLite query. Identical responses are returned except for time delay when `SLEEP` is invoked. To solve: infer account balance digits via time-based injections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: oauth callback time-based sql injection in banking app", "target": "{\"Lab scenario\": \"OAuth callback time-based SQL injection in banking app\", \"Lab Description\": \"OAuth callback endpoint uses `state` directly in an SQLite query. Identical redirects occur, but time delays (via `randomblob`) reveal true conditions. To solve: extract user PIN digits via time-based inference on the `state` parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking Portal UNION-Based SQLi in Transaction Sorting", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in Transaction Sorting\", \"Lab Description\": \"A financial application constructs ORDER BY clauses using unsanitized user input in transaction history queries. The PostgreSQL backend leaks column types through verbose error messages containing full query syntax. To solve: Extract SHA-256 hashed account PINs from the vault table while bypassing JSON output encoding using explicit type casting and NULL padding in UNION payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: iot device manager boolean-based sqli in sensor filter", "target": "{\"Lab scenario\": \"IoT Device Manager Boolean-Based SQLi in Sensor Filter\", \"Lab Description\": \"An industrial control system processes unsanitized group IDs in HAVING clauses of SQLite queries. The REST API returns HTTP 200/404 status codes through misconfigured row existence checks. To solve: Extract AWS IoT Core certificates via bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using automated response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Modbus-TCP sensor network dashboard uses unsanitized HAVING clauses in SQLite queries. The REST API returns HTTP 200/404 through row existence checks. To solve: Extract encryption keys via BITAND() comparisons of SUBSTR(hex(key),1,1) values with Python automation.", "target": "{\"Lab scenario\": \"Industrial IoT Boolean-Based SQLi in Sensor Filter\", \"Lab Description\": \"A Modbus-TCP sensor network dashboard uses unsanitized HAVING clauses in SQLite queries. The REST API returns HTTP 200/404 through row existence checks. To solve: Extract encryption keys via BITAND() comparisons of SUBSTR(hex(key),1,1) values with Python automation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An OAuth 2.0 handler incorporates state parameters directly into SQLite queries. The Go backend leaks query execution time through improper transaction timing. To solve: Exfiltrate transaction PINs using CASE WHEN delays and statistical response analysis.", "target": "{\"Lab scenario\": \"Banking App Time-Based SQLi in OAuth Flow\", \"Lab Description\": \"An OAuth 2.0 handler incorporates state parameters directly into SQLite queries. The Go backend leaks query execution time through improper transaction timing. To solve: Exfiltrate transaction PINs using CASE WHEN delays and statistical response analysis.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A DICOM report viewer concatenates user input into PostgreSQL ORDER BY clauses. The application leaks sensitive metadata through verbose COPY errors. To solve: Extract encrypted diagnoses using NULL-padded UNION payloads and hex encoding with CHR(9) bypass.", "target": "{\"Lab scenario\": \"Healthcare Portal UNION SQLi in Radiology Export\", \"Lab Description\": \"A DICOM report viewer concatenates user input into PostgreSQL ORDER BY clauses. The application leaks sensitive metadata through verbose COPY errors. To solve: Extract encrypted diagnoses using NULL-padded UNION payloads and hex encoding with CHR(9) bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: User profile endpoint incorporates JWT 'sub' directly into SQL Server OPENJSON queries. The application leaks SSNs through XML conversion errors. To solve: Extract encrypted SSNs using JSON_VALUE() type mismatches and 'none' algorithm bypass.", "target": "{\"Lab scenario\": \"REST API Error-Based SQLi in JWT Claims\", \"Lab Description\": \"User profile endpoint incorporates JWT 'sub' directly into SQL Server OPENJSON queries. The application leaks SSNs through XML conversion errors. To solve: Extract encrypted SSNs using JSON_VALUE() type mismatches and 'none' algorithm bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cms header-based blind sqli in audit logs", "target": "{\"Lab scenario\": \"CMS Header-Based Blind SQLi in Audit Logs\", \"Lab Description\": \"Audit logging system incorporates X-Forwarded-For headers into MySQL INSERTs. The PHP backend reveals query success through UUID patterns. To solve: Extract password hashes using BENCHMARK() timing attacks and rainbow table reversal.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A telecommunications REST API vulnerable to SQL injection in 'orderBy' arguments. The PostgreSQL backend requires type coercion for UNION attacks. To solve: Extract SMS content using json_agg() and hstore_to_json() conversions with CSP bypass.", "target": "{\"Lab scenario\": \"Telecom API Gateway UNION-Based SQLi in Call Log Sorting\", \"Lab Description\": \"A telecommunications REST API vulnerable to SQL injection in 'orderBy' arguments. The PostgreSQL backend requires type coercion for UNION attacks. To solve: Extract SMS content using json_agg() and hstore_to_json() conversions with CSP bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A university grading system processes unsanitized group IDs in HAVING clauses. The MySQL backend returns different CSV headers for true/false conditions. To solve: Extract student SSNs through bitwise brute-force and aiohttp parallel requests.", "target": "{\"Lab scenario\": \"Education Portal Boolean-Based SQLi in Gradebook\", \"Lab Description\": \"A university grading system processes unsanitized group IDs in HAVING clauses. The MySQL backend returns different CSV headers for true/false conditions. To solve: Extract student SSNs through bitwise brute-force and aiohttp parallel requests.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where healthcare iot device error-based sqli in firmware", "target": "{\"Lab scenario\": \"Healthcare IoT Device Error-Based SQLi in Firmware\", \"Lab Description\": \"A medical device calibration interface vulnerable to verbose error-based injection. The MySQL backend leaks schema through constraint violations. To solve: Extract credentials through nested error-induced exfiltration and HMAC bypass.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where banking portal union-based sql injection in order by clause with waf bypass", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQL Injection in ORDER BY Clause with WAF Bypass\", \"Lab Description\": \"The vulnerable banking application uses dynamic SQL queries in transaction sorting functionality without input validation. The `GET /transactions` endpoint concatenates user-controlled `sort` parameter directly into an ORDER BY clause. The WAF filters common UNION and WAITFOR DELAY keywords. To solve: 1) Bypass WAF using JSON unicode escaping 2) Determine column count with null-byte termination 3) Extract IBAN numbers from hidden accounts table 4) Maintain stealth using time-delayed exfiltration.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: IoT Dashboard Boolean-Based Blind SQLi in HAVING Clause with JSON Input", "target": "{\"Lab scenario\": \"IoT Dashboard Boolean-Based Blind SQLi in HAVING Clause with JSON Input\", \"Lab Description\": \"A smart home management system vulnerable to blind SQL injection through JSON-encoded device filter parameters. The application constructs dynamic HAVING clauses from unvalidated user input. No direct error feedback but returns HTTP 204 when queries return empty. Target: Extract admin API keys from device_config table using boolean inference. Constraints: WAF blocks 'UNION' and 'SLEEP' keywords.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A document management system vulnerable to out-of-band SQL injection through SOAP-based PDF generation. The application concatenates user-controlled CSS selectors into XML-style queries. No direct output but supports stacked queries. Target: Extract SMTP credentials through DNS exfiltration. Constraints: 10ms time delay threshold for detection systems.", "target": "{\"Lab scenario\": \"CMS Time-Based SQLi in PDF Export Function (SOAP API)\", \"Lab Description\": \"A document management system vulnerable to out-of-band SQL injection through SOAP-based PDF generation. The application concatenates user-controlled CSS selectors into XML-style queries. No direct output but supports stacked queries. Target: Extract SMTP credentials through DNS exfiltration. Constraints: 10ms time delay threshold for detection systems.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a hard SQL injection lab for: banking api union-based sqli in graphql query parameter with type validation", "target": "{\"Lab scenario\": \"Banking API UNION-Based SQLi in GraphQL Query Parameter with Type Validation\", \"Lab Description\": \"A financial service GraphQL endpoint vulnerable to type confusion SQL injection. The application uses weak type validation on transaction search parameters. Target: Extract SWIFT codes through nested UNION queries. Constraints: Strict Content-Type validation (application/graphql+json) and per-query complexity limits.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: healthcare portal error-based sqli in xml export function", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in XML Export Function\", \"Lab Description\": \"A patient record system vulnerable to error-based injection through malformed XML namespace declarations. The application uses XQuery with improper input sanitization. Target: Extract PHI data through verbose error messages. Constraints: Limited to 512-byte error messages and filtered quote characters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A product review moderation interface vulnerable to second-order injection through scheduled batch processing. Malicious payloads stored in review comments get executed during nightly aggregation. Target: Poison product rating calculations. Constraints: Input filtered through OWASP Java Encoder in web layer.", "target": "{\"Lab scenario\": \"E-Commerce Platform Second-Order SQLi in Product Review System\", \"Lab Description\": \"A product review moderation interface vulnerable to second-order injection through scheduled batch processing. Malicious payloads stored in review comments get executed during nightly aggregation. Target: Poison product rating calculations. Constraints: Input filtered through OWASP Java Encoder in web layer.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where government portal stacked query sqli in csv export function", "target": "{\"Lab scenario\": \"Government Portal Stacked Query SQLi in CSV Export Function\", \"Lab Description\": \"A public records system vulnerable to stacked queries through unparameterized CSV header processing. Attackers can execute multiple statements via malicious column names. Target: Modify voter registration records through UPDATE injection. Constraints: 30-second query timeout.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where social media platform boolean-based blind sqli in websocket handshake", "target": "{\"Lab scenario\": \"Social Media Platform Boolean-Based Blind SQLi in WebSocket Handshake\", \"Lab Description\": \"A chat application vulnerable to blind injection through WebSocket protocol headers. The application validates JWT tokens via unsafe SQL queries. Target: Extract OAuth client secrets through bitwise response analysis. Constraints: 512-byte WebSocket frame limit.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a medium SQL injection lab for: university system time-based sqli in exam scheduling", "target": "{\"Lab scenario\": \"University System Time-Based SQLi in Exam Scheduling\", \"Lab Description\": \"A course management portal vulnerable to blind time-based injection through iCal export parameters. The application uses PostgreSQL's pg_sleep() for rate limiting. Target: Extract exam answers through conditional delays. Constraints: Maximum 3 parallel database connections.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: retail pos system union-based sqli in barcode lookup", "target": "{\"Lab scenario\": \"Retail POS System UNION-Based SQLi in Barcode Lookup\", \"Lab Description\": \"A point-of-sale terminal vulnerable to UNION injection through padded barcode values. The application truncates input after 12 digits but allows hex encoding. Target: Export daily transaction totals. Constraints: MariaDB strict_mode enabled.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Airline Booking System Out-of-Band SQLi in Seat Selection", "target": "{\"Lab scenario\": \"Airline Booking System Out-of-Band SQLi in Seat Selection\", \"Lab Description\": \"A flight reservation interface vulnerable to DNS exfiltration through XML seat map processing. The application uses SQL Server's OPENROWSET for third-party integrations. Target: Steal passenger passport numbers. Constraints: Outbound ICMP blocking.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where cryptocurrency exchange error-based sqli in tradingview webhook", "target": "{\"Lab scenario\": \"Cryptocurrency Exchange Error-Based SQLi in TradingView Webhook\", \"Lab Description\": \"A digital asset platform vulnerable to verbose error injection through TradingView alert webhooks. The application uses MongoDB $where clauses with SQL emulation. Target: Extract cold wallet addresses through intentional type errors. Constraints: Disabled xp_cmdshell.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where medical device http header sqli in firmware update", "target": "{\"Lab scenario\": \"Medical Device HTTP Header SQLi in Firmware Update\", \"Lab Description\": \"An IoT insulin pump vulnerable to header injection through malformed X-Device-ID values. The application uses unsanitized headers in diagnostic queries. Target: Modify dosage thresholds through UPDATE statements. Constraints: 8KB maximum header size.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Video Platform JWT Claim SQLi in Recommendation Engine", "target": "{\"Lab scenario\": \"Video Platform JWT Claim SQLi in Recommendation Engine\", \"Lab Description\": \"A streaming service vulnerable to JWT claim injection in personalized content queries. The application decodes JWT without validation and uses claims in SQL. Target: Manipulate recommendation algorithms. Constraints: HMAC signature verification enabled.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: A logistics platform vulnerable to injection via malformed CSV metadata headers during bulk uploads. The application uses user-provided column names in dynamic ORDER BY clauses. Target: Exfiltrate shipment manifests to attacker-controlled FTP. Constraints: Input sanitized with regex [A-Za-z0-9_].", "target": "{\"Lab scenario\": \"Supply Chain Management UNION-Based SQLi in CSV Import Validation\", \"Lab Description\": \"A logistics platform vulnerable to injection via malformed CSV metadata headers during bulk uploads. The application uses user-provided column names in dynamic ORDER BY clauses. Target: Exfiltrate shipment manifests to attacker-controlled FTP. Constraints: Input sanitized with regex [A-Za-z0-9_].\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: quantum computing lab blind sqli in qubit calibration api", "target": "{\"Lab scenario\": \"Quantum Computing Lab Blind SQLi in Qubit Calibration API\", \"Lab Description\": \"A quantum research interface vulnerable to time-based injection through qubit measurement parameters. The application uses PostgreSQL geometric functions for calibration. Target: Steal experimental data through conditional Grover's algorithm delays. Constraints: 5ms quantum processor jitter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: 5G Core Network Out-of-Band SQLi in UE Configuration", "target": "{\"Lab scenario\": \"5G Core Network Out-of-Band SQLi in UE Configuration\", \"Lab Description\": \"A mobile core AMF vulnerable to DNS exfiltration through invalid SUPI format handling. The application uses SQL to validate subscriber equipment. Target: Extract IMSI/K values through GTP-C echo requests. Constraints: 128-byte DNS TXT record limit.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: blockchain oracle time-based sqli in price feed consensus", "target": "{\"Lab scenario\": \"Blockchain Oracle Time-Based SQLi in Price Feed Consensus\", \"Lab Description\": \"A DeFi price oracle vulnerable to blind injection through TCR consensus parameters. The application uses SQL to calculate median prices across nodes. Target: Manipulate ETH/USD pricing through conditional response delays. Constraints: Byzantine fault tolerance checks.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Military Drone Controller SQLi in Geofence Validation", "target": "{\"Lab scenario\": \"Military Drone Controller SQLi in Geofence Validation\", \"Lab Description\": \"A UAV navigation system vulnerable to injection through MGRS coordinate parameters. The application uses spatial SQL queries for no-fly zone checks. Target: Disable geofencing through WHERE clause poisoning. Constraints: Embedded SQLite with write-ahead logging.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: ai voice assistant boolean-based sqli in wake word processing", "target": "{\"Lab scenario\": \"AI Voice Assistant Boolean-Based SQLi in Wake Word Processing\", \"Lab Description\": \"A smart speaker system vulnerable to injection through manipulated phoneme analysis results. The application converts speech to text using vulnerable regex patterns. Target: Extract voice profile hashes through differential response timing. Constraints: Limited to 16-bit audio sampling.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A DeFi protocol vulnerable to nested queries through Ethereum event log parsing. The application stores approval events in SQL using Web3.js callbacks. Target: Drain liquidity pools through recursive balance updates. Constraints: Gas limit restrictions.", "target": "{\"Lab scenario\": \"Smart Contract Reentrancy SQLi in ERC-20 Approval Event\", \"Lab Description\": \"A DeFi protocol vulnerable to nested queries through Ethereum event log parsing. The application stores approval events in SQL using Web3.js callbacks. Target: Drain liquidity pools through recursive balance updates. Constraints: Gas limit restrictions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where mars rover blind sqli in telemetry compression", "target": "{\"Lab scenario\": \"Mars Rover Blind SQLi in Telemetry Compression\", \"Lab Description\": \"A planetary exploration system vulnerable to time-based injection through lossy data compression parameters. The application uses SQLite for storing sensor readings. Target: Exfiltrate mineral analysis results through conditional CRC errors. Constraints: 22-minute light delay.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Holographic Display UNION-Based SQLi in 3D Vertex Processing", "target": "{\"Lab scenario\": \"Holographic Display UNION-Based SQLi in 3D Vertex Processing\", \"Lab Description\": \"A volumetric display system vulnerable to injection through manipulated mesh coordinates. The application uses PostgreSQL geometric types for hologram rendering. Target: Project database contents through RGB vertex encoding. Constraints: 30fps rendering pipeline.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A neural implant system vulnerable to injection through manipulated alpha wave patterns. The application uses SQL to map brain signals to commands. Target: Extract research participant PII through induced visual cortex stimulation. Constraints: 256Hz sampling rate limit.", "target": "{\"Lab scenario\": \"Brain-Computer Interface Time-Based SQLi in EEG Pattern Matching\", \"Lab Description\": \"A neural implant system vulnerable to injection through manipulated alpha wave patterns. The application uses SQL to map brain signals to commands. Target: Extract research participant PII through induced visual cortex stimulation. Constraints: 256Hz sampling rate limit.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Portal Error-Based SQLi in XML Export", "target": "{\"Lab scenario\": \"Healthcare Portal Error-Based SQLi in XML Export\", \"Lab Description\": \"Exploit XQuery injection through malformed XML namespaces to extract PHI data via verbose errors\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Manipulate ETH/USD pricing via conditional delays in DeFi median calculations", "target": "{\"Lab scenario\": \"Blockchain Oracle Time-Based SQLi\", \"Lab Description\": \"Manipulate ETH/USD pricing via conditional delays in DeFi median calculations\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Military Drone Geofence SQLi", "target": "{\"Lab scenario\": \"Military Drone Geofence SQLi\", \"Lab Description\": \"Bypass UAV no-fly zones through MGRS coordinate injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: AI Voice Assistant Boolean SQLi", "target": "{\"Lab scenario\": \"AI Voice Assistant Boolean SQLi\", \"Lab Description\": \"Exfiltrate voice profiles through phoneme pattern analysis\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Skim royalties through metadata injection in tokenURI", "target": "{\"Lab scenario\": \"NFT Royalty ERC-721 SQLi\", \"Lab Description\": \"Skim royalties through metadata injection in tokenURI\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a expert SQL injection lab for: smart grid modbus sqli", "target": "{\"Lab scenario\": \"Smart Grid MODBUS SQLi\", \"Lab Description\": \"Bypass PLC safety via register writes in power management\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where metaverse avatar sqli", "target": "{\"Lab scenario\": \"Metaverse Avatar SQLi\", \"Lab Description\": \"Steal crypto wallets via UV coordinate manipulation\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: covid variant alignment sqli", "target": "{\"Lab scenario\": \"COVID Variant Alignment SQLi\", \"Lab Description\": \"Exfiltrate patient zero data via FASTA header injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Autonomous Vehicle OBD-II SQLi", "target": "{\"Lab scenario\": \"Autonomous Vehicle OBD-II SQLi\", \"Lab Description\": \"Exfiltrate location history via CAN bus injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Vertical Farming SQLi", "target": "{\"Lab scenario\": \"Vertical Farming SQLi\", \"Lab Description\": \"Steal nutrient formulas via PH sensor injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where smart city traffic sqli", "target": "{\"Lab scenario\": \"Smart City Traffic SQLi\", \"Lab Description\": \"Exploit license plate OCR via ANPR camera bypass\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: drone delivery weight sqli", "target": "{\"Lab scenario\": \"Drone Delivery Weight SQLi\", \"Lab Description\": \"Manipulate logistics via floating-point injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: e-learning jwt sqli", "target": "{\"Lab scenario\": \"E-Learning JWT SQLi\", \"Lab Description\": \"Bypass enrollment checks via JWT claim injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where food delivery geolocation sqli", "target": "{\"Lab scenario\": \"Food Delivery Geolocation SQLi\", \"Lab Description\": \"Exfiltrate driver credentials via GPS spoofing\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where smart mirror xss/sqli hybrid", "target": "{\"Lab scenario\": \"Smart Mirror XSS/SQLi Hybrid\", \"Lab Description\": \"Chain voice command injection with DOM XSS\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Induce structural failure via nanotube tension injection", "target": "{\"Lab scenario\": \"Space Elevator SQLi\", \"Lab Description\": \"Induce structural failure via nanotube tension injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where brain-computer sqli", "target": "{\"Lab scenario\": \"Brain-Computer SQLi\", \"Lab Description\": \"Extract neural data via EEG pattern injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Quantum SQLi", "target": "{\"Lab scenario\": \"Quantum SQLi\", \"Lab Description\": \"Exfiltrate data via Grover's algorithm delays\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: 5G Core SQLi", "target": "{\"Lab scenario\": \"5G Core SQLi\", \"Lab Description\": \"Exfiltrate IMSI via invalid SUPI formatting\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: AI Art Generator SQLi", "target": "{\"Lab scenario\": \"AI Art Generator SQLi\", \"Lab Description\": \"Poison diffusion models via prompt injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-Commerce UNION-Based SQLi in Product Sorting", "target": "{\"Lab scenario\": \"E-Commerce UNION-Based SQLi in Product Sorting\", \"Lab Description\": \"Online store vulnerable through unvalidated 'sort' parameter in product listings\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Account balance check vulnerable to boolean inference attacks", "target": "{\"Lab scenario\": \"Banking Boolean-Based Blind SQLi in Balance Check\", \"Lab Description\": \"Account balance check vulnerable to boolean inference attacks\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Healthcare Time-Based SQLi in Patient Lookup", "target": "{\"Lab scenario\": \"Healthcare Time-Based SQLi in Patient Lookup\", \"Lab Description\": \"Patient search vulnerable to time delays in PostgreSQL\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Device management portal leaks DB errors through invalid HAVING clauses", "target": "{\"Lab scenario\": \"IoT Dashboard Error-Based SQLi in Device Filtering\", \"Lab Description\": \"Device management portal leaks DB errors through invalid HAVING clauses\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a expert SQL injection lab for: social media out-of-band sqli in profile export", "target": "{\"Lab scenario\": \"Social Media Out-of-Band SQLi in Profile Export\", \"Lab Description\": \"Profile export feature vulnerable to DNS exfiltration\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where university portal second-order sqli in course registration", "target": "{\"Lab scenario\": \"University Portal Second-Order SQLi in Course Registration\", \"Lab Description\": \"Course registration system processes malicious data from previous sessions\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: government website stacked queries in document search", "target": "{\"Lab scenario\": \"Government Website Stacked Queries in Document Search\", \"Lab Description\": \"Public document search allows stacked queries through unparameterized input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a medium SQL injection lab for: ride-sharing app json-based sqli in location tracking", "target": "{\"Lab scenario\": \"Ride-Sharing App JSON-Based SQLi in Location Tracking\", \"Lab Description\": \"Location tracking API vulnerable through JSON-encoded coordinates\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Withdrawal validation vulnerable to boolean-based blind injection", "target": "{\"Lab scenario\": \"Cryptocurrency Exchange Blind SQLi in Withdrawal API\", \"Lab Description\": \"Withdrawal validation vulnerable to boolean-based blind injection\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where smart home union-based sqli in device naming", "target": "{\"Lab scenario\": \"Smart Home UNION-Based SQLi in Device Naming\", \"Lab Description\": \"Device naming feature vulnerable to UNION injection through nickname field\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Travel Booking Error-Based SQLi in Flight Search", "target": "{\"Lab scenario\": \"Travel Booking Error-Based SQLi in Flight Search\", \"Lab Description\": \"Flight search function leaks DB errors through invalid input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Order tracking system vulnerable to time delays in MySQL", "target": "{\"Lab scenario\": \"Food Delivery App Time-Based SQLi in Order Tracking\", \"Lab Description\": \"Order tracking system vulnerable to time delays in MySQL\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where fitness tracker stacked queries in workout logging", "target": "{\"Lab scenario\": \"Fitness Tracker Stacked Queries in Workout Logging\", \"Lab Description\": \"Workout logging feature allows multiple query execution\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "I need a hard SQL injection lab for: real estate platform boolean-based sqli in price filter", "target": "{\"Lab scenario\": \"Real Estate Platform Boolean-Based SQLi in Price Filter\", \"Lab Description\": \"Price range filter vulnerable to boolean response analysis\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: video streaming service union-based sqli in search", "target": "{\"Lab scenario\": \"Video Streaming Service UNION-Based SQLi in Search\", \"Lab Description\": \"Video search vulnerable through unvalidated search parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Education Portal Error-Based SQLi in Course Enrollment", "target": "{\"Lab scenario\": \"Education Portal Error-Based SQLi in Course Enrollment\", \"Lab Description\": \"Course enrollment system leaks DB errors through invalid input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where gaming platform time-based sqli in leaderboards", "target": "{\"Lab scenario\": \"Gaming Platform Time-Based SQLi in Leaderboards\", \"Lab Description\": \"Leaderboard ranking system vulnerable to time delays\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Create a challenge where: Resume parsing feature triggers external DNS lookups", "target": "{\"Lab scenario\": \"Job Portal Out-of-Band SQLi in Resume Upload\", \"Lab Description\": \"Resume parsing feature triggers external DNS lookups\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Playlist management allows stacked queries through unparameterized input", "target": "{\"Lab scenario\": \"Music Streaming Service Stacked Queries in Playlist Creation\", \"Lab Description\": \"Playlist management allows stacked queries through unparameterized input\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Sports Betting Platform Boolean-Based SQLi in Odds Calculation", "target": "{\"Lab scenario\": \"Sports Betting Platform Boolean-Based SQLi in Odds Calculation\", \"Lab Description\": \"Odds calculation API vulnerable to boolean inference\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: weather app union-based sqli in location search", "target": "{\"Lab scenario\": \"Weather App UNION-Based SQLi in Location Search\", \"Lab Description\": \"Location search vulnerable through unvalidated city parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: healthcare portal union sqli in patient search", "target": "{\"Lab scenario\": \"Healthcare Portal UNION SQLi in Patient Search\", \"Lab Description\": \"Patient lookup vulnerable through unvalidated search parameter with direct UNION exploitation\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Sensor data API vulnerable to blind injection through unparameterized timestamps", "target": "{\"Lab scenario\": \"IoT Device Time-Based SQLi in Sensor Readings\", \"Lab Description\": \"Sensor data API vulnerable to blind injection through unparameterized timestamps\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Fund transfer feature leaks database errors through malformed account numbers", "target": "{\"Lab scenario\": \"Banking App Error-Based SQLi in Transfer Validation\", \"Lab Description\": \"Fund transfer feature leaks database errors through malformed account numbers\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: e-learning platform boolean sqli in course enrollment", "target": "{\"Lab scenario\": \"E-Learning Platform Boolean SQLi in Course Enrollment\", \"Lab Description\": \"Course registration vulnerable to boolean response analysis through enrollment status checks\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where government portal out-of-band sqli in document export", "target": "{\"Lab scenario\": \"Government Portal Out-of-Band SQLi in Document Export\", \"Lab Description\": \"PDF export feature triggers DNS lookups through malicious document properties\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Social Media Second-Order SQLi in Profile Comments", "target": "{\"Lab scenario\": \"Social Media Second-Order SQLi in Profile Comments\", \"Lab Description\": \"Profile comment system processes stored malicious payloads during batch jobs\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a expert SQL injection lab for: retail pos stacked sqli in inventory check", "target": "{\"Lab scenario\": \"Retail POS Stacked SQLi in Inventory Check\", \"Lab Description\": \"Inventory lookup allows multiple query execution through barcode parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where travel booking union sqli in flight search", "target": "{\"Lab scenario\": \"Travel Booking UNION SQLi in Flight Search\", \"Lab Description\": \"Flight search vulnerable to UNION-based data exfiltration through airline parameter\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a expert SQL injection lab for: cryptocurrency exchange blind sqli in withdrawals", "target": "{\"Lab scenario\": \"Cryptocurrency Exchange Blind SQLi in Withdrawals\", \"Lab Description\": \"Withdrawal validation vulnerable to time-based inference attacks\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Expert\"}"}
{"prompt": "Develop a SQL injection lab where smart home boolean sqli in device naming", "target": "{\"Lab scenario\": \"Smart Home Boolean SQLi in Device Naming\", \"Lab Description\": \"Device renaming feature vulnerable to boolean-based inference through status codes\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The loan application portal constructs ORDER BY clauses using unsanitized user input. The PostgreSQL backend leaks column counts through verbose type mismatch errors. To solve: Extract account numbers and credit scores using NULL-padded UNION payloads while bypassing WAF quote filtering with CHR() function.", "target": "{\"Lab scenario\": \"Banking Portal UNION-Based SQLi in Loan Application Sorting\", \"Lab Description\": \"The loan application portal constructs ORDER BY clauses using unsanitized user input. The PostgreSQL backend leaks column counts through verbose type mismatch errors. To solve: Extract account numbers and credit scores using NULL-padded UNION payloads while bypassing WAF quote filtering with CHR() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot fleet management boolean-based sqli in geo-fencing", "target": "{\"Lab scenario\": \"IoT Fleet Management Boolean-Based SQLi in Geo-Fencing\", \"Lab Description\": \"Vehicle tracking system uses unsanitized location parameters in HAVING clauses. The SQLite backend returns HTTP 204/404 status codes based on query validity. To solve: Extract AWS IoT certificates through bitwise binary search of SUBSTR(hex(cert),1,1) comparisons using Python requests with 0.5s timing thresholds.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: healthcare api time-based sqli in patient lookup", "target": "{\"Lab scenario\": \"Healthcare API Time-Based SQLi in Patient Lookup\", \"Lab Description\": \"Patient search endpoint uses unsanitized input in WHERE clauses with identical error pages. The MySQL backend allows stacked queries through Promises. To solve: Exfiltrate diagnosis codes through DNS-based out-of-band channel using conditional SLEEP() delays and LOAD_FILE() function.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: Shopping cart discount system leaks PostgreSQL geometry function errors through debug headers. The application uses unsanitized JSON input in ST_Contains() predicates. To solve: Extract PCI tokens through forced type conversion errors in polygon coordinate parameters.", "target": "{\"Lab scenario\": \"E-Commerce Platform Error-Based SQLi in Cart Discounts\", \"Lab Description\": \"Shopping cart discount system leaks PostgreSQL geometry function errors through debug headers. The application uses unsanitized JSON input in ST_Contains() predicates. To solve: Extract PCI tokens through forced type conversion errors in polygon coordinate parameters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where government portal union sqli in foia request sorting", "target": "{\"Lab scenario\": \"Government Portal UNION SQLi in FOIA Request Sorting\", \"Lab Description\": \"Freedom of Information Act request portal concatenates user input into ORDER BY clauses. The MSSQL backend allows type coercion through XML PATH queries. To solve: Exfiltrate classified document metadata using FOR XML EXPLICIT payloads and CDATA section bypasses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: cms boolean-based sqli in comment filtering", "target": "{\"Lab scenario\": \"CMS Boolean-Based SQLi in Comment Filtering\", \"Lab Description\": \"A content management system (CMS) implements comment filtering using dynamic SQL in the moderation panel. The backend uses SQLite with direct string interpolation. Input from the `filter` query string parameter is passed directly into the `WHERE` clause without proper sanitization. This allows attackers to infer database content using Boolean-based payloads. The application leaks the number of results and alters page rendering based on the number of rows returned. To solve: Use Boolean-based SQLi to extract admin credentials by measuring UI response behaviors triggered by conditional logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application fails to properly sanitize user inputs used in the ORDER BY clause, allowing SQL injection. The application constructs SQL queries dynamically without validation. To solve: exploit the injection to retrieve sensitive database information through ORDER BY-based manipulation.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in ORDER BY clause\", \"Lab Description\": \"The application fails to properly sanitize user inputs used in the ORDER BY clause, allowing SQL injection. The application constructs SQL queries dynamically without validation. To solve: exploit the injection to retrieve sensitive database information through ORDER BY-based manipulation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy SQL injection lab for: cms sql injection in login endpoint", "target": "{\"Lab scenario\": \"CMS SQL injection in Login endpoint\", \"Lab Description\": \"The application directly includes unvalidated user inputs into SQL queries at the login endpoint. This allows attackers to bypass authentication. To solve: exploit the injection to log in as admin without credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API gateway SQL injection in GROUP BY clause", "target": "{\"Lab scenario\": \"API gateway SQL injection in GROUP BY clause\", \"Lab Description\": \"The backend API dynamically builds SQL queries using user-controlled data in the GROUP BY clause. Lack of input validation enables attackers to interfere with grouping logic. To solve: exploit grouping to reveal data from unauthorized rows.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: IoT dashboard SQL injection in WHERE clause", "target": "{\"Lab scenario\": \"IoT dashboard SQL injection in WHERE clause\", \"Lab Description\": \"A search feature on the IoT dashboard uses user inputs directly in a WHERE clause without proper escaping. This introduces SQL injection. To solve: bypass filtering and enumerate connected devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: banking portal sql injection in having condition", "target": "{\"Lab scenario\": \"Banking portal SQL injection in HAVING condition\", \"Lab Description\": \"The banking portal allows advanced filtering of transactions using a HAVING clause. It fails to validate inputs used in aggregate functions. To solve: manipulate HAVING to leak high-value transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: cms sql injection in search query with order by", "target": "{\"Lab scenario\": \"CMS SQL injection in search query with ORDER BY\", \"Lab Description\": \"The CMS search feature uses unvalidated user input in an ORDER BY clause. It fails to whitelist columns, allowing attackers to control the ordering logic and perform SQL injection. To solve: enumerate columns and extract hidden post metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot dashboard sql injection in api post parameter", "target": "{\"Lab scenario\": \"IoT dashboard SQL injection in API POST parameter\", \"Lab Description\": \"The IoT backend API directly includes POST body parameters in SQL statements without sanitization. Malicious inputs can alter query logic. To solve: perform a time-based blind SQL injection to confirm the flaw and extract device config data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: banking portal sql injection in login audit trail", "target": "{\"Lab scenario\": \"Banking portal SQL injection in login audit trail\", \"Lab Description\": \"Login audit events are stored using direct SQL inserts based on user input. Attackers can modify query structure to leak historical login data. To solve: inject into logging function to read records from the audit table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: api gateway sql injection in filter parameter", "target": "{\"Lab scenario\": \"API gateway SQL injection in filter parameter\", \"Lab Description\": \"The API gateway allows filtering of user data using unvalidated query parameters. A crafted injection in the `filter` parameter allows full table extraction. To solve: exploit the filter field with UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cms sql injection in article comments section", "target": "{\"Lab scenario\": \"CMS SQL injection in article comments section\", \"Lab Description\": \"The comment section of articles directly injects user content into database insert queries. When users modify request parameters, SQL injection is possible. To solve: exploit blind SQLi to enumerate database schema.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API gateway logs user-agent headers directly into the SQL query without sanitization. Attackers can inject SQL through the User-Agent field. To solve: craft a malicious User-Agent to extract user data from the database.", "target": "{\"Lab scenario\": \"API gateway SQL injection in HTTP headers\", \"Lab Description\": \"The API gateway logs user-agent headers directly into the SQL query without sanitization. Attackers can inject SQL through the User-Agent field. To solve: craft a malicious User-Agent to extract user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: iot dashboard sql injection in device control parameter", "target": "{\"Lab scenario\": \"IoT dashboard SQL injection in device control parameter\", \"Lab Description\": \"The device control API accepts user input directly and uses it in an SQL query to change device status. Lack of input validation makes it vulnerable to SQL injection. To solve: inject SQL payloads to control device actions and extract sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking portal sql injection in transaction filter", "target": "{\"Lab scenario\": \"Banking portal SQL injection in transaction filter\", \"Lab Description\": \"The banking portal allows filtering of transactions via user input. The filter parameter is directly inserted into the SQL query, making it susceptible to SQL injection. To solve: exploit the injection to dump transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where api gateway sql injection in query string parameter", "target": "{\"Lab scenario\": \"API gateway SQL injection in query string parameter\", \"Lab Description\": \"The API gateway exposes an endpoint that allows users to query for product information based on category. The category filter is directly inserted into the SQL query, allowing an attacker to perform SQL injection. To solve: extract product details and bypass filter conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: CMS SQL injection in comment filtering", "target": "{\"Lab scenario\": \"CMS SQL injection in comment filtering\", \"Lab Description\": \"The CMS filters out comments based on keywords before inserting them into the database. However, the filtering logic is flawed, allowing attackers to bypass restrictions using SQL injection. To solve: bypass filtering and inject malicious SQL payloads.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API SQL injection in user profile update", "target": "{\"Lab scenario\": \"API SQL injection in user profile update\", \"Lab Description\": \"The user profile update endpoint allows modifying the user’s details, but the input parameters are directly injected into SQL queries. This results in an SQL injection vulnerability. To solve: extract the database schema and update user details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The CMS allows users to submit comments, but it improperly sanitizes comment input, allowing for SQL injection. To solve: inject SQL payloads that bypass filtering and access sensitive information from the database.", "target": "{\"Lab scenario\": \"CMS SQL injection in comment filtering\", \"Lab Description\": \"The CMS allows users to submit comments, but it improperly sanitizes comment input, allowing for SQL injection. To solve: inject SQL payloads that bypass filtering and access sensitive information from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: banking portal sql injection in transaction view", "target": "{\"Lab scenario\": \"Banking portal SQL injection in transaction view\", \"Lab Description\": \"The banking portal's transaction view feature takes a parameter to filter by account number. The input parameter is directly used in an SQL query. To solve: inject a UNION-based SQL payload to extract sensitive transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot device control sql injection in configuration update", "target": "{\"Lab scenario\": \"IoT device control SQL injection in configuration update\", \"Lab Description\": \"The device configuration API directly takes input from users and uses it in an SQL query to update device configurations. Lack of sanitization allows for SQL injection. To solve: inject payloads that allow reading sensitive device configurations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API SQL injection in search endpoint", "target": "{\"Lab scenario\": \"API SQL injection in search endpoint\", \"Lab Description\": \"The API’s search feature allows users to search for products by category. However, the input is directly inserted into the SQL query, which makes it vulnerable to SQL injection. To solve: exploit the vulnerability to retrieve product data from different categories.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: banking portal sql injection in loan application", "target": "{\"Lab scenario\": \"Banking portal SQL injection in loan application\", \"Lab Description\": \"The loan application form accepts user input, including the loan amount, and inserts it directly into an SQL query without proper sanitization. To solve: inject SQL payloads to access and manipulate the loan data in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where cms sql injection in post creation", "target": "{\"Lab scenario\": \"CMS SQL injection in post creation\", \"Lab Description\": \"The CMS allows content creators to create posts, and the input is directly inserted into SQL queries. A lack of input sanitization makes the system vulnerable to SQL injection. To solve: inject payloads that manipulate posts in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: API gateway SQL injection in authentication endpoint", "target": "{\"Lab scenario\": \"API gateway SQL injection in authentication endpoint\", \"Lab Description\": \"The authentication endpoint for user login is vulnerable to SQL injection due to improper sanitization of user input. To solve: bypass authentication and retrieve user session details from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking portal SQL injection in account balance lookup", "target": "{\"Lab scenario\": \"Banking portal SQL injection in account balance lookup\", \"Lab Description\": \"The banking portal allows users to view account balances based on account number. However, the account number is directly inserted into SQL queries without sanitization. To solve: inject payloads that retrieve sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cms sql injection in category listing", "target": "{\"Lab scenario\": \"CMS SQL injection in category listing\", \"Lab Description\": \"The CMS allows users to filter posts by category. The category input is directly inserted into the SQL query without proper sanitization. To solve: inject payloads that list all categories and extract post data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: E-commerce API SQL injection in ORDER BY clause", "target": "{\"Lab scenario\": \"E-commerce API SQL injection in ORDER BY clause\", \"Lab Description\": \"The product listing API endpoint is vulnerable to SQL injection in the 'sort' parameter which controls ORDER BY. The application directly concatenates user input into the query without sanitization. To solve: bypass WAF filters to extract admin credentials from the users table using a time-based technique.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: healthcare portal sql injection in having clause", "target": "{\"Lab scenario\": \"Healthcare portal SQL injection in HAVING clause\", \"Lab Description\": \"The patient search feature builds dynamic HAVING conditions vulnerable to injection. The application uses parameterized queries for WHERE but concatenates HAVING directly. To solve: exploit this uncommon injection point to dump the entire patient database including SSNs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where iot dashboard blind sqli in device status filter", "target": "{\"Lab scenario\": \"IoT dashboard blind SQLi in device status filter\", \"Lab Description\": \"The device management dashboard uses blind SQL injection in the status filter parameter. No direct results are shown but the page length changes when conditions are true. To solve: use boolean-based inference to extract the admin API key from the configuration table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: cms union injection with json response", "target": "{\"Lab scenario\": \"CMS UNION injection with JSON response\", \"Lab Description\": \"The article search feature in a headless CMS is vulnerable to UNION SQL injection returning JSON. The application uses numeric IDs but string concatenation. To solve: modify the Content-Type header to bypass WAF and extract all user emails.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Banking portal second-order SQLi in password reset", "target": "{\"Lab scenario\": \"Banking portal second-order SQLi in password reset\", \"Lab Description\": \"The password reset feature stores unsanitized input that gets used in subsequent SQL queries. The application appears secure during initial input but vulnerable when processing the token. To solve: exploit this second-order injection to bypass authentication.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: graphql sql injection via inline fragments", "target": "{\"Lab scenario\": \"GraphQL SQL injection via inline fragments\", \"Lab Description\": \"The GraphQL endpoint converts arguments directly to SQL without sanitization. The application uses a custom @sql directive that bypasses security controls. To solve: craft a GraphQL query with SQLi in the filter argument to extract schema information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where soap api sqli via xml entity injection", "target": "{\"Lab scenario\": \"SOAP API SQLi via XML entity injection\", \"Lab Description\": \"The legacy SOAP service processes XML requests by directly embedding values in SQL queries. The application fails to properly handle XML entities. To solve: combine XXE with SQL injection to extract data via out-of-band techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The analytics dashboard builds dynamic GROUP BY clauses from user input. The application properly parameterizes WHERE but not GROUP BY. To solve: exploit this to perform a UNION attack retrieving the admin session tokens.", "target": "{\"Lab scenario\": \"Admin panel SQLi in GROUP BY parameter\", \"Lab Description\": \"The analytics dashboard builds dynamic GROUP BY clauses from user input. The application properly parameterizes WHERE but not GROUP BY. To solve: exploit this to perform a UNION attack retrieving the admin session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Mobile API SQLi via JSON array exploitation", "target": "{\"Lab scenario\": \"Mobile API SQLi via JSON array exploitation\", \"Lab Description\": \"The mobile API accepts JSON arrays that get expanded directly into IN() clauses. The application fails to properly sanitize array values. To solve: break out of the IN clause to perform a stacked query attack updating all user passwords.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: multi-step sqli in e-commerce checkout", "target": "{\"Lab scenario\": \"Multi-step SQLi in e-commerce checkout\", \"Lab Description\": \"The checkout process has multiple SQL injections across different steps. The application uses temporary tables with unsanitized data. To solve: chain these injections to poison the session table and gain admin access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where banking portal boolean-based sql injection in order by clause", "target": "{\"Lab scenario\": \"Banking portal Boolean-based SQL injection in ORDER BY clause\", \"Lab Description\": \"The application contains a Boolean-based SQL injection vulnerability in the ORDER BY clause, allowing attackers to manipulate SQL queries. The user input is not properly sanitized, allowing crafted queries to bypass controls. To solve: perform a successful injection and extract sensitive information based on the exploitation path.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where time-based sql injection scenario", "target": "{\"Lab scenario\": \"Time-based SQL injection scenario\", \"Lab Description\": \"This lab explores a time-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab explores a error-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \"Error-based SQL injection scenario\", \"Lab Description\": \"This lab explores a error-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab explores a union-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \"Union-based SQL injection scenario\", \"Lab Description\": \"This lab explores a union-based sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: blind sql sql injection scenario", "target": "{\"Lab scenario\": \"Blind SQL SQL injection scenario\", \"Lab Description\": \"This lab explores a blind sql sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: out-of-band sql injection scenario", "target": "{\"Lab scenario\": \"Out-of-band SQL injection scenario\", \"Lab Description\": \"This lab explores a out-of-band sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab explores a login bypass sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \"Login Bypass SQL injection scenario\", \"Lab Description\": \"This lab explores a login bypass sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: Update Injection SQL injection scenario", "target": "{\"Lab scenario\": \"Update Injection SQL injection scenario\", \"Lab Description\": \"This lab explores a update injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab explores a delete injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.", "target": "{\"Lab scenario\": \" Delete Injection SQL injection scenario\", \"Lab Description\": \"This lab explores a delete injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where join injection sql injection scenario", "target": "{\"Lab scenario\": \"Join Injection SQL injection scenario\", \"Lab Description\": \"This lab explores a join injection sql injection scenario vulnerability. The goal is to understand how crafted SQL input can exploit weaknesses in query construction and retrieve or modify data in unintended ways.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The inventory management API uses the X-User-Id header directly in SQL queries without validation. The application logs all SQL queries for debugging. To solve: perform header injection to extract all API keys from the system_config table.", "target": "{\"Lab scenario\": \"REST API SQLi through HTTP Headers\", \"Lab Description\": \"The inventory management API uses the X-User-Id header directly in SQL queries without validation. The application logs all SQL queries for debugging. To solve: perform header injection to extract all API keys from the system_config table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The chat application's WebSocket message handler directly interpolates message metadata into SQL. The vulnerability triggers when editing messages. To solve: exploit this to pivot into the underlying Redis cache and extract session data.", "target": "{\"Lab scenario\": \"WebSocket SQLi in real-time chat\", \"Lab Description\": \"The chat application's WebSocket message handler directly interpolates message metadata into SQL. The vulnerability triggers when editing messages. To solve: exploit this to pivot into the underlying Redis cache and extract session data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where jwt claim sqli in analytics dashboard", "target": "{\"Lab scenario\": \"JWT claim SQLi in analytics dashboard\", \"Lab Description\": \"The dashboard extracts organization_id from JWT tokens and uses it unsanitized in SQL queries. The application uses PostgreSQL JSON functions. To solve: forge a JWT with malicious JSON path traversal to access all organizations' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: csv export sqli with formula injection", "target": "{\"Lab scenario\": \"CSV export SQLi with formula injection\", \"Lab Description\": \"The report generator creates CSV files using direct SQL query results. The application is vulnerable to both SQLi and CSV formula injection. To solve: craft a payload that both extracts database information and triggers RCE when the CSV is opened in Excel.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The GraphQL endpoint allows batch queries using aliases that get converted to SQL column names. The application fails to sanitize alias characters. To solve: use specially crafted aliases to perform stacked queries and disable security controls.", "target": "{\"Lab scenario\": \"SQLi in GraphQL aliases with query batching\", \"Lab Description\": \"The GraphQL endpoint allows batch queries using aliases that get converted to SQL column names. The application fails to sanitize alias characters. To solve: use specially crafted aliases to perform stacked queries and disable security controls.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: ldap filter sqli in employee directory", "target": "{\"Lab scenario\": \"LDAP Filter SQLi in Employee Directory\", \"Lab Description\": \"The corporate directory system improperly converts LDAP filters to SQL queries. Special characters from both systems (LDAP and SQL) cause improper query handling. To exploit this, craft an LDAP filter that breaks into the SQL context and extracts sensitive HR records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sqli in mongodb $where clause", "target": "{\"Lab scenario\": \"SQLi in MongoDB $where clause\", \"Lab Description\": \"The product catalog uses MongoDB but has a legacy SQL compatibility layer. The $where clause accepts JavaScript that gets translated to SQL. To solve: break out of the JS context to execute raw SQL against the underlying PostgreSQL database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where ssti to sqli in helpdesk templates", "target": "{\"Lab scenario\": \"SSTI to SQLi in helpdesk templates\", \"Lab Description\": \"The ticket system renders templates with user-provided data. The application first processes SQL then templates, allowing SSTI to break into SQL context. To solve: chain template injection with SQLi to access the tickets database as admin.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQLi in dynamic pivot queries", "target": "{\"Lab scenario\": \"SQLi in dynamic pivot queries\", \"Lab Description\": \"The reporting tool builds pivot tables from user-controlled column names. The application uses unsafe string interpolation for dynamic SQL. To solve: break out of the column name context to execute system commands via PostgreSQL COPY.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: nosql to sqli in hybrid database architecture", "target": "{\"Lab scenario\": \"NoSQL to SQLi in hybrid database architecture\", \"Lab Description\": \"The application uses MongoDB for frontend but PostgreSQL for reporting, with unsafe data passing between them. The $expr operator allows JavaScript execution. To solve: break out of MongoDB aggregation pipeline to execute raw SQL against the reporting database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: boolean-based sql injection in banking portal's login form", "target": "{\"Lab scenario\": \"Boolean-based SQL injection in Banking Portal's login form\", \"Lab Description\": \"The banking portal login form directly incorporates user input into a SQL query. The application returns different messages depending on whether the login is successful or not. This behavior leaks information about query evaluation. To solve: Use a Boolean-based SQLi to bypass authentication and access the admin panel.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The CMS search endpoint includes user input in a SQL query without sanitization. Errors are suppressed, but time-based inference is possible. To solve: Use time delays to extract the database name.", "target": "{\"Lab scenario\": \"Time-based blind SQL injection in CMS search endpoint\", \"Lab Description\": \"The CMS search endpoint includes user input in a SQL query without sanitization. Errors are suppressed, but time-based inference is possible. To solve: Use time delays to extract the database name.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection via order by in iot dashboard device logs", "target": "{\"Lab scenario\": \"SQL injection via ORDER BY in IoT Dashboard device logs\", \"Lab Description\": \"The IoT dashboard log viewer accepts column names via query params to dynamically ORDER BY input. The app fails to sanitize input. To solve: Use SQLi in ORDER BY clause to retrieve table structure.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The transfer history feature filters by date and concatenates user input without validation. The app returns full query output. To solve: Use UNION to extract current session token.", "target": "{\"Lab scenario\": \"UNION-based SQL injection in Banking Portal's transfer history\", \"Lab Description\": \"The transfer history feature filters by date and concatenates user input without validation. The app returns full query output. To solve: Use UNION to extract current session token.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A custom CMS logs the 'X-User-Role' HTTP header directly into a SQL query. The response doesn't change, but logs can be timed. To solve: Use blind inference to leak the admin password hash.", "target": "{\"Lab scenario\": \"Blind SQL injection via HTTP header in CMS\", \"Lab Description\": \"A custom CMS logs the 'X-User-Role' HTTP header directly into a SQL query. The response doesn't change, but logs can be timed. To solve: Use blind inference to leak the admin password hash.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where out-of-band sql injection in api gateway diagnostics endpoint", "target": "{\"Lab scenario\": \"Out-of-band SQL injection in API Gateway diagnostics endpoint\", \"Lab Description\": \"The diagnostics endpoint logs user agent strings and performs internal queries. It leaks no response but allows out-of-band DNS requests. To solve: Trigger a DNS lookup to your Burp Collaborator domain.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A CMS plugin allows clients to control ORDER BY for pagination. Injection into the ORDER clause is unsanitized. To solve: Use SQL injection to leak column names via error messages.", "target": "{\"Lab scenario\": \"SQL injection in ORDER BY clause in CMS pagination\", \"Lab Description\": \"A CMS plugin allows clients to control ORDER BY for pagination. Injection into the ORDER clause is unsanitized. To solve: Use SQL injection to leak column names via error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection via group by clause in financial analytics tool", "target": "{\"Lab scenario\": \"SQL injection via GROUP BY clause in financial analytics tool\", \"Lab Description\": \"A financial analytics report allows grouping by column passed via GET request. The GROUP BY clause is unsanitized. To solve: Inject into GROUP BY to display column values from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: login bypass using stacked queries in iot portal", "target": "{\"Lab scenario\": \"Login bypass using stacked queries in IoT portal\", \"Lab Description\": \"The login form allows stacked queries using semicolons. This permits command chaining and account hijacking. To solve: Log in using SQLi and change the password of admin user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in nested subquery within banking portal reports", "target": "{\"Lab scenario\": \"SQL injection in nested subquery within Banking Portal reports\", \"Lab Description\": \"A banking report form executes nested queries using user input. The subquery for filtering account types is injectable. To solve: Extract the credit card numbers using SQL injection into the nested query.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in GraphQL variables parser", "target": "{\"Lab scenario\": \"SQL injection in GraphQL variables parser\", \"Lab Description\": \"A GraphQL endpoint improperly handles variable type conversion, allowing SQL injection when variables are interpolated into raw SQL. The application uses a custom @sql directive. To solve: Exploit variable parsing to extract the GraphQL schema definition.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where nosql to sql injection in hybrid document-relational system", "target": "{\"Lab scenario\": \"NoSQL to SQL injection in hybrid document-relational system\", \"Lab Description\": \"An application stores JSON documents in PostgreSQL jsonb columns but converts queries to SQL unsafely. The $where clause allows JavaScript execution that reaches raw SQL. To solve: Break out of MongoDB-style syntax to execute arbitrary SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in JWT claim processing", "target": "{\"Lab scenario\": \"SQL injection in JWT claim processing\", \"Lab Description\": \"The application extracts organization_id from JWT tokens and uses it directly in SQL queries with JSON path operations. To solve: Forge a JWT with malicious JSON path traversal to access all organizations' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in mongodb aggregation pipeline", "target": "{\"Lab scenario\": \"SQL injection in MongoDB aggregation pipeline\", \"Lab Description\": \"An analytics dashboard converts MongoDB aggregation stages to SQL queries unsafely. The $match and $project stages are vulnerable. To solve: Break out of aggregation syntax to execute raw SQL against the underlying database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in CSV export via field terminators", "target": "{\"Lab scenario\": \"SQL injection in CSV export via field terminators\", \"Lab Description\": \"A reporting feature exports query results to CSV using unsafe field terminators. The application allows control over delimiter characters. To solve: Inject SQL through field terminators to execute commands when the CSV is processed.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A data warehouse application refreshes materialized views using unsafe dynamic SQL. The WITH DATA clause is injectable. To solve: Exploit refresh timing to perform blind data extraction.", "target": "{\"Lab scenario\": \"SQL injection in dynamic materialized view refresh\", \"Lab Description\": \"A data warehouse application refreshes materialized views using unsafe dynamic SQL. The WITH DATA clause is injectable. To solve: Exploit refresh timing to perform blind data extraction.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A search engine uses PostgreSQL tsquery syntax directly from user input. The application fails to sanitize special operators. To solve: Break out of text search context to execute arbitrary queries.", "target": "{\"Lab scenario\": \"SQL injection in full-text search parser\", \"Lab Description\": \"A search engine uses PostgreSQL tsquery syntax directly from user input. The application fails to sanitize special operators. To solve: Break out of text search context to execute arbitrary queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in array literal generation", "target": "{\"Lab scenario\": \"SQL injection in array literal generation\", \"Lab Description\": \"A geospatial application builds PostGIS queries with unsafe array concatenation. The ARRAY[] constructor is vulnerable. To solve: Break out of array context to access PostGIS functions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An analytics application allows custom window frame specifications. The ROWS/RANGE clause is vulnerable. To solve: Exploit frame boundary definitions to execute arbitrary SQL.", "target": "{\"Lab scenario\": \"SQL injection in window function frame clause\", \"Lab Description\": \"An analytics application allows custom window frame specifications. The ROWS/RANGE clause is vulnerable. To solve: Exploit frame boundary definitions to execute arbitrary SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in recursive cte anchor member", "target": "{\"Lab scenario\": \"SQL injection in recursive CTE anchor member\", \"Lab Description\": \"A hierarchical data explorer builds recursive CTEs with user input in the anchor member. The WITH RECURSIVE clause is vulnerable. To solve: Break recursion to execute stacked queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: error-based sql injection in e-commerce product page", "target": "{\"Lab scenario\": \"Error-based SQL injection in E-Commerce product page\", \"Lab Description\": \"The product details page builds SQL queries using product ID directly from the URL without sanitization. Errors are exposed in the response. To solve: Use error-based SQL injection to leak database version and table structure.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The feedback form includes a name field used in a SQL query without filtering. The application returns query results directly. To solve: Use UNION-based SQL injection to extract admin credentials and session tokens.", "target": "{\"Lab scenario\": \"Union-based SQL injection in Feedback form\", \"Lab Description\": \"The feedback form includes a name field used in a SQL query without filtering. The application returns query results directly. To solve: Use UNION-based SQL injection to extract admin credentials and session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The app stores user profile data directly into the database and uses it later in SQL queries. The stored input is not sanitized. To solve: Inject SQL in a stored field and trigger it during subsequent profile operations.", "target": "{\"Lab scenario\": \"Second-order SQL injection in User Settings\", \"Lab Description\": \"The app stores user profile data directly into the database and uses it later in SQL queries. The stored input is not sanitized. To solve: Inject SQL in a stored field and trigger it during subsequent profile operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in DELETE endpoint of Project Manager", "target": "{\"Lab scenario\": \"SQL injection in DELETE endpoint of Project Manager\", \"Lab Description\": \"The project deletion feature takes a project ID directly from URL parameters and performs a deletion without validation. To solve: Use SQL injection to delete critical tables and disrupt application functionality.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The session token cookie is included in a query without sanitization. The response does not change but time delays can be observed. To solve: Use blind time-based injection to retrieve admin credentials character by character.", "target": "{\"Lab scenario\": \"Blind SQL injection via cookie in Employee Portal\", \"Lab Description\": \"The session token cookie is included in a query without sanitization. The response does not change but time delays can be observed. To solve: Use blind time-based injection to retrieve admin credentials character by character.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL injection lab for: sql injection in inventory filter dropdown", "target": "{\"Lab scenario\": \"SQL injection in Inventory filter dropdown\", \"Lab Description\": \"The inventory filter takes user input and builds the WHERE clause directly. No input validation is performed. To solve: Inject SQL to extract supplier pricing data and competitor information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in registration endpoint's email check", "target": "{\"Lab scenario\": \"SQL injection in Registration endpoint's email check\", \"Lab Description\": \"The registration system checks if the email exists using an unsanitized query. The response shows different errors based on query results. To solve: Use SQLi to create a privileged account and bypass authentication.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where boolean-based sql injection in newsletter subscription", "target": "{\"Lab scenario\": \"Boolean-based SQL injection in Newsletter subscription\", \"Lab Description\": \"The newsletter form processes email input in a SQL query. Application returns different messages based on whether the email exists. To solve: Use Boolean SQLi to enumerate all valid user emails.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection via search suggestion API", "target": "{\"Lab scenario\": \"SQL injection via search suggestion API\", \"Lab Description\": \"The suggestion feature uses search terms directly in SQL. Output is visible to users in real-time. To solve: Exploit the injection to dump all user credentials and session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in admin panel ip logger", "target": "{\"Lab scenario\": \"SQL injection in admin panel IP logger\", \"Lab Description\": \"Admin panel logs visitor IPs directly into SQL without escaping. The application is not vulnerable to output-based SQLi, but the query is injectable. To solve: Inject SQL to create a web shell for persistent access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A GraphQL endpoint exposes database introspection through a vulnerable enum field. The application fails to sanitize enum values used in raw SQL. To solve: Exploit the enum parameter to extract database schema information.", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Enumeration Query\", \"Lab Description\": \"A GraphQL endpoint exposes database introspection through a vulnerable enum field. The application fails to sanitize enum values used in raw SQL. To solve: Exploit the enum parameter to extract database schema information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An application converts MongoDB-style queries to SQL for reporting. The $match operator is vulnerable to SQL injection during conversion. To solve: Break out of document context to execute raw SQL commands.", "target": "{\"Lab scenario\": \"NoSQL to SQL Injection in Hybrid Document Query\", \"Lab Description\": \"An application converts MongoDB-style queries to SQL for reporting. The $match operator is vulnerable to SQL injection during conversion. To solve: Break out of document context to execute raw SQL commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in geospatial function argument", "target": "{\"Lab scenario\": \"SQL Injection in Geospatial Function Argument\", \"Lab Description\": \"A mapping application uses unsanitized user input in PostGIS functions. The ST_Contains parameter is vulnerable to injection. To solve: Exploit geometry parsing to execute system commands via PostGIS extensions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Full-Text Search Dictionary", "target": "{\"Lab scenario\": \"SQL Injection in Full-Text Search Dictionary\", \"Lab Description\": \"A search application allows custom dictionary configuration through URL parameters. The dictionary name is used unsafely in ts_parse function. To solve: Break out of dictionary context to execute arbitrary queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in array aggregation function", "target": "{\"Lab scenario\": \"SQL Injection in Array Aggregation Function\", \"Lab Description\": \"A reporting tool builds array_agg queries with user-controlled sort orders. The ORDER BY clause within array_agg is vulnerable. To solve: Exploit array construction to leak data through error messages.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An analytics dashboard allows custom window frame specifications. The ROWS BETWEEN clause is vulnerable to injection. To solve: Break out of window frame context to access underlying tables.", "target": "{\"Lab scenario\": \"SQL Injection in Window Function Frame\", \"Lab Description\": \"An analytics dashboard allows custom window frame specifications. The ROWS BETWEEN clause is vulnerable to injection. To solve: Break out of window frame context to access underlying tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in JSON Path Query", "target": "{\"Lab scenario\": \"SQL Injection in JSON Path Query\", \"Lab Description\": \"A document store exposes JSON path queries that get converted to SQL. The jsonpath parameter is vulnerable to injection. To solve: Break out of path context to execute raw SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Materialized View Refresh", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh\", \"Lab Description\": \"A data warehouse allows triggering materialized view refreshes with user-controlled parameters. The WITH DATA clause is vulnerable. To solve: Exploit refresh privileges to modify underlying data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in recursive cte base case", "target": "{\"Lab scenario\": \"SQL Injection in Recursive CTE Base Case\", \"Lab Description\": \"A hierarchical data viewer builds recursive CTEs with user input in the anchor member. The WITH RECURSIVE clause is vulnerable. To solve: Break recursion to access arbitrary tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in custom aggregate function", "target": "{\"Lab scenario\": \"SQL Injection in Custom Aggregate Function\", \"Lab Description\": \"An analytics application registers custom aggregate functions that use unsanitized input. The final function parameter is vulnerable. To solve: Break out of aggregate context to execute commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A mobile app sends user feedback via a POST request. The backend inserts feedback into the database without sanitizing inputs and returns the inserted record. To solve: Use SQL injection to extract usernames and passwords from the users table.", "target": "{\"Lab scenario\": \"SQL injection in mobile app feedback submission\", \"Lab Description\": \"A mobile app sends user feedback via a POST request. The backend inserts feedback into the database without sanitizing inputs and returns the inserted record. To solve: Use SQL injection to extract usernames and passwords from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in newsletter subscription email field", "target": "{\"Lab scenario\": \"SQL injection in newsletter subscription email field\", \"Lab Description\": \"The newsletter signup form takes an email and inserts it into a database. The input is directly embedded into the SQL query and errors are displayed. To solve: Perform SQL injection to extract the database schema and admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection via URL parameter in product filtering", "target": "{\"Lab scenario\": \"SQL injection via URL parameter in product filtering\", \"Lab Description\": \"A product page filters items by category passed through URL. The app does not escape input and returns full query results. To solve: Inject SQL to extract database version, schema, and user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in e-commerce search autocomplete", "target": "{\"Lab scenario\": \"SQL injection in e-commerce search autocomplete\", \"Lab Description\": \"The search endpoint for autocomplete queries embeds user input into SQL with no validation and returns matched results. To solve: Use SQL injection to list all database tables and extract sensitive customer data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in forgotten password reset email lookup", "target": "{\"Lab scenario\": \"SQL injection in forgotten password reset email lookup\", \"Lab Description\": \"Password reset sends an email if a user exists. The lookup query is vulnerable and returns different responses. To solve: Use boolean-based SQL injection to enumerate valid user emails and extract password hashes.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: User deletion logs activity using input from 'reason' parameter. The app uses raw SQL for inserts with no feedback. To solve: Use time-based blind SQLi to infer database contents and extract sensitive information.", "target": "{\"Lab scenario\": \"Blind SQL injection in user deletion audit trail\", \"Lab Description\": \"User deletion logs activity using input from 'reason' parameter. The app uses raw SQL for inserts with no feedback. To solve: Use time-based blind SQLi to infer database contents and extract sensitive information.\", \"Vulnerability name\": \"Blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in URL shortener preview endpoint", "target": "{\"Lab scenario\": \"SQL injection in URL shortener preview endpoint\", \"Lab Description\": \"A preview feature allows users to inspect shortened URLs. It uses unsanitized query strings and returns full URL details. To solve: Use UNION-based SQLi to leak sensitive URLs and associated metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in real-time chat message sending", "target": "{\"Lab scenario\": \"SQL injection in real-time chat message sending\", \"Lab Description\": \"Messages in a chat are saved using unsanitized input and returned to users. Attackers can inject SQL commands to extract historical messages. To solve: Dump the complete chat history and user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL injection in blog comment reply system", "target": "{\"Lab scenario\": \"SQL injection in blog comment reply system\", \"Lab Description\": \"Replying to blog comments appends user input into SQL statements and displays results. To solve: Inject SQL to enumerate database structure and extract admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The contact form saves user messages into the DB directly and allows stacked queries. Input is used without escaping. To solve: Use stacked queries to modify database content and gain admin access.", "target": "{\"Lab scenario\": \"SQL injection in contact form backend with stacked queries\", \"Lab Description\": \"The contact form saves user messages into the DB directly and allows stacked queries. Input is used without escaping. To solve: Use stacked queries to modify database content and gain admin access.\", \"Vulnerability name\": \"SQL injection (stacked queries)\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in graphql node id parameter", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Node ID Parameter\", \"Lab Description\": \"A GraphQL API implements node ID resolution with direct SQL concatenation. The global ID parameter is vulnerable to injection. To solve: Exploit the node resolver to extract schema metadata.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A business intelligence system converts MongoDB aggregation pipelines to SQL for cross-database analytics. The $convert operator's expression evaluation fails to properly sanitize input when generating CAST operations in SQL. This allows breaking out of the aggregation context into raw SQL execution. The lab demonstrates how pipeline operators can become injection vectors when translated to relational queries.", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB Aggregation $convert to SQL Pipeline\", \"Lab Description\": \"A business intelligence system converts MongoDB aggregation pipelines to SQL for cross-database analytics. The $convert operator's expression evaluation fails to properly sanitize input when generating CAST operations in SQL. This allows breaking out of the aggregation context into raw SQL execution. The lab demonstrates how pipeline operators can become injection vectors when translated to relational queries.\", \"Vulnerability name\": \"Aggregation Pipeline SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in JWT Token Validation Query", "target": "{\"Lab scenario\": \"SQL Injection in JWT Token Validation Query\", \"Lab Description\": \"The JWT validation process checks token validity against database using unsanitized claims. To solve: Forge malicious JWT with SQLi in claims to bypass authentication.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A reporting tool allows custom CSV field terminators without validation. The terminator is used directly in SQL COPY command. To solve: Inject malicious terminators to execute OS commands.", "target": "{\"Lab scenario\": \"SQL Injection in CSV Export Field Terminator\", \"Lab Description\": \"A reporting tool allows custom CSV field terminators without validation. The terminator is used directly in SQL COPY command. To solve: Inject malicious terminators to execute OS commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in full-text search thesaurus", "target": "{\"Lab scenario\": \"SQL Injection in Full-Text Search Thesaurus\", \"Lab Description\": \"A search application loads custom thesaurus files from database. The thesaurus name parameter is vulnerable. To solve: Break thesaurus context to read arbitrary files.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in array constructor function", "target": "{\"Lab scenario\": \"SQL Injection in Array Constructor Function\", \"Lab Description\": \"A statistics dashboard builds array queries with user-controlled elements. The array constructor is vulnerable. To solve: Break array context to execute system commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in window function frame clause", "target": "{\"Lab scenario\": \"SQL Injection in Window Function Frame Clause\", \"Lab Description\": \"An analytics API allows custom window frame specifications. The ROWS BETWEEN clause is vulnerable. To solve: Break frame context to dump user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in json path query", "target": "{\"Lab scenario\": \"SQL Injection in JSON Path Query\", \"Lab Description\": \"A document store exposes JSON path queries that get converted to SQL. The jsonpath parameter is vulnerable. To solve: Break path context to read arbitrary tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in recursive cte base case", "target": "{\"Lab scenario\": \"SQL Injection in Recursive CTE Base Case\", \"Lab Description\": \"An org chart viewer builds recursive CTEs with user input in anchor member. The WITH RECURSIVE clause is vulnerable. To solve: Break recursion to access arbitrary tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Custom Aggregate Function", "target": "{\"Lab scenario\": \"SQL Injection in Custom Aggregate Function\", \"Lab Description\": \"A statistics application registers custom aggregates that use unsanitized input. The final function parameter is vulnerable. To solve: Break aggregate context to execute commands.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in mobile app profile update endpoint", "target": "{\"Lab scenario\": \"SQL injection in mobile app profile update endpoint\", \"Lab Description\": \"The mobile app allows users to update their profile information. The `name` parameter is directly inserted into an UPDATE SQL query without sanitization. Error messages are displayed. To solve: Perform SQL injection to extract database schema information and modify other users' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Error-based SQL injection scenario. Example: Error-based SQL injection in shopping cart total", "target": "{\"Lab scenario\": \"Error-based SQL injection in shopping cart total\", \"Lab Description\": \"The shopping cart calculates totals by querying product prices using product IDs. Detailed errors are reflected in responses. To solve: Extract database schema and contents through error messages.\", \"Vulnerability name\": \"Error-based SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A hidden referrer field in the registration form is used directly in SQL queries. The application returns query results in the response. To solve: Use UNION-based injection to extract user credentials.", "target": "{\"Lab scenario\": \"SQL injection via hidden form field in registration form\", \"Lab Description\": \"A hidden referrer field in the registration form is used directly in SQL queries. The application returns query results in the response. To solve: Use UNION-based injection to extract user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Second-order SQL injection lab where second-order sql injection via stored user bio", "target": "{\"Lab scenario\": \"Second-order SQL injection via stored user bio\", \"Lab Description\": \"User bios are stored and later used unsafely in admin search queries. No immediate feedback is available. To solve: Store malicious payload and trigger when admin searches user bios.\", \"Vulnerability name\": \"Second-order SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in password reset token check", "target": "{\"Lab scenario\": \"SQL injection in password reset token check\", \"Lab Description\": \"The password reset endpoint checks tokens without sanitization. Different responses indicate valid/invalid tokens. To solve: Use boolean-based injection to bypass token validation.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: Referer headers are logged directly into SQL. The admin panel displays logs with limited escaping. To solve: Inject XSS and SQLi payloads to steal admin cookies.", "target": "{\"Lab scenario\": \"SQL injection via HTTP Referer header in audit logs\", \"Lab Description\": \"Referer headers are logged directly into SQL. The admin panel displays logs with limited escaping. To solve: Inject XSS and SQLi payloads to steal admin cookies.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Boolean-based blind SQL injection lab where boolean sql injection in mobile banking app login", "target": "{\"Lab scenario\": \"Boolean SQL injection in mobile banking app login\", \"Lab Description\": \"The login endpoint returns different responses for valid/invalid credentials. No direct output. To solve: Use boolean conditions to extract admin password hash character by character.\", \"Vulnerability name\": \"Boolean-based blind SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a UNION-based SQL injection lab where union-based sqli in forum's search feature", "target": "{\"Lab scenario\": \"UNION-based SQLi in forum's search feature\", \"Lab Description\": \"The forum search directly embeds terms in SQL and returns full results. To solve: Use UNION injection to extract database version, tables, and user credentials.\", \"Vulnerability name\": \"UNION-based SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The password verification API has identical responses but vulnerable to timing attacks. To solve: Use SLEEP() to extract admin password character by character.", "target": "{\"Lab scenario\": \"Time-based SQLi in password verification API\", \"Lab Description\": \"The password verification API has identical responses but vulnerable to timing attacks. To solve: Use SLEEP() to extract admin password character by character.\", \"Vulnerability name\": \"Time-based blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a UNION-based SQL injection scenario. Example: SQLi in e-learning platform course filter", "target": "{\"Lab scenario\": \"SQLi in e-learning platform course filter\", \"Lab Description\": \"The course topic filter is vulnerable to UNION-based injection. Results are displayed in the UI. To solve: Extract database version, schema, and user credentials.\", \"Vulnerability name\": \"UNION-based SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in IoT Device Location Tracker", "target": "{\"Lab scenario\": \"SQL Injection in IoT Device Location Tracker\", \"Lab Description\": \"An IoT tracking system stores device location coordinates in a PostgreSQL database. The coordinate update endpoint directly concatenates latitude/longitude values into a geospatial query without sanitization. The application uses PostGIS functions that can be exploited to break out of the coordinate context. To solve: Exploit the ST_MakePoint function parameter injection to execute system commands through PostGIS extension functions and exfiltrate all device location history.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A GraphQL API implements custom depth limiting that fails to properly sanitize nested query parameters. The query depth protection can be bypassed through specially crafted aliases, allowing access to underlying SQL queries. The vulnerability exists in the connection resolver that builds raw SQL for pagination. To solve: Craft a deeply nested GraphQL query that bypasses depth limits and injects malicious SQL through the 'after' cursor parameter to extract the entire database schema.", "target": "{\"Lab scenario\": \"GraphQL Query Depth Exploitation Leading to SQL Injection\", \"Lab Description\": \"A GraphQL API implements custom depth limiting that fails to properly sanitize nested query parameters. The query depth protection can be bypassed through specially crafted aliases, allowing access to underlying SQL queries. The vulnerability exists in the connection resolver that builds raw SQL for pagination. To solve: Craft a deeply nested GraphQL query that bypasses depth limits and injects malicious SQL through the 'after' cursor parameter to extract the entire database schema.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in machine learning feature store", "target": "{\"Lab scenario\": \"SQL Injection in Machine Learning Feature Store\", \"Lab Description\": \"A machine learning platform stores feature definitions in a SQL database. The feature retrieval endpoint dynamically builds queries using unsanitized feature names from user input. The application uses a custom DSL that gets translated to SQL, introducing injection points in the WHERE clause generation. To solve: Exploit the feature name parameter to break out of the DSL context and perform a UNION-based attack to extract sensitive model training data, including PII used in model features.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Boolean-based blind SQL injection scenario. Example: Blind SQL Injection in Healthcare Appointment System", "target": "{\"Lab scenario\": \"Blind SQL Injection in Healthcare Appointment System\", \"Lab Description\": \"A hospital appointment booking system contains a blind SQL injection vulnerability in the patient lookup functionality. The application provides different error messages for existing vs. non-existing patient IDs, enabling boolean-based inference attacks. No direct results are returned, but the response content length differs based on query results. To solve: Use conditional boolean queries to extract sensitive patient medical records one character at a time, including diagnoses and treatment histories.\", \"Vulnerability name\": \"Boolean-based blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A DAM system stores metadata about digital assets in a SQL database. The asset search functionality directly embeds user-controlled sort parameters into ORDER BY clauses without sanitization. While most SQL injection filters focus on WHERE clauses, the ORDER BY injection allows limited data exfiltration through careful timing attacks. To solve: Exploit the sort direction parameter to perform a time-based attack extracting AWS S3 bucket names and access keys stored in the database.", "target": "{\"Lab scenario\": \"SQL Injection in Digital Asset Management System\", \"Lab Description\": \"A DAM system stores metadata about digital assets in a SQL database. The asset search functionality directly embeds user-controlled sort parameters into ORDER BY clauses without sanitization. While most SQL injection filters focus on WHERE clauses, the ORDER BY injection allows limited data exfiltration through careful timing attacks. To solve: Exploit the sort direction parameter to perform a time-based attack extracting AWS S3 bucket names and access keys stored in the database.\", \"Vulnerability name\": \"Time-based SQL injection in ORDER BY\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A content management system allows administrators to create dynamic page templates that get processed through a SQL-powered rendering engine. User-provided template code is initially sanitized when stored, but gets re-embedded into SQL queries during page rendering without proper escaping. To solve: Store malicious template code containing SQL injection payloads that execute when pages are viewed, enabling privilege escalation to superadmin by modifying backend permissions.", "target": "{\"Lab scenario\": \"Second-Order SQL Injection in CMS Template System\", \"Lab Description\": \"A content management system allows administrators to create dynamic page templates that get processed through a SQL-powered rendering engine. User-provided template code is initially sanitized when stored, but gets re-embedded into SQL queries during page rendering without proper escaping. To solve: Store malicious template code containing SQL injection payloads that execute when pages are viewed, enabling privilege escalation to superadmin by modifying backend permissions.\", \"Vulnerability name\": \"Second-order SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a NoSQL to SQL injection scenario. Example: NoSQL to SQL Injection in Hybrid Analytics Dashboard", "target": "{\"Lab scenario\": \"NoSQL to SQL Injection in Hybrid Analytics Dashboard\", \"Lab Description\": \"An analytics dashboard accepts MongoDB-style queries that get converted to SQL for reporting. The $match stage translation improperly handles nested query operators, allowing injection into the generated SQL. The application uses a custom query DSL that fails to properly escape MongoDB's $where clause when converting to SQL. To solve: Craft a malicious $where condition that breaks out of the JavaScript context and executes arbitrary SQL to extract all reporting data and underlying source databases.\", \"Vulnerability name\": \"NoSQL to SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in financial trading algorithm config", "target": "{\"Lab scenario\": \"SQL Injection in Financial Trading Algorithm Config\", \"Lab Description\": \"A stock trading platform allows configuring algorithmic trading strategies through JSON parameters that get converted to SQL WHERE clauses. The strategy condition builder fails to properly sanitize comparison operators in the JSON-to-SQL conversion. To solve: Exploit the custom operator syntax to break out of the condition context and perform a UNION-based attack to extract all trading algorithms, including proprietary strategies and associated account credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Boolean-based blind SQL injection lab where sql injection in multi-factor authentication setup", "target": "{\"Lab scenario\": \"SQL Injection in Multi-Factor Authentication Setup\", \"Lab Description\": \"The MFA enrollment process stores device information in a SQL database. The device identifier parameter is vulnerable to injection during the verification step. The application provides different error messages for valid/invalid device IDs, enabling boolean-based attacks. To solve: Use conditional error responses to extract the MFA seed secrets for all users, allowing complete bypass of multi-factor authentication across the application.\", \"Vulnerability name\": \"Boolean-based blind SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A legal research platform's document search functionality directly embeds user-controlled highlight markers into SQL full-text search queries. The application uses a custom highlighting syntax that can be abused to break out of the text search context. To solve: Exploit the highlight parameter injection to perform a UNION-based attack extracting all legal documents, including privileged client communications and sealed court records.", "target": "{\"Lab scenario\": \"SQL Injection in Legal Document Search Engine\", \"Lab Description\": \"A legal research platform's document search functionality directly embeds user-controlled highlight markers into SQL full-text search queries. The application uses a custom highlighting syntax that can be abused to break out of the text search context. To solve: Exploit the highlight parameter injection to perform a UNION-based attack extracting all legal documents, including privileged client communications and sealed court records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The product filter endpoint accepts a category ID parameter that is directly concatenated into a SQL query without sanitization. The application displays full MySQL error messages, enabling error-based injection techniques. This vulnerability allows attackers to extract database schema information and sensitive data through carefully crafted error messages. The exploit leverages MySQL's XML functions to force error messages containing query results.", "target": "{\"Lab scenario\": \"Error-based SQL Injection in Product Filter of an E-commerce Site\", \"Lab Description\": \"The product filter endpoint accepts a category ID parameter that is directly concatenated into a SQL query without sanitization. The application displays full MySQL error messages, enabling error-based injection techniques. This vulnerability allows attackers to extract database schema information and sensitive data through carefully crafted error messages. The exploit leverages MySQL's XML functions to force error messages containing query results.\", \"Vulnerability name\": \"Error-based SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Second-order SQL injection lab for: second-order sql injection in user profile update", "target": "{\"Lab scenario\": \"Second-order SQL Injection in User Profile Update\", \"Lab Description\": \"The application stores user profile status messages without proper sanitization, then later uses them unsafely in admin dashboard queries. This delayed exploitation vector demonstrates how initially 'safe' stored data can become dangerous when reused in different contexts. The attack requires storing malicious input that only triggers when processed by vulnerable code paths, typically through admin functionality with higher privileges.\", \"Vulnerability name\": \"Second-order SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in DELETE Statement of Admin Panel", "target": "{\"Lab scenario\": \"SQL Injection in DELETE Statement of Admin Panel\", \"Lab Description\": \"The user management interface contains a critical vulnerability where user IDs are directly interpolated into DELETE statements. This flaw allows attackers to manipulate query logic to delete arbitrary data. Unlike SELECT injections, DELETE vulnerabilities can cause irreversible data loss. The attack demonstrates how missing parameterization in write operations can be more dangerous than in read operations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in mobile app's search api", "target": "{\"Lab scenario\": \"SQL Injection in Mobile App's Search API\", \"Lab Description\": \"The mobile backend API accepts search terms through POST requests and concatenates them directly into a LIKE clause. This vulnerability demonstrates how APIs powering mobile apps can be vulnerable to classic injection attacks. The LIKE operator context requires different syntax than WHERE clause injections, showing how injection techniques must adapt to query contexts.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a easy SQL injection lab for: login bypass in legacy asp.net web form", "target": "{\"Lab scenario\": \"Login Bypass in Legacy ASP.NET Web Form\", \"Lab Description\": \"A classic ASP.NET authentication form demonstrates how string concatenation in SQL queries creates injection vulnerabilities. This lab highlights risks in legacy systems that haven't adopted parameterized queries. The attack bypasses authentication by manipulating the query logic to always evaluate as true, regardless of credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in join clause of financial report", "target": "{\"Lab scenario\": \"SQL Injection in JOIN Clause of Financial Report\", \"Lab Description\": \"A financial reporting system builds dynamic JOIN conditions using user input, creating a rare but dangerous injection point. Most SQLi training focuses on WHERE clauses, but this lab demonstrates JOIN clause vulnerabilities that can expose sensitive relationships between tables. The attack reveals how injection points can exist in less obvious query parts.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in xml soap web service", "target": "{\"Lab scenario\": \"SQL Injection in XML SOAP Web Service\", \"Lab Description\": \"A SOAP-based web service processes XML requests where parameters are directly embedded into SQL queries. This lab demonstrates how web services using XML payloads can still be vulnerable to classic injection attacks if input sanitization is neglected. The attack requires proper XML formatting while injecting malicious SQL fragments.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where cookie-based sql injection in shopping cart", "target": "{\"Lab scenario\": \"Cookie-based SQL Injection in Shopping Cart\", \"Lab Description\": \"The application uses a cookie value to track shopping carts, embedding it directly into SQL queries. This lab shows how injection vulnerabilities can exist outside typical form inputs, requiring attackers to manipulate less obvious input vectors. The attack demonstrates cookie manipulation techniques and header-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A modern project management application's JSON API fails to sanitize numeric IDs used in queries. This lab demonstrates how RESTful APIs using JSON payloads can still be vulnerable if server-side validation is insufficient. The attack requires proper JSON formatting while injecting malicious SQL through numeric parameters.", "target": "{\"Lab scenario\": \"JSON API SQL Injection in Project Management Tool\", \"Lab Description\": \"A modern project management application's JSON API fails to sanitize numeric IDs used in queries. This lab demonstrates how RESTful APIs using JSON payloads can still be vulnerable if server-side validation is insufficient. The attack requires proper JSON formatting while injecting malicious SQL through numeric parameters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL injection lab where limit clause sql injection in data export", "target": "{\"Lab scenario\": \"LIMIT Clause SQL Injection in Data Export\", \"Lab Description\": \"A data export feature allows pagination through LIMIT and OFFSET parameters that are concatenated directly into queries. This lab demonstrates injection in less common query clauses, requiring specialized syntax. The attack shows how pagination controls can become injection vectors when improperly implemented.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in smart home voice command logging", "target": "{\"Lab scenario\": \"SQL Injection in Smart Home Voice Command Logging\", \"Lab Description\": \"A smart home system logs voice commands in a MySQL database. The command processing endpoint directly embeds transcribed text into INSERT statements without sanitization. The application uses a custom NLP preprocessing function that can be abused to break out of string context. To solve: Exploit the voice transcription parameter to perform a stacked query attack that extracts all voice command history and modifies device access permissions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a SQL injection lab where sql injection in autonomous vehicle route planning", "target": "{\"Lab scenario\": \"SQL Injection in Autonomous Vehicle Route Planning\", \"Lab Description\": \"An autonomous vehicle system stores route coordinates in a PostgreSQL database. The route optimization endpoint uses unsanitized location names in spatial queries. The application's custom pathfinding function can be exploited to break out of the geography context. To solve: Inject malicious SQL through the waypoint name parameter to access all vehicle routes and modify navigation rules to create dangerous driving conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in industrial control system alarm configuration", "target": "{\"Lab scenario\": \"SQL Injection in Industrial Control System Alarm Configuration\", \"Lab Description\": \"An industrial control system stores alarm thresholds in a SQLite database. The alarm configuration endpoint directly embeds parameter names and values into UPDATE statements. The application's custom validation logic can be bypassed through carefully crafted parameter names. To solve: Exploit the parameter name field to perform a UNION-based attack extracting all system configurations and modifying critical safety thresholds.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL injection lab for: sql injection in blockchain transaction processor", "target": "{\"Lab scenario\": \"SQL Injection in Blockchain Transaction Processor\", \"Lab Description\": \"A blockchain analytics platform stores transaction metadata in a PostgreSQL database. The transaction search endpoint directly embeds user-controlled wallet addresses into JSON-path queries. The application's custom JSON processing function can be exploited to break out of the path context. To solve: Inject malicious SQL through the wallet address parameter to access all transaction histories and modify verification flags.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL injection lab for: sql injection in ai chatbot training data system", "target": "{\"Lab scenario\": \"SQL Injection in AI Chatbot Training Data System\", \"Lab Description\": \"An AI chatbot platform stores training conversations in a MySQL database. The data labeling endpoint directly embeds category names into INSERT statements. The application's custom NLP tagging function can be abused to break out of string context. To solve: Exploit the category parameter to perform a stacked query attack extracting all training conversations and injecting malicious training examples.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A quantum computing platform stores job parameters in a PostgreSQL database. The job submission endpoint directly embeds algorithm names into queries. The application's custom quantum circuit compiler can be exploited to break out of string context. To solve: Inject malicious SQL through the algorithm name parameter to access all job histories and modify sensitive quantum processor configurations.", "target": "{\"Lab scenario\": \"SQL Injection in Quantum Computing Job Scheduler\", \"Lab Description\": \"A quantum computing platform stores job parameters in a PostgreSQL database. The job submission endpoint directly embeds algorithm names into queries. The application's custom quantum circuit compiler can be exploited to break out of string context. To solve: Inject malicious SQL through the algorithm name parameter to access all job histories and modify sensitive quantum processor configurations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A satellite ground station stores telemetry data in a SQLite database. The data retrieval endpoint directly embeds sensor names into queries. The application's custom signal processing function can be abused to break out of string context. To solve: Exploit the sensor name parameter to perform a UNION-based attack extracting all telemetry data and modifying satellite control parameters.", "target": "{\"Lab scenario\": \"SQL Injection in Satellite Telemetry System\", \"Lab Description\": \"A satellite ground station stores telemetry data in a SQLite database. The data retrieval endpoint directly embeds sensor names into queries. The application's custom signal processing function can be abused to break out of string context. To solve: Exploit the sensor name parameter to perform a UNION-based attack extracting all telemetry data and modifying satellite control parameters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in DNA Sequencing Analysis Platform", "target": "{\"Lab scenario\": \"SQL Injection in DNA Sequencing Analysis Platform\", \"Lab Description\": \"A bioinformatics platform stores DNA sequence metadata in a PostgreSQL database. The sequence search endpoint directly embeds genetic marker patterns into similarity queries. The application's custom pattern matching function can be exploited to break out of the sequence context. To solve: Inject malicious SQL through the genetic marker parameter to access all DNA sequence records and modify research findings.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL injection scenario. Example: SQL Injection in Military Drone Command System", "target": "{\"Lab scenario\": \"SQL Injection in Military Drone Command System\", \"Lab Description\": \"A drone command system stores mission parameters in an encrypted SQLite database. The command verification endpoint directly embeds parameter names into queries after decryption. The application's custom crypto layer can be bypassed through carefully crafted command sequences. To solve: Exploit the decrypted parameter field to perform a stacked query attack extracting all mission plans and modifying drone flight paths.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A nuclear power plant monitoring system stores sensor readings in a firewalled PostgreSQL database. The sensor data visualization endpoint directly embeds time range parameters into queries. The application's custom time series function can be exploited to break out of the timestamp context. To solve: Inject malicious SQL through the time range parameter to access all sensor histories and modify critical safety thresholds.", "target": "{\"Lab scenario\": \"SQL Injection in Nuclear Plant Sensor Monitoring\", \"Lab Description\": \"A nuclear power plant monitoring system stores sensor readings in a firewalled PostgreSQL database. The sensor data visualization endpoint directly embeds time range parameters into queries. The application's custom time series function can be exploited to break out of the timestamp context. To solve: Inject malicious SQL through the time range parameter to access all sensor histories and modify critical safety thresholds.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An HR management system's employee deletion endpoint constructs DELETE queries directly from user input. The vulnerable parameter allows attackers to manipulate the query to delete arbitrary records. This lab demonstrates the impact of unsanitized input in DELETE operations, where injection can lead to mass data destruction.", "target": "{\"Lab scenario\": \"SQL Injection in HR System DELETE Operation\", \"Lab Description\": \"An HR management system's employee deletion endpoint constructs DELETE queries directly from user input. The vulnerable parameter allows attackers to manipulate the query to delete arbitrary records. This lab demonstrates the impact of unsanitized input in DELETE operations, where injection can lead to mass data destruction.\", \"Vulnerability name\": \"SQL Injection in DELETE Operation\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Second-Order SQL Injection lab where second-order sql injection in user profiles", "target": "{\"Lab scenario\": \"Second-Order SQL Injection in User Profiles\", \"Lab Description\": \"A profile update system stores unsanitized user input that gets embedded into SQL queries during admin review. This delayed execution demonstrates second-order injection where payloads remain dormant until triggered by privileged users. The challenge involves storing malicious SQL in a bio field that executes during admin access.\", \"Vulnerability name\": \"Second-Order SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A password recovery system uses a vulnerable stored procedure that concatenates user input directly into dynamic SQL. This lab demonstrates how injection can occur even when using stored procedures if input sanitization is neglected. The challenge involves exploiting the email parameter to extract password hashes.", "target": "{\"Lab scenario\": \"Stored Procedure Injection in Password Recovery\", \"Lab Description\": \"A password recovery system uses a vulnerable stored procedure that concatenates user input directly into dynamic SQL. This lab demonstrates how injection can occur even when using stored procedures if input sanitization is neglected. The challenge involves exploiting the email parameter to extract password hashes.\", \"Vulnerability name\": \"SQL Injection in Stored Procedure\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a SQL Injection via Metadata scenario. Example: Metadata Injection in Image Gallery", "target": "{\"Lab scenario\": \"Metadata Injection in Image Gallery\", \"Lab Description\": \"An image gallery system incorporates unsanitized user input from image captions into SQL queries. This lab demonstrates injection through secondary input channels like file metadata. The challenge involves exploiting the caption field to exfiltrate user credentials via the gallery display.\", \"Vulnerability name\": \"SQL Injection via Metadata\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SQL Injection with XML Output lab where xml-based sql injection in search api", "target": "{\"Lab scenario\": \"XML-Based SQL Injection in Search API\", \"Lab Description\": \"A search API returns results in XML format but constructs queries through string concatenation. This lab demonstrates how injection can persist even with output format constraints. The challenge involves exploiting the search parameter to extract database schema via XML responses.\", \"Vulnerability name\": \"SQL Injection with XML Output\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL Injection in Data Visualization scenario. Example: Chart Data Injection in Financial Dashboard", "target": "{\"Lab scenario\": \"Chart Data Injection in Financial Dashboard\", \"Lab Description\": \"A financial dashboard dynamically builds SQL queries from unsanitized user input to generate charts. This lab demonstrates injection through data visualization parameters. The challenge involves manipulating chart metrics to expose sensitive transaction records in tooltip data.\", \"Vulnerability name\": \"SQL Injection in Data Visualization\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy SQL Injection in JSON API lab for: json api authentication bypass", "target": "{\"Lab scenario\": \"JSON API Authentication Bypass\", \"Lab Description\": \"A mobile API accepts JSON credentials but embeds them directly into SQL queries. This lab demonstrates injection through JSON payloads with proper content-type headers. The challenge involves bypassing authentication using boolean-based payloads in the username field.\", \"Vulnerability name\": \"SQL Injection in JSON API\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a SQL Injection in CSV Export scenario. Example: CSV Export Injection", "target": "{\"Lab scenario\": \"CSV Export Injection\", \"Lab Description\": \"A CSV export feature dynamically selects columns through user input without sanitization. This lab demonstrates injection through data export functionality. The challenge involves manipulating the column parameter to export sensitive user credentials in the CSV file.\", \"Vulnerability name\": \"SQL Injection in CSV Export\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium SQL Injection in Password Reset lab for: password reset token enumeration", "target": "{\"Lab scenario\": \"Password Reset Token Enumeration\", \"Lab Description\": \"A password reset system verifies tokens through vulnerable SQL queries. This lab demonstrates user enumeration through blind injection in security workflows. The challenge involves manipulating the token parameter to extract valid usernames from error responses.\", \"Vulnerability name\": \"SQL Injection in Password Reset\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Time-Based Blind SQL Injection scenario. Example: Time-Based Blind Injection in Analytics API", "target": "{\"Lab scenario\": \"Time-Based Blind Injection in Analytics API\", \"Lab Description\": \"An analytics API provides no direct output but is vulnerable to time-based blind SQL injection. This lab demonstrates data extraction through timing delays when boolean conditions are met. The challenge involves extracting the admin password hash character-by-character using response timing analysis.\", \"Vulnerability name\": \"Time-Based Blind SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard GraphQL to SQL Injection lab for: sql injection in graphql union query", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Union Query\", \"Lab Description\": \"A GraphQL API implements custom resolvers that convert GraphQL queries to raw SQL. The union type implementation fails to properly sanitize type names, allowing injection into the generated SQL. The vulnerability exists in the resolver that handles polymorphic queries across multiple database tables. Attackers can exploit this to access restricted data models not normally exposed through the GraphQL schema.\", \"Vulnerability name\": \"GraphQL to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A document management system stores metadata in MongoDB but uses PostgreSQL for full-text search. The translation layer between document queries and SQL search queries improperly handles nested array operators, allowing injection into the generated SQL. The $elemMatch operator is particularly vulnerable as it gets converted to raw SQL without proper escaping of bracket notation.", "target": "{\"Lab scenario\": \"NoSQL to SQL Injection in Hybrid Document-Relational System\", \"Lab Description\": \"A document management system stores metadata in MongoDB but uses PostgreSQL for full-text search. The translation layer between document queries and SQL search queries improperly handles nested array operators, allowing injection into the generated SQL. The $elemMatch operator is particularly vulnerable as it gets converted to raw SQL without proper escaping of bracket notation.\", \"Vulnerability name\": \"NoSQL to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a ML Feature Store Injection lab where sql injection in machine learning feature store", "target": "{\"Lab scenario\": \"SQL Injection in Machine Learning Feature Store\", \"Lab Description\": \"A feature store for ML models dynamically generates SQL queries based on feature names. The query builder fails to properly escape feature names containing special characters, allowing injection into the training data retrieval pipeline. The vulnerability is particularly dangerous as it can expose PII used in model training that would otherwise be inaccessible through normal API endpoints.\", \"Vulnerability name\": \"ML Feature Store Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a LDAP to SQL Injection scenario. Example: LDAP Filter to SQL Injection in HR System", "target": "{\"Lab scenario\": \"LDAP Filter to SQL Injection in HR System\", \"Lab Description\": \"An employee directory converts LDAP search filters to SQL queries for a hybrid authentication system. The translation fails to properly escape special characters in the LDAP filter syntax, allowing injection into the generated SQL. The vulnerability allows attackers to bypass both LDAP and SQL security controls by crafting malicious filters that modify the resulting query structure.\", \"Vulnerability name\": \"LDAP to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A blockchain indexer processes smart contract events and stores them in a SQL database. The event parameter parser fails to properly sanitize tuple types, allowing injection into the INSERT statements that store event data. This vulnerability can be exploited by emitting specially crafted events from a malicious smart contract to manipulate the database.", "target": "{\"Lab scenario\": \"SQL Injection in Blockchain Smart Contract Event Processing\", \"Lab Description\": \"A blockchain indexer processes smart contract events and stores them in a SQL database. The event parameter parser fails to properly sanitize tuple types, allowing injection into the INSERT statements that store event data. This vulnerability can be exploited by emitting specially crafted events from a malicious smart contract to manipulate the database.\", \"Vulnerability name\": \"Blockchain to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An IoT management platform verifies firmware updates by checking version numbers against a SQL database. The version comparison logic directly concatenates user-supplied version strings into the query. Attackers can exploit this by registering malicious firmware with version strings containing SQL payloads that execute when devices check for updates.", "target": "{\"Lab scenario\": \"SQL Injection in IoT Device Firmware Update Verification\", \"Lab Description\": \"An IoT management platform verifies firmware updates by checking version numbers against a SQL database. The version comparison logic directly concatenates user-supplied version strings into the query. Attackers can exploit this by registering malicious firmware with version strings containing SQL payloads that execute when devices check for updates.\", \"Vulnerability name\": \"IoT Firmware SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A geographic feature server accepts GeoJSON input that gets converted to SQL queries using PostGIS functions. The geometry coordinate array processing fails to properly sanitize numeric values, allowing injection into spatial queries. Attackers can exploit this by crafting malicious GeoJSON features that break out of the ST_GeomFromGeoJSON function context.", "target": "{\"Lab scenario\": \"SQL Injection in GeoJSON Feature Server\", \"Lab Description\": \"A geographic feature server accepts GeoJSON input that gets converted to SQL queries using PostGIS functions. The geometry coordinate array processing fails to properly sanitize numeric values, allowing injection into spatial queries. Attackers can exploit this by crafting malicious GeoJSON features that break out of the ST_GeomFromGeoJSON function context.\", \"Vulnerability name\": \"GeoJSON to SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Signature Verification SQLi lab where sql injection in digital signature verification", "target": "{\"Lab scenario\": \"SQL Injection in Digital Signature Verification\", \"Lab Description\": \"A document signing system verifies digital signatures by querying a database of authorized signers. The verification query concatenates the raw signature value directly into the SQL statement. Attackers can exploit this by crafting malicious signatures that contain SQL payloads while still passing cryptographic verification through careful manipulation of signature components.\", \"Vulnerability name\": \"Signature Verification SQLi\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Video Metadata SQLi scenario. Example: SQL Injection in Video Processing Metadata", "target": "{\"Lab scenario\": \"SQL Injection in Video Processing Metadata\", \"Lab Description\": \"A video processing pipeline stores frame metadata in a SQL database. The frame analysis endpoint accepts JSON metadata that gets directly embedded into INSERT statements. Attackers can exploit this by uploading videos with malicious metadata that injects SQL when frames are processed. The vulnerability is particularly dangerous as it executes in a backend worker process with elevated privileges.\", \"Vulnerability name\": \"Video Metadata SQLi\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Voice Command SQLi lab for: sql injection in voice assistant command logging", "target": "{\"Lab scenario\": \"SQL Injection in Voice Assistant Command Logging\", \"Lab Description\": \"A voice assistant system logs interpreted commands to a SQL database for analytics. The voice-to-text processor fails to properly sanitize special characters in commands before logging them. Attackers can exploit this by speaking carefully crafted commands that inject SQL when the logs are processed by administrative tools.\", \"Vulnerability name\": \"Voice Command SQLi\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A GraphQL API implements custom node resolution that dynamically builds SQL queries using unsanitized GraphQL ID values. The global ID pattern used for node references gets directly embedded into WHERE clauses, allowing injection through base64-encoded ID manipulation.", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Node Resolution\", \"Lab Description\": \"A GraphQL API implements custom node resolution that dynamically builds SQL queries using unsanitized GraphQL ID values. The global ID pattern used for node references gets directly embedded into WHERE clauses, allowing injection through base64-encoded ID manipulation.\", \"Vulnerability name\": \"GraphQL Node ID Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium JWT Claim Injection lab for: sql injection in jwt claim processing", "target": "{\"Lab scenario\": \"SQL Injection in JWT Claim Processing\", \"Lab Description\": \"An authentication system processes JWT claims by directly inserting them into SQL queries for permission checks. The 'role' claim from unsigned JWTs gets concatenated into authorization queries, allowing privilege escalation through crafted tokens.\", \"Vulnerability name\": \"JWT Claim Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A hybrid document-relational system translates MongoDB queries to SQL for cross-platform searches. The $where clause JavaScript gets converted to SQL without proper sanitization, allowing injection through specially crafted JavaScript expressions.", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB $where Clause to SQL Translation\", \"Lab Description\": \"A hybrid document-relational system translates MongoDB queries to SQL for cross-platform searches. The $where clause JavaScript gets converted to SQL without proper sanitization, allowing injection through specially crafted JavaScript expressions.\", \"Vulnerability name\": \"NoSQL-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium DynamoDB-to-SQL Injection lab for: sql injection in dynamodb stream processor", "target": "{\"Lab scenario\": \"SQL Injection in DynamoDB Stream Processor\", \"Lab Description\": \"A serverless function processes DynamoDB streams by converting item changes to SQL for a reporting database. The attribute value mapping fails to properly escape special characters, allowing injection through manipulated DynamoDB entries.\", \"Vulnerability name\": \"DynamoDB-to-SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Cache Reconstruction Injection lab for: sql injection in redis-to-sql caching layer", "target": "{\"Lab scenario\": \"SQL Injection in Redis-to-SQL Caching Layer\", \"Lab Description\": \"A caching system stores SQL query results in Redis but reconstructs queries from cached patterns with user input. The query reconstruction fails to properly escape values retrieved from Redis, allowing injection through cache poisoning.\", \"Vulnerability name\": \"Cache Reconstruction Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An application uses Elasticsearch's SQL plugin for analytics, but passes user input directly to the SQL translation layer. The plugin's query builder fails to properly escape special characters in WHERE clauses, allowing injection through search parameters.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL Plugin\", \"Lab Description\": \"An application uses Elasticsearch's SQL plugin for analytics, but passes user input directly to the SQL translation layer. The plugin's query builder fails to properly escape special characters in WHERE clauses, allowing injection through search parameters.\", \"Vulnerability name\": \"Elasticsearch SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Firebase Path Injection scenario. Example: SQL Injection in Firebase Realtime Database Trigger", "target": "{\"Lab scenario\": \"SQL Injection in Firebase Realtime Database Trigger\", \"Lab Description\": \"A Firebase function triggers on database writes to sync data to a SQL database. The path parameters used in the sync operation get directly embedded into SQL queries, allowing injection through manipulated database paths.\", \"Vulnerability name\": \"Firebase Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An OData API implementation converts $filter expressions to SQL without proper escaping. The parser fails to handle special characters in string literals, allowing injection through crafted filter expressions.", "target": "{\"Lab scenario\": \"SQL Injection in OData Filter Parser\", \"Lab Description\": \"An OData API implementation converts $filter expressions to SQL without proper escaping. The parser fails to handle special characters in string literals, allowing injection through crafted filter expressions.\", \"Vulnerability name\": \"OData Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Kafka-to-SQL Injection lab for: sql injection in apache kafka sql connector", "target": "{\"Lab scenario\": \"SQL Injection in Apache Kafka SQL Connector\", \"Lab Description\": \"A Kafka connector streams messages to a SQL database using configured field mappings. The message value deserializer fails to properly escape string values, allowing injection through crafted Kafka messages.\", \"Vulnerability name\": \"Kafka-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a GraphQL Subscription Injection scenario. Example: SQL Injection in GraphQL Subscription Resolver", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Subscription Resolver\", \"Lab Description\": \"A GraphQL subscription resolver dynamically builds SQL queries for real-time updates using unsanitized subscription arguments. The resolver fails to properly escape arguments before embedding them in LIKE clauses for change detection.\", \"Vulnerability name\": \"GraphQL Subscription Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard GraphQL Enum Injection lab for: sql injection in graphql enum type resolution", "target": "{\"Lab scenario\": \"SQL Injection in GraphQL Enum Type Resolution\", \"Lab Description\": \"A GraphQL API dynamically maps enum values to SQL queries without proper validation. Attackers can manipulate enum parameters in introspection queries to break out of the type system and execute arbitrary SQL commands.\", \"Vulnerability name\": \"GraphQL Enum Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a JWT Key ID Injection scenario. Example: SQL Injection in JWT Key ID Header", "target": "{\"Lab scenario\": \"SQL Injection in JWT Key ID Header\", \"Lab Description\": \"A JWT verification system uses the key ID (kid) header to dynamically select database-stored keys. The kid parameter is concatenated directly into SQL queries, allowing injection through crafted token headers.\", \"Vulnerability name\": \"JWT Key ID Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Redis-to-SQL Injection lab for: sql injection in redis time series filter", "target": "{\"Lab scenario\": \"SQL Injection in Redis Time Series Filter\", \"Lab Description\": \"A Redis time series module converts TS.RANGE filters to SQL for hybrid queries. The filter parameter concatenation allows breaking out of Redis syntax into underlying SQL execution context.\", \"Vulnerability name\": \"Redis-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Kafka Connect SQLi lab for: sql injection in kafka connect jdbc sink", "target": "{\"Lab scenario\": \"SQL Injection in Kafka Connect JDBC Sink\", \"Lab Description\": \"A Kafka Connect pipeline uses user-provided table names in JDBC sink configurations. The table name parameter is embedded directly into INSERT statements without sanitization, allowing injection through topic metadata.\", \"Vulnerability name\": \"Kafka Connect SQLi\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a FDW Options Injection scenario. Example: SQL Injection in PostgreSQL FDW Options", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL FDW Options\", \"Lab Description\": \"A multi-database system creates PostgreSQL foreign data wrappers with dynamic options. The option string concatenation allows injection during FDW server creation, compromising linked databases.\", \"Vulnerability name\": \"FDW Options Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Snowflake External Function Injection lab for: sql injection in snowflake external function", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function\", \"Lab Description\": \"A Snowflake data pipeline calls external functions with unsanitized parameters. The function arguments are concatenated directly into SQL queries, allowing injection through API gateway requests.\", \"Vulnerability name\": \"Snowflake External Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Elasticsearch ODBC Injection lab where sql injection in elasticsearch sql odbc driver", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver\", \"Lab Description\": \"An application uses Elasticsearch's SQL ODBC driver with user-provided query parameters. The parameter concatenation in the ODBC layer allows injection that bypasses Elasticsearch's normal security controls.\", \"Vulnerability name\": \"Elasticsearch ODBC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Change Stream SQL Injection lab for: sql injection in mongodb change stream", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB Change Stream\", \"Lab Description\": \"A change stream listener converts MongoDB change events to SQL inserts. The document field paths are concatenated directly into SQL without sanitization, allowing injection through crafted collection updates.\", \"Vulnerability name\": \"Change Stream SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cypher-to-SQL Injection scenario. Example: SQL Injection in Neo4j Cypher to SQL Translation", "target": "{\"Lab scenario\": \"SQL Injection in Neo4j Cypher to SQL Translation\", \"Lab Description\": \"A graph analytics platform converts Cypher queries to SQL for relational storage. The node property filters are concatenated directly into SQL, allowing injection through crafted MATCH clauses.\", \"Vulnerability name\": \"Cypher-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Flux-to-SQL Injection scenario. Example: SQL Injection in InfluxDB Flux Query", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Query\", \"Lab Description\": \"A monitoring system converts InfluxDB Flux queries to SQL for long-term storage. The Flux filter expressions are concatenated directly into SQL, allowing injection through crafted predicate functions.\", \"Vulnerability name\": \"Flux-to-SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Continuous Aggregate Injection lab where sql injection in timescaledb continuous aggregate", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate\", \"Lab Description\": \"A time-series platform creates TimescaleDB continuous aggregates with user-provided refresh policies. The policy parameters are concatenated directly into internal queries, allowing injection during materialization.\", \"Vulnerability name\": \"Continuous Aggregate Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A CockroachDB changefeed sends data to a webhook with SQL-defined filters. The filter expressions are concatenated directly into CDC queries, allowing injection through crafted webhook configurations.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook\", \"Lab Description\": \"A CockroachDB changefeed sends data to a webhook with SQL-defined filters. The filter expressions are concatenated directly into CDC queries, allowing injection through crafted webhook configurations.\", \"Vulnerability name\": \"CDC Webhook Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a FTS5 Match Injection lab where sql injection in sqlite fts5 extension", "target": "{\"Lab scenario\": \"SQL Injection in SQLite FTS5 Extension\", \"Lab Description\": \"A mobile app uses SQLite's FTS5 extension with user-provided match expressions. The match parameters are concatenated directly into virtual table queries, allowing injection through crafted search terms.\", \"Vulnerability name\": \"FTS5 Match Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium DuckDB File Import Injection lab for: sql injection in duckdb external file import", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB External File Import\", \"Lab Description\": \"A data analysis tool uses DuckDB's file import functionality with user-provided file names. The file path concatenation allows breaking out of import context to execute arbitrary SQL during file scanning.\", \"Vulnerability name\": \"DuckDB File Import Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a MV Refresh Priority Injection scenario. Example: SQL Injection in Materialized View Refresh Priority", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh Priority\", \"Lab Description\": \"A data warehouse allows setting refresh priorities for materialized views. The priority parameter is concatenated directly into internal refresh queries, allowing injection during view maintenance operations.\", \"Vulnerability name\": \"MV Refresh Priority Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a PolyBase External Table Injection scenario. Example: SQL Injection in SQL Server PolyBase External Table", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server PolyBase External Table\", \"Lab Description\": \"A SQL Server instance creates PolyBase external tables with user-provided location parameters. The location string concatenation allows injection during external data source configuration.\", \"Vulnerability name\": \"PolyBase External Table Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A BigQuery implementation calls remote functions with unsanitized parameters. The function arguments are concatenated directly into SQL queries, allowing injection through HTTP endpoint responses.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Function\", \"Lab Description\": \"A BigQuery implementation calls remote functions with unsanitized parameters. The function arguments are concatenated directly into SQL queries, allowing injection through HTTP endpoint responses.\", \"Vulnerability name\": \"BigQuery Remote Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Snowflake Stage Injection lab for: sql injection in snowflake external stage", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Stage\", \"Lab Description\": \"A Snowflake pipeline creates external stages with user-provided credentials. The credential string concatenation allows injection during stage creation, compromising cloud storage integrations.\", \"Vulnerability name\": \"Snowflake Stage Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Databricks Widget Injection lab for: sql injection in databricks notebook parameter", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Parameter\", \"Lab Description\": \"A Databricks notebook executes SQL queries with widget parameters. The parameter values are concatenated directly into queries without sanitization, allowing injection through notebook execution.\", \"Vulnerability name\": \"Databricks Widget Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Trino Catalog Injection scenario. Example: SQL Injection in Trino Catalog Configuration", "target": "{\"Lab scenario\": \"SQL Injection in Trino Catalog Configuration\", \"Lab Description\": \"A Trino cluster creates catalog configurations with user-provided properties. The property values are concatenated directly into internal queries, allowing injection during catalog initialization.\", \"Vulnerability name\": \"Trino Catalog Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Presto cluster accepts session properties that modify query execution. The property values are concatenated directly into system queries, allowing injection through client session settings.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Session Property\", \"Lab Description\": \"A Presto cluster accepts session properties that modify query execution. The property values are concatenated directly into system queries, allowing injection through client session settings.\", \"Vulnerability name\": \"Presto Session Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a ClickHouse Dictionary Injection scenario. Example: SQL Injection in ClickHouse External Dictionary", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse External Dictionary\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with user-provided source parameters. The configuration values are concatenated directly into dictionary queries, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Druid Context Injection lab for: sql injection in druid sql query context", "target": "{\"Lab scenario\": \"SQL Injection in Druid SQL Query Context\", \"Lab Description\": \"A Druid cluster processes SQL queries with user-provided context parameters. The context values are concatenated directly into native Druid queries, allowing injection through query context settings.\", \"Vulnerability name\": \"Druid Context Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Hive Metastore Injection lab for: sql injection in hive metastore partition filter", "target": "{\"Lab scenario\": \"SQL Injection in Hive Metastore Partition Filter\", \"Lab Description\": \"A Hive metastore processes partition filters with user-provided expressions. The filter values are concatenated directly into metastore queries, allowing injection through partition pruning operations.\", \"Vulnerability name\": \"Hive Metastore Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Impala Admission Control Injection lab for: sql injection in impala admission control", "target": "{\"Lab scenario\": \"SQL Injection in Impala Admission Control\", \"Lab Description\": \"An Impala cluster processes admission control rules with user-provided conditions. The condition expressions are concatenated directly into policy queries, allowing injection through resource allocation rules.\", \"Vulnerability name\": \"Impala Admission Control Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Superset Filter Injection scenario. Example: SQL Injection in Apache Superset Dashboard Filters", "target": "{\"Lab scenario\": \"SQL Injection in Apache Superset Dashboard Filters\", \"Lab Description\": \"A Superset dashboard allows users to save custom filter values that get embedded directly into Jinja-templated SQL queries. The filter value processing fails to properly escape special characters, allowing injection through saved dashboard state.\", \"Vulnerability name\": \"Superset Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard SQLAlchemy Hybrid Injection lab for: sql injection in sqlalchemy hybrid properties", "target": "{\"Lab scenario\": \"SQL Injection in SQLAlchemy Hybrid Properties\", \"Lab Description\": \"A Flask application uses SQLAlchemy's hybrid_property decorator with unsanitized string formatting. The property expressions get compiled directly into SQL queries, allowing injection through Python attribute access.\", \"Vulnerability name\": \"SQLAlchemy Hybrid Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Prisma Raw Query Injection lab where sql injection in prisma raw query middleware", "target": "{\"Lab scenario\": \"SQL Injection in Prisma Raw Query Middleware\", \"Lab Description\": \"A Next.js application uses Prisma's $queryRaw with unsanitized template literals. The middleware passes raw strings directly to the database driver, allowing injection through GraphQL resolver arguments.\", \"Vulnerability name\": \"Prisma Raw Query Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Hasura GraphQL engine processes event trigger webhook headers with unsanitized SQL interpolation. The header values get embedded directly into trigger processing queries, allowing injection through crafted HTTP headers.", "target": "{\"Lab scenario\": \"SQL Injection in Hasura Event Trigger Headers\", \"Lab Description\": \"A Hasura GraphQL engine processes event trigger webhook headers with unsanitized SQL interpolation. The header values get embedded directly into trigger processing queries, allowing injection through crafted HTTP headers.\", \"Vulnerability name\": \"Hasura Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a DBT Config Injection scenario. Example: SQL Injection in DBT Model Configs", "target": "{\"Lab scenario\": \"SQL Injection in DBT Model Configs\", \"Lab Description\": \"A data transformation pipeline uses user-provided values in dbt model configurations. The config values get interpolated directly into compiled SQL models, allowing injection during dbt runs.\", \"Vulnerability name\": \"DBT Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Dagster Asset Injection lab where sql injection in dagster asset materialization", "target": "{\"Lab scenario\": \"SQL Injection in Dagster Asset Materialization\", \"Lab Description\": \"A Dagster pipeline materializes assets with user-provided metadata. The metadata values get embedded directly into SQL queries during asset recording, allowing injection through op outputs.\", \"Vulnerability name\": \"Dagster Asset Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Airflow URI Injection scenario. Example: SQL Injection in Airflow Connection URI", "target": "{\"Lab scenario\": \"SQL Injection in Airflow Connection URI\", \"Lab Description\": \"An Airflow DAG creates database connections with user-provided URIs. The URI parameters get concatenated directly into connection strings, allowing injection during connection pooling.\", \"Vulnerability name\": \"Airflow URI Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Metabase Subscription Injection scenario. Example: SQL Injection in Metabase Dashboard Subscriptions", "target": "{\"Lab scenario\": \"SQL Injection in Metabase Dashboard Subscriptions\", \"Lab Description\": \"A Metabase instance processes dashboard subscription parameters with unsanitized SQL interpolation. The subscription values get embedded directly into scheduled queries, allowing injection through email alert parameters.\", \"Vulnerability name\": \"Metabase Subscription Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Retool Connection Injection lab where sql injection in retool db connection strings", "target": "{\"Lab scenario\": \"SQL Injection in Retool DB Connection Strings\", \"Lab Description\": \"A Retool application creates database resources with user-provided connection strings. The connection parameters get concatenated directly into JDBC URLs, allowing injection during resource initialization.\", \"Vulnerability name\": \"Retool Connection Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Cube.js Pre-Agg Injection scenario. Example: SQL Injection in Cube.js Pre-Aggregation SQL", "target": "{\"Lab scenario\": \"SQL Injection in Cube.js Pre-Aggregation SQL\", \"Lab Description\": \"A Cube.js deployment allows user-provided SQL snippets in pre-aggregation definitions. The SQL gets embedded directly into materialization queries, allowing injection through cube schema definitions.\", \"Vulnerability name\": \"Cube.js Pre-Agg Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Snowflake Header Injection lab where sql injection in snowflake external function headers", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Headers\", \"Lab Description\": \"A Snowflake external function passes HTTP headers directly into SQL queries during result processing. The header values get concatenated without sanitization, allowing injection through API gateway requests.\", \"Vulnerability name\": \"Snowflake Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Looker dashboard uses Liquid templating with user-provided parameters in SQL queries. The parameter interpolation fails to properly escape special characters, allowing injection through dashboard filters.", "target": "{\"Lab scenario\": \"SQL Injection in Looker Liquid Parameters\", \"Lab Description\": \"A Looker dashboard uses Liquid templating with user-provided parameters in SQL queries. The parameter interpolation fails to properly escape special characters, allowing injection through dashboard filters.\", \"Vulnerability name\": \"Looker Liquid Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Tableau Hyper Injection lab where sql injection in tableau hyper extract creation", "target": "{\"Lab scenario\": \"SQL Injection in Tableau Hyper Extract Creation\", \"Lab Description\": \"A Tableau Server creates Hyper extracts with user-provided SQL queries. The query parameters get concatenated directly into extract generation jobs, allowing injection through published data source configurations.\", \"Vulnerability name\": \"Tableau Hyper Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Power BI DirectQuery Injection lab for: sql injection in power bi directquery parameters", "target": "{\"Lab scenario\": \"SQL Injection in Power BI DirectQuery Parameters\", \"Lab Description\": \"A Power BI report uses DirectQuery with user-provided parameter values. The parameters get embedded directly into source queries, allowing injection through report filters.\", \"Vulnerability name\": \"Power BI DirectQuery Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Google Data Studio community connector uses user-provided config values in SQL queries. The configuration parameters get concatenated directly into BigQuery jobs, allowing injection through connector settings.", "target": "{\"Lab scenario\": \"SQL Injection in Google Data Studio Community Connectors\", \"Lab Description\": \"A Google Data Studio community connector uses user-provided config values in SQL queries. The configuration parameters get concatenated directly into BigQuery jobs, allowing injection through connector settings.\", \"Vulnerability name\": \"Data Studio Connector Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Salesforce SOQL Injection lab where sql injection in salesforce apex dynamic soql", "target": "{\"Lab scenario\": \"SQL Injection in Salesforce Apex Dynamic SOQL\", \"Lab Description\": \"A Salesforce Apex controller builds SOQL queries with unsanitized user input. The string concatenation allows breaking out of SOQL context into underlying SQL execution during batch processing.\", \"Vulnerability name\": \"Salesforce SOQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a APEX Report Injection lab where sql injection in oracle apex interactive report sql", "target": "{\"Lab scenario\": \"SQL Injection in Oracle APEX Interactive Report SQL\", \"Lab Description\": \"An Oracle APEX application builds interactive reports with user-modifiable SQL. The source queries get concatenated directly into report generation, allowing injection through column filter parameters.\", \"Vulnerability name\": \"APEX Report Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a HANA Calculation View Injection scenario. Example: SQL Injection in SAP HANA Calculation View Parameters", "target": "{\"Lab scenario\": \"SQL Injection in SAP HANA Calculation View Parameters\", \"Lab Description\": \"A SAP HANA calculation view accepts user-provided parameters in SQL script nodes. The parameter values get embedded directly into script execution, allowing injection through analytical query inputs.\", \"Vulnerability name\": \"HANA Calculation View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cognos Report Injection lab where sql injection in ibm cognos report studio sql", "target": "{\"Lab scenario\": \"SQL Injection in IBM Cognos Report Studio SQL\", \"Lab Description\": \"A Cognos Report Studio report uses dynamic SQL queries with user-provided prompt values. The prompt parameters get concatenated directly into query execution, allowing injection through report filters.\", \"Vulnerability name\": \"Cognos Report Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard MicroStrategy SQL Pass Injection lab for: sql injection in microstrategy report sql pass-through", "target": "{\"Lab scenario\": \"SQL Injection in MicroStrategy Report SQL Pass-Through\", \"Lab Description\": \"A MicroStrategy report uses SQL pass-through with user-modifiable query fragments. The SQL snippets get concatenated directly into dataset queries, allowing injection through attribute forms.\", \"Vulnerability name\": \"MicroStrategy SQL Pass Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Qlik Load Script Injection lab for: sql injection in qlik sense load script", "target": "{\"Lab scenario\": \"SQL Injection in Qlik Sense Load Script\", \"Lab Description\": \"A Qlik Sense app uses user-provided parameters in load script SQL queries. The parameter values get embedded directly into script execution, allowing injection through app variables.\", \"Vulnerability name\": \"Qlik Load Script Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Alteryx Input Tool Injection scenario. Example: SQL Injection in Alteryx Input Data Tool SQL", "target": "{\"Lab scenario\": \"SQL Injection in Alteryx Input Data Tool SQL\", \"Lab Description\": \"An Alteryx workflow uses the Input Data tool with user-provided SQL queries. The query parameters get concatenated directly into tool configuration, allowing injection through workflow parameters.\", \"Vulnerability name\": \"Alteryx Input Tool Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Informatica SQL Transform Injection scenario. Example: SQL Injection in Informatica PowerCenter SQL Transformation", "target": "{\"Lab scenario\": \"SQL Injection in Informatica PowerCenter SQL Transformation\", \"Lab Description\": \"An Informatica workflow uses SQL Transformation with user-provided query fragments. The query portions get concatenated directly into transformation SQL, allowing injection through parameter files.\", \"Vulnerability name\": \"Informatica SQL Transform Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Talend Component Injection scenario. Example: SQL Injection in Talend tDBInput Component", "target": "{\"Lab scenario\": \"SQL Injection in Talend tDBInput Component\", \"Lab Description\": \"A Talend job uses tDBInput components with user-provided query parameters. The parameter values get concatenated directly into component queries, allowing injection through context variables.\", \"Vulnerability name\": \"Talend Component Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Pentaho SQL Step Injection scenario. Example: SQL Injection in Pentaho Data Integration SQL Step", "target": "{\"Lab scenario\": \"SQL Injection in Pentaho Data Integration SQL Step\", \"Lab Description\": \"A Pentaho transformation uses Table Input steps with user-provided SQL fragments. The query portions get concatenated directly into step execution, allowing injection through transformation parameters.\", \"Vulnerability name\": \"Pentaho SQL Step Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Matillion Query Component Injection lab for: sql injection in matillion etl query components", "target": "{\"Lab scenario\": \"SQL Injection in Matillion ETL Query Components\", \"Lab Description\": \"A Matillion job uses Database Query components with user-provided SQL parameters. The parameter values get embedded directly into component queries, allowing injection through job variables.\", \"Vulnerability name\": \"Matillion Query Component Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Fivetran Connector Injection lab where sql injection in fivetran connector configuration", "target": "{\"Lab scenario\": \"SQL Injection in Fivetran Connector Configuration\", \"Lab Description\": \"A Fivetran connector uses user-provided parameters in SQL queries during schema detection. The configuration values get concatenated directly into information schema queries, allowing injection through connector setup.\", \"Vulnerability name\": \"Fivetran Connector Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Stitch Data Source Injection lab for: sql injection in stitch data source sql", "target": "{\"Lab scenario\": \"SQL Injection in Stitch Data Source SQL\", \"Lab Description\": \"A Stitch integration uses user-provided SQL for data extraction. The query parameters get concatenated directly into replication queries, allowing injection through integration settings.\", \"Vulnerability name\": \"Stitch Data Source Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium MongoDB JS Injection lab for: sql injection in mongodb $where clause", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB $where Clause\", \"Lab Description\": \"A Node.js application uses user input directly in MongoDB's $where operator, which allows JavaScript evaluation. Attackers can break out of the query context and execute arbitrary JavaScript.\", \"Vulnerability name\": \"MongoDB JS Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a DynamoDB Expression Injection scenario. Example: SQL Injection in DynamoDB Filter Expression", "target": "{\"Lab scenario\": \"SQL Injection in DynamoDB Filter Expression\", \"Lab Description\": \"An AWS Lambda function builds DynamoDB filter expressions by concatenating user input. The expression evaluation allows breaking out into underlying SQL-like syntax.\", \"Vulnerability name\": \"DynamoDB Expression Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Cassandra CQL Injection lab where sql injection in cassandra cql prepared statement bypass", "target": "{\"Lab scenario\": \"SQL Injection in Cassandra CQL Prepared Statement Bypass\", \"Lab Description\": \"A Java application uses string concatenation for Cassandra CQL query parts before preparing statements, allowing injection through crafted parameters.\", \"Vulnerability name\": \"Cassandra CQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A .NET application builds Cosmos DB SQL queries by concatenating user input, allowing injection through crafted WHERE clauses.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB SQL API\", \"Lab Description\": \"A .NET application builds Cosmos DB SQL queries by concatenating user input, allowing injection through crafted WHERE clauses.\", \"Vulnerability name\": \"Cosmos DB SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Firestore REST Injection scenario. Example: SQL Injection in Google Firestore REST API", "target": "{\"Lab scenario\": \"SQL Injection in Google Firestore REST API\", \"Lab Description\": \"A Firebase application uses user input directly in Firestore REST API filter parameters, allowing injection through crafted field paths.\", \"Vulnerability name\": \"Firestore REST Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A JavaScript application builds ArangoDB AQL queries by concatenating user input, allowing injection through crafted FILTER clauses.", "target": "{\"Lab scenario\": \"SQL Injection in ArangoDB AQL Query\", \"Lab Description\": \"A JavaScript application builds ArangoDB AQL queries by concatenating user input, allowing injection through crafted FILTER clauses.\", \"Vulnerability name\": \"ArangoDB AQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a CouchDB Mango Injection scenario. Example: SQL Injection in CouchDB Mango Query", "target": "{\"Lab scenario\": \"SQL Injection in CouchDB Mango Query\", \"Lab Description\": \"A Python application builds CouchDB Mango queries by concatenating user input in selector expressions, allowing injection through crafted JSON.\", \"Vulnerability name\": \"CouchDB Mango Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Influx CLI Injection scenario. Example: SQL Injection in InfluxDB CLI Command", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB CLI Command\", \"Lab Description\": \"A bash script builds InfluxDB CLI commands by concatenating user input, allowing injection through crafted query parameters.\", \"Vulnerability name\": \"Influx CLI Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Neo4j Shell Injection scenario. Example: SQL Injection in Neo4j Cypher Shell", "target": "{\"Lab scenario\": \"SQL Injection in Neo4j Cypher Shell\", \"Lab Description\": \"A Java application builds Neo4j Cypher queries by concatenating user input in shell commands, allowing injection through crafted node properties.\", \"Vulnerability name\": \"Neo4j Shell Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Redshift UNLOAD Injection scenario. Example: SQL Injection in Amazon Redshift UNLOAD Command", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift UNLOAD Command\", \"Lab Description\": \"A data pipeline builds Redshift UNLOAD commands with user-provided S3 paths, allowing injection through crafted credentials strings.\", \"Vulnerability name\": \"Redshift UNLOAD Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A multi-database system dynamically creates PostgreSQL foreign data wrappers with user-controlled OPTIONS parameters. The OPTIONS string is concatenated directly into the FDW creation query without proper escaping, allowing attackers to break out of the wrapper configuration context and execute arbitrary SQL commands when the foreign server is accessed. This is particularly dangerous as it can compromise linked database systems.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL FDW (Foreign Data Wrapper) OPTIONS Clause\", \"Lab Description\": \"A multi-database system dynamically creates PostgreSQL foreign data wrappers with user-controlled OPTIONS parameters. The OPTIONS string is concatenated directly into the FDW creation query without proper escaping, allowing attackers to break out of the wrapper configuration context and execute arbitrary SQL commands when the foreign server is accessed. This is particularly dangerous as it can compromise linked database systems.\", \"Vulnerability name\": \"PostgreSQL FDW OPTIONS Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Snowflake data pipeline uses external functions that pass HTTP headers directly into SQL queries during result processing. The header values are concatenated without proper sanitization when building the function's metadata queries, allowing injection through crafted API gateway requests. This vulnerability is particularly dangerous as it bypasses Snowflake's normal parameterized query protections.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function HEADERS Parameter\", \"Lab Description\": \"A Snowflake data pipeline uses external functions that pass HTTP headers directly into SQL queries during result processing. The header values are concatenated without proper sanitization when building the function's metadata queries, allowing injection through crafted API gateway requests. This vulnerability is particularly dangerous as it bypasses Snowflake's normal parameterized query protections.\", \"Vulnerability name\": \"Snowflake External Function Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: An Azure Cosmos DB application uses JavaScript stored procedures that dynamically build SQL queries with user-provided input from the procedure's context object. The input is concatenated directly into the query text without proper sanitization, allowing attackers to break out of the stored procedure's execution context and access unauthorized collections. This vulnerability is particularly dangerous in multi-tenant Cosmos DB implementations.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB Stored Procedure Context\", \"Lab Description\": \"An Azure Cosmos DB application uses JavaScript stored procedures that dynamically build SQL queries with user-provided input from the procedure's context object. The input is concatenated directly into the query text without proper sanitization, allowing attackers to break out of the stored procedure's execution context and access unauthorized collections. This vulnerability is particularly dangerous in multi-tenant Cosmos DB implementations.\", \"Vulnerability name\": \"Cosmos DB Stored Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a BigQuery Scripting Variable Injection lab where sql injection in google bigquery scripting variables", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Scripting Variables\", \"Lab Description\": \"A BigQuery data pipeline uses scripting variables that are interpolated directly into dynamic SQL statements without proper escaping. The variables are set from user-controlled input and used in subsequent query steps, allowing attackers to break out of the variable context and execute arbitrary commands. This vulnerability is particularly dangerous in scheduled BigQuery scripts that process sensitive data.\", \"Vulnerability name\": \"BigQuery Scripting Variable Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Snowflake Time Travel Injection scenario. Example: SQL Injection in Snowflake Time Travel Queries", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Time Travel Queries\", \"Lab Description\": \"A data recovery system builds Snowflake time travel queries with user-controlled timestamp parameters. The timestamps are concatenated directly into AT/ BEFORE clauses without proper validation, allowing attackers to modify query behavior and access historical data beyond their privileges. This vulnerability is particularly dangerous in compliance scenarios where time travel is used for auditing.\", \"Vulnerability name\": \"Snowflake Time Travel Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Databricks notebook uses SQL widgets that accept user input which is then interpolated directly into Spark SQL queries without proper parameterization. The widget values are concatenated into the query text, allowing attackers to break out of the intended query structure. This vulnerability is particularly dangerous in shared notebook environments where multiple users have execution access.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Widget Parameters\", \"Lab Description\": \"A Databricks notebook uses SQL widgets that accept user input which is then interpolated directly into Spark SQL queries without proper parameterization. The widget values are concatenated into the query text, allowing attackers to break out of the intended query structure. This vulnerability is particularly dangerous in shared notebook environments where multiple users have execution access.\", \"Vulnerability name\": \"Databricks Widget Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Trino Catalog Configuration Injection scenario. Example: SQL Injection in Trino Dynamic Catalog Configuration", "target": "{\"Lab scenario\": \"SQL Injection in Trino Dynamic Catalog Configuration\", \"Lab Description\": \"A Trino cluster allows dynamic catalog configuration through user-provided properties. The properties are concatenated directly into catalog initialization queries without proper escaping, allowing attackers to modify catalog behavior and access unauthorized data sources. This vulnerability is particularly dangerous in multi-catalog environments.\", \"Vulnerability name\": \"Trino Catalog Configuration Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a ClickHouse Dictionary Source Injection scenario. Example: SQL Injection in ClickHouse External Dictionary Source", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse External Dictionary Source\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with user-provided source queries. The queries are concatenated directly into dictionary loading logic without proper sanitization, allowing attackers to modify dictionary behavior and access system tables. This vulnerability is particularly dangerous when dictionaries are configured to refresh automatically.\", \"Vulnerability name\": \"ClickHouse Dictionary Source Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Druid Context Parameter Injection scenario. Example: SQL Injection in Druid SQL Query CONTEXT Parameters", "target": "{\"Lab scenario\": \"SQL Injection in Druid SQL Query CONTEXT Parameters\", \"Lab Description\": \"A Druid cluster processes SQL queries with user-provided context parameters that are interpolated directly into native Druid queries. The parameters are used to modify query execution behavior and are concatenated without proper sanitization, allowing attackers to bypass Druid's SQL layer and execute native queries directly.\", \"Vulnerability name\": \"Druid Context Parameter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Hive Metastore Partition Injection lab where sql injection in hive metastore partition clause", "target": "{\"Lab scenario\": \"SQL Injection in Hive Metastore PARTITION Clause\", \"Lab Description\": \"A Hive metastore service processes partition filters with user-provided expressions that are concatenated directly into metastore queries. The expressions are not properly sanitized, allowing attackers to bypass partition pruning restrictions and access unauthorized data partitions. This vulnerability is particularly dangerous in multi-tenant Hive implementations.\", \"Vulnerability name\": \"Hive Metastore Partition Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Impala Admission Control Injection scenario. Example: SQL Injection in Impala Admission Control QUERY_CONDITION", "target": "{\"Lab scenario\": \"SQL Injection in Impala Admission Control QUERY_CONDITION\", \"Lab Description\": \"An Impala cluster processes admission control rules with user-provided conditions that are concatenated directly into policy evaluation queries. The conditions are not properly sanitized, allowing attackers to modify query prioritization and resource allocation. This vulnerability is particularly dangerous in shared Impala clusters with resource constraints.\", \"Vulnerability name\": \"Impala Admission Control Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Presto Session Property Injection lab where sql injection in presto session property values", "target": "{\"Lab scenario\": \"SQL Injection in Presto Session Property Values\", \"Lab Description\": \"A Presto cluster accepts session properties that modify query execution behavior. The property values are concatenated directly into system queries without proper sanitization, allowing attackers to modify query plans and access unauthorized information. This vulnerability is particularly dangerous when session properties are set from user-controlled sources.\", \"Vulnerability name\": \"Presto Session Property Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A CockroachDB changefeed sends data to webhooks with user-provided filter expressions that are concatenated directly into CDC queries. The filters are not properly sanitized, allowing attackers to modify changefeed behavior and access unauthorized data. This vulnerability is particularly dangerous in multi-tenant CockroachDB deployments.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Filters\", \"Lab Description\": \"A CockroachDB changefeed sends data to webhooks with user-provided filter expressions that are concatenated directly into CDC queries. The filters are not properly sanitized, allowing attackers to modify changefeed behavior and access unauthorized data. This vulnerability is particularly dangerous in multi-tenant CockroachDB deployments.\", \"Vulnerability name\": \"CockroachDB CDC Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A data analysis tool uses DuckDB's HTTPFS extension with user-provided URLs that are concatenated directly into remote file access queries. The URLs are not properly sanitized, allowing attackers to break out of the file access context and execute arbitrary SQL commands. This vulnerability is particularly dangerous when accessing untrusted remote data sources.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension URLs\", \"Lab Description\": \"A data analysis tool uses DuckDB's HTTPFS extension with user-provided URLs that are concatenated directly into remote file access queries. The URLs are not properly sanitized, allowing attackers to break out of the file access context and execute arbitrary SQL commands. This vulnerability is particularly dangerous when accessing untrusted remote data sources.\", \"Vulnerability name\": \"DuckDB HTTPFS URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Materialized View Refresh Injection lab for: sql injection in materialized view refresh options", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View REFRESH OPTIONS\", \"Lab Description\": \"A data warehouse allows setting refresh options for materialized views with user-provided values that are concatenated directly into refresh queries. The options are not properly sanitized, allowing attackers to modify refresh behavior and execute arbitrary commands during view maintenance operations. This vulnerability is particularly dangerous in automated refresh scenarios.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Oracle Spatial Injection scenario. Example: SQL Injection in Oracle SDO_GEOMETRY Constructor", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_GEOMETRY Constructor\", \"Lab Description\": \"A GIS application builds Oracle spatial queries using unsanitized user input in SDO_GEOMETRY constructors. The WKT (Well-Known Text) parameters are concatenated directly into spatial queries, allowing injection through crafted geometry definitions that break out of the spatial function context.\", \"Vulnerability name\": \"Oracle Spatial Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL Server HierarchyId Injection lab for: sql injection in sql server hierarchyid parse()", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server HierarchyId Parse()\", \"Lab Description\": \"A hierarchical data application uses unsanitized input in SQL Server's HierarchyId.Parse() function. The string representation of hierarchy paths is concatenated directly into queries, allowing injection through crafted path strings that break out of the hierarchy context.\", \"Vulnerability name\": \"SQL Server HierarchyId Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a PostgreSQL JSONB Path Injection scenario. Example: SQL Injection in PostgreSQL JSONB Path Queries", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL JSONB Path Queries\", \"Lab Description\": \"A document store application builds PostgreSQL JSONB path queries with unsanitized user input. The path expressions are concatenated directly into jsonb_path_query functions, allowing injection through crafted JSON path strings that break out of the document context.\", \"Vulnerability name\": \"PostgreSQL JSONB Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A schema-migration tool dynamically creates MySQL generated columns using unsanitized input in the generation expression. The expressions are concatenated directly into ALTER TABLE statements, allowing injection during column creation that persists in the schema.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Generated Columns\", \"Lab Description\": \"A schema-migration tool dynamically creates MySQL generated columns using unsanitized input in the generation expression. The expressions are concatenated directly into ALTER TABLE statements, allowing injection during column creation that persists in the schema.\", \"Vulnerability name\": \"MySQL Generated Column Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium SQL Server Graph MATCH Injection lab for: sql injection in sql server graph match clauses", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph MATCH Clauses\", \"Lab Description\": \"A graph analytics application builds SQL Server graph queries with unsanitized input in MATCH clauses. The node/edge patterns are concatenated directly into queries, allowing injection through crafted graph patterns that break out of the graph context.\", \"Vulnerability name\": \"SQL Server Graph MATCH Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Snowflake Stored Procedure Injection lab where sql injection in snowflake stored procedure dynamic sql", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Stored Procedure Dynamic SQL\", \"Lab Description\": \"A Snowflake data pipeline uses JavaScript stored procedures that build dynamic SQL with unsanitized input. The input is concatenated directly into execute immediate statements, allowing injection through crafted strings that bypass Snowflake's normal parameterization protections.\", \"Vulnerability name\": \"Snowflake Stored Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium BigQuery Scripting Control Injection lab for: sql injection in google bigquery scripting control structures", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Scripting Control Structures\", \"Lab Description\": \"A BigQuery scripting workflow uses unsanitized input in IF/CASE control structures that are interpolated into dynamic SQL. The conditions are concatenated directly into script logic, allowing injection through crafted boolean expressions that modify control flow.\", \"Vulnerability name\": \"BigQuery Scripting Control Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Synapse OPENROWSET Injection lab where sql injection in azure synapse serverless openrowset", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Serverless OPENROWSET\", \"Lab Description\": \"A Synapse analytics pipeline uses OPENROWSET with unsanitized input for file paths or format options. The parameters are concatenated directly into external table queries, allowing injection through crafted file specifications that break out of the data loading context.\", \"Vulnerability name\": \"Synapse OPENROWSET Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Databricks notebook uses Delta Lake time travel with unsanitized version/timestamp parameters. The values are concatenated directly into table version queries, allowing injection through crafted time specifications that access unauthorized data versions.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Delta Lake Time Travel\", \"Lab Description\": \"A Databricks notebook uses Delta Lake time travel with unsanitized version/timestamp parameters. The values are concatenated directly into table version queries, allowing injection through crafted time specifications that access unauthorized data versions.\", \"Vulnerability name\": \"Delta Lake Time Travel Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Redshift Spectrum Injection lab for: sql injection in amazon redshift spectrum external tables", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift Spectrum External Tables\", \"Lab Description\": \"A Redshift cluster defines Spectrum external tables with unsanitized input in table properties or location paths. The parameters are concatenated directly into DDL statements, allowing injection when the external tables are queried.\", \"Vulnerability name\": \"Redshift Spectrum Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Snowflake COPY Options Injection lab where sql injection in snowflake external stage copy options", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Stage COPY Options\", \"Lab Description\": \"A Snowflake pipeline uses COPY INTO commands with user-controlled stage options. The options are concatenated directly into load/unload operations, allowing injection through crafted file format specifications that modify data loading behavior.\", \"Vulnerability name\": \"Snowflake COPY Options Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Spanner DML Returning Injection scenario. Example: SQL Injection in Google Cloud Spanner DML Returning Clause", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner DML Returning Clause\", \"Lab Description\": \"A Spanner application builds DML statements with unsanitized input in RETURNING clauses. The column expressions are concatenated directly into mutation operations, allowing injection that persists after data modification.\", \"Vulnerability name\": \"Spanner DML Returning Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Kusto Embedded SQL Injection lab for: sql injection in azure data explorer kql embedded sql", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer KQL Embedded SQL\", \"Lab Description\": \"A Kusto (KQL) query uses embedded SQL with unsanitized input. The SQL fragments are concatenated directly into KQL execute_sql() functions, allowing injection through crafted SQL that breaks out of the KQL context.\", \"Vulnerability name\": \"Kusto Embedded SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Druid cluster processes native queries containing embedded SQL fragments with unsanitized input. The SQL portions are concatenated directly into query planning, allowing injection that bypasses Druid's usual SQL layer protections.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid Native Query SQL Fragments\", \"Lab Description\": \"A Druid cluster processes native queries containing embedded SQL fragments with unsanitized input. The SQL portions are concatenated directly into query planning, allowing injection that bypasses Druid's usual SQL layer protections.\", \"Vulnerability name\": \"Druid Native Query Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Flux-to-SQL Injection scenario. Example: SQL Injection in InfluxDB Flux to SQL Conversion", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux to SQL Conversion\", \"Lab Description\": \"A monitoring system converts InfluxDB Flux queries to SQL with unsanitized input in filter expressions. The Flux predicates are concatenated directly into SQL WHERE clauses, allowing injection through crafted filter logic.\", \"Vulnerability name\": \"Flux-to-SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A time-series platform creates TimescaleDB continuous aggregates with user-provided refresh policies. The policy parameters are concatenated directly into materialization queries, allowing injection during automated refreshes.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregates Materialization\", \"Lab Description\": \"A time-series platform creates TimescaleDB continuous aggregates with user-provided refresh policies. The policy parameters are concatenated directly into materialization queries, allowing injection during automated refreshes.\", \"Vulnerability name\": \"Timescale Materialization Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A CockroachDB changefeed uses user-provided filters that are concatenated directly into CDC queries. The filters allow injection that persists across change events, compromising all captured data.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Change Data Capture Filters\", \"Lab Description\": \"A CockroachDB changefeed uses user-provided filters that are concatenated directly into CDC queries. The filters allow injection that persists across change events, compromising all captured data.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard DuckDB HTTP Header Injection lab for: sql injection in duckdb httpfs extension headers", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline uses DuckDB's HTTPFS extension with user-provided HTTP headers. The headers are concatenated directly into remote requests, allowing injection when accessing cloud storage.\", \"Vulnerability name\": \"DuckDB HTTP Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A database creates materialized view indexes with user-provided predicate expressions. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Index Predicates\", \"Lab Description\": \"A database creates materialized view indexes with user-provided predicate expressions. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.\", \"Vulnerability name\": \"Materialized View Index Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a PolyBase Location Injection lab where sql injection in sql server polybase external table locations", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server PolyBase External Table Locations\", \"Lab Description\": \"A SQL Server instance creates PolyBase external tables with user-provided location paths. The paths are concatenated directly into DDL statements, allowing injection when querying external data.\", \"Vulnerability name\": \"PolyBase Location Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard BigQuery Remote Function Injection lab for: sql injection in google bigquery remote function responses", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Remote Function Responses\", \"Lab Description\": \"A BigQuery implementation calls remote functions where the HTTP response is interpolated directly into SQL. Malicious function responses can inject SQL that bypasses BigQuery's normal parameterization.\", \"Vulnerability name\": \"BigQuery Remote Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Snowflake Function Header Injection lab where sql injection in snowflake external function response headers", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Response Headers\", \"Lab Description\": \"A Snowflake external function processes HTTP response headers as SQL values. Malicious headers can inject SQL that persists during the entire function execution context.\", \"Vulnerability name\": \"Snowflake Function Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Unity Catalog Property Injection lab where sql injection in databricks unity catalog table properties", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Table Properties\", \"Lab Description\": \"A Databricks environment sets Unity Catalog table properties with user-provided values. The properties are concatenated directly into catalog metadata queries, allowing injection during table operations.\", \"Vulnerability name\": \"Unity Catalog Property Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Trino cluster defines system access control rules with user-provided conditions. The conditions are concatenated directly into authorization queries, allowing injection during permission checks.", "target": "{\"Lab scenario\": \"SQL Injection in Trino System Access Control Rules\", \"Lab Description\": \"A Trino cluster defines system access control rules with user-provided conditions. The conditions are concatenated directly into authorization queries, allowing injection during permission checks.\", \"Vulnerability name\": \"Trino Authorization Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Presto cluster configures resource group selectors with user-provided expressions. The expressions are concatenated directly into resource allocation queries, allowing injection during query scheduling.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Resource Group Selectors\", \"Lab Description\": \"A Presto cluster configures resource group selectors with user-provided expressions. The expressions are concatenated directly into resource allocation queries, allowing injection during query scheduling.\", \"Vulnerability name\": \"Presto Resource Group Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a ClickHouse UDF Injection lab where sql injection in clickhouse user-defined function sql", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse User-Defined Function SQL\", \"Lab Description\": \"A ClickHouse cluster creates SQL UDFs with user-provided function bodies. The SQL is concatenated directly into function creation, allowing persistent injection that affects all queries using the function.\", \"Vulnerability name\": \"ClickHouse UDF Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a PostgreSQL Range Injection lab where sql injection in postgresql range type constructor", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL Range Type Constructor\", \"Lab Description\": \"A scheduling application builds PostgreSQL range queries (tsrange, numrange) with unsanitized user input. Attackers can break out of the range context through specially crafted boundary expressions that evaluate to SQL commands.\", \"Vulnerability name\": \"PostgreSQL Range Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium MySQL SRID Injection lab for: sql injection in mysql spatial reference system parameters", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Spatial Reference System Parameters\", \"Lab Description\": \"A GIS system builds MySQL spatial queries with dynamic SRID (Spatial Reference System Identifier) parameters. The numeric SRID values are concatenated directly into ST_Transform calls, allowing injection through mathematical expressions.\", \"Vulnerability name\": \"MySQL SRID Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL Server Temporal Injection scenario. Example: SQL Injection in SQL Server Temporal Table AS OF Clause", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Temporal Table AS OF Clause\", \"Lab Description\": \"A historical data application uses SQL Server temporal tables with dynamic AS OF timestamps. The timestamp strings are concatenated directly into temporal queries, allowing injection through crafted date literals.\", \"Vulnerability name\": \"SQL Server Temporal Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Oracle Text Index Injection lab for: sql injection in oracle text index parameters", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text INDEX PARAMETERS\", \"Lab Description\": \"A document search system creates Oracle Text indexes with dynamic parameters. The parameter strings are concatenated into index DDL, allowing persistent injection that affects all queries using the index.\", \"Vulnerability name\": \"Oracle Text Index Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Snowflake Tag Policy Injection scenario. Example: SQL Injection in Snowflake Tag-Based Masking Policies", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Tag-Based Masking Policies\", \"Lab Description\": \"A Snowflake data governance system creates tag-based masking policies with dynamic conditions. The policy expressions are concatenated directly into CREATE MASKING POLICY statements, allowing injection through crafted tag values.\", \"Vulnerability name\": \"Snowflake Tag Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a BigQuery ARRAY_AGG Injection scenario. Example: SQL Injection in Google BigQuery ARRAY_AGG Order By Clause", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery ARRAY_AGG Order By Clause\", \"Lab Description\": \"A analytics dashboard builds BigQuery ARRAY_AGG functions with dynamic ORDER BY clauses. The sort expressions are concatenated directly into array aggregation, allowing injection through crafted ordering specifications.\", \"Vulnerability name\": \"BigQuery ARRAY_AGG Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Synapse pipeline uses CETAS (CREATE EXTERNAL TABLE AS SELECT) with dynamic output paths. The file locations are concatenated directly into DDL, allowing injection through crafted storage paths.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS External File Paths\", \"Lab Description\": \"A Synapse pipeline uses CETAS (CREATE EXTERNAL TABLE AS SELECT) with dynamic output paths. The file locations are concatenated directly into DDL, allowing injection through crafted storage paths.\", \"Vulnerability name\": \"Synapse CETAS Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Databricks job runs Delta Lake VACUUM commands with dynamic retention periods. The duration strings are concatenated directly into vacuum operations, allowing injection through crafted time expressions.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Delta Lake VACUUM Retention\", \"Lab Description\": \"A Databricks job runs Delta Lake VACUUM commands with dynamic retention periods. The duration strings are concatenated directly into vacuum operations, allowing injection through crafted time expressions.\", \"Vulnerability name\": \"Delta Lake VACUUM Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Redshift SUPER Path Injection lab where sql injection in amazon redshift super type path queries", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift SUPER Type Path Queries\", \"Lab Description\": \"A Redshift application queries SUPER type columns with dynamic path expressions. The JSON paths are concatenated directly into queries, allowing injection through crafted path syntax.\", \"Vulnerability name\": \"Redshift SUPER Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Snowflake pipeline refreshes external tables with dynamic parameters. The refresh options are concatenated directly into ALTER EXTERNAL TABLE statements, allowing injection during metadata updates.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh\", \"Lab Description\": \"A Snowflake pipeline refreshes external tables with dynamic parameters. The refresh options are concatenated directly into ALTER EXTERNAL TABLE statements, allowing injection during metadata updates.\", \"Vulnerability name\": \"Snowflake External Table Refresh Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Spanner Interleave Injection scenario. Example: SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT\", \"Lab Description\": \"A Spanner schema migration tool builds INTERLEAVE IN PARENT clauses with dynamic table names. The parent references are concatenated directly into DDL, allowing injection during table creation.\", \"Vulnerability name\": \"Spanner Interleave Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Kusto External Schema Injection lab where sql injection in azure data explorer external table schema", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer External Table Schema\", \"Lab Description\": \"A Kusto cluster creates external tables with dynamic schema definitions. The schema expressions are concatenated directly into .create external table commands, allowing injection during schema inference.\", \"Vulnerability name\": \"Kusto External Schema Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: An application builds Elasticsearch ODBC connection strings with dynamic properties. The property values are concatenated directly into connection attempts, allowing injection during driver initialization.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An application builds Elasticsearch ODBC connection strings with dynamic properties. The property values are concatenated directly into connection attempts, allowing injection during driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Connection Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Druid Identifier Escape Injection lab where sql injection in apache druid sql identifier escaping", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A Druid cluster processes SQL queries with dynamic identifier escaping. The escape sequences are concatenated directly into query planning, allowing injection through crafted identifier patterns.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Flux Yield Injection lab where sql injection in influxdb flux yield parameter", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Yield Parameter\", \"Lab Description\": \"A monitoring system uses InfluxDB Flux with dynamic yield names. The yield identifiers are concatenated directly into Flux scripts, allowing injection during result processing.\", \"Vulnerability name\": \"Flux Yield Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Timescale Compression Injection scenario. Example: SQL Injection in TimescaleDB Compression Settings", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Settings\", \"Lab Description\": \"A time-series platform alters TimescaleDB compression with dynamic parameters. The configuration strings are concatenated directly into ALTER TABLE statements, allowing injection during compression operations.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A CockroachDB application creates partial indexes with dynamic WHERE clauses. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Partial Index Predicates\", \"Lab Description\": \"A CockroachDB application creates partial indexes with dynamic WHERE clauses. The predicates are concatenated directly into index creation, allowing persistent injection that affects all queries using the index.\", \"Vulnerability name\": \"Cockroach Partial Index Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a DuckDB S3 Endpoint Injection lab where sql injection in duckdb s3 endpoint configuration", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into S3 settings, allowing injection during cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A database creates materialized views with dynamic WITH NO DATA options. The clause expressions are concatenated directly into view creation, allowing injection during initial population.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A database creates materialized views with dynamic WITH NO DATA options. The clause expressions are concatenated directly into view creation, allowing injection during initial population.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard SQL Ledger View Injection lab for: sql injection in sql server ledger view options", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation, allowing injection during cryptographic verification.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium BigQuery Wildcard Injection lab for: sql injection in google bigquery wildcard table patterns", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses, allowing injection through crafted glob expressions.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Snowflake Session Default Injection lab where sql injection in snowflake session parameter defaults", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A Snowflake configuration tool sets session parameters with dynamic defaults. The default expressions are concatenated directly into ALTER SESSION statements, allowing injection during session initialization.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Databricks Warehouse Config Injection scenario. Example: SQL Injection in Databricks SQL Warehouse Configurations", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation, allowing injection during cluster startup.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Trino cluster creates catalog functions with dynamic namespaces. The namespace paths are concatenated directly into function registration, allowing injection during UDF execution.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Catalog Function Namespaces\", \"Lab Description\": \"A Trino cluster creates catalog functions with dynamic namespaces. The namespace paths are concatenated directly into function registration, allowing injection during UDF execution.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Presto Table Function Injection scenario. Example: SQL Injection in Presto Table Function Parameters", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Parameters\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The parameter strings are concatenated directly into function calls, allowing injection during table generation.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a ClickHouse Dictionary URL Injection scenario. Example: SQL Injection in ClickHouse Dictionary Source URLs", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a PostgreSQL NOTIFY Injection scenario. Example: SQL Injection in PostgreSQL NOTIFY Channel Payload", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL NOTIFY Channel Payload\", \"Lab Description\": \"A real-time alert system uses PostgreSQL's NOTIFY command with unsanitized channel payloads. Attackers can inject SQL through crafted notification messages that execute when clients LISTEN to the channel, bypassing typical query defenses.\", \"Vulnerability name\": \"PostgreSQL NOTIFY Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a MySQL Separator Injection scenario. Example: SQL Injection in MySQL GROUP_CONCAT Separator", "target": "{\"Lab scenario\": \"SQL Injection in MySQL GROUP_CONCAT Separator\", \"Lab Description\": \"A reporting dashboard dynamically sets GROUP_CONCAT separators with user input. The separator string is concatenated directly into queries, allowing injection during result aggregation.\", \"Vulnerability name\": \"MySQL Separator Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a SQL Server Delimiter Injection scenario. Example: SQL Injection in SQL Server STRING_AGG Delimiter", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server STRING_AGG Delimiter\", \"Lab Description\": \"A data export feature uses STRING_AGG with dynamic delimiters. The unsanitized delimiter parameter allows breaking out of string context into SQL execution.\", \"Vulnerability name\": \"SQL Server Delimiter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Oracle LISTAGG Injection lab where sql injection in oracle listagg delimiter clause", "target": "{\"Lab scenario\": \"SQL Injection in Oracle LISTAGG Delimiter Clause\", \"Lab Description\": \"An Oracle APEX application builds LISTAGG queries with user-controlled delimiters. The delimiter clause is concatenated directly into analytic function execution.\", \"Vulnerability name\": \"Oracle LISTAGG Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: A Snowflake data pipeline uses ARRAY_TO_STRING with dynamic delimiters. The delimiter parameter is embedded directly into JavaScript UDFs, allowing injection during array serialization.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake ARRAY_TO_STRING Delimiter\", \"Lab Description\": \"A Snowflake data pipeline uses ARRAY_TO_STRING with dynamic delimiters. The delimiter parameter is embedded directly into JavaScript UDFs, allowing injection during array serialization.\", \"Vulnerability name\": \"Snowflake Array Serialization Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A BigQuery ML model uses FORMAT() with dynamic format patterns. The format string is concatenated directly into query execution, allowing injection during type conversion.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery FORMAT() Pattern\", \"Lab Description\": \"A BigQuery ML model uses FORMAT() with dynamic format patterns. The format string is concatenated directly into query execution, allowing injection during type conversion.\", \"Vulnerability name\": \"BigQuery Format String Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Synapse JSON Path Injection lab for: sql injection in azure synapse openjson path", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse OPENJSON Path\", \"Lab Description\": \"A Synapse pipeline processes JSON data with dynamic path expressions. The JSON path is concatenated directly into OPENJSON calls, allowing injection during document parsing.\", \"Vulnerability name\": \"Synapse JSON Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Databricks JSON Field Injection scenario. Example: SQL Injection in Databricks JSON_TUPLE Function", "target": "{\"Lab scenario\": \"SQL Injection in Databricks JSON_TUPLE Function\", \"Lab Description\": \"A Databricks notebook processes JSON records with dynamic field names. The field path is concatenated directly into JSON_TUPLE calls, allowing injection during struct extraction.\", \"Vulnerability name\": \"Databricks JSON Field Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Redshift JSON Path Injection lab for: sql injection in redshift json_extract_path_text path", "target": "{\"Lab scenario\": \"SQL Injection in Redshift JSON_EXTRACT_PATH_TEXT Path\", \"Lab Description\": \"A Redshift analytics dashboard builds JSON path queries with user input. The path parameter is concatenated directly into JSON extraction functions.\", \"Vulnerability name\": \"Redshift JSON Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Snowflake JSON Parse Injection lab where sql injection in snowflake parse_json path", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake PARSE_JSON Path\", \"Lab Description\": \"A Snowflake data transformation uses PARSE_JSON with dynamic path expressions. The path is concatenated directly into JSON parsing logic.\", \"Vulnerability name\": \"Snowflake JSON Parse Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a CockroachDB Range Metadata Injection scenario. Example: SQL Injection in CockroachDB SHOW RANGES Table Pattern", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB SHOW RANGES Table Pattern\", \"Lab Description\": \"A CockroachDB monitoring tool uses SHOW RANGES with dynamic table patterns. The pattern is concatenated directly into range metadata queries.\", \"Vulnerability name\": \"CockroachDB Range Metadata Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a DuckDB CSV Parsing Injection scenario. Example: SQL Injection in DuckDB READ_CSV Auto-Detect Parameter", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB READ_CSV Auto-Detect Parameter\", \"Lab Description\": \"A DuckDB data loader uses READ_CSV with dynamic type detection parameters. The auto-detection clause is concatenated directly into file parsing logic.\", \"Vulnerability name\": \"DuckDB CSV Parsing Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Materialize CDC Injection lab where sql injection in materialize tail timestamp", "target": "{\"Lab scenario\": \"SQL Injection in Materialize TAIL Timestamp\", \"Lab Description\": \"A Materialize streaming pipeline uses TAIL with dynamic timestamp filters. The timestamp expression is concatenated directly into change data capture queries.\", \"Vulnerability name\": \"Materialize CDC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a SingleStore Segment Injection lab where sql injection in singlestore columnstore segment filter", "target": "{\"Lab scenario\": \"SQL Injection in SingleStore Columnstore Segment Filter\", \"Lab Description\": \"A SingleStore analytics platform builds columnstore segment filters with user input. The filter expressions are concatenated directly into segment pruning logic.\", \"Vulnerability name\": \"SingleStore Segment Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Yugabyte Explain Injection lab where sql injection in yugabytedb ysql explain format", "target": "{\"Lab scenario\": \"SQL Injection in YugabyteDB YSQL EXPLAIN Format\", \"Lab Description\": \"A YugabyteDB performance tool uses EXPLAIN with dynamic format parameters. The format string is concatenated directly into query plan generation.\", \"Vulnerability name\": \"Yugabyte Explain Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a PostgreSQL COPY Command Injection lab where sql injection in postgresql copy to program", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL COPY TO PROGRAM\", \"Lab Description\": \"A data export feature uses PostgreSQL's COPY TO PROGRAM command with dynamic filenames. The program argument is concatenated directly into the command, allowing command injection through crafted filenames.\", \"Vulnerability name\": \"PostgreSQL COPY Command Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Develop a MySQL Local File Injection lab where sql injection in mysql load data local infile", "target": "{\"Lab scenario\": \"SQL Injection in MySQL LOAD DATA LOCAL INFILE\", \"Lab Description\": \"A data import tool uses LOAD DATA LOCAL INFILE with dynamic path parameters. The path is concatenated directly into the statement, allowing file system access through path traversal.\", \"Vulnerability name\": \"MySQL Local File Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a SQL Server BULK INSERT XXE scenario. Example: SQL Injection in SQL Server BULK INSERT FORMATFILE", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server BULK INSERT FORMATFILE\", \"Lab Description\": \"A data migration system uses BULK INSERT with dynamic format files. The format file path is concatenated directly into the command, allowing arbitrary file reads through XML external entities.\", \"Vulnerability name\": \"SQL Server BULK INSERT XXE\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A document management system uses UTL_FILE with dynamic paths. The directory object and filename parameters are concatenated directly into procedure calls, allowing file system access.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle UTL_FILE File Operations\", \"Lab Description\": \"A document management system uses UTL_FILE with dynamic paths. The directory object and filename parameters are concatenated directly into procedure calls, allowing file system access.\", \"Vulnerability name\": \"Oracle UTL_FILE Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Create a challenge where: A Snowflake external function passes HTTP headers directly into SQL context. The header values are concatenated into metadata queries without sanitization, allowing injection through crafted API requests.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function HTTP Headers\", \"Lab Description\": \"A Snowflake external function passes HTTP headers directly into SQL context. The header values are concatenated into metadata queries without sanitization, allowing injection through crafted API requests.\", \"Vulnerability name\": \"Snowflake Header Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a BigQuery Script Variable Injection lab where sql injection in bigquery scripting variable declarations", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Scripting Variable Declarations\", \"Lab Description\": \"A BigQuery script uses dynamic variable declarations with user input. The variable values are concatenated directly into DECLARE statements, allowing injection during script initialization.\", \"Vulnerability name\": \"BigQuery Script Variable Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a high Synapse CETAS Location Injection lab for: sql injection in azure synapse cetas external location", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS External Location\", \"Lab Description\": \"A Synapse pipeline creates external tables with dynamic storage locations. The location path is concatenated directly into CETAS statements, allowing injection during table creation.\", \"Vulnerability name\": \"Synapse CETAS Location Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A Databricks notebook uses widgets with dynamic default values that flow into SQL queries. The widget values are concatenated directly into query text without parameterization.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Widget Default Values\", \"Lab Description\": \"A Databricks notebook uses widgets with dynamic default values that flow into SQL queries. The widget values are concatenated directly into query text without parameterization.\", \"Vulnerability name\": \"Databricks Widget Default Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Trino Catalog Property Injection lab where sql injection in trino catalog property values", "target": "{\"Lab scenario\": \"SQL Injection in Trino Catalog Property Values\", \"Lab Description\": \"A Trino cluster configuration tool sets catalog properties with dynamic values. The property values are concatenated directly into catalog configuration files, allowing injection during catalog initialization.\", \"Vulnerability name\": \"Trino Catalog Property Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Develop a Presto Session Property Injection lab where sql injection in presto session property values", "target": "{\"Lab scenario\": \"SQL Injection in Presto Session Property Values\", \"Lab Description\": \"A Presto client application sets session properties with dynamic values. The property values are concatenated directly into session initialization queries.\", \"Vulnerability name\": \"Presto Session Property Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a ClickHouse Dictionary Query Injection scenario. Example: SQL Injection in ClickHouse External Dictionary Queries", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse External Dictionary Queries\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source queries. The query text is concatenated directly into dictionary definitions, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary Query Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A Druid cluster processes SQL queries with dynamic context parameters. The parameter values are concatenated directly into native query conversion, allowing injection during query planning.", "target": "{\"Lab scenario\": \"SQL Injection in Druid SQL Query Context Parameters\", \"Lab Description\": \"A Druid cluster processes SQL queries with dynamic context parameters. The parameter values are concatenated directly into native query conversion, allowing injection during query planning.\", \"Vulnerability name\": \"Druid Context Parameter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Hive Metastore Property Injection lab where sql injection in hive metastore table property values", "target": "{\"Lab scenario\": \"SQL Injection in Hive Metastore Table Property Values\", \"Lab Description\": \"A Hive metastore service accepts dynamic table properties during table creation. The property values are concatenated directly into metastore queries, allowing injection during DDL operations.\", \"Vulnerability name\": \"Hive Metastore Property Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Impala Query Option Injection lab for: sql injection in impala query option settings", "target": "{\"Lab scenario\": \"SQL Injection in Impala Query Option Settings\", \"Lab Description\": \"An Impala client application sets query options with dynamic values. The option values are concatenated directly into query preparation, allowing injection during execution planning.\", \"Vulnerability name\": \"Impala Query Option Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a CockroachDB Zone Config Injection scenario. Example: SQL Injection in CockroachDB Zone Configuration Values", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Zone Configuration Values\", \"Lab Description\": \"A CockroachDB cluster management tool sets zone configurations with dynamic values. The configuration values are concatenated directly into ALTER statements, allowing injection during replication changes.\", \"Vulnerability name\": \"CockroachDB Zone Config Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium DuckDB HTTP Header Injection lab for: sql injection in duckdb httpfs extension headers", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A DuckDB query uses HTTPFS with dynamic request headers. The header values are concatenated directly into HTTP requests, allowing injection during remote file operations.\", \"Vulnerability name\": \"DuckDB HTTP Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a high Materialized View Priority Injection lab for: sql injection in materialized view refresh priority", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh Priority\", \"Lab Description\": \"A data warehouse sets materialized view refresh priorities with dynamic values. The priority values are concatenated directly into refresh scheduling queries.\", \"Vulnerability name\": \"Materialized View Priority Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a PolyBase Option Injection scenario. Example: SQL Injection in SQL Server PolyBase External Table Options", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server PolyBase External Table Options\", \"Lab Description\": \"A SQL Server instance creates PolyBase external tables with dynamic options. The option values are concatenated directly into table creation, allowing injection during external data access.\", \"Vulnerability name\": \"PolyBase Option Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A BigQuery implementation calls remote functions where the HTTP response is interpolated directly into SQL. Malicious function responses can inject SQL that bypasses BigQuery's normal parameterization.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Remote Function Responses\", \"Lab Description\": \"A BigQuery implementation calls remote functions where the HTTP response is interpolated directly into SQL. Malicious function responses can inject SQL that bypasses BigQuery's normal parameterization.\", \"Vulnerability name\": \"BigQuery Remote Response Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Develop a Snowflake COPY Option Injection lab where sql injection in snowflake external stage copy options", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Stage COPY Options\", \"Lab Description\": \"A Snowflake pipeline uses COPY INTO commands with dynamic stage options. The options are concatenated directly into load/unload operations, allowing injection during file operations.\", \"Vulnerability name\": \"Snowflake COPY Option Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Simulate a Databricks Comment Injection scenario. Example: SQL Injection in Databricks Unity Catalog Table Comments", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Table Comments\", \"Lab Description\": \"A Databricks environment sets table comments with dynamic values. The comment text is concatenated directly into catalog metadata queries, allowing injection during table operations.\", \"Vulnerability name\": \"Databricks Comment Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A Trino cluster implements function security with dynamic authorization checks. The check expressions are concatenated directly into function execution, allowing injection during privilege verification.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Authorization Checks\", \"Lab Description\": \"A Trino cluster implements function security with dynamic authorization checks. The check expressions are concatenated directly into function execution, allowing injection during privilege verification.\", \"Vulnerability name\": \"Trino Function Authorization Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Create a challenge where: A Presto cluster configures resource groups with dynamic selector conditions. The conditions are concatenated directly into query routing logic, allowing injection during scheduling.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Resource Group Selector Conditions\", \"Lab Description\": \"A Presto cluster configures resource groups with dynamic selector conditions. The conditions are concatenated directly into query routing logic, allowing injection during scheduling.\", \"Vulnerability name\": \"Presto Resource Selector Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A ClickHouse cluster configures dictionary sources with dynamic credentials. The credential strings are concatenated directly into dictionary definitions, allowing injection during data loading.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source Credentials\", \"Lab Description\": \"A ClickHouse cluster configures dictionary sources with dynamic credentials. The credential strings are concatenated directly into dictionary definitions, allowing injection during data loading.\", \"Vulnerability name\": \"ClickHouse Credential Injection\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "I need a high Druid Supervisor Spec Injection lab for: sql injection in druid supervisor spec templates", "target": "{\"Lab scenario\": \"SQL Injection in Druid Supervisor Spec Templates\", \"Lab Description\": \"A Druid cluster creates ingestion supervisors with dynamic spec templates. The template values are concatenated directly into supervisor JSON, allowing injection during data ingestion.\", \"Vulnerability name\": \"Druid Supervisor Spec Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a high PostgreSQL Security Label Injection lab for: sql injection in postgresql security label", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL SECURITY LABEL\", \"Lab Description\": \"A security labeling system uses PostgreSQL's SECURITY LABEL command with dynamic label values. The label text is concatenated directly into security policy enforcement, allowing injection during label assignment to database objects.\", \"Vulnerability name\": \"PostgreSQL Security Label Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium MySQL X Plugin ID Injection lab for: sql injection in mysql x plugin document ids", "target": "{\"Lab scenario\": \"SQL Injection in MySQL X Plugin Document IDs\", \"Lab Description\": \"A document store using MySQL X Protocol processes CRUD operations with dynamic document _id fields. The document identifiers are concatenated directly into NoSQL-style queries that translate to SQL, allowing injection through crafted IDs.\", \"Vulnerability name\": \"MySQL X Plugin ID Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A graph analytics application uses SHORTEST_PATH with dynamic node filters. The filter expressions are concatenated directly into graph traversal queries, allowing injection during path calculation.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph MATCH Shortest Path\", \"Lab Description\": \"A graph analytics application uses SHORTEST_PATH with dynamic node filters. The filter expressions are concatenated directly into graph traversal queries, allowing injection during path calculation.\", \"Vulnerability name\": \"SQL Server Graph Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Oracle Highlight Offset Injection lab for: sql injection in oracle text highlight offset parameters", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text HIGHLIGHT Offset Parameters\", \"Lab Description\": \"A document search application uses CTX_DOC.HIGHLIGHT with dynamic offset parameters. The numeric offsets are concatenated directly into highlight generation, allowing injection through arithmetic expressions.\", \"Vulnerability name\": \"Oracle Highlight Offset Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: A data recovery tool uses time travel queries with dynamic OFFSET values. The time offset strings are concatenated directly into AT|BEFORE clauses, allowing injection during historical data retrieval.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Time Travel OFFSET\", \"Lab Description\": \"A data recovery tool uses time travel queries with dynamic OFFSET values. The time offset strings are concatenated directly into AT|BEFORE clauses, allowing injection during historical data retrieval.\", \"Vulnerability name\": \"Snowflake Time Offset Injection\", \"Difficulty Level\": \"High\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token tampering vulnerability in session management", "target": "{\"Lab scenario\": \"JWT token tampering vulnerability in session management\", \"Lab Description\": \"The application uses JWTs for user sessions, but incorrectly trusts the `alg` header from the token instead of enforcing HS256. This allows an attacker to forge tokens by setting the algorithm to 'none'. The application fails to verify the token signature properly. To solve: forge an administrator JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirection hijack in authentication flow", "target": "{\"Lab scenario\": \"OAuth redirection hijack in authentication flow\", \"Lab Description\": \"The application uses OAuth for login via a third-party provider, but fails to validate the redirect_uri parameter. This allows attackers to hijack the token and redirect it to their own malicious domain. To solve: steal the victim’s token by injecting a malicious redirect_uri and access their data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application sets a session ID cookie before authentication and does not regenerate it upon successful login. An attacker can set a known session ID for a victim before they log in and later use that session ID to access the victim's account. To solve: log in as the victim using a fixed session ID to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via 'none' algorithm in Authorization header", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for user authentication. However, it fails to enforce algorithm validation, allowing tokens signed with 'none' to bypass verification. The application trusts the 'alg' value in the header and processes the token without signature validation. To solve: Craft a tampered token granting 'admin' access and use it to access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application accepts user-provided session IDs via cookies before login, without regenerating them after successful authentication. This allows attackers to set a known session ID before the victim logs in. To solve: Fixate a session, wait for the victim to authenticate, and hijack their session to access their profile.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application accepts user-provided session IDs via cookies before login, without regenerating them after successful authentication. This allows attackers to set a known session ID before the victim logs in. To solve: Fixate a session, wait for the victim to authenticate, and hijack their session to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfigured with open redirect on callback", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfigured with open redirect on callback\", \"Lab Description\": \"The application uses OAuth 2.0 with the implicit grant type. The redirection URI is not strictly validated, allowing an attacker to intercept the access token via a malicious redirect URL. To solve: Craft an authorization URL with a redirect_uri pointing to your attacker-controlled site and steal the victim's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses a session cookie to manage authenticated state. However, it accepts arbitrary session IDs from unauthenticated users and does not regenerate the session ID after login, enabling session fixation. The application fails to invalidate old sessions. To solve: Hijack Carlos's session by fixing a session ID before login and accessing his account page.", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-based Authentication\", \"Lab Description\": \"The application uses a session cookie to manage authenticated state. However, it accepts arbitrary session IDs from unauthenticated users and does not regenerate the session ID after login, enabling session fixation. The application fails to invalidate old sessions. To solve: Hijack Carlos's session by fixing a session ID before login and accessing his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to manage user sessions, but fails to verify the signing algorithm correctly. By modifying the JWT to use 'alg':'none' and removing the signature, an attacker can spoof any user's token. To solve: Tamper with a JWT to impersonate Carlos and access the protected dashboard.", "target": "{\"Lab scenario\": \"JWT Tampering in Bearer Token Authentication\", \"Lab Description\": \"The application uses JWTs to manage user sessions, but fails to verify the signing algorithm correctly. By modifying the JWT to use 'alg':'none' and removing the signature, an attacker can spoof any user's token. To solve: Tamper with a JWT to impersonate Carlos and access the protected dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in authorization flow", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Authorization Flow\", \"Lab Description\": \"The app uses OAuth 2.0 to authenticate users via a third-party provider, but it exposes the authorization code in a GET request and does not validate the redirect URI. This allows an attacker to intercept a code meant for another user and exchange it for an access token. To solve: Hijack Carlos's OAuth code and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Bypass using 'none' algorithm in Authorization Header", "target": "{\"Lab scenario\": \"JWT Signature Bypass using 'none' algorithm in Authorization Header\", \"Lab Description\": \"This lab's authentication system uses JWTs to authorize users. The application does not properly validate the JWT algorithm, allowing attackers to set the alg to 'none'. This lets attackers forge tokens without a signature. To solve the lab, craft a JWT to impersonate the user Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability in Login Flow\", \"Lab Description\": \"The application sets the session ID before authentication, allowing attackers to fix a victim's session ID. If a victim logs in using the fixed session, the attacker can hijack the session. To solve the lab, fix the session ID for Carlos, wait for login, and hijack his session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Redirect URI Manipulation Leads to Access Token Theft", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation Leads to Access Token Theft\", \"Lab Description\": \"The application uses OAuth 2.0 for login, but does not validate the redirect_uri parameter strictly. An attacker can manipulate this to redirect the OAuth token to a malicious domain. To solve: exploit this flaw to steal Carlos's access token and access his account via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via URL Parameter Injection in Login Endpoint", "target": "{\"Lab scenario\": \"Session Fixation via URL Parameter Injection in Login Endpoint\", \"Lab Description\": \"The login mechanism allows user-supplied session IDs to be set via a query parameter before authentication. The application binds the provided session ID to the authenticated session without validation. To solve: Hijack Carlos's session by forcing him to use a fixed session ID and then authenticate using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Authentication Bypass using 'none' Algorithm in Token Verification Logic", "target": "{\"Lab scenario\": \"JWT Authentication Bypass using 'none' Algorithm in Token Verification Logic\", \"Lab Description\": \"The server uses JWTs for authentication but improperly accepts tokens signed with the 'none' algorithm, trusting unsigned tokens. To solve: Forge a valid JWT for Carlos with 'none' as algorithm, gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses the OAuth implicit grant flow and redirects users to third-party pages after authentication, including the access token in the URL fragment. Due to misconfigured Referer policies, the token leaks to external domains. To solve: Extract Carlos’s access token and impersonate him.", "target": "{\"Lab scenario\": \"OAuth Implicit Grant Token Leak via Referer Header in Third-Party Redirect\", \"Lab Description\": \"The application uses the OAuth implicit grant flow and redirects users to third-party pages after authentication, including the access token in the URL fragment. Due to misconfigured Referer policies, the token leaks to external domains. To solve: Extract Carlos’s access token and impersonate him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's login functionality does not invalidate the pre-authentication session identifier, making it vulnerable to session fixation. The application sets a session ID before login and continues using it afterward. To solve: log in to Carlos's account using a fixed session value you've injected before authentication.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"This lab's login functionality does not invalidate the pre-authentication session identifier, making it vulnerable to session fixation. The application sets a session ID before login and continues using it afterward. To solve: log in to Carlos's account using a fixed session value you've injected before authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via 'none' algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs for authentication but does not verify the token signature properly if the 'alg' field is set to 'none'. This flaw allows attackers to craft arbitrary tokens and impersonate users. To solve: forge a JWT token that identifies you as Carlos without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses OAuth2 for login via a third-party provider but does not strictly validate the `redirect_uri` during the authorization flow. An attacker can manipulate the URL to capture tokens. To solve: steal Carlos's OAuth token by injecting a malicious redirect URI.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation during implicit flow\", \"Lab Description\": \"This lab uses OAuth2 for login via a third-party provider but does not strictly validate the `redirect_uri` during the authorization flow. An attacker can manipulate the URL to capture tokens. To solve: steal Carlos's OAuth token by injecting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's login logic is vulnerable to session fixation. The app fails to generate a new session ID after login, allowing an attacker to preset a session ID and force the victim to use it. The application accepts session identifiers via cookies and doesn't invalidate pre-login sessions. To solve: hijack Carlos's session and access the /my-account page using a fixed session.", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"The application's login logic is vulnerable to session fixation. The app fails to generate a new session ID after login, allowing an attacker to preset a session ID and force the victim to use it. The application accepts session identifiers via cookies and doesn't invalidate pre-login sessions. To solve: hijack Carlos's session and access the /my-account page using a fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API uses JWT tokens for user identity validation but insecurely accepts unsigned tokens with the 'none' algorithm. It does not properly verify the signature, allowing attackers to forge arbitrary tokens. To solve: craft a JWT token impersonating Carlos and access the /my-account endpoint.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in REST API\", \"Lab Description\": \"The API uses JWT tokens for user identity validation but insecurely accepts unsigned tokens with the 'none' algorithm. It does not properly verify the signature, allowing attackers to forge arbitrary tokens. To solve: craft a JWT token impersonating Carlos and access the /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirection uri manipulation in third-party login", "target": "{\"Lab scenario\": \"OAuth redirection URI manipulation in third-party login\", \"Lab Description\": \"The app implements OAuth login using a third-party provider but insecurely accepts dynamic redirect_uris. An attacker can manipulate this URI to intercept the authorization code. To solve: capture Carlos’s OAuth code and use it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The application uses session cookies for authentication, but it does not rotate the session ID after login. This enables a session fixation attack where a user is tricked into logging in with a pre-set session ID. To solve: Hijack Carlos's session and access his My Account page using session fixation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering via none algorithm vulnerability in api authentication", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm vulnerability in API authentication\", \"Lab Description\": \"This app uses JSON Web Tokens for authentication. However, it does not validate the algorithm properly and allows `alg: none`, making it possible to forge a token without signing it. To solve: Tamper with a JWT to impersonate Carlos and access his data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth open redirect flaw in callback handler", "target": "{\"Lab scenario\": \"OAuth open redirect flaw in callback handler\", \"Lab Description\": \"The app integrates OAuth for third-party login but fails to validate redirect URIs properly. This allows an attacker to steal the authorization code by injecting an open redirect in the callback flow. To solve: Steal Carlos's OAuth code and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth session fixation in authorization code flow", "target": "{\"Lab scenario\": \"OAuth session fixation in authorization code flow\", \"Lab Description\": \"The application implements OAuth using the authorization code flow but fails to rotate the session identifier after login. The authorization server is hosted separately, but session tokens are not refreshed upon login. An attacker can craft a session, fix it for the victim, and then hijack their session post-login. To solve: hijack Carlos's authenticated session using a fixation technique.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application uses JWTs for user authentication but fails to enforce strong algorithm verification. The server trusts JWTs that use 'none' as their algorithm and doesn't validate the signature. To solve: forge a token granting access to Carlos’s account by tampering with the algorithm field.", "target": "{\"Lab scenario\": \"JWT tampering using alg: none\", \"Lab Description\": \"This application uses JWTs for user authentication but fails to enforce strong algorithm verification. The server trusts JWTs that use 'none' as their algorithm and doesn't validate the signature. To solve: forge a token granting access to Carlos’s account by tampering with the algorithm field.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session id leakage through verbose error logging", "target": "{\"Lab scenario\": \"Session ID leakage through verbose error logging\", \"Lab Description\": \"This application logs full session identifiers in the response body when errors occur. Attackers can trigger errors and collect leaked session tokens from responses. To solve: leak Carlos’s session ID and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none algorithm bypass in session token verification", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Bypass in Session Token Verification\", \"Lab Description\": \"This lab demonstrates a vulnerability in JWT session token validation where the application incorrectly accepts tokens using the 'none' algorithm, bypassing signature verification entirely. The application relies on JWT tokens for authentication but fails to enforce a secure algorithm. To solve: Forge a valid token and access Carlos's My Account page without needing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth 2.0 misconfiguration — open redirect token theft in authorization flow", "target": "{\"Lab scenario\": \"OAuth 2.0 Misconfiguration — Open Redirect Token Theft in Authorization Flow\", \"Lab Description\": \"This lab showcases an OAuth misconfiguration where the authorization server does not properly validate the 'redirect_uri' parameter, allowing open redirection and token theft. The application trusts the user-supplied redirect URL without whitelisting. To solve: Exploit the OAuth flow to capture a valid token from Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via Predictable Session IDs in Login Process", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session IDs in Login Process\", \"Lab Description\": \"This lab highlights a session fixation vulnerability where the application assigns session tokens before authentication and fails to issue new ones post-login. An attacker can force a victim to use a pre-selected session ID. To solve: Predict or fixate Carlos's session ID and gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The API authentication mechanism uses JSON Web Tokens (JWTs) for session management. The server trusts the 'alg' field in the JWT header without validation, which allows algorithm confusion attacks. The application fails to enforce the expected signing algorithm, allowing unsigned tokens. To solve: forge an admin JWT token using 'none' algorithm and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in API Authentication\", \"Lab Description\": \"The API authentication mechanism uses JSON Web Tokens (JWTs) for session management. The server trusts the 'alg' field in the JWT header without validation, which allows algorithm confusion attacks. The application fails to enforce the expected signing algorithm, allowing unsigned tokens. To solve: forge an admin JWT token using 'none' algorithm and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token theft via redirect manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow token theft via redirect manipulation\", \"Lab Description\": \"The web app uses OAuth for authentication, but improperly validates the redirect_uri parameter during the OAuth handshake. An attacker can manipulate this parameter to point to a malicious endpoint and steal access tokens. To solve: intercept an OAuth request and redirect the victim’s token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses predictable session IDs generated before login and does not regenerate them after authentication. An attacker can fix a session ID before the victim logs in, gaining unauthorized access to the victim's session. To solve: pre-assign a session ID, send it to the victim, and hijack the account once the victim authenticates.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application uses predictable session IDs generated before login and does not regenerate them after authentication. An attacker can fix a session ID before the victim logs in, gaining unauthorized access to the victim's session. To solve: pre-assign a session ID, send it to the victim, and hijack the account once the victim authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature validation bypass via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature validation bypass via 'none' algorithm\", \"Lab Description\": \"This lab simulates a web application that uses JSON Web Tokens (JWT) for session management but fails to enforce proper algorithm checks during signature verification. The server trusts any JWT token where the algorithm field is modified to 'none'. To solve the lab, forge a valid JWT for user 'carlos' without knowing the secret key and access the protected /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable session ids", "target": "{\"Lab scenario\": \"Session Fixation through predictable session IDs\", \"Lab Description\": \"This lab's session management mechanism uses predictable session identifiers. The server assigns the session ID before authentication and fails to regenerate it after successful login. To solve the lab, pre-set a known session ID for the victim and log in to their account using the same session ID to hijack their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow misconfiguration", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"This lab's OAuth 2.0 implementation uses the implicit flow without validating the redirect URI properly. Attackers can manipulate the redirect_uri parameter to steal access tokens. To solve the lab, craft a malicious OAuth URL to capture Carlos's token and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature none algorithm exploit in authentication token verification", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Exploit in Authentication Token Verification\", \"Lab Description\": \"This lab simulates an application vulnerable to JWT token manipulation due to insecure implementation of the 'none' algorithm during signature verification. The backend fails to enforce token signature validation when 'alg' is set to 'none'. The application issues JWT tokens after successful login, which are used for session authentication. To solve: Forge a JWT token to escalate privileges and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in token validation flow", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Validation Flow\", \"Lab Description\": \"This lab focuses on exploiting an OAuth token misconfiguration where the server only verifies the token's issuer claim (`iss`) and skips validation of the access token signature. The lab involves leveraging this weakness to craft a fake token and impersonate a privileged user. To solve: Forge a signed JWT access token with a manipulated issuer pointing to a trusted domain and access Carlos's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in Cookie-Based Authentication", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-Based Authentication\", \"Lab Description\": \"This lab's authentication mechanism is vulnerable to session fixation. When a user logs in, the session identifier is not regenerated, enabling an attacker to set the session ID ahead of authentication. The application accepts any existing session ID and continues the session post-login. To solve: Pre-set a session ID, trick the victim into using it, log in as Carlos and hijack the session using the same ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application's login flow allows session tokens to be set prior to authentication, and the token remains valid post-login. The application fails to invalidate pre-login session cookies. To solve: hijack a session by fixing the session token before authentication and access the target's account page.", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Handling in Login Endpoint\", \"Lab Description\": \"The application's login flow allows session tokens to be set prior to authentication, and the token remains valid post-login. The application fails to invalidate pre-login session cookies. To solve: hijack a session by fixing the session token before authentication and access the target's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a JSON Web Token (JWT) for session control but does not validate the token signature properly. The application decodes the token but skips signature validation when the 'alg' header is set to 'none'. To solve: craft a JWT token with modified privileges to access the admin panel.", "target": "{\"Lab scenario\": \"JWT Token Tampering in Authorization Header\", \"Lab Description\": \"The application uses a JSON Web Token (JWT) for session control but does not validate the token signature properly. The application decodes the token but skips signature validation when the 'alg' header is set to 'none'. To solve: craft a JWT token with modified privileges to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code interception in redirect uri", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Redirect URI\", \"Lab Description\": \"The application relies on OAuth 2.0 authorization but accepts arbitrary redirect URIs after authorization. This allows attackers to intercept the authorization code. To solve: manipulate the redirect URI to capture Carlos's OAuth code and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Mismanagement Flaw in Access Control for REST API", "target": "{\"Lab scenario\": \"Session Mismanagement Flaw in Access Control for REST API\", \"Lab Description\": \"This application's REST API uses session IDs set via URL parameters rather than cookies. The server-side logic trusts any session ID provided in the URL without validating user context. To solve: steal and reuse a session ID from a public source to hijack an active session and access another user's sensitive data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Authentication lab for: jwt secret exposure through verbose error responses", "target": "{\"Lab scenario\": \"JWT Secret Exposure through Verbose Error Responses\", \"Lab Description\": \"This application's JWT implementation logs signature verification failures verbosely, accidentally revealing the HMAC secret in server debug logs. To solve: trigger error messages and extract the secret to forge a valid admin token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The OAuth authorization server allows open redirect URIs with wildcard matching. An attacker can craft a malicious redirect_uri to intercept authorization codes. To solve: manipulate the redirect_uri to exfiltrate another user's OAuth code and redeem it for their access token.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The OAuth authorization server allows open redirect URIs with wildcard matching. An attacker can craft a malicious redirect_uri to intercept authorization codes. To solve: manipulate the redirect_uri to exfiltrate another user's OAuth code and redeem it for their access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature confusion in token validation logic", "target": "{\"Lab scenario\": \"JWT signature confusion in token validation logic\", \"Lab Description\": \"The application uses JWT tokens for authentication but incorrectly validates the 'alg' field, trusting user-supplied algorithms. If the header specifies 'none', the signature check is skipped entirely. To solve: forge a JWT token assigning yourself 'admin' privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable session identifiers", "target": "{\"Lab scenario\": \"Session Fixation through predictable session identifiers\", \"Lab Description\": \"The application issues session identifiers that are directly derived from the username in a weak hash form. An attacker can predict valid session tokens based on this pattern and hijack active sessions. To solve: predict and reuse a valid session ID to access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth open redirect flaw in authorization endpoint", "target": "{\"Lab scenario\": \"OAuth open redirect flaw in authorization endpoint\", \"Lab Description\": \"The OAuth provider used by this application allows redirection to arbitrary URLs under the same domain wildcard. This allows attackers to steal OAuth codes by tricking users into clicking crafted links. To solve: craft an OAuth URL that redirects to a malicious endpoint and extract a valid code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-set session id in login endpoint", "target": "{\"Lab scenario\": \"Session Fixation via Pre-set Session ID in Login Endpoint\", \"Lab Description\": \"The application allows clients to specify a session ID before authentication is complete. The server trusts this session and associates it with the authenticated user without generating a new one. To solve: predefine a session ID, log in as your user, then reuse the same ID to hijack Carlos's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application uses JWT for session handling but fails to validate the signature when 'alg' is set to 'none'. The server mistakenly trusts the unverified payload. To solve: craft a JWT with admin privileges and access the admin section using the unsigned token.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authorization Header\", \"Lab Description\": \"The application uses JWT for session handling but fails to validate the signature when 'alg' is set to 'none'. The server mistakenly trusts the unverified payload. To solve: craft a JWT with admin privileges and access the admin section using the unsigned token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth token leakage through referer header", "target": "{\"Lab scenario\": \"OAuth Token Leakage through Referer Header\", \"Lab Description\": \"The application uses OAuth 2.0 but the authorization code is exposed in the Referer header when redirected back to the client site. An attacker controlling a subdomain can harvest tokens via referer leakage. To solve: intercept the Referer header during login flow and extract the OAuth code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Hijacking via Predictable Session Tokens in REST API", "target": "{\"Lab scenario\": \"Session Hijacking via Predictable Session Tokens in REST API\", \"Lab Description\": \"The application's REST API uses a predictable session token generation scheme based on the username and a static salt. The application does not rotate the token post-login, allowing attackers to precompute tokens for valid users. To solve: predict Carlos's session token and access his profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Verification Bypass via Key Confusion Attack", "target": "{\"Lab scenario\": \"JWT Signature Verification Bypass via Key Confusion Attack\", \"Lab Description\": \"The application uses JWTs to authorize users but fails to differentiate between HMAC and RSA algorithms. Attackers can forge valid tokens by switching the algorithm from RS256 to HS256 and signing it using the public key as the secret. To solve: forge an admin token and access the /admin route.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Implicit Flow Token Leak via URL Fragment Hijacking", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leak via URL Fragment Hijacking\", \"Lab Description\": \"The OAuth implementation uses the implicit flow and returns access tokens in the URL fragment. Due to a lack of client-side sanitization, an attacker can manipulate redirect URIs to capture tokens via malicious subdomains. To solve: intercept an OAuth token using a crafted redirect URI and access Carlos's data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where graphql session fixation in login mutation", "target": "{\"Lab scenario\": \"GraphQL Session Fixation in Login Mutation\", \"Lab Description\": \"This lab’s GraphQL API suffers from session fixation due to insecure session token reuse. The application does not issue a fresh session ID upon login, allowing an attacker to fixate the victim's session. To solve: log in as Carlos after pre-setting the session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm acceptance in authorization header", "target": "{\"Lab scenario\": \"JWT None Algorithm Acceptance in Authorization Header\", \"Lab Description\": \"This application trusts JWT tokens in the Authorization header without properly validating the algorithm field, accepting 'alg':'none'. Attackers can forge tokens without a valid signature. To solve: create an unsigned admin token and access the /admin-dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth open redirect and token leakage", "target": "{\"Lab scenario\": \"OAuth Open Redirect and Token Leakage\", \"Lab Description\": \"This OAuth flow lacks proper redirect URI validation, allowing attackers to use open redirects to steal access tokens. The vulnerable behavior involves reflecting the access token in a user-controlled URL. To solve: steal Carlos's token via a malicious redirect URL and use it to access /private-files.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application's REST login endpoint sets a session ID derived from the username hash, which can be predicted. The application fails to generate a new session token post-login. To solve: predetermine Carlos's session ID and access the /dashboard endpoint using this session.", "target": "{\"Lab scenario\": \"API Session Fixation via Predictable Session ID in REST Login\", \"Lab Description\": \"This application's REST login endpoint sets a session ID derived from the username hash, which can be predicted. The application fails to generate a new session token post-login. To solve: predetermine Carlos's session ID and access the /dashboard endpoint using this session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Confusion Vulnerability in Bearer Authorization", "target": "{\"Lab scenario\": \"JWT Signature Confusion Vulnerability in Bearer Authorization\", \"Lab Description\": \"The application uses JWT tokens but inconsistently verifies the signature algorithm. If a token uses 'HS256' instead of 'RS256', the server misinterprets the public RSA key as a shared HMAC secret, enabling signature spoofing. To solve: craft a signed HS256 token impersonating the admin and access /admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth2 implicit flow token leak via referer header", "target": "{\"Lab scenario\": \"OAuth2 Implicit Flow Token Leak via Referer Header\", \"Lab Description\": \"This application uses OAuth2 implicit flow but embeds the access token in the URL fragment, causing the browser to leak the token via Referer headers. To solve: capture Carlos's token from the Referer log and replay it to access /protected.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via url-based token in single-page application", "target": "{\"Lab scenario\": \"Session Fixation via URL-based Token in Single-Page Application\", \"Lab Description\": \"This lab's single-page login flow passes session identifiers via the URL rather than setting them after authentication. The application reuses this identifier without regenerating it upon successful login. To solve: inject your own crafted session ID before Carlos logs in and hijack the session when he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm bypass in authentication header", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authentication Header\", \"Lab Description\": \"This application uses JWT for user authentication but does not properly validate the signature algorithm. If the token's 'alg' field is set to 'none', the server skips verification. To solve: craft a token with 'alg':'none' and 'username':'carlos' and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This OAuth implementation allows arbitrary redirection of authorization codes to third-party sites through the vulnerable 'redirect_uri' parameter. The server fails to validate the host. To solve: capture Carlos's authorization code and exchange it for an access token.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect\", \"Lab Description\": \"This OAuth implementation allows arbitrary redirection of authorization codes to third-party sites through the vulnerable 'redirect_uri' parameter. The server fails to validate the host. To solve: capture Carlos's authorization code and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt token signature confusion vulnerability in api authentication", "target": "{\"Lab scenario\": \"JWT token signature confusion vulnerability in API authentication\", \"Lab Description\": \"This lab uses JSON Web Tokens to secure user sessions. The backend mistakenly trusts tokens signed with both HMAC and RSA keys depending on the 'alg' field, which makes it possible to craft a valid token using the public key as an HMAC secret. To solve: forge a token with admin privileges using algorithm confusion and access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via unvalidated 'session_id' in OAuth callback flow", "target": "{\"Lab scenario\": \"Session fixation via unvalidated 'session_id' in OAuth callback flow\", \"Lab Description\": \"This OAuth-enabled app accepts a 'session_id' from the user during the authorization flow, which it reuses to bind the session after token exchange without validation. To solve: inject a fixed session ID and access Carlos's authenticated session after his login completes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Authentication lab for: improper oauth scope validation in rest api authorization flow", "target": "{\"Lab scenario\": \"Improper OAuth scope validation in REST API Authorization Flow\", \"Lab Description\": \"This lab uses OAuth to authorize API access. The backend trusts the client-provided scope without verifying it server-side, allowing privilege escalation by modifying the scope parameter. To solve: request an access token with elevated scope 'admin' and use it to access /admin/data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application assigns session IDs before authentication and does not regenerate them upon successful login. This allows an attacker to set a session ID, trick a victim into using it, and hijack the account after login. To solve: fix the session ID, log in as the victim using the same session ID, and access their private dashboard.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in cookie-based login\", \"Lab Description\": \"The application assigns session IDs before authentication and does not regenerate them upon successful login. This allows an attacker to set a session ID, trick a victim into using it, and hijack the account after login. To solve: fix the session ID, log in as the victim using the same session ID, and access their private dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering due to missing signature verification", "target": "{\"Lab scenario\": \"JWT tampering due to missing signature verification\", \"Lab Description\": \"The application accepts JWT tokens for authentication but does not verify their signatures due to a misconfigured token parser. This allows an attacker to forge arbitrary tokens and impersonate other users. To solve: craft a JWT token with the payload for 'admin' access and submit it to /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow misconfiguration allows token interception", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration allows token interception\", \"Lab Description\": \"The app uses OAuth's implicit grant flow with tokens exposed in the URL fragment, which is accessible to malicious scripts due to the lack of proper CSP headers. To solve: steal the access token via a crafted JavaScript payload and use it to access /api/userinfo as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT for authentication but incorrectly trusts the algorithm specified in the token header. This allows an attacker to switch from HMAC to 'none' algorithm and forge tokens. To solve: manipulate the JWT header to use 'none', craft a valid admin payload, and access the protected /admin route.", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in token verification logic\", \"Lab Description\": \"The application uses JWT for authentication but incorrectly trusts the algorithm specified in the token header. This allows an attacker to switch from HMAC to 'none' algorithm and forge tokens. To solve: manipulate the JWT header to use 'none', craft a valid admin payload, and access the protected /admin route.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application uses GraphQL for authentication but assigns a session token before login that is not regenerated post-login. This allows an attacker to predefine a token, send it to the victim, and hijack their session once the victim logs in. To solve: fix a session token, hijack the user's session, and access the profile endpoint.", "target": "{\"Lab scenario\": \"Session fixation via static session token in GraphQL mutation\", \"Lab Description\": \"The application uses GraphQL for authentication but assigns a session token before login that is not regenerated post-login. This allows an attacker to predefine a token, send it to the victim, and hijack their session once the victim logs in. To solve: fix a session token, hijack the user's session, and access the profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses OAuth authorization but fails to properly validate the redirect_uri parameter, allowing attackers to steal tokens via an open redirect. To solve: craft a malicious redirect_uri pointing to your controlled server, extract Carlos's token, and access /userinfo using it.", "target": "{\"Lab scenario\": \"OAuth open redirect token theft in redirect_uri validation\", \"Lab Description\": \"The application uses OAuth authorization but fails to properly validate the redirect_uri parameter, allowing attackers to steal tokens via an open redirect. To solve: craft a malicious redirect_uri pointing to your controlled server, extract Carlos's token, and access /userinfo using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session ids in rest login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs in REST login flow\", \"Lab Description\": \"The application issues session IDs before user authentication, and these tokens are not regenerated upon successful login. This lets an attacker pre-fixate a session token, send it to a victim, and hijack their authenticated session. To solve: pre-assign a session ID, trick the victim to log in with it, and access the /dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a poorly configured JWT validation library that leaks internal errors to the client, exposing the secret signing key when token verification fails. To solve: submit a malformed token, extract the secret from the error response, craft a valid admin token, and access /admin-panel.", "target": "{\"Lab scenario\": \"JWT secret key disclosure via verbose error logging in token validation\", \"Lab Description\": \"The application uses a poorly configured JWT validation library that leaks internal errors to the client, exposing the secret signing key when token verification fails. To solve: submit a malformed token, extract the secret from the error response, craft a valid admin token, and access /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leakage via referer header mismanagement", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header mismanagement\", \"Lab Description\": \"The application implements OAuth implicit flow but fails to clear the referer header after redirection, leaking the access token to third-party domains. To solve: intercept the Referer header after redirection to extract the victim's token, use it to access /user/settings.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session mismanagement via insecure logout endpoint", "target": "{\"Lab scenario\": \"Session mismanagement via insecure logout endpoint\", \"Lab Description\": \"The application's logout function fails to invalidate session cookies on the server, allowing attackers to reuse a hijacked token. The application continues to trust old session cookies even after the user logs out. To solve: capture the session cookie pre-logout and reuse it to access /account/profile after the user logs out.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application uses a JWT library that allows switching between asymmetric (RS256) and symmetric (HS256) algorithms without proper validation, enabling attackers to forge tokens with HS256 using the public key as the secret. To solve: download the public key, sign a malicious admin token using HS256, and access /admin/dashboard.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token verification logic\", \"Lab Description\": \"The application uses a JWT library that allows switching between asymmetric (RS256) and symmetric (HS256) algorithms without proper validation, enabling attackers to forge tokens with HS256 using the public key as the secret. To solve: download the public key, sign a malicious admin token using HS256, and access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration leading to authorization code reuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to authorization code reuse\", \"Lab Description\": \"The application uses OAuth 2.0 Authorization Code flow but does not invalidate the authorization code after the first use, allowing reuse for session hijacking. The application [accepts stale codes]. To solve: intercept the authorization code, reuse it for a second login attempt to access /user/dashboard as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application is vulnerable to session fixation because it accepts and trusts user-provided session IDs without regenerating them upon login. The application assigns the session ID based on the `session` cookie and never invalidates it post-authentication. To solve: set a known session ID, perform a login as yourself, and then reuse the fixed session ID to hijack Carlos's session.", "target": "{\"Lab scenario\": \"Session Fixation Attack in Cookie Assignment\", \"Lab Description\": \"The application is vulnerable to session fixation because it accepts and trusts user-provided session IDs without regenerating them upon login. The application assigns the session ID based on the `session` cookie and never invalidates it post-authentication. To solve: set a known session ID, perform a login as yourself, and then reuse the fixed session ID to hijack Carlos's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm attack in token validation", "target": "{\"Lab scenario\": \"JWT none algorithm attack in Token Validation\", \"Lab Description\": \"The application's JWT implementation does not properly enforce the algorithm check and accepts tokens signed with the `none` algorithm, bypassing signature verification. The application uses this token to control user access levels. To solve: modify the token to use `alg=none` and set `admin=true` to gain administrative privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth token misuse in redirect uri trust", "target": "{\"Lab scenario\": \"OAuth Token Misuse in Redirect URI Trust\", \"Lab Description\": \"The OAuth server in this lab improperly trusts wildcards in redirect URIs, allowing attackers to exfiltrate authorization codes to an external malicious domain. The application [uses a poorly validated wildcard match]. To solve: exploit the redirect URI to leak Carlos's code and reuse it to obtain his access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation in login redirect flow", "target": "{\"Lab scenario\": \"Session fixation in login redirect flow\", \"Lab Description\": \"The login flow does not regenerate session tokens upon authentication, allowing an attacker to fixate a session ID for a victim. The application fails to invalidate existing session tokens during login. To solve: hijack Carlos's session after login using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering via none algorithm", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm\", \"Lab Description\": \"The application improperly accepts unsigned JWTs by trusting the 'none' algorithm when parsing tokens. This leads to privilege escalation. To solve: forge a JWT as 'admin' and access the admin panel without a valid signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth redirect URI manipulation", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The OAuth implementation lacks proper redirect URI validation. Attackers can inject malicious redirect URIs to steal tokens. The application accepts arbitrary URLs in the `redirect_uri` parameter during login. To solve: trick the server into redirecting the victim's token to your domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt secret key brute-force in rest api login", "target": "{\"Lab scenario\": \"JWT secret key brute-force in REST API login\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management. The secret key used to sign the JWTs is weak and guessable. Tokens are validated purely on signature without proper expiration or audience claims. To solve: forge a valid JWT for the user 'carlos' using a brute-forced secret and access his account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via insecure redirect", "target": "{\"Lab scenario\": \"Session fixation via insecure redirect\", \"Lab Description\": \"The login system fails to regenerate session tokens after authentication. Attackers can predetermine session IDs and force the victim to authenticate using them. The application accepts session IDs from the URL and uses them directly. To solve: fixate a known session ID and get Carlos to log in, then reuse that session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leak via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leak via referer header\", \"Lab Description\": \"The application uses OAuth 2.0 implicit flow and redirects tokens via the URL fragment. This fragment gets exposed through the HTTP Referer header when navigating to third-party resources. To solve: intercept the access token issued to Carlos and reuse it to access his account profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt secret key brute-force in rest api authorization header", "target": "{\"Lab scenario\": \"JWT secret key brute-force in REST API Authorization Header\", \"Lab Description\": \"This lab involves a JWT-based authorization system where the backend uses a weak secret key to sign tokens. The application validates JWT tokens included in the `Authorization: Bearer` header for API access. However, it fails to implement strong key management. To solve: Forge a valid admin JWT using brute-force and access the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in login endpoint with reusable session id", "target": "{\"Lab scenario\": \"Session fixation in login endpoint with reusable session ID\", \"Lab Description\": \"The application sets a session ID cookie before authentication and does not regenerate it post-login. This allows attackers to fixate a victim's session by pre-defining the session cookie and tricking them into logging in using it. To solve: Log into Carlos's account by fixing a session ID and reusing it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect uri manipulation leading to account takeover", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation leading to account takeover\", \"Lab Description\": \"The application uses OAuth for third-party login but improperly validates redirect URIs during the authentication handshake. An attacker can tamper with the redirect_uri parameter to receive the authorization code for another user. To solve: Steal Carlos’s OAuth code and use it to link his account to yours.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none bypass in token verification", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in Token Verification\", \"Lab Description\": \"The application verifies JWT tokens without enforcing strict validation of the algorithm used. The vulnerable component fails to check if the 'alg' parameter is set to 'none'. The application accepts this altered token as valid, allowing attackers to forge tokens and impersonate users. To solve: forge a valid JWT for the user 'carlos' using algorithm 'none' and access the /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth token leakage in redirect url handler", "target": "{\"Lab scenario\": \"OAuth Token Leakage in Redirect URL Handler\", \"Lab Description\": \"The OAuth flow in this application mishandles access tokens by reflecting them in the URL. A malicious actor can harvest tokens via browser history or referer headers. The application redirects to a vulnerable page with tokens embedded. To solve: steal the access token issued to Carlos and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login session initialization", "target": "{\"Lab scenario\": \"Session Fixation in Login Session Initialization\", \"Lab Description\": \"The application allows users to supply their own session identifiers before authentication. Session tokens are not regenerated after login, enabling fixation. The attacker can fix a session ID and trick a victim into logging in with it. To solve: fix a session ID for Carlos, wait for login, then access /dashboard using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature none bypass in authentication header", "target": "{\"Lab scenario\": \"JWT signature none bypass in authentication header\", \"Lab Description\": \"The authentication system uses JWTs but fails to validate tokens with the 'none' algorithm. The application uses the JWT in the Authorization header for access control but does not enforce proper algorithm checks during signature verification. To solve: craft a forged JWT with algorithm set to 'none' and access Carlos's account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect_uri manipulation in login flow", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation in login flow\", \"Lab Description\": \"The application uses a third-party OAuth provider for login and redirects users based on the 'redirect_uri' parameter. The redirect URI is insufficiently validated, allowing attackers to steal authorization codes. To solve: intercept and modify the OAuth flow to capture Carlos's code and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow via Set-Cookie header manipulation", "target": "{\"Lab scenario\": \"Session fixation in login flow via Set-Cookie header manipulation\", \"Lab Description\": \"The application assigns the session ID before login and does not rotate it upon authentication. This flaw allows attackers to fixate a known session ID for the victim before login. To solve: predefine a session ID, trick Carlos into logging in, and reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth redirect URI manipulation in authentication flow", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in authentication flow\", \"Lab Description\": \"The OAuth implementation in this application contains weak validation of redirect URIs. This allows an attacker to hijack tokens by injecting malicious domains. The application blindly trusts user-controlled redirect_uri parameters during the OAuth login flow, enabling redirection to external, attacker-controlled endpoints. To solve: capture an OAuth access token issued for Carlos by manipulating the redirect flow and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application allows attackers to set session cookies before authentication and reuses them post-login. This allows a session fixation attack where the attacker sets their own session ID, tricks the victim into using it, and later hijacks the session after the victim logs in. To solve: pre-set a session ID, force Carlos to authenticate using it, then hijack the session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authorize access to user accounts but fails to enforce signature verification properly. It blindly accepts tokens where the alg field is set to 'none'. To solve: forge a JWT with alg=none and payload containing 'username':'carlos', then use it to access Carlos's account via the protected endpoint.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in access token validation\", \"Lab Description\": \"The application uses JWTs to authorize access to user accounts but fails to enforce signature verification properly. It blindly accepts tokens where the alg field is set to 'none'. To solve: forge a JWT with alg=none and payload containing 'username':'carlos', then use it to access Carlos's account via the protected endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature validation bypass in api endpoint", "target": "{\"Lab scenario\": \"JWT signature validation bypass in API endpoint\", \"Lab Description\": \"This lab's backend relies on JSON Web Tokens (JWT) to validate user sessions. However, it fails to enforce proper algorithm checks. The application incorrectly accepts tokens signed with the 'none' algorithm. To solve: Access Carlos's data through the protected /api/user endpoint by forging a valid-looking JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab's login system is vulnerable to session fixation due to the reuse of session identifiers across authentication boundaries. Attackers can preset a session cookie and trick a victim into logging in with it. To solve: Fix a session ID, log Carlos in using it, then use the same session to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This OAuth-based authentication flow is vulnerable to a redirect_uri validation flaw. It fails to strictly validate the domain of redirection endpoints, allowing attackers to steal OAuth authorization codes. To solve: Inject a malicious redirect_uri that sends the authorization code to your server, retrieve the stolen code, and use it to log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth token manipulation via redirect_uri parameter injection\", \"Lab Description\": \"This OAuth-based authentication flow is vulnerable to a redirect_uri validation flaw. It fails to strictly validate the domain of redirection endpoints, allowing attackers to steal OAuth authorization codes. To solve: Inject a malicious redirect_uri that sends the authorization code to your server, retrieve the stolen code, and use it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in token verification", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token verification\", \"Lab Description\": \"The application verifies user sessions using JSON Web Tokens (JWTs). The JWT validation logic accepts any token using either the HS256 or RS256 algorithm. However, the public key used for RS256 verification is not securely isolated. The application trusts tokens signed with HS256 and validates them using a hardcoded RS256 public key, creating an algorithm confusion vector. To solve: forge a valid token to impersonate Carlos and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth for authentication via a third-party provider. However, the session ID is assigned before user authentication and not regenerated after login. This allows a malicious actor to fix a session ID by luring the victim into authenticating under a session the attacker controls. To solve: log in as Carlos using a fixed session and access their account page.", "target": "{\"Lab scenario\": \"Session fixation in OAuth authorization redirect flow\", \"Lab Description\": \"The application uses OAuth for authentication via a third-party provider. However, the session ID is assigned before user authentication and not regenerated after login. This allows a malicious actor to fix a session ID by luring the victim into authenticating under a session the attacker controls. To solve: log in as Carlos using a fixed session and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Blind username discovery through GraphQL error differentiation", "target": "{\"Lab scenario\": \"Blind username discovery through GraphQL error differentiation\", \"Lab Description\": \"The application exposes a GraphQL endpoint that handles authentication queries. Due to a misconfigured error-handling mechanism, responses differ slightly based on the validity of the username during login attempts. This side-channel allows blind enumeration of usernames. To solve: enumerate Carlos's username and use it to brute-force his password to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm override in rest api authentication", "target": "{\"Lab scenario\": \"JWT none algorithm override in REST API Authentication\", \"Lab Description\": \"This lab uses JWTs for session management but improperly trusts the 'alg' field in incoming tokens. The application does not validate the token signature if the 'alg' is set to 'none'. The application generates signed JWTs using the HS256 algorithm, but accepts unsigned tokens with 'alg: none'. To solve: forge an unsigned JWT to impersonate Carlos and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth2 redirect uri manipulation via open redirect in login provider", "target": "{\"Lab scenario\": \"OAuth2 redirect URI manipulation via open redirect in login provider\", \"Lab Description\": \"This OAuth flow integrates with an external identity provider (IdP), but the application accepts any redirection URI without proper validation. An attacker can manipulate the redirection URI during login to intercept authorization codes and hijack sessions. To solve: abuse the redirection vulnerability to authenticate as Carlos without credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable session identifier in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session identifier in login flow\", \"Lab Description\": \"The login system assigns session identifiers before authentication and does not regenerate the session after successful login. An attacker can set a session ID via cookie and trick the victim into authenticating with it. The attacker then hijacks the session. To solve: fixate a session for Carlos and access their account using the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Authentication lab for: session fixation in oauth redirect handler", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Redirect Handler\", \"Lab Description\": \"The OAuth implementation in this application is vulnerable to session fixation. The redirect URI accepts a pre-set session identifier, which is not regenerated after successful login. The application fails to validate or rotate the session upon authentication. To solve: Hijack Carlos's session by injecting a known session ID during the OAuth redirect phase.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm bypass in auth token verification", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Auth Token Verification\", \"Lab Description\": \"This app validates JWT tokens using a vulnerable library that fails to enforce algorithm constraints. The JWT is signed with 'HS256', but the backend accepts 'none' and skips signature verification. To solve: Forge a token with 'none' algorithm, impersonate Carlos, and access his protected account area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where blind oauth token leakage in referer header injection", "target": "{\"Lab scenario\": \"Blind OAuth Token Leakage in Referer Header Injection\", \"Lab Description\": \"This OAuth flow redirects users to third-party domains after login. However, sensitive tokens are embedded in the Referer header due to improper scope isolation. The application fails to sanitize outbound redirects, leaking Carlos's OAuth token. To solve: Set up a malicious endpoint to intercept tokens and reuse the token to access Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation due to improperly handled session tokens. The application issues a session cookie before authentication and continues using it after successful login. To solve the lab, fixate a session for Carlos and access his account after he logs in.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login process\", \"Lab Description\": \"This lab is vulnerable to session fixation due to improperly handled session tokens. The application issues a session cookie before authentication and continues using it after successful login. To solve the lab, fixate a session for Carlos and access his account after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering vulnerability in session token validation", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in session token validation\", \"Lab Description\": \"This lab is vulnerable to JWT signature tampering via `alg: none`. The application fails to properly validate JWT tokens' signature algorithm. To solve the lab, forge a JWT with `alg: none` and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration vulnerability in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth misconfiguration vulnerability in redirect URI validation\", \"Lab Description\": \"The lab's OAuth implementation accepts arbitrary redirect URIs due to a flawed validation logic. The application uses OAuth for login but does not strictly validate registered redirect URIs. To solve the lab, obtain an access token for Carlos by injecting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion vulnerability in session token verification", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in session token verification\", \"Lab Description\": \"The application's authentication relies on JSON Web Tokens (JWT) for session validation. However, it insecurely trusts the algorithm header provided by the client, allowing an attacker to switch from 'RS256' to 'none' or 'HS256' and forge a valid token without the server's private key. The application signs session tokens with RSA but doesn't enforce algorithm validation. To solve: forge a JWT for the 'carlos' user and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 login flow improperly accepts any token issued by an untrusted Authorization Server without validation. The application does not validate the issuer (`iss`) claim, allowing attackers to craft an access token with 'carlos' as the subject. To solve: craft a forged OAuth token using a dummy authorization server and log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in third-party login endpoint\", \"Lab Description\": \"This lab's OAuth 2.0 login flow improperly accepts any token issued by an untrusted Authorization Server without validation. The application does not validate the issuer (`iss`) claim, allowing attackers to craft an access token with 'carlos' as the subject. To solve: craft a forged OAuth token using a dummy authorization server and log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session identifier in login endpoint", "target": "{\"Lab scenario\": \"Session fixation via predictable session identifier in login endpoint\", \"Lab Description\": \"The web application creates a session identifier before authentication, and does not issue a new one upon successful login. This allows attackers to predefine a session ID, share it with the victim, and later hijack the session. To solve: Fixate a session, lure the victim into using it, then log in with the same session to access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's authentication relies on JWTs for session validation. The server fails to enforce the algorithm specified in the token header and blindly trusts the signature when 'alg' is set to 'none'. The application fails to verify JWT signatures when the token's header declares 'none' as the algorithm, allowing an attacker to forge tokens. To solve: Forge a valid JWT for the user carlos and access their account page.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in session validation\", \"Lab Description\": \"This lab's authentication relies on JWTs for session validation. The server fails to enforce the algorithm specified in the token header and blindly trusts the signature when 'alg' is set to 'none'. The application fails to verify JWT signatures when the token's header declares 'none' as the algorithm, allowing an attacker to forge tokens. To solve: Forge a valid JWT for the user carlos and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable session IDs", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"This lab's session management is vulnerable to fixation. The server issues predictable session IDs that are not regenerated upon successful login. An attacker can set a victim's session identifier before they log in and then reuse it to hijack the session. To solve: Fixate a session for the user carlos, wait for them to authenticate, then reuse the session ID to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow misconfiguration", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"This lab's authentication relies on OAuth with implicit flow, but the client application fails to validate the 'state' parameter, making it vulnerable to CSRF-based token theft. The attacker can craft an authorization URL to leak the victim's token. To solve: Capture Carlos's OAuth token and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature verification bypass in token validation middleware", "target": "{\"Lab scenario\": \"JWT Signature Verification Bypass in Token Validation Middleware\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management but improperly trusts the 'alg' field from the token header. When this is set to 'none', the application skips signature verification. The application issues JWTs signed with a secret and expects a valid signature. To solve: Forge a valid token for 'carlos' by exploiting the 'none' algorithm bypass and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application implements OAuth 2.0 for third-party login using a redirect_uri parameter vulnerable to open redirection. An attacker can intercept the authorization code before token exchange. The application trusts user-controlled redirect URLs without validation. To solve: Steal Carlos's authorization code via a manipulated redirect_uri and log into his account.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Redirect Handler\", \"Lab Description\": \"The application implements OAuth 2.0 for third-party login using a redirect_uri parameter vulnerable to open redirection. An attacker can intercept the authorization code before token exchange. The application trusts user-controlled redirect URLs without validation. To solve: Steal Carlos's authorization code via a manipulated redirect_uri and log into his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via insecure cookie assignment in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Assignment in Login Flow\", \"Lab Description\": \"The application improperly assigns the session identifier before user authentication, allowing attackers to fixate a known session ID. The server does not regenerate the session token post-login. To solve: Fixate a session ID before login and trick Carlos into logging in, then reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature verification bypass in rest api login", "target": "{\"Lab scenario\": \"JWT signature verification bypass in REST API login\", \"Lab Description\": \"This lab's RESTful authentication mechanism uses JWTs but fails to verify the token signature correctly when the 'alg' field is manipulated. The application accepts JWTs from clients to grant access to protected resources. However, the backend incorrectly trusts unsigned tokens when the 'alg' is set to 'none'. To solve: craft and submit a forged token to access Carlos's protected account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session tokens in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens in login flow\", \"Lab Description\": \"This web application's login process is vulnerable to session fixation. The server fails to regenerate session tokens upon successful login, allowing an attacker to set a valid session ID in advance and hijack a victim's authenticated session. To solve: pre-set a session ID before login, then log in as Carlos using that fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 implementation misconfigures the allowed redirect URIs, failing to validate the domain properly. Attackers can manipulate the redirect URI to capture the authorization code for any user. To solve: hijack Carlos's authorization code and use it to obtain an access token and access his account page.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking authorization code via redirect URI manipulation\", \"Lab Description\": \"This lab's OAuth 2.0 implementation misconfigures the allowed redirect URIs, failing to validate the domain properly. Attackers can manipulate the redirect URI to capture the authorization code for any user. To solve: hijack Carlos's authorization code and use it to obtain an access token and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's session management mechanism uses JSON Web Tokens (JWT) for authentication but fails to securely verify the token's signature. The application uses a hardcoded secret and doesn't validate the algorithm properly. To solve: forge a valid admin token using the known public key and access the admin control panel.", "target": "{\"Lab scenario\": \"JWT token signature vulnerability in session management\", \"Lab Description\": \"This lab's session management mechanism uses JSON Web Tokens (JWT) for authentication but fails to securely verify the token's signature. The application uses a hardcoded secret and doesn't validate the algorithm properly. To solve: forge a valid admin token using the known public key and access the admin control panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit grant misconfiguration in login flow", "target": "{\"Lab scenario\": \"OAuth implicit grant misconfiguration in login flow\", \"Lab Description\": \"This lab simulates an OAuth-based login mechanism that incorrectly trusts user-supplied redirect URIs and fails to validate tokens properly. The application exposes the access token directly in the URL hash, allowing attackers to manipulate it. To solve: hijack an OAuth token using a crafted redirect URI and access the victim's protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation attack via url parameter in login endpoint", "target": "{\"Lab scenario\": \"Session fixation attack via URL parameter in login endpoint\", \"Lab Description\": \"This lab's login endpoint fails to regenerate session tokens after successful authentication, allowing attackers to set their own session ID via a URL parameter. If the session ID remains unchanged after login, attackers can predetermine the victim's session. To solve: fixate your session ID and access Carlos's account after forcing him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none algorithm bypass in authorization header", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Bypass in Authorization Header\", \"Lab Description\": \"This lab's authentication system uses JSON Web Tokens (JWT) for session management. The server-side JWT verification improperly trusts tokens with the `alg` field set to 'none'. The application signs user sessions, but fails to enforce algorithm validation during token parsing, allowing attackers to forge tokens without knowing the secret key. To solve: Log in as the 'carlos' user by crafting a valid JWT without the signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via URL Parameter in Login Flow", "target": "{\"Lab scenario\": \"Session Fixation via URL Parameter in Login Flow\", \"Lab Description\": \"This lab's session handling mechanism is vulnerable to fixation attacks. The session ID is accepted from a user-supplied URL parameter (`sessionId`) and assigned without regeneration upon login, enabling attackers to predetermine session IDs for victims. To solve: Log in as Carlos by fixing a session ID before authentication and reuse it post-login to hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration Token Leakage in Redirect URI", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Token Leakage in Redirect URI\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable due to overly permissive redirect URI validation. An attacker can manipulate the redirect URI parameter to leak authorization codes to a malicious domain. The OAuth server accepts partial matching on registered redirect URIs, making it possible to inject crafted URLs. To solve: Extract the OAuth token for Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session tokens in login flow", "target": "{\"Lab scenario\": \"Session Fixation via predictable session tokens in login flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability within the login mechanism. The application assigns session IDs prior to authentication but fails to regenerate them post-login, allowing an attacker to fixate a session. The application uses insecure random generation for the session token which is passed as a cookie. To solve: fixate Carlos's session and access his account by predefining the session ID before he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses JWT tokens for authentication but fails to properly enforce signature verification, accepting tokens with the algorithm field set to 'none'. The application trusts the header-supplied algorithm, allowing attackers to bypass authentication by supplying an unsigned token. To solve: forge a token for Carlos without needing the secret and log into his account.", "target": "{\"Lab scenario\": \"JWT token signature spoofing via 'none' algorithm\", \"Lab Description\": \"This lab uses JWT tokens for authentication but fails to properly enforce signature verification, accepting tokens with the algorithm field set to 'none'. The application trusts the header-supplied algorithm, allowing attackers to bypass authentication by supplying an unsigned token. To solve: forge a token for Carlos without needing the secret and log into his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth2 token leakage via referrer header in third-party redirect", "target": "{\"Lab scenario\": \"OAuth2 token leakage via referrer header in third-party redirect\", \"Lab Description\": \"This lab demonstrates insecure OAuth2 token handling. After successful authorization, the application redirects users to a third-party site, leaking the token in the Referer header. Attackers can capture the token from this third-party service and reuse it. To solve: capture Carlos's leaked OAuth token and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature spoof via algorithm confusion", "target": "{\"Lab scenario\": \"JWT signature spoof via algorithm confusion\", \"Lab Description\": \"This lab demonstrates an insecure JSON Web Token (JWT) validation implementation that incorrectly trusts the 'alg' header of incoming tokens. The application uses symmetric HMAC verification but allows switching the algorithm to 'none'. To solve: Craft a forged token to escalate to the 'admin' user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 flow is improperly designed, allowing an attacker to reuse a captured authorization code to hijack a user session. The application does not properly invalidate codes after first use. To solve: Steal and reuse a victim's authorization code to log in as that user.", "target": "{\"Lab scenario\": \"OAuth authorization code reuse\", \"Lab Description\": \"This lab's OAuth 2.0 flow is improperly designed, allowing an attacker to reuse a captured authorization code to hijack a user session. The application does not properly invalidate codes after first use. To solve: Steal and reuse a victim's authorization code to log in as that user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session ids", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"This lab simulates a session fixation vulnerability where the session identifier is predictable and not regenerated after login. The application uses user-controlled session IDs from URL parameters, allowing attackers to set a session ID before authentication. To solve: Fixate a session ID before login and hijack the authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login workflow", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login workflow\", \"Lab Description\": \"This lab's session management mechanism is flawed and allows session fixation attacks. The application issues session cookies prior to authentication and fails to assign new tokens upon successful login. To solve: Hijack Carlos's session by fixing the session identifier before he logs in, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in token validation", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token validation\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for session authentication but fails to enforce the correct cryptographic algorithm. An attacker can manipulate the token header to use 'none' as the algorithm and forge a valid session token. To solve: Forge a valid admin JWT and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth integration incorrectly trusts the 'state' parameter without proper validation. An attacker can intercept and modify this value to hijack authorization codes during the OAuth redirection. To solve: Manipulate the OAuth 'state' parameter to capture a valid authorization code and log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login flow\", \"Lab Description\": \"This lab's OAuth integration incorrectly trusts the 'state' parameter without proper validation. An attacker can intercept and modify this value to hijack authorization codes during the OAuth redirection. To solve: Manipulate the OAuth 'state' parameter to capture a valid authorization code and log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in session validation", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in session validation\", \"Lab Description\": \"This lab's authentication system uses JWTs for session management. The server uses the 'alg' field from the incoming token without proper validation, making it vulnerable to algorithm confusion. The application fails to enforce the intended HS256 signature verification when decoding JWTs, allowing attackers to switch the algorithm to 'none' and bypass signature verification entirely. To solve: Forge a valid session token for the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect uri manipulation in authorization flow", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in authorization flow\", \"Lab Description\": \"The application implements OAuth 2.0 for single sign-on (SSO) but lacks proper validation of the redirect_uri parameter. An attacker can manipulate this parameter to hijack an OAuth authorization code meant for another user. The application incorrectly trusts any user-supplied redirect_uri pointing to the same domain. To solve: Trick the application into sending an OAuth code for the user 'carlos' to your controlled endpoint, then exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab's session management logic fails to regenerate session tokens upon successful login. Attackers can fixate their own session ID and later reuse it to hijack authenticated user sessions. The application issues the session cookie before verifying user credentials, allowing the attacker to trick a victim into using the attacker's predefined session token. To solve: Fixate your session ID, trick the application into authenticating as Carlos, then reuse the session ID to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in authentication flow", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authentication flow\", \"Lab Description\": \"This lab's authentication mechanism is vulnerable to JWT algorithm confusion. The application accepts JSON Web Tokens for authentication but fails to enforce the expected signing algorithm, allowing an attacker to switch from asymmetric RS256 to symmetric HS256. The application does not validate the secret when HS256 is used. To solve: forge a valid JWT for the user 'carlos' and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation due to improper handling of session cookies. The application accepts user-supplied session tokens and fails to regenerate them upon authentication. An attacker can set a known session ID before login, which will persist across privilege escalation. To solve: fix a session ID and log in as the victim user 'carlos' using the same session.", "target": "{\"Lab scenario\": \"Session fixation via insecure cookie handling\", \"Lab Description\": \"This lab is vulnerable to session fixation due to improper handling of session cookies. The application accepts user-supplied session tokens and fails to regenerate them upon authentication. An attacker can set a known session ID before login, which will persist across privilege escalation. To solve: fix a session ID and log in as the victim user 'carlos' using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth token misconfiguration in third-party login", "target": "{\"Lab scenario\": \"OAuth token misconfiguration in third-party login\", \"Lab Description\": \"This lab's OAuth login flow improperly trusts the 'sub' claim from a third-party provider without validating issuer or audience fields, allowing impersonation of other users. To solve: forge a valid ID Token with 'sub' set to Carlos and log in via OAuth to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via Pre-Login Cookie Reuse", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Login Cookie Reuse\", \"Lab Description\": \"The login flow of this web app allows a pre-authenticated session ID to persist after a successful login, leading to session fixation. The application does not regenerate session identifiers after login, allowing attackers to set a session beforehand. To solve: Hijack Carlos's session using a pre-set session ID cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Algorithm Confusion in Authorization Header", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Authorization Header\", \"Lab Description\": \"The app uses JWTs for session management but does not enforce a strong algorithm check. It accepts unsigned tokens if the 'alg' header is modified to 'none'. The application verifies JWTs based on the 'alg' field without checking signature integrity. To solve: Forge an admin token using alg:none and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leakage in redirect url", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leakage in Redirect URL\", \"Lab Description\": \"The web application uses the OAuth 2.0 implicit flow and allows open redirection in the redirect_uri parameter. This enables token leakage through an attacker-controlled URL. The application trusts user-controlled redirect URIs without validating the domain. To solve: Leak Carlos's token to an attacker domain and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application implements a flawed session handling mechanism that accepts user-provided session IDs via URL query parameters. When users log in, the session ID from the URL is reused, allowing attackers to predefine a session and force victims to use it. To solve: Hijack Carlos's session by crafting a valid login link that fixes the session ID.", "target": "{\"Lab scenario\": \"Session fixation in URL parameter during login\", \"Lab Description\": \"The application implements a flawed session handling mechanism that accepts user-provided session IDs via URL query parameters. When users log in, the session ID from the URL is reused, allowing attackers to predefine a session and force victims to use it. To solve: Hijack Carlos's session by crafting a valid login link that fixes the session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt authentication bypass via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for authentication. It trusts the 'alg' header of incoming tokens without validation. If the algorithm is set to 'none', the server skips signature verification. To solve: Forge a JWT token with 'none' algorithm to gain access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration with open redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect\", \"Lab Description\": \"The application uses OAuth for authentication but fails to validate the redirect_uri parameter strictly. An attacker can manipulate this parameter to redirect the OAuth authorization code to their own server and steal access tokens. To solve: Capture Carlos's access token by injecting a malicious redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: REST API JWT authentication bypass via weak secret", "target": "{\"Lab scenario\": \"REST API JWT authentication bypass via weak secret\", \"Lab Description\": \"The application uses JWT tokens to authenticate API users. It signs tokens using a weak secret and does not validate the 'alg' claim properly. The application exposes an endpoint that echoes back the token payload for debugging. To solve: craft a forged JWT token that grants admin access and use it to access the protected /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow access token leak in referer header", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Access Token Leak in Referer Header\", \"Lab Description\": \"The application uses the OAuth 2.0 Implicit flow for authentication. After login, it redirects the user to a third-party domain while leaking the access token in the Referer header. To solve: intercept and steal Carlos’s OAuth access token via a malicious redirect URI, then use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application generates a session ID in a cookie before login and fails to regenerate it after authentication. The session ID is predictable and can be fixed prior to victim login. To solve: set a session ID for the victim, trick them into logging in, then reuse the same ID to access their session.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login endpoint\", \"Lab Description\": \"The application generates a session ID in a cookie before login and fails to regenerate it after authentication. The session ID is predictable and can be fixed prior to victim login. To solve: set a session ID for the victim, trick them into logging in, then reuse the same ID to access their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering vulnerability in authorization header handling", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization header handling\", \"Lab Description\": \"This lab involves a vulnerable REST API that authenticates users based on JWTs passed via the Authorization header. The server does not verify the token signature. The application decodes the token and grants access based solely on the 'role' claim. To solve: craft a tampered JWT with elevated privileges to access the /admin/data endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in authorization code grant exchange", "target": "{\"Lab scenario\": \"OAuth misconfiguration in authorization code grant exchange\", \"Lab Description\": \"This lab uses the OAuth 2.0 authorization code grant flow. The application does not validate the `redirect_uri` during the token exchange, allowing an attacker to intercept the authorization code. To solve: hijack the OAuth flow to gain an access token for Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab implements session-based authentication using a fixed session ID passed as a cookie. The application does not regenerate session IDs upon login, enabling session fixation attacks. To solve: set a session ID cookie before login, then trick Carlos into logging in with it and reuse the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering using alg=none in authorization header", "target": "{\"Lab scenario\": \"JWT tampering using alg=none in Authorization header\", \"Lab Description\": \"This lab's authentication mechanism relies on JSON Web Tokens (JWTs) passed in the Authorization header. The server trusts the JWT without verifying the signature if the algorithm is set to 'none'. This allows tampering with token content. The application uses the JWT's 'role' claim to grant admin access. To solve: Modify the JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login flow using predictable session id", "target": "{\"Lab scenario\": \"Session fixation in login flow using predictable session ID\", \"Lab Description\": \"This lab suffers from a session fixation vulnerability. The session ID is set before login and remains unchanged after authentication. The attacker can pre-generate a session ID and trick the victim into using it. After the victim logs in, the attacker hijacks the session. To solve: Fixate Carlos's session and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration via open redirect leads to token theft", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect leads to token theft\", \"Lab Description\": \"This lab's OAuth implementation incorrectly trusts arbitrary redirect_uris during the OAuth flow. By supplying a malicious redirect URI, an attacker can intercept the authorization code and exchange it for an access token. To solve: Capture Carlos's access token and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: restful jwt tampering in login endpoint", "target": "{\"Lab scenario\": \"RESTful JWT tampering in login endpoint\", \"Lab Description\": \"The application uses a JWT for authentication and verifies it using a public key. However, the algorithm field in the token header is not validated correctly, allowing attackers to manipulate it. The application blindly trusts unsigned tokens when 'alg' is set to 'none'. To solve: log in as the admin user and access the dashboard endpoint using a tampered token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application integrates third-party OAuth authentication but fails to validate redirect URIs. An attacker can craft an authorization URL with an open redirect in the redirect_uri parameter to intercept the authorization code. To solve: obtain the victim's authorization code and exchange it for an access token, then retrieve their email.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect in redirect_uri\", \"Lab Description\": \"This application integrates third-party OAuth authentication but fails to validate redirect URIs. An attacker can craft an authorization URL with an open redirect in the redirect_uri parameter to intercept the authorization code. To solve: obtain the victim's authorization code and exchange it for an access token, then retrieve their email.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The SOAP-based login endpoint accepts pre-set session IDs via cookies. The application does not regenerate session IDs after login. This allows an attacker to fix the session ID before victim logs in, then reuse it to impersonate the session. To solve: Fix a session ID, trick the victim to use it, and access the /myAccount endpoint as the victim.", "target": "{\"Lab scenario\": \"SOAP API session fixation via pre-set cookie\", \"Lab Description\": \"The SOAP-based login endpoint accepts pre-set session IDs via cookies. The application does not regenerate session IDs after login. This allows an attacker to fix the session ID before victim logs in, then reuse it to impersonate the session. To solve: Fix a session ID, trick the victim to use it, and access the /myAccount endpoint as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab demonstrates session fixation where the session ID is accepted from the user's request instead of being regenerated after login. The application uses a session token passed as a cookie and fails to rotate it after successful authentication, allowing attackers to hijack sessions. To solve: Fixate Carlos's session, then login as him using a pre-set session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt signature bypass using 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm\", \"Lab Description\": \"This lab uses JWT tokens for authentication but fails to properly validate the algorithm field. It accepts tokens with the 'none' algorithm, allowing attackers to craft arbitrary tokens without a valid signature. To solve: Forge a token to impersonate Carlos and access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect_uri validation", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation\", \"Lab Description\": \"This lab simulates a vulnerable OAuth login where the redirect_uri is not properly validated. By manipulating the redirect_uri parameter, an attacker can intercept tokens issued to users. To solve: Steal Carlos's token and access the protected resource as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses session cookies to manage user authentication, but fails to regenerate them after login. A malicious actor can fix a known session ID before login, and force the victim to authenticate using it. The application reflects session IDs without regenerating them. To solve: hijack Carlos's session by fixing the session ID before he logs in.", "target": "{\"Lab scenario\": \"Session fixation via pre-set session cookie\", \"Lab Description\": \"The application uses session cookies to manage user authentication, but fails to regenerate them after login. A malicious actor can fix a known session ID before login, and force the victim to authenticate using it. The application reflects session IDs without regenerating them. To solve: hijack Carlos's session by fixing the session ID before he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in authentication tokens", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authentication tokens\", \"Lab Description\": \"The app uses JWTs to authenticate users, but allows algorithm tampering in the header. It incorrectly trusts the 'alg' claim and accepts unsigned tokens when 'none' is specified. To solve: forge a valid token for Carlos without a signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses OAuth to log in users via a third-party provider. However, it fails to validate the redirect_uri parameter correctly, enabling attackers to steal tokens. The app reflects the redirect_uri without whitelisting. To solve: intercept the OAuth flow and capture Carlos's token.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The application uses OAuth to log in users via a third-party provider. However, it fails to validate the redirect_uri parameter correctly, enabling attackers to steal tokens. The app reflects the redirect_uri without whitelisting. To solve: intercept the OAuth flow and capture Carlos's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where insecure jwt validation in authorization header (none algorithm tampering)", "target": "{\"Lab scenario\": \"Insecure JWT validation in Authorization header (None algorithm tampering)\", \"Lab Description\": \"The application uses JWTs for user authentication and includes the token in the Authorization header. The server does not correctly verify the algorithm used to sign the JWT. The application trusts unsigned tokens if they specify 'alg':'none'. To solve: craft a tampered token impersonating 'carlos' and access the protected profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leads to token hijacking via redirect_uri manipulation", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to token hijacking via redirect_uri manipulation\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party login integration. It implements the implicit flow and allows redirect_uri values to be manipulated without proper validation. An attacker can craft a malicious authorization URL to intercept access tokens. To solve: extract a valid access token for carlos and use it to access the user's dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Authentication lab for: session fixation vulnerability in graphql login mutation", "target": "{\"Lab scenario\": \"Session fixation vulnerability in GraphQL login mutation\", \"Lab Description\": \"The application uses a GraphQL endpoint for login, but does not invalidate the session token upon authentication. This allows an attacker to set a fixed session before the victim logs in. To solve: Fixate a session, trick the victim into logging in, then reuse the session ID to access the user's data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt signature bypass in authorization header", "target": "{\"Lab scenario\": \"JWT signature bypass in authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for user session management. It decodes the token and verifies it using the algorithm specified in the token header. The implementation trusts the 'alg' field from user-controlled input, making it vulnerable to algorithm confusion. The application treats unsigned tokens as valid. To solve: forge an unsigned JWT to impersonate the admin user and access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"The application issues a session cookie before authentication and does not regenerate the session ID after login. This allows an attacker to fix the session ID of a victim. The attacker can trick a victim into using a known session ID, and once they log in, the attacker can use the same session ID to hijack the session. To solve: gain access to Carlos's account using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth token theft using open redirect in callback url", "target": "{\"Lab scenario\": \"OAuth token theft using open redirect in callback URL\", \"Lab Description\": \"The application uses OAuth 2.0 with an implicit flow and accepts arbitrary redirect URIs after authorization. This introduces an open redirect vulnerability. An attacker can steal the access token by injecting a malicious redirect URL in the OAuth flow. To solve: craft a malicious OAuth URL that redirects the access token to an attacker-controlled domain and extract the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering vulnerability in session validation middleware", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in session validation middleware\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management. However, it incorrectly trusts the 'alg' field in the JWT header without enforcing strict validation. The application uses these tokens to identify authenticated users. To solve: Forge a valid JWT for the user 'carlos' and access their My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This application mishandles session IDs and does not issue a new session upon successful authentication. The attacker can set a fixed session ID before login and trick a victim into logging in with that same session. To solve: Log in as Carlos by forcing a session ID and reusing it post-login.", "target": "{\"Lab scenario\": \"Session fixation via pre-authenticated session reuse in login handler\", \"Lab Description\": \"This application mishandles session IDs and does not issue a new session upon successful authentication. The attacker can set a fixed session ID before login and trick a victim into logging in with that same session. To solve: Log in as Carlos by forcing a session ID and reusing it post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect uri manipulation in authorization endpoint", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in authorization endpoint\", \"Lab Description\": \"This application implements OAuth2 authorization but fails to strictly validate redirect URIs, allowing attackers to manipulate the flow and steal access tokens. The authorization server trusts unvalidated 'redirect_uri' values. To solve: Capture a valid OAuth token for Carlos and use it to call the protected /api/user endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering vulnerability in session management", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in session management\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. However, it fails to properly verify the token's signature. The `alg` field in the JWT header is set to `none`, and the application accepts tokens without verifying their integrity. The application trusts all fields in the token, including the `username` claim. To solve: Forge a JWT that impersonates the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth token misconfiguration in api gateway authorization", "target": "{\"Lab scenario\": \"OAuth token misconfiguration in API gateway authorization\", \"Lab Description\": \"The API gateway uses OAuth tokens for authorization. However, it fails to validate the 'aud' claim in the access token. This allows an attacker to reuse a token issued for a different client (token confusion). To solve: Use a valid OAuth access token from your own app and access the protected endpoint of a privileged client to view Carlos's email address.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation vulnerability in login handler", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login handler\", \"Lab Description\": \"The application assigns session identifiers before authentication and does not regenerate them after login. This allows an attacker to set a fixed session and trick a victim into logging in under a known session ID. The attacker can then hijack the session. To solve: Fix a session, get Carlos to authenticate into it, and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in api authorization", "target": "{\"Lab scenario\": \"JWT algorithm confusion in API authorization\", \"Lab Description\": \"This lab exposes a REST API that uses JSON Web Tokens (JWTs) to control access. The server trusts the 'alg' field in the JWT header and does not validate its signature properly when 'alg' is set to 'none'. The application accepts user-supplied tokens without enforcing signature validation. To solve: craft a forged token to impersonate the admin user and access the protected /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab has a vulnerable login flow where session identifiers are issued before authentication and not regenerated after login. The session ID is predictable and can be shared across users. The application sets a cookie named session_id which is trusted without being rotated post-login. To solve: fix a session ID before login and force the victim to use it to hijack their authenticated session.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab has a vulnerable login flow where session identifiers are issued before authentication and not regenerated after login. The session ID is predictable and can be shared across users. The application sets a cookie named session_id which is trusted without being rotated post-login. To solve: fix a session ID before login and force the victim to use it to hijack their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration token reuse attack", "target": "{\"Lab scenario\": \"OAuth misconfiguration token reuse attack\", \"Lab Description\": \"This lab simulates an OAuth authorization server that fails to validate audience claims (aud) on access tokens. As a result, tokens issued for one client can be reused against another. The client application does not verify whether the token was issued for its own audience. To solve: use a token issued for one OAuth client to access a protected endpoint in another context.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements a login flow that improperly handles session tokens. The application creates a session ID before authentication and does not regenerate it upon successful login. An attacker can abuse this behavior to fix their own session ID on a victim’s account. To solve: Hijack Carlos’s session by forcing a session ID fixation and access his account page.", "target": "{\"Lab scenario\": \"Session fixation via flawed login redirect\", \"Lab Description\": \"This lab implements a login flow that improperly handles session tokens. The application creates a session ID before authentication and does not regenerate it upon successful login. An attacker can abuse this behavior to fix their own session ID on a victim’s account. To solve: Hijack Carlos’s session by forcing a session ID fixation and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion leading to privilege escalation", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to privilege escalation\", \"Lab Description\": \"This lab uses JWT for session management but accepts unsigned tokens by trusting the 'alg' value from the token header. This allows attackers to change the algorithm to 'none' and forge tokens with elevated privileges. To solve: Craft a forged token granting admin privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leaking authorization codes", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking authorization codes\", \"Lab Description\": \"This lab uses OAuth for third-party login but fails to validate the redirect_uri properly. An attacker can abuse this to capture an authorization code meant for another user. To solve: Hijack Carlos’s OAuth code and use it to log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application improperly handles session identifiers during login, allowing a pre-auth session token to persist after authentication. The application sets a session cookie before authentication and does not regenerate it upon successful login. To solve: Hijack a logged-in session by fixing the session ID prior to user authentication.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated token reuse in REST login flow\", \"Lab Description\": \"The application improperly handles session identifiers during login, allowing a pre-auth session token to persist after authentication. The application sets a session cookie before authentication and does not regenerate it upon successful login. To solve: Hijack a logged-in session by fixing the session ID prior to user authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt token signature spoofing using 'none' algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT token signature spoofing using 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs for stateless session management but fails to enforce proper signature verification. The JWT validation logic accepts 'alg: none', allowing tampering of token payload. To solve: Forge a JWT for user carlos with 'admin: true' and access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect on callback endpoint", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect on callback endpoint\", \"Lab Description\": \"The application uses OAuth for third-party login, but the redirect_uri parameter is not properly validated. This allows attackers to manipulate the OAuth flow and leak authorization codes or access tokens to malicious domains. To solve: Capture Carlos’s access token via redirect hijack and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via none algorithm in Authorization header", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in Authorization header\", \"Lab Description\": \"The application implements JWT-based authorization but does not properly validate the signing algorithm. It accepts tokens with the 'alg' field set to 'none', allowing attackers to craft unsigned tokens. The application processes JWTs sent via the 'Authorization: Bearer' header. To solve: forge a valid JWT for the user 'carlos' and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login endpoint", "target": "{\"Lab scenario\": \"Session fixation via login endpoint\", \"Lab Description\": \"The session ID is generated and sent to the client before authentication. Upon successful login, the same session ID is preserved instead of issuing a new one. This allows an attacker to fix a session ID for the victim. To solve: fix the session ID before Carlos logs in, then use the same session to access his account after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow redirection manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow redirection manipulation\", \"Lab Description\": \"The app uses OAuth implicit flow for authentication. The redirection URL validation is flawed, allowing attackers to steal tokens by injecting a malicious redirect_uri. The app accepts OAuth token from third-party providers and uses them to authenticate users via GET /oauth/callback. To solve: hijack Carlos’s token by crafting a malicious redirect_uri that sends the token to your server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API backend uses JWT for authentication, but fails to validate the signature properly when the `alg` header is manipulated. The application uses the token directly from the Authorization header to identify users without verifying the token's integrity. To solve: Forge a valid JWT token that grants admin access by bypassing the signature verification logic.", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in API Token Validation\", \"Lab Description\": \"The API backend uses JWT for authentication, but fails to validate the signature properly when the `alg` header is manipulated. The application uses the token directly from the Authorization header to identify users without verifying the token's integrity. To solve: Forge a valid JWT token that grants admin access by bypassing the signature verification logic.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The login flow uses a static session token passed in a GET parameter without proper regeneration after login. This allows a malicious actor to predetermine the victim's session ID. The application reflects the token into a cookie without regenerating it post-authentication. To solve: Fix the victim's session ID, force a login, and then reuse the session.", "target": "{\"Lab scenario\": \"Session Fixation in Login Token Parameter\", \"Lab Description\": \"The login flow uses a static session token passed in a GET parameter without proper regeneration after login. This allows a malicious actor to predetermine the victim's session ID. The application reflects the token into a cookie without regenerating it post-authentication. To solve: Fix the victim's session ID, force a login, and then reuse the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in token exchange endpoint", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Exchange Endpoint\", \"Lab Description\": \"The lab uses an OAuth provider for authentication but fails to validate the `redirect_uri` and `client_id` parameters. This enables an attacker to manipulate the authorization flow and exchange an arbitrary `code` for a victim’s token. To solve: Hijack an access token using a rogue redirect URI and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWTs for session management but fails to validate the token signature correctly when the `alg` header is set to 'none'. The backend simply decodes the payload and grants access without cryptographic verification. To solve: forge a valid token for the user 'admin' and access the /admin dashboard.", "target": "{\"Lab scenario\": \"JWT signature verification bypass in Authorization middleware\", \"Lab Description\": \"The application uses JWTs for session management but fails to validate the token signature correctly when the `alg` header is set to 'none'. The backend simply decodes the payload and grants access without cryptographic verification. To solve: forge a valid token for the user 'admin' and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: open redirect in oauth flow in redirect_uri parameter", "target": "{\"Lab scenario\": \"Open redirect in OAuth flow in redirect_uri parameter\", \"Lab Description\": \"This lab’s OAuth implementation contains an open redirect vulnerability in the `redirect_uri` parameter. The authorization server does not validate the redirect destination properly. To solve: steal the OAuth authorization code of another user by injecting a crafted redirect_uri that forwards the code to your attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login endpoint via cookie injection", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint via cookie injection\", \"Lab Description\": \"The login flow does not generate a new session upon authentication. This allows attackers to set a known session ID before login, then trick a victim into logging in with it. To solve: fixate a known session ID for Carlos and access /my-account using the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab contains a session fixation vulnerability in the login flow. The application reuses the session identifier set prior to authentication. The application sets a session cookie before login and does not regenerate it upon successful authentication. To solve: log in as Carlos by leveraging a fixed session identifier to hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt token tampering via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT token tampering via 'none' algorithm\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for user sessions but fails to enforce a valid signing algorithm. It accepts tokens signed with 'none', allowing users to forge tokens without a signature. To solve: Forge a JWT with 'admin' privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect in redirect_uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect in redirect_uri\", \"Lab Description\": \"This lab implements OAuth 2.0 login using a third-party provider but fails to validate redirect_uri properly. An attacker can inject an external redirect to exfiltrate tokens. To solve: Steal an access token by exploiting an open redirect and use it to access Carlos’s profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in REST-based login flow", "target": "{\"Lab scenario\": \"Session Fixation in REST-based login flow\", \"Lab Description\": \"This lab implements RESTful authentication via session cookies but fails to regenerate the session ID upon successful login. The application incorrectly trusts session state established prior to login. To solve: Fixate a session for Carlos and gain access to his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt none algorithm authentication bypass", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass\", \"Lab Description\": \"The app uses JSON Web Tokens for user sessions but fails to validate the JWT signature algorithm properly. It accepts unsigned tokens if 'alg' is set to 'none'. To solve: Modify the JWT to impersonate Carlos without a valid signature and access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration with Open Redirect in Callback", "target": "{\"Lab scenario\": \"OAuth Misconfiguration with Open Redirect in Callback\", \"Lab Description\": \"This app uses OAuth2 with an authorization code grant flow. However, the redirect_uri parameter is not properly validated, allowing redirection to attacker-controlled domains. To solve: Steal the authorization code of Carlos via a crafted OAuth login URL and gain access to his token-protected account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The login functionality improperly trusts pre-authentication session tokens. The application fails to issue a new session identifier upon successful login. To solve: fixate a session ID before login and use it to access Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering vulnerability in token verification endpoint", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in token verification endpoint\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for authentication but fails to validate the algorithm field securely. The server accepts tokens with the algorithm set to 'none', leading to authentication bypass. To solve: forge a valid JWT that grants admin access without a signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in implicit grant flow", "target": "{\"Lab scenario\": \"OAuth misconfiguration in implicit grant flow\", \"Lab Description\": \"The OAuth implementation uses the implicit flow with weak redirect URI validation, enabling token theft via open redirection. The application trusts redirect URIs from user input. To solve: craft a malicious redirect to steal Carlos’s access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token signature verification bypass in login endpoint", "target": "{\"Lab scenario\": \"JWT token signature verification bypass in login endpoint\", \"Lab Description\": \"The application's JWT authentication mechanism incorrectly trusts the 'alg' header provided by the client. The server uses a public key but does not enforce the expected algorithm. The application signs JWT tokens using RS256, but accepts tokens where the algorithm is changed to HS256. To solve: Craft a JWT with the alg header set to HS256 and sign it using the public key as the HMAC secret to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation vulnerability in oauth 2.0 callback handler", "target": "{\"Lab scenario\": \"Session fixation vulnerability in OAuth 2.0 callback handler\", \"Lab Description\": \"The OAuth implementation fails to generate a new session upon successful login. Attackers can craft a login URL with a fixed session ID and trick users into authenticating with it. The application binds the victim's account to an attacker-controlled session. To solve: Fixate a session for Carlos by generating a session ahead of time, initiating OAuth flow with that session, and capturing his authenticated session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: verbose error leakage in multi-step graphql auth process", "target": "{\"Lab scenario\": \"Verbose error leakage in multi-step GraphQL auth process\", \"Lab Description\": \"The application's GraphQL login mutation leaks detailed error messages that help enumerate valid users and token states. The GraphQL API responds differently when incorrect usernames or passwords are provided. To solve: Enumerate a valid user, retrieve a temporary token from a leaked error, and escalate access via an unprotected token mutation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login flow", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"This lab's login flow is vulnerable to session fixation due to the reuse of session identifiers before and after authentication. The application issues a session ID on initial visit and fails to regenerate it after successful login. To solve: hijack Carlos's session using a pre-set session ID to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab uses JSON Web Tokens for session management. It improperly supports the 'none' algorithm and accepts unsigned tokens. The application uses JWTs stored in a cookie to manage sessions but fails to validate signatures correctly. To solve: craft a token for Carlos using the none algorithm and access his profile.", "target": "{\"Lab scenario\": \"JWT Signature None Algorithm Bypass\", \"Lab Description\": \"This lab uses JSON Web Tokens for session management. It improperly supports the 'none' algorithm and accepts unsigned tokens. The application uses JWTs stored in a cookie to manage sessions but fails to validate signatures correctly. To solve: craft a token for Carlos using the none algorithm and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth2 Redirect URI Manipulation", "target": "{\"Lab scenario\": \"OAuth2 Redirect URI Manipulation\", \"Lab Description\": \"This lab integrates OAuth2 for social login but allows arbitrary redirection via open redirect in the redirect_uri parameter. The application does not validate the redirect URI domain properly. To solve: trick the app into redirecting to a malicious endpoint to steal Carlos’s token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The API uses JWT tokens for user authorization. However, it trusts the 'alg' header in incoming tokens, enabling algorithm confusion attacks. The application accepts tokens signed with 'none' algorithm, bypassing signature validation. To solve: Forge a token granting admin access and retrieve the admin panel contents.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in API authorization\", \"Lab Description\": \"The API uses JWT tokens for user authorization. However, it trusts the 'alg' header in incoming tokens, enabling algorithm confusion attacks. The application accepts tokens signed with 'none' algorithm, bypassing signature validation. To solve: Forge a token granting admin access and retrieve the admin panel contents.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The web application issues a session cookie to all visitors, including unauthenticated ones. However, it fails to rotate the session cookie upon successful login. This enables a session fixation attack. To solve: Fixate Carlos’s session cookie prior to login and hijack his session after authentication.", "target": "{\"Lab scenario\": \"Session fixation via unrotated session cookie after login\", \"Lab Description\": \"The web application issues a session cookie to all visitors, including unauthenticated ones. However, it fails to rotate the session cookie upon successful login. This enables a session fixation attack. To solve: Fixate Carlos’s session cookie prior to login and hijack his session after authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect and auto approval", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and auto approval\", \"Lab Description\": \"The application implements OAuth with a third-party identity provider but fails to validate the 'redirect_uri' parameter and automatically grants access tokens. This misconfiguration enables attackers to steal tokens via malicious redirects. To solve: Craft a malicious URL to capture Carlos’s OAuth token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in token validation logic", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation logic\", \"Lab Description\": \"The application uses JWTs to maintain session state but fails to validate the token's algorithm correctly. The backend blindly trusts the `alg` field in the token header. The application accepts unsigned tokens when the `alg` is set to `none`. To solve: Forge a valid token to access Carlos's account without knowing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session token in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session token in login flow\", \"Lab Description\": \"The application generates session IDs before authentication and does not invalidate them after login. A malicious user can set a known session ID, get the victim to use it, then hijack the session after they log in. To solve: Log in as Carlos by setting and reusing a fixed session cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit grant misconfiguration leaking access token via referer", "target": "{\"Lab scenario\": \"OAuth implicit grant misconfiguration leaking access token via referer\", \"Lab Description\": \"The app implements OAuth using the implicit flow, but includes a third-party analytics script that logs full Referer headers. Since access tokens are returned in the URL fragment, these tokens leak to third-party domains. To solve: Capture Carlos's leaked access token and use it to access his account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion attack in rest login api", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in REST login API\", \"Lab Description\": \"This lab’s login functionality accepts JWTs for authentication but fails to enforce proper algorithm validation. The application trusts tokens signed with 'none' algorithm. To solve: forge a JWT token impersonating the user 'carlos' and access their profile page via /api/profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in OAuth login flow", "target": "{\"Lab scenario\": \"Session fixation in OAuth login flow\", \"Lab Description\": \"This lab is vulnerable to session fixation during OAuth-based third-party login. The application fails to issue a new session token post-authentication. To solve: authenticate as yourself, fix a session ID, and force the victim (Carlos) to reuse the session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where blind 2fa brute-force with timing side-channel", "target": "{\"Lab scenario\": \"Blind 2FA brute-force with timing side-channel\", \"Lab Description\": \"The 2FA mechanism leaks processing time differences for valid codes. The backend takes longer to process correct digits. To solve: use timing analysis to brute-force Carlos's 6-digit 2FA code and access his account via /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT none algorithm tampering in API auth header", "target": "{\"Lab scenario\": \"JWT none algorithm tampering in API auth header\", \"Lab Description\": \"The API uses JWT-based authentication for sensitive endpoints but fails to validate the algorithm used. The application decodes and accepts tokens with `alg: none` without proper signature verification. To solve: Forge a valid JWT that grants admin privileges and access the protected /admin/report endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leak in redirect URI", "target": "{\"Lab scenario\": \"OAuth implicit flow token leak in redirect URI\", \"Lab Description\": \"The application integrates OAuth2 login using the implicit flow and allows open redirection through the `redirect_uri` parameter. The access token is leaked via URL fragment and reflected in the redirect. To solve: Intercept the OAuth flow and capture Carlos's token using a crafted redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via insecure session ID reuse in cookie", "target": "{\"Lab scenario\": \"Session fixation via insecure session ID reuse in cookie\", \"Lab Description\": \"The application allows users to set their own session ID via a cookie prior to authentication. Upon login, the session ID is not regenerated. An attacker can set a known session value and trick a victim into logging in using it. To solve: Fix a session ID and use it to hijack Carlos's session after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering using 'alg: none' in authorization header", "target": "{\"Lab scenario\": \"JWT tampering using 'alg: none' in Authorization header\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for user authentication and authorizes access via Bearer tokens. The backend relies on the JWT's `alg` field to determine signature verification. The application fails to enforce algorithm restrictions, allowing manipulation of the `alg` field to 'none' and bypassing signature verification. To solve: tamper with your JWT to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab's login system is vulnerable to session fixation. Session IDs are accepted via URL parameters and not regenerated upon successful login. The application trusts client-supplied session tokens, enabling an attacker to set a victim's session before login. To solve: set a session token for Carlos, trick him into logging in, then reuse his session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfiguration with open redirect", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration with open redirect\", \"Lab Description\": \"The OAuth implementation in this app uses the implicit grant flow without validating redirect URIs correctly. The app also accepts open redirects. By chaining these issues, an attacker can steal access tokens by injecting a malicious redirect URI. To solve: steal Carlos’s OAuth token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses JSON Web Tokens (JWT) to manage user sessions. However, it incorrectly validates the token signature due to the use of the 'none' algorithm. The application trusts the user-submitted token without verifying its integrity, enabling privilege escalation via token tampering. To solve: Forge a valid token that grants admin-level access and use it to access the admin panel.", "target": "{\"Lab scenario\": \"JWT token manipulation vulnerability in session authorization\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) to manage user sessions. However, it incorrectly validates the token signature due to the use of the 'none' algorithm. The application trusts the user-submitted token without verifying its integrity, enabling privilege escalation via token tampering. To solve: Forge a valid token that grants admin-level access and use it to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id in cookie management", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in cookie management\", \"Lab Description\": \"This lab uses a session cookie to maintain user authentication states. However, the session ID is set before login and is not regenerated upon successful authentication, allowing an attacker to fix a session for a victim before they log in. To solve: Fix a session for Carlos, make him log in, then reuse the session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party login endpoint", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login endpoint\", \"Lab Description\": \"This lab uses OAuth for federated login through a third-party provider. However, the redirect URI is not strictly validated, allowing an attacker to manipulate the redirection flow and gain access to a valid session. To solve: Exploit the redirect_uri parameter to hijack a session token from the OAuth flow and log in as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack in login flow", "target": "{\"Lab scenario\": \"Session fixation attack in login flow\", \"Lab Description\": \"The session management in this application fails to regenerate session identifiers after login. The application accepts pre-set session cookies from unauthenticated users and continues to use the same session after successful login. To solve: hijack a logged-in session by fixing the session token prior to user authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt signature bypass in authorization header", "target": "{\"Lab scenario\": \"JWT signature bypass in authorization header\", \"Lab Description\": \"The application uses JWTs for user authentication but fails to validate the signing algorithm securely. It accepts tokens signed using the 'none' algorithm without verifying the signature. The application trusts any decoded payload blindly. To solve: craft a forged JWT that impersonates the admin user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth token leakage in redirect URI handler", "target": "{\"Lab scenario\": \"OAuth token leakage in redirect URI handler\", \"Lab Description\": \"This application uses OAuth for authentication, but its redirect URI handler is improperly configured and does not validate the 'state' parameter. An attacker can perform an open redirect and intercept the access token. To solve: steal the OAuth token issued to Carlos and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The login endpoint accepts JWTs for authentication. The backend library fails to properly validate the 'alg' field, allowing an attacker to switch from a signed algorithm (e.g. HS256) to 'none'. The application trusts the JWT's payload without verifying its authenticity. To solve: Forge a JWT for user 'carlos' using the 'none' algorithm and access the My account page.", "target": "{\"Lab scenario\": \"JWT signature spoof via algorithm confusion in login API\", \"Lab Description\": \"The login endpoint accepts JWTs for authentication. The backend library fails to properly validate the 'alg' field, allowing an attacker to switch from a signed algorithm (e.g. HS256) to 'none'. The application trusts the JWT's payload without verifying its authenticity. To solve: Forge a JWT for user 'carlos' using the 'none' algorithm and access the My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable session tokens in login redirect", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens in login redirect\", \"Lab Description\": \"The application initializes session tokens before login and fails to regenerate them after successful authentication. The token remains fixed across the login flow. To solve: Set a known session ID before login, then force a victim (Carlos) to authenticate, hijack their session, and access the My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leaks authorization code via referer", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaks authorization code via Referer\", \"Lab Description\": \"The OAuth implementation leaks sensitive tokens through HTTP Referer headers. The app includes a third-party analytics script which causes unintentional leakage. To solve: Intercept the OAuth flow and extract Carlos’s authorization code from the Referer header when redirected to a malicious domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt secret key vulnerability in api authentication", "target": "{\"Lab scenario\": \"JWT secret key vulnerability in API authentication\", \"Lab Description\": \"The application's REST API uses JWTs for user authentication but fails to validate tokens securely. It uses a weak, guessable HMAC secret. The application trusts tokens even when re-signed with an attacker-supplied secret. To solve: Forge a valid admin JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application does not issue a new session ID upon successful login, allowing session fixation attacks. Attackers can pre-set session tokens and force victims to authenticate using them. To solve: Fixate a session for Carlos, then access his My account page while impersonating him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect manipulation in third-party login", "target": "{\"Lab scenario\": \"OAuth redirect manipulation in third-party login\", \"Lab Description\": \"The application uses OAuth for third-party authentication but fails to validate redirect URIs properly. This allows attackers to manipulate the flow and steal authorization codes. To solve: Hijack the OAuth code and log in as Carlos by exchanging the stolen token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature spoof via algorithm confusion", "target": "{\"Lab scenario\": \"JWT signature spoof via algorithm confusion\", \"Lab Description\": \"The application's authentication mechanism uses JWTs for session management. The backend accepts JWTs with the 'alg' header set to 'none', allowing attackers to forge tokens without a signature. The application trusts the contents of the JWT without verifying its signature when 'none' is used. To solve: Forge a JWT to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable session id", "target": "{\"Lab scenario\": \"Session fixation through predictable session ID\", \"Lab Description\": \"The login endpoint allows the attacker to specify a session ID in a cookie before logging in. The server reuses this session ID after authentication without regenerating it. This allows session fixation attacks. To solve: Set a session ID before Carlos logs in, then hijack his session using the fixed session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration with open redirect exploit", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect exploit\", \"Lab Description\": \"The application integrates OAuth for user login using a third-party provider. However, the OAuth flow includes an open redirect flaw that allows attackers to hijack authorization codes. The redirect_uri parameter is not properly validated, enabling token leakage. To solve: Hijack Carlos's OAuth login to obtain a valid access token and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The session management system issues session IDs before user authentication, but fails to rotate them upon successful login. This opens the door to session fixation attacks. The application allows setting the session cookie manually and does not regenerate a new session ID post-login. To solve: fixate a session for Carlos before he logs in, then hijack it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token algorithm manipulation", "target": "{\"Lab scenario\": \"JWT token algorithm manipulation\", \"Lab Description\": \"This lab uses JWTs for user sessions but fails to properly validate the signing algorithm. The application uses a 'none' algorithm without enforcing server-side signature verification. To solve: forge a valid JWT with 'alg' set to 'none' and impersonate the admin user to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration with open redirect flow", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect flow\", \"Lab Description\": \"This OAuth implementation allows redirection to arbitrary URLs after authentication due to missing state parameter validation. The 'redirect_uri' can be manipulated, enabling token theft via phishing. To solve: craft a malicious OAuth URL to intercept Carlos's token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature spoof via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature spoof via 'none' algorithm\", \"Lab Description\": \"This lab implements JSON Web Token (JWT) based authentication using insecure algorithm handling. The server accepts tokens signed using the 'none' algorithm, allowing attackers to forge valid tokens without knowing the secret key. The application verifies the JWT token from the Authorization header and grants access to sensitive resources without verifying the signature when 'alg' is set to 'none'. To solve: Craft a forged JWT for Carlos's account and access his profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab is vulnerable to session fixation due to predictable session ID issuance. The application assigns session IDs before login and does not regenerate them after successful authentication. The attacker can pre-define a session ID and trick the victim into using it. To solve: Fix a session ID before Carlos logs in and use it to hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth authorization code reuse", "target": "{\"Lab scenario\": \"OAuth authorization code reuse\", \"Lab Description\": \"This lab’s OAuth implementation allows reuse of authorization codes, violating the single-use principle. An attacker who intercepts an unused authorization code can reuse it to log in as the victim. The app fails to invalidate codes after the first use. To solve: Capture Carlos's OAuth code and reuse it to gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering with none algorithm", "target": "{\"Lab scenario\": \"JWT tampering with none algorithm\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. However, it accepts tokens signed using the 'none' algorithm without verification. The application decodes the token and grants access based on the embedded user role. To solve: Forge a JWT granting admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application sets session identifiers in the URL as query parameters after login. These session IDs are generated using predictable patterns. An attacker can fix a session ID for the victim and hijack the session post-login. To solve: Pre-set Carlos's session ID, trick him into logging in, then reuse the session to access his account.", "target": "{\"Lab scenario\": \"Session fixation through predictable session ID\", \"Lab Description\": \"The application sets session identifiers in the URL as query parameters after login. These session IDs are generated using predictable patterns. An attacker can fix a session ID for the victim and hijack the session post-login. To solve: Pre-set Carlos's session ID, trick him into logging in, then reuse the session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect_uri manipulation", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation\", \"Lab Description\": \"This lab uses OAuth for login via a third-party provider. However, the application does not properly validate the redirect_uri parameter, allowing attackers to steal authorization codes. To solve: Intercept a login request and modify the redirect_uri to an attacker-controlled server, then extract the authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's JWT implementation accepts insecure algorithms during token validation. Specifically, it fails to enforce signature verification when the 'alg' field is modified to 'none'. The application trusts any Authorization: Bearer token that decodes to a valid user structure. To solve: craft a forged JWT token with 'none' algorithm and impersonate the user 'carlos' to access their account page.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in Authorization header\", \"Lab Description\": \"The application's JWT implementation accepts insecure algorithms during token validation. Specifically, it fails to enforce signature verification when the 'alg' field is modified to 'none'. The application trusts any Authorization: Bearer token that decodes to a valid user structure. To solve: craft a forged JWT token with 'none' algorithm and impersonate the user 'carlos' to access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth implementation improperly validates the redirect_uri parameter in the authentication flow. An attacker can manipulate the redirect to inject a malicious OAuth token or leak the access_token. To solve: manipulate the OAuth redirect to impersonate a victim user (carlos) and access their profile.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in callback handler\", \"Lab Description\": \"The OAuth implementation improperly validates the redirect_uri parameter in the authentication flow. An attacker can manipulate the redirect to inject a malicious OAuth token or leak the access_token. To solve: manipulate the OAuth redirect to impersonate a victim user (carlos) and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in set-cookie header", "target": "{\"Lab scenario\": \"Session fixation in Set-Cookie header\", \"Lab Description\": \"The application assigns session identifiers via a predictable scheme before authentication. It does not regenerate the session ID post-login, allowing attackers to fixate a session ID and later hijack the session once the victim logs in. To solve: pre-assign a session ID, get the victim to log in, and then use the same session ID to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via insecure set-cookie handling in login endpoint", "target": "{\"Lab scenario\": \"Session fixation via insecure Set-Cookie handling in login endpoint\", \"Lab Description\": \"The login process fails to invalidate pre-authentication session cookies. The application sets the session ID before the user logs in, and that same session persists after successful authentication. To solve: Hijack Carlos's session by fixing a known session ID before authentication and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt token tampering with symmetric algorithm substitution", "target": "{\"Lab scenario\": \"JWT token tampering with symmetric algorithm substitution\", \"Lab Description\": \"This application uses JWTs for session management but supports algorithm substitution from RS256 to HS256 using a public key as the secret. To solve: Forge a valid JWT token for Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration with open redirect leading to token theft", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect leading to token theft\", \"Lab Description\": \"The OAuth redirect_uri is not properly validated, enabling redirection to arbitrary domains. The app leaks the OAuth access token in the URL fragment. To solve: Steal Carlos's access token via a crafted phishing link and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's JWT-based session handling is vulnerable to algorithm confusion. The server does not enforce strict verification of the signing algorithm. The application blindly trusts the `alg` field in the token. To solve: Forge a JWT token with algorithm `none` and escalate your privileges to admin to access the admin panel.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in session token\", \"Lab Description\": \"This lab's JWT-based session handling is vulnerable to algorithm confusion. The server does not enforce strict verification of the signing algorithm. The application blindly trusts the `alg` field in the token. To solve: Forge a JWT token with algorithm `none` and escalate your privileges to admin to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via insecure session regeneration", "target": "{\"Lab scenario\": \"Session fixation via insecure session regeneration\", \"Lab Description\": \"This lab's session handling mechanism is vulnerable to session fixation. The server does not regenerate session IDs after successful login, allowing an attacker to set the session ID beforehand. To solve: Fix a known session ID, trick the victim into logging in, and access their session to view the My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab simulates a misconfigured OAuth flow that allows redirect URI manipulation. The authorization server does not validate the redirect URI against a whitelist. To solve: Manipulate the redirect URI to intercept an OAuth authorization code and reuse it to log in as Carlos.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"This lab simulates a misconfigured OAuth flow that allows redirect URI manipulation. The authorization server does not validate the redirect URI against a whitelist. To solve: Manipulate the redirect URI to intercept an OAuth authorization code and reuse it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation. The server accepts session IDs from unauthenticated users and does not regenerate them upon login. The application stores the session ID in a cookie named sid. To solve: hijack Carlos's session and access his account page using a fixed session ID set before login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering due to missing signature validation", "target": "{\"Lab scenario\": \"JWT tampering due to missing signature validation\", \"Lab Description\": \"This lab is vulnerable to JWT tampering. The backend decodes JWTs without validating their signatures. JWTs are used for user authentication and passed via Authorization headers. To solve: forge a valid JWT identifying as Carlos and access his profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration: open redirect token theft", "target": "{\"Lab scenario\": \"OAuth misconfiguration: open redirect token theft\", \"Lab Description\": \"The lab contains an OAuth implementation with an open redirect in the redirect_uri parameter. The application does not validate redirect URIs strictly, enabling attackers to steal OAuth authorization codes. To solve: craft a malicious redirect_uri, capture Carlos's OAuth code, and exchange it for a token to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: graphql endpoint exposing jwt manipulation vulnerability", "target": "{\"Lab scenario\": \"GraphQL endpoint exposing JWT manipulation vulnerability\", \"Lab Description\": \"A GraphQL API implements authentication using a stateless JWT stored in the Authorization header. The server does not validate the token signature, allowing attackers to craft arbitrary JWTs to impersonate users. The application accepts unsigned tokens with alg=none and exposes a GraphQL endpoint. To solve: Forge a JWT as carlos and retrieve his user profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id in login workflow", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login workflow\", \"Lab Description\": \"This application assigns session IDs before login using a predictable UUIDv4 generator. After login, the same session ID remains active. The attacker can set their session ID and then trick the victim into using it. When the victim logs in, the attacker gains access to their session. To solve: Hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party login integration", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login integration\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but does not validate the returned access token properly. Attackers can reuse tokens issued to different clients. The misconfiguration stems from missing audience (aud) validation. To solve: Use a token issued for another app to log in as carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering via algorithm confusion in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in authorization header\", \"Lab Description\": \"This lab's authorization system uses JWT tokens for user identity and access control. The server validates tokens based on the algorithm specified in the token header without enforcing expected signing algorithms. The application naively accepts tokens signed with the 'none' algorithm. To solve: Craft a JWT token that impersonates the 'admin' user and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The lab's login mechanism assigns session tokens before authentication, but does not regenerate them afterward. The application uses cookies to maintain session state. An attacker can set a session ID before victim login, and it will be reused after successful authentication. To solve: Fixate Carlos's session ID and access his account page.", "target": "{\"Lab scenario\": \"Session fixation through predictable session token reuse\", \"Lab Description\": \"The lab's login mechanism assigns session tokens before authentication, but does not regenerate them afterward. The application uses cookies to maintain session state. An attacker can set a session ID before victim login, and it will be reused after successful authentication. To solve: Fixate Carlos's session ID and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's third-party OAuth implementation fails to properly validate redirect_uri parameters. The attacker can inject a malicious endpoint to steal access tokens via a crafted URL. The application uses OAuth for logging in users. To solve: Leak Carlos's token and use it to access his profile endpoint.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with token leakage via redirect_uri manipulation\", \"Lab Description\": \"This lab's third-party OAuth implementation fails to properly validate redirect_uri parameters. The attacker can inject a malicious endpoint to steal access tokens via a crafted URL. The application uses OAuth for logging in users. To solve: Leak Carlos's token and use it to access his profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering via none algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management, but fails to validate the signature algorithm securely. It accepts tokens with the 'alg' set to 'none' without verifying the signature. The application blindly trusts the decoded payload. To solve: Craft a tampered JWT token impersonating the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session tokens", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens\", \"Lab Description\": \"The application implements session tokens that are not regenerated upon login and are derived from predictable values such as timestamps or usernames. The attacker can fix a session identifier before login. To solve: Create a session for Carlos before he logs in, then access his account once he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab simulates a misconfigured OAuth flow where the application does not properly validate the redirect URI, allowing open redirection and token leakage. Attackers can supply their own redirect URI to capture access tokens issued to another user. To solve: Exploit the OAuth flow to steal an access token for user 'carlos' and use it to access their protected resources.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI trust\", \"Lab Description\": \"This lab simulates a misconfigured OAuth flow where the application does not properly validate the redirect URI, allowing open redirection and token leakage. Attackers can supply their own redirect URI to capture access tokens issued to another user. To solve: Exploit the OAuth flow to steal an access token for user 'carlos' and use it to access their protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements JWT-based authentication using the `alg` field in the token header to determine the algorithm dynamically. The application fails to properly validate this value, allowing an attacker to forge a valid token using `alg: none`. To solve: Forge a token that grants access to Carlos’s account using algorithm confusion.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in session validation\", \"Lab Description\": \"This lab implements JWT-based authentication using the `alg` field in the token header to determine the algorithm dynamically. The application fails to properly validate this value, allowing an attacker to forge a valid token using `alg: none`. To solve: Forge a token that grants access to Carlos’s account using algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab integrates third-party OAuth for login and uses the `redirect_uri` parameter to navigate users post-authentication. The application fails to validate this URI properly. To solve: Manipulate the redirect_uri to leak Carlos's OAuth token to your controlled server.", "target": "{\"Lab scenario\": \"OAuth redirect manipulation for token leakage\", \"Lab Description\": \"This lab integrates third-party OAuth for login and uses the `redirect_uri` parameter to navigate users post-authentication. The application fails to validate this URI properly. To solve: Manipulate the redirect_uri to leak Carlos's OAuth token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application assigns session tokens before authentication and does not generate a new session upon successful login. This allows an attacker to fix a session ID for a victim. To solve: Set a session ID, trick Carlos into logging in, then reuse the same session ID to access his account.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application assigns session tokens before authentication and does not generate a new session upon successful login. This allows an attacker to fix a session ID for a victim. To solve: Set a session ID, trick Carlos into logging in, then reuse the same session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature bypass in stateless session handling", "target": "{\"Lab scenario\": \"JWT signature bypass in stateless session handling\", \"Lab Description\": \"This lab demonstrates a JWT validation flaw caused by the server not verifying the token's algorithm. The application accepts JWTs as bearer tokens to manage authentication. However, it does not verify whether the signature algorithm is secure. To solve: Modify and forge a JWT token that grants access to Carlos’s protected account page without knowing the original secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration via open redirect abuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect abuse\", \"Lab Description\": \"The application integrates with a third-party OAuth provider for authentication. Due to poor redirect URI validation, it is vulnerable to open redirect abuse, allowing attackers to intercept authorization codes. To solve: Exploit the misconfigured redirect URI to capture Carlos's OAuth token and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session tokens", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens\", \"Lab Description\": \"This lab uses predictable session tokens vulnerable to fixation. The server does not regenerate session identifiers upon authentication, allowing an attacker to set a known token and trick a victim into using it. To solve: Set a session token, trick Carlos into logging in with it, then reuse the token to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to JWT tampering due to improper validation of the token algorithm field. The application accepts tokens signed using the 'none' algorithm without verifying their authenticity. To solve: forge a token that grants administrative access to Carlos’s account without knowing the signing secret.", "target": "{\"Lab scenario\": \"JWT signature spoof using 'none' algorithm\", \"Lab Description\": \"This lab is vulnerable to JWT tampering due to improper validation of the token algorithm field. The application accepts tokens signed using the 'none' algorithm without verifying their authenticity. To solve: forge a token that grants administrative access to Carlos’s account without knowing the signing secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth open redirect misconfiguration", "target": "{\"Lab scenario\": \"OAuth open redirect misconfiguration\", \"Lab Description\": \"The application uses a third-party OAuth provider for login, but does not properly validate redirect URIs. An attacker can exploit this to capture tokens or impersonate a user. To solve: manipulate the redirect_uri parameter to steal Carlos’s token and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via pre-set cookie", "target": "{\"Lab scenario\": \"Session fixation via pre-set cookie\", \"Lab Description\": \"The application fails to regenerate the session ID after authentication. An attacker can set a session ID for the victim, then trick them into logging in with it. This allows session hijacking. To solve: set a session cookie for Carlos, wait for login, then reuse it to access the account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab has an authentication mechanism based on JWTs which are stored and verified insecurely. The application decodes the JWT but fails to validate its signature. This allows a user to modify the token payload and gain unauthorized access. To solve: Tamper with a JWT to escalate privileges and access the admin panel.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization Header\", \"Lab Description\": \"This lab has an authentication mechanism based on JWTs which are stored and verified insecurely. The application decodes the JWT but fails to validate its signature. This allows a user to modify the token payload and gain unauthorized access. To solve: Tamper with a JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's session management is vulnerable due to the use of predictable session identifiers that are not regenerated after login. The application uses static session tokens which remain valid after authentication, allowing an attacker to fix a session ID for the victim. To solve: Set a known session ID, trick the victim into logging in, then hijack the session and access the account page.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in Cookie\", \"Lab Description\": \"This lab's session management is vulnerable due to the use of predictable session identifiers that are not regenerated after login. The application uses static session tokens which remain valid after authentication, allowing an attacker to fix a session ID for the victim. To solve: Set a known session ID, trick the victim into logging in, then hijack the session and access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration vulnerability in redirect_uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration vulnerability in redirect_uri\", \"Lab Description\": \"This lab features a misconfigured OAuth flow that fails to validate redirect_uri strictly, allowing an attacker to intercept tokens by exploiting open redirect behavior. The application integrates with an OAuth provider for authentication. To solve: Exploit the misconfiguration to capture Carlos’s access token via an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering to escalate privileges in API access", "target": "{\"Lab scenario\": \"JWT tampering to escalate privileges in API access\", \"Lab Description\": \"This lab features a RESTful API that uses JWTs for authentication. The backend accepts unsigned JWTs due to a missing verification check. The application uses the 'role' claim to restrict access to administrative endpoints. To solve: forge a JWT granting admin access and retrieve the sensitive data from the /admin/report endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login redirection flow", "target": "{\"Lab scenario\": \"Session fixation in login redirection flow\", \"Lab Description\": \"The application uses a session cookie to manage authenticated users, but fails to issue a new session identifier upon successful login. An attacker can preset a session ID for the victim, then trick them into authenticating with it. To solve: hijack Carlos’s session by forcing him to log in using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leakage via referrer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referrer header\", \"Lab Description\": \"The application uses an OAuth 2.0 implicit flow and places access tokens in the URL fragment. However, a redirect to a third-party domain causes the access token to leak via the Referer header. To solve: capture Carlos’s token via a malicious redirect and use it to access his data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's login mechanism uses JSON Web Tokens for session management but fails to validate the algorithm field properly. The application blindly trusts tokens signed with 'none' as valid. To solve: gain access to Carlos's account by forging a valid token without knowing the secret.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login endpoint\", \"Lab Description\": \"The application's login mechanism uses JSON Web Tokens for session management but fails to validate the algorithm field properly. The application blindly trusts tokens signed with 'none' as valid. To solve: gain access to Carlos's account by forging a valid token without knowing the secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab's OAuth implementation uses an implicit grant flow that leaks the access token in the redirect URI. The application does not sanitize or securely handle fragment identifiers, allowing an attacker to steal tokens via referer headers. To solve: extract Carlos's token and use it to access his protected profile.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via redirect URI\", \"Lab Description\": \"This lab's OAuth implementation uses an implicit grant flow that leaks the access token in the redirect URI. The application does not sanitize or securely handle fragment identifiers, allowing an attacker to steal tokens via referer headers. To solve: extract Carlos's token and use it to access his protected profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in change-password endpoint", "target": "{\"Lab scenario\": \"Session fixation vulnerability in change-password endpoint\", \"Lab Description\": \"The application assigns a new session cookie upon login, but the session is not properly regenerated after sensitive operations. This allows an attacker to fix a session ID before victim login. To solve: set a session for Carlos before he logs in and hijack his session after he changes his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Bypass in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authorization Header\", \"Lab Description\": \"This lab demonstrates a misconfigured JWT validation mechanism where the application fails to verify token signatures if the algorithm is set to 'none'. The application trusts JWTs from the Authorization header for user session validation. To solve: Forge a JWT for the admin user by modifying the algorithm to 'none' and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via Unvalidated Session ID in URL", "target": "{\"Lab scenario\": \"Session Fixation via Unvalidated Session ID in URL\", \"Lab Description\": \"This lab illustrates session fixation where the server accepts any arbitrary session ID supplied via a URL query parameter without validation or regeneration on login. The application does not issue a new session ID after successful authentication. To solve: Fix the victim's session ID before login, then log in with their credentials and access the profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab showcases an OAuth implementation vulnerable to an open redirect flaw in its redirect_uri parameter. The authorization server fails to strictly validate redirect URIs, allowing attackers to hijack authorization codes. To solve: Trick the victim into authorizing your application, intercept the OAuth code via a malicious redirect URI, and exchange it for an access token.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"This lab showcases an OAuth implementation vulnerable to an open redirect flaw in its redirect_uri parameter. The authorization server fails to strictly validate redirect URIs, allowing attackers to hijack authorization codes. To solve: Trick the victim into authorizing your application, intercept the OAuth code via a malicious redirect URI, and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via 'none' algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in Authorization header\", \"Lab Description\": \"This lab implements stateless authentication using JWTs passed in the Authorization header. The backend fails to validate the algorithm used in the JWT header. The application trusts any token as long as the signature structure is present. To solve: Forge a JWT that grants access to Carlos’s account using the 'none' algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where open redirect abuse in oauth flow for token theft", "target": "{\"Lab scenario\": \"Open redirect abuse in OAuth flow for token theft\", \"Lab Description\": \"The lab uses OAuth to authenticate users via a third-party provider. The 'redirect_uri' parameter is not properly validated, allowing attackers to intercept the access token after successful login. To solve: Capture the access token issued to Carlos by abusing the redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation using static token in cookie", "target": "{\"Lab scenario\": \"Session fixation using static token in cookie\", \"Lab Description\": \"The app issues session cookies with predictable static values tied to usernames, and fails to regenerate sessions on login. Attackers can set a valid cookie before login, leading to session fixation. To solve: Fix Carlos’s session, then use the token to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The backend uses JSON Web Tokens (JWT) for stateless authentication and incorrectly accepts tokens signed with 'none' algorithm. The application fails to validate the token signature properly, allowing attackers to forge tokens. To solve: Forge an admin JWT and access the /admin/dashboard endpoint.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in REST API authentication\", \"Lab Description\": \"The backend uses JSON Web Tokens (JWT) for stateless authentication and incorrectly accepts tokens signed with 'none' algorithm. The application fails to validate the token signature properly, allowing attackers to forge tokens. To solve: Forge an admin JWT and access the /admin/dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session ids", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"The application assigns session tokens before authentication and fails to regenerate them post-login. This allows attackers to fix a session ID for the victim and hijack the session. To solve: Fix a session for Carlos, let him authenticate, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth flow accepts a wide range of redirect URIs without strict validation. This allows an attacker to inject malicious domains to capture authorization codes. To solve: Exploit the open redirect to capture Carlos’s OAuth token and log in as him.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The OAuth flow accepts a wide range of redirect URIs without strict validation. This allows an attacker to inject malicious domains to capture authorization codes. To solve: Exploit the open redirect to capture Carlos’s OAuth token and log in as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements JWT-based session management using insecure algorithm validation. The application accepts JWTs from authenticated users, but fails to enforce proper signature validation. To solve: Tamper with the JWT to impersonate Carlos and access his account.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm\", \"Lab Description\": \"This lab implements JWT-based session management using insecure algorithm validation. The application accepts JWTs from authenticated users, but fails to enforce proper signature validation. To solve: Tamper with the JWT to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab's session management is flawed due to predictable session tokens assigned before login. The application issues a session cookie before authentication and fails to regenerate it after successful login. To solve: Fixate a known session on Carlos and reuse it post-login to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow redirect uri manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow redirect URI manipulation\", \"Lab Description\": \"This lab uses OAuth 2.0 implicit flow, but its redirect URI validation is poorly implemented. The redirect URI can be manipulated to leak the access token to an attacker-controlled domain. To solve: Steal Carlos’s access token using an open redirect and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion leading to authentication bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to authentication bypass\", \"Lab Description\": \"The authentication mechanism uses JSON Web Tokens (JWTs) for session management. However, it fails to verify the signing algorithm properly, allowing an attacker to forge tokens by switching the algorithm to 'none'. The application accepts unsigned JWTs if the alg field is tampered. To solve: forge a valid token and access Carlos's account page without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The lab uses OAuth 2.0's implicit flow to authorize users but fails to validate the redirect URI correctly. This enables an attacker to steal tokens by redirecting users to an attacker-controlled domain. To solve: harvest a valid access token and use it to impersonate Carlos.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"The lab uses OAuth 2.0's implicit flow to authorize users but fails to validate the redirect URI correctly. This enables an attacker to steal tokens by redirecting users to an attacker-controlled domain. To solve: harvest a valid access token and use it to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The application issues session cookies before authentication and does not regenerate the session ID after login. An attacker can set a known session ID for a victim, then hijack the session post-login. To solve: fixate Carlos's session and use it after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion attack in stateless api authentication", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in stateless API authentication\", \"Lab Description\": \"This lab's stateless JWT-based authentication system is vulnerable to an algorithm confusion flaw. The server uses RS256 for verifying JWTs, but it accepts tokens signed with HS256 if manipulated correctly. The application blindly trusts the 'alg' field in the JWT header. To solve: forge a valid JWT that grants access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application fails to invalidate the user's session upon successful login, making it vulnerable to session fixation. The attacker can set a session identifier before the victim logs in, and the application continues using the same session after authentication. To solve: Fix a session ID, trick Carlos to log in, and then use the session ID to access his account.", "target": "{\"Lab scenario\": \"Session fixation in classic web login flow\", \"Lab Description\": \"The application fails to invalidate the user's session upon successful login, making it vulnerable to session fixation. The attacker can set a session identifier before the victim logs in, and the application continues using the same session after authentication. To solve: Fix a session ID, trick Carlos to log in, and then use the session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leaking tokens via redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking tokens via redirect\", \"Lab Description\": \"The OAuth implementation of this app leaks access tokens via an open redirect vulnerability after authorization. The redirect_uri parameter is not properly validated, allowing attackers to capture tokens sent via URL fragments. To solve: Trick the authorization server into sending Carlos's token to your controlled endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in login authentication", "target": "{\"Lab scenario\": \"JWT algorithm confusion in login authentication\", \"Lab Description\": \"The application uses JWTs to manage user sessions. However, it improperly trusts the 'alg' field from user-supplied tokens without validating the signature. The application accepts tokens where 'alg' is set to 'none'. To solve: forge a valid token for the admin user and access the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where open redirect flaw in oauth redirect_uri parameter", "target": "{\"Lab scenario\": \"Open redirect flaw in OAuth redirect_uri parameter\", \"Lab Description\": \"This lab implements OAuth login flow using a third-party provider. The `redirect_uri` parameter is improperly validated, allowing redirection to arbitrary domains. To solve: intercept the OAuth flow and steal an access token via redirection to a malicious endpoint under your control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in authentication process", "target": "{\"Lab scenario\": \"Session fixation vulnerability in authentication process\", \"Lab Description\": \"The login endpoint does not issue a new session identifier after successful authentication. This allows an attacker to fix a session ID before login and hijack the user session afterward. To solve: fix a session ID, get the victim to log in using it, then access their account using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a RESTful login flow with 2FA implemented through a token verification endpoint. However, the token is bound to the session in an insecure way. The application reuses the 2FA token without revalidating the session context, allowing an attacker to hijack a victim's session post-authentication. To solve: Fixate your session during pre-authentication and inject a valid 2FA token generated by the victim to gain access to their account.", "target": "{\"Lab scenario\": \"Session fixation via MFA token reuse in REST login flow\", \"Lab Description\": \"The application uses a RESTful login flow with 2FA implemented through a token verification endpoint. However, the token is bound to the session in an insecure way. The application reuses the 2FA token without revalidating the session context, allowing an attacker to hijack a victim's session post-authentication. To solve: Fixate your session during pre-authentication and inject a valid 2FA token generated by the victim to gain access to their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth implicit flow token theft via redirect uri manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow token theft via redirect URI manipulation\", \"Lab Description\": \"The application integrates with a third-party OAuth provider using the implicit flow, but does not properly validate redirect URIs. This allows an attacker to inject a malicious redirection target and capture the access token from the URL fragment. To solve: Exploit the OAuth flow to extract Carlos’s access token and use it to access his private user dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt signature validation bypass using 'none' algorithm", "target": "{\"Lab scenario\": \"JWT signature validation bypass using 'none' algorithm\", \"Lab Description\": \"The application uses JWT for session management. However, it incorrectly accepts tokens with the 'alg':'none' header and skips signature verification. An attacker can forge a token and impersonate any user. To solve: Create a tampered token that impersonates the admin user and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: This lab demonstrates session fixation in the authentication process. The application assigns session IDs before authentication and fails to invalidate them post-login. The application reuses existing session cookies instead of issuing new ones after login. To solve: Fixate a valid session ID before login and hijack Carlos's authenticated session.", "target": "{\"Lab scenario\": \"Session fixation via cookie injection\", \"Lab Description\": \"This lab demonstrates session fixation in the authentication process. The application assigns session IDs before authentication and fails to invalidate them post-login. The application reuses existing session cookies instead of issuing new ones after login. To solve: Fixate a valid session ID before login and hijack Carlos's authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's JWT validation mechanism trusts the 'alg' header from incoming tokens. The application accepts unsigned tokens if the alg is set to 'none'. To solve: Forge a JWT token with alg: none and impersonate the user Carlos.", "target": "{\"Lab scenario\": \"JWT algorithm confusion with none header\", \"Lab Description\": \"This lab's JWT validation mechanism trusts the 'alg' header from incoming tokens. The application accepts unsigned tokens if the alg is set to 'none'. To solve: Forge a JWT token with alg: none and impersonate the user Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application exposes access tokens via the Referer header due to improper redirection. Tokens are embedded in URLs and leak during third-party image or script loads. To solve: Capture Carlos's access token from the Referer header and use it to access his account via the OAuth /userinfo endpoint.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header\", \"Lab Description\": \"The application exposes access tokens via the Referer header due to improper redirection. Tokens are embedded in URLs and leak during third-party image or script loads. To solve: Capture Carlos's access token from the Referer header and use it to access his account via the OAuth /userinfo endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via pre-auth token in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Auth Token in Login Flow\", \"Lab Description\": \"This application fails to invalidate session tokens on login. An attacker can fix a session ID prior to authentication and hijack the victim’s session post-login. The application sets a session ID before verifying credentials but does not regenerate it. To solve: hijack Carlos’s session after login using a pre-fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab uses JWTs for access control but improperly validates the signature algorithm. The server does not enforce signed JWTs when the 'alg' header is set to 'none'. To solve: forge a token impersonating Carlos and access his account page.", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in Authorization Header\", \"Lab Description\": \"This lab uses JWTs for access control but improperly validates the signature algorithm. The server does not enforce signed JWTs when the 'alg' header is set to 'none'. To solve: forge a token impersonating Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates with an OAuth provider but fails to properly validate redirect URIs during the authorization code exchange. An attacker can manipulate this to steal authorization codes. To solve: steal Carlos’s OAuth token and access his account.", "target": "{\"Lab scenario\": \"OAuth2 Redirect URI Manipulation in Authorization Code Flow\", \"Lab Description\": \"The application integrates with an OAuth provider but fails to properly validate redirect URIs during the authorization code exchange. An attacker can manipulate this to steal authorization codes. To solve: steal Carlos’s OAuth token and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where graphql session fixation via login mutation", "target": "{\"Lab scenario\": \"GraphQL session fixation via login mutation\", \"Lab Description\": \"The application's GraphQL login mutation allows session fixation due to improper session regeneration. Upon successful authentication, the application does not invalidate the existing session ID, enabling attackers to predetermine a victim’s session. To solve: Hijack Carlos's session by setting a known session cookie prior to login and reuse it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The REST API accepts JWTs but fails to enforce strong algorithm validation. An attacker can forge a token by setting the algorithm to 'none' and bypass signature verification. To solve: Log in as the admin user by crafting a JWT with alg=none and access the protected admin dashboard.", "target": "{\"Lab scenario\": \"JWT algorithm confusion with none in REST API\", \"Lab Description\": \"The REST API accepts JWTs but fails to enforce strong algorithm validation. An attacker can forge a token by setting the algorithm to 'none' and bypass signature verification. To solve: Log in as the admin user by crafting a JWT with alg=none and access the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow token leakage via referrer", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referrer\", \"Lab Description\": \"The application uses OAuth implicit flow with access tokens returned in the URL fragment. Due to a misconfiguration, the redirect URI includes external domains, and the token leaks via the HTTP Referer header. To solve: Intercept Carlos’s token by injecting a malicious redirect_uri and reuse the token to access /user-info as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation. The application assigns session tokens before authentication and accepts them post-login without regeneration. An attacker can trick a victim into using a known session ID, then log in with that session and hijack their account. To solve: Hijack Carlos's session and access his My Account page.", "target": "{\"Lab scenario\": \"Session Fixation in login endpoint with pre-set cookies\", \"Lab Description\": \"This lab is vulnerable to session fixation. The application assigns session tokens before authentication and accepts them post-login without regeneration. An attacker can trick a victim into using a known session ID, then log in with that session and hijack their account. To solve: Hijack Carlos's session and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering in authorization header using none algorithm", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header using None algorithm\", \"Lab Description\": \"The application uses JWTs for session management but fails to enforce the use of strong algorithms. The server accepts tokens signed with 'none', effectively disabling signature verification. To solve: Modify a JWT to impersonate Carlos and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in callback endpoint", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in callback endpoint\", \"Lab Description\": \"The application integrates OAuth but doesn't properly validate the redirect_uri. This allows an attacker to redirect tokens to an attacker-controlled domain. To solve: Leak Carlos’s OAuth token using a crafted authorization URL, then use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in token verification endpoint", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification endpoint\", \"Lab Description\": \"The application uses JWT for authentication but improperly trusts the 'alg' field in incoming tokens. It accepts 'none' algorithm tokens without verifying their signature. The application exposes a /verify endpoint that decodes the token without validating its authenticity. To solve: Forge a JWT with 'alg':'none' to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation through predictable token parameter", "target": "{\"Lab scenario\": \"Session fixation through predictable token parameter\", \"Lab Description\": \"The application supports login sessions via a GET token parameter that is reflected as a session ID cookie. This behavior is vulnerable to session fixation. The attacker can set a predefined token value and trick the victim into using it. To solve: Fix a session ID and get Carlos to log in using it, then access /my-account as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application implements OAuth 2.0 login with a misconfigured redirect_uri and access_token reuse logic. An attacker can obtain a valid token meant for a benign user and replay it against privileged APIs without scope validation. To solve: Replay Carlos’s access token against the /account-info endpoint.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse\", \"Lab Description\": \"The application implements OAuth 2.0 login with a misconfigured redirect_uri and access_token reuse logic. An attacker can obtain a valid token meant for a benign user and replay it against privileged APIs without scope validation. To solve: Replay Carlos’s access token against the /account-info endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session token in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session Token in Login Flow\", \"Lab Description\": \"The application uses predictable session tokens set before authentication. Upon successful login, the session identifier is not rotated, allowing session fixation. An attacker can force a victim to use a known session and hijack it after login. To solve: Fixate the session, get the victim to log in, and access their account using the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none bypass in rest login flow", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in REST Login Flow\", \"Lab Description\": \"The application uses JWT for authentication but accepts tokens with the 'alg' field set to 'none'. This enables an attacker to forge tokens and gain unauthorized access. To solve: Craft a JWT with alg=none and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This application uses OAuth to delegate authentication. The 'redirect_uri' parameter is not properly validated, allowing attackers to redirect authorization codes to attacker-controlled endpoints. To solve: Steal Carlos's token via crafted redirect and access his account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration with Open Redirect Token Theft\", \"Lab Description\": \"This application uses OAuth to delegate authentication. The 'redirect_uri' parameter is not properly validated, allowing attackers to redirect authorization codes to attacker-controlled endpoints. To solve: Steal Carlos's token via crafted redirect and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application improperly reuses session identifiers during the authentication process. Instead of generating a new session after a successful login, it maintains the same session ID issued pre-authentication. This flaw enables session fixation attacks where a malicious actor sets a session ID for the victim before they log in. To solve: Fixate Carlos’s session, log him in using the fixed session, then access his My Account page.", "target": "{\"Lab scenario\": \"Session fixation via login flow cookie persistence\", \"Lab Description\": \"The application improperly reuses session identifiers during the authentication process. Instead of generating a new session after a successful login, it maintains the same session ID issued pre-authentication. This flaw enables session fixation attacks where a malicious actor sets a session ID for the victim before they log in. To solve: Fixate Carlos’s session, log him in using the fixed session, then access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering due to 'none' algorithm vulnerability", "target": "{\"Lab scenario\": \"JWT tampering due to 'none' algorithm vulnerability\", \"Lab Description\": \"This application accepts JWTs to authorize user access but fails to verify the signature if the algorithm is set to 'none'. This allows an attacker to forge arbitrary tokens and impersonate any user. To solve: Forge a JWT for Carlos by modifying the algorithm to 'none' and injecting the token into an authenticated request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with open redirect in redirect_uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect in redirect_uri\", \"Lab Description\": \"The OAuth implementation allows arbitrary redirection via a vulnerable redirect_uri parameter, enabling an attacker to hijack the authorization code. To solve: Craft a malicious redirect_uri that steals the authorization code for Carlos’s account, then exchange the code for an access token and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session token in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session Token in Login Flow\", \"Lab Description\": \"The application initializes a session token before login and fails to regenerate it post-authentication. The session token is predictable and does not get invalidated upon user login. To solve: Force a victim user (Carlos) to use a session ID you control, then access their account post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm attack in api authorization", "target": "{\"Lab scenario\": \"JWT None Algorithm Attack in API Authorization\", \"Lab Description\": \"The application's backend validates JWTs but does not enforce the algorithm used for signature verification. It trusts the 'alg' value in the JWT header. To solve: Forge a valid token for Carlos using 'none' algorithm and access his user dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration - trusting unvalidated redirect uris", "target": "{\"Lab scenario\": \"OAuth Misconfiguration - Trusting Unvalidated Redirect URIs\", \"Lab Description\": \"The OAuth provider implementation improperly accepts arbitrary redirect_uri values during the authorization flow. This allows malicious manipulation of the final redirect destination. To solve: Hijack Carlos’s OAuth session to leak his token via open redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Attack in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm Attack in Authorization Header\", \"Lab Description\": \"This lab uses JWT for session management with a misconfigured JWT verification logic. The application decodes the JWT token provided in the Authorization header and fails to verify the signature when the 'alg' header is set to 'none'. To solve: forge a valid-looking JWT token for the admin user using 'none' algorithm and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application handles session identifiers insecurely via GraphQL mutations. It fails to regenerate session tokens upon successful login. An attacker can fix their session ID, trick a victim into logging in, and then hijack the authenticated session. To solve: fix a session ID before victim login, capture their session, and access their dashboard.", "target": "{\"Lab scenario\": \"Session Fixation via Login Flow in GraphQL\", \"Lab Description\": \"The application handles session identifiers insecurely via GraphQL mutations. It fails to regenerate session tokens upon successful login. An attacker can fix their session ID, trick a victim into logging in, and then hijack the authenticated session. To solve: fix a session ID before victim login, capture their session, and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth access token leakage via referrer header", "target": "{\"Lab scenario\": \"OAuth Access Token Leakage via Referrer Header\", \"Lab Description\": \"This lab involves a misconfigured OAuth flow leaking access tokens via the Referrer header. The application redirects users to a third-party analytics service after OAuth login, inadvertently exposing access tokens in the URL. To solve: leak an access token, capture it via a controlled endpoint, and use it to access the victim's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT authentication bypass via 'none' algorithm in token validation logic", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm in token validation logic\", \"Lab Description\": \"The application uses JWTs for session management, but fails to enforce algorithm verification during token validation. The vulnerable backend accepts unsigned tokens when the 'alg' header is set to 'none'. To solve: Access Carlos's account without possessing his valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-authenticated cookie reuse in login flow", "target": "{\"Lab scenario\": \"Session fixation via pre-authenticated cookie reuse in login flow\", \"Lab Description\": \"This app allows session cookies to be set prior to login and fails to regenerate them upon successful authentication. The backend trusts any existing session ID, enabling an attacker to fixate a victim’s session. To solve: Access Carlos’s account by presetting a session and tricking him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application integrates with an OAuth provider but does not properly validate the 'redirect_uri' parameter. This enables an attacker to hijack the authorization code and impersonate users. To solve: Hijack Carlos’s OAuth token by manipulating the redirect URI.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in authorization flow\", \"Lab Description\": \"This application integrates with an OAuth provider but does not properly validate the 'redirect_uri' parameter. This enables an attacker to hijack the authorization code and impersonate users. To solve: Hijack Carlos’s OAuth token by manipulating the redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation vulnerability in login flow using REST API", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow using REST API\", \"Lab Description\": \"The application uses REST API endpoints to manage login sessions but does not regenerate session tokens upon authentication. This introduces a session fixation vulnerability. The application continues to use the pre-login session identifier after successful login, allowing an attacker to predetermine a session for the victim. To solve: Hijack Carlos's session after forcing him to authenticate using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token algorithm confusion in GraphQL authorization header", "target": "{\"Lab scenario\": \"JWT token algorithm confusion in GraphQL authorization header\", \"Lab Description\": \"This application implements authentication using JWT tokens passed in the Authorization header. The server fails to enforce proper JWT signing algorithm, making it vulnerable to 'alg=none' attacks. The GraphQL resolver accepts unsigned tokens if the algorithm is altered to 'none'. To solve: Tamper a valid JWT to impersonate Carlos and retrieve his sensitive GraphQL data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in implicit flow token leakage via URL fragment", "target": "{\"Lab scenario\": \"OAuth misconfiguration in implicit flow token leakage via URL fragment\", \"Lab Description\": \"The application integrates third-party login via OAuth 2.0 implicit flow. The access token is exposed in the URL fragment after redirection and is not securely handled by the client. An attacker can capture the token via open redirect or history sniffing. To solve: Steal Carlos's access token and access his profile via the third-party login endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion leading to token forgery", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to token forgery\", \"Lab Description\": \"This lab features a JWT-based authentication system vulnerable to algorithm confusion. The application accepts tokens signed using either 'HS256' or 'RS256', but fails to validate the token signature correctly when the algorithm is manipulated. To solve: Forge a valid token as admin and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation through vulnerable redirect handler", "target": "{\"Lab scenario\": \"Session fixation through vulnerable redirect handler\", \"Lab Description\": \"This lab contains a login flow where session identifiers are not properly regenerated upon authentication. The redirect endpoint also reflects unvalidated session tokens. To solve: Fix a session before login, then authenticate as a victim and reuse the session to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration allowing token reuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse\", \"Lab Description\": \"This lab demonstrates a misconfigured OAuth implementation where access tokens are not bound to client identifiers, allowing a user to reuse tokens across client applications. To solve: Reuse an OAuth token issued for your own account to impersonate Carlos via a vulnerable client.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses an outdated session management mechanism where the session ID is not regenerated upon login. The application accepts session tokens from unauthenticated users and associates them to authenticated sessions without invalidating them. To solve: hijack Carlos's session after fixing a session for him and access his account.", "target": "{\"Lab scenario\": \"Session Fixation in legacy session management\", \"Lab Description\": \"This lab uses an outdated session management mechanism where the session ID is not regenerated upon login. The application accepts session tokens from unauthenticated users and associates them to authenticated sessions without invalidating them. To solve: hijack Carlos's session after fixing a session for him and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in public-key algorithm confusion", "target": "{\"Lab scenario\": \"JWT tampering in public-key algorithm confusion\", \"Lab Description\": \"This application uses a JWT-based authentication mechanism with RS256 algorithm. However, it incorrectly treats the RSA public key as an HMAC secret, allowing token forgery. To solve: forge a JWT token impersonating the admin user and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri handling", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI handling\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to properly validate redirect URIs. This allows attackers to leak authorization codes to a malicious domain. To solve: steal Carlos's OAuth authorization code using a manipulated redirect URI and gain access to his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT for session management but does not enforce algorithm validation. Instead, it accepts user-defined algorithms from tokens. The application accepts tokens with 'alg' set to 'none', allowing attackers to forge valid tokens without a signature. To solve: forge a valid admin JWT token and access the /admin dashboard.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in REST login endpoint\", \"Lab Description\": \"The application uses JWT for session management but does not enforce algorithm validation. Instead, it accepts user-defined algorithms from tokens. The application accepts tokens with 'alg' set to 'none', allowing attackers to forge valid tokens without a signature. To solve: forge a valid admin JWT token and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via static session identifier in soap login", "target": "{\"Lab scenario\": \"Session fixation via static session identifier in SOAP login\", \"Lab Description\": \"The application exposes a SOAP-based login mechanism and sets a session ID before user authentication. This session ID is not regenerated after login, allowing an attacker to fix a session ID and force a victim to use it. To solve: fix a session ID and log in as carlos using this fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth token leakage via redirect_uri parameter manipulation", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect_uri parameter manipulation\", \"Lab Description\": \"The application uses OAuth 2.0 for SSO login but fails to validate the `redirect_uri` parameter during the authorization flow. An attacker can manipulate this parameter to exfiltrate the victim's access token. To solve: capture Carlos’s access token by abusing the open redirect and access /my-account as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in OAuth login flow", "target": "{\"Lab scenario\": \"Session fixation in OAuth login flow\", \"Lab Description\": \"The application implements a third-party OAuth provider for authentication but mishandles session regeneration during login. The vulnerable behavior arises when an attacker fixes a session ID before the OAuth authorization process and the same session is reused after login. To solve: Hijack Carlos’s session by fixing your session ID and making Carlos authenticate over OAuth with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT key confusion in asymmetric to symmetric downgrade", "target": "{\"Lab scenario\": \"JWT key confusion in asymmetric to symmetric downgrade\", \"Lab Description\": \"This app uses asymmetric JWT verification (RS256) for session authentication, but fails to validate the signature algorithm properly. If an attacker changes the JWT algorithm to HS256, the server incorrectly uses the public key as a symmetric secret. To solve: Modify the JWT algorithm to HS256 and sign it with the public key to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application implements an inactivity-based session timeout mechanism, but includes a hidden GraphQL keep-alive endpoint that can be abused to extend sessions silently. The attacker can keep Carlos's session alive by calling the internal ping endpoint while in possession of his session ID. To solve: Hijack Carlos’s session, maintain it alive using the hidden endpoint, and access /my-account.", "target": "{\"Lab scenario\": \"Session timeout bypass via hidden keep-alive endpoint\", \"Lab Description\": \"This application implements an inactivity-based session timeout mechanism, but includes a hidden GraphQL keep-alive endpoint that can be abused to extend sessions silently. The attacker can keep Carlos's session alive by calling the internal ping endpoint while in possession of his session ID. To solve: Hijack Carlos’s session, maintain it alive using the hidden endpoint, and access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation vulnerability in login flow via fixed session ID in cookie header", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login flow via fixed session ID in cookie header\", \"Lab Description\": \"The REST-based login flow accepts a session ID from the client before authentication and reuses it after successful login. The application fails to issue a new session identifier after login. To solve: Fixate a session ID and use it to hijack the authenticated session of the victim after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authorize users via a REST API. However, the server accepts unsigned JWTs when the algorithm is set to 'none'. To solve: Craft a tampered JWT that impersonates the admin user and access the protected endpoint.", "target": "{\"Lab scenario\": \"JWT tampering via 'alg: none' in Authorization header\", \"Lab Description\": \"The application uses JWTs to authorize users via a REST API. However, the server accepts unsigned JWTs when the algorithm is set to 'none'. To solve: Craft a tampered JWT that impersonates the admin user and access the protected endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect_uri allowing code interception", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri allowing code interception\", \"Lab Description\": \"The application uses OAuth 2.0 for SSO authentication with a misconfigured redirect URI pattern. An attacker can inject a malicious redirect URI to intercept the authorization code. To solve: Steal Carlos’s OAuth authorization code and exchange it for a token to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt tampering via none algorithm in login api", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in login API\", \"Lab Description\": \"This application uses JWTs for session management but improperly allows the 'alg' header to be tampered with. The backend incorrectly trusts tokens signed with 'none' algorithm. To solve: Forge a token using alg: none to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This app uses OAuth 2.0 implicit flow but returns the access token in the URL fragment, which gets logged insecurely due to verbose frontend debug logging. To solve: Steal Carlos’s access token from the client-side logs and access his account using the leaked token.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaks access token\", \"Lab Description\": \"This app uses OAuth 2.0 implicit flow but returns the access token in the URL fragment, which gets logged insecurely due to verbose frontend debug logging. To solve: Steal Carlos’s access token from the client-side logs and access his account using the leaked token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth session fixation in authorization code flow", "target": "{\"Lab scenario\": \"OAuth Session Fixation in Authorization Code Flow\", \"Lab Description\": \"The OAuth implementation in this app allows session fixation during the authorization flow. The application fails to invalidate pre-existing sessions before completing the OAuth login. To solve: Fixate a session using a crafted OAuth URL, then hijack the victim’s session after authorization.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in admin role verification", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Admin Role Verification\", \"Lab Description\": \"The application uses JWTs for role-based access control but fails to enforce a specific algorithm. This allows token forgery via 'alg' manipulation. To solve: Forge a JWT using 'none' or 'HS256' and escalate privileges to access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL Blind MFA Bypass via Timing Attack", "target": "{\"Lab scenario\": \"GraphQL Blind MFA Bypass via Timing Attack\", \"Lab Description\": \"The GraphQL API verifies MFA tokens but leaks timing differences based on token correctness. The application delays responses when the correct prefix is guessed. To solve: Infer valid MFA token character-by-character using response delays, then authenticate as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via predictable token reuse", "target": "{\"Lab scenario\": \"Session fixation via predictable token reuse\", \"Lab Description\": \"The application implements session-based authentication but fails to regenerate session tokens after login. The session remains valid even if the user logs in from a previously fixed session. To solve: hijack Carlos's session by fixing a known session ID before login and accessing his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion via 'none' value", "target": "{\"Lab scenario\": \"JWT algorithm confusion via 'none' value\", \"Lab Description\": \"The server incorrectly accepts JWTs signed with the 'none' algorithm due to a misconfigured library. It doesn't verify the signature, allowing token manipulation. To solve: forge a JWT token for the user 'admin' with alg=none and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth token leakage via redirect misconfiguration", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect misconfiguration\", \"Lab Description\": \"This lab uses OAuth2 for third-party login. However, the redirection URI is not properly validated, allowing token leakage via a malicious redirect endpoint. To solve: steal Carlos’s token using a crafted redirect_uri and access the account resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in legacy auth redirect endpoint", "target": "{\"Lab scenario\": \"Session Fixation in legacy auth redirect endpoint\", \"Lab Description\": \"This lab's authentication mechanism improperly allows reuse of fixed session identifiers via a deprecated `/legacy-auth` endpoint. The application trusts the session cookie even before the login is completed. To solve: Fixate a valid session identifier for Carlos and access their account page post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt authentication bypass via 'none' algorithm", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm\", \"Lab Description\": \"The application uses JWTs to authenticate users, but fails to verify the algorithm properly. If the algorithm is set to 'none', the signature is not validated, allowing attackers to forge arbitrary tokens. To solve: Forge a token granting admin access and view the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth code leakage via referer header to third-party", "target": "{\"Lab scenario\": \"OAuth code leakage via Referer header to third-party\", \"Lab Description\": \"The OAuth implementation leaks authorization codes via the Referer header when redirecting users back to a third-party site. This flaw allows attackers to intercept OAuth codes and obtain access tokens tied to victim accounts. To solve: Intercept Carlos’s OAuth code and reuse it to hijack their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's REST API session management mechanism is vulnerable to session fixation through path parameter injection. The application assigns session tokens based on user-supplied session IDs if present. To solve the lab, hijack Carlos's session and access his account page using a crafted session ID.", "target": "{\"Lab scenario\": \"Session fixation via path parameter injection in REST API\", \"Lab Description\": \"This lab's REST API session management mechanism is vulnerable to session fixation through path parameter injection. The application assigns session tokens based on user-supplied session IDs if present. To solve the lab, hijack Carlos's session and access his account page using a crafted session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt key confusion attack using 'none' algorithm in graphql api", "target": "{\"Lab scenario\": \"JWT key confusion attack using 'none' algorithm in GraphQL API\", \"Lab Description\": \"This GraphQL API-based authentication system fails to validate JWT signature algorithms properly. The backend accepts tokens signed with 'none' algorithm, assuming any token with valid claims is trustworthy. To solve the lab, forge a JWT token impersonating the admin and access the GraphQL /me endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth token reuse via insecure redirect_uri in authorization server", "target": "{\"Lab scenario\": \"OAuth token reuse via insecure redirect_uri in authorization server\", \"Lab Description\": \"This OAuth implementation uses an insecure wildcard pattern in redirect_uri validation. This allows an attacker to reuse a stolen authorization code at their own domain. To solve the lab, intercept Carlos’s OAuth code and exchange it at your controlled redirect_uri to get his access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login session token", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login session token\", \"Lab Description\": \"The application issues a session token before authentication, which is reused after login without regeneration. This allows session fixation attacks if an attacker sets the session cookie for the victim before login. The application accepts session cookies from unauthenticated users and does not reissue them after successful login. To solve: Fixate a session and gain unauthorized access to Carlos's account using the same token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion vulnerability in token verification logic", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in token verification logic\", \"Lab Description\": \"This application relies on JWTs to authorize users, but does not enforce a strong algorithm during validation. The backend accepts JWTs with the 'alg' set to 'none', trusting the payload without verification. To solve: Forge a JWT with alg:none and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect_uri validation logic", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation logic\", \"Lab Description\": \"The OAuth flow in this application allows arbitrary redirect URIs due to improper validation, enabling token redirection to attacker-controlled domains. The app does not validate the redirect_uri against a strict whitelist. To solve: Steal an access token from the OAuth provider by injecting a rogue redirect URI and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's session management is vulnerable to session fixation attacks. The application uses a predictable session ID mechanism. The attacker can set a session ID during login, forcing the user to use the attacker's session ID after login. To solve the lab, the attacker must hijack the session and access the victim's account page.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in Login endpoint\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation attacks. The application uses a predictable session ID mechanism. The attacker can set a session ID during login, forcing the user to use the attacker's session ID after login. To solve the lab, the attacker must hijack the session and access the victim's account page.\", \"Vulnerability name\": \"Session Management\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a JWT Manipulation scenario. Example: JWT Token manipulation in User Authentication", "target": "{\"Lab scenario\": \"JWT Token manipulation in User Authentication\", \"Lab Description\": \"This lab's authentication mechanism is vulnerable to JWT manipulation. The application does not properly validate the signature of the JWT token. To solve the lab, the attacker needs to modify the JWT payload and bypass the authentication to access a protected resource.\", \"Vulnerability name\": \"JWT Manipulation\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a OAuth Misconfiguration lab where oauth misconfiguration and access token manipulation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration and Access Token Manipulation\", \"Lab Description\": \"The OAuth implementation in this lab has a misconfiguration where the access token is not properly validated. This allows the attacker to exchange a manipulated access token for unauthorized access to protected resources. To solve the lab, the attacker needs to tamper with the token and bypass OAuth authentication.\", \"Vulnerability name\": \"OAuth Misconfiguration\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses a predictable session ID generation mechanism and does not regenerate sessions upon successful authentication. This allows an attacker to fixate a victim's session. The application leaks session tokens in login responses, and session IDs remain valid across login attempts. To solve: Hijack Carlos's session by fixating a known session and accessing /account/carlos.", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Token in REST Login Flow\", \"Lab Description\": \"The application uses a predictable session ID generation mechanism and does not regenerate sessions upon successful authentication. This allows an attacker to fixate a victim's session. The application leaks session tokens in login responses, and session IDs remain valid across login attempts. To solve: Hijack Carlos's session by fixating a known session and accessing /account/carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Bypass in GraphQL Login", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL Login\", \"Lab Description\": \"The application's JWT implementation accepts tokens signed with the 'none' algorithm, making it vulnerable to token forgery. JWTs are used for GraphQL session authentication. To solve: Forge an admin JWT using the 'none' algorithm and access the admin dashboard via a GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token theft via referer leak", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Theft via Referer Leak\", \"Lab Description\": \"The application implements OAuth implicit flow and includes a misconfigured redirect URI that leaks the access token via the Referer header. An attacker can craft a malicious endpoint to capture the token. To solve: Leak Carlos's access token using an exploit page and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation through insecure cookie management in login endpoint", "target": "{\"Lab scenario\": \"Session fixation through insecure cookie management in login endpoint\", \"Lab Description\": \"This lab's session management logic allows an attacker to fix a session ID before login. The application accepts external session identifiers via URL and sets them before authentication. To solve: hijack Carlos's session after forcing them to authenticate with a known session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab uses JWTs for authentication but verifies tokens based on the 'alg' header provided in the token itself, allowing an attacker to bypass signature checks. To solve: forge a valid token that grants access to Carlos's account.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification header\", \"Lab Description\": \"This lab uses JWTs for authentication but verifies tokens based on the 'alg' header provided in the token itself, allowing an attacker to bypass signature checks. To solve: forge a valid token that grants access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allows token reuse via open redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse via open redirect\", \"Lab Description\": \"This OAuth-based login flow has an open redirect on the callback endpoint, enabling token capture and reuse. The token is not scoped to specific redirect URIs. To solve: steal Carlos's access token and use it to access the /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's JWT validation mechanism fails to properly verify the signing algorithm, allowing attackers to spoof tokens by injecting their own public key. The vulnerable backend accepts tokens with user-defined headers and improperly trusts attacker-supplied keys. To solve: Forge a valid JWT to impersonate Carlos and access /account-info.", "target": "{\"Lab scenario\": \"JWT signature confusion vulnerability in REST API login endpoint\", \"Lab Description\": \"The application's JWT validation mechanism fails to properly verify the signing algorithm, allowing attackers to spoof tokens by injecting their own public key. The vulnerable backend accepts tokens with user-defined headers and improperly trusts attacker-supplied keys. To solve: Forge a valid JWT to impersonate Carlos and access /account-info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The SOAP-based login API does not invalidate existing session identifiers after successful login. This enables an attacker to fix a session ID before authentication. To solve: Fix a session for Carlos, log him in using the fixed ID, then reuse it to access /user-profile.", "target": "{\"Lab scenario\": \"Session fixation in SOAP login handler\", \"Lab Description\": \"The SOAP-based login API does not invalidate existing session identifiers after successful login. This enables an attacker to fix a session ID before authentication. To solve: Fix a session for Carlos, log him in using the fixed ID, then reuse it to access /user-profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in graphql mutation token issuance", "target": "{\"Lab scenario\": \"OAuth misconfiguration in GraphQL mutation token issuance\", \"Lab Description\": \"The OAuth implementation uses the implicit grant flow without validating the redirect_uri. This allows an attacker to intercept access tokens by injecting a malicious redirection endpoint. To solve: Capture Carlos’s token via redirection abuse and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: graphql api session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"GraphQL API session fixation vulnerability in login flow\", \"Lab Description\": \"The GraphQL API-based authentication system is vulnerable to session fixation due to insecure token re-use. The application does not invalidate old session tokens after login. To solve the lab, hijack Carlos’s session after login using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in admin verification logic", "target": "{\"Lab scenario\": \"JWT algorithm confusion in admin verification logic\", \"Lab Description\": \"The application uses JWTs to control access to the admin panel. It mistakenly allows clients to specify the JWT algorithm, trusting unsigned tokens when 'alg' is set to 'none'. To solve the lab, forge an admin JWT to access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses an OAuth2 provider to authenticate users. Due to lack of state parameter validation and open redirect behavior, the login flow is vulnerable to authorization code injection. To solve the lab, log in as Carlos by exploiting the redirect_uri parameter.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login provider redirect flow\", \"Lab Description\": \"This lab uses an OAuth2 provider to authenticate users. Due to lack of state parameter validation and open redirect behavior, the login flow is vulnerable to authorization code injection. To solve the lab, log in as Carlos by exploiting the redirect_uri parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where graphql endpoint leaking jwt secret key", "target": "{\"Lab scenario\": \"GraphQL endpoint leaking JWT secret key\", \"Lab Description\": \"The application exposes a GraphQL API endpoint with introspection enabled and verbose error messages. A mutation leaks internal secrets including the JWT signing key through improper error handling. The application accepts tampered tokens signed with the leaked key. To solve: forge a valid admin JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in OAuth redirect handling", "target": "{\"Lab scenario\": \"Session fixation in OAuth redirect handling\", \"Lab Description\": \"This app integrates with an external OAuth provider for login. The application does not validate that the `state` parameter maps to the initiating session, enabling session fixation. To solve: hijack a victim’s session by initiating login and forcing a reused session ID through manipulated OAuth flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses stateless JWT tokens for user authentication. The JWT validation logic improperly accepts unsigned tokens with the 'none' algorithm. To solve: forge a token impersonating the admin user with alg=none and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT none algorithm acceptance\", \"Lab Description\": \"The application uses stateless JWT tokens for user authentication. The JWT validation logic improperly accepts unsigned tokens with the 'none' algorithm. To solve: forge a token impersonating the admin user with alg=none and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session id predictable in soap-based login service", "target": "{\"Lab scenario\": \"Session ID predictable in SOAP-based login service\", \"Lab Description\": \"The application provides a legacy SOAP login service that generates sessions using predictable UUIDv4. By analyzing responses, an attacker can brute-force valid sessions. To solve: predict Carlos’s session token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion in token validation endpoint", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation endpoint\", \"Lab Description\": \"The application uses JWT for authentication and accepts tokens via the Authorization header. The backend attempts to verify the JWT signature using the algorithm specified in the token's header. This results in a classic 'algorithm confusion' flaw, where changing the algorithm to 'none' skips signature validation entirely. To solve: craft a tampered JWT granting access to the administrator’s dashboard without the original signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login handler", "target": "{\"Lab scenario\": \"Session fixation via login handler\", \"Lab Description\": \"This application fails to regenerate the session ID after successful login. An attacker can set a known session ID before login and later trick the victim to authenticate, thereby gaining control over the authenticated session. To solve: hijack Carlos's session by pre-setting a session cookie and waiting for him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allows token reuse across clients", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse across clients\", \"Lab Description\": \"The application uses OAuth2 for login via a third-party identity provider. However, the backend fails to validate the 'aud' (audience) claim in ID tokens, allowing a token from another client app to be reused in this one. To solve: use a token issued to another client to access the target protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWT for authentication and accepts tokens via the Authorization header. The backend attempts to verify the JWT signature using the algorithm specified in the token's header. This results in a classic 'algorithm confusion' flaw, where changing the algorithm to 'none' skips signature validation entirely. To solve: craft a tampered JWT granting access to the administrator’s dashboard without the original signing key.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation endpoint\", \"Lab Description\": \"The application uses JWT for authentication and accepts tokens via the Authorization header. The backend attempts to verify the JWT signature using the algorithm specified in the token's header. This results in a classic 'algorithm confusion' flaw, where changing the algorithm to 'none' skips signature validation entirely. To solve: craft a tampered JWT granting access to the administrator’s dashboard without the original signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via login handler", "target": "{\"Lab scenario\": \"Session fixation via login handler\", \"Lab Description\": \"This application fails to regenerate the session ID after successful login. An attacker can set a known session ID before login and later trick the victim to authenticate, thereby gaining control over the authenticated session. To solve: hijack Carlos's session by pre-setting a session cookie and waiting for him to log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth2 for login via a third-party identity provider. However, the backend fails to validate the 'aud' (audience) claim in ID tokens, allowing a token from another client app to be reused in this one. To solve: use a token issued to another client to access the target protected resource.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse across clients\", \"Lab Description\": \"The application uses OAuth2 for login via a third-party identity provider. However, the backend fails to validate the 'aud' (audience) claim in ID tokens, allowing a token from another client app to be reused in this one. To solve: use a token issued to another client to access the target protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via legacy cookie reuse in rest login flow", "target": "{\"Lab scenario\": \"Session Fixation via Legacy Cookie Reuse in REST Login Flow\", \"Lab Description\": \"The application implements session tracking using a legacy session cookie `sid`, which is not regenerated on successful login. This flaw allows session fixation if a valid but unauthenticated session ID is issued prior to login. To solve: hijack Carlos’s session by fixing the session ID before he logs in, then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This application uses JWTs for GraphQL-based authentication. It parses the `Authorization: Bearer` token without validating the `alg` parameter securely. The server allows tokens signed with `alg: none`, enabling tampering. To solve: forge a JWT token for the user 'carlos' and access his profile.", "target": "{\"Lab scenario\": \"JWT Signature Confusion via alg None in GraphQL Auth\", \"Lab Description\": \"This application uses JWTs for GraphQL-based authentication. It parses the `Authorization: Bearer` token without validating the `alg` parameter securely. The server allows tokens signed with `alg: none`, enabling tampering. To solve: forge a JWT token for the user 'carlos' and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The OAuth flow implemented by this app uses a hybrid response type (code token) and redirects the user to a fixed redirect_uri vulnerable to open redirect attacks. To solve: intercept Carlos’s authorization code and complete the login flow using it.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Hybrid Flow\", \"Lab Description\": \"The OAuth flow implemented by this app uses a hybrid response type (code token) and redirects the user to a fixed redirect_uri vulnerable to open redirect attacks. To solve: intercept Carlos’s authorization code and complete the login flow using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in Cookie-based Authentication", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-based Authentication\", \"Lab Description\": \"The application improperly reuses existing session identifiers during login. The session ID issued before authentication remains valid after successful login. To solve: Fixate a session for the victim, trick them into logging in, then hijack the session to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion in bearer authentication", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Bearer Authentication\", \"Lab Description\": \"The application trusts the 'alg' header of JWTs and does not validate the token signature when 'alg' is set to 'none'. To solve: Forge a JWT token with alg set to 'none' and impersonate the victim by injecting their username into the payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in implicit grant flow", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Implicit Grant Flow\", \"Lab Description\": \"The OAuth provider exposes the access token in the redirect URI fragment and the relying party accepts it without origin validation. To solve: Steal an access token issued to Carlos using a malicious redirect_uri and use it to access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's session management system accepts session tokens via a URL path parameter, creating a critical session fixation risk. An attacker can craft a link with a preset session token and trick users into using it. The application ties sessions only by token without verifying ownership. To solve: hijack Carlos's session using a fixation attack and access his My Account page.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in REST session management path parameter\", \"Lab Description\": \"The application's session management system accepts session tokens via a URL path parameter, creating a critical session fixation risk. An attacker can craft a link with a preset session token and trick users into using it. The application ties sessions only by token without verifying ownership. To solve: hijack Carlos's session using a fixation attack and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering vulnerability in graphql authorization header", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in GraphQL Authorization Header\", \"Lab Description\": \"This GraphQL API uses JWTs for authentication but does not validate the 'alg' field properly. When 'alg' is set to 'none', the backend fails to verify the signature. The JWT is passed via the Authorization header and decoded without proper validation. To solve: forge a token with 'alg:none' and access Carlos's user data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration vulnerability in SOAP-based login flow via Referer leakage", "target": "{\"Lab scenario\": \"OAuth misconfiguration vulnerability in SOAP-based login flow via Referer leakage\", \"Lab Description\": \"The application uses a SOAP endpoint for federated OAuth login. Upon successful login, the OAuth token is embedded in a redirect URL. However, sensitive tokens are leaked via the Referer header when redirected to third-party resources. An attacker can steal the token if they inject external content into the flow. To solve: steal Carlos’s OAuth token via Referer leakage and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token tampering in session management", "target": "{\"Lab scenario\": \"JWT token tampering in session management\", \"Lab Description\": \"This lab contains a vulnerability where the server doesn't properly validate or invalidate JWT tokens. An attacker can manipulate the JWT's payload to escalate privileges or impersonate another user. The objective is to hijack Carlos’s account by tampering with the JWT token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leading to privilege escalation", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to privilege escalation\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where a poorly implemented OAuth flow grants unauthorized access to protected resources. The goal is to exploit this misconfiguration to escalate privileges and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Authentication lab for: session fixation attack in session management", "target": "{\"Lab scenario\": \"Session fixation attack in session management\", \"Lab Description\": \"This lab contains a session fixation vulnerability where the application does not properly regenerate session IDs on login. An attacker can fix a session ID and hijack a user's session. The goal is to fix a session ID and gain access to Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in SAML-based SSO REST Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in SAML-based SSO REST Login Flow\", \"Lab Description\": \"The application implements Single Sign-On (SSO) using SAML for authentication across multiple services. The session ID is issued before the SAML assertion is validated. The application incorrectly associates the session with the user after the assertion is processed but does not regenerate the session ID. To solve: Fixate a session before authentication and hijack Carlos’s session after SSO completes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Kid Header Injection with Public Key Retrieval (JWK endpoint)", "target": "{\"Lab scenario\": \"JWT Kid Header Injection with Public Key Retrieval (JWK endpoint)\", \"Lab Description\": \"The application uses JWT tokens for user authentication, validating them using a public key fetched from a JWK endpoint. However, the server uses the 'kid' field from the JWT header without validation, allowing injection and remote key usage. To solve: Forge a valid token for the 'admin' user using a tampered kid header pointing to your controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: SOAP API Session ID Leakage in Verbose Error Logs", "target": "{\"Lab scenario\": \"SOAP API Session ID Leakage in Verbose Error Logs\", \"Lab Description\": \"The application exposes a legacy SOAP API for admin actions. When an invalid session ID is supplied, the server includes recent session logs in the verbose SOAP Fault response. An attacker can extract valid session IDs from leaked logs and hijack the session. To solve: Extract Carlos’s session ID from a SOAP fault and use it to access the admin SOAP action.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via unchanged session id in oauth authorization flow", "target": "{\"Lab scenario\": \"Session Fixation via Unchanged Session ID in OAuth Authorization Flow\", \"Lab Description\": \"This lab simulates an application integrating with an external OAuth provider. Due to improper session regeneration, session fixation is possible. The application retains the session cookie before and after the OAuth flow without assigning a new session ID. To solve: Fixate your own session and trick the victim into completing the OAuth login flow, then hijack their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm authentication bypass in rest api", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass in REST API\", \"Lab Description\": \"The application uses JWT for user authentication in its REST API. However, it incorrectly trusts unsigned JWTs when the 'alg' header is set to 'none'. To solve: Forge a valid JWT with no signature and access the admin API endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where soap api session timeout misconfiguration enabling forced browsing", "target": "{\"Lab scenario\": \"SOAP API Session Timeout Misconfiguration Enabling Forced Browsing\", \"Lab Description\": \"The backend SOAP interface allows session tokens to remain valid beyond logout due to a misconfigured timeout and improper invalidation. The application fails to destroy server-side session references. To solve: Log out your session, capture the token, and reuse it to force-browse into the protected SOAP endpoint for Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-set session cookie in rest login endpoint", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Set Session Cookie in REST Login Endpoint\", \"Lab Description\": \"The application exposes a REST-based login flow where a session identifier is issued before authentication and accepted after login. The vulnerable logic accepts any preset session ID and binds it to the user after successful login. To solve: Fixate Carlos's session ID before login and hijack his session post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The GraphQL API uses JSON Web Tokens (JWT) for authentication. However, the backend improperly trusts tokens with `alg: none`, leading to full impersonation. To solve: Forge a JWT for Carlos using the 'none' algorithm and access his profile data via GraphQL.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in Authorization Header (GraphQL API)\", \"Lab Description\": \"The GraphQL API uses JSON Web Tokens (JWT) for authentication. However, the backend improperly trusts tokens with `alg: none`, leading to full impersonation. To solve: Forge a JWT for Carlos using the 'none' algorithm and access his profile data via GraphQL.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth 2.0 for login with an open redirect vulnerability in its redirect_uri parameter. This allows attackers to intercept authorization codes. To solve: Use the redirect_uri to intercept Carlos’s authorization code and exchange it for his token.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect in Redirect URI\", \"Lab Description\": \"The application uses OAuth 2.0 for login with an open redirect vulnerability in its redirect_uri parameter. This allows attackers to intercept authorization codes. To solve: Use the redirect_uri to intercept Carlos’s authorization code and exchange it for his token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application's RESTful session handling is vulnerable to session fixation. The session token is accepted from a URL path parameter before login. The application binds the session to the authenticated user without regenerating the token. To solve: hijack Carlos's session using a fixed token.", "target": "{\"Lab scenario\": \"REST API Session Fixation via Path Parameter\", \"Lab Description\": \"This application's RESTful session handling is vulnerable to session fixation. The session token is accepted from a URL path parameter before login. The application binds the session to the authenticated user without regenerating the token. To solve: hijack Carlos's session using a fixed token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL JWT Forgery via None Algorithm", "target": "{\"Lab scenario\": \"GraphQL JWT Forgery via None Algorithm\", \"Lab Description\": \"This application's GraphQL login mutation issues a JWT token signed with HS256 but fails to enforce algorithm validation. To solve: forge a JWT using 'alg':'none' to impersonate the admin user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth access token leak via referrer header in soap api", "target": "{\"Lab scenario\": \"OAuth Access Token Leak via Referrer Header in SOAP API\", \"Lab Description\": \"This application's OAuth implicit flow exposes the access token via fragment in redirect_uri. The token is leaked through the Referrer header when redirected to a SOAP endpoint with inline content. To solve: extract and reuse Carlos's leaked token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation vulnerability in rest authentication flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in REST authentication flow\", \"Lab Description\": \"This lab's session management implementation allows attackers to fixate a session ID before login. The application issues a session cookie pre-authentication and continues to use it post-login without rotating it. This allows session hijacking via fixation. To solve: Fixate a session ID, get the victim to log in, and access their account using the fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via algorithm confusion in graphql-based login", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in GraphQL-based login\", \"Lab Description\": \"The JWT authentication mechanism is flawed due to unsafe handling of the 'alg' claim in the token header. The server accepts unsigned JWTs if the 'alg' is set to 'none'. To solve: Forge an unsigned JWT for the admin user and access the protected GraphQL admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI validation\", \"Lab Description\": \"The OAuth provider fails to properly validate redirect URIs, allowing attackers to steal authorization codes. The vulnerable client accepts subdomains of allowed redirect URIs, which can be exploited for code hijacking. To solve: Create a malicious subdomain to capture the authorization code for carlos and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL Session Fixation in Login Token Exchange", "target": "{\"Lab scenario\": \"GraphQL Session Fixation in Login Token Exchange\", \"Lab Description\": \"The application's GraphQL login mutation is vulnerable to session fixation. The application issues a session token before authentication and does not invalidate it after login. To solve: exploit session fixation to hijack Carlos's session and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Tampering in Authorization Header", "target": "{\"Lab scenario\": \"JWT Token Tampering in Authorization Header\", \"Lab Description\": \"The application's JWT authentication relies solely on the 'alg' header value and fails to enforce a server-side signature check. This allows the use of 'none' algorithm to forge valid tokens. To solve: forge a token that impersonates carlos and access the /admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The OAuth flow uses the implicit grant type with an insecure open redirect vulnerability in the redirect_uri. This enables stealing the access token via a malicious redirect endpoint. To solve: exploit the redirect_uri to capture Carlos's access token and access his profile.", "target": "{\"Lab scenario\": \"OAuth Implicit Grant Open Redirect in Callback Handler\", \"Lab Description\": \"The OAuth flow uses the implicit grant type with an insecure open redirect vulnerability in the redirect_uri. This enables stealing the access token via a malicious redirect endpoint. To solve: exploit the redirect_uri to capture Carlos's access token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login workflow via manipulated session token", "target": "{\"Lab scenario\": \"Session fixation in login workflow via manipulated session token\", \"Lab Description\": \"The application uses a fixed session token before and after login, allowing session fixation. The session ID is issued before authentication and persists after login without regeneration. The application reflects the session cookie in verbose logs, enabling pre-auth hijacking. To solve: Fixate a session token pre-login and use it post-login to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion with none bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion with none bypass\", \"Lab Description\": \"The application uses JWT for session authentication. It verifies JWT tokens using a symmetric secret and allows tokens with alg=none due to misconfiguration. An attacker can craft a token with alg=none and no signature to impersonate any user. To solve: Forge a JWT with alg=none and access Carlos's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect_uri manipulation for code leakage", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation for code leakage\", \"Lab Description\": \"The application implements OAuth login via a third-party provider. However, the redirect_uri parameter is vulnerable to manipulation, allowing an attacker to intercept the authorization code. To solve: Exploit the redirect_uri parameter to leak the OAuth code and complete login as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth session fixation in sso redirect flow", "target": "{\"Lab scenario\": \"OAuth session fixation in SSO redirect flow\", \"Lab Description\": \"The application uses OAuth for single sign-on (SSO) integration with a third-party provider. The vulnerable component mishandles session identifiers across redirection endpoints. The application fails to regenerate the session token after completing OAuth login, allowing an attacker to fixate the session ID prior to victim login. To solve: hijack Carlos's session by setting a fixed session cookie prior to their OAuth login flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm tampering in SOAP login endpoint", "target": "{\"Lab scenario\": \"JWT algorithm tampering in SOAP login endpoint\", \"Lab Description\": \"This lab’s SOAP-based login API relies on JWT tokens to manage user sessions. The server incorrectly trusts the algorithm field of incoming tokens, allowing attackers to bypass signature validation by switching to the 'none' algorithm. To solve: generate a JWT token with alg=none and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: GraphQL session fixation via token injection", "target": "{\"Lab scenario\": \"GraphQL session fixation via token injection\", \"Lab Description\": \"The application uses GraphQL for authentication and session establishment. It insecurely accepts a user-provided token through a GraphQL mutation and sets it as the session token without validation. To solve: fixate a session token for Carlos by injecting a token value pre-login, then use that token to hijack the session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Legacy session fixation vulnerability in REST login flow", "target": "{\"Lab scenario\": \"Legacy session fixation vulnerability in REST login flow\", \"Lab Description\": \"The application's login flow does not invalidate existing session cookies when a user logs in. The session token is preserved from the unauthenticated state to the authenticated state. This allows an attacker to fixate a session ID and trick a victim into authenticating with it. The application sets session cookies before login and reuses them post-authentication. To solve: Fixate a session ID, trick Carlos into logging in with it, then use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's SOAP-based authentication endpoint uses JWTs with a vulnerable `kid` header, allowing injection of a local file path. The application uses `fs.readFileSync(kid)` to load the secret key. To solve: Forge a valid JWT for Carlos using key injection via the `kid` header and access his account.", "target": "{\"Lab scenario\": \"JWT kid header injection in SOAP authentication handler\", \"Lab Description\": \"The application's SOAP-based authentication endpoint uses JWTs with a vulnerable `kid` header, allowing injection of a local file path. The application uses `fs.readFileSync(kid)` to load the secret key. To solve: Forge a valid JWT for Carlos using key injection via the `kid` header and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth with implicit flow for single-page applications. It trusts any `redirect_uri` that matches the domain but fails to validate origin during `postMessage`. An attacker can inject a malicious frame to steal tokens. To solve: Steal Carlos's access token using a crafted frame and use it to access his account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in client-side implicit grant flow\", \"Lab Description\": \"The application uses OAuth with implicit flow for single-page applications. It trusts any `redirect_uri` that matches the domain but fails to validate origin during `postMessage`. An attacker can inject a malicious frame to steal tokens. To solve: Steal Carlos's access token using a crafted frame and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow with cookie reuse", "target": "{\"Lab scenario\": \"Session fixation in login flow with cookie reuse\", \"Lab Description\": \"The application contains a session fixation vulnerability within its authentication logic. It allows unauthenticated users to assign session identifiers that are not reset during login. The application accepts a session cookie before login and continues using it post-authentication. To solve: Fixate your session before login, authenticate as Carlos, and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWT tokens for user authentication. It does not properly validate the token signature if the 'alg' header is set to 'none'. The application trusts the token without signature verification. To solve: Craft a JWT for Carlos with alg=none and access his account.", "target": "{\"Lab scenario\": \"JWT tampering due to none algorithm in token verification\", \"Lab Description\": \"The application uses JWT tokens for user authentication. It does not properly validate the token signature if the 'alg' header is set to 'none'. The application trusts the token without signature verification. To solve: Craft a JWT for Carlos with alg=none and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfiguration in redirect handling", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in redirect handling\", \"Lab Description\": \"This application implements OAuth using the implicit flow. The redirection URI is not properly validated, allowing open redirect and token leakage. The application trusts the redirect_uri without strict validation. To solve: Exploit the redirect_uri to capture Carlos’s access token and use it to access the protected /account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion in token validation", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWT) for session handling and is vulnerable to algorithm confusion. The application accepts tokens signed with 'none' instead of verifying them. To solve: craft a forged JWT token to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via token reuse in login flow", "target": "{\"Lab scenario\": \"Session fixation via token reuse in login flow\", \"Lab Description\": \"This application improperly binds session tokens to user identity. A malicious user can fixate a victim's session by planting a session cookie before login. To solve: hijack Carlos's session by fixing the session cookie and accessing his account page after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration allows token reuse", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse\", \"Lab Description\": \"This app uses OAuth for third-party authentication. It incorrectly accepts ID tokens from any issuer, failing to validate the issuer and audience. To solve: reuse an ID token from another provider to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion vulnerability in login api", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login API\", \"Lab Description\": \"The login endpoint uses JWTs for authentication but does not enforce strict algorithm verification. The application trusts the 'alg' field from the JWT header. To solve: forge a valid JWT token for the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit grant misconfiguration in third-party login", "target": "{\"Lab scenario\": \"OAuth implicit grant misconfiguration in third-party login\", \"Lab Description\": \"The application integrates with an OAuth provider using the implicit grant flow. However, it fails to validate the 'state' parameter, enabling CSRF-style token injection. To solve: steal an access token and log in as 'carlos'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session tokens in rest login flow", "target": "{\"Lab scenario\": \"Session Fixation via predictable session tokens in REST login flow\", \"Lab Description\": \"This lab simulates a REST-based login flow vulnerable to session fixation. The application sets session cookies prior to authentication but fails to regenerate them after login. To solve: Fixate a session ID, log in as your own user, and use the same session to authenticate as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT algorithm confusion vulnerability in GraphQL API", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in GraphQL API\", \"Lab Description\": \"This GraphQL-based API uses JWTs for authentication but insecurely supports the 'none' algorithm. The application fails to validate signed tokens properly. To solve: Forge a JWT with 'none' algorithm and access Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow misconfiguration leaking access_token via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaking access_token via referer header\", \"Lab Description\": \"This app uses OAuth 2.0 implicit grant flow for login but fails to sanitize referer headers. Tokens are leaked via open redirect endpoint after authorization. To solve: Leak Carlos’s access token and replay it to gain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via login CSRF", "target": "{\"Lab scenario\": \"Session fixation via login CSRF\", \"Lab Description\": \"This lab is vulnerable to session fixation due to improper handling of session cookies. The application accepts a session cookie set prior to authentication and does not regenerate it upon login. To solve the lab, fixate a session on Carlos’s browser and access his My account page after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature validation bypass via alg=none", "target": "{\"Lab scenario\": \"JWT signature validation bypass via alg=none\", \"Lab Description\": \"The application relies on JWTs to manage sessions but fails to enforce the use of a strong signature algorithm. It incorrectly accepts tokens using 'alg: none'. To solve the lab, forge a valid token to impersonate the admin user and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token leakage via referer", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer\", \"Lab Description\": \"This application implements OAuth 2.0 using the implicit grant flow. Access tokens are transmitted in the URL fragment, but a misconfigured redirect leaks them via the Referer header. To solve the lab, steal Carlos’s token and access his account via the OAuth endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm bypass in authorization header", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in Authorization header\", \"Lab Description\": \"This lab's authentication mechanism relies on a stateless JWT in the Authorization header. However, the server fails to properly validate the algorithm used to sign tokens. The application accepts tokens with the alg field set to 'none', which disables signature verification entirely. To solve: Forge a JWT that grants access to Carlos's account using the none algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The login system uses a session identifier that is not regenerated upon successful authentication. Additionally, the session ID is predictable and can be set by the attacker in the request. To solve: Fix a session ID before login, trick the victim into logging in, and then use the fixed session ID to impersonate them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth for login but allows open redirect behavior via an improperly validated redirect_uri parameter. This enables an attacker to capture the OAuth token by redirecting it to an external site. To solve: Exploit the open redirect to intercept Carlos's OAuth token.", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect URI manipulation\", \"Lab Description\": \"The application uses OAuth for login but allows open redirect behavior via an improperly validated redirect_uri parameter. This enables an attacker to capture the OAuth token by redirecting it to an external site. To solve: Exploit the open redirect to intercept Carlos's OAuth token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm attack in authorization header", "target": "{\"Lab scenario\": \"JWT none algorithm attack in Authorization Header\", \"Lab Description\": \"The application's JWT implementation fails to properly validate the algorithm specified in the token header. The application uses a symmetric secret to sign JWTs, but does not enforce the algorithm value. To solve: Forge a valid JWT with 'alg':'none' and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration leads to account takeover via email claim", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to account takeover via email claim\", \"Lab Description\": \"The application uses an external OAuth provider for social login. It trusts the email claim from the OAuth token without verifying domain ownership or user identity. To solve: Forge an OAuth token containing Carlos's email and gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via ID in URL query parameter", "target": "{\"Lab scenario\": \"Session fixation via ID in URL query parameter\", \"Lab Description\": \"The session ID is accepted from URL query parameters and not regenerated upon successful login. This allows an attacker to preset a session ID for a victim and hijack the session after login. To solve: Fixate Carlos's session and access his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates OAuth login via a third-party provider. However, it is vulnerable to session fixation due to improper session regeneration during the OAuth callback phase. The application preserves the session ID between unauthenticated and authenticated states, enabling an attacker to fix a session ID and hijack a victim’s account. To solve the lab, force a victim to authenticate with a session you control, then access their account.", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Callback Flow\", \"Lab Description\": \"The application integrates OAuth login via a third-party provider. However, it is vulnerable to session fixation due to improper session regeneration during the OAuth callback phase. The application preserves the session ID between unauthenticated and authenticated states, enabling an attacker to fix a session ID and hijack a victim’s account. To solve the lab, force a victim to authenticate with a session you control, then access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Spoofing via 'none' Algorithm", "target": "{\"Lab scenario\": \"JWT Signature Spoofing via 'none' Algorithm\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management. It accepts the algorithm field in the header without verification, allowing an attacker to modify the token and bypass signature checks by setting 'alg' to 'none'. To solve the lab, forge a JWT to impersonate the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where mfa bypass via debug parameter injection in graphql", "target": "{\"Lab scenario\": \"MFA Bypass via Debug Parameter Injection in GraphQL\", \"Lab Description\": \"The application uses a GraphQL endpoint for authentication with multi-factor verification. However, due to insecure debug parameters left enabled in production, it's possible to bypass MFA using a special introspection query. To solve the lab, authenticate as the victim user by exploiting the debug parameter and access their account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via login flow mismanagement", "target": "{\"Lab scenario\": \"Session fixation via login flow mismanagement\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability caused by improper session ID handling during login. The application fails to generate a new session ID after authentication, allowing attackers to set a session ID before login. To solve: hijack Carlos’s session by fixing a known session ID before login, and access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's authentication mechanism uses JSON Web Tokens (JWTs) to verify user identity. However, the backend accepts tokens using the insecure 'none' algorithm. This allows attackers to forge valid tokens without a signature. To solve: forge a JWT token to impersonate the admin user and access the admin panel.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via none algorithm\", \"Lab Description\": \"This lab's authentication mechanism uses JSON Web Tokens (JWTs) to verify user identity. However, the backend accepts tokens using the insecure 'none' algorithm. This allows attackers to forge valid tokens without a signature. To solve: forge a JWT token to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses OAuth 2.0 implicit flow for authentication. The access token is returned in the URL fragment. However, the application leaks this token via the Referer header when navigating to external domains. To solve: capture Carlos's access token and use it to access his profile.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab uses OAuth 2.0 implicit flow for authentication. The access token is returned in the URL fragment. However, the application leaks this token via the Referer header when navigating to external domains. To solve: capture Carlos's access token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login endpoint\", \"Lab Description\": \"The application improperly manages session identifiers. It accepts a pre-assigned session value from an unauthenticated user and reuses it post-login. The application does not regenerate the session ID after authentication, allowing an attacker to predetermine a session token. To solve: Hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering via none algorithm in authorization token", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in authorization token\", \"Lab Description\": \"The application uses JWTs for session management but improperly trusts the `alg` header value in incoming tokens. If the algorithm is changed to 'none', the signature is not validated. The application decodes and trusts the payload blindly. To solve: Forge a valid JWT for Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri handling", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI handling\", \"Lab Description\": \"The application uses OAuth for authentication but does not strictly validate the `redirect_uri` parameter during the OAuth handshake. An attacker can supply a malicious redirect URI to intercept access tokens. To solve: Gain an access token for Carlos and access his account page using the compromised session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses a fixed session ID supplied by the client and does not regenerate the session upon login, exposing it to session fixation attacks. The application logs verbose error details and maintains insecure session management. To solve: exploit the session fixation vulnerability to hijack Carlos's session and access his account page.", "target": "{\"Lab scenario\": \"Web Application Session Fixation in Login Endpoint\", \"Lab Description\": \"The application uses a fixed session ID supplied by the client and does not regenerate the session upon login, exposing it to session fixation attacks. The application logs verbose error details and maintains insecure session management. To solve: exploit the session fixation vulnerability to hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application issues JWT tokens for authentication but fails to properly validate the token signature, allowing attackers to modify the payload without proper checks. The application logs detailed error information exposing debugging data. To solve: tamper with the JWT to impersonate Carlos and access his secure endpoints.", "target": "{\"Lab scenario\": \"Web API JWT Tampering in Token Validation\", \"Lab Description\": \"The application issues JWT tokens for authentication but fails to properly validate the token signature, allowing attackers to modify the payload without proper checks. The application logs detailed error information exposing debugging data. To solve: tamper with the JWT to impersonate Carlos and access his secure endpoints.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: web oauth misconfiguration in redirect uri", "target": "{\"Lab scenario\": \"Web OAuth Misconfiguration in Redirect URI\", \"Lab Description\": \"The application uses OAuth for authentication but fails to validate redirect URIs, allowing an attacker to redirect tokens to an external domain. The application provides verbose logging that discloses sensitive redirection data. To solve: manipulate the redirect_uri parameter to capture Carlos's access token and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in authorization header", "target": "{\"Lab scenario\": \"JWT tampering in authorization header\", \"Lab Description\": \"This lab features an API that authorizes users using JWT tokens stored in the Authorization header. The JWT token is signed using the HS256 algorithm, but the application fails to enforce the secret key properly and does not validate algorithm type. The application trusts JWT tokens signed with the 'none' algorithm. To solve: Forge a valid token that grants admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This lab demonstrates session fixation where the session identifier is not regenerated upon login. The application accepts a user-provided session cookie before login and continues using it after authentication. This allows an attacker to pre-assign a session ID and hijack a victim's session. To solve: Fixate a known session ID on the victim, then log in as the victim using the same session ID to gain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI\", \"Lab Description\": \"This lab includes an OAuth implementation where the redirect URI is insufficiently validated. The server accepts open redirects and allows redirection to attacker-controlled domains. The vulnerable OAuth client trusts unvalidated parameters. To solve: Leak a valid OAuth authorization code to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature manipulation in Authorization header", "target": "{\"Lab scenario\": \"JWT signature manipulation in Authorization header\", \"Lab Description\": \"This lab uses stateless JWTs for user authentication with HMAC signatures. The application trusts the 'alg' field in the token without proper validation. To solve: tamper with the JWT token to impersonate the admin user and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab suffers from a session fixation flaw. The server allows clients to supply a session ID via URL, which is not regenerated after login. To solve: fix the session for the victim, then log them in and hijack their session to access /my-account.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab suffers from a session fixation flaw. The server allows clients to supply a session ID via URL, which is not regenerated after login. To solve: fix the session for the victim, then log them in and hijack their session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab simulates a third-party OAuth login integration using an insecure redirect URI. The application accepts arbitrary redirect URIs, enabling interception of authorization codes. To solve: capture an authorization code meant for the victim and exchange it to access the victim's account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration exposing authorization code\", \"Lab Description\": \"This lab simulates a third-party OAuth login integration using an insecure redirect URI. The application accepts arbitrary redirect URIs, enabling interception of authorization codes. To solve: capture an authorization code meant for the victim and exchange it to access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authenticate users but does not verify their integrity properly. The secret key is weak and predictable. The application uses the token to authorize access to admin-only features. To solve: Forge a valid token for the admin user and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT tampering in Authorization header\", \"Lab Description\": \"The application uses JWTs to authenticate users but does not verify their integrity properly. The secret key is weak and predictable. The application uses the token to authorize access to admin-only features. To solve: Forge a valid token for the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via static session id in cookie", "target": "{\"Lab scenario\": \"Session fixation via static session ID in cookie\", \"Lab Description\": \"The application uses a predictable session ID issued before authentication and does not regenerate it upon login. To solve: Fixate a session on the victim and log in with their account using the fixed session cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party login", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to validate the `state` parameter, exposing it to CSRF-like attacks. To solve: Exploit the flow to log in as another user by hijacking their OAuth session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where graphql login brute-force with verbose error feedback", "target": "{\"Lab scenario\": \"GraphQL login brute-force with verbose error feedback\", \"Lab Description\": \"The GraphQL API provides detailed error messages and lacks rate-limiting. A login mutation exposes different errors for invalid usernames and passwords. To solve: Enumerate a valid username, then brute-force the password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where verbose logging reveals valid credentials", "target": "{\"Lab scenario\": \"Verbose logging reveals valid credentials\", \"Lab Description\": \"The backend logs contain full authentication requests and responses, including credentials. These logs are exposed via a debug endpoint. To solve: Locate and extract admin credentials from logs, then log in and access /admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in rest api authentication flow", "target": "{\"Lab scenario\": \"JWT tampering in REST API authentication flow\", \"Lab Description\": \"The application uses stateless JWTs to authenticate users on its REST API. However, the backend fails to validate the token signature properly. The application accepts unsigned tokens or those signed with a known weak key. To solve: tamper with a valid JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login redirection flow", "target": "{\"Lab scenario\": \"Session fixation in login redirection flow\", \"Lab Description\": \"The application assigns a session ID before the user is authenticated and fails to regenerate the session after login. This allows an attacker to fix a victim’s session ID prior to authentication. To solve: Fix a known session and take over the victim’s account after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in third-party provider login", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party provider login\", \"Lab Description\": \"The app uses OAuth 2.0 with a third-party provider (e.g., GitHub) for authentication. However, the client fails to validate the issuer and audience of the returned access token. To solve: Forge a token from a malicious OAuth server and gain access to another user's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses TOTP-based 2FA codes during login, but fails to invalidate or rate-limit them after submission. An attacker who intercepts or guesses a recent OTP can reuse it. To solve: Replay a valid OTP for Carlos to bypass MFA.", "target": "{\"Lab scenario\": \"MFA bypass via predictable OTP replay\", \"Lab Description\": \"The application uses TOTP-based 2FA codes during login, but fails to invalidate or rate-limit them after submission. An attacker who intercepts or guesses a recent OTP can reuse it. To solve: Replay a valid OTP for Carlos to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where graphql introspection leaking login structure", "target": "{\"Lab scenario\": \"GraphQL introspection leaking login structure\", \"Lab Description\": \"The application exposes an unauthenticated GraphQL endpoint with introspection enabled. This allows discovery of internal mutations and input fields used in login. To solve: Discover and exploit the login mutation to access the admin account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering in rest api authorization", "target": "{\"Lab scenario\": \"JWT tampering in REST API authorization\", \"Lab Description\": \"This lab uses stateless JWTs for user authentication in a RESTful API. The application fails to verify the integrity of JWT signatures properly. The token is signed with the algorithm 'none', and the server does not validate the signature field. To solve: Forge a valid token for the user 'carlos' and access the protected /api/user-info endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session ids", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs\", \"Lab Description\": \"This lab suffers from a session fixation vulnerability. The application accepts arbitrary session identifiers provided by the user before authentication. It fails to generate a new session token upon successful login. To solve: Pre-set a session cookie for Carlos, trick him into logging in, and reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in graphql token exchange", "target": "{\"Lab scenario\": \"OAuth misconfiguration in GraphQL token exchange\", \"Lab Description\": \"This lab uses a misconfigured OAuth flow embedded in a GraphQL endpoint. The application accepts a third-party-issued OAuth token for internal user actions without validating the token audience (aud claim). To solve: Acquire an access token from a mock OAuth provider and use it to fetch Carlos’s private notes using a GraphQL mutation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via cookie injection in login flow", "target": "{\"Lab scenario\": \"Session fixation via cookie injection in login flow\", \"Lab Description\": \"This lab simulates a flawed session management implementation that permits session fixation via pre-login cookie injection. The application fails to regenerate session identifiers upon successful authentication. To solve: Hijack Carlos’s session by crafting a fixed session ID and getting him to use it, then access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature validation disabled in api login handler", "target": "{\"Lab scenario\": \"JWT signature validation disabled in API login handler\", \"Lab Description\": \"This lab’s API endpoint incorrectly disables JWT signature verification. The backend trusts unsigned JWTs when the 'alg' is set to 'none'. To solve: Forge an unsigned JWT that grants admin access and retrieve the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leads to token reuse in third-party callback", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to token reuse in third-party callback\", \"Lab Description\": \"This lab uses OAuth 2.0 for login via a third-party provider. It incorrectly trusts the 'state' parameter and does not validate token ownership. To solve: Reuse an access token from your account and access Carlos's dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Credential stuffing via verbose login API responses", "target": "{\"Lab scenario\": \"Credential stuffing via verbose login API responses\", \"Lab Description\": \"This lab's login endpoint leaks too much information via verbose error messages, facilitating credential stuffing. The error reveals whether the username or password is incorrect. To solve: Enumerate Carlos’s credentials and log in to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion in rest api login", "target": "{\"Lab scenario\": \"JWT algorithm confusion in REST API login\", \"Lab Description\": \"The backend accepts a JWT token for authentication, but improperly trusts the algorithm field in the token header. The application fails to enforce signature verification when `alg` is set to `none`. To solve: log in as the user 'carlos' by forging a valid JWT token and access the protected /my-account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses OAuth with an implicit flow for third-party authentication, where the access token is returned in the URL fragment. A misconfigured redirect leaks this token via the Referer header to a third-party domain. To solve: leak Carlos’s token and use it to access /oauth/me.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via Referer header\", \"Lab Description\": \"The application uses OAuth with an implicit flow for third-party authentication, where the access token is returned in the URL fragment. A misconfigured redirect leaks this token via the Referer header to a third-party domain. To solve: leak Carlos’s token and use it to access /oauth/me.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via pre-login set-cookie in soap-based login", "target": "{\"Lab scenario\": \"Session fixation via pre-login Set-Cookie in SOAP-based login\", \"Lab Description\": \"The application uses a SOAP endpoint for login and fails to issue a new session identifier after successful authentication. This allows an attacker to predefine the session token used by the victim. To solve: fix the session token for Carlos, then hijack it after he logs in and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion vulnerability in login verification endpoint", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login verification endpoint\", \"Lab Description\": \"The application uses JWT tokens to manage authentication. It trusts the 'alg' header from the user-provided token and does not enforce a secure algorithm on the server side. This leads to an algorithm confusion flaw. The application accepts tokens signed with 'none'. To solve: forge a JWT token to access the admin panel as user 'admin'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect uri manipulation in oauth callback", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in OAuth callback\", \"Lab Description\": \"The application integrates with a third-party OAuth provider. The redirect URI is partially validated and uses string matching to determine legitimacy. This can be bypassed using open redirect techniques. To solve: complete the OAuth login flow and gain a session as 'admin' by hijacking the redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in login cookie handling", "target": "{\"Lab scenario\": \"Session fixation in login cookie handling\", \"Lab Description\": \"The application assigns session identifiers via cookies before authentication. These session IDs are not regenerated after login, allowing session fixation. To solve: fixate a session before login, authenticate with user 'carlos', and hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where mfa bypass via request smuggling on login route", "target": "{\"Lab scenario\": \"MFA bypass via request smuggling on login route\", \"Lab Description\": \"The application uses multi-factor authentication, but it is implemented as a second endpoint after initial login. A request smuggling vulnerability allows bypassing MFA by combining requests. To solve: use a smuggled request to send both login and bypass MFA steps in a single POST.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT key confusion using public key as HMAC secret", "target": "{\"Lab scenario\": \"JWT key confusion using public key as HMAC secret\", \"Lab Description\": \"The server uses asymmetric keys (RS256) for signing JWTs. However, it incorrectly accepts tokens signed with HS256, interpreting the public key as an HMAC secret. This allows attackers to forge valid tokens. To solve: sign a forged JWT using HS256 and the public key to impersonate 'admin'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session id in login flow", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"This application's session management is flawed. After login, it reuses the same session token provided prior to authentication. The application does not invalidate or regenerate the session ID upon successful login. To solve: Fixate a session for the victim and log in using their credentials, then access their My account page using the fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via algorithm confusion", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion\", \"Lab Description\": \"The application uses JWTs for session management, but it does not enforce a strict algorithm validation. It accepts unsigned JWTs when the alg field is set to 'none'. To solve: Modify your JWT to impersonate Carlos by changing the alg header to 'none' and signing out a valid token without a signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth redirect manipulation in authorization server", "target": "{\"Lab scenario\": \"OAuth redirect manipulation in authorization server\", \"Lab Description\": \"This app integrates with an external OAuth server but does not validate redirect URIs strictly. This allows redirect URI manipulation to hijack tokens. To solve: Intercept the OAuth login flow, manipulate the redirect_uri to an attacker-controlled domain, and extract Carlos's access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a easy Authentication lab for: session hijacking through verbose error message", "target": "{\"Lab scenario\": \"Session hijacking through verbose error message\", \"Lab Description\": \"This application exposes session IDs in verbose error messages. These leaked session tokens can be used to hijack user sessions. To solve: Trigger an error, retrieve Carlos's session ID from the response, and reuse it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The application allows unlimited login attempts and does not implement rate limiting. An attacker can perform credential stuffing attacks using common leaked credentials. To solve: Use a known leaked password for Carlos and gain access to his My account page.", "target": "{\"Lab scenario\": \"Credential stuffing using leaked password\", \"Lab Description\": \"The application allows unlimited login attempts and does not implement rate limiting. An attacker can perform credential stuffing attacks using common leaked credentials. To solve: Use a known leaked password for Carlos and gain access to his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via insecure cookie assignment in rest login flow", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Assignment in REST Login Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability within the login flow. The application accepts a `session` cookie from the client and does not invalidate it upon successful login. This flawed design allows an attacker to fixate a session ID prior to login and hijack the victim's authenticated session. To solve: Hijack Carlos's session and access his account page using a pre-assigned session identifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Signature Bypass via 'none' Algorithm in Authorization Header", "target": "{\"Lab scenario\": \"JWT Signature Bypass via 'none' Algorithm in Authorization Header\", \"Lab Description\": \"This lab simulates a vulnerable JWT validation process that improperly trusts the `alg` field in incoming tokens. The server accepts a token signed with the 'none' algorithm, effectively disabling verification. To solve: Forge a valid JWT granting admin access and access the protected admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration via Redirect URI Manipulation in GraphQL Mutation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration via Redirect URI Manipulation in GraphQL Mutation\", \"Lab Description\": \"This lab demonstrates a misconfigured OAuth authorization flow implemented through a GraphQL endpoint. The server fails to validate redirect URIs during token exchange, allowing an attacker to intercept authorization codes. To solve: Manipulate the redirect_uri parameter to intercept Carlos’s token and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This lab’s login endpoint fails to invalidate existing session tokens, allowing an attacker to fix a session ID prior to victim login. The application maintains session state using cookies without rotating them on login. To solve: Hijack Carlos's session by fixing the session ID before they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion in authorization header", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authorization header\", \"Lab Description\": \"The application accepts JWTs signed using the 'none' algorithm. This allows attackers to forge tokens without knowing the secret. The application fails to validate token integrity correctly. To solve: Forge a token granting access to the admin panel as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration in redirect URI handling", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI handling\", \"Lab Description\": \"This lab misconfigures its OAuth redirect URI validation, allowing attackers to manipulate the flow to steal authorization codes. The application trusts redirect URIs without exact matching. To solve: Capture Carlos’s authorization code via an open redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The login system reveals whether a username exists before verifying passwords, enabling enumeration and credential stuffing attacks. It does not implement rate-limiting or captcha protection. To solve: Identify a valid credential pair for Carlos and access his account.", "target": "{\"Lab scenario\": \"Credential stuffing vulnerability in verbose login error response\", \"Lab Description\": \"The login system reveals whether a username exists before verifying passwords, enabling enumeration and credential stuffing attacks. It does not implement rate-limiting or captcha protection. To solve: Identify a valid credential pair for Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session token reuse vulnerability in GraphQL login mutation", "target": "{\"Lab scenario\": \"Session token reuse vulnerability in GraphQL login mutation\", \"Lab Description\": \"This GraphQL API issues static session tokens upon login without regenerating them. Attackers can reuse captured tokens to impersonate other users. To solve: Replay Carlos’s token and access his private messages.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation in cookie-based auth middleware", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-based Auth Middleware\", \"Lab Description\": \"The application uses cookie-based sessions but does not regenerate the session ID after login, allowing session fixation attacks. The vulnerable middleware binds session cookies too early in the auth process. To solve: Fixate a session token before login, then reuse it post-authentication to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt authentication bypass using none algorithm in authorization header", "target": "{\"Lab scenario\": \"JWT Authentication Bypass using None Algorithm in Authorization Header\", \"Lab Description\": \"The app validates JWT tokens but accepts unsigned tokens when the algorithm is set to 'none'. The verification logic fails to check for token integrity. To solve: Craft a JWT using 'none' as algorithm, spoof Carlos’s identity, and access /admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application integrates OAuth with a vulnerable redirect_uri parameter that does not enforce domain validation. This can be exploited via open redirect to steal authorization codes. To solve: Redirect the victim through a crafted URL that leaks Carlos’s OAuth code to your server and log in using the code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation via insecure cookie reuse in login flow", "target": "{\"Lab scenario\": \"Session Fixation via Insecure Cookie Reuse in Login Flow\", \"Lab Description\": \"The application does not invalidate existing session cookies after successful login. An attacker can preset a session ID and force a victim to use it. Once the victim logs in, the attacker can hijack the session. To solve: hijack Carlos's session after fixing the session ID and triggering login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt signature none bypass in api authorization header", "target": "{\"Lab scenario\": \"JWT Signature None Bypass in API Authorization Header\", \"Lab Description\": \"The app uses JWT for API auth but accepts `alg: none`, enabling tampering. JWTs are passed via Authorization header. To solve: forge a valid token for user 'admin' without needing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit grant token stealing via redirect manipulation", "target": "{\"Lab scenario\": \"OAuth Implicit Grant Token Stealing via Redirect Manipulation\", \"Lab Description\": \"The app uses OAuth implicit grant and reflects redirect URIs insecurely. An attacker can manipulate the redirect_uri to capture tokens. To solve: obtain Carlos’s access token and use it to access his account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt key confusion exploit in login endpoint", "target": "{\"Lab scenario\": \"JWT Key Confusion Exploit in Login Endpoint\", \"Lab Description\": \"The app uses asymmetric JWT but incorrectly allows verification with symmetric key, enabling key confusion attacks. To solve: sign a forged admin token with the public key as HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session id exposure in graphql login mutation", "target": "{\"Lab scenario\": \"Session ID Exposure in GraphQL Login Mutation\", \"Lab Description\": \"The GraphQL login mutation leaks verbose error info and returns session ID directly in response, enabling session prediction. To solve: predict session of 'carlos' and hijack it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via oauth code reuse in redirect uri", "target": "{\"Lab scenario\": \"Session Fixation via OAuth Code Reuse in Redirect URI\", \"Lab Description\": \"OAuth login improperly accepts reused authorization codes. An attacker can authenticate as victim using replayed codes. To solve: obtain Carlos's code and reuse it post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt expiry manipulation in authorization header", "target": "{\"Lab scenario\": \"JWT Expiry Manipulation in Authorization Header\", \"Lab Description\": \"JWT tokens are verified without checking the expiration claim. An attacker can craft expired tokens that are still accepted. To solve: generate expired token for 'admin' and access /admin-area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application allows users to authenticate via a login form but does not issue a new session ID upon successful login. Instead, it reuses the session ID issued before authentication. This enables session fixation. The application reflects session IDs in a predictable format. To solve: Fixate a session for the victim user and access their My Account page.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application allows users to authenticate via a login form but does not issue a new session ID upon successful login. Instead, it reuses the session ID issued before authentication. This enables session fixation. The application reflects session IDs in a predictable format. To solve: Fixate a session for the victim user and access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The backend validates JWTs using the 'alg' header in the token. It incorrectly accepts tokens with 'none' algorithm, skipping signature verification. To solve: Forge a valid-looking token for the user 'admin' and access their My Account page.", "target": "{\"Lab scenario\": \"JWT algorithm confusion allowing token forgery\", \"Lab Description\": \"The backend validates JWTs using the 'alg' header in the token. It incorrectly accepts tokens with 'none' algorithm, skipping signature verification. To solve: Forge a valid-looking token for the user 'admin' and access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth flow uses a redirect_uri parameter that is not properly validated, allowing attackers to inject an external domain. This can be exploited to leak authorization codes. To solve: Capture an authorization code issued for the victim and log in to their account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect during authorization\", \"Lab Description\": \"The OAuth flow uses a redirect_uri parameter that is not properly validated, allowing attackers to inject an external domain. This can be exploited to leak authorization codes. To solve: Capture an authorization code issued for the victim and log in to their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login csrf vulnerability", "target": "{\"Lab scenario\": \"Session fixation via login CSRF vulnerability\", \"Lab Description\": \"The application is vulnerable to login CSRF. The session remains fixed after the victim logs in via a crafted form. To solve: Force the victim to log in with your session ID and access their account page using that session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature bypass via public key as HMAC key", "target": "{\"Lab scenario\": \"JWT signature bypass via public key as HMAC key\", \"Lab Description\": \"The application uses asymmetric RSA to sign JWTs but mistakenly verifies tokens using the public key with the HMAC algorithm. To solve: Forge a token for 'admin' using RS256 public key with HS256 algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: graphql endpoint leaking verbose jwt decoding errors", "target": "{\"Lab scenario\": \"GraphQL endpoint leaking verbose JWT decoding errors\", \"Lab Description\": \"The GraphQL API performs JWT validation and returns verbose error messages on failure. These errors help brute-force or guess the signing key. To solve: Identify the key from error feedback and forge a token to access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where persistent session reuse in soap login api", "target": "{\"Lab scenario\": \"Persistent session reuse in SOAP login API\", \"Lab Description\": \"The SOAP API returns session tokens that are valid indefinitely and reused across logins. These tokens can be harvested from logs or URLs. To solve: Reuse a captured token for the admin and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT with static secret across users", "target": "{\"Lab scenario\": \"JWT with static secret across users\", \"Lab Description\": \"The JWT implementation uses a hardcoded static secret, same for all users. An attacker can sign their own tokens once the key is known. To solve: Discover the shared secret and forge a token for 'admin'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Create a challenge where: The app sets session tokens in URLs for internal redirections. These URLs are leaked via the Referer header. To solve: Capture a valid session token via referrer and reuse it to access /account.", "target": "{\"Lab scenario\": \"Session ID exposed in referrer header\", \"Lab Description\": \"The app sets session tokens in URLs for internal redirections. These URLs are leaked via the Referer header. To solve: Capture a valid session token via referrer and reuse it to access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application implements a login system that uses a session ID passed via a query parameter to maintain state. However, the server fails to invalidate pre-authenticated session IDs. This leads to a session fixation vulnerability. The application allows attackers to fix the victim's session ID before they log in. To solve: hijack Carlos's session by setting a known session ID and forcing him to authenticate with it.", "target": "{\"Lab scenario\": \"Session Fixation via Unvalidated Token in REST Login Flow\", \"Lab Description\": \"The application implements a login system that uses a session ID passed via a query parameter to maintain state. However, the server fails to invalidate pre-authenticated session IDs. This leads to a session fixation vulnerability. The application allows attackers to fix the victim's session ID before they log in. To solve: hijack Carlos's session by setting a known session ID and forcing him to authenticate with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm forgery in graphql auth token", "target": "{\"Lab scenario\": \"JWT None Algorithm Forgery in GraphQL Auth Token\", \"Lab Description\": \"The application uses JWT for GraphQL authentication but fails to validate the token algorithm properly. The `alg` field is user-controlled and defaults to `none` if missing or set improperly. The application signs JWTs with a symmetric key but trusts tokens without signatures when `alg` is set to `none`. To solve: craft a JWT with `alg:none` and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth client misconfiguration via redirect uri manipulation", "target": "{\"Lab scenario\": \"OAuth Client Misconfiguration via Redirect URI Manipulation\", \"Lab Description\": \"The application integrates OAuth for third-party login but improperly validates the `redirect_uri` parameter. This allows an attacker to manipulate the URI to a domain they control. By injecting a malicious redirect URI, the attacker can capture a valid authorization code. To solve: obtain Carlos's access token using a manipulated `redirect_uri` and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements OAuth-based login and contains a session fixation vulnerability. The application fails to generate a new session ID after OAuth login. An attacker can set their session ID prior to the victim's login and hijack their session post-login. To solve: hijack Carlos's account by pre-fixing a session and accessing his account page after login.", "target": "{\"Lab scenario\": \"OAuth session fixation in authentication callback\", \"Lab Description\": \"This lab implements OAuth-based login and contains a session fixation vulnerability. The application fails to generate a new session ID after OAuth login. An attacker can set their session ID prior to the victim's login and hijack their session post-login. To solve: hijack Carlos's account by pre-fixing a session and accessing his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT signature confusion in REST API", "target": "{\"Lab scenario\": \"JWT signature confusion in REST API\", \"Lab Description\": \"This lab uses a JWT-based authorization mechanism and is vulnerable to signature confusion via the 'none' algorithm. The application accepts JWTs with the 'alg' field set to 'none' and does not verify the signature. To solve: craft a forged token that impersonates Carlos and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: mfa bypass due to logic flaw in soap endpoint", "target": "{\"Lab scenario\": \"MFA bypass due to logic flaw in SOAP endpoint\", \"Lab Description\": \"This lab uses SOAP-based login with MFA verification. The backend fails to verify the MFA token when a specific debug header is set. This can be exploited to bypass 2FA entirely. To solve: log in as Carlos without knowing the MFA code by bypassing the second step using the debug header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JSON Web Tokens (JWT) to manage user sessions and supports multiple algorithms for signature verification. It mistakenly treats 'none' algorithm as valid when certain conditions are met, due to a flawed library wrapper. The application validates tokens signed with 'HS256' and mistakenly trusts unsigned tokens if the header is manipulated. To solve: craft a valid unsigned JWT granting admin privileges and access the /admin panel.", "target": "{\"Lab scenario\": \"JWT signature trust confusion in multi-algorithm implementation\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) to manage user sessions and supports multiple algorithms for signature verification. It mistakenly treats 'none' algorithm as valid when certain conditions are met, due to a flawed library wrapper. The application validates tokens signed with 'HS256' and mistakenly trusts unsigned tokens if the header is manipulated. To solve: craft a valid unsigned JWT granting admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via set-cookie path scoping", "target": "{\"Lab scenario\": \"Session fixation via Set-Cookie path scoping\", \"Lab Description\": \"The application creates a new session for users only after a successful login but uses a fixed session identifier that is scoped to a non-authentication path. Due to improper path scoping on Set-Cookie headers, attackers can fix a session ID before login. To solve: inject a known session ID before the victim logs in and hijack the session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token leakage via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"The application uses OAuth 2.0 implicit grant for third-party login and redirects access tokens in the URL fragment (#). However, the application incorrectly loads third-party content after the redirect, exposing the token in the Referer header. To solve: leak Carlos's access token and use it to access his account via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in cookie-based auth mechanism", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-Based Auth Mechanism\", \"Lab Description\": \"This lab contains a session fixation vulnerability in its cookie-based login process. The application assigns session identifiers before authentication and fails to invalidate them upon login. To solve: Hijack Carlos's session by fixing the session cookie before he logs in and then access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm authentication bypass", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass\", \"Lab Description\": \"The application uses JWTs for authentication but fails to validate the token signature properly when the 'alg' field is set to 'none'. To solve: Forge a token with the 'none' algorithm to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth 2.0 implementation does not properly validate redirect URIs, allowing an attacker to inject a malicious URI and intercept the authorization code. To solve: Steal an access token for Carlos and use it to access his account via the OAuth-protected API.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation for Access Token Theft\", \"Lab Description\": \"The OAuth 2.0 implementation does not properly validate redirect URIs, allowing an attacker to inject a malicious URI and intercept the authorization code. To solve: Steal an access token for Carlos and use it to access his account via the OAuth-protected API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"The session management mechanism in this RESTful application issues session IDs before login. The session token is not regenerated upon successful login, allowing an attacker to fix a session ID. The application exposes verbose session tokens during pre-auth requests. To solve: hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application uses JWTs to verify user identity, but insecurely trusts the algorithm specified in the token header. The server uses HMAC with a secret key, but doesn't validate the algorithm field properly. To solve: forge a JWT with 'alg' set to 'none' and access the admin's profile.", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion with None Header\", \"Lab Description\": \"This application uses JWTs to verify user identity, but insecurely trusts the algorithm specified in the token header. The server uses HMAC with a secret key, but doesn't validate the algorithm field properly. To solve: forge a JWT with 'alg' set to 'none' and access the admin's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This OAuth-enabled application uses a vulnerable redirect URI mechanism. The redirect URL is not validated strictly, allowing open redirect exploitation to steal authorization codes. To solve: capture Carlos's OAuth code and exchange it for an access token to access his profile.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Leakage via Redirect Manipulation\", \"Lab Description\": \"This OAuth-enabled application uses a vulnerable redirect URI mechanism. The redirect URL is not validated strictly, allowing open redirect exploitation to steal authorization codes. To solve: capture Carlos's OAuth code and exchange it for an access token to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This GraphQL API uses JWTs for authentication and verifies token expiration using `exp`. The application is vulnerable to clock skew due to poor validation of token timestamps. To solve: forge a token with future expiration, exploit clock desync, and access the user's secret notes.", "target": "{\"Lab scenario\": \"GraphQL JWT Expiration Bypass via Clock Skew\", \"Lab Description\": \"This GraphQL API uses JWTs for authentication and verifies token expiration using `exp`. The application is vulnerable to clock skew due to poor validation of token timestamps. To solve: forge a token with future expiration, exploit clock desync, and access the user's secret notes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in login flow via url parameter", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow via URL Parameter\", \"Lab Description\": \"The application allows users to specify a session ID via a URL query parameter during login. This session ID is later used without regeneration after authentication. The application trusts the client-supplied session ID even after successful login. To solve: Fix a session ID, trick the victim to log in using it, and access their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab uses JWT for session management. The backend verifies JWTs but fails to properly enforce the algorithm specified in the token header. It incorrectly accepts the 'alg':'none' value, skipping signature verification. To solve: Modify a valid JWT by setting alg to none and remove the signature to impersonate Carlos.", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header using 'none' Algorithm\", \"Lab Description\": \"This lab uses JWT for session management. The backend verifies JWTs but fails to properly enforce the algorithm specified in the token header. It incorrectly accepts the 'alg':'none' value, skipping signature verification. To solve: Modify a valid JWT by setting alg to none and remove the signature to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in redirect uri validation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application integrates OAuth for authentication. However, it fails to strictly validate the redirect_uri parameter, allowing redirection to attacker-controlled domains. The access token is exposed via URL fragment. To solve: Capture Carlos’s access token by injecting an attacker-controlled redirect URI and replay the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"The application uses a session cookie that is not regenerated upon authentication. This enables session fixation, allowing attackers to set a session ID before login. To solve: gain access to Carlos's account by fixing a session and tricking him into logging in with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm Tampering in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in Authorization Header\", \"Lab Description\": \"This app uses JWTs to manage access control. Due to improper validation, it accepts tokens signed with the 'none' algorithm. To solve: tamper with a JWT to impersonate the user carlos and access the protected resource /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab has a vulnerable OAuth implementation where the authorization code is sent to an open redirector that leaks it to an attacker. To solve: intercept the code from the OAuth provider and exchange it for an access token to impersonate Carlos.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in Redirect Flow\", \"Lab Description\": \"This lab has a vulnerable OAuth implementation where the authorization code is sent to an open redirector that leaks it to an attacker. To solve: intercept the code from the OAuth provider and exchange it for an access token to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion leading to signature bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to signature bypass\", \"Lab Description\": \"This lab's JWT authentication mechanism is vulnerable to algorithm confusion. The application incorrectly accepts unsigned tokens when the alg header is set to 'none'. To solve the lab, gain access to the administrator's account by bypassing the JWT signature verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via url-based session id", "target": "{\"Lab scenario\": \"Session fixation via URL-based session ID\", \"Lab Description\": \"The session management mechanism is vulnerable due to reliance on session IDs passed through URLs. The application does not properly regenerate session identifiers after authentication. To solve the lab, log in as the victim by planting a known session ID before they log in and then reuse it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leakage via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab demonstrates a token leakage vulnerability in OAuth 2.0's implicit flow. The access token is embedded in the URL fragment and can leak through referer headers to third-party domains. To solve the lab, capture the admin's token via referer leakage and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation via cookie injection in oauth redirect flow", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in OAuth Redirect Flow\", \"Lab Description\": \"The application integrates third-party OAuth login but does not invalidate existing session cookies during the authentication redirect chain. The application reuses an attacker-controlled session post-login. To solve: Fixate a session via the redirect endpoint and access the victim's account page after they complete OAuth login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The backend improperly trusts the 'alg' header in JWT tokens, allowing attackers to switch the algorithm from RS256 to HS256 and sign tokens with a known public key. To solve: Forge a JWT for the 'admin' user and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Authorization Header\", \"Lab Description\": \"The backend improperly trusts the 'alg' header in JWT tokens, allowing attackers to switch the algorithm from RS256 to HS256 and sign tokens with a known public key. To solve: Forge a JWT for the 'admin' user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth client incorrectly validates redirect URIs, allowing attackers to inject a redirect endpoint that leaks access tokens. To solve: Capture an OAuth token by redirecting the victim’s login flow to your controlled domain.", "target": "{\"Lab scenario\": \"OAuth Token Disclosure via Open Redirect in Redirect URI\", \"Lab Description\": \"The OAuth client incorrectly validates redirect URIs, allowing attackers to inject a redirect endpoint that leaks access tokens. To solve: Capture an OAuth token by redirecting the victim’s login flow to your controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application's session management fails to invalidate active sessions post-password reset. The application assigns a new session ID only after login, allowing an attacker to exploit a fixed session during password reset. To solve: Fixate a session prior to victim login and hijack their session post-reset to access their dashboard.", "target": "{\"Lab scenario\": \"Session fixation via password reset endpoint\", \"Lab Description\": \"The application's session management fails to invalidate active sessions post-password reset. The application assigns a new session ID only after login, allowing an attacker to exploit a fixed session during password reset. To solve: Fixate a session prior to victim login and hijack their session post-reset to access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The backend JWT validation logic fails to properly enforce algorithm verification. An attacker can craft a JWT with 'alg':'none' and bypass verification, gaining unauthorized access. To solve: Forge a JWT token using 'none' algorithm and access Carlos’s admin panel.", "target": "{\"Lab scenario\": \"JWT signature bypass via 'none' algorithm injection\", \"Lab Description\": \"The backend JWT validation logic fails to properly enforce algorithm verification. An attacker can craft a JWT with 'alg':'none' and bypass verification, gaining unauthorized access. To solve: Forge a JWT token using 'none' algorithm and access Carlos’s admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth implicit flow token leakage via referer header", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab uses the OAuth 2.0 implicit grant type. The access token is returned in the fragment of the redirect URI and exposed via Referer headers during subsequent navigation. To solve: Capture the access token of Carlos from a referer leak and access /account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab’s session management is flawed, allowing attackers to fixate a session ID before login. The application issues a session cookie during pre-login activities but fails to regenerate it upon successful authentication, allowing fixation attacks. To solve: hijack Carlos's session by planting a known session ID and then accessing his account page after login.", "target": "{\"Lab scenario\": \"Session Fixation via Weak Session Handling in Login Flow\", \"Lab Description\": \"This lab’s session management is flawed, allowing attackers to fixate a session ID before login. The application issues a session cookie during pre-login activities but fails to regenerate it upon successful authentication, allowing fixation attacks. To solve: hijack Carlos's session by planting a known session ID and then accessing his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Algorithm Confusion Exploit in Authorization Token", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion Exploit in Authorization Token\", \"Lab Description\": \"This lab’s JWT validation is vulnerable due to algorithm confusion. It accepts unsigned tokens if alg is set to 'none'. The application incorrectly processes JWTs during authentication without verifying the algorithm correctly. To solve: forge a token to access Carlos's account without needing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Implicit Flow Token Leakage via Referrer Header", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leakage via Referrer Header\", \"Lab Description\": \"This lab’s OAuth 2.0 implementation improperly leaks access tokens via the HTTP Referer header. The application uses the implicit grant flow without restricting referrer policies. An attacker can steal tokens embedded in the URL fragment. To solve: steal Carlos's OAuth access token and use it to access his protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt algorithm confusion leading to authentication bypass", "target": "{\"Lab scenario\": \"JWT algorithm confusion leading to authentication bypass\", \"Lab Description\": \"The application uses JWT-based session tokens for user authentication. It mistakenly supports multiple algorithms, including `none`, without enforcing a strict verification policy. The application accepts unsigned JWTs if the `alg` is set to `none`, allowing attackers to forge tokens. To solve: Forge a JWT to impersonate the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via cookie parameter injection", "target": "{\"Lab scenario\": \"Session fixation via cookie parameter injection\", \"Lab Description\": \"The session management mechanism fails to regenerate session identifiers upon login, allowing an attacker to fix a session ID in advance. The application accepts a session cookie from unauthenticated users and keeps it valid post-authentication. To solve: Log in as carlos using a pre-fixed session ID and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow token leakage via redirect_uri manipulation", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via redirect_uri manipulation\", \"Lab Description\": \"The application uses an OAuth 2.0 implicit flow but improperly validates redirect URIs. The attacker can manipulate the redirect_uri parameter to capture access tokens using their controlled endpoint. To solve: Leak an OAuth token belonging to carlos and use it to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation in password reset flow", "target": "{\"Lab scenario\": \"Session fixation in password reset flow\", \"Lab Description\": \"The application allows attackers to fix a session identifier before a user resets their password. The password reset handler reuses the existing session without invalidating or rotating it. To solve: hijack Carlos's session by setting a fixed session ID before he resets his password, then access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm in Authorization header\", \"Lab Description\": \"This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth access token leakage via referer header in redirect", "target": "{\"Lab scenario\": \"OAuth access token leakage via referer header in redirect\", \"Lab Description\": \"The application uses OAuth 2.0 implicit flow and redirects users to a third-party site after authentication. However, the access token is passed in the URL fragment and leaks via the HTTP referer header. To solve: intercept the token leak and use it to access the victim's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation via login endpoint parameter manipulation", "target": "{\"Lab scenario\": \"Session fixation via login endpoint parameter manipulation\", \"Lab Description\": \"The application's login endpoint allows an attacker to fix a session ID prior to authentication. The application reuses the existing session identifier after login without regenerating it. To solve: hijack Carlos's session using a fixed session ID to access his profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion with 'none' exploit", "target": "{\"Lab scenario\": \"JWT algorithm confusion with 'none' exploit\", \"Lab Description\": \"This application's JWT-based authentication accepts user-supplied tokens but does not enforce the algorithm used to verify signatures. The backend accepts the 'none' algorithm without signature verification. To solve: create a forged token to log in as the admin user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allowing unauthorized token usage", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing unauthorized token usage\", \"Lab Description\": \"The application integrates OAuth for SSO but fails to validate the client_id and redirect_uri against a whitelist. This allows a malicious actor to reuse an issued token on a forged client. To solve: obtain a valid token and replay it against a vulnerable resource without authorization.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt signature disclosure in authorization header parsing", "target": "{\"Lab scenario\": \"JWT signature disclosure in Authorization header parsing\", \"Lab Description\": \"The application uses JWTs to authorize API requests but misconfigures signature verification. The header parser leaks the JWT secret in debug mode when an invalid token is submitted. The application trusts any token signed with this secret. To solve: exploit the debug leak, forge a token for user 'admin', and access /admin-panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates third-party OAuth for login. It reuses old authorization codes and does not bind tokens to sessions. This allows replaying a leaked code to impersonate another user. To solve: extract an intercepted OAuth code from logs, reuse it to generate a valid token for 'victim@example.com', and access their profile.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse\", \"Lab Description\": \"The application integrates third-party OAuth for login. It reuses old authorization codes and does not bind tokens to sessions. This allows replaying a leaked code to impersonate another user. To solve: extract an intercepted OAuth code from logs, reuse it to generate a valid token for 'victim@example.com', and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via insecure set-cookie path scoping", "target": "{\"Lab scenario\": \"Session fixation via insecure Set-Cookie path scoping\", \"Lab Description\": \"The application sets a session cookie with path=/login only, allowing an attacker to pre-set a session cookie that persists during victim login. This enables session fixation attacks. To solve: set a session cookie with fixed ID, trick victim into login, then hijack session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where mfa bypass via logic bug in verification fallback", "target": "{\"Lab scenario\": \"MFA bypass via logic bug in verification fallback\", \"Lab Description\": \"The MFA mechanism includes a logic flaw where failure to submit a token defaults to a verified state if the user is marked 'trusted'. The application misclassifies users as trusted after a single login attempt. To solve: log in, ensure 'trusted' flag is set, then omit the MFA step and access sensitive resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The lab simulates a third-party login using OAuth. The application does not properly regenerate session identifiers after OAuth authentication. An attacker can fixate a session ID prior to login. To solve: hijack a victim’s session post-OAuth login using a pre-set session token.", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Authorization Flow\", \"Lab Description\": \"The lab simulates a third-party login using OAuth. The application does not properly regenerate session identifiers after OAuth authentication. An attacker can fixate a session ID prior to login. To solve: hijack a victim’s session post-OAuth login using a pre-set session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm authentication bypass", "target": "{\"Lab scenario\": \"JWT none algorithm authentication bypass\", \"Lab Description\": \"This application uses JWT tokens for session handling. However, it accepts tokens signed with the 'none' algorithm without verifying the signature. To solve: forge a JWT with alg=none to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via login endpoint on soap api", "target": "{\"Lab scenario\": \"Session fixation via login endpoint on SOAP API\", \"Lab Description\": \"The backend SOAP service fails to invalidate old session IDs during login. This allows an attacker to fixate a known session and later hijack a victim's authenticated session. To solve: capture a session before login, fixate it, and use it to access the victim’s session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via upgrade flow in REST login", "target": "{\"Lab scenario\": \"Session fixation via upgrade flow in REST login\", \"Lab Description\": \"The application uses session-based authentication and supports an 'upgrade' mechanism where unauthenticated sessions can be promoted after login. The session ID is not regenerated upon successful login, allowing fixation. To solve: Fixate a session ID and login as Carlos without knowing his credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This application uses JWTs to authenticate users for a GraphQL endpoint. The JWT validation accepts tokens with the 'none' algorithm when no signature is provided. To solve: Forge a token with 'none' algorithm and gain access to Carlos’s account.", "target": "{\"Lab scenario\": \"JWT none algorithm override in GraphQL login API\", \"Lab Description\": \"This application uses JWTs to authenticate users for a GraphQL endpoint. The JWT validation accepts tokens with the 'none' algorithm when no signature is provided. To solve: Forge a token with 'none' algorithm and gain access to Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth implicit flow open redirect with token leak", "target": "{\"Lab scenario\": \"OAuth implicit flow open redirect with token leak\", \"Lab Description\": \"This app uses OAuth with the implicit grant type. The redirect_uri parameter is improperly validated, allowing token leakage via open redirect. To solve: Exploit the open redirect to capture an access token and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session replay due to insecure session expiration logic in rest api", "target": "{\"Lab scenario\": \"Session replay due to insecure session expiration logic in REST API\", \"Lab Description\": \"The application does not enforce session expiration correctly, allowing reuse of stale tokens within a brief timing window. It uses stateless session tokens with no revocation tracking. To solve: replay a previously valid session token to access Carlos's account after logout.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt authentication bypass using 'none' algorithm in graphql api", "target": "{\"Lab scenario\": \"JWT authentication bypass using 'none' algorithm in GraphQL API\", \"Lab Description\": \"The backend incorrectly accepts JWTs signed with the 'none' algorithm. The application uses JWTs to authorize GraphQL queries. To solve: forge a JWT to access Carlos's account profile by injecting a token with 'alg':'none'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth 2.0 code interception due to open redirect in callback endpoint", "target": "{\"Lab scenario\": \"OAuth 2.0 code interception due to open redirect in callback endpoint\", \"Lab Description\": \"The application integrates with a third-party OAuth provider, but its redirect_uri parameter is vulnerable to open redirection. An attacker can intercept the authorization code and complete OAuth flow as another user. To solve: log in to Carlos's account via stolen OAuth token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via preserved session ID in OAuth callback", "target": "{\"Lab scenario\": \"Session fixation via preserved session ID in OAuth callback\", \"Lab Description\": \"The application integrates OAuth for external login but incorrectly preserves session identifiers across the authorization process. The application allows the session ID set before the OAuth login to persist and bind to the authenticated session. To solve: Hijack Carlos's authenticated session by fixing a session ID and triggering OAuth login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JSON Web Tokens (JWTs) to authorize access to admin functionality but improperly trusts the algorithm field in incoming tokens. The verification step trusts tokens with alg=none or switched signing algorithms. To solve: Forge a valid JWT granting admin access using algorithm confusion.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in access token verification\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) to authorize access to admin functionality but improperly trusts the algorithm field in incoming tokens. The verification step trusts tokens with alg=none or switched signing algorithms. To solve: Forge a valid JWT granting admin access using algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Bypassing MFA with misconfigured OTP verification logic", "target": "{\"Lab scenario\": \"Bypassing MFA with misconfigured OTP verification logic\", \"Lab Description\": \"The application uses an OTP-based second factor of authentication but verifies only the presence—not validity—of the OTP. A user can bypass this step by submitting a malformed or missing value. To solve: Access Carlos's account page without knowing the valid OTP.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation via token reuse vulnerability in login endpoint", "target": "{\"Lab scenario\": \"Session Fixation via token reuse vulnerability in login endpoint\", \"Lab Description\": \"The application's login logic accepts externally supplied session tokens, leading to a session fixation vulnerability. The application uses a cookie named `session` but does not regenerate it after login. To solve: Fixate a session for Carlos before he logs in, then use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT none algorithm vulnerability in authentication token validation logic", "target": "{\"Lab scenario\": \"JWT none algorithm vulnerability in authentication token validation logic\", \"Lab Description\": \"The REST API uses JWTs for user authentication, but fails to enforce proper signature verification. It improperly accepts tokens with the `alg` header set to `none`. To solve: Forge a valid-looking JWT token with `none` algorithm and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth redirect uri manipulation in third-party authentication handler", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in third-party authentication handler\", \"Lab Description\": \"The app implements OAuth 2.0 login via a third-party provider but does not validate the `redirect_uri` parameter. This allows an attacker to manipulate the flow and capture authorization codes. To solve: Hijack Carlos’s OAuth login flow to gain access to his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Algorithm Confusion in Authorization Header", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens for session authentication but fails to verify the signing algorithm securely. The token is accepted even if the algorithm is changed to 'none'. The application embeds user roles inside JWTs and uses these to enforce access control. To solve: Access the /admin endpoint as an admin without valid credentials by manipulating the JWT header and payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id in cookie", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID in Cookie\", \"Lab Description\": \"The application assigns static session tokens based on usernames, which are reused on login and not regenerated after successful authentication. This allows an attacker to force a victim to use a known session ID. To solve: Fixate Carlos's session ID and gain access to his authenticated account without knowing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration in Redirect URI Validation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application uses OAuth for login via a third-party provider but fails to enforce strict validation of the redirect URI. This allows attackers to intercept authorization codes by manipulating the redirect_uri parameter. To solve: Capture Carlos's authorization code and exchange it for an access token to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: jwt algorithm confusion in access control middleware", "target": "{\"Lab scenario\": \"JWT algorithm confusion in access control middleware\", \"Lab Description\": \"This lab contains a JWT implementation vulnerable to algorithm confusion. The application uses the 'alg' field from the token header without enforcing a fixed algorithm, allowing a switch from RS256 to HS256 with the public key as HMAC secret. To solve: Forge a JWT token to impersonate the admin user and access /admin/dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via login redirection token", "target": "{\"Lab scenario\": \"Session fixation via login redirection token\", \"Lab Description\": \"This lab implements a redirection-based login flow where a session token is pre-assigned and reused across accounts. The session fixation vulnerability arises due to the application honoring the token provided in the URL even after successful login. To solve: Fix a session for Carlos and access /my-account as him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code leakage via referer header", "target": "{\"Lab scenario\": \"OAuth authorization code leakage via Referer header\", \"Lab Description\": \"This lab is vulnerable due to improper handling of OAuth 2.0 authorization codes which can leak via the Referer header to third-party domains. The app does not validate the 'redirect_uri' domain properly, allowing attackers to steal codes. To solve: Leak the victim's code to your server and redeem it to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm bypass in authorization header", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in Authorization header\", \"Lab Description\": \"The application uses JWTs to manage user sessions but fails to validate the signature if the algorithm is set to 'none'. The JWT token is sent via the Authorization header in a Bearer scheme. To solve: Forge a valid admin JWT using the 'none' algorithm and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via cookie injection during login", "target": "{\"Lab scenario\": \"Session fixation via cookie injection during login\", \"Lab Description\": \"The login flow accepts any session cookie provided by the user and binds it to the authenticated session. There is no session regeneration after login, allowing session fixation attacks. To solve: Fixate a session for the victim and hijack their session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code reuse flaw", "target": "{\"Lab scenario\": \"OAuth authorization code reuse flaw\", \"Lab Description\": \"The application integrates with an OAuth provider for login but fails to enforce single-use authorization codes. This allows an attacker to reuse a previously intercepted OAuth code to hijack a session. To solve: Reuse an intercepted authorization code to log in as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements JWT-based authentication for accessing sensitive resources. The application verifies JWT tokens using a static secret but does not enforce the signing algorithm properly. To solve the lab, forge a valid JWT and access the admin panel without valid credentials.", "target": "{\"Lab scenario\": \"JWT tampering in Authorization header\", \"Lab Description\": \"This lab implements JWT-based authentication for accessing sensitive resources. The application verifies JWT tokens using a static secret but does not enforce the signing algorithm properly. To solve the lab, forge a valid JWT and access the admin panel without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via predictable session id in soap api", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in SOAP API\", \"Lab Description\": \"The SOAP-based login service allows an attacker to define the session ID prior to authentication, leading to session fixation. The application does not regenerate session IDs upon login. To solve the lab, fix a session for the victim and hijack their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration leaking access token in redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access token in redirect\", \"Lab Description\": \"The application integrates OAuth login using a third-party provider but leaks the access token in the URL fragment after redirection. This token can be captured and reused. To solve the lab, obtain Carlos's access token from the redirect URL and use it to access his private data endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application's GraphQL login mutation does not issue new session tokens after authentication. Instead, it reuses any existing session token from unauthenticated users. This leads to a session fixation vulnerability. The application accepts session cookies before login and continues using them post-authentication without rotation. To solve: Fixate Carlos's session ID, then authenticate using his credentials and hijack his session.", "target": "{\"Lab scenario\": \"Session fixation via insecure session reuse in GraphQL login flow\", \"Lab Description\": \"The application's GraphQL login mutation does not issue new session tokens after authentication. Instead, it reuses any existing session token from unauthenticated users. This leads to a session fixation vulnerability. The application accepts session cookies before login and continues using them post-authentication without rotation. To solve: Fixate Carlos's session ID, then authenticate using his credentials and hijack his session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT 'none' algorithm manipulation in REST API authentication", "target": "{\"Lab scenario\": \"JWT 'none' algorithm manipulation in REST API authentication\", \"Lab Description\": \"The application uses stateless JWTs for authentication and accepts unsigned JWTs due to incorrect validation logic. By manipulating the 'alg' header of the JWT to 'none', an attacker can forge valid session tokens. The application fails to reject tokens that lack valid signatures. To solve: Forge an unsigned JWT that grants admin access and retrieve sensitive data from the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application integrates with a third-party OAuth provider but fails to validate redirect URIs properly in the implicit flow. An attacker can craft a malicious redirect URI pointing to their controlled domain, capturing the access token directly from the URL fragment. To solve: Capture Carlos's OAuth access token and use it to fetch his protected profile from /oauth/profile.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leading to token theft via redirect URI manipulation\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to validate redirect URIs properly in the implicit flow. An attacker can craft a malicious redirect URI pointing to their controlled domain, capturing the access token directly from the URL fragment. To solve: Capture Carlos's OAuth access token and use it to fetch his protected profile from /oauth/profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in REST Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in REST Login Flow\", \"Lab Description\": \"This lab simulates a flawed session management implementation where a session ID can be pre-assigned and accepted post-authentication. The application fails to invalidate existing session cookies on login. To solve: Hijack Carlos's session after successful login by forcing him to use your pre-assigned session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT None Algorithm in Authorization Header", "target": "{\"Lab scenario\": \"JWT None Algorithm in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens to authenticate GraphQL API requests, but fails to properly enforce the signing algorithm. The server accepts tokens signed with `alg: none`, allowing unauthorized access. To solve: Forge a token for Carlos and access his GraphQL user profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth code interception in redirect uri", "target": "{\"Lab scenario\": \"OAuth Code Interception in Redirect URI\", \"Lab Description\": \"This lab features an OAuth authorization implementation vulnerable to redirect URI manipulation. The app accepts unvalidated redirect URIs and sends valid authorization codes to attacker-controlled endpoints. To solve: Intercept Carlos’s authorization code and exchange it for an access token to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: jwt none algorithm tampering in authorization header", "target": "{\"Lab scenario\": \"JWT None algorithm tampering in Authorization header\", \"Lab Description\": \"The application uses JWT for authorization, but improperly handles the 'alg' field in tokens. The application accepts JWTs with the 'alg' value set to 'none', leading to signature bypass. To solve: forge a JWT for the admin user and access their protected dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth implicit flow misconfiguration in redirect_uri validation", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in redirect_uri validation\", \"Lab Description\": \"The application implements OAuth 2.0 using the implicit grant flow but improperly validates the 'redirect_uri' parameter. This flaw allows redirection-based token theft. To solve: intercept and steal a victim's token by exploiting open redirect behavior.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation via static session identifier in login flow", "target": "{\"Lab scenario\": \"Session fixation via static session identifier in login flow\", \"Lab Description\": \"The application fails to issue a new session ID after login, making it vulnerable to session fixation. An attacker can set a known session ID before login and force the victim to use it. To solve: hijack Carlos's session by fixing a session ID pre-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation in REST Login Flow", "target": "{\"Lab scenario\": \"Session Fixation in REST Login Flow\", \"Lab Description\": \"This lab is vulnerable to session fixation. The application sets a session cookie before authentication and does not issue a new one after login. To solve: hijack Carlos's session using a fixed session ID and access his account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This GraphQL-based application uses JWTs for authentication. It accepts 'none' as the JWT algorithm and fails to validate the token signature. To solve: forge a token using 'none' algorithm and access Carlos's profile via a GraphQL query.", "target": "{\"Lab scenario\": \"JWT Signature Algorithm Confusion in GraphQL Auth\", \"Lab Description\": \"This GraphQL-based application uses JWTs for authentication. It accepts 'none' as the JWT algorithm and fails to validate the token signature. To solve: forge a token using 'none' algorithm and access Carlos's profile via a GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth authorization code interception via open redirect", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect\", \"Lab Description\": \"This OAuth integration leaks authorization codes via a poorly validated redirect_uri parameter. To solve: intercept Carlos’s OAuth code via open redirect and exchange it for an access token to view his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login endpoint via cookie parameter injection", "target": "{\"Lab scenario\": \"Session Fixation in login endpoint via Cookie Parameter Injection\", \"Lab Description\": \"The application allows a session identifier to be set via a request cookie prior to authentication. This behavior allows an attacker to fixate a session and hijack the victim's account after they log in. The application accepts and reuses session tokens passed through cookies even before login. To solve: hijack Carlos's session post-login using a fixated session value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs for authentication but does not enforce strong algorithm validation, enabling algorithm substitution. The app accepts JWTs signed using 'none' or changes in algorithm headers. To solve: craft a JWT for Carlos without a valid key using the 'none' algorithm and access his account.", "target": "{\"Lab scenario\": \"JWT Key Confusion via Algorithm Manipulation\", \"Lab Description\": \"The application uses JWTs for authentication but does not enforce strong algorithm validation, enabling algorithm substitution. The app accepts JWTs signed using 'none' or changes in algorithm headers. To solve: craft a JWT for Carlos without a valid key using the 'none' algorithm and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration in token validation logic", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Validation Logic\", \"Lab Description\": \"The application integrates with an external OAuth provider but does not properly validate the 'aud' claim or client ID. This allows attackers to use a token issued for a different client application to gain access. To solve: obtain an OAuth token from a 3rd-party client and use it to access Carlos's protected account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab’s session handling is vulnerable due to the reuse of session tokens across unauthenticated and authenticated states. The application assigns a session token prior to login and does not rotate it after successful authentication. To solve: Hijack Carlos's session after fixation and access his My account page.", "target": "{\"Lab scenario\": \"Session fixation via unrotated session token post-login\", \"Lab Description\": \"This lab’s session handling is vulnerable due to the reuse of session tokens across unauthenticated and authenticated states. The application assigns a session token prior to login and does not rotate it after successful authentication. To solve: Hijack Carlos's session after fixation and access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: jwt tampering via 'none' algorithm bypass", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm bypass\", \"Lab Description\": \"This lab uses JWTs for session management but fails to enforce signature validation when the 'alg' header is set to 'none'. The application decodes the JWT without verifying its integrity. To solve: Forge a JWT granting access to Carlos's account and retrieve his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab implements OAuth login but misuses the redirect_uri parameter without validation, enabling token leakage via open redirect. To solve: Hijack Carlos's OAuth token using a crafted redirect_uri and access his account page.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect as token delivery\", \"Lab Description\": \"This lab implements OAuth login but misuses the redirect_uri parameter without validation, enabling token leakage via open redirect. To solve: Hijack Carlos's OAuth token using a crafted redirect_uri and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation in password reset flow", "target": "{\"Lab scenario\": \"Session fixation in password reset flow\", \"Lab Description\": \"The application allows attackers to fix a session identifier before a user resets their password. The password reset handler reuses the existing session without invalidating or rotating it. To solve: hijack Carlos's session by setting a fixed session ID before he resets his password, then access his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm in Authorization header\", \"Lab Description\": \"This app accepts JSON Web Tokens for authentication, but fails to properly validate the algorithm used. The backend trusts the 'alg' field in the JWT header. To solve: craft a JWT with 'none' algorithm to impersonate the admin and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a easy Authentication lab for: oauth access token leakage via referer header in redirect", "target": "{\"Lab scenario\": \"OAuth access token leakage via referer header in redirect\", \"Lab Description\": \"The application uses OAuth 2.0 implicit flow and redirects users to a third-party site after authentication. However, the access token is passed in the URL fragment and leaks via the HTTP referer header. To solve: intercept the token leak and use it to access the victim's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login flow", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"The application fails to properly regenerate session identifiers upon successful login. This allows an attacker to fixate a session ID prior to authentication. The application sets the session cookie before validating credentials and continues using the same session post-login. To solve: hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application uses JWTs for authentication, but fails to enforce algorithm restrictions during signature verification. This allows an attacker to craft a forged token by changing the algorithm to 'none'. To solve: forge a valid token for user carlos and access the admin panel.", "target": "{\"Lab scenario\": \"JWT authentication bypass via none algorithm\", \"Lab Description\": \"The application uses JWTs for authentication, but fails to enforce algorithm restrictions during signature verification. This allows an attacker to craft a forged token by changing the algorithm to 'none'. To solve: forge a valid token for user carlos and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in redirect uri", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI\", \"Lab Description\": \"The application integrates a third-party OAuth provider but does not strictly validate redirect URIs. An attacker can manipulate the redirect URI to capture access tokens. To solve: intercept Carlos’s OAuth access token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt authentication bypass via unverified signature in session token", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via Unverified Signature in Session Token\", \"Lab Description\": \"The application uses JWTs for session management but fails to verify the token's signature. This oversight allows attackers to forge tokens with arbitrary payloads. The application grants access based solely on the 'sub' claim without validating the token's integrity. To solve: Modify your JWT to impersonate the 'administrator' user and delete Carlos's account via the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application constructs password reset links using the 'X-Forwarded-Host' header without proper validation. This allows attackers to manipulate the reset link sent to users. The application trusts the header value to generate the reset URL. To solve: Poison the password reset link to redirect to your server, capture Carlos's reset token, and reset his password.", "target": "{\"Lab scenario\": \"Password Reset Poisoning via Middleware in HTTP Headers\", \"Lab Description\": \"The application constructs password reset links using the 'X-Forwarded-Host' header without proper validation. This allows attackers to manipulate the reset link sent to users. The application trusts the header value to generate the reset URL. To solve: Poison the password reset link to redirect to your server, capture Carlos's reset token, and reset his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: broken brute-force protection via multiple credentials per request in login endpoint", "target": "{\"Lab scenario\": \"Broken Brute-Force Protection via Multiple Credentials per Request in Login Endpoint\", \"Lab Description\": \"The application's login endpoint accepts JSON input but fails to handle arrays properly. By sending multiple passwords in an array, attackers can bypass brute-force protection mechanisms. The application processes each password in the array without rate limiting. To solve: Submit a login request with an array of passwords to discover Carlos's password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt none algorithm attack in rest api authentication", "target": "{\"Lab scenario\": \"JWT none algorithm attack in REST API authentication\", \"Lab Description\": \"The application uses JWT-based authentication to protect a RESTful API. However, the backend JWT implementation fails to properly enforce algorithm restrictions. When verifying tokens, it blindly accepts tokens with 'alg':'none' without validating signatures. To solve: forge a JWT for the 'admin' user using 'none' algorithm and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via vulnerable set-cookie path handling in rest login endpoint", "target": "{\"Lab scenario\": \"Session fixation via vulnerable Set-Cookie path handling in REST login endpoint\", \"Lab Description\": \"The application authenticates users via a REST API and sets a session ID in a cookie. However, it does not regenerate the session ID after login. It accepts attacker-supplied session IDs and binds them to authenticated users, leading to session fixation. To solve: Fix a session for 'carlos', log in with it, and access /profile as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses OAuth 2.0 for third-party login. The authorization server is misconfigured and accepts wildcards in redirect_uri. This allows attackers to intercept authorization codes via open redirect-style endpoints. To solve: steal Carlos's OAuth code using a manipulated redirect_uri, then redeem it to access their account.", "target": "{\"Lab scenario\": \"OAuth code injection in redirect_uri during OAuth2.0 authorization flow\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party login. The authorization server is misconfigured and accepts wildcards in redirect_uri. This allows attackers to intercept authorization codes via open redirect-style endpoints. To solve: steal Carlos's OAuth code using a manipulated redirect_uri, then redeem it to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This REST-based web application uses cookie-based session tokens for authentication. The application generates a session ID during login but fails to regenerate or invalidate the session ID upon successful authentication. The session remains fixed even if the login state changes. To solve: hijack Carlos's session by planting a valid session ID before login, then access his My account page after he logs in.", "target": "{\"Lab scenario\": \"Session fixation via predictable token reuse\", \"Lab Description\": \"This REST-based web application uses cookie-based session tokens for authentication. The application generates a session ID during login but fails to regenerate or invalidate the session ID upon successful authentication. The session remains fixed even if the login state changes. To solve: hijack Carlos's session by planting a valid session ID before login, then access his My account page after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering via algorithm confusion", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion\", \"Lab Description\": \"The application uses JWT for session management and validates tokens using the 'alg' field. It accepts tokens signed with both HMAC and RSA but uses the same verification method. This results in an algorithm confusion vulnerability. To solve: forge a JWT using HMAC with a known public key and gain access to Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration via open redirect", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect\", \"Lab Description\": \"The application integrates OAuth2 login via a third-party provider. However, the redirect_uri parameter is improperly validated, enabling attackers to manipulate the OAuth flow. To solve: exploit the open redirect to steal an access token and access the protected account page as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a hard Authentication lab for: soap-based sso session fixation in login workflow", "target": "{\"Lab scenario\": \"SOAP-based SSO Session Fixation in Login Workflow\", \"Lab Description\": \"The application uses a SOAP-based Single Sign-On (SSO) authentication mechanism that fails to regenerate the session identifier after login. The application accepts a session cookie before authentication and keeps it post-login. To solve: Hijack an admin user's session by fixing their session ID via a crafted SOAP request and accessing the /admin/dashboard page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application uses JWTs to authorize users after login, but improperly validates the algorithm field. An attacker can change the algorithm from 'RS256' to 'none' and supply an unsigned token to bypass authentication. To solve: Forge a valid JWT that grants 'admin' privileges and access /admin/flags endpoint.", "target": "{\"Lab scenario\": \"JWT Tampering via Algorithm Confusion in REST API\", \"Lab Description\": \"The application uses JWTs to authorize users after login, but improperly validates the algorithm field. An attacker can change the algorithm from 'RS256' to 'none' and supply an unsigned token to bypass authentication. To solve: Forge a valid JWT that grants 'admin' privileges and access /admin/flags endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The OAuth login flow has a misconfigured redirect_uri that allows open redirection to untrusted domains. An attacker can intercept the authorization code and exchange it for a valid access token. To solve: Steal a victim’s OAuth code and use it to access the /profile endpoint as the victim.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration with Authorization Code Leak via Open Redirect\", \"Lab Description\": \"The OAuth login flow has a misconfigured redirect_uri that allows open redirection to untrusted domains. An attacker can intercept the authorization code and exchange it for a valid access token. To solve: Steal a victim’s OAuth code and use it to access the /profile endpoint as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The SOAP-based authentication flow mishandles session state. The application accepts session IDs from unauthenticated users and preserves them post-login. To solve: hijack a victim's session by pre-setting a session ID and tricking them into using it, then log in yourself using that session.", "target": "{\"Lab scenario\": \"Session Fixation via SOAP API Login Handler\", \"Lab Description\": \"The SOAP-based authentication flow mishandles session state. The application accepts session IDs from unauthenticated users and preserves them post-login. To solve: hijack a victim's session by pre-setting a session ID and tricking them into using it, then log in yourself using that session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt algorithm confusion in graphql login", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in GraphQL Login\", \"Lab Description\": \"The GraphQL authentication service allows JWTs signed with 'none' algorithm. An attacker can forge tokens to impersonate other users. To solve: craft a JWT impersonating 'admin' and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application mishandles session cookies by issuing them before authentication, then reusing them post-login. The vulnerable behavior allows an attacker to fix the session ID for a victim prior to login. To solve: Hijack Carlos's session by forcing him to use a known session ID, then log in and access his account.", "target": "{\"Lab scenario\": \"Session fixation vulnerability via insecure cookie handling in login flow\", \"Lab Description\": \"The application mishandles session cookies by issuing them before authentication, then reusing them post-login. The vulnerable behavior allows an attacker to fix the session ID for a victim prior to login. To solve: Hijack Carlos's session by forcing him to use a known session ID, then log in and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth 2.0 misconfiguration allows redirect_uri manipulation and code interception", "target": "{\"Lab scenario\": \"OAuth 2.0 misconfiguration allows redirect_uri manipulation and code interception\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party login, but it accepts arbitrary redirect_uris due to improper validation. An attacker can intercept authorization codes meant for Carlos. To solve: Gain access to Carlos’s OAuth account by hijacking his authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token tampering in api authentication", "target": "{\"Lab scenario\": \"JWT Token Tampering in API Authentication\", \"Lab Description\": \"This lab involves a vulnerable JWT-based authentication system where the token can be tampered with to impersonate a different user. To solve the lab, exploit the vulnerability by modifying the JWT token to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration allowing unauthorized access", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Allowing Unauthorized Access\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the application allows access to sensitive resources without proper scope validation. To solve the lab, exploit the OAuth misconfiguration by forging an access token with elevated privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"This lab involves a predictable session ID generation mechanism where the attacker can set their own session ID and impersonate an authenticated user. To solve the lab, set the session ID to Carlos's ID and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token manipulation with secret disclosure", "target": "{\"Lab scenario\": \"JWT Token Manipulation with Secret Disclosure\", \"Lab Description\": \"This lab involves a JWT vulnerability where an attacker is able to manipulate the JWT token to impersonate a user. The JWT secret key has been accidentally exposed in the application's source code. The goal is to craft a forged JWT token and use it to gain access to the 'admin' page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in authentication", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability in Authentication\", \"Lab Description\": \"In this lab, an attacker can set the victim's session ID to a known value before they log in, leading to unauthorized access. The goal is to exploit the session fixation vulnerability by forcing a user to authenticate with a predefined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: MFA Bypass via Insecure Backup Codes", "target": "{\"Lab scenario\": \"MFA Bypass via Insecure Backup Codes\", \"Lab Description\": \"In this lab, the backup codes used for Multi-Factor Authentication (MFA) are poorly protected, allowing an attacker to bypass MFA altogether. The attacker can retrieve these backup codes and use them to authenticate without needing the actual second factor.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leading to privilege escalation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Privilege Escalation\", \"Lab Description\": \"This lab demonstrates a misconfigured OAuth flow where an attacker can escalate their privileges by exploiting the application's access control. The attacker can manipulate OAuth tokens to gain unauthorized access to sensitive resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability in a web application. The session ID is not regenerated upon login, which allows an attacker to set a fixed session ID for a target user. To solve this lab, fix a session ID for Carlos and log in to his account page.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in user login\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in a web application. The session ID is not regenerated upon login, which allows an attacker to set a fixed session ID for a target user. To solve this lab, fix a session ID for Carlos and log in to his account page.\", \"Vulnerability name\": \"Session Fixation\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a JWT Tampering scenario. Example: JWT token manipulation to bypass authentication", "target": "{\"Lab scenario\": \"JWT token manipulation to bypass authentication\", \"Lab Description\": \"In this lab, a web application is vulnerable to JWT token tampering. An attacker can modify the JWT token’s payload to impersonate Carlos and access his account page. The goal is to craft and inject a manipulated JWT to bypass authentication.\", \"Vulnerability name\": \"JWT Tampering\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: In this lab, OAuth misconfiguration allows unauthorized access to a user's account by exploiting improper token validation. The goal is to use a valid OAuth token to impersonate Carlos and gain access to his account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing unauthorized access\", \"Lab Description\": \"In this lab, OAuth misconfiguration allows unauthorized access to a user's account by exploiting improper token validation. The goal is to use a valid OAuth token to impersonate Carlos and gain access to his account.\", \"Vulnerability name\": \"OAuth Misconfiguration\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: In this lab, JWT tokens are used for user authentication. However, the tokens are not properly verified, allowing you to modify the JWT payload to impersonate other users. To solve the lab, impersonate the admin user by modifying a JWT token and access the admin dashboard.", "target": "{\"Lab scenario\": \"JWT token tampering and impersonation\", \"Lab Description\": \"In this lab, JWT tokens are used for user authentication. However, the tokens are not properly verified, allowing you to modify the JWT payload to impersonate other users. To solve the lab, impersonate the admin user by modifying a JWT token and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab is vulnerable to session fixation, where an attacker can set a valid session ID for the victim and force them to authenticate with it. To solve the lab, perform a session fixation attack and access the victim's account page.", "target": "{\"Lab scenario\": \"Session fixation attack\", \"Lab Description\": \"This lab is vulnerable to session fixation, where an attacker can set a valid session ID for the victim and force them to authenticate with it. To solve the lab, perform a session fixation attack and access the victim's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration with sensitive data exposure", "target": "{\"Lab scenario\": \"OAuth misconfiguration with sensitive data exposure\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where an unauthorized user can obtain an access token to access sensitive user data. To solve the lab, exploit the misconfiguration to retrieve sensitive user data by using an OAuth authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Forgery via Insecure Signature", "target": "{\"Lab scenario\": \"JWT Token Forgery via Insecure Signature\", \"Lab Description\": \"This lab is vulnerable to JWT token tampering. The server improperly validates the signature of a JWT, allowing an attacker to forge a new token with elevated privileges. The application uses JWT for user authentication but lacks proper verification of the token signature. To solve this lab, forge a JWT token for the admin user and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session Fixation Vulnerability", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability. The server does not regenerate the session ID after login, allowing an attacker to set a valid session ID beforehand. The attacker can then hijack the session of another user by setting the session ID to one they control. To solve the lab, set the session ID to an attacker-controlled value and access the victim’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leading to authorization bypass", "target": "{\"Lab scenario\": \"OAuth Misconfiguration leading to Authorization Bypass\", \"Lab Description\": \"This lab involves an OAuth misconfiguration. The authorization server is not properly validating scopes, allowing unauthorized users to access restricted resources. The application uses OAuth for authorization, but the scopes are incorrectly configured. To solve this lab, manipulate the OAuth token to request unauthorized access to the admin's resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Tampering to Gain Unauthorized Access", "target": "{\"Lab scenario\": \"JWT Token Tampering to Gain Unauthorized Access\", \"Lab Description\": \"This lab demonstrates a JWT token vulnerability. The application uses JWT tokens for session management but does not validate the claims properly, allowing an attacker to tamper with the token's payload and gain unauthorized access. To solve the lab, tamper with the JWT token and access the user's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation exploit", "target": "{\"Lab scenario\": \"Session Fixation Exploit\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability, where an attacker can set the session ID before a user logs in, gaining access to the victim's session after they authenticate. To solve the lab, fixate the session ID, log in as the victim, and access the victim's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration - Token Capture", "target": "{\"Lab scenario\": \"OAuth Misconfiguration - Token Capture\", \"Lab Description\": \"This lab focuses on an OAuth misconfiguration where an attacker can capture and misuse an OAuth access token to impersonate the victim. The goal is to capture the access token and use it to access a protected resource without authorization.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation attack", "target": "{\"Lab scenario\": \"Session fixation attack\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation. A user can be forced to use a fixed session ID, allowing an attacker to hijack the session after login. The application does not regenerate the session ID after authentication. To solve the lab, you need to manipulate the session ID to hijack Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab features a vulnerable JWT implementation where the application does not properly validate the signature of the token. An attacker can modify the payload to impersonate any user. To solve the lab, you need to modify the JWT to access Carlos's account.", "target": "{\"Lab scenario\": \"JWT tampering and session hijacking\", \"Lab Description\": \"This lab features a vulnerable JWT implementation where the application does not properly validate the signature of the token. An attacker can modify the payload to impersonate any user. To solve the lab, you need to modify the JWT to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration with excessive scopes", "target": "{\"Lab scenario\": \"OAuth misconfiguration with excessive scopes\", \"Lab Description\": \"This lab features a vulnerable OAuth implementation where a user can request excessive permissions (scopes) during authorization. The OAuth provider does not properly restrict these scopes. To solve the lab, you need to exploit the OAuth misconfiguration to gain access to Carlos’s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token manipulation in REST API", "target": "{\"Lab scenario\": \"JWT token manipulation in REST API\", \"Lab Description\": \"This lab contains a RESTful API with JWT-based authentication. The application does not correctly validate the JWT, allowing for tampering with token data. To solve the lab, manipulate the JWT to access Carlos's admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration in third-party integration", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party integration\", \"Lab Description\": \"This lab involves an OAuth2-based authentication system integrated with a third-party service. The application is vulnerable due to improper scope and client ID validation. To solve the lab, bypass the OAuth scope restrictions to access admin functionality.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where session fixation vulnerability in soap api", "target": "{\"Lab scenario\": \"Session fixation vulnerability in SOAP API\", \"Lab Description\": \"This lab involves a SOAP-based authentication API where the session ID is not properly regenerated upon login. The session ID remains fixed, allowing for session fixation attacks. To solve the lab, fix the session ID and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token manipulation for unauthorized access", "target": "{\"Lab scenario\": \"JWT Token Manipulation for Unauthorized Access\", \"Lab Description\": \"This lab's JWT-based authentication mechanism is vulnerable to token manipulation. The application does not verify the integrity of the JWT token and allows unauthorized access by altering the claims. To solve this lab, you need to access a restricted page by manipulating the JWT token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack via manipulated session id", "target": "{\"Lab scenario\": \"Session Fixation Attack via Manipulated Session ID\", \"Lab Description\": \"This lab contains a session management vulnerability where the session ID is set prior to authentication. An attacker can exploit this by manipulating the session ID before login to gain unauthorized access. To solve the lab, you need to log into Carlos’s account by fixing the session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: oauth misconfiguration leading to privilege escalation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Privilege Escalation\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the application grants elevated permissions based on a misconfigured authorization server. The attacker can exploit this misconfiguration to escalate privileges. To solve this lab, you need to obtain admin-level access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token manipulation for unauthorized access", "target": "{\"Lab scenario\": \"JWT Token Manipulation for Unauthorized Access\", \"Lab Description\": \"In this lab, the application improperly validates JWT tokens for authorization. While logged in, the JWT token is exposed to manipulation and can be used to escalate privileges. The goal is to manipulate the token to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a hard Authentication lab for: session fixation vulnerability in login flow", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability in Login Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in the login flow. The application does not regenerate the session ID after a successful login, allowing an attacker to set a session ID and hijack the victim's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab involves an OAuth misconfiguration in a third-party service that allows an attacker to hijack the authorization process and gain unauthorized access to the victim's account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Account Takeover\", \"Lab Description\": \"This lab involves an OAuth misconfiguration in a third-party service that allows an attacker to hijack the authorization process and gain unauthorized access to the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability where an attacker can force a user to authenticate with a session ID of their choice. The session is fixed before login and cannot be reset after authentication. To solve this lab, hijack the victim's session and access their account page.", "target": "{\"Lab scenario\": \"Session Fixation via URL manipulation\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where an attacker can force a user to authenticate with a session ID of their choice. The session is fixed before login and cannot be reset after authentication. To solve this lab, hijack the victim's session and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt tampering for privilege escalation", "target": "{\"Lab scenario\": \"JWT Tampering for Privilege Escalation\", \"Lab Description\": \"In this lab, the application improperly validates JWT tokens, allowing attackers to tamper with the payload and escalate their privileges. The goal is to modify the JWT to escalate your privileges to admin and access the restricted admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates an OAuth misconfiguration where the client inadvertently exposes an authorization code to an attacker. To solve the lab, intercept and reuse the exposed authorization code to obtain an access token and access the victim's account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration for Token Leakage\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the client inadvertently exposes an authorization code to an attacker. To solve the lab, intercept and reuse the exposed authorization code to obtain an access token and access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab's JWT authentication can be bypassed by tampering with the token in the Authorization header. The token is being sent with the 'Bearer' prefix in the request header. To solve the lab, you need to manipulate the JWT token to impersonate the 'admin' user and access their dashboard page.", "target": "{\"Lab scenario\": \"JWT Token Manipulation in Authorization Header\", \"Lab Description\": \"This lab's JWT authentication can be bypassed by tampering with the token in the Authorization header. The token is being sent with the 'Bearer' prefix in the request header. To solve the lab, you need to manipulate the JWT token to impersonate the 'admin' user and access their dashboard page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation in login process", "target": "{\"Lab scenario\": \"Session Fixation in Login Process\", \"Lab Description\": \"This lab is vulnerable to session fixation, where the session ID is set by the attacker and not regenerated after login. To solve the lab, you need to fix the session ID and use it to authenticate as Carlos after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a broken OAuth flow where the application doesn't properly validate the 'state' parameter in the OAuth redirect. To solve the lab, you need to intercept the OAuth callback request and modify the 'state' parameter to gain unauthorized access to the user account.", "target": "{\"Lab scenario\": \"Broken OAuth Flow in External API\", \"Lab Description\": \"This lab demonstrates a broken OAuth flow where the application doesn't properly validate the 'state' parameter in the OAuth redirect. To solve the lab, you need to intercept the OAuth callback request and modify the 'state' parameter to gain unauthorized access to the user account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt signature bypass", "target": "{\"Lab scenario\": \"JWT Signature Bypass\", \"Lab Description\": \"This lab involves a vulnerable JWT-based authentication system where the server does not properly verify the algorithm used for signing the token. You can exploit this vulnerability to bypass authentication. The lab's goal is to forge a JWT with a different signing algorithm to impersonate a valid user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation exploit", "target": "{\"Lab scenario\": \"Session Fixation Exploit\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where an attacker can set a session ID for a user before they authenticate. Exploiting this flaw, the attacker can force the application to use their own session ID, gaining unauthorized access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration exploit", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Exploit\", \"Lab Description\": \"This lab involves a misconfigured OAuth 2.0 authorization flow where the authorization code is exposed in the URL without proper protection. An attacker can intercept the code and use it to gain unauthorized access to the target application.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token tampering in authentication", "target": "{\"Lab scenario\": \"JWT token tampering in authentication\", \"Lab Description\": \"This lab demonstrates a vulnerability in the handling of JWT tokens. The application uses JWT for session management but does not verify the integrity of the token, making it susceptible to manipulation. To solve the lab, you need to tamper with the JWT token and bypass authentication to access the account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation via URL parameter", "target": "{\"Lab scenario\": \"Session fixation via URL parameter\", \"Lab Description\": \"The application allows session fixation attacks through URL parameters. By manipulating the session ID, you can hijack another user's session. To solve the lab, fix the session ID to another user's value and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth misconfiguration allowing unauthorized access", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing unauthorized access\", \"Lab Description\": \"The application uses OAuth for authorization but is misconfigured, allowing unauthorized users to access protected resources. To solve the lab, perform an OAuth misconfiguration exploit to access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: In this lab, the application's JWT authentication system has weak implementation. The JWT is signed using a weak algorithm, allowing the token to be tampered with. To solve the lab, tamper with the JWT token to escalate privileges and access a restricted user account.", "target": "{\"Lab scenario\": \"JWT Token Tampering\", \"Lab Description\": \"In this lab, the application's JWT authentication system has weak implementation. The JWT is signed using a weak algorithm, allowing the token to be tampered with. To solve the lab, tamper with the JWT token to escalate privileges and access a restricted user account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application implements OAuth for user authentication but has a misconfigured token exchange endpoint. By exploiting the misconfiguration, you can hijack an access token from another user and access their account.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration and Token Hijacking\", \"Lab Description\": \"The application implements OAuth for user authentication but has a misconfigured token exchange endpoint. By exploiting the misconfiguration, you can hijack an access token from another user and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability where the application accepts a session ID passed in the URL. By setting the session ID before login, you can hijack a user's session after they log in.", "target": "{\"Lab scenario\": \"Session Fixation Vulnerability\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where the application accepts a session ID passed in the URL. By setting the session ID before login, you can hijack a user's session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "I need a medium Authentication lab for: jwt token manipulation for unauthorized access", "target": "{\"Lab scenario\": \"JWT token manipulation for unauthorized access\", \"Lab Description\": \"In this lab, the JWT token used for authenticating a user can be manipulated, allowing unauthorized access to protected routes. The token has insufficient validation checks, allowing attackers to alter user roles and gain elevated privileges. To solve this lab, gain access to Carlos's admin account by manipulating the JWT token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates a session fixation vulnerability where the attacker can hijack the session of another user. To solve this lab, fix the session ID to a known value, then log in as Carlos and access his account page.", "target": "{\"Lab scenario\": \"Session fixation vulnerability\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where the attacker can hijack the session of another user. To solve this lab, fix the session ID to a known value, then log in as Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: This lab demonstrates an OAuth misconfiguration where the authorization code can be intercepted and reused by an attacker, allowing them to impersonate another user. To solve this lab, intercept and reuse the authorization code to access Carlos's account.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to unauthorized access\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the authorization code can be intercepted and reused by an attacker, allowing them to impersonate another user. To solve this lab, intercept and reuse the authorization code to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Manipulation in Authorization Flow", "target": "{\"Lab scenario\": \"JWT Token Manipulation in Authorization Flow\", \"Lab Description\": \"The application utilizes JWT for authorization but improperly validates the token signature, allowing for manipulation. The goal is to tamper with the JWT token and access a restricted resource that should otherwise be protected.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Create a challenge where: The application is vulnerable to session fixation attacks due to improper handling of session cookies. The goal is to hijack an existing session or fixate a session to gain unauthorized access.", "target": "{\"Lab scenario\": \"Session Fixation Attack via Cookie Manipulation\", \"Lab Description\": \"The application is vulnerable to session fixation attacks due to improper handling of session cookies. The goal is to hijack an existing session or fixate a session to gain unauthorized access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration Leading to Access Token Leak", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Access Token Leak\", \"Lab Description\": \"In this lab, the OAuth implementation is misconfigured, allowing an attacker to gain access to sensitive data by intercepting an access token. The goal is to retrieve the access token and use it to impersonate a user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack in restful api", "target": "{\"Lab scenario\": \"Session Fixation Attack in RESTful API\", \"Lab Description\": \"The application suffers from a session fixation vulnerability. An attacker can set a valid session cookie before the victim logs in, allowing them to hijack the victim’s session once authenticated. To solve the lab, you must exploit this flaw to take control of Carlos's session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where jwt manipulation via tampering", "target": "{\"Lab scenario\": \"JWT Manipulation via Tampering\", \"Lab Description\": \"The application uses JWTs for authentication but the JWT payload is not validated properly. An attacker can manipulate the payload and alter their role to gain unauthorized access to an admin panel. To solve this lab, you must modify the JWT token to impersonate the admin and access restricted resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "I need a medium Authentication lab for: oauth misconfiguration in graphql api", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in GraphQL API\", \"Lab Description\": \"The application uses OAuth for authentication but the OAuth provider is misconfigured, allowing an attacker to impersonate any user by modifying the authorization token. To solve the lab, you must exploit this misconfiguration and access the profile of a user other than Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Token Manipulation for Account Access", "target": "{\"Lab scenario\": \"JWT Token Manipulation for Account Access\", \"Lab Description\": \"This lab contains an authentication vulnerability in JWT token handling. The application relies on the user's JWT token for maintaining a session. The token does not properly validate the claims inside it, allowing an attacker to manipulate the token. To solve this lab, manipulate the JWT token to escalate the user role to an admin and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation attack", "target": "{\"Lab scenario\": \"Session Fixation Attack\", \"Lab Description\": \"The application improperly manages session IDs. Even though the user logs in, the session ID is not regenerated on login. An attacker can set their own session ID before the victim logs in, effectively hijacking the session. To solve this lab, perform a session fixation attack to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leading to unauthorized access", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Unauthorized Access\", \"Lab Description\": \"This lab is vulnerable to improper OAuth configuration, which results in users being able to access other users' resources. The OAuth token request does not properly restrict access to the user's data. To solve this lab, use an OAuth token to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT token tampering with admin access", "target": "{\"Lab scenario\": \"JWT token tampering with admin access\", \"Lab Description\": \"In this lab, a vulnerable JWT-based authentication mechanism is present. The application uses JWT tokens for access control, but the secret key is weak and can be guessed. To solve the lab, the JWT token needs to be tampered with to elevate the user's privileges and access the admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation attack with session hijacking", "target": "{\"Lab scenario\": \"Session fixation attack with session hijacking\", \"Lab Description\": \"The application is vulnerable to a session fixation attack, where the attacker can set a session ID before the user logs in. By exploiting this vulnerability, the attacker can hijack a user's session. To solve the lab, exploit the session fixation flaw and gain access to the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: This lab's OAuth 2.0 implementation is misconfigured, allowing users to access sensitive endpoints without proper authorization. By exploiting this misconfiguration, the attacker can gain unauthorized access to the admin panel. To solve the lab, perform an OAuth flow that grants admin access.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to unauthorized access\", \"Lab Description\": \"This lab's OAuth 2.0 implementation is misconfigured, allowing users to access sensitive endpoints without proper authorization. By exploiting this misconfiguration, the attacker can gain unauthorized access to the admin panel. To solve the lab, perform an OAuth flow that grants admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT tampering for unauthorized access", "target": "{\"Lab scenario\": \"JWT tampering for unauthorized access\", \"Lab Description\": \"This lab involves a vulnerable JWT-based authentication system. The application uses JWT tokens for session management but improperly validates the token signature. To solve the lab, you need to intercept and modify the JWT to impersonate a different user and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: Session fixation attack via cookie manipulation", "target": "{\"Lab scenario\": \"Session fixation attack via cookie manipulation\", \"Lab Description\": \"This lab involves a vulnerable session management mechanism where the session ID is set by the server in a predictable way. By manipulating the session cookie, you can hijack the session and access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where oauth misconfiguration leading to unauthorized access", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to unauthorized access\", \"Lab Description\": \"This lab involves a misconfigured OAuth implementation, allowing users to access sensitive information without proper authorization. The goal is to gain access to an admin's account by exploiting the OAuth flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Develop a Authentication lab where jwt token manipulation in authorization header", "target": "{\"Lab scenario\": \"JWT Token Manipulation in Authorization Header\", \"Lab Description\": \"The application uses JWT for user authentication. A flaw exists in how JWTs are validated, allowing attackers to manipulate the token to bypass authorization. To solve the lab, craft a tampered JWT token with the role 'admin' and use it to access Carlos's admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration in Third-party Service", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Third-party Service\", \"Lab Description\": \"The application allows users to authenticate via a third-party OAuth provider. Due to misconfigurations, it allows an attacker to obtain a valid access token and impersonate any user. To solve the lab, acquire an access token for Carlos and use it to gain unauthorized access to his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Create a challenge where: The application is vulnerable to session fixation attacks where the session ID is passed via a URL parameter. An attacker can fix the victim's session ID and hijack their session. To solve the lab, fix Carlos's session ID to your own and access his account page.", "target": "{\"Lab scenario\": \"Session Fixation Attack via URL Parameter\", \"Lab Description\": \"The application is vulnerable to session fixation attacks where the session ID is passed via a URL parameter. An attacker can fix the victim's session ID and hijack their session. To solve the lab, fix Carlos's session ID to your own and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Develop a Authentication lab where session fixation via predictable session id", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Session ID\", \"Lab Description\": \"In this lab, session fixation occurs because the server assigns a predictable session ID to the user when they log in. The attacker can set a session ID in advance, making it possible to hijack the session after the victim logs in. To solve the lab, force the server to accept a fixed session ID and gain access to Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Simulate a Authentication scenario. Example: JWT Tampering in Authorization Header", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header\", \"Lab Description\": \"This lab demonstrates a vulnerability where the JWT token is not properly signed, allowing for tampering of user data. The application does not properly verify the JWT's integrity, allowing an attacker to modify the token to impersonate Carlos and gain access to his account. To solve the lab, modify the JWT and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Simulate a Authentication scenario. Example: OAuth Misconfiguration Leading to Privilege Escalation", "target": "{\"Lab scenario\": \"OAuth Misconfiguration Leading to Privilege Escalation\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where an attacker can gain unauthorized access to an admin account by exploiting an improperly configured OAuth authorization flow. The attacker needs to manipulate the OAuth request to escalate privileges. To solve the lab, manipulate the OAuth flow to escalate to an admin role and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
