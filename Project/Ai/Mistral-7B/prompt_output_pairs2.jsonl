{"prompt": "Lab: XSS in WebAssembly Component Model Type Reflection\nDescription: Plugin system uses WASM components with unsafe interface type reflection. The application renders component exports via innerHTML during debugging. To solve: Inject HTML through malformed UTF-8 in component adapter strings.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"XSS in WebAssembly Component Model Type Reflection\", \"Lab Description\": \"Plugin system uses WASM components with unsafe interface type reflection. The application renders component exports via innerHTML during debugging. To solve: Inject HTML through malformed UTF-8 in component adapter strings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS Masonry Layout XSS in Design Portfolio\nDescription: Portfolio builder implements CSS masonry layouts with unsafe grid-template-area names. The application reflects user input in CSSOM via insertRule(). To solve: Break layout context through area name injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Masonry Layout XSS in Design Portfolio\", \"Lab Description\": \"Portfolio builder implements CSS masonry layouts with unsafe grid-template-area names. The application reflects user input in CSSOM via insertRule(). To solve: Break layout context through area name injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Web Serial API XSS in Industrial Control System\nDescription: SCADA interface processes serial port data with unsafe TextDecoderStream handling. The application renders device output via innerText with CSS unescape. To solve: Spoof serial devices with payloads in handshake messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Web Serial API XSS in Industrial Control System\", \"Lab Description\": \"SCADA interface processes serial port data with unsafe TextDecoderStream handling. The application renders device output via innerText with CSS unescape. To solve: Spoof serial devices with payloads in handshake messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Integrity Bypass in Micro-Frontend Host\nDescription: Cloud platform dynamically constructs import maps from URL parameters with lax integrity checks. To solve: Hijack module resolution via hash collision attacks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Integrity Bypass in Micro-Frontend Host\", \"Lab Description\": \"Cloud platform dynamically constructs import maps from URL parameters with lax integrity checks. To solve: Hijack module resolution via hash collision attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SVG Font Loading XSS in E-Learning Platform\nDescription: Courseware renders SVG fonts with unsafe <hkern> element parsing. The application uses DOMPurify 3.0.0 with whitelisted font tags. To solve: Inject XSS through glyph kerning pair overflows.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Font Loading XSS in E-Learning Platform\", \"Lab Description\": \"Courseware renders SVG fonts with unsafe <hkern> element parsing. The application uses DOMPurify 3.0.0 with whitelisted font tags. To solve: Inject XSS through glyph kerning pair overflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in Healthcare Portal PDF Generator\nDescription: Patient record system generates PDFs using untrusted input in client-side HTML-to-PDF conversion. The application injects user-controlled data into PDF templates without sanitization. To solve: Execute JavaScript when viewing PDFs in vulnerable browsers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Healthcare Portal PDF Generator\", \"Lab Description\": \"Patient record system generates PDFs using untrusted input in client-side HTML-to-PDF conversion. The application injects user-controlled data into PDF templates without sanitization. To solve: Execute JavaScript when viewing PDFs in vulnerable browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IoT Device Management Console\nDescription: Smart home dashboard stores device names in MongoDB with dangerous AngularJS sandbox escape. The application renders names via innerHTML. To solve: Achieve persistent XSS using prototype pollution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IoT Device Management Console\", \"Lab Description\": \"Smart home dashboard stores device names in MongoDB with dangerous AngularJS sandbox escape. The application renders names via innerHTML. To solve: Achieve persistent XSS using prototype pollution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in CMS Markdown Processor\nDescription: Blog platform processes Markdown with dangerous DOMPurify 2.4.0 configuration allowing SVG foreignObject. To solve: Achieve XSS via parser differentials in sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in CMS Markdown Processor\", \"Lab Description\": \"Blog platform processes Markdown with dangerous DOMPurify 2.4.0 configuration allowing SVG foreignObject. To solve: Achieve XSS via parser differentials in sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in API Gateway Error Logging\nDescription: Microservice API logs User-Agent headers verbatim in ELK Stack. To solve: Achieve delayed XSS in Kibana Discover tab through HTTP header injection.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in API Gateway Error Logging\", \"Lab Description\": \"Microservice API logs User-Agent headers verbatim in ELK Stack. To solve: Achieve delayed XSS in Kibana Discover tab through HTTP header injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in Chat Application WebSocket Messages\nDescription: Real-time chat app processes WebSocket messages with direct DOM injection. To solve: Trigger XSS via malformed message chunks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Chat Application WebSocket Messages\", \"Lab Description\": \"Real-time chat app processes WebSocket messages with direct DOM injection. To solve: Trigger XSS via malformed message chunks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via WebAssembly SharedArrayBuffer Corruption\nDescription: Financial trading platform uses WebAssembly with SharedArrayBuffer for real-time calculations. The application reflects memory contents in debug UI via innerHTML. To solve: Corrupt shared memory to inject HTML payloads through atomic operations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via WebAssembly SharedArrayBuffer Corruption\", \"Lab Description\": \"Financial trading platform uses WebAssembly with SharedArrayBuffer for real-time calculations. The application reflects memory contents in debug UI via innerHTML. To solve: Corrupt shared memory to inject HTML payloads through atomic operations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CSS @layer Rule Processing\nDescription: Design system builder implements @layer rules with unsafe dynamic style injection. The application allows user-controlled layer names via template literals. To solve: Break style context through layer name injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CSS @layer Rule Processing\", \"Lab Description\": \"Design system builder implements @layer rules with unsafe dynamic style injection. The application allows user-controlled layer names via template literals. To solve: Break style context through layer name injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Stream Hijacking in Multiplayer Game Lobby\nDescription: Browser-based game uses WebTransport for real-time sync with unsafe stream processing. The application concatenates message chunks via innerHTML. To solve: Inject XSS through fragmented stream payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Stream Hijacking in Multiplayer Game Lobby\", \"Lab Description\": \"Browser-based game uses WebTransport for real-time sync with unsafe stream processing. The application concatenates message chunks via innerHTML. To solve: Inject XSS through fragmented stream payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAuthn Credential ID XSS in Enterprise SSO\nDescription: Single sign-on system stores WebAuthn credential IDs without sanitization. The application reflects credential metadata in admin panel via innerHTML. To solve: Inject HTML through crafted attestationObject extensions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn Credential ID XSS in Enterprise SSO\", \"Lab Description\": \"Single sign-on system stores WebAuthn credential IDs without sanitization. The application reflects credential metadata in admin panel via innerHTML. To solve: Inject HTML through crafted attestationObject extensions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in SVG Font Kerning Parsing\nDescription: E-learning platform processes SVG fonts with unsafe <hkern> element handling. The application uses DOMPurify 3.0.0 with broken foreignObject sanitization. To solve: Achieve XSS through glyph kerning pair injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in SVG Font Kerning Parsing\", \"Lab Description\": \"E-learning platform processes SVG fonts with unsafe <hkern> element handling. The application uses DOMPurify 3.0.0 with broken foreignObject sanitization. To solve: Achieve XSS through glyph kerning pair injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via WebGPU Storage Buffer Corruption\nDescription: 3D modeling tool maps GPU storage buffers to debug UI with unsafe memory reflection. The application visualizes WebGPU memory via innerHTML without validation. To solve: Corrupt buffer data to inject HTML through fp16 precision abuse.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via WebGPU Storage Buffer Corruption\", \"Lab Description\": \"3D modeling tool maps GPU storage buffers to debug UI with unsafe memory reflection. The application visualizes WebGPU memory via innerHTML without validation. To solve: Corrupt buffer data to inject HTML through fp16 precision abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CSS Animation Timeline\nDescription: Interactive timeline tool implements scroll-driven animations with unsafe timeline-name handling. The application allows user-controlled animation-timeline names via CSSOM. To solve: Break style context through timeline identifier injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CSS Animation Timeline\", \"Lab Description\": \"Interactive timeline tool implements scroll-driven animations with unsafe timeline-name handling. The application allows user-controlled animation-timeline names via CSSOM. To solve: Break style context through timeline identifier injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebHID Barcode Scanner XSS in Retail Analytics\nDescription: POS system processes USB-HID barcode data with unsafe input handling. The application renders product codes via innerText with CSS unescape. To solve: Spoof barcode scanners with malicious PLU codes in HID reports.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebHID Barcode Scanner XSS in Retail Analytics\", \"Lab Description\": \"POS system processes USB-HID barcode data with unsafe input handling. The application renders product codes via innerText with CSS unescape. To solve: Spoof barcode scanners with malicious PLU codes in HID reports.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in SVG Filter Primitive\nDescription: Analytics dashboard implements SVG feDisplacementMap with unsafe scale handling. The application allows user-controlled filter scales via attribute binding. To solve: Inject XSS through filter primitive parameter overflows.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in SVG Filter Primitive\", \"Lab Description\": \"Analytics dashboard implements SVG feDisplacementMap with unsafe scale handling. The application allows user-controlled filter scales via attribute binding. To solve: Inject XSS through filter primitive parameter overflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Import Maps Hash Collision XSS in Micro-Frontend\nDescription: Enterprise dashboard dynamically loads modules using import maps with weak integrity checks. To solve: Hijack module resolution via crafted SRI hash collisions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Hash Collision XSS in Micro-Frontend\", \"Lab Description\": \"Enterprise dashboard dynamically loads modules using import maps with weak integrity checks. To solve: Hijack module resolution via crafted SRI hash collisions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebCodecs VideoFrame Metadata XSS in Telemedicine Platform\nDescription: Patient video analysis tool processes WebCodecs VideoFrames with unsafe metadata extraction. The application injects user-controlled metadata into debug overlays via innerHTML. To solve: Achieve XSS through crafted video rotation metadata.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs VideoFrame Metadata XSS in Telemedicine Platform\", \"Lab Description\": \"Patient video analysis tool processes WebCodecs VideoFrames with unsafe metadata extraction. The application injects user-controlled metadata into debug overlays via innerHTML. To solve: Achieve XSS through crafted video rotation metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS Font Tech XSS in Digital Publishing\nDescription: E-book reader implements variable fonts with unsafe axis handling. The application allows user-controlled font-variation-settings via CSSOM. To solve: Inject XSS through font tech parameter overflows.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Font Tech XSS in Digital Publishing\", \"Lab Description\": \"E-book reader implements variable fonts with unsafe axis handling. The application allows user-controlled font-variation-settings via CSSOM. To solve: Inject XSS through font tech parameter overflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Bidirectional Stream XSS in Autonomous Drone Control\nDescription: Drone fleet management uses WebTransport bidirectional streams for telemetry with unsafe message concatenation. To solve: Inject fragmented XSS payloads through stream chunk manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Bidirectional Stream XSS in Autonomous Drone Control\", \"Lab Description\": \"Drone fleet management uses WebTransport bidirectional streams for telemetry with unsafe message concatenation. To solve: Inject fragmented XSS payloads through stream chunk manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA 2.0 Role Clobbering in Accessibility Dashboard\nDescription: WCAG compliance tool implements ARIA 2.0 roles with dangerous aria-colcount reflection. The application uses setAttribute('aria-colcount') with raw user input. To solve: Abuse aria-colcount to escape DOM sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA 2.0 Role Clobbering in Accessibility Dashboard\", \"Lab Description\": \"WCAG compliance tool implements ARIA 2.0 roles with dangerous aria-colcount reflection. The application uses setAttribute('aria-colcount') with raw user input. To solve: Abuse aria-colcount to escape DOM sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAssembly Exception XSS in Blockchain Debugger\nDescription: Smart contract IDE handles WebAssembly exceptions with unsafe error message rendering. The application displays exception tags via innerHTML without validation. To solve: Inject HTML through malformed exception tag IDs.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Exception XSS in Blockchain Debugger\", \"Lab Description\": \"Smart contract IDE handles WebAssembly exceptions with unsafe error message rendering. The application displays exception tags via innerHTML without validation. To solve: Inject HTML through malformed exception tag IDs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in Banking Portal PDF Generator\nDescription: The banking portal's PDF statement generator reflects URL parameters without proper DOM sanitization. The application directly embeds user-controlled data into PDF-rendering JavaScript. To solve: Exploit the DOM manipulation to execute arbitrary JavaScript when generating a PDF statement.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Banking Portal PDF Generator\", \"Lab Description\": \"The banking portal's PDF statement generator reflects URL parameters without proper DOM sanitization. The application directly embeds user-controlled data into PDF-rendering JavaScript. To solve: Exploit the DOM manipulation to execute arbitrary JavaScript when generating a PDF statement.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IoT Dashboard Device Naming\nDescription: An industrial IoT management system fails to sanitize device names stored in its NoSQL database. The application renders device names in multiple dashboard views using innerHTML. To solve: Create a malicious device entry that triggers an alert when any user views the device list.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IoT Dashboard Device Naming\", \"Lab Description\": \"An industrial IoT management system fails to sanitize device names stored in its NoSQL database. The application renders device names in multiple dashboard views using innerHTML. To solve: Create a malicious device entry that triggers an alert when any user views the device list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Mutation XSS in Chat Application Message Rendering\nDescription: A real-time chat application's message sanitizer fails to handle SVG namespace mutations. The application uses innerHTML with custom sanitization rules. To solve: Craft a message that bypasses the sanitizer and executes JavaScript when viewed in modern browsers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Chat Application Message Rendering\", \"Lab Description\": \"A real-time chat application's message sanitizer fails to handle SVG namespace mutations. The application uses innerHTML with custom sanitization rules. To solve: Craft a message that bypasses the sanitizer and executes JavaScript when viewed in modern browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in API Gateway Error Handling\nDescription: The REST-to-GraphQL translation layer reflects error messages without proper encoding. The application returns user-controlled parameters in JSON error responses rendered as HTML. To solve: Exploit the error rendering to trigger an XSS in the admin interface.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in API Gateway Error Handling\", \"Lab Description\": \"The REST-to-GraphQL translation layer reflects error messages without proper encoding. The application returns user-controlled parameters in JSON error responses rendered as HTML. To solve: Exploit the error rendering to trigger an XSS in the admin interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Healthcare Portal WebSocket Handshake\nDescription: A patient monitoring system's WebSocket initialization uses unsanitized URL parameters. The application processes handshake parameters through vulnerable client-side routing. To solve: Exploit the WebSocket connection process to execute privileged JavaScript in the EHR interface.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Healthcare Portal WebSocket Handshake\", \"Lab Description\": \"A patient monitoring system's WebSocket initialization uses unsanitized URL parameters. The application processes handshake parameters through vulnerable client-side routing. To solve: Exploit the WebSocket connection process to execute privileged JavaScript in the EHR interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CMS WYSIWYG Editor via Markdown Rendering\nDescription: A headless CMS converts Markdown to HTML using outdated parser with insecure anchor href handling. The application allows privileged users to create public knowledge base articles. To solve: Inject persistent XSS through markdown link syntax that executes in reader's browsers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CMS WYSIWYG Editor via Markdown Rendering\", \"Lab Description\": \"A headless CMS converts Markdown to HTML using outdated parser with insecure anchor href handling. The application allows privileged users to create public knowledge base articles. To solve: Inject persistent XSS through markdown link syntax that executes in reader's browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Social Media Bio Field via Client-Side Template Literals\nDescription: A new social platform renders user bios using unescaped template literals in Vue.js. The application processes user-supplied URLs through client-side routing. To solve: Exploit template interpolation to execute JavaScript in other users' profile views.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Social Media Bio Field via Client-Side Template Literals\", \"Lab Description\": \"A new social platform renders user bios using unescaped template literals in Vue.js. The application processes user-supplied URLs through client-side routing. To solve: Exploit template interpolation to execute JavaScript in other users' profile views.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Video Platform Subtitle Processing\nDescription: A video sharing service's subtitle parser fails to handle HTML5 track element namespace mutations. The application converts SRT to VTT format client-side. To solve: Craft malicious subtitles that execute JavaScript when video reaches 00:01 timestamp.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Video Platform Subtitle Processing\", \"Lab Description\": \"A video sharing service's subtitle parser fails to handle HTML5 track element namespace mutations. The application converts SRT to VTT format client-side. To solve: Craft malicious subtitles that execute JavaScript when video reaches 00:01 timestamp.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Browser Extension CSP Bypass via Chrome Storage\nDescription: A popular Chrome extension stores user preferences in chrome.storage.local without input sanitization. The application's content script injects stored values into visited pages. To solve: Achieve universal XSS across all sites using the extension's privileged context.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Browser Extension CSP Bypass via Chrome Storage\", \"Lab Description\": \"A popular Chrome extension stores user preferences in chrome.storage.local without input sanitization. The application's content script injects stored values into visited pages. To solve: Achieve universal XSS across all sites using the extension's privileged context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in E-commerce Product Customizer via SVG Parameter Injection\nDescription: An online jewelry designer embeds user-controlled SVG parameters in product previews. The application uses client-side XML parsing with namespace injection. To solve: Manipulate SVG viewBox attribute to execute script during product image rendering.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in E-commerce Product Customizer via SVG Parameter Injection\", \"Lab Description\": \"An online jewelry designer embeds user-controlled SVG parameters in product previews. The application uses client-side XML parsing with namespace injection. To solve: Manipulate SVG viewBox attribute to execute script during product image rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Mutation XSS in DICOM Medical Imaging Metadata\nDescription: A telehealth platform's DICOM viewer renders patient metadata using legacy parsing libraries. The application converts DICOM tags to HTML tables without proper namespace isolation. To solve: Inject JavaScript through crafted modality field that executes when radiologists view scan details.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in DICOM Medical Imaging Metadata\", \"Lab Description\": \"A telehealth platform's DICOM viewer renders patient metadata using legacy parsing libraries. The application converts DICOM tags to HTML tables without proper namespace isolation. To solve: Inject JavaScript through crafted modality field that executes when radiologists view scan details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly Memory Corruption to XSS in Trading Platform\nDescription: A stock trading interface uses Rust-compiled WebAssembly for chart rendering with improper JS boundary checks. The application passes user-controlled buffers between Wasm/JS without validation. To solve: Manipulate candle stick data arrays to corrupt memory and achieve script execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Memory Corruption to XSS in Trading Platform\", \"Lab Description\": \"A stock trading interface uses Rust-compiled WebAssembly for chart rendering with improper JS boundary checks. The application passes user-controlled buffers between Wasm/JS without validation. To solve: Manipulate candle stick data arrays to corrupt memory and achieve script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Claim Injection in SPA Admin Panel\nDescription: A React admin dashboard decodes JWT tokens client-side using insecure JSON.parse. The application displays token claims in debug mode without output encoding. To solve: Forge JWT containing XSS payload that executes when admins view user details.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Claim Injection in SPA Admin Panel\", \"Lab Description\": \"A React admin dashboard decodes JWT tokens client-side using insecure JSON.parse. The application displays token claims in debug mode without output encoding. To solve: Forge JWT containing XSS payload that executes when admins view user details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebRTC Data Channel XSS in Video Conferencing App\nDescription: A WebRTC-based collaboration tool renders data channel messages as HTML through insecure postMessage handlers. The application trusts origin validation from STUN server responses. To solve: Inject XSS through manipulated SDP offers that execute in active conference participants' browsers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebRTC Data Channel XSS in Video Conferencing App\", \"Lab Description\": \"A WebRTC-based collaboration tool renders data channel messages as HTML through insecure postMessage handlers. The application trusts origin validation from STUN server responses. To solve: Inject XSS through manipulated SDP offers that execute in active conference participants' browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Electron Protocol Handler XSS in Desktop Analytics Tool\nDescription: A business analytics app registers custom electron:// protocol with insufficient input validation. The application loads untrusted content in privileged context using webview tag. To solve: Achieve OS-level command execution through chained protocol handling and XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Electron Protocol Handler XSS in Desktop Analytics Tool\", \"Lab Description\": \"A business analytics app registers custom electron:// protocol with insufficient input validation. The application loads untrusted content in privileged context using webview tag. To solve: Achieve OS-level command execution through chained protocol handling and XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: XSS via Quantum-Safe Cryptography Dashboard Logs\nDescription: A post-quantum cryptography implementation's monitoring interface insecurely renders lattice-based algorithm parameters. The application converts Kyber-1024 public keys to visual diagrams using innerHTML. To solve: Inject malicious SVG formulas that execute when admins review key rotation logs.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"XSS via Quantum-Safe Cryptography Dashboard Logs\", \"Lab Description\": \"A post-quantum cryptography implementation's monitoring interface insecurely renders lattice-based algorithm parameters. The application converts Kyber-1024 public keys to visual diagrams using innerHTML. To solve: Inject malicious SVG formulas that execute when admins review key rotation logs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Web3 XSS in NFT Marketplace Trait Injection\nDescription: An NFT platform's metadata viewer parses ERC-721 traits as HTML when displaying rare attributes. The application's Ethers.js integration fails to sanitize IPFS-hosted JSON metadata. To solve: Create malicious NFT traits that execute JavaScript when viewed in the marketplace explorer.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Web3 XSS in NFT Marketplace Trait Injection\", \"Lab Description\": \"An NFT platform's metadata viewer parses ERC-721 traits as HTML when displaying rare attributes. The application's Ethers.js integration fails to sanitize IPFS-hosted JSON metadata. To solve: Create malicious NFT traits that execute JavaScript when viewed in the marketplace explorer.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: AR XSS in WebGL Object Loader via 3D Model Metadata\nDescription: A WebAR education platform's Three.js model importer parses GLB file metadata into DOM elements. The application extracts user comments from 3D model headers without sanitization. To solve: Craft a 3D model with XSS payload that executes when teachers inspect student submissions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"AR XSS in WebGL Object Loader via 3D Model Metadata\", \"Lab Description\": \"A WebAR education platform's Three.js model importer parses GLB file metadata into DOM elements. The application extracts user comments from 3D model headers without sanitization. To solve: Craft a 3D model with XSS payload that executes when teachers inspect student submissions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Kubernetes Dashboard XSS via Custom Metric Labels\nDescription: A cluster monitoring dashboard renders Prometheus metrics with label metadata as HTML tooltips. The application's Go template engine fails to escape custom gauge labels. To solve: Inject XSS through kubectl metrics push that executes when operators hover over pod metrics.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Kubernetes Dashboard XSS via Custom Metric Labels\", \"Lab Description\": \"A cluster monitoring dashboard renders Prometheus metrics with label metadata as HTML tooltips. The application's Go template engine fails to escape custom gauge labels. To solve: Inject XSS through kubectl metrics push that executes when operators hover over pod metrics.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: AI Training UI XSS via Model Hyperparameter Injection\nDescription: An MLOps platform's training interface accepts JSON hyperparameters that get rendered in TensorBoard comparisons. The application's Vue-based UI directly interpolates learning rate schedules into DOM. To solve: Inject XSS through optimizer configuration that executes when researchers compare model runs.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"AI Training UI XSS via Model Hyperparameter Injection\", \"Lab Description\": \"An MLOps platform's training interface accepts JSON hyperparameters that get rendered in TensorBoard comparisons. The application's Vue-based UI directly interpolates learning rate schedules into DOM. To solve: Inject XSS through optimizer configuration that executes when researchers compare model runs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blockchain Oracle UI XSS via Smart Contract Event Logs\nDescription: A DeFi yield aggregator's dashboard renders Ethereum event logs from oracle contracts without sanitization. The application decodes logged UTF-8 error messages directly into DOM elements. To solve: Exploit Chainlink oracle deviation alerts to store XSS payload that triggers when users check price feed health.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blockchain Oracle UI XSS via Smart Contract Event Logs\", \"Lab Description\": \"A DeFi yield aggregator's dashboard renders Ethereum event logs from oracle contracts without sanitization. The application decodes logged UTF-8 error messages directly into DOM elements. To solve: Exploit Chainlink oracle deviation alerts to store XSS payload that triggers when users check price feed health.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GIS XSS via GeoJSON Feature Properties in Crisis Map\nDescription: An emergency response system's map viewer parses GeoJSON disaster zones with dangerous property rendering. The application converts feature properties to HTML popups using unsafe DOM methods. To solve: Inject XSS through manipulated flood polygon metadata that executes when responders click map markers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GIS XSS via GeoJSON Feature Properties in Crisis Map\", \"Lab Description\": \"An emergency response system's map viewer parses GeoJSON disaster zones with dangerous property rendering. The application converts feature properties to HTML popups using unsafe DOM methods. To solve: Inject XSS through manipulated flood polygon metadata that executes when responders click map markers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Digital Twin XSS via MQTT Metadata in Factory Control Panel\nDescription: An industrial digital twin system renders MQTT device metadata as HTML tables. The application subscribes to wildcard topics without payload validation. To solve: Publish malicious machine telemetry that executes scripts in maintenance engineers' dashboards.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Digital Twin XSS via MQTT Metadata in Factory Control Panel\", \"Lab Description\": \"An industrial digital twin system renders MQTT device metadata as HTML tables. The application subscribes to wildcard topics without payload validation. To solve: Publish malicious machine telemetry that executes scripts in maintenance engineers' dashboards.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAuthn XSS via Authenticator Attestation Statements\nDescription: A passwordless authentication system displays authenticator metadata from attestationObject without sanitization. The application parses CBOR-encoded device info into debug panels. To solve: Forge malicious FIDO2 credential registration that triggers XSS during security log reviews.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn XSS via Authenticator Attestation Statements\", \"Lab Description\": \"A passwordless authentication system displays authenticator metadata from attestationObject without sanitization. The application parses CBOR-encoded device info into debug panels. To solve: Forge malicious FIDO2 credential registration that triggers XSS during security log reviews.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Serverless Cold Start XSS via Lambda Environment Variables\nDescription: A serverless error tracking portal leaks Lambda environment variables during cold starts. The application renders stack traces with process.env values in admin panels. To solve: Exploit delayed initialization to inject XSS through manipulated function configuration.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Serverless Cold Start XSS via Lambda Environment Variables\", \"Lab Description\": \"A serverless error tracking portal leaks Lambda environment variables during cold starts. The application renders stack traces with process.env values in admin panels. To solve: Exploit delayed initialization to inject XSS through manipulated function configuration.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Serverless Contact Form via Vercel Serverless Function\nDescription: A JAMstack site's contact form stores submissions in CosmosDB through an Azure Function that fails to sanitize Markdown-formatted messages. The application renders entries using dangerouslySetInnerHTML in Next.js. To solve: Inject XSS that triggers when customer service agents review submissions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Serverless Contact Form via Vercel Serverless Function\", \"Lab Description\": \"A JAMstack site's contact form stores submissions in CosmosDB through an Azure Function that fails to sanitize Markdown-formatted messages. The application renders entries using dangerouslySetInnerHTML in Next.js. To solve: Inject XSS that triggers when customer service agents review submissions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Real-Time Code Collaboration Editor via Yjs CRDT\nDescription: A collaborative coding platform using Yjs framework inserts user cursor positions without proper escaping. The application syncs peer activities through WebSocket messages containing raw HTML. To solve: Exploit presence indicator updates to execute code in other collaborators' sessions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Real-Time Code Collaboration Editor via Yjs CRDT\", \"Lab Description\": \"A collaborative coding platform using Yjs framework inserts user cursor positions without proper escaping. The application syncs peer activities through WebSocket messages containing raw HTML. To solve: Exploit presence indicator updates to execute code in other collaborators' sessions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Jupyter Notebook Kernel Output Rendering\nDescription: A cloud-based Jupyter hub fails to sanitize DataFrame HTML outputs containing malicious SVG schemas. The application uses IPython's display() function with raw HTML rendering. To solve: Craft a pandas DataFrame that executes JavaScript when data scientists view cell outputs.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Jupyter Notebook Kernel Output Rendering\", \"Lab Description\": \"A cloud-based Jupyter hub fails to sanitize DataFrame HTML outputs containing malicious SVG schemas. The application uses IPython's display() function with raw HTML rendering. To solve: Craft a pandas DataFrame that executes JavaScript when data scientists view cell outputs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in Swagger UI via OAuth2 Redirect URL\nDescription: An API documentation portal's Swagger implementation reflects OAuth2 callback parameters without encoding. The application uses unsanitized window.location.hash parsing for auth token handling. To solve: Exploit the OAuth implicit flow to execute XSS in developers' API testing sessions.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Swagger UI via OAuth2 Redirect URL\", \"Lab Description\": \"An API documentation portal's Swagger implementation reflects OAuth2 callback parameters without encoding. The application uses unsanitized window.location.hash parsing for auth token handling. To solve: Exploit the OAuth implicit flow to execute XSS in developers' API testing sessions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM XSS in WebAssembly Game Engine via Scoreboard Rendering\nDescription: A browser-based game using Unity WebGL exports player scores to DOM without validation. The application passes strings between Wasm memory and JS using insecure buffer copying. To solve: Manipulate highscore submission to execute script in other players' leaderboard views.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebAssembly Game Engine via Scoreboard Rendering\", \"Lab Description\": \"A browser-based game using Unity WebGL exports player scores to DOM without validation. The application passes strings between Wasm memory and JS using insecure buffer copying. To solve: Manipulate highscore submission to execute script in other players' leaderboard views.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Web Bluetooth API Device Name Parsing\nDescription: A fitness tracking PWA scans nearby Bluetooth devices and displays names using innerHTML. The application caches device metadata in IndexedDB without validation. To solve: Spoof BLE device with XSS payload that executes when users view scan history.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Web Bluetooth API Device Name Parsing\", \"Lab Description\": \"A fitness tracking PWA scans nearby Bluetooth devices and displays names using innerHTML. The application caches device metadata in IndexedDB without validation. To solve: Spoof BLE device with XSS payload that executes when users view scan history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Shopify Theme Liquid Template Injection\nDescription: A Shopify store's custom theme uses unsafe {{ customer.metafield }} rendering. The application's Liquid template disables HTML escaping for promotional banners. To solve: Inject XSS through customer metadata that triggers on product page loads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Shopify Theme Liquid Template Injection\", \"Lab Description\": \"A Shopify store's custom theme uses unsafe {{ customer.metafield }} rendering. The application's Liquid template disables HTML escaping for promotional banners. To solve: Inject XSS through customer metadata that triggers on product page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Apache Superset Dashboard Chart Annotations\nDescription: A business intelligence platform renders markdown annotations in Vega-Lite charts as HTML. The application's SQL Lab feature allows CSV exports with raw HTML. To solve: Craft malicious annotation that executes when analysts export to PDF.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Apache Superset Dashboard Chart Annotations\", \"Lab Description\": \"A business intelligence platform renders markdown annotations in Vega-Lite charts as HTML. The application's SQL Lab feature allows CSV exports with raw HTML. To solve: Craft malicious annotation that executes when analysts export to PDF.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Web Serial API Thermal Printer Emulation\nDescription: An industrial control system web app interacts with serial devices using Web Serial API. The application renders received Uint8Array data as text/html. To solve: Spoof thermal printer output containing XSS that executes in maintenance interface.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Web Serial API Thermal Printer Emulation\", \"Lab Description\": \"An industrial control system web app interacts with serial devices using Web Serial API. The application renders received Uint8Array data as text/html. To solve: Spoof thermal printer output containing XSS that executes in maintenance interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Matter.js Physics Engine Metadata\nDescription: A phygital game uses Matter.js physics engine to sync DOM elements with rigid bodies. The application stores sprite metadata in LocalStorage without validation. To solve: Manipulate collision boundaries to inject XSS that triggers on object impacts.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Matter.js Physics Engine Metadata\", \"Lab Description\": \"A phygital game uses Matter.js physics engine to sync DOM elements with rigid bodies. The application stores sprite metadata in LocalStorage without validation. To solve: Manipulate collision boundaries to inject XSS that triggers on object impacts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in WebXR Hand Tracking Visualization\nDescription: An AR fitness app renders hand joint positions using Three.js without sanitizing debug panel outputs. The application converts WebXR joint data to SVG visualizations using innerHTML. To solve: Manipulate hand tracking data to inject XSS that triggers during gesture recognition calibration.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebXR Hand Tracking Visualization\", \"Lab Description\": \"An AR fitness app renders hand joint positions using Three.js without sanitizing debug panel outputs. The application converts WebXR joint data to SVG visualizations using innerHTML. To solve: Manipulate hand tracking data to inject XSS that triggers during gesture recognition calibration.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in ProseMirror Collaborative Document Version History\nDescription: A legal document editing platform stores ProseMirror JSON content states without sanitizing version diffs. The application renders document history using dangerouslySetInnerHTML. To solve: Inject XSS through track changes metadata that executes when lawyers compare document versions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ProseMirror Collaborative Document Version History\", \"Lab Description\": \"A legal document editing platform stores ProseMirror JSON content states without sanitizing version diffs. The application renders document history using dangerouslySetInnerHTML. To solve: Inject XSS through track changes metadata that executes when lawyers compare document versions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Web NFC Tag Data Parsing\nDescription: A museum exhibit guide PWA reads NFC tags containing exhibit metadata without sanitizing NDEF records. The application processes text records as HTML in the info panel. To solve: Spoof NFC tag containing XSS payload that triggers when visitors scan exhibit markers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Web NFC Tag Data Parsing\", \"Lab Description\": \"A museum exhibit guide PWA reads NFC tags containing exhibit metadata without sanitizing NDEF records. The application processes text records as HTML in the info panel. To solve: Spoof NFC tag containing XSS payload that triggers when visitors scan exhibit markers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in VSCode Web Extension Markdown Preview\nDescription: A VSCode web extension renders GitHub-flavored markdown using insecure reveal.js configuration. The application loads untrusted markdown files with disabled Content Security Policy. To solve: Craft markdown file that executes XSS when previewed in the web-based editor.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in VSCode Web Extension Markdown Preview\", \"Lab Description\": \"A VSCode web extension renders GitHub-flavored markdown using insecure reveal.js configuration. The application loads untrusted markdown files with disabled Content Security Policy. To solve: Craft markdown file that executes XSS when previewed in the web-based editor.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in OpenTelemetry Span Metadata Visualization\nDescription: An observability platform renders OpenTelemetry span attributes as HTML tooltips. The application ingests tracing data without sanitizing span metadata. To solve: Inject XSS through Jaeger tracer configuration that executes when SREs inspect production traces.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in OpenTelemetry Span Metadata Visualization\", \"Lab Description\": \"An observability platform renders OpenTelemetry span attributes as HTML tooltips. The application ingests tracing data without sanitizing span metadata. To solve: Inject XSS through Jaeger tracer configuration that executes when SREs inspect production traces.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in WebHID Gamepad Vibration API\nDescription: A retro gaming emulator site implements custom force feedback using WebHID. The application parses gamepad button mappings from JSON configs without sanitizing device labels. To solve: Inject XSS through malicious controller config that executes during rumble effect rendering.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebHID Gamepad Vibration API\", \"Lab Description\": \"A retro gaming emulator site implements custom force feedback using WebHID. The application parses gamepad button mappings from JSON configs without sanitizing device labels. To solve: Inject XSS through malicious controller config that executes during rumble effect rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Jitsi Meet Virtual Background WebGL Shader\nDescription: A video conferencing platform's virtual background feature processes custom images through Three.js shaders. The application stores user-uploaded GLSL shaders without validation. To solve: Inject XSS through malicious fragment shader that executes when participants enable background effects.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Jitsi Meet Virtual Background WebGL Shader\", \"Lab Description\": \"A video conferencing platform's virtual background feature processes custom images through Three.js shaders. The application stores user-uploaded GLSL shaders without validation. To solve: Inject XSS through malicious fragment shader that executes when participants enable background effects.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in WebTransport Unreliable Datagram Metadata\nDescription: A real-time sports betting app uses WebTransport unreliable datagrams for odds updates. The application renders message headers in debug panels using innerHTML. To solve: Craft datagram packets with XSS payloads that execute when traders inspect network traffic.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in WebTransport Unreliable Datagram Metadata\", \"Lab Description\": \"A real-time sports betting app uses WebTransport unreliable datagrams for odds updates. The application renders message headers in debug panels using innerHTML. To solve: Craft datagram packets with XSS payloads that execute when traders inspect network traffic.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in WebCodecs VideoFrame Metadata Processing\nDescription: A video editing PWA uses WebCodecs API to analyze footage. The application displays frame metadata in SVG timelines without escaping. To solve: Inject XSS through crafted video timestamp metadata that executes during clip scrubbing.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebCodecs VideoFrame Metadata Processing\", \"Lab Description\": \"A video editing PWA uses WebCodecs API to analyze footage. The application displays frame metadata in SVG timelines without escaping. To solve: Inject XSS through crafted video timestamp metadata that executes during clip scrubbing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Deno Fresh Islands Hydration Mismatch\nDescription: A Deno Fresh blog platform passes props to islands components without serialization checks. The application's server-rendered HTML mismatches client-side hydration. To solve: Craft blog post that injects XSS through island prop deserialization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Deno Fresh Islands Hydration Mismatch\", \"Lab Description\": \"A Deno Fresh blog platform passes props to islands components without serialization checks. The application's server-rendered HTML mismatches client-side hydration. To solve: Craft blog post that injects XSS through island prop deserialization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in WebGPU Compute Shader Debug Output\nDescription: A cryptocurrency mining visualizer renders WebGPU shader compilation errors using innerHTML. The application passes compute pipeline metadata to DOM without sanitization. To solve: Craft a shader with XSS payload that executes during pipeline validation failures.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in WebGPU Compute Shader Debug Output\", \"Lab Description\": \"A cryptocurrency mining visualizer renders WebGPU shader compilation errors using innerHTML. The application passes compute pipeline metadata to DOM without sanitization. To solve: Craft a shader with XSS payload that executes during pipeline validation failures.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in WebNN Model Metadata via Tensor Serialization\nDescription: An AI art platform stores ML model metadata in IndexedDB without validation. The application renders ONNX model descriptions as HTML in gallery view. To solve: Inject XSS through model quantization parameters that execute when users browse generated artwork.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in WebNN Model Metadata via Tensor Serialization\", \"Lab Description\": \"An AI art platform stores ML model metadata in IndexedDB without validation. The application renders ONNX model descriptions as HTML in gallery view. To solve: Inject XSS through model quantization parameters that execute when users browse generated artwork.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in IPFS Immutable Content Addressing via CIDv1\nDescription: A decentralized social network renders IPFS-hosted posts using raw CIDv1 resolution. The application converts multibase encoded CIDs to HTML without escaping. To solve: Craft CID containing XSS payload that persists through IPFS pinning.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in IPFS Immutable Content Addressing via CIDv1\", \"Lab Description\": \"A decentralized social network renders IPFS-hosted posts using raw CIDv1 resolution. The application converts multibase encoded CIDs to HTML without escaping. To solve: Craft CID containing XSS payload that persists through IPFS pinning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Web Container Filesystem /proc Access\nDescription: A browser-based IDE using WebContainers mounts /proc/self/environ as world-readable. The application displays environment variables in debug console without sanitization. To solve: Inject XSS through NODE_OPTIONS that executes when developers inspect runtime config.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Web Container Filesystem /proc Access\", \"Lab Description\": \"A browser-based IDE using WebContainers mounts /proc/self/environ as world-readable. The application displays environment variables in debug console without sanitization. To solve: Inject XSS through NODE_OPTIONS that executes when developers inspect runtime config.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAssembly Exception Handling Hijack via EH_FRAME\nDescription: A financial modeling tool loads untrusted Wasm modules with exception handling enabled. The application renders unwind info using innerHTML in debug panels. To solve: Craft Wasm module with malicious .eh_frame section that triggers XSS during stack unwinding.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Exception Handling Hijack via EH_FRAME\", \"Lab Description\": \"A financial modeling tool loads untrusted Wasm modules with exception handling enabled. The application renders unwind info using innerHTML in debug panels. To solve: Craft Wasm module with malicious .eh_frame section that triggers XSS during stack unwinding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in PyTorch Model Hub via TorchScript Metadata\nDescription: A MLOps platform automatically renders model cards from TorchScript archives. The application parses `extra_files` metadata as HTML without sanitization. To solve: Inject XSS through malicious model metadata that executes when researchers view model documentation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in PyTorch Model Hub via TorchScript Metadata\", \"Lab Description\": \"A MLOps platform automatically renders model cards from TorchScript archives. The application parses `extra_files` metadata as HTML without sanitization. To solve: Inject XSS through malicious model metadata that executes when researchers view model documentation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in TensorFlow.js Layer Visualization via Custom Activation Names\nDescription: A neural network playground renders layer configurations from JSON models. The application uses `innerHTML` for activation function labels. To solve: Craft a model JSON file where activation names contain XSS payloads triggering during model summary rendering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in TensorFlow.js Layer Visualization via Custom Activation Names\", \"Lab Description\": \"A neural network playground renders layer configurations from JSON models. The application uses `innerHTML` for activation function labels. To solve: Craft a model JSON file where activation names contain XSS payloads triggering during model summary rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Patient Ventilator Alarm WebSocket Stream\nDescription: A critical care monitoring system renders ventilator alarms using unsanitized WebSocket messages. The application converts HL7 v2 ORU^R01 messages to HTML tables. To solve: Inject XSS through spoofed alarm payload that executes when clinicians acknowledge alerts.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Patient Ventilator Alarm WebSocket Stream\", \"Lab Description\": \"A critical care monitoring system renders ventilator alarms using unsanitized WebSocket messages. The application converts HL7 v2 ORU^R01 messages to HTML tables. To solve: Inject XSS through spoofed alarm payload that executes when clinicians acknowledge alerts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in MRI DICOM Series Description via Modality Worklist\nDescription: A radiology PACS system stores DICOM metadata from MWL queries without sanitizing (0008,103E) SeriesDescription. The application renders study lists using React dangerouslySetInnerHTML. To solve: Inject XSS through modality worklist entry that triggers when loading MRI sequences.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in MRI DICOM Series Description via Modality Worklist\", \"Lab Description\": \"A radiology PACS system stores DICOM metadata from MWL queries without sanitizing (0008,103E) SeriesDescription. The application renders study lists using React dangerouslySetInnerHTML. To solve: Inject XSS through modality worklist entry that triggers when loading MRI sequences.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Infusion Pump Drug Library Validation Errors\nDescription: A smart infusion pump management portal displays drug library validation errors using Vue v-html. The application parses pump logs containing unsanitized drug names. To solve: Craft medication entry that bypasses client-side validation and executes XSS during error review.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Infusion Pump Drug Library Validation Errors\", \"Lab Description\": \"A smart infusion pump management portal displays drug library validation errors using Vue v-html. The application parses pump logs containing unsanitized drug names. To solve: Craft medication entry that bypasses client-side validation and executes XSS during error review.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Telehealth Video Conference Chat\nDescription: A HIPAA-compliant telehealth platform renders participant chat messages using insecure client-side templating. The application uses `document.write()` with unsanitized WebRTC data channel inputs. To solve: Inject XSS through chat that executes when doctors share their screen.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Telehealth Video Conference Chat\", \"Lab Description\": \"A HIPAA-compliant telehealth platform renders participant chat messages using insecure client-side templating. The application uses `document.write()` with unsanitized WebRTC data channel inputs. To solve: Inject XSS through chat that executes when doctors share their screen.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in AI-Powered Mental Health Journal\nDescription: A cognitive behavioral therapy app stores journal entries in Firebase without input validation. The application's sentiment analysis feature renders raw LLM output using Angular's [innerHTML]. To solve: Poison training data to force XSS payload generation in AI responses.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in AI-Powered Mental Health Journal\", \"Lab Description\": \"A cognitive behavioral therapy app stores journal entries in Firebase without input validation. The application's sentiment analysis feature renders raw LLM output using Angular's [innerHTML]. To solve: Poison training data to force XSS payload generation in AI responses.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Autonomous Vehicle Charging Station Map\nDescription: An EV charging network status page uses insecure SVG animations for real-time availability. The application parses Open Charge Point Protocol (OCPP) messages into DOM without escaping. To solve: Inject XSS through spoofed OCPP status notifications.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Autonomous Vehicle Charging Station Map\", \"Lab Description\": \"An EV charging network status page uses insecure SVG animations for real-time availability. The application parses Open Charge Point Protocol (OCPP) messages into DOM without escaping. To solve: Inject XSS through spoofed OCPP status notifications.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Quantum Computing Qubit State Visualization\nDescription: A cloud quantum platform renders qubit state probabilities using WebGL shaders. The application converts user-defined state labels to Three.js tooltips without sanitization. To solve: Inject XSS through crafted state labels that execute when researchers rotate qubit visualizations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Quantum Computing Qubit State Visualization\", \"Lab Description\": \"A cloud quantum platform renders qubit state probabilities using WebGL shaders. The application converts user-defined state labels to Three.js tooltips without sanitization. To solve: Inject XSS through crafted state labels that execute when researchers rotate qubit visualizations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Brain-Computer Interface EEG Data Labeling\nDescription: A neurotech research platform stores EEG channel labels in MongoDB with disabled schema validation. The application renders labels using Angular's innerHTML in 3D brain visualizations. To solve: Inject XSS through BCI2000-compatible channel names that execute during cognitive state classification.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Brain-Computer Interface EEG Data Labeling\", \"Lab Description\": \"A neurotech research platform stores EEG channel labels in MongoDB with disabled schema validation. The application renders labels using Angular's innerHTML in 3D brain visualizations. To solve: Inject XSS through BCI2000-compatible channel names that execute during cognitive state classification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in Satellite Telemetry Display via CCSDS Packets\nDescription: A ground station dashboard parses CCSDS space packets into HTML tables. The application processes secondary headers using DOMParser with insecure XML-to-HTML conversion. To solve: Craft telemetry packets with XSS payloads that execute during solar array deployment visualization.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Satellite Telemetry Display via CCSDS Packets\", \"Lab Description\": \"A ground station dashboard parses CCSDS space packets into HTML tables. The application processes secondary headers using DOMParser with insecure XML-to-HTML conversion. To solve: Craft telemetry packets with XSS payloads that execute during solar array deployment visualization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in LHC Beamline Visualization via ROOT Framework\nDescription: A CERN monitoring tool renders particle collision paths using JavaScript ROOT framework. The application converts user-defined histogram labels to SVG without sanitization. To solve: Inject XSS through crafted TGraphErrors title that executes during beam dump event rendering.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in LHC Beamline Visualization via ROOT Framework\", \"Lab Description\": \"A CERN monitoring tool renders particle collision paths using JavaScript ROOT framework. The application converts user-defined histogram labels to SVG without sanitization. To solve: Inject XSS through crafted TGraphErrors title that executes during beam dump event rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Tokamak Plasma State Monitoring via MDSplus\nDescription: A fusion reactor control system stores diagnostic data in MDSplus trees without input validation. The application renders plasma boundary visualizations using D3.js with dangerous HTML injection. To solve: Inject XSS through magnetic probe calibration metadata that triggers during ELM suppression cycles.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Tokamak Plasma State Monitoring via MDSplus\", \"Lab Description\": \"A fusion reactor control system stores diagnostic data in MDSplus trees without input validation. The application renders plasma boundary visualizations using D3.js with dangerous HTML injection. To solve: Inject XSS through magnetic probe calibration metadata that triggers during ELM suppression cycles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in LIGO Gravitational Wave Alert Dashboard\nDescription: The LIGO-Virgo alert system renders CBC (Compact Binary Coalescence) events in React using dangerouslySetInnerHTML. The application parses GraceDB JSON parameters without escaping. To solve: Inject XSS through mock strain data that executes during matched filtering visualization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in LIGO Gravitational Wave Alert Dashboard\", \"Lab Description\": \"The LIGO-Virgo alert system renders CBC (Compact Binary Coalescence) events in React using dangerouslySetInnerHTML. The application parses GraceDB JSON parameters without escaping. To solve: Inject XSS through mock strain data that executes during matched filtering visualization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in V2X (Vehicle-to-Everything) Message Rendering\nDescription: A smart city traffic system visualizes Basic Safety Messages (BSM) from connected vehicles using insecure innerHTML. The application parses SAE J2735 messages containing unsanitized vehicle IDs. To solve: Spoof BSM packets to inject XSS that triggers when traffic operators view collision warnings.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in V2X (Vehicle-to-Everything) Message Rendering\", \"Lab Description\": \"A smart city traffic system visualizes Basic Safety Messages (BSM) from connected vehicles using insecure innerHTML. The application parses SAE J2735 messages containing unsanitized vehicle IDs. To solve: Spoof BSM packets to inject XSS that triggers when traffic operators view collision warnings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in EV Battery Management Firmware Portal\nDescription: An electric vehicle OEM portal stores battery cell voltage logs in MongoDB with disabled schema validation. The application's React frontend dangerously renders thermal runaway warnings. To solve: Inject XSS through CAN bus dumps that execute when engineers analyze charging patterns.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in EV Battery Management Firmware Portal\", \"Lab Description\": \"An electric vehicle OEM portal stores battery cell voltage logs in MongoDB with disabled schema validation. The application's React frontend dangerously renders thermal runaway warnings. To solve: Inject XSS through CAN bus dumps that execute when engineers analyze charging patterns.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Real-Time Energy Distribution Dashboard\nDescription: A municipal power grid monitoring system reflects unsanitized substation IDs from URL parameters in its React dashboard. The application uses dangerouslySetInnerHTML for phasor measurement unit (PMU) labels. To solve: Inject XSS through crafted URL that triggers when engineers view load imbalance alerts.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Real-Time Energy Distribution Dashboard\", \"Lab Description\": \"A municipal power grid monitoring system reflects unsanitized substation IDs from URL parameters in its React dashboard. The application uses dangerouslySetInnerHTML for phasor measurement unit (PMU) labels. To solve: Inject XSS through crafted URL that triggers when engineers view load imbalance alerts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in Smart Meter Firmware Update Portal\nDescription: An utility company's firmware management system stores meter metadata in PostgreSQL without input validation. The Vue frontend renders device descriptions using v-html. To solve: Inject XSS through DLMS/COSEM protocol simulator that persists across firmware flashes.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Smart Meter Firmware Update Portal\", \"Lab Description\": \"An utility company's firmware management system stores meter metadata in PostgreSQL without input validation. The Vue frontend renders device descriptions using v-html. To solve: Inject XSS through DLMS/COSEM protocol simulator that persists across firmware flashes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in SCADA Alarm Log Visualization\nDescription: A generation plant's HMI parses DNP3 protocol alarm messages into HTML tables. The application's XML-to-DOM converter fails to handle namespaces in SVG-based alerts. To solve: Craft malicious DNP3 object headers that mutate into scripts during refresh cycles.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in SCADA Alarm Log Visualization\", \"Lab Description\": \"A generation plant's HMI parses DNP3 protocol alarm messages into HTML tables. The application's XML-to-DOM converter fails to handle namespaces in SVG-based alerts. To solve: Craft malicious DNP3 object headers that mutate into scripts during refresh cycles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Renewable Energy Forecasting API\nDescription: A wind farm prediction system stores JSONP callback functions in Cassandra without validation. The application's admin panel dynamically creates script tags from stored entries. To solve: Inject XSS through malicious weather data callback that executes when meteorologists view forecasts.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Renewable Energy Forecasting API\", \"Lab Description\": \"A wind farm prediction system stores JSONP callback functions in Cassandra without validation. The application's admin panel dynamically creates script tags from stored entries. To solve: Inject XSS through malicious weather data callback that executes when meteorologists view forecasts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in AMI (Advanced Metering Infrastructure) Headend\nDescription: A smart meter data collection system renders meter IDs from C12.22 protocol messages in Angular templates without sanitization. The application uses bypassSecurityTrustHtml for real-time usage displays. To solve: Spoof C12.22 ReadData responses containing XSS payloads.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in AMI (Advanced Metering Infrastructure) Headend\", \"Lab Description\": \"A smart meter data collection system renders meter IDs from C12.22 protocol messages in Angular templates without sanitization. The application uses bypassSecurityTrustHtml for real-time usage displays. To solve: Spoof C12.22 ReadData responses containing XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in Implantable Cardioverter-Defibrillator (ICD) Remote Monitoring\nDescription: A cardiac device management portal stores episode electrograms in MongoDB without input sanitization. The application's React frontend renders intracardiac signals using dangerouslySetInnerHTML. To solve: Inject XSS through spoofed ventricular tachycardia episodes that execute when cardiologists review arrhythmia logs.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Implantable Cardioverter-Defibrillator (ICD) Remote Monitoring\", \"Lab Description\": \"A cardiac device management portal stores episode electrograms in MongoDB without input sanitization. The application's React frontend renders intracardiac signals using dangerouslySetInnerHTML. To solve: Inject XSS through spoofed ventricular tachycardia episodes that execute when cardiologists review arrhythmia logs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in MRI Quench Detection System\nDescription: A superconducting magnet monitoring dashboard reflects cryogen levels from URL parameters in D3.js visualizations. The application uses innerHTML for emergency quench alerts. To solve: Inject XSS through crafted helium level parameter that triggers during magnet ramp-down sequences.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in MRI Quench Detection System\", \"Lab Description\": \"A superconducting magnet monitoring dashboard reflects cryogen levels from URL parameters in D3.js visualizations. The application uses innerHTML for emergency quench alerts. To solve: Inject XSS through crafted helium level parameter that triggers during magnet ramp-down sequences.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Smart Insulin Pump Configuration Portal\nDescription: A diabetes management system parses basal rate schedules from XML without proper namespace handling. The application's Angular template renders therapy plans using bypassSecurityTrustHtml. To solve: Inject XSS through malicious basal rate entries that execute during bolus calculator usage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Smart Insulin Pump Configuration Portal\", \"Lab Description\": \"A diabetes management system parses basal rate schedules from XML without proper namespace handling. The application's Angular template renders therapy plans using bypassSecurityTrustHtml. To solve: Inject XSS through malicious basal rate entries that execute during bolus calculator usage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in DICOM Radiation Therapy Planning System\nDescription: An oncology treatment platform stores RTSTRUCT DICOM files with unescaped ROI names. The application renders structure sets in Three.js using innerHTML for tooltips. To solve: Inject XSS through malicious ROI annotations that execute during dose-volume histogram analysis.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in DICOM Radiation Therapy Planning System\", \"Lab Description\": \"An oncology treatment platform stores RTSTRUCT DICOM files with unescaped ROI names. The application renders structure sets in Three.js using innerHTML for tooltips. To solve: Inject XSS through malicious ROI annotations that execute during dose-volume histogram analysis.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Patient-Controlled Analgesia (PCA) Pump Log Viewer\nDescription: A pain management system reflects unsanitized drug names from URL parameters in its Vue interface. The application uses v-html for medication history timelines. To solve: Inject XSS through crafted drug parameter that triggers when nurses review administration records.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Patient-Controlled Analgesia (PCA) Pump Log Viewer\", \"Lab Description\": \"A pain management system reflects unsanitized drug names from URL parameters in its Vue interface. The application uses v-html for medication history timelines. To solve: Inject XSS through crafted drug parameter that triggers when nurses review administration records.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in FADEC Ground Station Telemetry Dashboard\nDescription: A jet engine monitoring system reflects unsanitized EGT (Exhaust Gas Temperature) values from WebSocket streams. The application uses innerHTML for real-time parameter alerts. To solve: Inject XSS through spoofed CAN bus messages that execute when engineers view overspeed warnings.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in FADEC Ground Station Telemetry Dashboard\", \"Lab Description\": \"A jet engine monitoring system reflects unsanitized EGT (Exhaust Gas Temperature) values from WebSocket streams. The application uses innerHTML for real-time parameter alerts. To solve: Inject XSS through spoofed CAN bus messages that execute when engineers view overspeed warnings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in ADS-B Aircraft Tracking System\nDescription: An air traffic control platform stores aircraft registration data in PostgreSQL without input validation. The Vue frontend renders ICAO 24-bit addresses using v-html. To solve: Spoof Mode-S transponder messages containing XSS that triggers when controllers click aircraft icons.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ADS-B Aircraft Tracking System\", \"Lab Description\": \"An air traffic control platform stores aircraft registration data in PostgreSQL without input validation. The Vue frontend renders ICAO 24-bit addresses using v-html. To solve: Spoof Mode-S transponder messages containing XSS that triggers when controllers click aircraft icons.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Satellite Telecommand Interface\nDescription: A spacecraft command system parses CCSDS telecommand packets into XML without proper namespace isolation. The application's Electron-based UI uses dangerouslySetInnerHTML for command histories. To solve: Inject XSS through malicious TC packets that execute during solar array deployment sequences.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Satellite Telecommand Interface\", \"Lab Description\": \"A spacecraft command system parses CCSDS telecommand packets into XML without proper namespace isolation. The application's Electron-based UI uses dangerouslySetInnerHTML for command histories. To solve: Inject XSS through malicious TC packets that execute during solar array deployment sequences.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Aviation Maintenance EHR Integration\nDescription: An aircraft health management system reflects unsanitized part numbers from URL parameters in its AngularJS interface. The application uses $sce.trustAsHtml for maintenance log rendering. To solve: Inject XSS through crafted MSG-3 task codes that execute when technicians view component histories.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Aviation Maintenance EHR Integration\", \"Lab Description\": \"An aircraft health management system reflects unsanitized part numbers from URL parameters in its AngularJS interface. The application uses $sce.trustAsHtml for maintenance log rendering. To solve: Inject XSS through crafted MSG-3 task codes that execute when technicians view component histories.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Flight Planning API Gateway\nDescription: An EFB (Electronic Flight Bag) system stores flight plans in Redis without input validation. The React frontend renders ICAO flight plan fields using dangerouslySetInnerHTML. To solve: Inject XSS through malicious route remarks that execute when pilots file revised plans.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Flight Planning API Gateway\", \"Lab Description\": \"An EFB (Electronic Flight Bag) system stores flight plans in Redis without input validation. The React frontend renders ICAO flight plan fields using dangerouslySetInnerHTML. To solve: Inject XSS through malicious route remarks that execute when pilots file revised plans.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Metaverse Avatar Profile Rendering\nDescription: A WebXR social platform renders 3D avatar bios using Babylon.js without sanitizing NFT metadata. The application converts on-chain ERC-6551 tokens to HTML panels using innerHTML. To solve: Inject XSS through malicious tokenURI that executes when users inspect virtual goods.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Metaverse Avatar Profile Rendering\", \"Lab Description\": \"A WebXR social platform renders 3D avatar bios using Babylon.js without sanitizing NFT metadata. The application converts on-chain ERC-6551 tokens to HTML panels using innerHTML. To solve: Inject XSS through malicious tokenURI that executes when users inspect virtual goods.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Quantum-Secure Voting System\nDescription: A post-quantum e-voting platform stores ballot comments in Q#-encrypted blobs without input validation. The React frontend decrypts and renders using dangerouslySetInnerHTML. To solve: Inject XSS through lattice-based ciphertext that persists through homomorphic tallying.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Quantum-Secure Voting System\", \"Lab Description\": \"A post-quantum e-voting platform stores ballot comments in Q#-encrypted blobs without input validation. The React frontend decrypts and renders using dangerouslySetInnerHTML. To solve: Inject XSS through lattice-based ciphertext that persists through homomorphic tallying.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Vertical Farm IoT Dashboard\nDescription: A hydroponic control system parses Modbus sensor data into SVG growth charts. The application's Angular template bypasses sanitization for real-time EC/pH displays. To solve: Inject XSS through nutrient dosing parameters that execute during automated flush cycles.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Vertical Farm IoT Dashboard\", \"Lab Description\": \"A hydroponic control system parses Modbus sensor data into SVG growth charts. The application's Angular template bypasses sanitization for real-time EC/pH displays. To solve: Inject XSS through nutrient dosing parameters that execute during automated flush cycles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Space Tourism Booking Portal\nDescription: A lunar travel agency's payment system reflects unsanitized promo codes from URL parameters. The Vue/Nuxt frontend uses v-html for limited-time offer banners. To solve: Inject XSS through crafted discount code that executes during launch window selection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Space Tourism Booking Portal\", \"Lab Description\": \"A lunar travel agency's payment system reflects unsanitized promo codes from URL parameters. The Vue/Nuxt frontend uses v-html for limited-time offer banners. To solve: Inject XSS through crafted discount code that executes during launch window selection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in DAO Governance Proposal Renderer\nDescription: A decentralized autonomous organization stores Snapshot proposals in IPFS without sanitization. The Svelte frontend renders Markdown with mdsvex using raw HTML enabled. To solve: Inject XSS through proposal body that executes when delegates vote on-chain.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in DAO Governance Proposal Renderer\", \"Lab Description\": \"A decentralized autonomous organization stores Snapshot proposals in IPFS without sanitization. The Svelte frontend renders Markdown with mdsvex using raw HTML enabled. To solve: Inject XSS through proposal body that executes when delegates vote on-chain.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Quantum Key Distribution Dashboard\nDescription: A QKD network monitor reflects URL parameters in Three.js WebGL visualizations without sanitization. The application converts BB84 protocol error rates to SVG tooltips using innerHTML. To solve: Inject XSS through crafted photon detector efficiency parameters that execute during key rate calculations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Quantum Key Distribution Dashboard\", \"Lab Description\": \"A QKD network monitor reflects URL parameters in Three.js WebGL visualizations without sanitization. The application converts BB84 protocol error rates to SVG tooltips using innerHTML. To solve: Inject XSS through crafted photon detector efficiency parameters that execute during key rate calculations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Lattice-Based Signature Registry\nDescription: A PQC migration platform stores Dilithium public keys in Cassandra with disabled input validation. The React frontend renders user comments using dangerouslySetInnerHTML. To solve: Inject XSS through crafted key metadata that persists through NIST standardization audits.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Lattice-Based Signature Registry\", \"Lab Description\": \"A PQC migration platform stores Dilithium public keys in Cassandra with disabled input validation. The React frontend renders user comments using dangerouslySetInnerHTML. To solve: Inject XSS through crafted key metadata that persists through NIST standardization audits.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Quantum Annealing Result Visualization\nDescription: A quantum optimization service parses D-Wave solver outputs into D3.js force graphs. The application's XML-to-SVG converter fails to handle QUBO model namespaces. To solve: Craft malicious Ising model parameters that mutate into scripts during energy landscape rendering.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Quantum Annealing Result Visualization\", \"Lab Description\": \"A quantum optimization service parses D-Wave solver outputs into D3.js force graphs. The application's XML-to-SVG converter fails to handle QUBO model namespaces. To solve: Craft malicious Ising model parameters that mutate into scripts during energy landscape rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Quantum Error Correction Dashboard\nDescription: A fault-tolerant quantum computing interface reflects surface code decoder parameters in Angular templates. The application bypasses sanitization for real-time error rate displays. To solve: Inject XSS through crafted stabilizer measurement rounds that execute during logical qubit initialization.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Quantum Error Correction Dashboard\", \"Lab Description\": \"A fault-tolerant quantum computing interface reflects surface code decoder parameters in Angular templates. The application bypasses sanitization for real-time error rate displays. To solve: Inject XSS through crafted stabilizer measurement rounds that execute during logical qubit initialization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Quantum Neural Network Training Logs\nDescription: A hybrid quantum-classical ML platform stores TensorBoard logs in MinIO without validation. The Vue frontend renders hyperparameter tables using v-html. To solve: Inject XSS through malicious circuit depth entries that execute during gradient visualization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Quantum Neural Network Training Logs\", \"Lab Description\": \"A hybrid quantum-classical ML platform stores TensorBoard logs in MinIO without validation. The Vue frontend renders hyperparameter tables using v-html. To solve: Inject XSS through malicious circuit depth entries that execute during gradient visualization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Model Zoo Metadata Renderer\nDescription: A popular ML framework's model registry reflects search parameters in TensorFlow.js visualization tools. The application converts ONNX model metadata to HTML using innerHTML. To solve: Inject XSS through crafted operator type names that execute during model comparison.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Model Zoo Metadata Renderer\", \"Lab Description\": \"A popular ML framework's model registry reflects search parameters in TensorFlow.js visualization tools. The application converts ONNX model metadata to HTML using innerHTML. To solve: Inject XSS through crafted operator type names that execute during model comparison.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Federated Learning Client\nDescription: A healthcare FL platform stores client updates in IPFS without input sanitization. The React dashboard renders participant metadata using dangerouslySetInnerHTML. To solve: Inject XSS through malicious gradient updates that execute during global model aggregation.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Federated Learning Client\", \"Lab Description\": \"A healthcare FL platform stores client updates in IPFS without input sanitization. The React dashboard renders participant metadata using dangerouslySetInnerHTML. To solve: Inject XSS through malicious gradient updates that execute during global model aggregation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in MLOps Pipeline Templates\nDescription: A CI/CD platform for ML parses Kubeflow pipeline YAML into HTML documentation. The application's Markdown renderer allows raw HTML in template descriptions. To solve: Craft malicious component description that bypasses Argo Workflows sanitization.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in MLOps Pipeline Templates\", \"Lab Description\": \"A CI/CD platform for ML parses Kubeflow pipeline YAML into HTML documentation. The application's Markdown renderer allows raw HTML in template descriptions. To solve: Craft malicious component description that bypasses Argo Workflows sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Synthetic Training Data Generator\nDescription: A GAN-based data augmentation tool reflects user inputs in D3.js visualizations. The application uses Angular's bypassSecurityTrustHtml for synthetic sample metadata. To solve: Inject XSS through crafted feature distribution parameters.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Synthetic Training Data Generator\", \"Lab Description\": \"A GAN-based data augmentation tool reflects user inputs in D3.js visualizations. The application uses Angular's bypassSecurityTrustHtml for synthetic sample metadata. To solve: Inject XSS through crafted feature distribution parameters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in LLM Fine-Tuning Interface\nDescription: A ChatGPT plugin stores training conversations in Elasticsearch without escaping. The Vue frontend renders system prompts using v-html. To solve: Inject XSS through crafted instruction examples that execute during RLHF alignment.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in LLM Fine-Tuning Interface\", \"Lab Description\": \"A ChatGPT plugin stores training conversations in Elasticsearch without escaping. The Vue frontend renders system prompts using v-html. To solve: Inject XSS through crafted instruction examples that execute during RLHF alignment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: DOM XSS in Digital Wallet QR Generator\nDescription: A neobank's payment portal reflects URL parameters in SVG-based QR codes without sanitization. The application embeds user-controlled data in <desc> tags visible to screen readers. To solve: Inject XSS through crafted recipient addresses that execute during QR scanning simulation.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Digital Wallet QR Generator\", \"Lab Description\": \"A neobank's payment portal reflects URL parameters in SVG-based QR codes without sanitization. The application embeds user-controlled data in <desc> tags visible to screen readers. To solve: Inject XSS through crafted recipient addresses that execute during QR scanning simulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Transaction Memo Field (SWIFT MT940)\nDescription: A corporate banking platform parses SWIFT messages without sanitizing :86: remark fields. The Angular frontend renders transaction lists using [innerHTML]. To solve: Inject XSS through crafted payment remarks that persist through SEPA clearing.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Transaction Memo Field (SWIFT MT940)\", \"Lab Description\": \"A corporate banking platform parses SWIFT messages without sanitizing :86: remark fields. The Angular frontend renders transaction lists using [innerHTML]. To solve: Inject XSS through crafted payment remarks that persist through SEPA clearing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Chat Message Formatting Engine\nDescription: A military-grade secure chat app converts Markdown to HTML using outdated parser. The application's emoji shortcode processor fails to handle nested contexts. To solve: Craft message that bypasses :emoji: syntax to execute script during message threading.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Chat Message Formatting Engine\", \"Lab Description\": \"A military-grade secure chat app converts Markdown to HTML using outdated parser. The application's emoji shortcode processor fails to handle nested contexts. To solve: Craft message that bypasses :emoji: syntax to execute script during message threading.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in AI-Powered Chatbot Financial Advisor\nDescription: A robo-advisor platform reflects user risk profiles in D3.js visualizations. The application uses <foreignObject> to embed unsanitized LLM responses in SVG charts. To solve: Inject XSS through crafted investment goals that execute during portfolio simulation.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in AI-Powered Chatbot Financial Advisor\", \"Lab Description\": \"A robo-advisor platform reflects user risk profiles in D3.js visualizations. The application uses <foreignObject> to embed unsanitized LLM responses in SVG charts. To solve: Inject XSS through crafted investment goals that execute during portfolio simulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Encrypted Chat Message Metadata\nDescription: An E2EE messaging app stores message timestamps in IndexedDB without validation. The React frontend decrypts and renders location metadata using dangerouslySetInnerHTML. To solve: Inject XSS through crafted GPS coordinates that execute during map pin hover.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Encrypted Chat Message Metadata\", \"Lab Description\": \"An E2EE messaging app stores message timestamps in IndexedDB without validation. The React frontend decrypts and renders location metadata using dangerouslySetInnerHTML. To solve: Inject XSS through crafted GPS coordinates that execute during map pin hover.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Voice Banking IVR Transcript Viewer\nDescription: A phone banking system converts voice call transcripts to HTML using insecure Web Speech API output. The application renders timestamps with innerHTML without escaping angle brackets. To solve: Inject XSS through spoken phrases that execute when agents review call recordings.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Voice Banking IVR Transcript Viewer\", \"Lab Description\": \"A phone banking system converts voice call transcripts to HTML using insecure Web Speech API output. The application renders timestamps with innerHTML without escaping angle brackets. To solve: Inject XSS through spoken phrases that execute when agents review call recordings.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Cryptocurrency Wallet Recovery Phrase Grid\nDescription: A hardware wallet management portal stores BIP-39 mnemonics as SVG grids in IPFS. The React frontend dangerously renders seed phrase visualizations. To solve: Inject XSS through crafted word positions that execute during backup verification.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Cryptocurrency Wallet Recovery Phrase Grid\", \"Lab Description\": \"A hardware wallet management portal stores BIP-39 mnemonics as SVG grids in IPFS. The React frontend dangerously renders seed phrase visualizations. To solve: Inject XSS through crafted word positions that execute during backup verification.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in AI Mortgage Calculator Chatbot\nDescription: A home loan platform's chatbot parses natural language income statements into HTML tables. The application's Markdown-to-LaTeX converter fails to handle matrix environments. To solve: Inject XSS through salary descriptions that bypass PDF sanitization.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in AI Mortgage Calculator Chatbot\", \"Lab Description\": \"A home loan platform's chatbot parses natural language income statements into HTML tables. The application's Markdown-to-LaTeX converter fails to handle matrix environments. To solve: Inject XSS through salary descriptions that bypass PDF sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Stock Trading Signal Webhook Preview\nDescription: A algo-trading platform reflects unsanitized webhook JSON data in TradingView charts. The application uses Angular's bypassSecurityTrustHtml for strategy annotations. To solve: Inject XSS through crafted alert messages that execute during backtest rendering.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Stock Trading Signal Webhook Preview\", \"Lab Description\": \"A algo-trading platform reflects unsanitized webhook JSON data in TradingView charts. The application uses Angular's bypassSecurityTrustHtml for strategy annotations. To solve: Inject XSS through crafted alert messages that execute during backtest rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in Blockchain Smart Contract Event Logs\nDescription: A DeFi analytics platform renders Ethereum event logs as HTML using web3.js. The application parses contract ABIs without sanitizing indexed parameters. To solve: Inject XSS through malicious event emissions that execute when users filter transactions.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Blockchain Smart Contract Event Logs\", \"Lab Description\": \"A DeFi analytics platform renders Ethereum event logs as HTML using web3.js. The application parses contract ABIs without sanitizing indexed parameters. To solve: Inject XSS through malicious event emissions that execute when users filter transactions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Product Review Carousel\nDescription: An online marketplace renders user reviews in a React carousel using dangerouslySetInnerHTML. The application converts Markdown comments to HTML without sanitizing <details> tags. To solve: Inject XSS that triggers when shoppers expand review details.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Product Review Carousel\", \"Lab Description\": \"An online marketplace renders user reviews in a React carousel using dangerouslySetInnerHTML. The application converts Markdown comments to HTML without sanitizing <details> tags. To solve: Inject XSS that triggers when shoppers expand review details.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Loyalty Point Calculator\nDescription: A retail chain's CRM stores customer tier calculations in PostgreSQL with disabled pg_escape_string. The Vue frontend renders loyalty status using v-html. To solve: Inject XSS through crafted purchase history that executes during point redemption.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Loyalty Point Calculator\", \"Lab Description\": \"A retail chain's CRM stores customer tier calculations in PostgreSQL with disabled pg_escape_string. The Vue frontend renders loyalty status using v-html. To solve: Inject XSS through crafted purchase history that executes during point redemption.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in AR Virtual Try-On\nDescription: A fashion app's WebGL-based virtual mirror parses JSON accessory metadata without HTML entity encoding. The application converts product SKUs to tooltips using innerHTML. To solve: Craft SKU containing XSS that executes when users share looks.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in AR Virtual Try-On\", \"Lab Description\": \"A fashion app's WebGL-based virtual mirror parses JSON accessory metadata without HTML entity encoding. The application converts product SKUs to tooltips using innerHTML. To solve: Craft SKU containing XSS that executes when users share looks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS in Flash Sale Countdown Timer\nDescription: A deal site's Next.js timer component reflects URL parameters in its SVG-based countdown. The application uses date-fns without escaping timezone abbreviations. To solve: Inject XSS through crafted tz parameter during daylight saving transitions.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Flash Sale Countdown Timer\", \"Lab Description\": \"A deal site's Next.js timer component reflects URL parameters in its SVG-based countdown. The application uses date-fns without escaping timezone abbreviations. To solve: Inject XSS through crafted tz parameter during daylight saving transitions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Supply Chain Inventory API\nDescription: A warehouse management system stores stock codes in MongoDB without input validation. The Angular frontend renders pallet locations using [innerHTML]. To solve: Inject XSS through RFID tag data that executes during stock takes.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Supply Chain Inventory API\", \"Lab Description\": \"A warehouse management system stores stock codes in MongoDB without input validation. The Angular frontend renders pallet locations using [innerHTML]. To solve: Inject XSS through RFID tag data that executes during stock takes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Patient Portal Lab Results Viewer\nDescription: A hospital EHR system renders PDF lab reports as HTML using pdf-lib without proper sanitization. The application converts PDF annotations to DOM elements using innerHTML. To solve: Inject XSS through crafted lab comments that execute when doctors view results.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Patient Portal Lab Results Viewer\", \"Lab Description\": \"A hospital EHR system renders PDF lab reports as HTML using pdf-lib without proper sanitization. The application converts PDF annotations to DOM elements using innerHTML. To solve: Inject XSS through crafted lab comments that execute when doctors view results.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Stored XSS in MRI Machine Scheduling System\nDescription: A radiology workflow manager stores DICOM metadata in MariaDB with disabled input escaping. The Angular frontend renders patient preparation instructions using [innerHTML]. To solve: Inject XSS through crafted scan protocols that persist across modality worklist updates.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in MRI Machine Scheduling System\", \"Lab Description\": \"A radiology workflow manager stores DICOM metadata in MariaDB with disabled input escaping. The Angular frontend renders patient preparation instructions using [innerHTML]. To solve: Inject XSS through crafted scan protocols that persist across modality worklist updates.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Mutation XSS in Telemedicine Video Chat\nDescription: A telehealth platform converts WebRTC data channel messages to HTML using a flawed Markdown parser. The application's emoji shortcode processor allows nested code blocks. To solve: Craft message that bypasses :emoji: syntax to execute script during session recording.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Telemedicine Video Chat\", \"Lab Description\": \"A telehealth platform converts WebRTC data channel messages to HTML using a flawed Markdown parser. The application's emoji shortcode processor allows nested code blocks. To solve: Craft message that bypasses :emoji: syntax to execute script during session recording.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Smart Pill Dispenser Mobile App\nDescription: An IoT medication manager renders dosage schedules in React Native WebView without escaping. The application converts NFC tag payloads to HTML using dangerouslySetInnerHTML. To solve: Program NFC tags with XSS that executes when caregivers scan the device.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Smart Pill Dispenser Mobile App\", \"Lab Description\": \"An IoT medication manager renders dosage schedules in React Native WebView without escaping. The application converts NFC tag payloads to HTML using dangerouslySetInnerHTML. To solve: Program NFC tags with XSS that executes when caregivers scan the device.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Genomic Data Visualization Portal\nDescription: A precision medicine platform stores VCF files in HDFS without sanitizing INFO fields. The Vue frontend renders variant annotations using v-html. To solve: Inject XSS through crafted genetic markers that execute during cohort analysis.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Genomic Data Visualization Portal\", \"Lab Description\": \"A precision medicine platform stores VCF files in HDFS without sanitizing INFO fields. The Vue frontend renders variant annotations using v-html. To solve: Inject XSS through crafted genetic markers that execute during cohort analysis.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Adaptive Traffic Light Control API\nDescription: A smart traffic system's web interface reflects intersection IDs from URL parameters in Three.js visualizations. The application converts SCATS protocol data to SVG without sanitizing phase timing values. To solve: Inject XSS through crafted phase parameter that executes during emergency vehicle preemption.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Adaptive Traffic Light Control API\", \"Lab Description\": \"A smart traffic system's web interface reflects intersection IDs from URL parameters in Three.js visualizations. The application converts SCATS protocol data to SVG without sanitizing phase timing values. To solve: Inject XSS through crafted phase parameter that executes during emergency vehicle preemption.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Smart Waste Bin Fill-Level Dashboard\nDescription: A municipal waste management system stores ultrasonic sensor data in InfluxDB without input validation. The React frontend renders bin status using dangerouslySetInnerHTML in D3.js heatmaps. To solve: Inject XSS through spoofed MQTT payloads that trigger during collection route optimization.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Smart Waste Bin Fill-Level Dashboard\", \"Lab Description\": \"A municipal waste management system stores ultrasonic sensor data in InfluxDB without input validation. The React frontend renders bin status using dangerouslySetInnerHTML in D3.js heatmaps. To solve: Inject XSS through spoofed MQTT payloads that trigger during collection route optimization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Water Quality Sensor XML Feed\nDescription: A smart water grid parses OGC SensorThings API responses into HTML tables. The application's XML parser fails to handle namespaces in SWE Common data arrays. To solve: Craft malicious sensor observation containing XSS that executes during flood prediction modeling.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Water Quality Sensor XML Feed\", \"Lab Description\": \"A smart water grid parses OGC SensorThings API responses into HTML tables. The application's XML parser fails to handle namespaces in SWE Common data arrays. To solve: Craft malicious sensor observation containing XSS that executes during flood prediction modeling.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Public Transit Real-Time Map\nDescription: A bus tracking system reflects unsanitized vehicle IDs from GTFS-RT feeds in Mapbox GL popups. The application uses Angular's bypassSecurityTrustHtml for passenger load indicators. To solve: Inject XSS through crafted vehicle positions that execute during route deviation alerts.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Public Transit Real-Time Map\", \"Lab Description\": \"A bus tracking system reflects unsanitized vehicle IDs from GTFS-RT feeds in Mapbox GL popups. The application uses Angular's bypassSecurityTrustHtml for passenger load indicators. To solve: Inject XSS through crafted vehicle positions that execute during route deviation alerts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Emergency Response Chat Logs\nDescription: A city's crisis management system stores responder messages in Elasticsearch without escaping. The Vue frontend renders incident timelines using v-html. To solve: Inject XSS through crafted triage codes that execute during mutual aid requests.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Emergency Response Chat Logs\", \"Lab Description\": \"A city's crisis management system stores responder messages in Elasticsearch without escaping. The Vue frontend renders incident timelines using v-html. To solve: Inject XSS through crafted triage codes that execute during mutual aid requests.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: DOM XSS in Autonomous Truck Platooning API\nDescription: A freight management system reflects unsanitized truck IDs from V2V (Vehicle-to-Vehicle) messages in Angular visualizations. The application converts SAE J1939 data to SVG without escaping. To solve: Inject XSS through crafted vehicle spacing parameters that execute during platoon formation.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Autonomous Truck Platooning API\", \"Lab Description\": \"A freight management system reflects unsanitized truck IDs from V2V (Vehicle-to-Vehicle) messages in Angular visualizations. The application converts SAE J1939 data to SVG without escaping. To solve: Inject XSS through crafted vehicle spacing parameters that execute during platoon formation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Stored XSS in Maritime Container Tracking System\nDescription: A global shipping portal stores ISO 6346 container codes in MongoDB without input validation. The Vue frontend renders cargo manifests using v-html. To solve: Inject XSS through malicious BIC codes that execute during customs clearance workflows.\nDifficulty: High\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Maritime Container Tracking System\", \"Lab Description\": \"A global shipping portal stores ISO 6346 container codes in MongoDB without input validation. The Vue frontend renders cargo manifests using v-html. To solve: Inject XSS through malicious BIC codes that execute during customs clearance workflows.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"High\"}"}
{"prompt": "Lab: Mutation XSS in Drone Delivery Waypoint Planner\nDescription: A last-mile delivery system parses GeoJSON waypoints into CesiumJS maps without proper sanitization. The application's XML-to-HTML converter fails to handle KML namespace injections. To solve: Craft malicious flight path containing XSS that executes during FAA airspace checks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Drone Delivery Waypoint Planner\", \"Lab Description\": \"A last-mile delivery system parses GeoJSON waypoints into CesiumJS maps without proper sanitization. The application's XML-to-HTML converter fails to handle KML namespace injections. To solve: Craft malicious flight path containing XSS that executes during FAA airspace checks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in Railway Signaling Asset Management\nDescription: A rail network monitoring tool reflects unsanitized track circuit IDs from IEC 62290 telemetry in React dashboards. The application uses dangerouslySetInnerHTML for failure alerts. To solve: Inject XSS through crafted balise parameters that execute during train detection events.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in Railway Signaling Asset Management\", \"Lab Description\": \"A rail network monitoring tool reflects unsanitized track circuit IDs from IEC 62290 telemetry in React dashboards. The application uses dangerouslySetInnerHTML for failure alerts. To solve: Inject XSS through crafted balise parameters that execute during train detection events.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in Warehouse Robot Pathfinding Interface\nDescription: An automated fulfillment system stores AMR (Autonomous Mobile Robot) grid maps in PostgreSQL with disabled escaping. The Angular frontend renders SLAM trajectories using [innerHTML]. To solve: Inject XSS through malicious navigation waypoints that execute during inventory cycle counts.\nDifficulty: Critical\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Warehouse Robot Pathfinding Interface\", \"Lab Description\": \"An automated fulfillment system stores AMR (Autonomous Mobile Robot) grid maps in PostgreSQL with disabled escaping. The Angular frontend renders SLAM trajectories using [innerHTML]. To solve: Inject XSS through malicious navigation waypoints that execute during inventory cycle counts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Critical\"}"}
{"prompt": "Lab: Online Support Chat Stored XSS in Message Content\nDescription: The support chat system stores user-submitted messages and reflects them using innerHTML in the agent interface. The application doesn't sanitize content before rendering. To solve: Inject a script in the message and trigger execution in the agent view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Support Chat Stored XSS in Message Content\", \"Lab Description\": \"The support chat system stores user-submitted messages and reflects them using innerHTML in the agent interface. The application doesn't sanitize content before rendering. To solve: Inject a script in the message and trigger execution in the agent view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Event Scheduler Reflected XSS in Title Field\nDescription: The event scheduler reflects the 'title' parameter in a JavaScript block that sets page content. The application directly inserts the title value into a JS string using double quotes. To solve: Escape the context and execute arbitrary JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Event Scheduler Reflected XSS in Title Field\", \"Lab Description\": \"The event scheduler reflects the 'title' parameter in a JavaScript block that sets page content. The application directly inserts the title value into a JS string using double quotes. To solve: Escape the context and execute arbitrary JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bug Tracker Stored XSS in Issue Description\nDescription: The bug tracker stores submitted issue descriptions and renders them using innerHTML in the issue detail page. No sanitization is performed. To solve: Submit a script payload in the description and view the issue to trigger XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bug Tracker Stored XSS in Issue Description\", \"Lab Description\": \"The bug tracker stores submitted issue descriptions and renders them using innerHTML in the issue detail page. No sanitization is performed. To solve: Submit a script payload in the description and view the issue to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Search History Dashboard DOM XSS via Previous Queries\nDescription: The dashboard fetches and displays past search queries using JavaScript by injecting each query into the DOM using innerHTML. To solve: Inject a malicious query that executes script when reflected.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Search History Dashboard DOM XSS via Previous Queries\", \"Lab Description\": \"The dashboard fetches and displays past search queries using JavaScript by injecting each query into the DOM using innerHTML. To solve: Inject a malicious query that executes script when reflected.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Feedback Portal Stored XSS in Comment Field\nDescription: The feedback page allows users to submit comments, which are stored and displayed without sanitization. The rendering uses innerHTML, introducing an XSS vector. To solve: Submit a script payload that executes on the feedback view page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Feedback Portal Stored XSS in Comment Field\", \"Lab Description\": \"The feedback page allows users to submit comments, which are stored and displayed without sanitization. The rendering uses innerHTML, introducing an XSS vector. To solve: Submit a script payload that executes on the feedback view page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Internal Blog Platform Stored XSS in Article Title Field\nDescription: The internal blog system allows staff to post articles with a title and content. The title is rendered directly inside an H1 tag using innerHTML on the article view page. No sanitization is performed. To solve: Submit an article with a script payload in the title that executes when viewed.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Internal Blog Platform Stored XSS in Article Title Field\", \"Lab Description\": \"The internal blog system allows staff to post articles with a title and content. The title is rendered directly inside an H1 tag using innerHTML on the article view page. No sanitization is performed. To solve: Submit an article with a script payload in the title that executes when viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Job Portal Reflected XSS in Search Query Parameter\nDescription: The job search page reflects the 'q' parameter inside a JavaScript variable for displaying recent searches. The value is directly inserted inside a JS string using double quotes. To solve: Inject JavaScript that breaks out of the string context.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Job Portal Reflected XSS in Search Query Parameter\", \"Lab Description\": \"The job search page reflects the 'q' parameter inside a JavaScript variable for displaying recent searches. The value is directly inserted inside a JS string using double quotes. To solve: Inject JavaScript that breaks out of the string context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-learning Portal Stored XSS in Forum Post Body\nDescription: The forum feature stores user-submitted posts and displays them on the thread page using innerHTML. The post body is stored and rendered without any sanitization. To solve: Submit a post with a script payload that executes on viewing.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-learning Portal Stored XSS in Forum Post Body\", \"Lab Description\": \"The forum feature stores user-submitted posts and displays them on the thread page using innerHTML. The post body is stored and rendered without any sanitization. To solve: Submit a post with a script payload that executes on viewing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Customer Support Ticket System Stored XSS in Ticket Subject\nDescription: Support tickets store a subject and message. The subject is displayed inside an HTML header using innerHTML when the ticket is viewed. No filtering is applied. To solve: Submit a malicious subject and trigger XSS on the view page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Customer Support Ticket System Stored XSS in Ticket Subject\", \"Lab Description\": \"Support tickets store a subject and message. The subject is displayed inside an HTML header using innerHTML when the ticket is viewed. No filtering is applied. To solve: Submit a malicious subject and trigger XSS on the view page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: News Aggregator DOM XSS via Source Parameter\nDescription: The news aggregator site reflects the `source` query param in a JS template literal that updates the filter UI. No escaping is performed. To solve: Inject a payload that executes within the JS template context.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"News Aggregator DOM XSS via Source Parameter\", \"Lab Description\": \"The news aggregator site reflects the `source` query param in a JS template literal that updates the filter UI. No escaping is performed. To solve: Inject a payload that executes within the JS template context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Real Estate Listings Reflected XSS in Search Filter\nDescription: The listings page includes a `location` parameter reflected inside an inline JavaScript assignment within a template literal. The application uses the parameter to highlight recent searches but does not sanitize input. To solve: Inject a payload that breaks out of the JS context and executes a script.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Real Estate Listings Reflected XSS in Search Filter\", \"Lab Description\": \"The listings page includes a `location` parameter reflected inside an inline JavaScript assignment within a template literal. The application uses the parameter to highlight recent searches but does not sanitize input. To solve: Inject a payload that breaks out of the JS context and executes a script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Social Media Platform Stored XSS in Comment Field\nDescription: User-submitted comments are stored and displayed beneath each post using innerHTML. No output sanitization is performed. This allows stored JavaScript payloads to execute for all users viewing the comment. To solve: Submit a malicious comment that triggers script execution when the post is viewed.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Social Media Platform Stored XSS in Comment Field\", \"Lab Description\": \"User-submitted comments are stored and displayed beneath each post using innerHTML. No output sanitization is performed. This allows stored JavaScript payloads to execute for all users viewing the comment. To solve: Submit a malicious comment that triggers script execution when the post is viewed.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: E-Commerce Dashboard DOM XSS via Username in Dashboard Widget\nDescription: The admin dashboard displays the logged-in user's name using `innerHTML` to personalize a widget. The name is set via a cookie and injected into the DOM without sanitization. To solve: Set a malicious cookie value that leads to code execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-Commerce Dashboard DOM XSS via Username in Dashboard Widget\", \"Lab Description\": \"The admin dashboard displays the logged-in user's name using `innerHTML` to personalize a widget. The name is set via a cookie and injected into the DOM without sanitization. To solve: Set a malicious cookie value that leads to code execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Helpdesk Application Reflected XSS in Ticket Filter Parameter\nDescription: The helpdesk UI includes a search filter using the `status` query parameter. This value is reflected directly inside a JavaScript variable using quotes. The reflection is not escaped, allowing arbitrary JS execution. To solve: Craft a payload that breaks out of the quoted string.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Helpdesk Application Reflected XSS in Ticket Filter Parameter\", \"Lab Description\": \"The helpdesk UI includes a search filter using the `status` query parameter. This value is reflected directly inside a JavaScript variable using quotes. The reflection is not escaped, allowing arbitrary JS execution. To solve: Craft a payload that breaks out of the quoted string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Learning System Stored XSS in Feedback Field\nDescription: The course feedback form stores submitted content in memory and displays it using `innerHTML` in the review section. No sanitization or escaping is applied. To solve: Submit a malicious script in the feedback field that executes upon rendering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Learning System Stored XSS in Feedback Field\", \"Lab Description\": \"The course feedback form stores submitted content in memory and displays it using `innerHTML` in the review section. No sanitization or escaping is applied. To solve: Submit a malicious script in the feedback field that executes upon rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Event Management Portal Reflected XSS in Search Field\nDescription: The event search functionality uses a `query` parameter that is reflected inside a script block using double quotes. No input sanitization is applied before rendering, creating a JavaScript injection point. To solve: Inject a payload that breaks out of the quoted string and triggers script execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Event Management Portal Reflected XSS in Search Field\", \"Lab Description\": \"The event search functionality uses a `query` parameter that is reflected inside a script block using double quotes. No input sanitization is applied before rendering, creating a JavaScript injection point. To solve: Inject a payload that breaks out of the quoted string and triggers script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Travel Booking Site Stored XSS in Destination Review\nDescription: User-submitted reviews for destinations are stored and rendered using `innerHTML` without any sanitization. This allows persistent JavaScript code to execute for other users viewing the destination. To solve: Submit a review that contains executable JavaScript.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Travel Booking Site Stored XSS in Destination Review\", \"Lab Description\": \"User-submitted reviews for destinations are stored and rendered using `innerHTML` without any sanitization. This allows persistent JavaScript code to execute for other users viewing the destination. To solve: Submit a review that contains executable JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Internal Admin Tool DOM XSS via URL Fragment Injection\nDescription: The admin dashboard reads the hash value from `location.hash` and injects it into the DOM using `innerHTML`. The application does not sanitize or validate the hash value, making it exploitable through fragment-based DOM XSS. To solve: Craft a malicious hash payload that executes arbitrary JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Internal Admin Tool DOM XSS via URL Fragment Injection\", \"Lab Description\": \"The admin dashboard reads the hash value from `location.hash` and injects it into the DOM using `innerHTML`. The application does not sanitize or validate the hash value, making it exploitable through fragment-based DOM XSS. To solve: Craft a malicious hash payload that executes arbitrary JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Community Forum Reflected XSS in Tag Parameter\nDescription: The forum's post listing page reflects the `tag` query parameter inside an inline `<script>` tag. The value is embedded inside a template literal and used to highlight matching posts. Lack of escaping allows JavaScript injection. To solve: Inject a payload that executes JavaScript in this context.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Community Forum Reflected XSS in Tag Parameter\", \"Lab Description\": \"The forum's post listing page reflects the `tag` query parameter inside an inline `<script>` tag. The value is embedded inside a template literal and used to highlight matching posts. Lack of escaping allows JavaScript injection. To solve: Inject a payload that executes JavaScript in this context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Survey Application Stored XSS in Name Field\nDescription: Survey submissions store user names which are later displayed in a leaderboard using `innerHTML`. Since user input is stored and not sanitized, this leads to stored XSS for any viewer of the leaderboard. To solve: Submit a payload as the name that runs JavaScript upon viewing.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Survey Application Stored XSS in Name Field\", \"Lab Description\": \"Survey submissions store user names which are later displayed in a leaderboard using `innerHTML`. Since user input is stored and not sanitized, this leads to stored XSS for any viewer of the leaderboard. To solve: Submit a payload as the name that runs JavaScript upon viewing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Shop Reflected XSS in Discount Code Field\nDescription: The discount code entered in the checkout page is reflected into an inline script using double quotes. No sanitization is applied, allowing attackers to inject JavaScript directly into the script context. To solve: Inject a payload that escapes the quote and executes a script.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Shop Reflected XSS in Discount Code Field\", \"Lab Description\": \"The discount code entered in the checkout page is reflected into an inline script using double quotes. No sanitization is applied, allowing attackers to inject JavaScript directly into the script context. To solve: Inject a payload that escapes the quote and executes a script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Issue Tracker Stored XSS in Comment Field\nDescription: The issue tracking system allows users to post comments. These comments are displayed using `innerHTML` without escaping, leading to stored XSS. To solve: Submit a comment with an XSS payload and visit the issue page to trigger it.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Issue Tracker Stored XSS in Comment Field\", \"Lab Description\": \"The issue tracking system allows users to post comments. These comments are displayed using `innerHTML` without escaping, leading to stored XSS. To solve: Submit a comment with an XSS payload and visit the issue page to trigger it.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Fitness App Reflected XSS in Progress Tracker Filter\nDescription: The `filter` parameter is used in the client-side chart script. It is inserted unescaped inside a JavaScript variable. The application lacks validation or escaping, making it vulnerable to reflected XSS. To solve: Inject a payload that escapes the JS context and executes code.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Fitness App Reflected XSS in Progress Tracker Filter\", \"Lab Description\": \"The `filter` parameter is used in the client-side chart script. It is inserted unescaped inside a JavaScript variable. The application lacks validation or escaping, making it vulnerable to reflected XSS. To solve: Inject a payload that escapes the JS context and executes code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Restaurant Review Portal Stored XSS in Feedback Message\nDescription: Users can leave feedback messages that are rendered on the homepage using `innerHTML`. The feedback is saved and shown to all visitors without sanitization. To solve: Submit a feedback message containing a script payload to trigger stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Restaurant Review Portal Stored XSS in Feedback Message\", \"Lab Description\": \"Users can leave feedback messages that are rendered on the homepage using `innerHTML`. The feedback is saved and shown to all visitors without sanitization. To solve: Submit a feedback message containing a script payload to trigger stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Learning Platform Reflected XSS in Course Title Preview\nDescription: The preview page reflects the `title` parameter directly into a JavaScript variable in an inline script tag. This parameter is not encoded or escaped, creating a JS context injection vulnerability. To solve: Inject a payload that breaks out of the string and executes JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Learning Platform Reflected XSS in Course Title Preview\", \"Lab Description\": \"The preview page reflects the `title` parameter directly into a JavaScript variable in an inline script tag. This parameter is not encoded or escaped, creating a JS context injection vulnerability. To solve: Inject a payload that breaks out of the string and executes JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly GC XSS in Blockchain Smart Contract Debugger\nDescription: Solidity IDE visualizes contract memory with WebAssembly GC type mismatches. The application renders garbage-collected heap data via innerHTML without validation. To solve: Corrupt GC references to inject HTML through malformed type arrays.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly GC XSS in Blockchain Smart Contract Debugger\", \"Lab Description\": \"Solidity IDE visualizes contract memory with WebAssembly GC type mismatches. The application renders garbage-collected heap data via innerHTML without validation. To solve: Corrupt GC references to inject HTML through malformed type arrays.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/3 Extended CONNECT XSS in IoT Over-the-Air Updates\nDescription: Smart device manager uses HTTP/3 Extended CONNECT for firmware patches with reflection in admin UI. The application processes CONNECT-UDP handshakes via unescaped console.log(). To solve: Inject XSS through crafted :protocol pseudo-headers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 Extended CONNECT XSS in IoT Over-the-Air Updates\", \"Lab Description\": \"Smart device manager uses HTTP/3 Extended CONNECT for firmware patches with reflection in admin UI. The application processes CONNECT-UDP handshakes via unescaped console.log(). To solve: Inject XSS through crafted :protocol pseudo-headers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS Math Function XSS in Financial Forecasting Dashboard\nDescription: Stock prediction tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Math Function XSS in Financial Forecasting Dashboard\", \"Lab Description\": \"Stock prediction tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebNFC Tag Spoofing XSS in Retail Inventory System\nDescription: Smart shelf system scans NFC tags with vulnerable NDEF record processing. The application renders product URLs via innerHTML without sanitization. To solve: Spoof NFC tags with javascript: payloads in NDEF Text records.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebNFC Tag Spoofing XSS in Retail Inventory System\", \"Lab Description\": \"Smart shelf system scans NFC tags with vulnerable NDEF record processing. The application renders product URLs via innerHTML without sanitization. To solve: Spoof NFC tags with javascript: payloads in NDEF Text records.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SVG Animation Timeline XSS in Video Editing Suite\nDescription: Non-linear editor implements SVG animations with unsafe begin/end attribute handling. The application uses document.timeline with user-controlled time values. To Solve: Trigger XSS through crafted beginElement() calls.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Animation Timeline XSS in Video Editing Suite\", \"Lab Description\": \"Non-linear editor implements SVG animations with unsafe begin/end attribute handling. The application uses document.timeline with user-controlled time values. To Solve: Trigger XSS through crafted beginElement() calls.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGPU Shader Storage Buffer XSS in Scientific Visualization\nDescription: Molecular visualization tool maps GPU storage buffers to DOM elements without validation. The application uses @compute shaders to process user-uploaded datasets. To solve: Corrupt buffer data to inject HTML payloads via shared memory mapping.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Shader Storage Buffer XSS in Scientific Visualization\", \"Lab Description\": \"Molecular visualization tool maps GPU storage buffers to DOM elements without validation. The application uses @compute shaders to process user-uploaded datasets. To solve: Corrupt buffer data to inject HTML payloads via shared memory mapping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/3 DATAGRAM Frame XSS in Real-Time Sports Analytics\nDescription: Player tracking system processes QUIC DATAGRAM frames with unsafe buffer concatenation. The application uses TextDecoderStream without validation for play-by-play updates. To solve: Inject fragmented XSS payloads through connection migration abuse.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 DATAGRAM Frame XSS in Real-Time Sports Analytics\", \"Lab Description\": \"Player tracking system processes QUIC DATAGRAM frames with unsafe buffer concatenation. The application uses TextDecoderStream without validation for play-by-play updates. To solve: Inject fragmented XSS payloads through connection migration abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS Math Function XSS in Financial Risk Calculator\nDescription: Quantitative analysis tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Math Function XSS in Financial Risk Calculator\", \"Lab Description\": \"Quantitative analysis tool implements CSS calc() with unsafe var(--user-input) handling. The application allows mathematical expressions in CSSOM via insertRule(). To solve: Break style context through trigonometric function abuse.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebCodecs Video Frame XSS in Surveillance System\nDescription: Security camera interface processes H.265 streams with unsafe debug overlay rendering. The application injects timestamp metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted Supplemental Enhancement Information (SEI) messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs Video Frame XSS in Surveillance System\", \"Lab Description\": \"Security camera interface processes H.265 streams with unsafe debug overlay rendering. The application injects timestamp metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted Supplemental Enhancement Information (SEI) messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA 2.0 Live Region XSS in Social Feed\nDescription: Accessibility-first social platform implements ARIA 2.0 live regions with dangerous aria-braille* attribute handling. The application renders notifications via innerHTML without sanitization. To solve: Abuse aria-braillelabel to bypass content security policies.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA 2.0 Live Region XSS in Social Feed\", \"Lab Description\": \"Accessibility-first social platform implements ARIA 2.0 live regions with dangerous aria-braille* attribute handling. The application renders notifications via innerHTML without sanitization. To solve: Abuse aria-braillelabel to bypass content security policies.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in Banking Portal PDF Generator\nDescription: The banking portal generates transaction PDFs using untrusted input in client-side HTML-to-PDF conversion. The application directly inserts user-controlled transaction notes into PDF HTML templates without sanitization. To solve: Execute arbitrary JavaScript when users view generated PDFs in vulnerable browsers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Banking Portal PDF Generator\", \"Lab Description\": \"The banking portal generates transaction PDFs using untrusted input in client-side HTML-to-PDF conversion. The application directly inserts user-controlled transaction notes into PDF HTML templates without sanitization. To solve: Execute arbitrary JavaScript when users view generated PDFs in vulnerable browsers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IoT Device Naming Convention\nDescription: Smart home dashboard displays device names without output encoding. The application stores user-supplied device names in MongoDB and renders them using innerHTML. To solve: Persistently execute JavaScript when administrators view device management console.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IoT Device Naming Convention\", \"Lab Description\": \"Smart home dashboard displays device names without output encoding. The application stores user-supplied device names in MongoDB and renders them using innerHTML. To solve: Persistently execute JavaScript when administrators view device management console.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Mutation XSS in CMS SVG File Processing\nDescription: Blog platform allows SVG uploads that are rendered as images. The application fails to sanitize event handlers in SVG foreignObject tags. To solve: Achieve XSS through browser parser inconsistency when rendering malicious SVG.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in CMS SVG File Processing\", \"Lab Description\": \"Blog platform allows SVG uploads that are rendered as images. The application fails to sanitize event handlers in SVG foreignObject tags. To solve: Achieve XSS through browser parser inconsistency when rendering malicious SVG.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS via WebSocket Message Handling\nDescription: Real-time chat application processes WebSocket messages with unsafe DOM manipulation. The application directly appends user-controlled message content using innerHTML. To solve: Trigger XSS through crafted WebSocket messages.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via WebSocket Message Handling\", \"Lab Description\": \"Real-time chat application processes WebSocket messages with unsafe DOM manipulation. The application directly appends user-controlled message content using innerHTML. To solve: Trigger XSS through crafted WebSocket messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in API Gateway Error Logging\nDescription: Microservice API gateway logs User-Agent headers verbatim in admin panel. The application uses unsecured ELK stack for log visualization. To solve: Achieve delayed XSS execution in Kibana interface.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in API Gateway Error Logging\", \"Lab Description\": \"Microservice API gateway logs User-Agent headers verbatim in admin panel. The application uses unsecured ELK stack for log visualization. To solve: Achieve delayed XSS execution in Kibana interface.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in E-Commerce Search Parameter Wrapping\nDescription: Online marketplace search feature wraps user input in <h1> tags without encoding. The application uses Express.js with vulnerable res.send() for AJAX responses. To solve: Execute alert() using angle bracket injection despite server-side replacement filters.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in E-Commerce Search Parameter Wrapping\", \"Lab Description\": \"Online marketplace search feature wraps user input in <h1> tags without encoding. The application uses Express.js with vulnerable res.send() for AJAX responses. To solve: Execute alert() using angle bracket injection despite server-side replacement filters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS via Healthcare Portal URL Fragment\nDescription: Patient records system processes URL fragments in client-side routing. The application uses decodeURIComponent() instead of decodeURI() for fragment parsing. To solve: Achieve XSS through double-encoded hash payloads in SPA routing.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via Healthcare Portal URL Fragment\", \"Lab Description\": \"Patient records system processes URL fragments in client-side routing. The application uses decodeURIComponent() instead of decodeURI() for fragment parsing. To solve: Achieve XSS through double-encoded hash payloads in SPA routing.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS via Social Media Profile JSON-LD Injection\nDescription: Platform allows custom profile schemas that render in <script type='application/ld+json'>. The application uses JSON.stringify() without escaping. To solve: Break JSON context and execute script via Unicode escapes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS via Social Media Profile JSON-LD Injection\", \"Lab Description\": \"Platform allows custom profile schemas that render in <script type='application/ld+json'>. The application uses JSON.stringify() without escaping. To solve: Break JSON context and execute script via Unicode escapes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Hotel Booking Calendar Widget\nDescription: Date picker component re-encodes HTML entities during DOM cloning. The application uses jQuery's .clone() with broken sanitization. To solve: Achieve XSS through parser differential between clone and innerHTML operations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Hotel Booking Calendar Widget\", \"Lab Description\": \"Date picker component re-encodes HTML entities during DOM cloning. The application uses jQuery's .clone() with broken sanitization. To solve: Achieve XSS through parser differential between clone and innerHTML operations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Blind XSS in Fitness Tracker CSV Export\nDescription: Workout logging system embeds user input in CSV files using Excel-style formula injection. The application uses res.csv() without proper escaping. To solve: Achieve XSS when admin opens exported file in vulnerable spreadsheet software.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Fitness Tracker CSV Export\", \"Lab Description\": \"Workout logging system embeds user input in CSV files using Excel-style formula injection. The application uses res.csv() without proper escaping. To solve: Achieve XSS when admin opens exported file in vulnerable spreadsheet software.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: XSS via WebAssembly Module Injection in Video Processing App\nDescription: Video editing platform dynamically loads WebAssembly modules from user-uploaded files. The application fails to validate imported WASM memory operations. To solve: Achieve arbitrary JavaScript execution through malicious memory pointer manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"XSS via WebAssembly Module Injection in Video Processing App\", \"Lab Description\": \"Video editing platform dynamically loads WebAssembly modules from user-uploaded files. The application fails to validate imported WASM memory operations. To solve: Achieve arbitrary JavaScript execution through malicious memory pointer manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Shadow DOM XSS Escape in Project Management Dashboard\nDescription: Task management system uses closed shadow roots for card descriptions. The application implements broken sanitization through DOMPurify before shadow DOM injection. To solve: Break shadow boundary containment through prototype pollution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Shadow DOM XSS Escape in Project Management Dashboard\", \"Lab Description\": \"Task management system uses closed shadow roots for card descriptions. The application implements broken sanitization through DOMPurify before shadow DOM injection. To solve: Break shadow boundary containment through prototype pollution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Service Worker Persistent XSS in Progressive Web App\nDescription: News aggregator PWA registers service workers from unvalidated user-controlled URLs. The application implements insecure 'serviceworker-allowed' header configuration. To solve: Establish permanent XSS through cached response manipulation.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Service Worker Persistent XSS in Progressive Web App\", \"Lab Description\": \"News aggregator PWA registers service workers from unvalidated user-controlled URLs. The application implements insecure 'serviceworker-allowed' header configuration. To solve: Establish permanent XSS through cached response manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebRTC Data Channel XSS in Telemedicine Platform\nDescription: Video conferencing system transmits SDP offers through unescaped DOM updates. The application uses simple-peer with vulnerable SDP parser. To solve: Inject JavaScript through crafted ICE candidate messages.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebRTC Data Channel XSS in Telemedicine Platform\", \"Lab Description\": \"Video conferencing system transmits SDP offers through unescaped DOM updates. The application uses simple-peer with vulnerable SDP parser. To solve: Inject JavaScript through crafted ICE candidate messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: PWA Cache Poisoning XSS via Finance Dashboard\nDescription: Stock trading PWA caches API responses with vulnerable Cache-Control headers. The application uses stale-while-revalidate strategy without validation. To solve: Poison cache to serve malicious JavaScript from /api/prices endpoint.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"PWA Cache Poisoning XSS via Finance Dashboard\", \"Lab Description\": \"Stock trading PWA caches API responses with vulnerable Cache-Control headers. The application uses stale-while-revalidate strategy without validation. To solve: Poison cache to serve malicious JavaScript from /api/prices endpoint.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebGL Shader Injection XSS in AR Platform\nDescription: Augmented reality viewer processes 3D model vertex shaders from user uploads. The application converts GLSL code to JS through unsafe eval() optimization. To solve: Achieve JS execution via GLSL preprocessor directives and shader linking.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGL Shader Injection XSS in AR Platform\", \"Lab Description\": \"Augmented reality viewer processes 3D model vertex shaders from user uploads. The application converts GLSL code to JS through unsafe eval() optimization. To solve: Achieve JS execution via GLSL preprocessor directives and shader linking.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebSocket Bidirectional XSS in Multiplayer Game Lobby\nDescription: Browser-based game uses raw WebSocket.send() for chat and game state. The application mirrors messages between players with vulnerable JSON.parse(JSON.stringify()) pattern. To solve: Achieve XSS through prototype pollution in circular reference handling.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebSocket Bidirectional XSS in Multiplayer Game Lobby\", \"Lab Description\": \"Browser-based game uses raw WebSocket.send() for chat and game state. The application mirrors messages between players with vulnerable JSON.parse(JSON.stringify()) pattern. To solve: Achieve XSS through prototype pollution in circular reference handling.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAuthn Authenticator Tampering in SSO Dashboard\nDescription: Single sign-on system parses WebAuthn authenticatorData without CBOR validation. The application reflects credential ID in admin panel via innerText. To solve: Inject HTML through crafted attestationObject extensions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn Authenticator Tampering in SSO Dashboard\", \"Lab Description\": \"Single sign-on system parses WebAuthn authenticatorData without CBOR validation. The application reflects credential ID in admin panel via innerText. To solve: Inject HTML through crafted attestationObject extensions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IndexedDB Schema Pollution in Analytics Dashboard\nDescription: User analytics platform creates dynamic object stores using URL parameters. The application uses eval() to generate IndexedDB indexes. To solve: Achieve XSS through NoSQL key injection and query engine reflection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IndexedDB Schema Pollution in Analytics Dashboard\", \"Lab Description\": \"User analytics platform creates dynamic object stores using URL parameters. The application uses eval() to generate IndexedDB indexes. To solve: Achieve XSS through NoSQL key injection and query engine reflection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Web Bundle XSS in Document Collaboration Tool\nDescription: Shared document viewer parses .wbn files with vulnerable integrity checks. The application uses incorrect Content-Type for nested resources. To solve: Achieve XSS through malicious resource embedding in signed bundle.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Web Bundle XSS in Document Collaboration Tool\", \"Lab Description\": \"Shared document viewer parses .wbn files with vulnerable integrity checks. The application uses incorrect Content-Type for nested resources. To solve: Achieve XSS through malicious resource embedding in signed bundle.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebTransport Protocol Hijacking in Virtual Classroom\nDescription: Educational platform uses WebTransport for real-time document sync with unvalidated stream processing. The application converts binary streams to text via vulnerable TextDecoder. To solve: Achieve XSS through bidirectional stream poisoning.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Protocol Hijacking in Virtual Classroom\", \"Lab Description\": \"Educational platform uses WebTransport for real-time document sync with unvalidated stream processing. The application converts binary streams to text via vulnerable TextDecoder. To solve: Achieve XSS through bidirectional stream poisoning.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SharedArrayBuffer Timing XSS in Cryptocurrency Wallet\nDescription: Digital wallet uses SharedArrayBuffer for transaction signing with side-channel leaks. The application reflects timing differences in UI updates. To solve: Exfiltrate private key via precision timing attacks and DOM injection.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SharedArrayBuffer Timing XSS in Cryptocurrency Wallet\", \"Lab Description\": \"Digital wallet uses SharedArrayBuffer for transaction signing with side-channel leaks. The application reflects timing differences in UI updates. To solve: Exfiltrate private key via precision timing attacks and DOM injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Injection in Micro-Frontend Architecture\nDescription: Enterprise dashboard uses dynamic import maps for module loading. The application constructs import map JSON from URL parameters without validation. To solve: Hijack module resolution to load malicious ES6 modules.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Injection in Micro-Frontend Architecture\", \"Lab Description\": \"Enterprise dashboard uses dynamic import maps for module loading. The application constructs import map JSON from URL parameters without validation. To solve: Hijack module resolution to load malicious ES6 modules.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Trusted Types Bypass via iframe Policy Inheritance in CMS\nDescription: Content management system implements Trusted Types but allows policy inheritance in iframes. The application uses document.write() in nested browsing contexts. To solve: Escape iframe sandbox through prototype pollution of default policy.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Trusted Types Bypass via iframe Policy Inheritance in CMS\", \"Lab Description\": \"Content management system implements Trusted Types but allows policy inheritance in iframes. The application uses document.write() in nested browsing contexts. To solve: Escape iframe sandbox through prototype pollution of default policy.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WASI Filesystem Polyglot XSS in Document Converter\nDescription: Cloud file converter executes WASI modules for format transformations. The application maps virtual filesystems without path validation. To solve: Write malicious JS to DOM through filesystem-to-UI bridge.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WASI Filesystem Polyglot XSS in Document Converter\", \"Lab Description\": \"Cloud file converter executes WASI modules for format transformations. The application maps virtual filesystems without path validation. To solve: Write malicious JS to DOM through filesystem-to-UI bridge.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in Healthcare Portal URL Fragment Processing\nDescription: Patient records system dynamically loads content from URL fragments using vulnerable decodeURIComponent() parsing. The application renders lab results without output encoding. To solve: Execute alert(document.domain) through double-encoded hash payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Healthcare Portal URL Fragment Processing\", \"Lab Description\": \"Patient records system dynamically loads content from URL fragments using vulnerable decodeURIComponent() parsing. The application renders lab results without output encoding. To solve: Execute alert(document.domain) through double-encoded hash payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in E-Commerce Product Reviews via AngularJS Sandbox Escape\nDescription: Product review system uses AngularJS 1.8 with unsafe $sce configuration. The application sanitizes input but allows certain HTML elements. To solve: Achieve persistent XSS using prototype pollution in review comments.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in E-Commerce Product Reviews via AngularJS Sandbox Escape\", \"Lab Description\": \"Product review system uses AngularJS 1.8 with unsafe $sce configuration. The application sanitizes input but allows certain HTML elements. To solve: Achieve persistent XSS using prototype pollution in review comments.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Social Media SVG Avatar Upload\nDescription: Profile picture uploader accepts SVG files but fails to sanitize foreignObject tags. The application uses DOMPurify 2.4.0 with unsafe configuration. To solve: Achieve XSS through namespace confusion in SVG/HTML5 parser.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Social Media SVG Avatar Upload\", \"Lab Description\": \"Profile picture uploader accepts SVG files but fails to sanitize foreignObject tags. The application uses DOMPurify 2.4.0 with unsafe configuration. To solve: Achieve XSS through namespace confusion in SVG/HTML5 parser.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in Customer Support Chat WebSocket Messages\nDescription: Live chat application stores WebSocket messages in admin panel with 12-hour delay. The application uses raw WebSocket.send() without output encoding. To solve: Trigger alert() when support agent views chat history.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Customer Support Chat WebSocket Messages\", \"Lab Description\": \"Live chat application stores WebSocket messages in admin panel with 12-hour delay. The application uses raw WebSocket.send() without output encoding. To solve: Trigger alert() when support agent views chat history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in Travel Booking API JSONP Endpoint\nDescription: Flight search API implements JSONP callback without validation. The application reflects callback parameter in Content-Type header. To solve: Achieve XSS through JavaScript MIME type confusion.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Travel Booking API JSONP Endpoint\", \"Lab Description\": \"Flight search API implements JSONP callback without validation. The application reflects callback parameter in Content-Type header. To solve: Achieve XSS through JavaScript MIME type confusion.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM XSS in IoT Dashboard WebSocket Analytics\nDescription: Smart factory dashboard visualizes sensor data via WebSocket messages with unsafe SVG rendering. The application uses unencoded device IDs in dynamically created SVG elements. To solve: Inject JavaScript through malicious sensor metadata.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in IoT Dashboard WebSocket Analytics\", \"Lab Description\": \"Smart factory dashboard visualizes sensor data via WebSocket messages with unsafe SVG rendering. The application uses unencoded device IDs in dynamically created SVG elements. To solve: Inject JavaScript through malicious sensor metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in CMS Markdown Renderer via SVG Filter Bypass\nDescription: Blog platform allows Markdown posts containing SVGs that are processed by a vulnerable DOMPurify configuration. The application whitelists 'filter' CSS property in SVG styles. To solve: Achieve persistent XSS through CSS animation payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CMS Markdown Renderer via SVG Filter Bypass\", \"Lab Description\": \"Blog platform allows Markdown posts containing SVGs that are processed by a vulnerable DOMPurify configuration. The application whitelists 'filter' CSS property in SVG styles. To solve: Achieve persistent XSS through CSS animation payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in API Gateway Error Log Visualization\nDescription: Cloud API gateway displays error logs using innerText with vulnerable CSS escape sequences. The application uses Chromium's textContent normalization incorrectly. To solve: Abuse CSS unicode escapes to reconstruct executable code.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in API Gateway Error Log Visualization\", \"Lab Description\": \"Cloud API gateway displays error logs using innerText with vulnerable CSS escape sequences. The application uses Chromium's textContent normalization incorrectly. To solve: Abuse CSS unicode escapes to reconstruct executable code.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Blind XSS in Video Conferencing Closed Captioning\nDescription: WebRTC-based meeting platform stores subtitle transcripts in admin panel. The application uses insecure text-to-VTT conversion with null-byte handling flaws. To solve: Achieve delayed XSS through crafted subtitle metadata.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Video Conferencing Closed Captioning\", \"Lab Description\": \"WebRTC-based meeting platform stores subtitle transcripts in admin panel. The application uses insecure text-to-VTT conversion with null-byte handling flaws. To solve: Achieve delayed XSS through crafted subtitle metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in Cryptocurrency Exchange QR Code Generator\nDescription: Wallet address QR generator reflects untrusted input in SVG data URLs. The application uses unencoded user-controlled 'label' parameter in QR code metadata. To solve: Break SVG context through multiline payloads.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Cryptocurrency Exchange QR Code Generator\", \"Lab Description\": \"Wallet address QR generator reflects untrusted input in SVG data URLs. The application uses unencoded user-controlled 'label' parameter in QR code metadata. To solve: Break SVG context through multiline payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in Fitness Tracker URL Parameter Processing\nDescription: Workout analytics dashboard dynamically loads user stats from URL parameters using vulnerable document.write(). The application parses heart rate zones without output encoding. To solve: Execute alert(document.cookie) through malformed query string payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in Fitness Tracker URL Parameter Processing\", \"Lab Description\": \"Workout analytics dashboard dynamically loads user stats from URL parameters using vulnerable document.write(). The application parses heart rate zones without output encoding. To solve: Execute alert(document.cookie) through malformed query string payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Project Management Tool Clipboard Events\nDescription: Task collaboration platform insecurely handles paste events in rich text editor. The application uses execCommand() with dangerous 'insertHTML' operations. To solve: Achieve persistent XSS through crafted spreadsheet cell paste operations.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Project Management Tool Clipboard Events\", \"Lab Description\": \"Task collaboration platform insecurely handles paste events in rich text editor. The application uses execCommand() with dangerous 'insertHTML' operations. To solve: Achieve persistent XSS through crafted spreadsheet cell paste operations.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Social Media Image Metadata Processing\nDescription: Photo sharing platform parses EXIF data from user uploads using vulnerable exifr library. The application renders GPS coordinates in unescaped popup tooltips. To solve: Inject JavaScript through crafted longitude values in JPEG headers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Social Media Image Metadata Processing\", \"Lab Description\": \"Photo sharing platform parses EXIF data from user uploads using vulnerable exifr library. The application renders GPS coordinates in unescaped popup tooltips. To solve: Inject JavaScript through crafted longitude values in JPEG headers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Blind XSS in E-Learning Platform LTI Integration\nDescription: Course management system processes Learning Tools Interoperability (LTI) launches without validating custom parameters. The application logs launch data in admin interface with 24h delay. To solve: Achieve delayed XSS through crafted lis_result_sourcedid parameter.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in E-Learning Platform LTI Integration\", \"Lab Description\": \"Course management system processes Learning Tools Interoperability (LTI) launches without validating custom parameters. The application logs launch data in admin interface with 24h delay. To solve: Achieve delayed XSS through crafted lis_result_sourcedid parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in Retail Analytics CSV Injection\nDescription: Sales dashboard exports filtered results as CSV files with vulnerable Excel-style formula handling. The application reflects search terms in sheet names without encoding. To solve: Achieve XSS through crafted sheet title payloads.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Retail Analytics CSV Injection\", \"Lab Description\": \"Sales dashboard exports filtered results as CSV files with vulnerable Excel-style formula handling. The application reflects search terms in sheet names without encoding. To solve: Achieve XSS through crafted sheet title payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM XSS via WebAssembly Memory Corruption in Cryptocurrency Wallet\nDescription: Blockchain wallet uses WebAssembly for transaction signing with unsafe memory buffer sharing between JS/WASM. The application implements direct memory access via ArrayBuffer without validation. To solve: Achieve arbitrary JS execution through crafted memory pointer manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via WebAssembly Memory Corruption in Cryptocurrency Wallet\", \"Lab Description\": \"Blockchain wallet uses WebAssembly for transaction signing with unsafe memory buffer sharing between JS/WASM. The application implements direct memory access via ArrayBuffer without validation. To solve: Achieve arbitrary JS execution through crafted memory pointer manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in API Gateway JWT Debug Header Processing\nDescription: Microservices API gateway implements verbose error logging with JWT header reflection. The application stores malformed JWTs in admin Kibana dashboard without sanitization. To solve: Achieve persistent XSS through crafted JWT header injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in API Gateway JWT Debug Header Processing\", \"Lab Description\": \"Microservices API gateway implements verbose error logging with JWT header reflection. The application stores malformed JWTs in admin Kibana dashboard without sanitization. To solve: Achieve persistent XSS through crafted JWT header injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in Social Media Post Markdown Anchor Validation\nDescription: Platform allows custom anchor tags in Markdown posts with vulnerable href sanitization. The application uses regex bypassable through URL-encoded newline characters. To solve: Achieve persistent XSS via javascript: protocol in disguised URLs.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in Social Media Post Markdown Anchor Validation\", \"Lab Description\": \"Platform allows custom anchor tags in Markdown posts with vulnerable href sanitization. The application uses regex bypassable through URL-encoded newline characters. To solve: Achieve persistent XSS via javascript: protocol in disguised URLs.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation XSS in Web Bundle Document Viewer via Content-Type Confusion\nDescription: Document collaboration tool parses .wbn bundles with improper MIME type validation. The application treats text/markdown resources as text/html when previewing. To solve: Achieve XSS through crafted resource type mismatches.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Web Bundle Document Viewer via Content-Type Confusion\", \"Lab Description\": \"Document collaboration tool parses .wbn bundles with improper MIME type validation. The application treats text/markdown resources as text/html when previewing. To solve: Achieve XSS through crafted resource type mismatches.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM XSS via Trusted Types Bypass in iframe Policy Inheritance\nDescription: CMS implements Trusted Types but allows policy inheritance in sandboxed iframes. The application uses document.write() with lax default policies. To solve: Escape iframe sandbox through prototype pollution of trustedTypes.defaultPolicy.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS via Trusted Types Bypass in iframe Policy Inheritance\", \"Lab Description\": \"CMS implements Trusted Types but allows policy inheritance in sandboxed iframes. The application uses document.write() with lax default policies. To solve: Escape iframe sandbox through prototype pollution of trustedTypes.defaultPolicy.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebTransport Session Hijacking in Telehealth Platform\nDescription: Real-time patient monitoring uses WebTransport for biometric streaming with insecure session handling. The application reflects session IDs in error messages without encoding. To solve: Achieve XSS through bidirectional stream poisoning with malformed datagrams.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Session Hijacking in Telehealth Platform\", \"Lab Description\": \"Real-time patient monitoring uses WebTransport for biometric streaming with insecure session handling. The application reflects session IDs in error messages without encoding. To solve: Achieve XSS through bidirectional stream poisoning with malformed datagrams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Injection in Stock Trading Dashboard\nDescription: Financial dashboard dynamically loads modules using user-controlled import maps. The application constructs JSON without proper escaping. To solve: Hijack module resolution to load malicious ESM from attacker-controlled domain.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Injection in Stock Trading Dashboard\", \"Lab Description\": \"Financial dashboard dynamically loads modules using user-controlled import maps. The application constructs JSON without proper escaping. To solve: Hijack module resolution to load malicious ESM from attacker-controlled domain.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGL Shader XSS in 3D Design Tool\nDescription: CAD software processes vertex shaders from untrusted sources with debug logging. The application converts GLSL errors to HTML without sanitization. To solve: Inject JavaScript through crafted preprocessor directives.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGL Shader XSS in 3D Design Tool\", \"Lab Description\": \"CAD software processes vertex shaders from untrusted sources with debug logging. The application converts GLSL errors to HTML without sanitization. To solve: Inject JavaScript through crafted preprocessor directives.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Service Worker Cache Poisoning XSS in PWA News Reader\nDescription: Progressive Web App caches API responses with stale-while-revalidate strategy. The application uses Cache API without request validation. To solve: Poison cache to serve malicious JavaScript from /api/feed endpoint.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Service Worker Cache Poisoning XSS in PWA News Reader\", \"Lab Description\": \"Progressive Web App caches API responses with stale-while-revalidate strategy. The application uses Cache API without request validation. To solve: Poison cache to serve malicious JavaScript from /api/feed endpoint.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSSOM Mutation XSS in Analytics Dashboard\nDescription: Business intelligence tool processes CSS variables from URL parameters with vulnerable CSS.supports() check. The application uses innerHTML with style tag reflection. To Solve: Achieve XSS through CSS @import rule parser differentials.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSSOM Mutation XSS in Analytics Dashboard\", \"Lab Description\": \"Business intelligence tool processes CSS variables from URL parameters with vulnerable CSS.supports() check. The application uses innerHTML with style tag reflection. To Solve: Achieve XSS through CSS @import rule parser differentials.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in AI Chatbot WebSocket Stream Processing\nDescription: LLM-powered chatbot reflects user input in streaming WebSocket responses without output encoding. The application uses innerHTML to append messages to a vulnerable chat container. To solve: Inject SVG payload that triggers alert() when response streams.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in AI Chatbot WebSocket Stream Processing\", \"Lab Description\": \"LLM-powered chatbot reflects user input in streaming WebSocket responses without output encoding. The application uses innerHTML to append messages to a vulnerable chat container. To solve: Inject SVG payload that triggers alert() when response streams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in GraphQL API Batch Operation Endpoint\nDescription: Social media platform processes batch mutations through vulnerable GraphQL introspection. The application stores user bios with unsafe JSON.stringify() sanitization. To solve: Achieve persistent XSS via Unicode escape sequences in bio field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in GraphQL API Batch Operation Endpoint\", \"Lab Description\": \"Social media platform processes batch mutations through vulnerable GraphQL introspection. The application stores user bios with unsafe JSON.stringify() sanitization. To solve: Achieve persistent XSS via Unicode escape sequences in bio field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Server-Sent Events (SSE) Dashboard\nDescription: Real-time monitoring tool displays SSE messages using textContent with vulnerable CSS unescape patterns. The application implements broken HTML entity encoding for status updates. To solve: Achieve XSS through CSS variable injection in streaming data.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Server-Sent Events (SSE) Dashboard\", \"Lab Description\": \"Real-time monitoring tool displays SSE messages using textContent with vulnerable CSS unescape patterns. The application implements broken HTML entity encoding for status updates. To solve: Achieve XSS through CSS variable injection in streaming data.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in JWT Refresh Token Storage\nDescription: Authentication service stores refresh tokens in admin Redis console with vulnerable HTML rendering. The application logs raw token metadata in Laravel Telescope. To solve: Achieve delayed XSS through crafted JWT header injection.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in JWT Refresh Token Storage\", \"Lab Description\": \"Authentication service stores refresh tokens in admin Redis console with vulnerable HTML rendering. The application logs raw token metadata in Laravel Telescope. To solve: Achieve delayed XSS through crafted JWT header injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in WebAssembly Module Validation Errors\nDescription: Smart contract compiler displays WASM validation errors using vulnerable console.html component. The application parses error messages with decodeURIComponent() instead of textContent. To solve: Execute alert() through malformed module exports.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in WebAssembly Module Validation Errors\", \"Lab Description\": \"Smart contract compiler displays WASM validation errors using vulnerable console.html component. The application parses error messages with decodeURIComponent() instead of textContent. To solve: Execute alert() through malformed module exports.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebAuthn Authenticator Tampering in SSO Dashboard\nDescription: Enterprise SSO system parses WebAuthn authenticatorData without proper CBOR validation. The application reflects credential IDs in admin panel via innerHTML. To solve: Inject HTML through malicious attestationObject extensions using FIDO2 emulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAuthn Authenticator Tampering in SSO Dashboard\", \"Lab Description\": \"Enterprise SSO system parses WebAuthn authenticatorData without proper CBOR validation. The application reflects credential IDs in admin panel via innerHTML. To solve: Inject HTML through malicious attestationObject extensions using FIDO2 emulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Import Maps Injection in Micro-Frontend Asset Server\nDescription: Cloud-native platform generates dynamic import maps from URL parameters. The application uses JSON.parse() without validation on user-controlled input. To solve: Hijack module resolution to load malicious ES modules from attacker domain.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Injection in Micro-Frontend Asset Server\", \"Lab Description\": \"Cloud-native platform generates dynamic import maps from URL parameters. The application uses JSON.parse() without validation on user-controlled input. To solve: Hijack module resolution to load malicious ES modules from attacker domain.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Protocol Hijacking in Real-Time Betting App\nDescription: Sports betting platform uses WebTransport for odds streaming with unsafe datagram processing. The application reflects user IDs in error messages without encoding. To solve: Inject SVG payloads through malformed bidirectional streams.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Protocol Hijacking in Real-Time Betting App\", \"Lab Description\": \"Sports betting platform uses WebTransport for odds streaming with unsafe datagram processing. The application reflects user IDs in error messages without encoding. To solve: Inject SVG payloads through malformed bidirectional streams.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS @layer XSS in Design System Theme Editor\nDescription: UI theme builder processes @layer rules with vulnerable CSSOM manipulation. The application uses insertRule() with raw user input. To solve: Break style context through crafted layer ordering and JS injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS @layer XSS in Design System Theme Editor\", \"Lab Description\": \"UI theme builder processes @layer rules with vulnerable CSSOM manipulation. The application uses insertRule() with raw user input. To solve: Break style context through crafted layer ordering and JS injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Electron IPC XSS in Desktop Analytics Dashboard\nDescription: Cross-platform analytics app exposes IPC channels without context isolation. The application uses ipcRenderer.on() with dangerous innerHTML assignments. To solve: Achieve RCE through XSS-to-IPC bridge exploitation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Electron IPC XSS in Desktop Analytics Dashboard\", \"Lab Description\": \"Cross-platform analytics app exposes IPC channels without context isolation. The application uses ipcRenderer.on() with dangerous innerHTML assignments. To solve: Achieve RCE through XSS-to-IPC bridge exploitation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly Memory Mirroring XSS in Financial Trading Platform\nDescription: Stock trading interface mirrors WebAssembly memory to JavaScript ArrayBuffer without validation. The application displays trading errors using innerHTML with raw WASM memory dumps. To solve: Corrupt shared memory to inject HTML payloads into error messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Memory Mirroring XSS in Financial Trading Platform\", \"Lab Description\": \"Stock trading interface mirrors WebAssembly memory to JavaScript ArrayBuffer without validation. The application displays trading errors using innerHTML with raw WASM memory dumps. To solve: Corrupt shared memory to inject HTML payloads into error messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Trusted Types Bypass via COOP/COEP in Healthcare Analytics\nDescription: Patient statistics dashboard enforces Trusted Types but uses permissive cross-origin policies. The application allows iframe embedding with relaxed COOP/COEP headers. To solve: Bypass Trusted Types through prototype pollution in cross-origin iframe communication.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Trusted Types Bypass via COOP/COEP in Healthcare Analytics\", \"Lab Description\": \"Patient statistics dashboard enforces Trusted Types but uses permissive cross-origin policies. The application allows iframe embedding with relaxed COOP/COEP headers. To solve: Bypass Trusted Types through prototype pollution in cross-origin iframe communication.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGPU Shader Injection in 3D Design Viewer\nDescription: CAD visualization tool processes WGSL shaders from untrusted sources with debug logging. The application converts shader compilation errors to HTML without sanitization. To solve: Inject JavaScript through crafted shader error messages.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Shader Injection in 3D Design Viewer\", \"Lab Description\": \"CAD visualization tool processes WGSL shaders from untrusted sources with debug logging. The application converts shader compilation errors to HTML without sanitization. To solve: Inject JavaScript through crafted shader error messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/3 Early Data XSS in E-Commerce Cache\nDescription: Online store implements HTTP/3 with 0-RTT early data support. The application caches responses containing unvalidated early data parameters. To solve: Poison CDN cache through TLS 1.3 early data injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 Early Data XSS in E-Commerce Cache\", \"Lab Description\": \"Online store implements HTTP/3 with 0-RTT early data support. The application caches responses containing unvalidated early data parameters. To solve: Poison CDN cache through TLS 1.3 early data injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Deno Runtime Sandbox Escape via WebSocket Proxy\nDescription: Serverless platform exposes Deno WebSocket proxy with --allow-net permissions. The application uses Deno.writeTextFile() with unsanitized input. To solve: Achieve RCE through XSS-to-filesystem bridge.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Deno Runtime Sandbox Escape via WebSocket Proxy\", \"Lab Description\": \"Serverless platform exposes Deno WebSocket proxy with --allow-net permissions. The application uses Deno.writeTextFile() with unsanitized input. To solve: Achieve RCE through XSS-to-filesystem bridge.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebCodecs Video Frame XSS in Live Streaming Platform\nDescription: Video streaming service processes raw YUV frames using WebCodecs API with vulnerable debug overlays. The application injects user-controlled metadata into <canvas> elements via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs Video Frame XSS in Live Streaming Platform\", \"Lab Description\": \"Video streaming service processes raw YUV frames using WebCodecs API with vulnerable debug overlays. The application injects user-controlled metadata into <canvas> elements via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Private Network Access XSS in Internal Monitoring Tool\nDescription: Corporate network dashboard uses insecure Private Network Access headers with postMessage handlers. The application trusts origin validation for internal IP ranges. To solve: Bypass PNA restrictions through DNS rebinding and inject XSS via cross-origin messages.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Private Network Access XSS in Internal Monitoring Tool\", \"Lab Description\": \"Corporate network dashboard uses insecure Private Network Access headers with postMessage handlers. The application trusts origin validation for internal IP ranges. To solve: Bypass PNA restrictions through DNS rebinding and inject XSS via cross-origin messages.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Import Attributes Injection in Micro-Frontend Orchestrator\nDescription: Cloud-native platform dynamically constructs module imports using user-controlled attributes. The application passes import assertions without validation. To solve: Hijack module loading via crafted integrity hashes and type assertions.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Attributes Injection in Micro-Frontend Orchestrator\", \"Lab Description\": \"Cloud-native platform dynamically constructs module imports using user-controlled attributes. The application passes import assertions without validation. To solve: Hijack module loading via crafted integrity hashes and type assertions.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebHID Device Spoofing XSS in Medical IoT Portal\nDescription: Patient monitoring system connects to WebHID devices without proper origin validation. The application renders device names in dashboards using innerText with vulnerable CSS escapes. To solve: Inject XSS through spoofed HID device metadata.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebHID Device Spoofing XSS in Medical IoT Portal\", \"Lab Description\": \"Patient monitoring system connects to WebHID devices without proper origin validation. The application renders device names in dashboards using innerText with vulnerable CSS escapes. To solve: Inject XSS through spoofed HID device metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: ARIA Role XSS in Accessibility Interface\nDescription: Screen reader compatibility layer misinterprets ARIA role attributes as executable code. The application uses role values in click handlers without validation. To solve: Achieve XSS through crafted role=alertdialog payloads.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA Role XSS in Accessibility Interface\", \"Lab Description\": \"Screen reader compatibility layer misinterprets ARIA role attributes as executable code. The application uses role values in click handlers without validation. To solve: Achieve XSS through crafted role=alertdialog payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: WebAssembly Component Model XSS in Decentralized Exchange\nDescription: Blockchain DEX processes WASM components with unsafe interface type reflection. The application renders component exports using innerHTML for debug purposes. To solve: Achieve XSS through maligned string encoding in component model adapters.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Component Model XSS in Decentralized Exchange\", \"Lab Description\": \"Blockchain DEX processes WASM components with unsafe interface type reflection. The application renders component exports using innerHTML for debug purposes. To solve: Achieve XSS through maligned string encoding in component model adapters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/2 Rapid Reset Cache Poisoning XSS in CDN Edge Nodes\nDescription: Global CDN caches H/2 streams with vulnerable rapid reset request handling. The application reflects query parameters in stale cached responses. To solve: Poison edge cache via request cancellation attacks with XSS payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/2 Rapid Reset Cache Poisoning XSS in CDN Edge Nodes\", \"Lab Description\": \"Global CDN caches H/2 streams with vulnerable rapid reset request handling. The application reflects query parameters in stale cached responses. To solve: Poison edge cache via request cancellation attacks with XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebNN Model Poisoning XSS in AI Art Generator\nDescription: Generative AI platform loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without sanitization. To Solve: Inject HTML through crafted model output names.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebNN Model Poisoning XSS in AI Art Generator\", \"Lab Description\": \"Generative AI platform loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without sanitization. To Solve: Inject HTML through crafted model output names.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Storage Access API XSS in Multi-Site Embedded Widget\nDescription: Universal login widget uses storageAccess() with permissive cross-site cookie access. The application renders OAuth states in hidden fields via dangerouslySetInnerHTML. To Solve: Bypass same-site restrictions via nested iframe storage grants.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Storage Access API XSS in Multi-Site Embedded Widget\", \"Lab Description\": \"Universal login widget uses storageAccess() with permissive cross-site cookie access. The application renders OAuth states in hidden fields via dangerouslySetInnerHTML. To Solve: Bypass same-site restrictions via nested iframe storage grants.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SVG Font Injection XSS in Design Platform Icon Editor\nDescription: Vector graphics editor processes SVG fonts with unsafe @font-face rules. The application uses DOMPurify 3.1.0 with whitelisted font loading. To Solve: Achieve XSS through font glyph path command injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Font Injection XSS in Design Platform Icon Editor\", \"Lab Description\": \"Vector graphics editor processes SVG fonts with unsafe @font-face rules. The application uses DOMPurify 3.1.0 with whitelisted font loading. To Solve: Achieve XSS through font glyph path command injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in AI-Powered Chat History Export\nDescription: LLM chatbot platform exports conversation history as HTML files using unsafe document.implementation.createHTMLDocument(). The application inserts user-controlled message IDs into CSS selectors. To solve: Execute alert() through CSS injection in exported files.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in AI-Powered Chat History Export\", \"Lab Description\": \"LLM chatbot platform exports conversation history as HTML files using unsafe document.implementation.createHTMLDocument(). The application inserts user-controlled message IDs into CSS selectors. To solve: Execute alert() through CSS injection in exported files.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in VR Meeting Room Descriptions\nDescription: Metaverse platform stores WebGL room descriptions in IndexedDB without output encoding. The application renders 3D text using Three.js TextGeometry with raw HTML. To solve: Inject WebGL shader code that triggers JS execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in VR Meeting Room Descriptions\", \"Lab Description\": \"Metaverse platform stores WebGL room descriptions in IndexedDB without output encoding. The application renders 3D text using Three.js TextGeometry with raw HTML. To solve: Inject WebGL shader code that triggers JS execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mutation XSS in Biometric Auth Error Pages\nDescription: Fingerprint login system displays authentication errors using innerText with vulnerable CSS escape handling. The application implements broken Unicode normalization for error codes. To solve: Abuse CSS counter styles to reconstruct script tags.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation XSS in Biometric Auth Error Pages\", \"Lab Description\": \"Fingerprint login system displays authentication errors using innerText with vulnerable CSS escape handling. The application implements broken Unicode normalization for error codes. To solve: Abuse CSS counter styles to reconstruct script tags.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind XSS in Drone Telemetry Dashboard\nDescription: UAV control system stores flight logs in Elasticsearch without input sanitization. The application uses Kibana Timelion expressions to visualize data. To solve: Achieve XSS through malicious Timelion sheet formulas.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind XSS in Drone Telemetry Dashboard\", \"Lab Description\": \"UAV control system stores flight logs in Elasticsearch without input sanitization. The application uses Kibana Timelion expressions to visualize data. To solve: Achieve XSS through malicious Timelion sheet formulas.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in Web3 DAO Proposal Renderer\nDescription: Blockchain governance platform renders proposal markdown using insecure remark-html configuration. The application allows raw HTML in CommonMark with broken sanitization. To solve: Execute alert() through malicious proposal titles.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in Web3 DAO Proposal Renderer\", \"Lab Description\": \"Blockchain governance platform renders proposal markdown using insecure remark-html configuration. The application allows raw HTML in CommonMark with broken sanitization. To solve: Execute alert() through malicious proposal titles.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: WebGPU Compute Shader XSS in Cryptocurrency Mining Dashboard\nDescription: Mining pool interface processes compute shaders with unsafe buffer sharing between JS/WebGPU. The application maps storage buffers to DOM elements via innerHTML. To solve: Corrupt GPU buffers to inject HTML payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Compute Shader XSS in Cryptocurrency Mining Dashboard\", \"Lab Description\": \"Mining pool interface processes compute shaders with unsafe buffer sharing between JS/WebGPU. The application maps storage buffers to DOM elements via innerHTML. To solve: Corrupt GPU buffers to inject HTML payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebHID Medical Sensor XSS in Telehealth Platform\nDescription: Patient monitoring system connects to WebHID glucose monitors without input validation. The application renders device names in <select> elements via dangerouslySetInnerHTML. To solve: Spoof medical device metadata to inject XSS payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebHID Medical Sensor XSS in Telehealth Platform\", \"Lab Description\": \"Patient monitoring system connects to WebHID glucose monitors without input validation. The application renders device names in <select> elements via dangerouslySetInnerHTML. To solve: Spoof medical device metadata to inject XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: HTTP/3 DATAGRAM XSS in Real-Time Sports Betting\nDescription: Odds streaming service uses QUIC DATAGRAM frames with unsafe buffer concatenation. The application processes early data with vulnerable TextDecoder streams. To solve: Inject XSS through fragmented QUIC payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/3 DATAGRAM XSS in Real-Time Sports Betting\", \"Lab Description\": \"Odds streaming service uses QUIC DATAGRAM frames with unsafe buffer concatenation. The application processes early data with vulnerable TextDecoder streams. To solve: Inject XSS through fragmented QUIC payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CSS Anchor Positioning XSS in Legal Document Editor\nDescription: Contract drafting tool implements CSS anchor positioning with unsafe grid-template-area names. The application reflects user input in CSSOM using insertRule(). To solve: Abuse grid area identifiers to break style context.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Anchor Positioning XSS in Legal Document Editor\", \"Lab Description\": \"Contract drafting tool implements CSS anchor positioning with unsafe grid-template-area names. The application reflects user input in CSSOM using insertRule(). To solve: Abuse grid area identifiers to break style context.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Bidirectional Stream XSS in AR Navigation\nDescription: Augmented reality navigation system uses WebTransport streams for location updates. The application processes geospatial data with unsafe DOMParser(). To solve: Inject HTML through malformed GeoJSON payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Bidirectional Stream XSS in AR Navigation\", \"Lab Description\": \"Augmented reality navigation system uses WebTransport streams for location updates. The application processes geospatial data with unsafe DOMParser(). To solve: Inject HTML through malformed GeoJSON payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebCodecs Video Frame Injection in Live Streaming Moderation\nDescription: Content moderation tool analyzes video streams using WebCodecs API with unsafe debug overlay rendering. The application injects user-controlled metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebCodecs Video Frame Injection in Live Streaming Moderation\", \"Lab Description\": \"Content moderation tool analyzes video streams using WebCodecs API with unsafe debug overlay rendering. The application injects user-controlled metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted video timestamp payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Private Network Access Bypass in Internal HR System\nDescription: Employee portal uses relaxed PNA headers with postMessage handlers trusting internal IPs. The application renders error messages via dangerouslySetInnerHTML. To solve: Bypass IP validation via DNS rebinding and inject XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Private Network Access Bypass in Internal HR System\", \"Lab Description\": \"Employee portal uses relaxed PNA headers with postMessage handlers trusting internal IPs. The application renders error messages via dangerouslySetInnerHTML. To solve: Bypass IP validation via DNS rebinding and inject XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Import Maps Sandbox Escape in Micro-Frontend Host\nDescription: Cloud platform dynamically constructs import maps from URL parameters with lax Content-Security-Policy. The application uses JSON.parse() on user input without validation. To solve: Hijack module loading via crafted integrity hashes.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Import Maps Sandbox Escape in Micro-Frontend Host\", \"Lab Description\": \"Cloud platform dynamically constructs import maps from URL parameters with lax Content-Security-Policy. The application uses JSON.parse() on user input without validation. To solve: Hijack module loading via crafted integrity hashes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA Live Region XSS in Social Media Notifications\nDescription: Accessibility-focused platform uses aria-live regions with dangerous dynamic content updates. The application renders notifications via innerHTML without sanitizing screen reader text. To solve: Abuse live region politeness levels to trigger XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA Live Region XSS in Social Media Notifications\", \"Lab Description\": \"Accessibility-focused platform uses aria-live regions with dangerous dynamic content updates. The application renders notifications via innerHTML without sanitizing screen reader text. To solve: Abuse live region politeness levels to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebNN Model Poisoning XSS in AI-Powered Recruiting\nDescription: Job matching service loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without encoding. To solve: Inject HTML through crafted model output names.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebNN Model Poisoning XSS in AI-Powered Recruiting\", \"Lab Description\": \"Job matching service loads ONNX models with unsafe tensor metadata handling. The application reflects model labels in <meta> tags without encoding. To solve: Inject HTML through crafted model output names.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: WebAssembly Threads XSS in Multiplayer Game Lobby\nDescription: Browser-based game uses WebAssembly threads for real-time sync with unsafe SharedArrayBuffer exposure. The application renders player names via innerHTML using memory-mapped Atomics. To solve: Corrupt shared memory to inject HTML payloads.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebAssembly Threads XSS in Multiplayer Game Lobby\", \"Lab Description\": \"Browser-based game uses WebAssembly threads for real-time sync with unsafe SharedArrayBuffer exposure. The application renders player names via innerHTML using memory-mapped Atomics. To solve: Corrupt shared memory to inject HTML payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: HTTP/2 Trailers XSS in Ad Tech Bid Stream\nDescription: Real-time bidding platform processes HTTP/2 trailers with vulnerable trailer header reflection. The application logs bid responses using console.html() without encoding. To solve: Inject XSS via malformed Trailer: XSS-Header fields.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"HTTP/2 Trailers XSS in Ad Tech Bid Stream\", \"Lab Description\": \"Real-time bidding platform processes HTTP/2 trailers with vulnerable trailer header reflection. The application logs bid responses using console.html() without encoding. To solve: Inject XSS via malformed Trailer: XSS-Header fields.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS View Transitions XSS in E-Commerce Product Carousel\nDescription: Product carousel implements view transitions API with unsafe pseudo-element content handling. The application reflects product IDs in ::view-transition-old() selectors. To solve: Abuse named transitions to inject style-based XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS View Transitions XSS in E-Commerce Product Carousel\", \"Lab Description\": \"Product carousel implements view transitions API with unsafe pseudo-element content handling. The application reflects product IDs in ::view-transition-old() selectors. To solve: Abuse named transitions to inject style-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebSerial API Spoofing XSS in Industrial Control Panel\nDescription: SCADA system connects to WebSerial devices with unsafe port.claim() validation. The application renders device metadata via innerText with vulnerable CSS escapes. To solve: Spoof USB-CDC device with malicious metadata.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebSerial API Spoofing XSS in Industrial Control Panel\", \"Lab Description\": \"SCADA system connects to WebSerial devices with unsafe port.claim() validation. The application renders device metadata via innerText with vulnerable CSS escapes. To solve: Spoof USB-CDC device with malicious metadata.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SVG Filter Primitive XSS in Data Visualization Dashboard\nDescription: Analytics platform implements SVG filters with unsafe foreignObject processing. The application uses <feImage> with data: URLs without MIME validation. To solve: Achieve XSS through filter chain injection.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SVG Filter Primitive XSS in Data Visualization Dashboard\", \"Lab Description\": \"Analytics platform implements SVG filters with unsafe foreignObject processing. The application uses <feImage> with data: URLs without MIME validation. To solve: Achieve XSS through filter chain injection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebGPU Storage Texture XSS in 3D Medical Imaging\nDescription: Radiology viewer uses storage textures for volume rendering with unsafe buffer mapping to DOM. The application writes scan metadata into textures via compute shaders without validation. To solve: Inject HTML through crafted texture data writes.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebGPU Storage Texture XSS in 3D Medical Imaging\", \"Lab Description\": \"Radiology viewer uses storage textures for volume rendering with unsafe buffer mapping to DOM. The application writes scan metadata into textures via compute shaders without validation. To solve: Inject HTML through crafted texture data writes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Private Access Token Bypass in Paywall System\nDescription: News paywall implements PATs with unsafe token reflection in <meta> tags. The application leaks token details via innerHTML for debugging. To solve: Forge PATs containing XSS payloads through Chrome's Trust Token API.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Private Access Token Bypass in Paywall System\", \"Lab Description\": \"News paywall implements PATs with unsafe token reflection in <meta> tags. The application leaks token details via innerHTML for debugging. To solve: Forge PATs containing XSS payloads through Chrome's Trust Token API.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CSS Nesting Injection in Design System Theme Editor\nDescription: UI theme builder processes nested CSS rules with vulnerable postcss-preset-env configuration. The application uses insertRule() with raw user input. To solve: Break style context through deeply nested @media queries.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CSS Nesting Injection in Design System Theme Editor\", \"Lab Description\": \"UI theme builder processes nested CSS rules with vulnerable postcss-preset-env configuration. The application uses insertRule() with raw user input. To solve: Break style context through deeply nested @media queries.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: WebTransport Datagram XSS in Autonomous Vehicle Control\nDescription: Self-driving car interface uses unidirectional WebTransport datagrams for sensor updates. The application renders LIDAR data via innerHTML without validation. To solve: Inject payloads through malformed QUIC datagram buffers.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"WebTransport Datagram XSS in Autonomous Vehicle Control\", \"Lab Description\": \"Self-driving car interface uses unidirectional WebTransport datagrams for sensor updates. The application renders LIDAR data via innerHTML without validation. To solve: Inject payloads through malformed QUIC datagram buffers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: ARIA 1.3 Role Bypass in Accessibility Dashboard\nDescription: WCAG compliance tool implements ARIA 1.3 roles with dangerous role=generic parsing. The application uses setAttribute('role') with user input. To solve: Achieve XSS through role=alertdialog and aria-errormessage chaining.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"ARIA 1.3 Role Bypass in Accessibility Dashboard\", \"Lab Description\": \"WCAG compliance tool implements ARIA 1.3 roles with dangerous role=generic parsing. The application uses setAttribute('role') with user input. To solve: Achieve XSS through role=alertdialog and aria-errormessage chaining.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in internal bug tracking system notes\nDescription: A bug tracking system allows developers to add notes to bug reports. These notes are rendered in the admin panel without proper sanitization, leading to stored XSS. To solve: Inject a script payload in a bug note.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal bug tracking system notes\", \"Lab Description\": \"A bug tracking system allows developers to add notes to bug reports. These notes are rendered in the admin panel without proper sanitization, leading to stored XSS. To solve: Inject a script payload in a bug note.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in product filtering system\nDescription: An e-commerce site reflects user-selected filters into the product list page without sanitization. To solve: Inject an XSS payload into the filter parameters.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in product filtering system\", \"Lab Description\": \"An e-commerce site reflects user-selected filters into the product list page without sanitization. To solve: Inject an XSS payload into the filter parameters.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS via localStorage user theme\nDescription: The application loads user-preferred themes from localStorage and inserts them into the DOM without sanitization. To solve: Inject a payload into the theme field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via localStorage user theme\", \"Lab Description\": \"The application loads user-preferred themes from localStorage and inserts them into the DOM without sanitization. To solve: Inject a payload into the theme field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online recipe sharing site ingredients\nDescription: A recipe sharing platform allows users to submit ingredients. The application renders them directly without escaping. To solve: Inject a script into the ingredients list.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online recipe sharing site ingredients\", \"Lab Description\": \"A recipe sharing platform allows users to submit ingredients. The application renders them directly without escaping. To solve: Inject a script into the ingredients list.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription confirmation\nDescription: When users subscribe to the newsletter, their email is reflected back in the confirmation message without sanitization. To solve: Inject an XSS payload via the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription confirmation\", \"Lab Description\": \"When users subscribe to the newsletter, their email is reflected back in the confirmation message without sanitization. To solve: Inject an XSS payload via the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in course discussion forum\nDescription: Students post questions in the course forum. Posts are rendered without sanitization. To solve: Inject a persistent XSS payload into a forum post.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in course discussion forum\", \"Lab Description\": \"Students post questions in the course forum. Posts are rendered without sanitization. To solve: Inject a persistent XSS payload into a forum post.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in online documentation viewer\nDescription: The documentation viewer loads section content based on a URL hash and renders it using innerHTML. There's no sanitization. To solve: Inject a malicious fragment.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in online documentation viewer\", \"Lab Description\": \"The documentation viewer loads section content based on a URL hash and renders it using innerHTML. There's no sanitization. To solve: Inject a malicious fragment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in movie review search field\nDescription: A movie review site reflects the search query without escaping. To solve: Inject a payload into the search input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in movie review search field\", \"Lab Description\": \"A movie review site reflects the search query without escaping. To solve: Inject a payload into the search input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online book store reviews\nDescription: Users can submit reviews for books. Reviews are rendered without sanitization. To solve: Submit a review containing an XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online book store reviews\", \"Lab Description\": \"Users can submit reviews for books. Reviews are rendered without sanitization. To solve: Submit a review containing an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via welcome message field\nDescription: The welcome message for logged-in users is dynamically injected into the DOM using innerHTML without escaping. To solve: Inject an XSS payload via user name.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via welcome message field\", \"Lab Description\": \"The welcome message for logged-in users is dynamically injected into the DOM using innerHTML without escaping. To solve: Inject an XSS payload via user name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in event announcement system\nDescription: An event management platform allows organizers to create announcements. Announcements are rendered without sanitization. To solve: Inject a persistent XSS payload in the announcement text.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event announcement system\", \"Lab Description\": \"An event management platform allows organizers to create announcements. Announcements are rendered without sanitization. To solve: Inject a persistent XSS payload in the announcement text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in flight booking search form\nDescription: A flight booking system reflects search parameters back into the results page without escaping. To solve: Inject a script payload in the city field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in flight booking search form\", \"Lab Description\": \"A flight booking system reflects search parameters back into the results page without escaping. To solve: Inject a script payload in the city field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS via browser localStorage theme selection\nDescription: The application saves user theme preferences in localStorage and applies them directly to the page without sanitization. To solve: Inject a payload via localStorage manipulation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via browser localStorage theme selection\", \"Lab Description\": \"The application saves user theme preferences in localStorage and applies them directly to the page without sanitization. To solve: Inject a payload via localStorage manipulation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online job portal application letter\nDescription: Candidates can submit a cover letter when applying for jobs. Letters are displayed to employers without sanitization. To solve: Inject a stored XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online job portal application letter\", \"Lab Description\": \"Candidates can submit a cover letter when applying for jobs. Letters are displayed to employers without sanitization. To solve: Inject a stored XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in forgot password page\nDescription: The password reset page reflects email addresses without encoding. To solve: Inject a script payload in the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in forgot password page\", \"Lab Description\": \"The password reset page reflects email addresses without encoding. To solve: Inject a script payload in the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in library management system book reviews\nDescription: Students submit book reviews. Reviews are rendered without escaping. To solve: Inject an XSS payload in the review form.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library management system book reviews\", \"Lab Description\": \"Students submit book reviews. Reviews are rendered without escaping. To solve: Inject an XSS payload in the review form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in hotel booking form\nDescription: The booking form reflects user data after submission without escaping. To solve: Inject an XSS payload via guest name.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in hotel booking form\", \"Lab Description\": \"The booking form reflects user data after submission without escaping. To solve: Inject an XSS payload via guest name.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in social media post editor\nDescription: User-generated posts are saved in localStorage and dynamically injected into the feed using innerHTML without escaping. To solve: Inject a script via a post.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in social media post editor\", \"Lab Description\": \"User-generated posts are saved in localStorage and dynamically injected into the feed using innerHTML without escaping. To solve: Inject a script via a post.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online medical appointment booking notes\nDescription: Patients can leave notes for doctors while booking appointments. Notes are rendered without escaping, enabling XSS. To solve: Inject a malicious script.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online medical appointment booking notes\", \"Lab Description\": \"Patients can leave notes for doctors while booking appointments. Notes are rendered without escaping, enabling XSS. To solve: Inject a malicious script.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback form of shopping website\nDescription: The feedback page reflects comments without sanitization. To solve: Inject XSS payload via feedback field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback form of shopping website\", \"Lab Description\": \"The feedback page reflects comments without sanitization. To solve: Inject XSS payload via feedback field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in conference attendee bio\nDescription: The conference system allows users to submit a bio displayed publicly without sanitization. To solve: Inject a persistent XSS payload into the bio field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference attendee bio\", \"Lab Description\": \"The conference system allows users to submit a bio displayed publicly without sanitization. To solve: Inject a persistent XSS payload into the bio field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset confirmation\nDescription: The password reset confirmation page reflects user input without escaping. To solve: Inject an XSS payload through the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset confirmation\", \"Lab Description\": \"The password reset confirmation page reflects user input without escaping. To solve: Inject an XSS payload through the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online event RSVP comments\nDescription: RSVP forms allow users to leave comments, which are rendered unsanitized. To solve: Inject a persistent XSS payload via the comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online event RSVP comments\", \"Lab Description\": \"RSVP forms allow users to leave comments, which are rendered unsanitized. To solve: Inject a persistent XSS payload via the comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in flight ticket booking error page\nDescription: Flight booking system reflects invalid parameters in error pages without escaping. To solve: Inject a script via a broken booking attempt.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in flight ticket booking error page\", \"Lab Description\": \"Flight booking system reflects invalid parameters in error pages without escaping. To solve: Inject a script via a broken booking attempt.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in project task dashboard widget\nDescription: Task details are read from localStorage and inserted with innerHTML without sanitization. To solve: Inject a payload into localStorage data.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in project task dashboard widget\", \"Lab Description\": \"Task details are read from localStorage and inserted with innerHTML without sanitization. To solve: Inject a payload into localStorage data.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in fitness app progress notes\nDescription: Users log their fitness progress, which is displayed without sanitization. To solve: Inject a script into the progress notes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness app progress notes\", \"Lab Description\": \"Users log their fitness progress, which is displayed without sanitization. To solve: Inject a script into the progress notes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in vehicle service appointment booking\nDescription: Vehicle service booking form reflects user name unsanitized. To solve: Inject an XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in vehicle service appointment booking\", \"Lab Description\": \"Vehicle service booking form reflects user name unsanitized. To solve: Inject an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online school class comments\nDescription: Students leave class feedback, which is rendered without escaping. To solve: Inject a persistent XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online school class comments\", \"Lab Description\": \"Students leave class feedback, which is rendered without escaping. To solve: Inject a persistent XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online portfolio contact form\nDescription: The contact form reflects submitted data back without encoding. To solve: Inject a script payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online portfolio contact form\", \"Lab Description\": \"The contact form reflects submitted data back without encoding. To solve: Inject a script payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in dynamic leaderboard update\nDescription: Leaderboard entries are dynamically generated from user input and rendered unsanitized. To solve: Inject a malicious payload in the name field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic leaderboard update\", \"Lab Description\": \"Leaderboard entries are dynamically generated from user input and rendered unsanitized. To solve: Inject a malicious payload in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in book review platform comment field\nDescription: A book review platform allows users to comment on books. Comments are rendered without sanitization, leading to stored XSS. To solve: Inject a script payload in the comment field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in book review platform comment field\", \"Lab Description\": \"A book review platform allows users to comment on books. Comments are rendered without sanitization, leading to stored XSS. To solve: Inject a script payload in the comment field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in order tracking system\nDescription: Order tracking page reflects user-supplied tracking IDs into the HTML unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in order tracking system\", \"Lab Description\": \"Order tracking page reflects user-supplied tracking IDs into the HTML unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event organizer description field\nDescription: An event platform allows organizers to provide a description. The description is displayed without sanitization. To solve: Inject persistent XSS into the description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event organizer description field\", \"Lab Description\": \"An event platform allows organizers to provide a description. The description is displayed without sanitization. To solve: Inject persistent XSS into the description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in account activation confirmation page\nDescription: Activation confirmation page reflects email without proper encoding. To solve: Inject an XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in account activation confirmation page\", \"Lab Description\": \"Activation confirmation page reflects email without proper encoding. To solve: Inject an XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online quiz user nickname\nDescription: The quiz platform allows setting a nickname, which is reflected without escaping. To solve: Inject a persistent XSS payload in the nickname.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online quiz user nickname\", \"Lab Description\": \"The quiz platform allows setting a nickname, which is reflected without escaping. To solve: Inject a persistent XSS payload in the nickname.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support ticket submission preview\nDescription: Support ticket preview reflects ticket title without encoding. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support ticket submission preview\", \"Lab Description\": \"Support ticket preview reflects ticket title without encoding. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in task management app project name\nDescription: Users create projects with names rendered without sanitization. To solve: Inject a script payload into the project name field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in task management app project name\", \"Lab Description\": \"Users create projects with names rendered without sanitization. To solve: Inject a script payload into the project name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online auction bid page\nDescription: The auction platform reflects item names during bid confirmation without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online auction bid page\", \"Lab Description\": \"The auction platform reflects item names during bid confirmation without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in recipe sharing app recipe title\nDescription: Recipe titles are displayed on the homepage without sanitization. To solve: Inject a script payload into the recipe title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe sharing app recipe title\", \"Lab Description\": \"Recipe titles are displayed on the homepage without sanitization. To solve: Inject a script payload into the recipe title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in dynamic poll creation page\nDescription: Poll options are dynamically inserted from localStorage without escaping. To solve: Inject a script into the localStorage option.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic poll creation page\", \"Lab Description\": \"Poll options are dynamically inserted from localStorage without escaping. To solve: Inject a script into the localStorage option.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in online bookstore author bio field\nDescription: Authors can submit bios for their profile pages. The input is displayed without sanitization. To solve: Inject a stored XSS payload into the bio.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online bookstore author bio field\", \"Lab Description\": \"Authors can submit bios for their profile pages. The input is displayed without sanitization. To solve: Inject a stored XSS payload into the bio.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in product search filter\nDescription: A product search filter reflects user input in search results without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in product search filter\", \"Lab Description\": \"A product search filter reflects user input in search results without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in student portal project title\nDescription: Students submit project titles which are rendered without escaping. To solve: Inject a stored XSS payload in the title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student portal project title\", \"Lab Description\": \"Students submit project titles which are rendered without escaping. To solve: Inject a stored XSS payload in the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in appointment booking confirmation page\nDescription: Booking confirmation reflects user-entered name unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in appointment booking confirmation page\", \"Lab Description\": \"Booking confirmation reflects user-entered name unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in movie rating site review field\nDescription: Movie reviews are displayed without escaping user input. To solve: Inject a persistent XSS payload into the review field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in movie rating site review field\", \"Lab Description\": \"Movie reviews are displayed without escaping user input. To solve: Inject a persistent XSS payload into the review field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription success message\nDescription: Subscription confirmation reflects email address without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription success message\", \"Lab Description\": \"Subscription confirmation reflects email address without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker issue title\nDescription: Bug tracker displays issue titles without escaping. To solve: Inject a persistent XSS payload into the issue title field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker issue title\", \"Lab Description\": \"Bug tracker displays issue titles without escaping. To solve: Inject a persistent XSS payload into the issue title field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in discount coupon generation page\nDescription: Coupon codes are displayed back to users without encoding input. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in discount coupon generation page\", \"Lab Description\": \"Coupon codes are displayed back to users without encoding input. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in music sharing app playlist description\nDescription: Playlist descriptions are rendered without escaping user input. To solve: Inject a stored XSS payload into the playlist description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in music sharing app playlist description\", \"Lab Description\": \"Playlist descriptions are rendered without escaping user input. To solve: Inject a stored XSS payload into the playlist description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel booking system review form\nDescription: Travelers can leave reviews after completing trips. The application renders reviews without sanitizing input. To solve: Inject a stored XSS payload into the review form.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking system review form\", \"Lab Description\": \"Travelers can leave reviews after completing trips. The application renders reviews without sanitizing input. To solve: Inject a stored XSS payload into the review form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in blog comment preview\nDescription: Before submitting a comment, users see a preview that reflects their input without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in blog comment preview\", \"Lab Description\": \"Before submitting a comment, users see a preview that reflects their input without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online food ordering app restaurant description\nDescription: Restaurant owners can submit descriptions, which are displayed to customers without sanitization. To solve: Inject a stored XSS payload into the description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online food ordering app restaurant description\", \"Lab Description\": \"Restaurant owners can submit descriptions, which are displayed to customers without sanitization. To solve: Inject a stored XSS payload into the description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in user feedback acknowledgment page\nDescription: Feedback confirmation pages reflect user inputs directly. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in user feedback acknowledgment page\", \"Lab Description\": \"Feedback confirmation pages reflect user inputs directly. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event management site event title field\nDescription: Event titles created by organizers are displayed without escaping. To solve: Inject a stored XSS payload into the title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event management site event title field\", \"Lab Description\": \"Event titles created by organizers are displayed without escaping. To solve: Inject a stored XSS payload into the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online education platform signup form\nDescription: Signup form reflects user input without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online education platform signup form\", \"Lab Description\": \"Signup form reflects user input without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in social network post title\nDescription: Users can create posts with titles that are rendered without escaping. To solve: Inject a stored XSS payload into the post title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in social network post title\", \"Lab Description\": \"Users can create posts with titles that are rendered without escaping. To solve: Inject a stored XSS payload into the post title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in email contact us form response\nDescription: Contact form response page reflects user name unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in email contact us form response\", \"Lab Description\": \"Contact form response page reflects user name unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internal HR portal employee announcement\nDescription: Internal announcements by HR are displayed without sanitizing input. To solve: Inject a stored XSS payload in the announcement.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal HR portal employee announcement\", \"Lab Description\": \"Internal announcements by HR are displayed without sanitizing input. To solve: Inject a stored XSS payload in the announcement.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in fitness app workout description\nDescription: Users can create custom workout plans with descriptions. The description is rendered without sanitization. To solve: Inject a persistent XSS payload into the workout description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness app workout description\", \"Lab Description\": \"Users can create custom workout plans with descriptions. The description is rendered without sanitization. To solve: Inject a persistent XSS payload into the workout description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in flight booking search\nDescription: Flight booking form reflects the destination parameter in the search result page without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in flight booking search\", \"Lab Description\": \"Flight booking form reflects the destination parameter in the search result page without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online bookstore author bio\nDescription: Authors can add bios which are displayed without escaping. To solve: Inject a stored XSS payload in the bio field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online bookstore author bio\", \"Lab Description\": \"Authors can add bios which are displayed without escaping. To solve: Inject a stored XSS payload in the bio field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset message\nDescription: Password reset confirmation reflects email input without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset message\", \"Lab Description\": \"Password reset confirmation reflects email input without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in recipe sharing site recipe name\nDescription: Recipe names submitted by users are rendered directly. To solve: Inject a stored XSS payload in the recipe name field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe sharing site recipe name\", \"Lab Description\": \"Recipe names submitted by users are rendered directly. To solve: Inject a stored XSS payload in the recipe name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online exam platform result summary\nDescription: After submitting an exam, the result page reflects the user's name without sanitization. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online exam platform result summary\", \"Lab Description\": \"After submitting an exam, the result page reflects the user's name without sanitization. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online donation site donor message\nDescription: Donor messages are displayed without escaping user input. To solve: Inject a stored XSS payload in the message field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online donation site donor message\", \"Lab Description\": \"Donor messages are displayed without escaping user input. To solve: Inject a stored XSS payload in the message field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in book review site reviewer name\nDescription: Reviewer names are reflected unsanitized on the book review page. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in book review site reviewer name\", \"Lab Description\": \"Reviewer names are reflected unsanitized on the book review page. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online petition platform supporter comment\nDescription: Supporter comments are displayed without sanitization. To solve: Inject a stored XSS payload into the comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online petition platform supporter comment\", \"Lab Description\": \"Supporter comments are displayed without sanitization. To solve: Inject a stored XSS payload into the comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in project management tool task description\nDescription: A project management tool allows users to add task descriptions. The input is stored and rendered without sanitization. To solve: Inject a persistent XSS payload in the task description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in project management tool task description\", \"Lab Description\": \"A project management tool allows users to add task descriptions. The input is stored and rendered without sanitization. To solve: Inject a persistent XSS payload in the task description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online survey form\nDescription: An online survey form reflects user input directly in the confirmation page without sanitization. To solve: Inject a reflected XSS payload in the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online survey form\", \"Lab Description\": \"An online survey form reflects user input directly in the confirmation page without sanitization. To solve: Inject a reflected XSS payload in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in e-learning platform assignment feedback\nDescription: Students can submit feedback on assignments. The input is stored and displayed without escaping, leading to stored XSS. To solve: Inject a script in the feedback section.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-learning platform assignment feedback\", \"Lab Description\": \"Students can submit feedback on assignments. The input is stored and displayed without escaping, leading to stored XSS. To solve: Inject a script in the feedback section.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in blog post title\nDescription: Blog post titles are stored without sanitization, leading to stored XSS. To solve: Submit a malicious script as the post title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog post title\", \"Lab Description\": \"Blog post titles are stored without sanitization, leading to stored XSS. To solve: Submit a malicious script as the post title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset form\nDescription: The reset form reflects the user email without sanitization, allowing reflected XSS. To solve: Inject a script into the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset form\", \"Lab Description\": \"The reset form reflects the user email without sanitization, allowing reflected XSS. To solve: Inject a script into the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event registration comments\nDescription: Users can leave comments on event registrations, which are stored and displayed unsanitized. To solve: Inject a persistent XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event registration comments\", \"Lab Description\": \"Users can leave comments on event registrations, which are stored and displayed unsanitized. To solve: Inject a persistent XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact us form\nDescription: The contact form reflects user message into response without encoding. To solve: Inject a script via message field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact us form\", \"Lab Description\": \"The contact form reflects user message into response without encoding. To solve: Inject a script via message field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online shop product reviews\nDescription: Product reviews are displayed without sanitization, leading to stored XSS. To solve: Submit malicious review payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online shop product reviews\", \"Lab Description\": \"Product reviews are displayed without sanitization, leading to stored XSS. To solve: Submit malicious review payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup\nDescription: Newsletter signup reflects submitted name into response page unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup\", \"Lab Description\": \"Newsletter signup reflects submitted name into response page unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in public forum thread replies\nDescription: Forum replies are saved and displayed without escaping, allowing stored XSS attacks. To solve: Inject XSS via reply field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in public forum thread replies\", \"Lab Description\": \"Forum replies are saved and displayed without escaping, allowing stored XSS attacks. To solve: Inject XSS via reply field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in internal notes section\nDescription: An internal CRM system allows adding notes to customer profiles. These notes are rendered without sanitization. To solve: Inject a persistent XSS payload in a note field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal notes section\", \"Lab Description\": \"An internal CRM system allows adding notes to customer profiles. These notes are rendered without sanitization. To solve: Inject a persistent XSS payload in a note field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in job application form\nDescription: The job application form reflects user-submitted name into the success page without encoding. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in job application form\", \"Lab Description\": \"The job application form reflects user-submitted name into the success page without encoding. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in blog post comment section\nDescription: Comments on blog posts are stored and displayed without proper sanitization, leading to stored XSS. To solve: Submit a malicious comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog post comment section\", \"Lab Description\": \"Comments on blog posts are stored and displayed without proper sanitization, leading to stored XSS. To solve: Submit a malicious comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter unsubscribe page\nDescription: When unsubscribing from the newsletter, the email field is reflected in the response without escaping, leading to reflected XSS. To solve: Inject a script via email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter unsubscribe page\", \"Lab Description\": \"When unsubscribing from the newsletter, the email field is reflected in the response without escaping, leading to reflected XSS. To solve: Inject a script via email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in portfolio project descriptions\nDescription: Users can create portfolios by adding project descriptions. These descriptions are rendered without validation. To solve: Inject a stored XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in portfolio project descriptions\", \"Lab Description\": \"Users can create portfolios by adding project descriptions. These descriptions are rendered without validation. To solve: Inject a stored XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in event registration confirmation\nDescription: When registering for events, user input is reflected into the confirmation page without escaping. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in event registration confirmation\", \"Lab Description\": \"When registering for events, user input is reflected into the confirmation page without escaping. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in FAQ question submission\nDescription: Users can submit questions for the FAQ section, but input is saved and rendered without validation. To solve: Inject stored XSS via question field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in FAQ question submission\", \"Lab Description\": \"Users can submit questions for the FAQ section, but input is saved and rendered without validation. To solve: Inject stored XSS via question field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in site feedback form\nDescription: Feedback form reflects submitted text into a confirmation page unsanitized. To solve: Inject a reflected XSS payload.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in site feedback form\", \"Lab Description\": \"Feedback form reflects submitted text into a confirmation page unsanitized. To solve: Inject a reflected XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug report description\nDescription: Bug report descriptions are stored and rendered without escaping, leading to stored XSS vulnerabilities. To solve: Inject a script via bug description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug report description\", \"Lab Description\": \"Bug report descriptions are stored and rendered without escaping, leading to stored XSS vulnerabilities. To solve: Inject a script via bug description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in login error message\nDescription: Incorrect login attempts reflect user input into an error message unsanitized, enabling reflected XSS. To solve: Inject a script via username field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in login error message\", \"Lab Description\": \"Incorrect login attempts reflect user input into an error message unsanitized, enabling reflected XSS. To solve: Inject a script via username field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user profile status message\nDescription: Users can set a status message on their profile, but the input is stored and rendered without sanitization, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user profile status message\", \"Lab Description\": \"Users can set a status message on their profile, but the input is stored and rendered without sanitization, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset form\nDescription: The password reset page reflects the email address back into the page without proper escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset form\", \"Lab Description\": \"The password reset page reflects the email address back into the page without proper escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in customer feedback form\nDescription: Feedback submitted through the customer feedback form is stored in the database and displayed without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in customer feedback form\", \"Lab Description\": \"Feedback submitted through the customer feedback form is stored in the database and displayed without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in report abuse form\nDescription: User-submitted report messages are reflected back without sanitization, enabling reflected XSS attacks.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in report abuse form\", \"Lab Description\": \"User-submitted report messages are reflected back without sanitization, enabling reflected XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in conference submission abstracts\nDescription: Abstracts submitted for a conference are stored and displayed without sanitization, leading to persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference submission abstracts\", \"Lab Description\": \"Abstracts submitted for a conference are stored and displayed without sanitization, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online booking system\nDescription: The booking confirmation page reflects user-submitted input without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online booking system\", \"Lab Description\": \"The booking confirmation page reflects user-submitted input without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in product question and answer section\nDescription: Users can submit questions on product pages, but these are displayed unsanitized, leading to stored XSS vulnerabilities.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in product question and answer section\", \"Lab Description\": \"Users can submit questions on product pages, but these are displayed unsanitized, leading to stored XSS vulnerabilities.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact us form\nDescription: The contact us form reflects the name field back in the response page without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact us form\", \"Lab Description\": \"The contact us form reflects the name field back in the response page without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in support ticket messages\nDescription: Support ticket messages are stored unsanitized and displayed to admins, leading to stored XSS vulnerabilities.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in support ticket messages\", \"Lab Description\": \"Support ticket messages are stored unsanitized and displayed to admins, leading to stored XSS vulnerabilities.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback preview page\nDescription: The feedback preview page reflects the feedback text input without proper encoding, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback preview page\", \"Lab Description\": \"The feedback preview page reflects the feedback text input without proper encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event management platform guest notes\nDescription: Guests can leave notes when registering for events. The notes are rendered without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event management platform guest notes\", \"Lab Description\": \"Guests can leave notes when registering for events. The notes are rendered without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in product return form\nDescription: The return request form reflects user comments directly into the page without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in product return form\", \"Lab Description\": \"The return request form reflects user comments directly into the page without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online newspaper comment section\nDescription: Reader comments on articles are stored unsanitized, leading to persistent XSS vulnerabilities.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online newspaper comment section\", \"Lab Description\": \"Reader comments on articles are stored unsanitized, leading to persistent XSS vulnerabilities.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support live chat pre-form\nDescription: The support chat pre-form echoes back the name field without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support live chat pre-form\", \"Lab Description\": \"The support chat pre-form echoes back the name field without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in e-commerce wishlist notes\nDescription: Users can add notes to wishlist items. These notes are stored without validation, allowing stored XSS attacks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-commerce wishlist notes\", \"Lab Description\": \"Users can add notes to wishlist items. These notes are stored without validation, allowing stored XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in job application portal cover letter\nDescription: The job application form reflects cover letters without sanitization during preview, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in job application portal cover letter\", \"Lab Description\": \"The job application form reflects cover letters without sanitization during preview, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in university course review system\nDescription: Students submit course reviews, but reviews are stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in university course review system\", \"Lab Description\": \"Students submit course reviews, but reviews are stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in event RSVP form\nDescription: The RSVP form for events reflects user name without encoding, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in event RSVP form\", \"Lab Description\": \"The RSVP form for events reflects user name without encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car rental system customer comments\nDescription: Customers can leave comments about rentals. The input is stored without sanitization, allowing XSS attacks.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car rental system customer comments\", \"Lab Description\": \"Customers can leave comments about rentals. The input is stored without sanitization, allowing XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in file upload metadata field\nDescription: The file uploader accepts a description field that is reflected without escaping, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in file upload metadata field\", \"Lab Description\": \"The file uploader accepts a description field that is reflected without escaping, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate portal property notes\nDescription: Real estate users can add private notes to property listings. These notes are stored without sanitization, allowing persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate portal property notes\", \"Lab Description\": \"Real estate users can add private notes to property listings. These notes are stored without sanitization, allowing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset form\nDescription: The password reset form reflects the email input without sanitization, enabling reflected XSS attacks.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset form\", \"Lab Description\": \"The password reset form reflects the email input without sanitization, enabling reflected XSS attacks.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in project collaboration tool task updates\nDescription: Users can post updates to shared tasks, but the input is stored without validation, causing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in project collaboration tool task updates\", \"Lab Description\": \"Users can post updates to shared tasks, but the input is stored without validation, causing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in discount coupon generator\nDescription: The discount code generation page reflects input data without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in discount coupon generator\", \"Lab Description\": \"The discount code generation page reflects input data without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in book review platform\nDescription: Readers submit reviews for books without input sanitization, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in book review platform\", \"Lab Description\": \"Readers submit reviews for books without input sanitization, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in subscription confirmation page\nDescription: The subscription form reflects the user's email on the confirmation page without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in subscription confirmation page\", \"Lab Description\": \"The subscription form reflects the user's email on the confirmation page without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internal ticket system ticket notes\nDescription: Technicians can add notes to tickets. Notes are stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal ticket system ticket notes\", \"Lab Description\": \"Technicians can add notes to tickets. Notes are stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in document sharing form\nDescription: Document sharing confirmation page reflects input fields without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in document sharing form\", \"Lab Description\": \"Document sharing confirmation page reflects input fields without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in music streaming app playlist comments\nDescription: Users can comment on playlists. Comments are stored without escaping, allowing persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in music streaming app playlist comments\", \"Lab Description\": \"Users can comment on playlists. Comments are stored without escaping, allowing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online recipe submission form\nDescription: The recipe submission confirmation page reflects recipe names without encoding, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online recipe submission form\", \"Lab Description\": \"The recipe submission confirmation page reflects recipe names without encoding, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in team collaboration chat\nDescription: Team members can post chat messages, but the application renders messages without sanitization, leading to persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in team collaboration chat\", \"Lab Description\": \"Team members can post chat messages, but the application renders messages without sanitization, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in invoice creation tool\nDescription: The invoice generation form reflects customer names without sanitization in the final invoice view, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in invoice creation tool\", \"Lab Description\": \"The invoice generation form reflects customer names without sanitization in the final invoice view, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker ticket comments\nDescription: Users can comment on tickets without any output escaping, allowing stored XSS payloads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker ticket comments\", \"Lab Description\": \"Users can comment on tickets without any output escaping, allowing stored XSS payloads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online quiz result page\nDescription: After submitting an online quiz, the result page reflects the user's name without sanitization, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online quiz result page\", \"Lab Description\": \"After submitting an online quiz, the result page reflects the user's name without sanitization, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in employee management notes\nDescription: Employee management system allows adding notes to profiles without sanitization, causing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in employee management notes\", \"Lab Description\": \"Employee management system allows adding notes to profiles without sanitization, causing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact us form confirmation\nDescription: The 'Contact Us' form reflects the submitted message directly without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact us form confirmation\", \"Lab Description\": \"The 'Contact Us' form reflects the submitted message directly without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in course review system\nDescription: Students can post course reviews that are rendered without escaping, causing persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in course review system\", \"Lab Description\": \"Students can post course reviews that are rendered without escaping, causing persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription form\nDescription: User input is reflected in the newsletter subscription confirmation page without escaping, causing XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription form\", \"Lab Description\": \"User input is reflected in the newsletter subscription confirmation page without escaping, causing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel booking special requests\nDescription: Travel booking site allows special requests input without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking special requests\", \"Lab Description\": \"Travel booking site allows special requests input without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in blog comment reply form\nDescription: Blog reply form reflects user input without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in blog comment reply form\", \"Lab Description\": \"Blog reply form reflects user input without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online auction item description\nDescription: Users can list auction items with custom descriptions. The application stores and renders them without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online auction item description\", \"Lab Description\": \"Users can list auction items with custom descriptions. The application stores and renders them without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in customer order tracking page\nDescription: The order tracking page reflects the provided order ID without sanitization, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in customer order tracking page\", \"Lab Description\": \"The order tracking page reflects the provided order ID without sanitization, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing notes\nDescription: Agents can add notes to real estate listings. The notes are displayed without sanitization, leading to persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing notes\", \"Lab Description\": \"Agents can add notes to real estate listings. The notes are displayed without sanitization, leading to persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online appointment confirmation\nDescription: Appointment booking system reflects customer name without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online appointment confirmation\", \"Lab Description\": \"Appointment booking system reflects customer name without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in gym membership feedback\nDescription: Members can submit feedback about facilities, which is displayed without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in gym membership feedback\", \"Lab Description\": \"Members can submit feedback about facilities, which is displayed without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in job application form\nDescription: Job application form reflects applicant name back without proper escaping, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in job application form\", \"Lab Description\": \"Job application form reflects applicant name back without proper escaping, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in ticket booking comments\nDescription: Ticket booking site allows comments for each booking, stored without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ticket booking comments\", \"Lab Description\": \"Ticket booking site allows comments for each booking, stored without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback review page\nDescription: Reviewing feedback entries reflects user input directly without sanitization, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback review page\", \"Lab Description\": \"Reviewing feedback entries reflects user input directly without sanitization, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in community forum new post\nDescription: Users can create new forum posts, but content is stored without escaping, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in community forum new post\", \"Lab Description\": \"Users can create new forum posts, but content is stored without escaping, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online ticket support form\nDescription: Support ticket form reflects ticket titles directly without sanitization, causing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online ticket support form\", \"Lab Description\": \"Support ticket form reflects ticket titles directly without sanitization, causing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online course platform announcement\nDescription: Course instructors can post announcements. The announcement body is stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online course platform announcement\", \"Lab Description\": \"Course instructors can post announcements. The announcement body is stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset hint\nDescription: Password reset form reflects user-provided security hint without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset hint\", \"Lab Description\": \"Password reset form reflects user-provided security hint without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in product return reason form\nDescription: Customers submit reasons for returning products. Inputs are stored without sanitization, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in product return reason form\", \"Lab Description\": \"Customers submit reasons for returning products. Inputs are stored without sanitization, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter subscription confirmation\nDescription: Newsletter subscription confirmation page reflects the subscriber's email without escaping, leading to XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter subscription confirmation\", \"Lab Description\": \"Newsletter subscription confirmation page reflects the subscriber's email without escaping, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internal HR feedback form\nDescription: Employees submit internal feedback that is stored without validation, leading to stored XSS on HR portal.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal HR feedback form\", \"Lab Description\": \"Employees submit internal feedback that is stored without validation, leading to stored XSS on HR portal.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online donation thank-you message\nDescription: Donation thank-you page reflects donor name without sanitization, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online donation thank-you message\", \"Lab Description\": \"Donation thank-you page reflects donor name without sanitization, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in CRM contact notes\nDescription: CRM system stores client notes without sanitization, leading to persistent XSS when sales reps view notes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in CRM contact notes\", \"Lab Description\": \"CRM system stores client notes without sanitization, leading to persistent XSS when sales reps view notes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in complaint submission system\nDescription: Customer complaints are echoed back without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in complaint submission system\", \"Lab Description\": \"Customer complaints are echoed back without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in company knowledge base article comments\nDescription: Users can comment on internal knowledge base articles. Comments are stored and rendered without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in company knowledge base article comments\", \"Lab Description\": \"Users can comment on internal knowledge base articles. Comments are stored and rendered without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online certificate name input\nDescription: Certificate generation form reflects the provided name without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online certificate name input\", \"Lab Description\": \"Certificate generation form reflects the provided name without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event management system attendee comments\nDescription: Attendees can leave public comments on event pages. Comments are stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event management system attendee comments\", \"Lab Description\": \"Attendees can leave public comments on event pages. Comments are stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in book review website search field\nDescription: Book search queries are reflected into the search results page without encoding, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in book review website search field\", \"Lab Description\": \"Book search queries are reflected into the search results page without encoding, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online doctor appointment notes\nDescription: Patients can leave notes for doctors while booking appointments. Notes are stored without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online doctor appointment notes\", \"Lab Description\": \"Patients can leave notes for doctors while booking appointments. Notes are stored without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in course enrollment form\nDescription: After filling course enrollment, user details are reflected back without encoding, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in course enrollment form\", \"Lab Description\": \"After filling course enrollment, user details are reflected back without encoding, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing descriptions\nDescription: Real estate agents can create property listings with descriptions. Descriptions are not sanitized before display.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing descriptions\", \"Lab Description\": \"Real estate agents can create property listings with descriptions. Descriptions are not sanitized before display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online ticket booking platform\nDescription: User-submitted names for ticket bookings are reflected into a receipt page without sanitization.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online ticket booking platform\", \"Lab Description\": \"User-submitted names for ticket bookings are reflected into a receipt page without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in fitness tracker app custom achievements\nDescription: Users can create custom achievements in a fitness app. Achievement names are not sanitized before rendering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness tracker app custom achievements\", \"Lab Description\": \"Users can create custom achievements in a fitness app. Achievement names are not sanitized before rendering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in scholarship application form\nDescription: Scholarship applicant names are reflected into confirmation page without escaping, allowing XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in scholarship application form\", \"Lab Description\": \"Scholarship applicant names are reflected into confirmation page without escaping, allowing XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug bounty platform report comments\nDescription: Bug reporters can leave public comments. Comments are stored without sanitization, enabling persistent XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug bounty platform report comments\", \"Lab Description\": \"Bug reporters can leave public comments. Comments are stored without sanitization, enabling persistent XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online donation acknowledgment page\nDescription: Donation forms reflect donor name without escaping, leading to reflected XSS when showing acknowledgment.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online donation acknowledgment page\", \"Lab Description\": \"Donation forms reflect donor name without escaping, leading to reflected XSS when showing acknowledgment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in recipe sharing platform ingredients field\nDescription: Users can submit recipes with ingredients. The ingredients field is stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe sharing platform ingredients field\", \"Lab Description\": \"Users can submit recipes with ingredients. The ingredients field is stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in university admission application form\nDescription: Applicants' names are reflected on the confirmation page without sanitization, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in university admission application form\", \"Lab Description\": \"Applicants' names are reflected on the confirmation page without sanitization, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car rental service special request notes\nDescription: Car renters can leave special requests that are stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car rental service special request notes\", \"Lab Description\": \"Car renters can leave special requests that are stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online movie ticket booking\nDescription: User-provided data for movie booking is reflected without sanitization, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online movie ticket booking\", \"Lab Description\": \"User-provided data for movie booking is reflected without sanitization, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in language learning platform lesson notes\nDescription: Students can leave notes on lessons. Notes are stored and displayed without escaping, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in language learning platform lesson notes\", \"Lab Description\": \"Students can leave notes on lessons. Notes are stored and displayed without escaping, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in real estate inquiry form\nDescription: User inquiries on properties are reflected into pages without escaping, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in real estate inquiry form\", \"Lab Description\": \"User inquiries on properties are reflected into pages without escaping, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in freelancing platform project description\nDescription: Clients post project descriptions without filtering input, allowing persistent XSS on freelancer dashboards.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in freelancing platform project description\", \"Lab Description\": \"Clients post project descriptions without filtering input, allowing persistent XSS on freelancer dashboards.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in music streaming app song request page\nDescription: User-submitted song requests are reflected back without escaping, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in music streaming app song request page\", \"Lab Description\": \"User-submitted song requests are reflected back without escaping, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel agency review section\nDescription: Travelers submit trip reviews. Reviews are rendered without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel agency review section\", \"Lab Description\": \"Travelers submit trip reviews. Reviews are rendered without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online grocery store feedback form\nDescription: Customer feedback is reflected into a thank-you page without encoding, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online grocery store feedback form\", \"Lab Description\": \"Customer feedback is reflected into a thank-you page without encoding, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing comments\nDescription: Users can leave comments on property listings. Comments are stored without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing comments\", \"Lab Description\": \"Users can leave comments on property listings. Comments are stored without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online job application\nDescription: Job applicant names are reflected into the confirmation page without escaping, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online job application\", \"Lab Description\": \"Job applicant names are reflected into the confirmation page without escaping, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online donation message field\nDescription: Donors can leave public messages. These are stored without sanitization, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online donation message field\", \"Lab Description\": \"Donors can leave public messages. These are stored without sanitization, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online library book search\nDescription: Search terms are reflected without escaping into the search result page, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online library book search\", \"Lab Description\": \"Search terms are reflected without escaping into the search result page, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car service booking notes\nDescription: Customers can leave notes when booking car services. Notes are rendered without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car service booking notes\", \"Lab Description\": \"Customers can leave notes when booking car services. Notes are rendered without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online travel booking destination field\nDescription: Destination input is reflected without encoding into the confirmation page, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online travel booking destination field\", \"Lab Description\": \"Destination input is reflected without encoding into the confirmation page, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online fitness app workout notes\nDescription: Users can add notes to their workouts. Notes are saved without escaping, enabling stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online fitness app workout notes\", \"Lab Description\": \"Users can add notes to their workouts. Notes are saved without escaping, enabling stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in book review platform author search\nDescription: Author names are reflected into the HTML page unsanitized, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in book review platform author search\", \"Lab Description\": \"Author names are reflected into the HTML page unsanitized, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online gadget marketplace product questions\nDescription: Buyers can ask sellers questions about products. Questions are saved without sanitization, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online gadget marketplace product questions\", \"Lab Description\": \"Buyers can ask sellers questions about products. Questions are saved without sanitization, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in virtual event RSVP system\nDescription: RSVP name is reflected into event confirmation page without escaping, enabling reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in virtual event RSVP system\", \"Lab Description\": \"RSVP name is reflected into event confirmation page without escaping, enabling reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in customer support ticket notes\nDescription: The app allows users to submit support tickets with notes. Notes are stored and displayed to admins without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in customer support ticket notes\", \"Lab Description\": \"The app allows users to submit support tickets with notes. Notes are stored and displayed to admins without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in restaurant booking confirmation\nDescription: The app reflects the user's name in a confirmation page without escaping it properly.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in restaurant booking confirmation\", \"Lab Description\": \"The app reflects the user's name in a confirmation page without escaping it properly.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker task description\nDescription: Bug tracker allows users to submit bugs with descriptions. The descriptions are stored and rendered in admin dashboard without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker task description\", \"Lab Description\": \"Bug tracker allows users to submit bugs with descriptions. The descriptions are stored and rendered in admin dashboard without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in banking portal transaction description\nDescription: Transaction description reflects user input without sanitization in the summary page.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in banking portal transaction description\", \"Lab Description\": \"Transaction description reflects user input without sanitization in the summary page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in feedback field of medical consultation form\nDescription: Medical consultation form saves user feedback unescaped and displays it to doctors, leading to stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in feedback field of medical consultation form\", \"Lab Description\": \"Medical consultation form saves user feedback unescaped and displays it to doctors, leading to stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-ticket system route name\nDescription: Ticket route input is reflected without escaping on confirmation page.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-ticket system route name\", \"Lab Description\": \"Ticket route input is reflected without escaping on confirmation page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in library management system review\nDescription: Students can review books. Review content is stored and displayed without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library management system review\", \"Lab Description\": \"Students can review books. Review content is stored and displayed without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce coupon form\nDescription: Submitted coupon code is reflected in the result page unsanitized.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce coupon form\", \"Lab Description\": \"Submitted coupon code is reflected in the result page unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online gaming profile bio\nDescription: Users update gaming bios. Bio is stored and shown in profile without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online gaming profile bio\", \"Lab Description\": \"Users update gaming bios. Bio is stored and shown in profile without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in movie ticket booking reference field\nDescription: Booking reference is echoed back in the final confirmation page unsanitized.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in movie ticket booking reference field\", \"Lab Description\": \"Booking reference is echoed back in the final confirmation page unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in contact message field\nDescription: A contact form stores submitted messages without sanitization and displays them to admins. An attacker can inject persistent JavaScript.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in contact message field\", \"Lab Description\": \"A contact form stores submitted messages without sanitization and displays them to admins. An attacker can inject persistent JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in job application cover letter\nDescription: A job portal saves user-submitted cover letters without escaping and displays them to HR staff.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job application cover letter\", \"Lab Description\": \"A job portal saves user-submitted cover letters without escaping and displays them to HR staff.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in personal finance note field\nDescription: Users can add personal notes to transactions. These notes are rendered without filtering, leading to XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in personal finance note field\", \"Lab Description\": \"Users can add personal notes to transactions. These notes are rendered without filtering, leading to XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in referral system input\nDescription: Referral codes submitted in a form are reflected in the result page without escaping, allowing reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in referral system input\", \"Lab Description\": \"Referral codes submitted in a form are reflected in the result page without escaping, allowing reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in restaurant review comment\nDescription: Restaurant reviews allow comments that are stored and displayed without proper filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in restaurant review comment\", \"Lab Description\": \"Restaurant reviews allow comments that are stored and displayed without proper filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in insurance claim description\nDescription: Insurance claim descriptions are displayed to agents with no escaping. Attackers can inject persistent scripts.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in insurance claim description\", \"Lab Description\": \"Insurance claim descriptions are displayed to agents with no escaping. Attackers can inject persistent scripts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup name field\nDescription: Newsletter signup form reflects the name in the thank-you message without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup name field\", \"Lab Description\": \"Newsletter signup form reflects the name in the thank-you message without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in student report comment section\nDescription: Teachers leave comments on student reports. These comments are stored and rendered without filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student report comment section\", \"Lab Description\": \"Teachers leave comments on student reports. These comments are stored and rendered without filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in project collaboration note\nDescription: Project collaboration tool allows team members to leave notes. Notes are rendered directly without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in project collaboration note\", \"Lab Description\": \"Project collaboration tool allows team members to leave notes. Notes are rendered directly without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel site trip review\nDescription: Users review trips and the reviews are displayed without escaping, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel site trip review\", \"Lab Description\": \"Users review trips and the reviews are displayed without escaping, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in e-ticketing system message field\nDescription: The e-ticketing portal allows users to send messages to support. The messages are stored and displayed to staff without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-ticketing system message field\", \"Lab Description\": \"The e-ticketing portal allows users to send messages to support. The messages are stored and displayed to staff without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in internal employee feedback form\nDescription: The HR system allows employees to give anonymous feedback. Input is rendered without sanitization in the dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internal employee feedback form\", \"Lab Description\": \"The HR system allows employees to give anonymous feedback. Input is rendered without sanitization in the dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in healthcare system symptoms notes\nDescription: Patients submit symptom notes, which are viewed by doctors. Input is saved and reflected without filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in healthcare system symptoms notes\", \"Lab Description\": \"Patients submit symptom notes, which are viewed by doctors. Input is saved and reflected without filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in booking confirmation notes\nDescription: Users can leave additional notes during booking. These notes are stored and rendered without sanitization on admin panel.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in booking confirmation notes\", \"Lab Description\": \"Users can leave additional notes during booking. These notes are stored and rendered without sanitization on admin panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bug report reproduction steps\nDescription: Bug tracker stores user-submitted reproduction steps. The steps are rendered for developers without filtering.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug report reproduction steps\", \"Lab Description\": \"Bug tracker stores user-submitted reproduction steps. The steps are rendered for developers without filtering.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in mobile recharge confirmation screen\nDescription: Recharge form reflects submitted phone number in the confirmation view without sanitization.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in mobile recharge confirmation screen\", \"Lab Description\": \"Recharge form reflects submitted phone number in the confirmation view without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user suggestions submission field\nDescription: Public suggestion box accepts suggestions that are rendered for moderators without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user suggestions submission field\", \"Lab Description\": \"Public suggestion box accepts suggestions that are rendered for moderators without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in forum private message feature\nDescription: Private messages are displayed in inbox without escaping, allowing stored XSS.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in forum private message feature\", \"Lab Description\": \"Private messages are displayed in inbox without escaping, allowing stored XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in community voting comments\nDescription: Users can comment on votes. Comments are rendered without sanitization in the result page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in community voting comments\", \"Lab Description\": \"Users can comment on votes. Comments are rendered without sanitization in the result page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event registration custom message\nDescription: Users can leave custom messages when registering for an event. These are rendered without escaping in admin dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event registration custom message\", \"Lab Description\": \"Users can leave custom messages when registering for an event. These are rendered without escaping in admin dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in job application cover letter\nDescription: Job applicants can submit a cover letter. The input is stored and displayed to recruiters without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job application cover letter\", \"Lab Description\": \"Job applicants can submit a cover letter. The input is stored and displayed to recruiters without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in newsletter subscription notes\nDescription: The newsletter form includes an optional note field. Notes are displayed to admins without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in newsletter subscription notes\", \"Lab Description\": \"The newsletter form includes an optional note field. Notes are displayed to admins without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in feature request title\nDescription: Users submit feature requests. The title is stored and displayed without sanitization on admin panel.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in feature request title\", \"Lab Description\": \"Users submit feature requests. The title is stored and displayed without sanitization on admin panel.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in ride-sharing app driver feedback\nDescription: Passengers leave feedback for drivers. Input is stored and rendered without escaping on driver dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in ride-sharing app driver feedback\", \"Lab Description\": \"Passengers leave feedback for drivers. Input is stored and rendered without escaping on driver dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bug bounty program POC URL\nDescription: Bug reporters submit a POC URL. It's rendered without escaping in admin reports dashboard.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug bounty program POC URL\", \"Lab Description\": \"Bug reporters submit a POC URL. It's rendered without escaping in admin reports dashboard.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel booking special instructions\nDescription: Users leave special instructions during travel booking. Input is rendered without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking special instructions\", \"Lab Description\": \"Users leave special instructions during travel booking. Input is rendered without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in auction platform product question\nDescription: Buyers can ask public questions. The input is not sanitized before display.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in auction platform product question\", \"Lab Description\": \"Buyers can ask public questions. The input is not sanitized before display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bank contact form message field\nDescription: Bank contact form messages are shown to operators without any escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bank contact form message field\", \"Lab Description\": \"Bank contact form messages are shown to operators without any escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in quiz app answer explanation field\nDescription: Instructors submit explanation text that is reflected unescaped in quiz preview.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in quiz app answer explanation field\", \"Lab Description\": \"Instructors submit explanation text that is reflected unescaped in quiz preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in bug tracking system tag field\nDescription: Bugs can be tagged. Tags are reflected on pages without encoding.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracking system tag field\", \"Lab Description\": \"Bugs can be tagged. Tags are reflected on pages without encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in user-submitted tutorial title\nDescription: Users submit tutorials with titles that are rendered in the dashboard without sanitization. A malicious title can trigger script execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-submitted tutorial title\", \"Lab Description\": \"Users submit tutorials with titles that are rendered in the dashboard without sanitization. A malicious title can trigger script execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in payment comment field\nDescription: During payment, users can add comments. These are stored and shown in the transaction history with no escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in payment comment field\", \"Lab Description\": \"During payment, users can add comments. These are stored and shown in the transaction history with no escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in e-learning discussion reply\nDescription: Students reply to threads. Replies are stored and rendered on the thread page with no sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in e-learning discussion reply\", \"Lab Description\": \"Students reply to threads. Replies are stored and rendered on the thread page with no sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in donation platform donor message\nDescription: Donors can leave a message. These are rendered without escaping in the public donation wall.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in donation platform donor message\", \"Lab Description\": \"Donors can leave a message. These are rendered without escaping in the public donation wall.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in restaurant order notes\nDescription: Food ordering system allows custom notes per order. These are rendered to staff dashboards unsanitized.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in restaurant order notes\", \"Lab Description\": \"Food ordering system allows custom notes per order. These are rendered to staff dashboards unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in lost & found item description\nDescription: Users post found items with a description. The content is displayed without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in lost & found item description\", \"Lab Description\": \"Users post found items with a description. The content is displayed without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in product inquiry form\nDescription: Visitors can ask questions about products. The input is stored and shown on product pages without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in product inquiry form\", \"Lab Description\": \"Visitors can ask questions about products. The input is stored and shown on product pages without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in calendar event title\nDescription: A calendar app allows event titles to be stored and displayed in daily views. No sanitization is applied.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in calendar event title\", \"Lab Description\": \"A calendar app allows event titles to be stored and displayed in daily views. No sanitization is applied.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online petition reason field\nDescription: Petitioners submit a reason, which is rendered in supporter feeds unsanitized.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online petition reason field\", \"Lab Description\": \"Petitioners submit a reason, which is rendered in supporter feeds unsanitized.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in help desk system subject field\nDescription: Support tickets have subjects stored and shown unescaped in agent inbox.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in help desk system subject field\", \"Lab Description\": \"Support tickets have subjects stored and shown unescaped in agent inbox.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in profile tag line\nDescription: A social network allows users to set a public tagline. This tagline is stored and displayed on profile pages without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in profile tag line\", \"Lab Description\": \"A social network allows users to set a public tagline. This tagline is stored and displayed on profile pages without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in recipe platform comments\nDescription: A cooking site lets users comment on recipes. These comments are stored and rendered directly without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recipe platform comments\", \"Lab Description\": \"A cooking site lets users comment on recipes. These comments are stored and rendered directly without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in bug tracker issue title\nDescription: A bug tracking system allows custom issue titles. These titles are stored and displayed in project views without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker issue title\", \"Lab Description\": \"A bug tracking system allows custom issue titles. These titles are stored and displayed in project views without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in contact us name field\nDescription: The contact form stores the 'name' input and displays it in the admin dashboard without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in contact us name field\", \"Lab Description\": \"The contact form stores the 'name' input and displays it in the admin dashboard without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in code snippet sharing site\nDescription: A developer platform allows code snippets to be shared. The 'description' field is stored and rendered without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in code snippet sharing site\", \"Lab Description\": \"A developer platform allows code snippets to be shared. The 'description' field is stored and rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event planner custom message\nDescription: Users can send custom invites with a personal message. The message is shown on the invite view page unescaped.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event planner custom message\", \"Lab Description\": \"Users can send custom invites with a personal message. The message is shown on the invite view page unescaped.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in library review system\nDescription: Users can leave reviews for books. The review is rendered on the book page without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library review system\", \"Lab Description\": \"Users can leave reviews for books. The review is rendered on the book page without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in job application cover letter\nDescription: Applicants can add a cover letter message which is later rendered to recruiters without escaping.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job application cover letter\", \"Lab Description\": \"Applicants can add a cover letter message which is later rendered to recruiters without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in user-submitted poll option label\nDescription: Users can suggest new options in polls. The label is stored and reflected without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-submitted poll option label\", \"Lab Description\": \"Users can suggest new options in polls. The label is stored and reflected without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event RSVP note\nDescription: Attendees leave notes when RSVPing to events. These are shown to the host without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event RSVP note\", \"Lab Description\": \"Attendees leave notes when RSVPing to events. These are shown to the host without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in travel journal post title\nDescription: A travel blog allows users to submit journal entries with a title. The title is stored and rendered without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel journal post title\", \"Lab Description\": \"A travel blog allows users to submit journal entries with a title. The title is stored and rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in university forum bio field\nDescription: A university forum allows users to set a short bio. The bio is rendered without escaping in the user profile.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in university forum bio field\", \"Lab Description\": \"A university forum allows users to set a short bio. The bio is rendered without escaping in the user profile.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in resume builder summary section\nDescription: A resume builder platform allows users to write a summary. The summary field is rendered without sanitization.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in resume builder summary section\", \"Lab Description\": \"A resume builder platform allows users to write a summary. The summary field is rendered without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in file-sharing platform description\nDescription: The file-sharing app lets users write descriptions for uploaded files. These are shown to others without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in file-sharing platform description\", \"Lab Description\": \"The file-sharing app lets users write descriptions for uploaded files. These are shown to others without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online quiz title input\nDescription: An online quiz creator allows instructors to name quizzes. These names are rendered on the student dashboard without sanitization.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online quiz title input\", \"Lab Description\": \"An online quiz creator allows instructors to name quizzes. These names are rendered on the student dashboard without sanitization.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in portfolio description on freelance site\nDescription: A freelancing platform lets users set descriptions for their portfolios. These are not sanitized when rendered.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in portfolio description on freelance site\", \"Lab Description\": \"A freelancing platform lets users set descriptions for their portfolios. These are not sanitized when rendered.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in fitness tracker workout name\nDescription: Users can name their workouts. The names are stored and displayed without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness tracker workout name\", \"Lab Description\": \"Users can name their workouts. The names are stored and displayed without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in conference system speaker bio\nDescription: Speakers can submit bios for conferences. These bios are shown without escaping on the agenda page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference system speaker bio\", \"Lab Description\": \"Speakers can submit bios for conferences. These bios are shown without escaping on the agenda page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in blog platform series description\nDescription: Writers can create a series of articles and add a description. The description is rendered without escaping.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog platform series description\", \"Lab Description\": \"Writers can create a series of articles and add a description. The description is rendered without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in idea board submission\nDescription: Users can submit ideas to a public board. The content is stored and displayed without escaping.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in idea board submission\", \"Lab Description\": \"Users can submit ideas to a public board. The content is stored and displayed without escaping.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in employee recognition message field\nDescription: The HR system allows employees to send recognition messages to each other. These messages are rendered directly on the dashboard without sanitization. To solve: Inject a stored XSS payload in a recognition message that executes on page load.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in employee recognition message field\", \"Lab Description\": \"The HR system allows employees to send recognition messages to each other. These messages are rendered directly on the dashboard without sanitization. To solve: Inject a stored XSS payload in a recognition message that executes on page load.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support request form redirect\nDescription: A support request form redirects to a confirmation page using a GET parameter for the user's name. The value is reflected in the HTML without encoding. To solve: Inject a reflected XSS payload into the name parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support request form redirect\", \"Lab Description\": \"A support request form redirects to a confirmation page using a GET parameter for the user's name. The value is reflected in the HTML without encoding. To solve: Inject a reflected XSS payload into the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in campaign announcement preview\nDescription: A marketing tool generates live previews of announcements using innerHTML from user input. There's no sanitization, resulting in DOM-based XSS. To solve: Inject a script payload and verify execution in preview pane.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in campaign announcement preview\", \"Lab Description\": \"A marketing tool generates live previews of announcements using innerHTML from user input. There's no sanitization, resulting in DOM-based XSS. To solve: Inject a script payload and verify execution in preview pane.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mutation-based XSS in dynamic invoice line editor\nDescription: An invoicing app allows adding custom line items. DOM mutations from a contentEditable field lead to unsafe innerHTML injection. To solve: Inject a payload that triggers JavaScript on DOM mutation.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mutation-based XSS in dynamic invoice line editor\", \"Lab Description\": \"An invoicing app allows adding custom line items. DOM mutations from a contentEditable field lead to unsafe innerHTML injection. To solve: Inject a payload that triggers JavaScript on DOM mutation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in public event RSVP comments\nDescription: The app collects public RSVP comments for events, which are shown without escaping. This enables stored XSS. To solve: Submit a comment that executes JavaScript when the event page loads.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in public event RSVP comments\", \"Lab Description\": \"The app collects public RSVP comments for events, which are shown without escaping. This enables stored XSS. To solve: Submit a comment that executes JavaScript when the event page loads.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in feedback widget thank you banner\nDescription: A floating feedback widget reflects user input in a thank you banner post-submission. There's no encoding, leading to reflected XSS. To solve: Inject a payload and trigger the banner display.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in feedback widget thank you banner\", \"Lab Description\": \"A floating feedback widget reflects user input in a thank you banner post-submission. There's no encoding, leading to reflected XSS. To solve: Inject a payload and trigger the banner display.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in admin system announcement bar\nDescription: Admins can set system-wide announcements shown to all users. The announcement is rendered as raw HTML, allowing stored XSS. To solve: Insert a script in the announcement field.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in admin system announcement bar\", \"Lab Description\": \"Admins can set system-wide announcements shown to all users. The announcement is rendered as raw HTML, allowing stored XSS. To solve: Insert a script in the announcement field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: DOM-based XSS in video platform comment preview\nDescription: A video site previews comments with JavaScript using innerHTML. The preview uses user input directly. To solve: Inject a DOM-based payload in a comment preview.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in video platform comment preview\", \"Lab Description\": \"A video site previews comments with JavaScript using innerHTML. The preview uses user input directly. To solve: Inject a DOM-based payload in a comment preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in student discussion board replies\nDescription: Students can reply to discussion threads. Replies are saved in a database and rendered without escaping. To solve: Inject a persistent XSS payload in a reply.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student discussion board replies\", \"Lab Description\": \"Students can reply to discussion threads. Replies are saved in a database and rendered without escaping. To solve: Inject a persistent XSS payload in a reply.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in PDF export metadata field\nDescription: An export-to-PDF tool includes metadata from query parameters. These are inserted into the PDF preview HTML unsafely. To solve: Inject a payload into the metadata field and trigger PDF preview.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in PDF export metadata field\", \"Lab Description\": \"An export-to-PDF tool includes metadata from query parameters. These are inserted into the PDF preview HTML unsafely. To solve: Inject a payload into the metadata field and trigger PDF preview.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in bug tracker issue title\nDescription: The bug tracking system allows users to create issues with titles. These titles are stored and rendered on the dashboard without escaping, allowing persistent XSS. To solve: Inject a script in the issue title and confirm execution on issue board view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in bug tracker issue title\", \"Lab Description\": \"The bug tracking system allows users to create issues with titles. These titles are stored and rendered on the dashboard without escaping, allowing persistent XSS. To solve: Inject a script in the issue title and confirm execution on issue board view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter unsubscribe confirmation\nDescription: The unsubscribe page includes the user's email from a GET parameter and renders it into the confirmation HTML. This allows reflected XSS. To solve: Inject a payload into the email parameter and observe execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter unsubscribe confirmation\", \"Lab Description\": \"The unsubscribe page includes the user's email from a GET parameter and renders it into the confirmation HTML. This allows reflected XSS. To solve: Inject a payload into the email parameter and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in blog post comment field\nDescription: The blog platform allows commenting on posts. Comments are stored and displayed without sanitization. To solve: Submit a comment with an XSS payload and observe it triggering for readers.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in blog post comment field\", \"Lab Description\": \"The blog platform allows commenting on posts. Comments are stored and displayed without sanitization. To solve: Submit a comment with an XSS payload and observe it triggering for readers.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in report generator title preview\nDescription: A report generator allows users to input titles. The title is updated live via `innerHTML` without sanitization, enabling DOM-based XSS. To solve: Inject a payload in the title preview field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in report generator title preview\", \"Lab Description\": \"A report generator allows users to input titles. The title is updated live via `innerHTML` without sanitization, enabling DOM-based XSS. To solve: Inject a payload in the title preview field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in FAQ suggestion form\nDescription: Users can submit suggestions to be displayed on the FAQ page. These are rendered without escaping. To solve: Submit a script tag in a suggestion and verify execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in FAQ suggestion form\", \"Lab Description\": \"Users can submit suggestions to be displayed on the FAQ page. These are rendered without escaping. To solve: Submit a script tag in a suggestion and verify execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in gift card generator preview\nDescription: The site generates gift card previews using query params. These are rendered without encoding, causing reflected XSS. To solve: Inject JavaScript in the name parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in gift card generator preview\", \"Lab Description\": \"The site generates gift card previews using query params. These are rendered without encoding, causing reflected XSS. To solve: Inject JavaScript in the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in dynamic pricing calculator\nDescription: The calculator app reflects query parameters into a summary box via innerHTML. It does not sanitize the input. To solve: Inject a payload into a query parameter and observe execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in dynamic pricing calculator\", \"Lab Description\": \"The calculator app reflects query parameters into a summary box via innerHTML. It does not sanitize the input. To solve: Inject a payload into a query parameter and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in employee suggestion box\nDescription: A suggestion box stores feedback for management. The input is rendered without escaping, leading to stored XSS. To solve: Inject a malicious script into a suggestion.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in employee suggestion box\", \"Lab Description\": \"A suggestion box stores feedback for management. The input is rendered without escaping, leading to stored XSS. To solve: Inject a malicious script into a suggestion.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in quick order summary field\nDescription: The quick order summary feature reflects user data without escaping. If a payload is injected in the name field, it is rendered raw. To solve: Trigger reflected XSS via the name input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in quick order summary field\", \"Lab Description\": \"The quick order summary feature reflects user data without escaping. If a payload is injected in the name field, it is rendered raw. To solve: Trigger reflected XSS via the name input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online resume description\nDescription: A resume builder app allows users to enter a description field. This is rendered without escaping, causing persistent XSS. To solve: Inject a payload in the resume description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online resume description\", \"Lab Description\": \"A resume builder app allows users to enter a description field. This is rendered without escaping, causing persistent XSS. To solve: Inject a payload in the resume description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in customer support live ticket subject\nDescription: The live support system displays ticket subjects without escaping them on the agent dashboard. Attackers can inject JavaScript into the subject to execute code when viewed. To solve: Submit a support ticket with a script in the subject.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in customer support live ticket subject\", \"Lab Description\": \"The live support system displays ticket subjects without escaping them on the agent dashboard. Attackers can inject JavaScript into the subject to execute code when viewed. To solve: Submit a support ticket with a script in the subject.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact form thank you message\nDescription: The contact form reflects submitted names into a thank-you response without sanitization. This enables reflected XSS when a payload is submitted via the name field. To solve: Inject script in the name input and observe execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact form thank you message\", \"Lab Description\": \"The contact form reflects submitted names into a thank-you response without sanitization. This enables reflected XSS when a payload is submitted via the name field. To solve: Inject script in the name input and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in password reset link renderer\nDescription: The password reset tool renders user email from localStorage into the DOM using innerHTML, without escaping. To solve: Inject a payload into localStorage and reload the page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in password reset link renderer\", \"Lab Description\": \"The password reset tool renders user email from localStorage into the DOM using innerHTML, without escaping. To solve: Inject a payload into localStorage and reload the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in HR system job applicant notes\nDescription: Applicants submit notes with their job applications. These notes are stored and displayed to HR without sanitization. To solve: Inject a payload into the notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in HR system job applicant notes\", \"Lab Description\": \"Applicants submit notes with their job applications. These notes are stored and displayed to HR without sanitization. To solve: Inject a payload into the notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce coupon validation field\nDescription: The coupon code entry box reflects invalid codes in a response message without escaping, enabling reflected XSS. To solve: Inject a payload in the coupon parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce coupon validation field\", \"Lab Description\": \"The coupon code entry box reflects invalid codes in a response message without escaping, enabling reflected XSS. To solve: Inject a payload in the coupon parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in virtual classroom announcement field\nDescription: Teachers post announcements to students. These are saved and displayed without escaping, leading to stored XSS. To solve: Submit a malicious script in the announcement field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in virtual classroom announcement field\", \"Lab Description\": \"Teachers post announcements to students. These are saved and displayed without escaping, leading to stored XSS. To solve: Submit a malicious script in the announcement field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in product rating widget\nDescription: The product rating widget loads dynamic values from sessionStorage and injects them into the DOM using innerHTML. Lack of sanitization leads to DOM-based XSS. To solve: Inject a payload into sessionStorage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in product rating widget\", \"Lab Description\": \"The product rating widget loads dynamic values from sessionStorage and injects them into the DOM using innerHTML. Lack of sanitization leads to DOM-based XSS. To solve: Inject a payload into sessionStorage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in team feedback tool message board\nDescription: The feedback board accepts anonymous messages from employees. These messages are stored and displayed to management without escaping, creating a stored XSS vector. To solve: Submit XSS payload in message field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in team feedback tool message board\", \"Lab Description\": \"The feedback board accepts anonymous messages from employees. These messages are stored and displayed to management without escaping, creating a stored XSS vector. To solve: Submit XSS payload in message field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup confirmation\nDescription: The newsletter system reflects the 'name' field back into the HTML of the confirmation page, without escaping. To solve: Inject an alert script in the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup confirmation\", \"Lab Description\": \"The newsletter system reflects the 'name' field back into the HTML of the confirmation page, without escaping. To solve: Inject an alert script in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in real estate listing title\nDescription: Real estate agents can add property listings with titles. These are shown on public pages. Lack of output encoding results in stored XSS. To solve: Inject a payload in the listing title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in real estate listing title\", \"Lab Description\": \"Real estate agents can add property listings with titles. These are shown on public pages. Lack of output encoding results in stored XSS. To solve: Inject a payload in the listing title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online event registration form comment\nDescription: The event registration form allows users to leave comments that are displayed on the event page. The input is stored without sanitization, leading to a stored XSS vulnerability. To solve: Inject a payload in the comment field and trigger execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online event registration form comment\", \"Lab Description\": \"The event registration form allows users to leave comments that are displayed on the event page. The input is stored without sanitization, leading to a stored XSS vulnerability. To solve: Inject a payload in the comment field and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS via comment preview system\nDescription: The application displays a live preview of comments using innerHTML from an input field. It fails to sanitize content, resulting in a DOM-based XSS. To solve: Inject a script into the comment box and observe live execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS via comment preview system\", \"Lab Description\": \"The application displays a live preview of comments using innerHTML from an input field. It fails to sanitize content, resulting in a DOM-based XSS. To solve: Inject a script into the comment box and observe live execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in hotel booking special requests field\nDescription: Guests can submit special requests during hotel booking. These requests are shown to staff without escaping, allowing persistent script execution. To solve: Inject XSS payload in the request field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in hotel booking special requests field\", \"Lab Description\": \"Guests can submit special requests during hotel booking. These requests are shown to staff without escaping, allowing persistent script execution. To solve: Inject XSS payload in the request field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in failed login message\nDescription: Failed login attempts return the submitted username in an error message without encoding. This allows reflected XSS. To solve: Inject JavaScript via the username field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in failed login message\", \"Lab Description\": \"Failed login attempts return the submitted username in an error message without encoding. This allows reflected XSS. To solve: Inject JavaScript via the username field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in event scheduler notes field\nDescription: Users can schedule meetings and leave notes. These notes are rendered for all attendees without sanitization. To solve: Inject an XSS payload in the notes.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event scheduler notes field\", \"Lab Description\": \"Users can schedule meetings and leave notes. These notes are rendered for all attendees without sanitization. To solve: Inject an XSS payload in the notes.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in article share preview link\nDescription: The article preview page displays a shared title passed in via the URL. No escaping is performed before rendering. To solve: Inject script into the title parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in article share preview link\", \"Lab Description\": \"The article preview page displays a shared title passed in via the URL. No escaping is performed before rendering. To solve: Inject script into the title parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in survey platform question title\nDescription: Survey creators can define question titles. These are shown to respondents without escaping, allowing persistent XSS. To solve: Inject a script in the title.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in survey platform question title\", \"Lab Description\": \"Survey creators can define question titles. These are shown to respondents without escaping, allowing persistent XSS. To solve: Inject a script in the title.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in QR code label renderer\nDescription: QR label content is fetched from `localStorage` and rendered directly with innerHTML in the QR page. No sanitization is done. To solve: Inject payload into localStorage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in QR code label renderer\", \"Lab Description\": \"QR label content is fetched from `localStorage` and rendered directly with innerHTML in the QR page. No sanitization is done. To solve: Inject payload into localStorage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in healthcare appointment notes\nDescription: Patients can leave notes when scheduling appointments. These are shown to doctors without sanitization, enabling persistent XSS. To solve: Inject a script into notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in healthcare appointment notes\", \"Lab Description\": \"Patients can leave notes when scheduling appointments. These are shown to doctors without sanitization, enabling persistent XSS. To solve: Inject a script into notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in blog author search page\nDescription: The blog search page echoes the query back in the heading. No sanitization is applied. To solve: Inject a payload in the search parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in blog author search page\", \"Lab Description\": \"The blog search page echoes the query back in the heading. No sanitization is applied. To solve: Inject a payload in the search parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in freelance platform project description\nDescription: Freelancers submit project descriptions visible to clients. The app stores and renders the description without sanitization. To solve: Inject a persistent XSS payload in the project description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in freelance platform project description\", \"Lab Description\": \"Freelancers submit project descriptions visible to clients. The app stores and renders the description without sanitization. To solve: Inject a persistent XSS payload in the project description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in live price quote tool\nDescription: A live price estimator displays user input directly in the response page. There's no encoding of the value, allowing reflected XSS. To solve: Inject a script via the quote input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in live price quote tool\", \"Lab Description\": \"A live price estimator displays user input directly in the response page. There's no encoding of the value, allowing reflected XSS. To solve: Inject a script via the quote input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in internship portal resume summary\nDescription: Interns upload resume summaries that are displayed to companies. The summary field is vulnerable to stored XSS. To solve: Submit a script as part of the resume summary.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in internship portal resume summary\", \"Lab Description\": \"Interns upload resume summaries that are displayed to companies. The summary field is vulnerable to stored XSS. To solve: Submit a script as part of the resume summary.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in user greeting message\nDescription: The dashboard uses query parameters to greet users by name. The value is inserted with innerHTML without sanitization. To solve: Inject a payload via the query string.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in user greeting message\", \"Lab Description\": \"The dashboard uses query parameters to greet users by name. The value is inserted with innerHTML without sanitization. To solve: Inject a payload via the query string.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in peer review portal feedback box\nDescription: Students review each other's work and leave feedback. Feedback is displayed to others without escaping, resulting in persistent XSS. To solve: Inject JavaScript into the feedback box.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in peer review portal feedback box\", \"Lab Description\": \"Students review each other's work and leave feedback. Feedback is displayed to others without escaping, resulting in persistent XSS. To solve: Inject JavaScript into the feedback box.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in language selection parameter\nDescription: The application accepts a `lang` parameter and displays it as a label. It doesn't sanitize the value, enabling reflected XSS. To solve: Inject a script via the lang parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in language selection parameter\", \"Lab Description\": \"The application accepts a `lang` parameter and displays it as a label. It doesn't sanitize the value, enabling reflected XSS. To solve: Inject a script via the lang parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in job posting platform cover letter\nDescription: Applicants write cover letters that are displayed to recruiters. No escaping is applied to the letter content, allowing stored XSS. To solve: Inject script in the letter.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in job posting platform cover letter\", \"Lab Description\": \"Applicants write cover letters that are displayed to recruiters. No escaping is applied to the letter content, allowing stored XSS. To solve: Inject script in the letter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in real-time analytics viewer\nDescription: User input is appended to the live stats label via innerHTML without sanitization. This allows DOM-based XSS. To solve: Inject a malicious value and watch for execution.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in real-time analytics viewer\", \"Lab Description\": \"User input is appended to the live stats label via innerHTML without sanitization. This allows DOM-based XSS. To solve: Inject a malicious value and watch for execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in profile experience section\nDescription: Users can add professional experience to their profile. The description field is stored and displayed without escaping, allowing XSS. To solve: Inject JavaScript into the experience field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in profile experience section\", \"Lab Description\": \"Users can add professional experience to their profile. The description field is stored and displayed without escaping, allowing XSS. To solve: Inject JavaScript into the experience field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in support contact confirmation page\nDescription: User input from the contact form is reflected in the confirmation response. Thereâ€™s no sanitization, making it vulnerable to reflected XSS. To solve: Inject JavaScript via the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in support contact confirmation page\", \"Lab Description\": \"User input from the contact form is reflected in the confirmation response. Thereâ€™s no sanitization, making it vulnerable to reflected XSS. To solve: Inject JavaScript via the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online course description\nDescription: The course creation page allows instructors to enter rich descriptions. The input is stored and rendered without escaping. To solve: Inject a script in the course description field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online course description\", \"Lab Description\": \"The course creation page allows instructors to enter rich descriptions. The input is stored and rendered without escaping. To solve: Inject a script in the course description field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in calendar event preview\nDescription: A calendar tool shows event previews from query parameters. The input is not encoded, allowing reflected XSS. To solve: Inject a script in the title parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in calendar event preview\", \"Lab Description\": \"A calendar tool shows event previews from query parameters. The input is not encoded, allowing reflected XSS. To solve: Inject a script in the title parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel portal trip notes\nDescription: Travelers can add personal notes for trips. These notes are rendered on trip pages without sanitization. To solve: Inject a persistent script in the notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel portal trip notes\", \"Lab Description\": \"Travelers can add personal notes for trips. These notes are rendered on trip pages without sanitization. To solve: Inject a persistent script in the notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in online invoice viewer footer\nDescription: The invoice viewer reads a footer note from localStorage and injects it via innerHTML. To solve: Add a malicious footer value in localStorage.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in online invoice viewer footer\", \"Lab Description\": \"The invoice viewer reads a footer note from localStorage and injects it via innerHTML. To solve: Add a malicious footer value in localStorage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in book review system\nDescription: Users submit reviews on books, which are rendered to the public. The content is displayed without escaping, enabling stored XSS. To solve: Inject a payload into the review form.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in book review system\", \"Lab Description\": \"Users submit reviews on books, which are rendered to the public. The content is displayed without escaping, enabling stored XSS. To solve: Inject a payload into the review form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in poll results summary\nDescription: The app displays submitted poll answers in the URL response. The input is reflected into the DOM without sanitization. To solve: Inject a payload into the answer parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in poll results summary\", \"Lab Description\": \"The app displays submitted poll answers in the URL response. The input is reflected into the DOM without sanitization. To solve: Inject a payload into the answer parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: DOM-based XSS in CRM user greeting\nDescription: The CRM dashboard personalizes greetings using location.hash. It writes the name using innerHTML. To solve: Inject a malicious fragment to execute JavaScript.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in CRM user greeting\", \"Lab Description\": \"The CRM dashboard personalizes greetings using location.hash. It writes the name using innerHTML. To solve: Inject a malicious fragment to execute JavaScript.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in newsletter platform welcome message\nDescription: Newsletter creators can write custom welcome messages. These are rendered to subscribers without sanitization. To solve: Inject XSS payload in the welcome text.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in newsletter platform welcome message\", \"Lab Description\": \"Newsletter creators can write custom welcome messages. These are rendered to subscribers without sanitization. To solve: Inject XSS payload in the welcome text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in booking confirmation page\nDescription: Booking details are reflected in the confirmation page using URL parameters. The input is not encoded properly. To solve: Inject JavaScript via the 'name' parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in booking confirmation page\", \"Lab Description\": \"Booking details are reflected in the confirmation page using URL parameters. The input is not encoded properly. To solve: Inject JavaScript via the 'name' parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in code snippet sharing site\nDescription: Users can publish code snippets that get rendered on a shared page. There's no escaping of user input, allowing stored XSS. To solve: Submit a snippet with a payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in code snippet sharing site\", \"Lab Description\": \"Users can publish code snippets that get rendered on a shared page. There's no escaping of user input, allowing stored XSS. To solve: Submit a snippet with a payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in event manager speaker bio\nDescription: Organizers can add speaker bios, which are shown on the event page without escaping HTML. To solve: Inject a script in the bio field and trigger it from the speaker page.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in event manager speaker bio\", \"Lab Description\": \"Organizers can add speaker bios, which are shown on the event page without escaping HTML. To solve: Inject a script in the bio field and trigger it from the speaker page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce gift message preview\nDescription: The app lets users preview gift messages, but reflects user input without sanitization. To solve: Inject a script in the message parameter and observe execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce gift message preview\", \"Lab Description\": \"The app lets users preview gift messages, but reflects user input without sanitization. To solve: Inject a script in the message parameter and observe execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in personal finance tracker notes\nDescription: Users can add notes to transactions. These are rendered without escaping. To solve: Inject a script in the note field and confirm execution when viewing history.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in personal finance tracker notes\", \"Lab Description\": \"Users can add notes to transactions. These are rendered without escaping. To solve: Inject a script in the note field and confirm execution when viewing history.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM-based XSS in quiz platform result page\nDescription: The quiz result page reads the user's score from location.hash and renders it using innerHTML. To solve: Inject a script via hash and reload the page.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM-based XSS in quiz platform result page\", \"Lab Description\": \"The quiz result page reads the user's score from location.hash and renders it using innerHTML. To solve: Inject a script via hash and reload the page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in food delivery special instructions\nDescription: Special instructions for food orders are rendered on the order view without escaping. To solve: Inject a script in the instructions field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in food delivery special instructions\", \"Lab Description\": \"Special instructions for food orders are rendered on the order view without escaping. To solve: Inject a script in the instructions field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in meeting room booking system\nDescription: The app reflects the 'room' parameter into a confirmation page without escaping. To solve: Inject a script in the room field and observe the confirmation.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in meeting room booking system\", \"Lab Description\": \"The app reflects the 'room' parameter into a confirmation page without escaping. To solve: Inject a script in the room field and observe the confirmation.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in car rental pickup instructions\nDescription: Rental customers can provide pickup instructions. These are rendered to the dispatcher without escaping. To solve: Inject a persistent XSS payload.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in car rental pickup instructions\", \"Lab Description\": \"Rental customers can provide pickup instructions. These are rendered to the dispatcher without escaping. To solve: Inject a persistent XSS payload.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in fitness app workout summary\nDescription: The summary page takes a value from location.search and inserts it with innerHTML. To solve: Inject XSS via the URL parameter.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in fitness app workout summary\", \"Lab Description\": \"The summary page takes a value from location.search and inserts it with innerHTML. To solve: Inject XSS via the URL parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in recruitment application resume comment\nDescription: Recruiters can leave comments on resumes. These comments are rendered on the admin view without sanitization. To solve: Inject a script as a recruiter comment.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in recruitment application resume comment\", \"Lab Description\": \"Recruiters can leave comments on resumes. These comments are rendered on the admin view without sanitization. To solve: Inject a script as a recruiter comment.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in file upload confirmation\nDescription: After a user uploads a file, the filename is reflected into the page without encoding. To solve: Inject XSS into the filename and observe reflection.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in file upload confirmation\", \"Lab Description\": \"After a user uploads a file, the filename is reflected into the page without encoding. To solve: Inject XSS into the filename and observe reflection.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in travel booking special requests\nDescription: The travel booking form allows users to leave special requests that are displayed to the airline staff without sanitization. To solve: Inject a persistent script that executes when the staff views the request.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in travel booking special requests\", \"Lab Description\": \"The travel booking form allows users to leave special requests that are displayed to the airline staff without sanitization. To solve: Inject a persistent script that executes when the staff views the request.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in discount coupon input\nDescription: The discount code is reflected back to the user without sanitization when it's invalid. To solve: Inject a script via the coupon field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in discount coupon input\", \"Lab Description\": \"The discount code is reflected back to the user without sanitization when it's invalid. To solve: Inject a script via the coupon field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in online education class feedback\nDescription: Students can leave feedback after a session. The text is rendered directly on the instructor dashboard. To solve: Inject persistent XSS in feedback text.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online education class feedback\", \"Lab Description\": \"Students can leave feedback after a session. The text is rendered directly on the instructor dashboard. To solve: Inject persistent XSS in feedback text.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online poll title parameter\nDescription: The poll preview page reflects a poll title parameter from the URL. The input is not encoded before rendering, leading to reflected XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online poll title parameter\", \"Lab Description\": \"The poll preview page reflects a poll title parameter from the URL. The input is not encoded before rendering, leading to reflected XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in hotel booking contact field\nDescription: Users enter contact info during hotel booking. The email/phone is displayed to staff without escaping. To solve: Inject a persistent script in the contact field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in hotel booking contact field\", \"Lab Description\": \"Users enter contact info during hotel booking. The email/phone is displayed to staff without escaping. To solve: Inject a persistent script in the contact field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in shopping cart item preview\nDescription: The cart item preview reads item name from location.hash and inserts it with innerHTML. To solve: Inject a malicious hash and reload the preview page.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in shopping cart item preview\", \"Lab Description\": \"The cart item preview reads item name from location.hash and inserts it with innerHTML. To solve: Inject a malicious hash and reload the preview page.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in messaging app display name\nDescription: Users can update display names. These are rendered to other users in chat without escaping. To solve: Inject a script in the name field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in messaging app display name\", \"Lab Description\": \"Users can update display names. These are rendered to other users in chat without escaping. To solve: Inject a script in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in password reset redirect URL\nDescription: The password reset confirmation page accepts a redirect parameter in the query string. The parameter is reflected without encoding.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in password reset redirect URL\", \"Lab Description\": \"The password reset confirmation page accepts a redirect parameter in the query string. The parameter is reflected without encoding.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in music app playlist description\nDescription: Users can describe their playlists. These descriptions are rendered on public pages without escaping. To solve: Inject a persistent XSS in the description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in music app playlist description\", \"Lab Description\": \"Users can describe their playlists. These descriptions are rendered on public pages without escaping. To solve: Inject a persistent XSS in the description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: DOM XSS in language learning app greeting banner\nDescription: The app renders a greeting based on the language from the hash. It's inserted into a banner using innerHTML, leading to DOM-based XSS.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"DOM XSS in language learning app greeting banner\", \"Lab Description\": \"The app renders a greeting based on the language from the hash. It's inserted into a banner using innerHTML, leading to DOM-based XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stored XSS in team chat message history\nDescription: A collaboration platform stores chat messages submitted via POST requests. Messages are rendered without sanitization in team history view. To solve: Inject a script in a chat message and confirm it executes when history is loaded.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in team chat message history\", \"Lab Description\": \"A collaboration platform stores chat messages submitted via POST requests. Messages are rendered without sanitization in team history view. To solve: Inject a script in a chat message and confirm it executes when history is loaded.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup thank-you page\nDescription: The newsletter signup form posts an email and name, which is echoed on the thank-you page. The name field is reflected without escaping. To solve: Inject an XSS payload via name field and trigger execution.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup thank-you page\", \"Lab Description\": \"The newsletter signup form posts an email and name, which is echoed on the thank-you page. The name field is reflected without escaping. To solve: Inject an XSS payload via name field and trigger execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user-generated announcements\nDescription: A notice board feature allows users to post announcements. Input is stored in the DB and rendered directly on the homepage. To solve: Inject a script into the announcement text and reload the homepage.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-generated announcements\", \"Lab Description\": \"A notice board feature allows users to post announcements. Input is stored in the DB and rendered directly on the homepage. To solve: Inject a script into the announcement text and reload the homepage.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in dynamic event response form\nDescription: A RSVP form posts attendee names, then echoes the name back in the success message. The response is vulnerable to reflected XSS. To solve: Inject a script in the name field and trigger upon form submission.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in dynamic event response form\", \"Lab Description\": \"A RSVP form posts attendee names, then echoes the name back in the success message. The response is vulnerable to reflected XSS. To solve: Inject a script in the name field and trigger upon form submission.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in photo gallery description\nDescription: Users can upload images with descriptions. The description field is displayed on the public gallery without escaping. To solve: Inject a script via the description and verify its execution on view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in photo gallery description\", \"Lab Description\": \"Users can upload images with descriptions. The description field is displayed on the public gallery without escaping. To solve: Inject a script via the description and verify its execution on view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in classroom Q&A forum\nDescription: Students can ask questions via a POST form. The application renders questions without sanitizing HTML. To solve: Inject a script in the question text and confirm execution on the teacherâ€™s view.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in classroom Q&A forum\", \"Lab Description\": \"Students can ask questions via a POST form. The application renders questions without sanitizing HTML. To solve: Inject a script in the question text and confirm execution on the teacherâ€™s view.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in customer feedback handler\nDescription: A feedback form accepts POSTed comments and reflects them back in a confirmation box. Without sanitization, attackers can inject scripts. To solve: Inject an XSS payload via comment field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in customer feedback handler\", \"Lab Description\": \"A feedback form accepts POSTed comments and reflects them back in a confirmation box. Without sanitization, attackers can inject scripts. To solve: Inject an XSS payload via comment field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in developer bug report field\nDescription: A bug tracker accepts POSTed descriptions of issues. The application fails to sanitize HTML before rendering, leading to stored XSS. To solve: Inject a payload into the bug description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in developer bug report field\", \"Lab Description\": \"A bug tracker accepts POSTed descriptions of issues. The application fails to sanitize HTML before rendering, leading to stored XSS. To solve: Inject a payload into the bug description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in online recipe contribution field\nDescription: Users can submit new recipes using a POST form. The recipe description is displayed without sanitization on the homepage. To solve: Inject JavaScript in the description and confirm execution.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in online recipe contribution field\", \"Lab Description\": \"Users can submit new recipes using a POST form. The recipe description is displayed without sanitization on the homepage. To solve: Inject JavaScript in the description and confirm execution.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in error reporting module\nDescription: The application shows raw error messages from form submissions. When invalid data is submitted, the error is reflected without escaping. To solve: Inject a payload in a required field to trigger the XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in error reporting module\", \"Lab Description\": \"The application shows raw error messages from form submissions. When invalid data is submitted, the error is reflected without escaping. To solve: Inject a payload in a required field to trigger the XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in fitness app workout notes\nDescription: Users can submit workout notes via POST, which are shown on their profile without sanitization. To solve: Inject a persistent script in the notes field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in fitness app workout notes\", \"Lab Description\": \"Users can submit workout notes via POST, which are shown on their profile without sanitization. To solve: Inject a persistent script in the notes field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in travel booking confirmation page\nDescription: A travel booking form reflects the userâ€™s name in the confirmation message. Input is not sanitized. To solve: Inject a script in the name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in travel booking confirmation page\", \"Lab Description\": \"A travel booking form reflects the userâ€™s name in the confirmation message. Input is not sanitized. To solve: Inject a script in the name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in grocery app review comments\nDescription: Users can leave comments on grocery items. These comments are stored and shown to others. To solve: Inject a stored XSS payload in the comment field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in grocery app review comments\", \"Lab Description\": \"Users can leave comments on grocery items. These comments are stored and shown to others. To solve: Inject a stored XSS payload in the comment field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in library system book description\nDescription: Admins can add books with descriptions. Descriptions are rendered on the public catalog without sanitization. To solve: Submit a malicious script in the book description.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in library system book description\", \"Lab Description\": \"Admins can add books with descriptions. Descriptions are rendered on the public catalog without sanitization. To solve: Submit a malicious script in the book description.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in event invitation form\nDescription: The event invitation form reflects the userâ€™s input back in the confirmation page. No escaping is done. To solve: Submit a malicious name to trigger XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in event invitation form\", \"Lab Description\": \"The event invitation form reflects the userâ€™s input back in the confirmation page. No escaping is done. To solve: Submit a malicious name to trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in student portal report comments\nDescription: Teachers can leave comments on student reports. These are rendered for students without sanitization. To solve: Inject a script in the comment and test across accounts.\nDifficulty: Hard\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in student portal report comments\", \"Lab Description\": \"Teachers can leave comments on student reports. These are rendered for students without sanitization. To solve: Inject a script in the comment and test across accounts.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Reflected XSS in restaurant feedback popup\nDescription: Users can send quick feedback after checkout. Feedback is reflected in a modal without escaping. To solve: Inject a script in the feedback form.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in restaurant feedback popup\", \"Lab Description\": \"Users can send quick feedback after checkout. Feedback is reflected in a modal without escaping. To solve: Inject a script in the feedback form.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in portfolio builder bio section\nDescription: Users can build a public portfolio with a bio. The bio input is rendered using innerHTML with no sanitation. To solve: Inject a script in the bio section.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in portfolio builder bio section\", \"Lab Description\": \"Users can build a public portfolio with a bio. The bio input is rendered using innerHTML with no sanitation. To solve: Inject a script in the bio section.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in conference session proposal form\nDescription: Speakers submit proposals including session abstracts. Abstracts are rendered on the public agenda page without sanitization. To solve: Submit a malicious abstract.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in conference session proposal form\", \"Lab Description\": \"Speakers submit proposals including session abstracts. Abstracts are rendered on the public agenda page without sanitization. To solve: Submit a malicious abstract.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in contact form reply page\nDescription: After users submit a contact form, their name and message are echoed in a reply page without escaping. To solve: Inject a script in the message input.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in contact form reply page\", \"Lab Description\": \"After users submit a contact form, their name and message are echoed in a reply page without escaping. To solve: Inject a script in the message input.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in classroom discussion board\nDescription: The classroom platform allows students to post questions. These posts are stored and rendered without escaping HTML. To solve: Inject a persistent XSS payload in a question submission.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in classroom discussion board\", \"Lab Description\": \"The classroom platform allows students to post questions. These posts are stored and rendered without escaping HTML. To solve: Inject a persistent XSS payload in a question submission.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in resume preview form\nDescription: The resume builder reflects user input in the live preview. No sanitization is done. To solve: Inject a script in the 'skills' field and trigger XSS.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in resume preview form\", \"Lab Description\": \"The resume builder reflects user input in the live preview. No sanitization is done. To solve: Inject a script in the 'skills' field and trigger XSS.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in user-submitted FAQ content\nDescription: Users can suggest FAQ entries. These are reviewed by admins and displayed directly on the FAQ page. Input is not sanitized. To solve: Inject script in the question or answer field.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in user-submitted FAQ content\", \"Lab Description\": \"Users can suggest FAQ entries. These are reviewed by admins and displayed directly on the FAQ page. Input is not sanitized. To solve: Inject script in the question or answer field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in online invoice client name field\nDescription: The invoice generator reflects the client name after generation. The name is not escaped before being inserted into the DOM. To solve: Inject XSS in the client name field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in online invoice client name field\", \"Lab Description\": \"The invoice generator reflects the client name after generation. The name is not escaped before being inserted into the DOM. To solve: Inject XSS in the client name field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in public travel diary entries\nDescription: Users can submit travel experiences as diary entries. These are displayed on a public feed without filtering HTML content. To solve: Inject a script into the diary body.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in public travel diary entries\", \"Lab Description\": \"Users can submit travel experiences as diary entries. These are displayed on a public feed without filtering HTML content. To solve: Inject a script into the diary body.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in e-commerce coupon generator\nDescription: Users receive a coupon preview with their name. The name is reflected back into the HTML. To solve: Inject script into the name parameter.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in e-commerce coupon generator\", \"Lab Description\": \"Users receive a coupon preview with their name. The name is reflected back into the HTML. To solve: Inject script into the name parameter.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in chatroom private messages\nDescription: Private messages in the chatroom are stored and displayed using innerHTML without filtering. To solve: Inject a persistent XSS payload into the message content.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in chatroom private messages\", \"Lab Description\": \"Private messages in the chatroom are stored and displayed using innerHTML without filtering. To solve: Inject a persistent XSS payload into the message content.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Stored XSS in IT support ticket notes\nDescription: Users can leave notes on their IT support tickets. These notes are stored and rendered on the support view without escaping. To solve: Inject a payload in the note body.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in IT support ticket notes\", \"Lab Description\": \"Users can leave notes on their IT support tickets. These notes are stored and rendered on the support view without escaping. To solve: Inject a payload in the note body.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Reflected XSS in newsletter signup thank-you page\nDescription: The thank-you page reflects the userâ€™s email address after signup. Email is not escaped. To solve: Inject script into the email field.\nDifficulty: Easy\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Reflected XSS in newsletter signup thank-you page\", \"Lab Description\": \"The thank-you page reflects the userâ€™s email address after signup. Email is not escaped. To solve: Inject script into the email field.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Stored XSS in food delivery review system\nDescription: Customers can submit reviews on food deliveries. These reviews are shown publicly without sanitation. To solve: Inject XSS into the review content.\nDifficulty: Medium\nVuln: Cross-site scripting\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stored XSS in food delivery review system\", \"Lab Description\": \"Customers can submit reviews on food deliveries. These reviews are shown publicly without sanitation. To solve: Inject XSS into the review content.\", \"Vulnerability name\": \"Cross-site scripting\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE TRANSFORM\nDescription: A data processing system dynamically creates PostgreSQL transforms between data types. The transform functions are concatenated directly into CREATE TRANSFORM statements, allowing injection during type conversion operations.\nDifficulty: Hard\nVuln: PostgreSQL Transform Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE TRANSFORM\", \"Lab Description\": \"A data processing system dynamically creates PostgreSQL transforms between data types. The transform functions are concatenated directly into CREATE TRANSFORM statements, allowing injection during type conversion operations.\", \"Vulnerability name\": \"PostgreSQL Transform Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL Component_Service Metrics\nDescription: A monitoring system uses MySQL's component_service metrics with dynamic filter expressions. The metric filters are concatenated directly into performance_schema queries, allowing injection through crafted metric names.\nDifficulty: Medium\nVuln: MySQL Component Metrics Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Component_Service Metrics\", \"Lab Description\": \"A monitoring system uses MySQL's component_service metrics with dynamic filter expressions. The metric filters are concatenated directly into performance_schema queries, allowing injection through crafted metric names.\", \"Vulnerability name\": \"MySQL Component Metrics Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\nDescription: A graph analytics platform builds SHORTEST_PATH queries with dynamic node filters. The filter conditions are concatenated directly into graph traversal logic, allowing injection during path calculation.\nDifficulty: Hard\nVuln: SQL Server Graph Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\", \"Lab Description\": \"A graph analytics platform builds SHORTEST_PATH queries with dynamic node filters. The filter conditions are concatenated directly into graph traversal logic, allowing injection during path calculation.\", \"Vulnerability name\": \"SQL Server Graph Path Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle Text INDEX SET STOPLIST\nDescription: A document search system dynamically configures Oracle Text stoplists. The stoplist parameters are concatenated directly into index maintenance operations, allowing injection during search optimization.\nDifficulty: Medium\nVuln: Oracle Text Stoplist Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text INDEX SET STOPLIST\", \"Lab Description\": \"A document search system dynamically configures Oracle Text stoplists. The stoplist parameters are concatenated directly into index maintenance operations, allowing injection during search optimization.\", \"Vulnerability name\": \"Oracle Text Stoplist Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake EXTERNAL FUNCTION Request Transformers\nDescription: A Snowflake pipeline uses external functions with dynamic request transformers. The JavaScript transformer code is concatenated directly into function definitions, allowing injection during API request generation.\nDifficulty: Easy\nVuln: Snowflake Request Transformer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake EXTERNAL FUNCTION Request Transformers\", \"Lab Description\": \"A Snowflake pipeline uses external functions with dynamic request transformers. The JavaScript transformer code is concatenated directly into function definitions, allowing injection during API request generation.\", \"Vulnerability name\": \"Snowflake Request Transformer Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in BigQuery ARRAY_AGG Order By Clause\nDescription: A data visualization tool builds ARRAY_AGG queries with dynamic ORDER BY expressions. The sort clauses are concatenated directly into array aggregation, allowing injection during result ordering.\nDifficulty: Medium\nVuln: BigQuery Array Order Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery ARRAY_AGG Order By Clause\", \"Lab Description\": \"A data visualization tool builds ARRAY_AGG queries with dynamic ORDER BY expressions. The sort clauses are concatenated directly into array aggregation, allowing injection during result ordering.\", \"Vulnerability name\": \"BigQuery Array Order Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse CETAS Partition Clause\nDescription: A data pipeline creates CETAS tables with dynamic partition specifications. The partition clauses are concatenated directly into external table creation, allowing injection during file writing operations.\nDifficulty: Hard\nVuln: Synapse CETAS Partition Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS Partition Clause\", \"Lab Description\": \"A data pipeline creates CETAS tables with dynamic partition specifications. The partition clauses are concatenated directly into external table creation, allowing injection during file writing operations.\", \"Vulnerability name\": \"Synapse CETAS Partition Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Delta Lake OPTIMIZE ZORDER BY\nDescription: A data optimization job uses OPTIMIZE with dynamic ZORDER BY columns. The column names are concatenated directly into file reorganization commands, allowing injection during data compaction.\nDifficulty: Medium\nVuln: Delta Lake ZORDER Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Delta Lake OPTIMIZE ZORDER BY\", \"Lab Description\": \"A data optimization job uses OPTIMIZE with dynamic ZORDER BY columns. The column names are concatenated directly into file reorganization commands, allowing injection during data compaction.\", \"Vulnerability name\": \"Delta Lake ZORDER Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift UNLOAD MANIFEST\nDescription: A data export pipeline uses UNLOAD with dynamic manifest options. The manifest parameters are concatenated directly into S3 export operations, allowing injection during file listing generation.\nDifficulty: Hard\nVuln: Redshift Manifest Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift UNLOAD MANIFEST\", \"Lab Description\": \"A data export pipeline uses UNLOAD with dynamic manifest options. The manifest parameters are concatenated directly into S3 export operations, allowing injection during file listing generation.\", \"Vulnerability name\": \"Redshift Manifest Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Snowflake STREAMS Table Parameter\nDescription: A change data capture system creates STREAMS with dynamic table parameters. The table specifications are concatenated directly into change tracking setup, allowing injection during stream initialization.\nDifficulty: Medium\nVuln: Snowflake Stream Table Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake STREAMS Table Parameter\", \"Lab Description\": \"A change data capture system creates STREAMS with dynamic table parameters. The table specifications are concatenated directly into change tracking setup, allowing injection during stream initialization.\", \"Vulnerability name\": \"Snowflake Stream Table Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT CASCADE\nDescription: A schema migration tool builds INTERLEAVE IN PARENT clauses with dynamic cascade options. The cascade parameters are concatenated directly into table relationships, allowing injection during schema modification.\nDifficulty: Hard\nVuln: Spanner Interleave Cascade Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT CASCADE\", \"Lab Description\": \"A schema migration tool builds INTERLEAVE IN PARENT clauses with dynamic cascade options. The cascade parameters are concatenated directly into table relationships, allowing injection during schema modification.\", \"Vulnerability name\": \"Spanner Interleave Cascade Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Data Explorer External Table Schema Inference\nDescription: A Kusto cluster creates external tables with dynamic schema inference parameters. The inference clauses are concatenated directly into schema detection, allowing injection during table creation.\nDifficulty: Medium\nVuln: Kusto Schema Inference Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer External Table Schema Inference\", \"Lab Description\": \"A Kusto cluster creates external tables with dynamic schema inference parameters. The inference clauses are concatenated directly into schema detection, allowing injection during table creation.\", \"Vulnerability name\": \"Kusto Schema Inference Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\nDescription: An application builds Elasticsearch ODBC connection strings with dynamic properties. The properties are concatenated directly into driver initialization, allowing injection during connection establishment.\nDifficulty: Hard\nVuln: Elasticsearch ODBC Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An application builds Elasticsearch ODBC connection strings with dynamic properties. The properties are concatenated directly into driver initialization, allowing injection during connection establishment.\", \"Vulnerability name\": \"Elasticsearch ODBC Connection Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Escaping\nDescription: A Druid cluster processes SQL queries with dynamic identifier escaping. The escape sequences are concatenated directly into query planning, allowing injection through crafted identifier patterns.\nDifficulty: Medium\nVuln: Druid Identifier Escape Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A Druid cluster processes SQL queries with dynamic identifier escaping. The escape sequences are concatenated directly into query planning, allowing injection through crafted identifier patterns.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux Yield Name Parameter\nDescription: A monitoring system uses InfluxDB Flux with dynamic yield names. The yield identifiers are concatenated directly into result processing, allowing injection during data output generation.\nDifficulty: Hard\nVuln: Flux Yield Name Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Yield Name Parameter\", \"Lab Description\": \"A monitoring system uses InfluxDB Flux with dynamic yield names. The yield identifiers are concatenated directly into result processing, allowing injection during data output generation.\", \"Vulnerability name\": \"Flux Yield Name Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Refresh Policy\nDescription: A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialization jobs, allowing injection during view maintenance.\nDifficulty: Hard\nVuln: Timescale Refresh Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Refresh Policy\", \"Lab Description\": \"A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialization jobs, allowing injection during view maintenance.\", \"Vulnerability name\": \"Timescale Refresh Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Changefeed Filter Expressions\nDescription: A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation, allowing injection during data capture.\nDifficulty: Medium\nVuln: CockroachCDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Changefeed Filter Expressions\", \"Lab Description\": \"A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation, allowing injection during data capture.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations, allowing injection during file access.\nDifficulty: Medium\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations, allowing injection during file access.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation, allowing injection during initial population.\nDifficulty: Hard\nVuln: Materialized View Data Clause Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation, allowing injection during initial population.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation, allowing injection during cryptographic verification.\nDifficulty: Easy\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation, allowing injection during cryptographic verification.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Google BigQuery Wildcard Table Patterns\nDescription: A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses, allowing injection during table expansion.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses, allowing injection during table expansion.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake Session Parameter Defaults\nDescription: A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization, allowing injection during connection setup.\nDifficulty: Hard\nVuln: Snowflake Session Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization, allowing injection during connection setup.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation, allowing injection during cluster startup.\nDifficulty: Easy\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation, allowing injection during cluster startup.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration, allowing injection during UDF execution.\nDifficulty: Medium\nVuln: Trino Function Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration, allowing injection during UDF execution.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls, allowing injection during table generation.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls, allowing injection during table generation.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Dictionary Source URLs\nDescription: A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions, allowing injection during data loading.\nDifficulty: Medium\nVuln: ClickHouse Dictionary URL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions, allowing injection during data loading.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in MongoDB $expr Operator\nDescription: A NoSQL application builds aggregation pipelines with dynamic $expr conditions. The expressions are concatenated directly into pipeline stages, allowing injection during document processing.\nDifficulty: Medium\nVuln: MongoDB Expression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MongoDB $expr Operator\", \"Lab Description\": \"A NoSQL application builds aggregation pipelines with dynamic $expr conditions. The expressions are concatenated directly into pipeline stages, allowing injection during document processing.\", \"Vulnerability name\": \"MongoDB Expression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in MariaDB System Versioning\nDescription: A temporal database system uses MariaDB's system versioning with dynamic AS OF parameters. The timestamp expressions are concatenated directly into historical queries.\nDifficulty: Hard\nVuln: MariaDB Temporal Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MariaDB System Versioning\", \"Lab Description\": \"A temporal database system uses MariaDB's system versioning with dynamic AS OF parameters. The timestamp expressions are concatenated directly into historical queries.\", \"Vulnerability name\": \"MariaDB Temporal Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in IBM DB2 Label-Based Access Control\nDescription: A security system uses DB2's LBAC with dynamic security label comparisons. The label expressions are concatenated directly into row filtering.\nDifficulty: Hard\nVuln: DB2 LBAC Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in IBM DB2 Label-Based Access Control\", \"Lab Description\": \"A security system uses DB2's LBAC with dynamic security label comparisons. The label expressions are concatenated directly into row filtering.\", \"Vulnerability name\": \"DB2 LBAC Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SAP HANA Calculation View Parameters\nDescription: An analytics platform builds calculation views with dynamic input parameters. The parameter values are concatenated directly into view execution.\nDifficulty: Hard\nVuln: HANA Calc View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SAP HANA Calculation View Parameters\", \"Lab Description\": \"An analytics platform builds calculation views with dynamic input parameters. The parameter values are concatenated directly into view execution.\", \"Vulnerability name\": \"HANA Calc View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Teradata Query Banding\nDescription: A monitoring system uses Teradata query bands with dynamic session attributes. The band values are concatenated directly into workload management.\nDifficulty: Medium\nVuln: Teradata Query Band Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Teradata Query Banding\", \"Lab Description\": \"A monitoring system uses Teradata query bands with dynamic session attributes. The band values are concatenated directly into workload management.\", \"Vulnerability name\": \"Teradata Query Band Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Oracle Text CONTAINS Scoring\nDescription: A search application builds Oracle Text queries with dynamic score expressions. The scoring parameters are concatenated directly into CONTAINS operations.\nDifficulty: Hard\nVuln: Oracle Text Score Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text CONTAINS Scoring\", \"Lab Description\": \"A search application builds Oracle Text queries with dynamic score expressions. The scoring parameters are concatenated directly into CONTAINS operations.\", \"Vulnerability name\": \"Oracle Text Score Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQLite FTS5 Virtual Table Options\nDescription: A mobile app creates SQLite FTS5 tables with dynamic content options. The configuration strings are concatenated directly into full-text search setup.\nDifficulty: Medium\nVuln: SQLite FTS5 Option Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQLite FTS5 Virtual Table Options\", \"Lab Description\": \"A mobile app creates SQLite FTS5 tables with dynamic content options. The configuration strings are concatenated directly into full-text search setup.\", \"Vulnerability name\": \"SQLite FTS5 Option Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Cassandra CQL User-Defined Function Imports\nDescription: A Cassandra cluster creates UDFs with dynamic import declarations. The import paths are concatenated directly into function compilation.\nDifficulty: Hard\nVuln: Cassandra UDF Import Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Cassandra CQL User-Defined Function Imports\", \"Lab Description\": \"A Cassandra cluster creates UDFs with dynamic import declarations. The import paths are concatenated directly into function compilation.\", \"Vulnerability name\": \"Cassandra UDF Import Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Neo4j APOC Load CSV Headers\nDescription: A graph ETL pipeline uses APOC's load CSV with dynamic header mappings. The header parameters are concatenated directly into file imports.\nDifficulty: Medium\nVuln: Neo4j CSV Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Neo4j APOC Load CSV Headers\", \"Lab Description\": \"A graph ETL pipeline uses APOC's load CSV with dynamic header mappings. The header parameters are concatenated directly into file imports.\", \"Vulnerability name\": \"Neo4j CSV Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in RedisGraph Query Aliases\nDescription: A Redis module builds graph queries with dynamic node aliases. The alias names are concatenated directly into Cypher execution.\nDifficulty: Hard\nVuln: RedisGraph Alias Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in RedisGraph Query Aliases\", \"Lab Description\": \"A Redis module builds graph queries with dynamic node aliases. The alias names are concatenated directly into Cypher execution.\", \"Vulnerability name\": \"RedisGraph Alias Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ArangoDB AQL PRUNE Conditions\nDescription: A document traversal system builds AQL queries with dynamic PRUNE clauses. The conditions are concatenated directly into graph traversals.\nDifficulty: Hard\nVuln: ArangoDB PRUNE Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ArangoDB AQL PRUNE Conditions\", \"Lab Description\": \"A document traversal system builds AQL queries with dynamic PRUNE clauses. The conditions are concatenated directly into graph traversals.\", \"Vulnerability name\": \"ArangoDB PRUNE Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CouchDB Mango Query Operators\nDescription: A document store uses CouchDB's Mango with dynamic operator selection. The operator names are concatenated directly into find operations.\nDifficulty: Medium\nVuln: CouchDB Operator Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CouchDB Mango Query Operators\", \"Lab Description\": \"A document store uses CouchDB's Mango with dynamic operator selection. The operator names are concatenated directly into find operations.\", \"Vulnerability name\": \"CouchDB Operator Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux Pivot Columns\nDescription: A time-series dashboard builds Flux queries with dynamic pivot columns. The column names are concatenated directly into data reshaping.\nDifficulty: Hard\nVuln: Flux Pivot Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Pivot Columns\", \"Lab Description\": \"A time-series dashboard builds Flux queries with dynamic pivot columns. The column names are concatenated directly into data reshaping.\", \"Vulnerability name\": \"Flux Pivot Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Policies\nDescription: A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\nDifficulty: Hard\nVuln: Timescale Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Policies\", \"Lab Description\": \"A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\", \"Vulnerability name\": \"Timescale Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Changefeed Filters\nDescription: A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\nDifficulty: Medium\nVuln: CockroachCDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Changefeed Filters\", \"Lab Description\": \"A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\nDifficulty: Medium\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation.\nDifficulty: Hard\nVuln: Materialized View Data Clause Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse creates materialized views with dynamic data loading options. The WITH DATA clauses are concatenated directly into view creation.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\nDifficulty: Hard\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google BigQuery Wildcard Table Patterns\nDescription: A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake Session Parameter Defaults\nDescription: A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization.\nDifficulty: Hard\nVuln: Snowflake Session Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A configuration tool sets Snowflake session parameters with dynamic defaults. The default expressions are concatenated directly into session initialization.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\nDifficulty: Hard\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\nDifficulty: Medium\nVuln: Trino Function Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL COPY TO PROGRAM\nDescription: A data export feature uses COPY TO with dynamic program execution. The command strings are concatenated directly into shell command execution.\nDifficulty: Hard\nVuln: PostgreSQL COPY Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL COPY TO PROGRAM\", \"Lab Description\": \"A data export feature uses COPY TO with dynamic program execution. The command strings are concatenated directly into shell command execution.\", \"Vulnerability name\": \"PostgreSQL COPY Command Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL X Protocol Authentication\nDescription: A custom authentication plugin uses X Protocol with dynamic queries. The auth strings are concatenated directly into connection handshakes.\nDifficulty: Easy\nVuln: MySQL X Protocol Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL X Protocol Authentication\", \"Lab Description\": \"A custom authentication plugin uses X Protocol with dynamic queries. The auth strings are concatenated directly into connection handshakes.\", \"Vulnerability name\": \"MySQL X Protocol Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in SQL Server External Script Parameters\nDescription: A machine learning service uses sp_execute_external_script with dynamic R/Python parameters. The script arguments are concatenated directly into execution.\nDifficulty: Hard\nVuln: SQL Server External Script Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server External Script Parameters\", \"Lab Description\": \"A machine learning service uses sp_execute_external_script with dynamic R/Python parameters. The script arguments are concatenated directly into execution.\", \"Vulnerability name\": \"SQL Server External Script Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle SDO_UTIL.TO_GEOJSON\nDescription: A GIS application converts geometries to GeoJSON with dynamic properties. The attribute lists are concatenated directly into JSON generation.\nDifficulty: Medium\nVuln: Oracle GeoJSON Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_UTIL.TO_GEOJSON\", \"Lab Description\": \"A GIS application converts geometries to GeoJSON with dynamic properties. The attribute lists are concatenated directly into JSON generation.\", \"Vulnerability name\": \"Oracle GeoJSON Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Refresh\nDescription: A cloud pipeline refreshes external tables with dynamic location patterns. The path strings are concatenated directly into metadata updates.\nDifficulty: Medium\nVuln: Snowflake External Table Poisoning\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh\", \"Lab Description\": \"A cloud pipeline refreshes external tables with dynamic location patterns. The path strings are concatenated directly into metadata updates.\", \"Vulnerability name\": \"Snowflake External Table Poisoning\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery JavaScript UDF Inline Code\nDescription: A data transformation uses JavaScript UDFs with dynamic code. The script bodies are concatenated directly into function execution.\nDifficulty: Hard\nVuln: BigQuery JS UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery JavaScript UDF Inline Code\", \"Lab Description\": \"A data transformation uses JavaScript UDFs with dynamic code. The script bodies are concatenated directly into function execution.\", \"Vulnerability name\": \"BigQuery JS UDF Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse Spark Notebook Parameters\nDescription: A Synapse Spark notebook accepts dynamic SQL parameters. The values are concatenated directly into PySpark/SQL cell execution.\nDifficulty: Medium\nVuln: Synapse Notebook Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Spark Notebook Parameters\", \"Lab Description\": \"A Synapse Spark notebook accepts dynamic SQL parameters. The values are concatenated directly into PySpark/SQL cell execution.\", \"Vulnerability name\": \"Synapse Notebook Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift SUPER Type Casting\nDescription: A semi-structured data system uses dynamic casts to SUPER type. The type expressions are concatenated directly into JSON processing.\nDifficulty: Medium\nVuln: Redshift SUPER Cast Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift SUPER Type Casting\", \"Lab Description\": \"A semi-structured data system uses dynamic casts to SUPER type. The type expressions are concatenated directly into JSON processing.\", \"Vulnerability name\": \"Redshift SUPER Cast Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner DDL Change Streams\nDescription: A schema migration tool creates change streams with dynamic DDL filters. The filter strings are concatenated directly into schema change tracking.\nDifficulty: Hard\nVuln: Spanner DDL Stream Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner DDL Change Streams\", \"Lab Description\": \"A schema migration tool creates change streams with dynamic DDL filters. The filter strings are concatenated directly into schema change tracking.\", \"Vulnerability name\": \"Spanner DDL Stream Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Unity Catalog Table Comments\nDescription: A data governance system updates table comments dynamically. The comment text is concatenated directly into ALTER TABLE statements.\nDifficulty: Easy\nVuln: Unity Catalog Comment Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Table Comments\", \"Lab Description\": \"A data governance system updates table comments dynamically. The comment text is concatenated directly into ALTER TABLE statements.\", \"Vulnerability name\": \"Unity Catalog Comment Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowpark Python Stored Procedures\nDescription: A Snowflake Snowpark app creates Python UDFs with dynamic code. The Python source is concatenated directly into procedure creation.\nDifficulty: Hard\nVuln: Snowpark Python Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowpark Python Stored Procedures\", \"Lab Description\": \"A Snowflake Snowpark app creates Python UDFs with dynamic code. The Python source is concatenated directly into procedure creation.\", \"Vulnerability name\": \"Snowpark Python Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Cosmos DB SQL API User-Defined Functions\nDescription: A NoSQL application creates UDFs with dynamic JavaScript. The function bodies are concatenated directly into query execution.\nDifficulty: Medium\nVuln: CosmosDB UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB SQL API User-Defined Functions\", \"Lab Description\": \"A NoSQL application creates UDFs with dynamic JavaScript. The function bodies are concatenated directly into query execution.\", \"Vulnerability name\": \"CosmosDB UDF Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\nDescription: An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\nDifficulty: Medium\nVuln: Elasticsearch ODBC Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Case Forcing\nDescription: A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\nDifficulty: Easy\nVuln: Druid Case Forcing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Case Forcing\", \"Lab Description\": \"A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\", \"Vulnerability name\": \"Druid Case Forcing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux HTTP Request Parameters\nDescription: A monitoring system builds Flux HTTP requests with dynamic URLs. The request parameters are concatenated directly into pipeline execution.\nDifficulty: Hard\nVuln: Flux HTTP Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux HTTP Request Parameters\", \"Lab Description\": \"A monitoring system builds Flux HTTP requests with dynamic URLs. The request parameters are concatenated directly into pipeline execution.\", \"Vulnerability name\": \"Flux HTTP Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Compression Segmentby Columns\nDescription: A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\nDifficulty: Medium\nVuln: Timescale Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Segmentby Columns\", \"Lab Description\": \"A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB CDC Webhook Headers\nDescription: A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\nDifficulty: Hard\nVuln: Cockroach Webhook Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Headers\", \"Lab Description\": \"A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\", \"Vulnerability name\": \"Cockroach Webhook Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in DuckDB HTTPFS Extension Headers\nDescription: A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\nDifficulty: Medium\nVuln: DuckDB HTTPFS Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\", \"Vulnerability name\": \"DuckDB HTTPFS Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Function Response Transformers\nDescription: A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\nDifficulty: Hard\nVuln: Snowflake Response Transformer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Response Transformers\", \"Lab Description\": \"A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\", \"Vulnerability name\": \"Snowflake Response Transformer Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Asset Bundle Runtime Parameters\nDescription: A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\nDifficulty: Medium\nVuln: Databricks Bundle Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Asset Bundle Runtime Parameters\", \"Lab Description\": \"A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\", \"Vulnerability name\": \"Databricks Bundle Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Trino Iceberg Metadata Procedures\nDescription: A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\nDifficulty: Hard\nVuln: Trino Iceberg Procedure Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Iceberg Metadata Procedures\", \"Lab Description\": \"A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\", \"Vulnerability name\": \"Trino Iceberg Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Presto Thrift UDF Payloads\nDescription: A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\nDifficulty: Easy\nVuln: Presto Thrift UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Thrift UDF Payloads\", \"Lab Description\": \"A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\", \"Vulnerability name\": \"Presto Thrift UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Kafka Engine Settings\nDescription: A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\nDifficulty: Medium\nVuln: ClickHouse Kafka Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Kafka Engine Settings\", \"Lab Description\": \"A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\", \"Vulnerability name\": \"ClickHouse Kafka Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE TEXT SEARCH PARSER\nDescription: A search engine dynamically creates text parsers with vulnerable configuration. The parser commands are concatenated directly into dictionary creation.\nDifficulty: Hard\nVuln: PostgreSQL Text Parser Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE TEXT SEARCH PARSER\", \"Lab Description\": \"A search engine dynamically creates text parsers with vulnerable configuration. The parser commands are concatenated directly into dictionary creation.\", \"Vulnerability name\": \"PostgreSQL Text Parser Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL MEMORY Table Index Comments\nDescription: A caching system creates MEMORY tables with dynamic index comments. The comment text is concatenated directly into index creation.\nDifficulty: Medium\nVuln: MySQL MEMORY Table Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL MEMORY Table Index Comments\", \"Lab Description\": \"A caching system creates MEMORY tables with dynamic index comments. The comment text is concatenated directly into index creation.\", \"Vulnerability name\": \"MySQL MEMORY Table Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\nDescription: A recommendation engine builds graph queries with dynamic node properties. The property filters are concatenated directly into pathfinding.\nDifficulty: Medium\nVuln: SQL Graph Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph SHORTEST_PATH Node Filters\", \"Lab Description\": \"A recommendation engine builds graph queries with dynamic node properties. The property filters are concatenated directly into pathfinding.\", \"Vulnerability name\": \"SQL Graph Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Oracle DBMS_AQADM Queue Tables\nDescription: A messaging system creates AQ queues with dynamic queue tables. The table parameters are concatenated directly into queue creation.\nDifficulty: Hard\nVuln: Oracle AQ Queue Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle DBMS_AQADM Queue Tables\", \"Lab Description\": \"A messaging system creates AQ queues with dynamic queue tables. The table parameters are concatenated directly into queue creation.\", \"Vulnerability name\": \"Oracle AQ Queue Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Snowflake STREAMS Table Filters\nDescription: A CDC pipeline creates streams with dynamic table filters. The filter conditions are concatenated directly into change tracking.\nDifficulty: Medium\nVuln: Snowflake Stream Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake STREAMS Table Filters\", \"Lab Description\": \"A CDC pipeline creates streams with dynamic table filters. The filter conditions are concatenated directly into change tracking.\", \"Vulnerability name\": \"Snowflake Stream Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery JSON_EXTRACT Path Parameters\nDescription: A JSON processing system extracts values with dynamic path expressions. The paths are concatenated directly into JSON parsing.\nDifficulty: Easy\nVuln: BigQuery JSON Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery JSON_EXTRACT Path Parameters\", \"Lab Description\": \"A JSON processing system extracts values with dynamic path expressions. The paths are concatenated directly into JSON parsing.\", \"Vulnerability name\": \"BigQuery JSON Path Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse CETAS Partition Clauses\nDescription: A data export feature uses CETAS with dynamic partition keys. The partition expressions are concatenated directly into file writing.\nDifficulty: Hard\nVuln: Synapse CETAS Partition Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS Partition Clauses\", \"Lab Description\": \"A data export feature uses CETAS with dynamic partition keys. The partition expressions are concatenated directly into file writing.\", \"Vulnerability name\": \"Synapse CETAS Partition Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Alias Expressions\nDescription: A dashboard tool creates column aliases with dynamic expressions. The alias definitions are concatenated directly into query execution.\nDifficulty: Easy\nVuln: Databricks Alias Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Alias Expressions\", \"Lab Description\": \"A dashboard tool creates column aliases with dynamic expressions. The alias definitions are concatenated directly into query execution.\", \"Vulnerability name\": \"Databricks Alias Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift Spectrum External Table Locations\nDescription: A data lake query system creates Spectrum tables with dynamic S3 paths. The location strings are concatenated directly into external table definitions.\nDifficulty: Medium\nVuln: Redshift Spectrum Location Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift Spectrum External Table Locations\", \"Lab Description\": \"A data lake query system creates Spectrum tables with dynamic S3 paths. The location strings are concatenated directly into external table definitions.\", \"Vulnerability name\": \"Redshift Spectrum Location Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner Foreign Key Constraints\nDescription: A schema migration tool adds foreign keys with dynamic constraint checks. The constraint clauses are concatenated directly into DDL.\nDifficulty: Hard\nVuln: Spanner FK Constraint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner Foreign Key Constraints\", \"Lab Description\": \"A schema migration tool adds foreign keys with dynamic constraint checks. The constraint clauses are concatenated directly into DDL.\", \"Vulnerability name\": \"Spanner FK Constraint Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Azure Data Explorer Kusto Function Defaults\nDescription: A KQL query system creates functions with dynamic default parameters. The default expressions are concatenated directly into function execution.\nDifficulty: Medium\nVuln: Kusto Function Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer Kusto Function Defaults\", \"Lab Description\": \"A KQL query system creates functions with dynamic default parameters. The default expressions are concatenated directly into function execution.\", \"Vulnerability name\": \"Kusto Function Default Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\nDescription: An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\nDifficulty: Medium\nVuln: Elasticsearch ODBC Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Connection Strings\", \"Lab Description\": \"An analytics tool builds ODBC connections with dynamic properties. The connection strings are concatenated directly into driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Escaping\nDescription: A dashboard builder dynamically escapes Druid SQL identifiers. The escape sequences are concatenated directly into query planning.\nDifficulty: Medium\nVuln: Druid Identifier Escape Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A dashboard builder dynamically escapes Druid SQL identifiers. The escape sequences are concatenated directly into query planning.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux String Interpolation\nDescription: A monitoring system builds Flux queries with dynamic string interpolation. The template strings are concatenated directly into pipeline construction.\nDifficulty: Hard\nVuln: Flux Interpolation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux String Interpolation\", \"Lab Description\": \"A monitoring system builds Flux queries with dynamic string interpolation. The template strings are concatenated directly into pipeline construction.\", \"Vulnerability name\": \"Flux Interpolation Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Policies\nDescription: A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\nDifficulty: Hard\nVuln: Timescale Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Policies\", \"Lab Description\": \"A time-series platform configures continuous aggregates with dynamic refresh policies. The policy parameters are concatenated directly into materialized view maintenance.\", \"Vulnerability name\": \"Timescale Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Changefeed Filters\nDescription: A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\nDifficulty: Medium\nVuln: CockroachCDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Changefeed Filters\", \"Lab Description\": \"A CDC pipeline creates changefeeds with dynamic filter expressions. The filters are concatenated directly into change event generation.\", \"Vulnerability name\": \"CockroachCDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\nDifficulty: Easy\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures DuckDB's S3 extension with dynamic endpoints. The connection strings are concatenated directly into cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse creates materialized views with dynamic data loading options. The WITH clauses are concatenated directly into view creation.\nDifficulty: Medium\nVuln: Materialized View Data Clause Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse creates materialized views with dynamic data loading options. The WITH clauses are concatenated directly into view creation.\", \"Vulnerability name\": \"Materialized View Data Clause Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\nDifficulty: Hard\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application uses SQL Server Ledger with dynamic view parameters. The options are concatenated directly into ledger view creation.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google BigQuery Wildcard Table Patterns\nDescription: A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google BigQuery Wildcard Table Patterns\", \"Lab Description\": \"A data analytics tool uses BigQuery wildcard tables with dynamic patterns. The table patterns are concatenated directly into FROM clauses.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\nDifficulty: Hard\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A Databricks environment configures SQL warehouses with dynamic parameters. The configuration strings are concatenated directly into warehouse creation.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\nDifficulty: Medium\nVuln: Trino Function Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A Trino cluster creates functions with dynamic namespace paths. The namespace strings are concatenated directly into function registration.\", \"Vulnerability name\": \"Trino Function Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A Presto cluster uses table functions with dynamic arguments. The argument strings are concatenated directly into function calls.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Dictionary Source URLs\nDescription: A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions.\nDifficulty: Medium\nVuln: ClickHouse Dictionary URL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A ClickHouse cluster configures external dictionaries with dynamic source URLs. The URLs are concatenated directly into dictionary definitions.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE COLLATION Locale\nDescription: A multilingual app creates custom collations with dynamic locale strings. The locale parameters are concatenated directly into collation definitions.\nDifficulty: Medium\nVuln: PostgreSQL Collation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE COLLATION Locale\", \"Lab Description\": \"A multilingual app creates custom collations with dynamic locale strings. The locale parameters are concatenated directly into collation definitions.\", \"Vulnerability name\": \"PostgreSQL Collation Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in MySQL Clone Plugin Data Filtering\nDescription: A database cloning tool uses dynamic filters during clone operations. The filter conditions are concatenated directly into clone statements.\nDifficulty: Hard\nVuln: MySQL Clone Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Clone Plugin Data Filtering\", \"Lab Description\": \"A database cloning tool uses dynamic filters during clone operations. The filter conditions are concatenated directly into clone statements.\", \"Vulnerability name\": \"MySQL Clone Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger History Retention\nDescription: A blockchain system configures ledger history with dynamic retention periods. The retention clauses are concatenated directly into immutable storage.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger History Retention\", \"Lab Description\": \"A blockchain system configures ledger history with dynamic retention periods. The retention clauses are concatenated directly into immutable storage.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle SDO_NET Memory Parameters\nDescription: A network analysis tool configures spatial networks with dynamic memory settings. The parameter strings are concatenated directly into network creation.\nDifficulty: Easy\nVuln: Oracle SDO_NET Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_NET Memory Parameters\", \"Lab Description\": \"A network analysis tool configures spatial networks with dynamic memory settings. The parameter strings are concatenated directly into network creation.\", \"Vulnerability name\": \"Oracle SDO_NET Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Refresh Paths\nDescription: A cloud pipeline refreshes external tables with dynamic storage paths. The path strings are concatenated directly into metadata updates.\nDifficulty: Medium\nVuln: Snowflake External Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh Paths\", \"Lab Description\": \"A cloud pipeline refreshes external tables with dynamic storage paths. The path strings are concatenated directly into metadata updates.\", \"Vulnerability name\": \"Snowflake External Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse Spark Notebook Magic Parameters\nDescription: A Synapse notebook uses dynamic parameters in magic commands. The values are concatenated directly into command execution.\nDifficulty: Easy\nVuln: Synapse Magic Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Spark Notebook Magic Parameters\", \"Lab Description\": \"A Synapse notebook uses dynamic parameters in magic commands. The values are concatenated directly into command execution.\", \"Vulnerability name\": \"Synapse Magic Command Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift ML Model Hyperparameters\nDescription: A predictive analytics system trains ML models with dynamic hyperparameters. The parameter strings are concatenated directly into model creation.\nDifficulty: Hard\nVuln: Redshift ML Hyperparameter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift ML Model Hyperparameters\", \"Lab Description\": \"A predictive analytics system trains ML models with dynamic hyperparameters. The parameter strings are concatenated directly into model creation.\", \"Vulnerability name\": \"Redshift ML Hyperparameter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner Change Stream Value Capture\nDescription: A CDC system configures change streams with dynamic value capture. The capture clauses are concatenated directly into stream creation.\nDifficulty: Medium\nVuln: Spanner Value Capture Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner Change Stream Value Capture\", \"Lab Description\": \"A CDC system configures change streams with dynamic value capture. The capture clauses are concatenated directly into stream creation.\", \"Vulnerability name\": \"Spanner Value Capture Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks Unity Catalog Sharing Recipients\nDescription: A data sharing platform configures Delta Sharing with dynamic recipient emails. The email strings are concatenated directly into ACL management.\nDifficulty: Easy\nVuln: Unity Catalog Sharing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Sharing Recipients\", \"Lab Description\": \"A data sharing platform configures Delta Sharing with dynamic recipient emails. The email strings are concatenated directly into ACL management.\", \"Vulnerability name\": \"Unity Catalog Sharing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowpark Java UDF Class Paths\nDescription: A Snowpark app registers Java UDFs with dynamic classpaths. The path strings are concatenated directly into JAR loading.\nDifficulty: Easy\nVuln: Snowpark Java UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowpark Java UDF Class Paths\", \"Lab Description\": \"A Snowpark app registers Java UDFs with dynamic classpaths. The path strings are concatenated directly into JAR loading.\", \"Vulnerability name\": \"Snowpark Java UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Cosmos DB Stored Procedure Continuations\nDescription: A NoSQL application builds Cosmos DB stored procedures with dynamic continuation tokens. The token strings are concatenated directly into pagination logic.\nDifficulty: Medium\nVuln: CosmosDB Continuation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB Stored Procedure Continuations\", \"Lab Description\": \"A NoSQL application builds Cosmos DB stored procedures with dynamic continuation tokens. The token strings are concatenated directly into pagination logic.\", \"Vulnerability name\": \"CosmosDB Continuation Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Properties\nDescription: An analytics tool builds ODBC connections with dynamic properties. The property strings are concatenated directly into driver initialization.\nDifficulty: Medium\nVuln: Elasticsearch ODBC Property Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Properties\", \"Lab Description\": \"An analytics tool builds ODBC connections with dynamic properties. The property strings are concatenated directly into driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Property Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Case Forcing\nDescription: A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\nDifficulty: Easy\nVuln: Druid Case Forcing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Case Forcing\", \"Lab Description\": \"A dashboard tool forces identifier case with dynamic expressions. The case operations are concatenated directly into query planning.\", \"Vulnerability name\": \"Druid Case Forcing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux HTTP Request Headers\nDescription: A monitoring system builds Flux HTTP requests with dynamic headers. The header strings are concatenated directly into pipeline execution.\nDifficulty: Hard\nVuln: Flux HTTP Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux HTTP Request Headers\", \"Lab Description\": \"A monitoring system builds Flux HTTP requests with dynamic headers. The header strings are concatenated directly into pipeline execution.\", \"Vulnerability name\": \"Flux HTTP Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Compression Segmentby Columns\nDescription: A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\nDifficulty: Medium\nVuln: Timescale Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Segmentby Columns\", \"Lab Description\": \"A time-series database enables compression with dynamic segmentby columns. The column lists are concatenated directly into compression policies.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB CDC Webhook Headers\nDescription: A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\nDifficulty: Hard\nVuln: Cockroach Webhook Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Headers\", \"Lab Description\": \"A change data capture system configures webhooks with dynamic headers. The header values are concatenated directly into HTTP requests.\", \"Vulnerability name\": \"Cockroach Webhook Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in DuckDB HTTPFS Extension Headers\nDescription: A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\nDifficulty: Medium\nVuln: DuckDB HTTPFS Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline uses DuckDB's HTTPFS with dynamic request headers. The header strings are concatenated directly into HTTP operations.\", \"Vulnerability name\": \"DuckDB HTTPFS Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse refreshes materialized views with dynamic data options. The WITH clauses are concatenated directly into refresh operations.\nDifficulty: Easy\nVuln: Materialized View Refresh Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse refreshes materialized views with dynamic data options. The WITH clauses are concatenated directly into refresh operations.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in SQL Ledger History Retention\nDescription: A blockchain application configures ledger history with dynamic retention. The retention clauses are concatenated directly into blockchain maintenance.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Ledger History Retention\", \"Lab Description\": \"A blockchain application configures ledger history with dynamic retention. The retention clauses are concatenated directly into blockchain maintenance.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system creates remote models with dynamic connections. The connection strings are concatenated directly into model inference.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Function Response Transformers\nDescription: A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\nDifficulty: Hard\nVuln: Snowflake Response Transformer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Function Response Transformers\", \"Lab Description\": \"A cloud integration processes external function responses with dynamic transformers. The JavaScript code is concatenated directly into result handling.\", \"Vulnerability name\": \"Snowflake Response Transformer Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Asset Bundle Runtime Parameters\nDescription: A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\nDifficulty: Medium\nVuln: Databricks Bundle Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Asset Bundle Runtime Parameters\", \"Lab Description\": \"A deployment pipeline configures Databricks bundles with dynamic runtime args. The parameter strings are concatenated directly into job execution.\", \"Vulnerability name\": \"Databricks Bundle Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Trino Iceberg Metadata Procedures\nDescription: A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\nDifficulty: Hard\nVuln: Trino Iceberg Procedure Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Iceberg Metadata Procedures\", \"Lab Description\": \"A data lakehouse executes Iceberg procedures with dynamic arguments. The parameters are concatenated directly into metadata operations.\", \"Vulnerability name\": \"Trino Iceberg Procedure Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Presto Thrift UDF Payloads\nDescription: A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\nDifficulty: Easy\nVuln: Presto Thrift UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Thrift UDF Payloads\", \"Lab Description\": \"A distributed system registers Thrift UDFs with dynamic serialization. The payload strings are concatenated directly into function execution.\", \"Vulnerability name\": \"Presto Thrift UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Kafka Engine Settings\nDescription: A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\nDifficulty: Medium\nVuln: ClickHouse Kafka Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Kafka Engine Settings\", \"Lab Description\": \"A streaming pipeline creates Kafka tables with dynamic engine settings. The configuration strings are concatenated directly into consumer initialization.\", \"Vulnerability name\": \"ClickHouse Kafka Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SingleStore Pipelines Transformation Scripts\nDescription: A real-time pipeline creates data transformations with dynamic JavaScript scripts. The script code is concatenated directly into stream processing.\nDifficulty: Hard\nVuln: SingleStore Script Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SingleStore Pipelines Transformation Scripts\", \"Lab Description\": \"A real-time pipeline creates data transformations with dynamic JavaScript scripts. The script code is concatenated directly into stream processing.\", \"Vulnerability name\": \"SingleStore Script Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in YugabyteDB CDC Stream IDs\nDescription: A change data capture system creates YugabyteDB streams with dynamic identifiers. The ID strings are concatenated directly into WAL processing.\nDifficulty: Easy\nVuln: Yugabyte Stream ID Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in YugabyteDB CDC Stream IDs\", \"Lab Description\": \"A change data capture system creates YugabyteDB streams with dynamic identifiers. The ID strings are concatenated directly into WAL processing.\", \"Vulnerability name\": \"Yugabyte Stream ID Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in CrateDB Dynamic Partition Columns\nDescription: A distributed SQL system creates partitioned tables with dynamic column names. The partition expressions are concatenated directly into shard allocation.\nDifficulty: Medium\nVuln: CrateDB Partition Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CrateDB Dynamic Partition Columns\", \"Lab Description\": \"A distributed SQL system creates partitioned tables with dynamic column names. The partition expressions are concatenated directly into shard allocation.\", \"Vulnerability name\": \"CrateDB Partition Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in TiDB Placement Policy Constraints\nDescription: A distributed database configures placement policies with dynamic constraints. The constraint strings are concatenated directly into region placement.\nDifficulty: Hard\nVuln: TiDB Placement Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TiDB Placement Policy Constraints\", \"Lab Description\": \"A distributed database configures placement policies with dynamic constraints. The constraint strings are concatenated directly into region placement.\", \"Vulnerability name\": \"TiDB Placement Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL Generated Column Expressions\nDescription: A schema designer dynamically creates generated columns with unsafe expression concatenation, allowing injection through virtual column definitions.\nDifficulty: Hard\nVuln: MySQL Virtual Column Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Generated Column Expressions\", \"Lab Description\": \"A schema designer dynamically creates generated columns with unsafe expression concatenation, allowing injection through virtual column definitions.\", \"Vulnerability name\": \"MySQL Virtual Column Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Graph MATCH Path Filters\nDescription: A social network application builds graph queries with unsanitized node property filters, allowing injection during relationship traversal.\nDifficulty: Medium\nVuln: SQL Graph Traversal Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Graph MATCH Path Filters\", \"Lab Description\": \"A social network application builds graph queries with unsanitized node property filters, allowing injection during relationship traversal.\", \"Vulnerability name\": \"SQL Graph Traversal Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL COPY TO PROGRAM Commands\nDescription: A data export feature unsafely incorporates user input into COPY TO PROGRAM statements, enabling OS command execution.\nDifficulty: Hard\nVuln: PostgreSQL COPY Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL COPY TO PROGRAM Commands\", \"Lab Description\": \"A data export feature unsafely incorporates user input into COPY TO PROGRAM statements, enabling OS command execution.\", \"Vulnerability name\": \"PostgreSQL COPY Command Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle Text INDEX PARAMETERS\nDescription: A document search system unsafely builds Oracle Text index parameters, allowing injection during index creation.\nDifficulty: Medium\nVuln: Oracle Text Parameter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle Text INDEX PARAMETERS\", \"Lab Description\": \"A document search system unsafely builds Oracle Text index parameters, allowing injection during index creation.\", \"Vulnerability name\": \"Oracle Text Parameter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Column Definitions\nDescription: A cloud ETL pipeline dynamically defines external table columns with unsanitized input, allowing injection during schema inference.\nDifficulty: Medium\nVuln: Snowflake External Schema Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Column Definitions\", \"Lab Description\": \"A cloud ETL pipeline dynamically defines external table columns with unsanitized input, allowing injection during schema inference.\", \"Vulnerability name\": \"Snowflake External Schema Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery JSON_EXTRACT_SCALAR Path Parameters\nDescription: A JSON processing feature unsafely incorporates user input into JSON path expressions, allowing injection during document parsing.\nDifficulty: Easy\nVuln: BigQuery JSON Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery JSON_EXTRACT_SCALAR Path Parameters\", \"Lab Description\": \"A JSON processing feature unsafely incorporates user input into JSON path expressions, allowing injection during document parsing.\", \"Vulnerability name\": \"BigQuery JSON Path Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse CETAS WITH Clauses\nDescription: A data warehouse exports tables with dynamic WITH options, allowing injection during external table creation.\nDifficulty: Hard\nVuln: Synapse CETAS Option Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse CETAS WITH Clauses\", \"Lab Description\": \"A data warehouse exports tables with dynamic WITH options, allowing injection during external table creation.\", \"Vulnerability name\": \"Synapse CETAS Option Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Databricks Notebook Widget Default Values\nDescription: An interactive notebook incorporates unsanitized widget defaults into SQL cells, allowing injection through UI parameters.\nDifficulty: Easy\nVuln: Databricks Widget Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Notebook Widget Default Values\", \"Lab Description\": \"An interactive notebook incorporates unsanitized widget defaults into SQL cells, allowing injection through UI parameters.\", \"Vulnerability name\": \"Databricks Widget Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift UNLOAD IAM_ROLE Parameters\nDescription: A data export feature unsafely incorporates user input into UNLOAD statements, allowing IAM role manipulation.\nDifficulty: Hard\nVuln: Redshift IAM Role Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift UNLOAD IAM_ROLE Parameters\", \"Lab Description\": \"A data export feature unsafely incorporates user input into UNLOAD statements, allowing IAM role manipulation.\", \"Vulnerability name\": \"Redshift IAM Role Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT Clauses\nDescription: A schema migration tool unsafely builds INTERLEAVE clauses, allowing injection during table relationship creation.\nDifficulty: Medium\nVuln: Spanner Interleave Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner INTERLEAVE IN PARENT Clauses\", \"Lab Description\": \"A schema migration tool unsafely builds INTERLEAVE clauses, allowing injection during table relationship creation.\", \"Vulnerability name\": \"Spanner Interleave Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Azure Data Explorer Kusto Function Bodies\nDescription: A query optimization system dynamically creates Kusto functions with unsanitized bodies, allowing injection during execution.\nDifficulty: Medium\nVuln: Kusto Function Body Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Data Explorer Kusto Function Bodies\", \"Lab Description\": \"A query optimization system dynamically creates Kusto functions with unsanitized bodies, allowing injection during execution.\", \"Vulnerability name\": \"Kusto Function Body Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Connection Strings\nDescription: A reporting tool builds ODBC connections with unsanitized input, allowing injection during driver initialization.\nDifficulty: Easy\nVuln: Elasticsearch ODBC Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Connection Strings\", \"Lab Description\": \"A reporting tool builds ODBC connections with unsanitized input, allowing injection during driver initialization.\", \"Vulnerability name\": \"Elasticsearch ODBC Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Escaping\nDescription: A dashboard builder improperly escapes Druid SQL identifiers, allowing injection through quoted table names.\nDifficulty: Medium\nVuln: Druid Identifier Escape Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Escaping\", \"Lab Description\": \"A dashboard builder improperly escapes Druid SQL identifiers, allowing injection through quoted table names.\", \"Vulnerability name\": \"Druid Identifier Escape Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux Yield Names\nDescription: A monitoring system dynamically names Flux query yields, allowing injection during result processing.\nDifficulty: Easy\nVuln: Flux Yield Name Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux Yield Names\", \"Lab Description\": \"A monitoring system dynamically names Flux query yields, allowing injection during result processing.\", \"Vulnerability name\": \"Flux Yield Name Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Continuous Aggregate Policies\nDescription: A time-series platform configures aggregation policies with unsanitized input, allowing injection during materialization.\nDifficulty: Hard\nVuln: Timescale Policy Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Continuous Aggregate Policies\", \"Lab Description\": \"A time-series platform configures aggregation policies with unsanitized input, allowing injection during materialization.\", \"Vulnerability name\": \"Timescale Policy Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB Partial Index Predicates\nDescription: A performance optimization feature unsafely creates partial indexes, allowing injection through WHERE clauses.\nDifficulty: Medium\nVuln: Cockroach Partial Index Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB Partial Index Predicates\", \"Lab Description\": \"A performance optimization feature unsafely creates partial indexes, allowing injection through WHERE clauses.\", \"Vulnerability name\": \"Cockroach Partial Index Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in DuckDB S3 Endpoint Configuration\nDescription: A data pipeline configures S3 endpoints with unsanitized input, allowing injection during cloud storage operations.\nDifficulty: Easy\nVuln: DuckDB S3 Endpoint Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB S3 Endpoint Configuration\", \"Lab Description\": \"A data pipeline configures S3 endpoints with unsanitized input, allowing injection during cloud storage operations.\", \"Vulnerability name\": \"DuckDB S3 Endpoint Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Materialized View Refresh Options\nDescription: A data warehouse refreshes materialized views with dynamic options, allowing injection during data reload.\nDifficulty: Medium\nVuln: Materialized View Refresh Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View Refresh Options\", \"Lab Description\": \"A data warehouse refreshes materialized views with dynamic options, allowing injection during data reload.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger View Options\nDescription: A blockchain application creates ledger views with dynamic options, allowing injection during cryptographic verification.\nDifficulty: Hard\nVuln: SQL Ledger View Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger View Options\", \"Lab Description\": \"A blockchain application creates ledger views with dynamic options, allowing injection during cryptographic verification.\", \"Vulnerability name\": \"SQL Ledger View Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Wildcard Table Suffixes\nDescription: A data analytics tool uses wildcard tables with dynamic suffixes, allowing injection during table expansion.\nDifficulty: Medium\nVuln: BigQuery Wildcard Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Wildcard Table Suffixes\", \"Lab Description\": \"A data analytics tool uses wildcard tables with dynamic suffixes, allowing injection during table expansion.\", \"Vulnerability name\": \"BigQuery Wildcard Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Snowflake Session Parameter Defaults\nDescription: A configuration system sets session parameters with dynamic defaults, allowing injection during session initialization.\nDifficulty: Medium\nVuln: Snowflake Session Default Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake Session Parameter Defaults\", \"Lab Description\": \"A configuration system sets session parameters with dynamic defaults, allowing injection during session initialization.\", \"Vulnerability name\": \"Snowflake Session Default Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks SQL Warehouse Configurations\nDescription: A cluster management system configures warehouses with dynamic parameters, allowing injection during cluster startup.\nDifficulty: Hard\nVuln: Databricks Warehouse Config Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks SQL Warehouse Configurations\", \"Lab Description\": \"A cluster management system configures warehouses with dynamic parameters, allowing injection during cluster startup.\", \"Vulnerability name\": \"Databricks Warehouse Config Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Trino Function Namespace Paths\nDescription: A UDF registration system dynamically specifies function namespaces, allowing injection during function creation.\nDifficulty: Medium\nVuln: Trino Namespace Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Trino Function Namespace Paths\", \"Lab Description\": \"A UDF registration system dynamically specifies function namespaces, allowing injection during function creation.\", \"Vulnerability name\": \"Trino Namespace Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Presto Table Function Arguments\nDescription: A query system uses table functions with dynamic arguments, allowing injection during function execution.\nDifficulty: Hard\nVuln: Presto Table Function Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Presto Table Function Arguments\", \"Lab Description\": \"A query system uses table functions with dynamic arguments, allowing injection during function execution.\", \"Vulnerability name\": \"Presto Table Function Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in ClickHouse Dictionary Source URLs\nDescription: A data loading system configures dictionaries with dynamic source URLs, allowing injection during dictionary loading.\nDifficulty: Medium\nVuln: ClickHouse Dictionary URL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in ClickHouse Dictionary Source URLs\", \"Lab Description\": \"A data loading system configures dictionaries with dynamic source URLs, allowing injection during dictionary loading.\", \"Vulnerability name\": \"ClickHouse Dictionary URL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in SingleStore Columnstore Compression\nDescription: A columnar storage system configures compression with dynamic parameters, allowing injection during table optimization.\nDifficulty: Hard\nVuln: SingleStore Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SingleStore Columnstore Compression\", \"Lab Description\": \"A columnar storage system configures compression with dynamic parameters, allowing injection during table optimization.\", \"Vulnerability name\": \"SingleStore Compression Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in YugabyteDB CDC Stream Filters\nDescription: A change data capture system creates streams with dynamic filters, allowing injection during change event generation.\nDifficulty: Medium\nVuln: Yugabyte CDC Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in YugabyteDB CDC Stream Filters\", \"Lab Description\": \"A change data capture system creates streams with dynamic filters, allowing injection during change event generation.\", \"Vulnerability name\": \"Yugabyte CDC Filter Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CrateDB Fulltext Analyzer Definitions\nDescription: A search system creates custom analyzers with dynamic configurations, allowing injection during text processing.\nDifficulty: Hard\nVuln: CrateDB Analyzer Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CrateDB Fulltext Analyzer Definitions\", \"Lab Description\": \"A search system creates custom analyzers with dynamic configurations, allowing injection during text processing.\", \"Vulnerability name\": \"CrateDB Analyzer Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TiDB Placement Policy Constraints\nDescription: A distributed database configures placement policies with dynamic constraints, allowing injection during replica distribution.\nDifficulty: Hard\nVuln: TiDB Placement Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TiDB Placement Policy Constraints\", \"Lab Description\": \"A distributed database configures placement policies with dynamic constraints, allowing injection during replica distribution.\", \"Vulnerability name\": \"TiDB Placement Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in PostgreSQL CREATE TEXT SEARCH TEMPLATE\nDescription: A search system dynamically creates text search templates with unsafe lexize function parameters, allowing code execution during document processing.\nDifficulty: Hard\nVuln: PostgreSQL Search Template Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in PostgreSQL CREATE TEXT SEARCH TEMPLATE\", \"Lab Description\": \"A search system dynamically creates text search templates with unsafe lexize function parameters, allowing code execution during document processing.\", \"Vulnerability name\": \"PostgreSQL Search Template Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in MySQL Clone Plugin Data Filtering\nDescription: A database cloning tool incorporates user input into CLONE DATA FILTER clauses without sanitization, allowing injection during clone operations.\nDifficulty: Hard\nVuln: MySQL Clone Filter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in MySQL Clone Plugin Data Filtering\", \"Lab Description\": \"A database cloning tool incorporates user input into CLONE DATA FILTER clauses without sanitization, allowing injection during clone operations.\", \"Vulnerability name\": \"MySQL Clone Filter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in SQL Server Ledger History Retention\nDescription: A blockchain application dynamically configures ledger history retention periods without proper sanitization, allowing tampering with immutable records.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Server Ledger History Retention\", \"Lab Description\": \"A blockchain application dynamically configures ledger history retention periods without proper sanitization, allowing tampering with immutable records.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Oracle SDO_NET Memory Parameters\nDescription: A spatial network application dynamically configures memory parameters for network analysis without proper sanitization, allowing arbitrary PL/SQL execution.\nDifficulty: Easy\nVuln: Oracle Spatial Network Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Oracle SDO_NET Memory Parameters\", \"Lab Description\": \"A spatial network application dynamically configures memory parameters for network analysis without proper sanitization, allowing arbitrary PL/SQL execution.\", \"Vulnerability name\": \"Oracle Spatial Network Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowflake External Table Refresh Paths\nDescription: A cloud pipeline refreshes external tables with dynamically constructed storage paths without proper sanitization, allowing access to unauthorized storage locations.\nDifficulty: Medium\nVuln: Snowflake External Path Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowflake External Table Refresh Paths\", \"Lab Description\": \"A cloud pipeline refreshes external tables with dynamically constructed storage paths without proper sanitization, allowing access to unauthorized storage locations.\", \"Vulnerability name\": \"Snowflake External Path Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in BigQuery Remote Model Connection Strings\nDescription: A machine learning system dynamically constructs connection strings for remote models without proper sanitization, allowing Vertex AI endpoint manipulation.\nDifficulty: Easy\nVuln: BigQuery Model Connection Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in BigQuery Remote Model Connection Strings\", \"Lab Description\": \"A machine learning system dynamically constructs connection strings for remote models without proper sanitization, allowing Vertex AI endpoint manipulation.\", \"Vulnerability name\": \"BigQuery Model Connection Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Synapse Spark Notebook Magic Parameters\nDescription: An interactive notebook incorporates user input into magic command parameters without sanitization, allowing cross-language code execution.\nDifficulty: Easy\nVuln: Synapse Magic Command Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Synapse Spark Notebook Magic Parameters\", \"Lab Description\": \"An interactive notebook incorporates user input into magic command parameters without sanitization, allowing cross-language code execution.\", \"Vulnerability name\": \"Synapse Magic Command Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Amazon Redshift ML Model Hyperparameters\nDescription: A predictive analytics system dynamically constructs model hyperparameters without proper sanitization, allowing training data access.\nDifficulty: Hard\nVuln: Redshift ML Hyperparameter Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Amazon Redshift ML Model Hyperparameters\", \"Lab Description\": \"A predictive analytics system dynamically constructs model hyperparameters without proper sanitization, allowing training data access.\", \"Vulnerability name\": \"Redshift ML Hyperparameter Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in Google Cloud Spanner Change Stream Value Capture\nDescription: A CDC system dynamically configures change stream value capture types without proper sanitization, allowing data exfiltration.\nDifficulty: Medium\nVuln: Spanner Value Capture Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Google Cloud Spanner Change Stream Value Capture\", \"Lab Description\": \"A CDC system dynamically configures change stream value capture types without proper sanitization, allowing data exfiltration.\", \"Vulnerability name\": \"Spanner Value Capture Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Databricks Unity Catalog Sharing Recipients\nDescription: A data sharing platform dynamically adds recipients to Delta Shares without proper sanitization, allowing ACL bypass.\nDifficulty: Easy\nVuln: Unity Catalog Sharing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Databricks Unity Catalog Sharing Recipients\", \"Lab Description\": \"A data sharing platform dynamically adds recipients to Delta Shares without proper sanitization, allowing ACL bypass.\", \"Vulnerability name\": \"Unity Catalog Sharing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Snowpark Java UDF Class Paths\nDescription: A Snowpark application dynamically specifies Java UDF classpaths without proper sanitization, allowing arbitrary code execution.\nDifficulty: Easy\nVuln: Snowpark Java UDF Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Snowpark Java UDF Class Paths\", \"Lab Description\": \"A Snowpark application dynamically specifies Java UDF classpaths without proper sanitization, allowing arbitrary code execution.\", \"Vulnerability name\": \"Snowpark Java UDF Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Azure Cosmos DB Stored Procedure Continuations\nDescription: A NoSQL application dynamically constructs continuation tokens in stored procedures without proper sanitization, allowing pagination control.\nDifficulty: Medium\nVuln: CosmosDB Continuation Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Azure Cosmos DB Stored Procedure Continuations\", \"Lab Description\": \"A NoSQL application dynamically constructs continuation tokens in stored procedures without proper sanitization, allowing pagination control.\", \"Vulnerability name\": \"CosmosDB Continuation Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Elasticsearch SQL ODBC Driver Properties\nDescription: An analytics tool dynamically constructs ODBC connection properties without proper sanitization, allowing index access.\nDifficulty: Easy\nVuln: Elasticsearch ODBC Property Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Elasticsearch SQL ODBC Driver Properties\", \"Lab Description\": \"An analytics tool dynamically constructs ODBC connection properties without proper sanitization, allowing index access.\", \"Vulnerability name\": \"Elasticsearch ODBC Property Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in Apache Druid SQL Identifier Case Forcing\nDescription: A dashboard tool dynamically forces identifier casing without proper sanitization, allowing query manipulation.\nDifficulty: Easy\nVuln: Druid Case Forcing Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Apache Druid SQL Identifier Case Forcing\", \"Lab Description\": \"A dashboard tool dynamically forces identifier casing without proper sanitization, allowing query manipulation.\", \"Vulnerability name\": \"Druid Case Forcing Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in InfluxDB Flux HTTP Request Headers\nDescription: A monitoring system dynamically constructs HTTP request headers in Flux without proper sanitization, allowing internal endpoint access.\nDifficulty: Hard\nVuln: Flux HTTP Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in InfluxDB Flux HTTP Request Headers\", \"Lab Description\": \"A monitoring system dynamically constructs HTTP request headers in Flux without proper sanitization, allowing internal endpoint access.\", \"Vulnerability name\": \"Flux HTTP Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in TimescaleDB Compression Segmentby Columns\nDescription: A time-series database dynamically configures compression segment columns without proper sanitization, allowing data access.\nDifficulty: Medium\nVuln: Timescale Compression Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in TimescaleDB Compression Segmentby Columns\", \"Lab Description\": \"A time-series database dynamically configures compression segment columns without proper sanitization, allowing data access.\", \"Vulnerability name\": \"Timescale Compression Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in CockroachDB CDC Webhook Headers\nDescription: A change data capture system dynamically constructs webhook headers without proper sanitization, allowing request manipulation.\nDifficulty: Hard\nVuln: Cockroach Webhook Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in CockroachDB CDC Webhook Headers\", \"Lab Description\": \"A change data capture system dynamically constructs webhook headers without proper sanitization, allowing request manipulation.\", \"Vulnerability name\": \"Cockroach Webhook Header Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SQL Injection in DuckDB HTTPFS Extension Headers\nDescription: A data pipeline dynamically configures HTTP request headers in DuckDB without proper sanitization, allowing credential theft.\nDifficulty: Medium\nVuln: DuckDB HTTPFS Header Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in DuckDB HTTPFS Extension Headers\", \"Lab Description\": \"A data pipeline dynamically configures HTTP request headers in DuckDB without proper sanitization, allowing credential theft.\", \"Vulnerability name\": \"DuckDB HTTPFS Header Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SQL Injection in Materialized View WITH NO DATA Clause\nDescription: A data warehouse dynamically controls materialized view loading without proper sanitization, allowing data access.\nDifficulty: Easy\nVuln: Materialized View Refresh Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in Materialized View WITH NO DATA Clause\", \"Lab Description\": \"A data warehouse dynamically controls materialized view loading without proper sanitization, allowing data access.\", \"Vulnerability name\": \"Materialized View Refresh Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: SQL Injection in SQL Ledger History Retention\nDescription: A blockchain application dynamically configures ledger retention without proper sanitization, allowing history tampering.\nDifficulty: Hard\nVuln: SQL Ledger Retention Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SQL Injection in SQL Ledger History Retention\", \"Lab Description\": \"A blockchain application dynamically configures ledger retention without proper sanitization, allowing history tampering.\", \"Vulnerability name\": \"SQL Ledger Retention Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking application dynamically sorts transaction history based on user input without sanitizing the 'sort' parameter. This enables SQL injection via ORDER BY manipulation. The application echoes detailed SQL errors when invalid sorting fields are requested. To solve: Extract full table information by abusing ORDER BY injection vulnerabilities.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking application dynamically sorts transaction history based on user input without sanitizing the 'sort' parameter. This enables SQL injection via ORDER BY manipulation. The application echoes detailed SQL errors when invalid sorting fields are requested. To solve: Extract full table information by abusing ORDER BY injection vulnerabilities.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in GROUP BY Clause\nDescription: The CMS uses unfiltered user-provided category IDs to group blog posts. Improperly handled GROUP BY inputs allow SQL injection. The verbose logging system exposes internal query structure during errors. To solve: Leak administrative tokens from a hidden 'admin_tokens' table via GROUP BY injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS uses unfiltered user-provided category IDs to group blog posts. Improperly handled GROUP BY inputs allow SQL injection. The verbose logging system exposes internal query structure during errors. To solve: Leak administrative tokens from a hidden 'admin_tokens' table via GROUP BY injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard aggregates device statistics and filters them through a vulnerable HAVING clause. Lack of input sanitization in device metrics allows an attacker to inject SQL through manipulated thresholds. To solve: Dump sensitive firmware update URLs stored within a hidden settings table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard aggregates device statistics and filters them through a vulnerable HAVING clause. Lack of input sanitization in device metrics allows an attacker to inject SQL through manipulated thresholds. To solve: Dump sensitive firmware update URLs stored within a hidden settings table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in HAVING Clause\nDescription: The CMS admin panel aggregates page views, filtering them through a vulnerable HAVING clause without sanitization. This allows attackers to inject SQL commands to control aggregation behavior. To solve: Exploit the HAVING clause to leak internal admin credentials via a UNION-based payload.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS admin panel aggregates page views, filtering them through a vulnerable HAVING clause without sanitization. This allows attackers to inject SQL commands to control aggregation behavior. To solve: Exploit the HAVING clause to leak internal admin credentials via a UNION-based payload.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: An API Gateway sorts user-supplied data directly in SQL ORDER BY clauses. No parameterization exists, exposing raw queries to injection risks. When invalid columns are referenced, verbose API error messages are returned. To solve: Manipulate ORDER BY to expose hidden 'admin_logs' data.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"An API Gateway sorts user-supplied data directly in SQL ORDER BY clauses. No parameterization exists, exposing raw queries to injection risks. When invalid columns are referenced, verbose API error messages are returned. To solve: Manipulate ORDER BY to expose hidden 'admin_logs' data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking application groups user transaction types based on input from a 'group' parameter. Lack of validation enables SQL injection within GROUP BY. The system displays database error messages when grouping fails. To solve: Extract and enumerate privileged account types using GROUP BY injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking application groups user transaction types based on input from a 'group' parameter. Lack of validation enables SQL injection within GROUP BY. The system displays database error messages when grouping fails. To solve: Extract and enumerate privileged account types using GROUP BY injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard orders sensor data based on user-supplied field names without sanitization. This allows ORDER BY SQL injection through crafted requests. To solve: Extract sensitive device keys stored in a hidden 'iot_keys' table via injected ORDER BY clauses.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard orders sensor data based on user-supplied field names without sanitization. This allows ORDER BY SQL injection through crafted requests. To solve: Extract sensitive device keys stored in a hidden 'iot_keys' table via injected ORDER BY clauses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in HAVING Clause\nDescription: The CMS aggregates comment statistics and filters them through a vulnerable HAVING clause. Improperly validated comment count filters expose SQL injection risks. To solve: Dump the CMS user session table by exploiting the HAVING clause via Boolean-based and time-based techniques.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS aggregates comment statistics and filters them through a vulnerable HAVING clause. Improperly validated comment count filters expose SQL injection risks. To solve: Dump the CMS user session table by exploiting the HAVING clause via Boolean-based and time-based techniques.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in GROUP BY Clause\nDescription: An API Gateway aggregates logs grouped by user agent strings. User-supplied input is passed directly into the GROUP BY clause without sanitization. Verbose error messages reveal SQL parsing issues. To solve: Inject payloads to retrieve internal log files stored in the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in GROUP BY Clause\", \"Lab Description\": \"An API Gateway aggregates logs grouped by user agent strings. User-supplied input is passed directly into the GROUP BY clause without sanitization. Verbose error messages reveal SQL parsing issues. To solve: Inject payloads to retrieve internal log files stored in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT platform aggregates average sensor readings using a vulnerable HAVING filter controlled by the user. Improper sanitization enables advanced HAVING clause injections. To solve: Leak internal device firmware versions by crafting UNION payloads exploiting aggregation logic.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT platform aggregates average sensor readings using a vulnerable HAVING filter controlled by the user. Improper sanitization enables advanced HAVING clause injections. To solve: Leak internal device firmware versions by crafting UNION payloads exploiting aggregation logic.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal sorts user transactions based on dynamic parameters with no input validation. This enables ORDER BY clause SQL injection, causing errors or data leakage. To solve: Exploit the ORDER BY injection to enumerate database schema and exfiltrate high-value account information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal sorts user transactions based on dynamic parameters with no input validation. This enables ORDER BY clause SQL injection, causing errors or data leakage. To solve: Exploit the ORDER BY injection to enumerate database schema and exfiltrate high-value account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard's device analytics feature groups device status reports without proper sanitization of user input. Attackers can exploit this to perform GROUP BY SQL injection. To solve: Extract hidden device metadata by leveraging GROUP BY clause injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard's device analytics feature groups device status reports without proper sanitization of user input. Attackers can exploit this to perform GROUP BY SQL injection. To solve: Extract hidden device metadata by leveraging GROUP BY clause injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in ORDER BY Clause\nDescription: A CMS allows users to sort blog posts based on custom input without input validation, leading to ORDER BY clause SQL injection. To solve: Exploit the injection to retrieve hidden administrative user accounts and related login details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in ORDER BY Clause\", \"Lab Description\": \"A CMS allows users to sort blog posts based on custom input without input validation, leading to ORDER BY clause SQL injection. To solve: Exploit the injection to retrieve hidden administrative user accounts and related login details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: An API Gateway aggregates event statistics and allows filtering using vulnerable HAVING clauses. Lack of input sanitization exposes SQL injection opportunities. To solve: Leak internal access tokens stored in hidden tables by manipulating HAVING filters.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"An API Gateway aggregates event statistics and allows filtering using vulnerable HAVING clauses. Lack of input sanitization exposes SQL injection opportunities. To solve: Leak internal access tokens stored in hidden tables by manipulating HAVING filters.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT platform sorts device logs based on client input, but input is directly embedded in ORDER BY clauses. Lack of validation results in SQL injection vulnerability. To solve: Exfiltrate network credentials by exploiting sorting functionality.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT platform sorts device logs based on client input, but input is directly embedded in ORDER BY clauses. Lack of validation results in SQL injection vulnerability. To solve: Exfiltrate network credentials by exploiting sorting functionality.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal allows customers to sort transaction history based on URL parameters directly inserted into an ORDER BY clause. The input is not sanitized or whitelisted, exposing a SQL injection vector. Attackers can manipulate the sort parameter to trigger database errors, enumerate columns, and eventually retrieve sensitive information such as admin account credentials. To solve: Perform ORDER BY-based SQL injection to leak database structure and extract privileged user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal allows customers to sort transaction history based on URL parameters directly inserted into an ORDER BY clause. The input is not sanitized or whitelisted, exposing a SQL injection vector. Attackers can manipulate the sort parameter to trigger database errors, enumerate columns, and eventually retrieve sensitive information such as admin account credentials. To solve: Perform ORDER BY-based SQL injection to leak database structure and extract privileged user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT monitoring dashboard aggregates device statistics, allowing dynamic grouping via user-controlled parameters. Improper handling of input within the GROUP BY clause allows injection attacks. By manipulating the group parameter, attackers can leak internal database structure related to devices, such as firmware versions and OS metadata. To solve: Perform GROUP BY SQL injection to reveal hidden attributes of connected IoT devices.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT monitoring dashboard aggregates device statistics, allowing dynamic grouping via user-controlled parameters. Improper handling of input within the GROUP BY clause allows injection attacks. By manipulating the group parameter, attackers can leak internal database structure related to devices, such as firmware versions and OS metadata. To solve: Perform GROUP BY SQL injection to reveal hidden attributes of connected IoT devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in ORDER BY Clause\nDescription: A Content Management System (CMS) platform provides blog sorting features where the sort parameter is concatenated directly into an SQL ORDER BY clause. No input validation or allowlisting is performed. Exploiting this, attackers can craft ORDER BY injection payloads to enumerate sensitive database tables and retrieve admin user login information. To solve: Manipulate the sort parameter to leak user data via UNION-based injection.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in ORDER BY Clause\", \"Lab Description\": \"A Content Management System (CMS) platform provides blog sorting features where the sort parameter is concatenated directly into an SQL ORDER BY clause. No input validation or allowlisting is performed. Exploiting this, attackers can craft ORDER BY injection payloads to enumerate sensitive database tables and retrieve admin user login information. To solve: Manipulate the sort parameter to leak user data via UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API Gateway's event aggregation endpoint filters event data using user-controlled thresholds embedded into a HAVING clause. No input sanitization exists, exposing a SQL injection path. Attackers can inject into the HAVING condition to execute arbitrary queries, bypass authentication layers, and extract OAuth tokens. To solve: Exploit the HAVING clause to leak sensitive access tokens and elevate API privileges.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API Gateway's event aggregation endpoint filters event data using user-controlled thresholds embedded into a HAVING clause. No input sanitization exists, exposing a SQL injection path. Attackers can inject into the HAVING condition to execute arbitrary queries, bypass authentication layers, and extract OAuth tokens. To solve: Exploit the HAVING clause to leak sensitive access tokens and elevate API privileges.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows sorting of device logs based on user-supplied parameters, which are directly embedded in the ORDER BY clause without validation. Attackers can inject malicious input to manipulate the sorting SQL query, leading to exfiltration of Wi-Fi credentials and device secrets. To solve: Craft ORDER BY clause payloads that leak device network credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows sorting of device logs based on user-supplied parameters, which are directly embedded in the ORDER BY clause without validation. Attackers can inject malicious input to manipulate the sorting SQL query, leading to exfiltration of Wi-Fi credentials and device secrets. To solve: Craft ORDER BY clause payloads that leak device network credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal's fraud analytics endpoint groups transactions and applies user-defined filters via a HAVING clause. Inputs are directly interpolated into the SQL query, enabling injection. Attackers can inject logical operations and delay functions (e.g., SLEEP()) to perform blind inference attacks. MySQL-specific error messages (e.g., 'Operand should contain 1 column(s)') provide hints during exploitation. To solve: Perform blind SQLi exploiting the HAVING filter to extract account balances and manipulate risk scoring.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal's fraud analytics endpoint groups transactions and applies user-defined filters via a HAVING clause. Inputs are directly interpolated into the SQL query, enabling injection. Attackers can inject logical operations and delay functions (e.g., SLEEP()) to perform blind inference attacks. MySQL-specific error messages (e.g., 'Operand should contain 1 column(s)') provide hints during exploitation. To solve: Perform blind SQLi exploiting the HAVING filter to extract account balances and manipulate risk scoring.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard groups smart sensor data based on user-supplied fields without input validation, interpolated into a GROUP BY clause. Improper handling leads to injection risks allowing attackers to extract sensitive device configurations. Specific error messages like 'Unknown column' can help in blind enumeration. To solve: Manipulate group parameters to dump Wi-Fi SSID and secret keys stored in the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard groups smart sensor data based on user-supplied fields without input validation, interpolated into a GROUP BY clause. Improper handling leads to injection risks allowing attackers to extract sensitive device configurations. Specific error messages like 'Unknown column' can help in blind enumeration. To solve: Manipulate group parameters to dump Wi-Fi SSID and secret keys stored in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS Platform SQL Injection in HAVING Clause\nDescription: The CMS platform's content ranking system uses a vulnerable HAVING clause to filter blog posts by popularity scores. User input is embedded without validation. Exploiting the input, attackers can inject subqueries and sleep functions to escalate into blind SQL injection. The backend MySQL server leaks syntax errors, aiding payload refinement. To solve: Execute HAVING clause injections to extract administrator session tokens.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS platform's content ranking system uses a vulnerable HAVING clause to filter blog posts by popularity scores. User input is embedded without validation. Exploiting the input, attackers can inject subqueries and sleep functions to escalate into blind SQL injection. The backend MySQL server leaks syntax errors, aiding payload refinement. To solve: Execute HAVING clause injections to extract administrator session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API gateway allows clients to sort API responses dynamically based on query parameters directly embedded in ORDER BY clauses. Absence of sanitization introduces SQL injection vulnerabilities. Attackers can manipulate sort fields to execute arbitrary queries and extract hidden customer metadata. Specific behaviors like MySQL's 'You have an error in your SQL syntax' aid in payload tuning. To solve: Perform ORDER BY SQLi to dump client records.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API gateway allows clients to sort API responses dynamically based on query parameters directly embedded in ORDER BY clauses. Absence of sanitization introduces SQL injection vulnerabilities. Attackers can manipulate sort fields to execute arbitrary queries and extract hidden customer metadata. Specific behaviors like MySQL's 'You have an error in your SQL syntax' aid in payload tuning. To solve: Perform ORDER BY SQLi to dump client records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal groups customer transactions by custom-defined fields without input validation. The GROUP BY clause is dynamically assembled from client-side inputs. Malformed inputs result in MySQL-specific 'Unknown column' errors. Attackers can exploit this to inject UNION queries and retrieve sensitive customer transaction logs. To solve: Abuse the group parameter to exfiltrate bank account activity.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal groups customer transactions by custom-defined fields without input validation. The GROUP BY clause is dynamically assembled from client-side inputs. Malformed inputs result in MySQL-specific 'Unknown column' errors. Attackers can exploit this to inject UNION queries and retrieve sensitive customer transaction logs. To solve: Abuse the group parameter to exfiltrate bank account activity.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Healthcare App SQL Injection via HAVING Clause (PostgreSQL)\nDescription: The healthcare platform's patient analytics module aggregates medical test results. A user-supplied severity score is passed into a vulnerable HAVING clause without input validation. In PostgreSQL, error messages like 'column must appear in the GROUP BY clause' leak useful information. Attackers can exploit this flaw to enumerate patients and exfiltrate health record identifiers. To solve: Exploit HAVING clause injection to dump patient IDs.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare App SQL Injection via HAVING Clause (PostgreSQL)\", \"Lab Description\": \"The healthcare platform's patient analytics module aggregates medical test results. A user-supplied severity score is passed into a vulnerable HAVING clause without input validation. In PostgreSQL, error messages like 'column must appear in the GROUP BY clause' leak useful information. Attackers can exploit this flaw to enumerate patients and exfiltrate health record identifiers. To solve: Exploit HAVING clause injection to dump patient IDs.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-commerce Site SQL Injection in ORDER BY Clause (Microsoft SQL Server)\nDescription: The e-commerce site's product catalog allows users to sort by dynamic fields passed directly into an ORDER BY clause. Due to lack of sanitization, Microsoft SQL Server-specific error messages like 'Incorrect syntax near' leak query structure. Attackers can inject ORDER BY payloads to manipulate query flow and steal credit card tokens. To solve: Abuse ORDER BY injection to leak sensitive customer payment info.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Site SQL Injection in ORDER BY Clause (Microsoft SQL Server)\", \"Lab Description\": \"The e-commerce site's product catalog allows users to sort by dynamic fields passed directly into an ORDER BY clause. Due to lack of sanitization, Microsoft SQL Server-specific error messages like 'Incorrect syntax near' leak query structure. Attackers can inject ORDER BY payloads to manipulate query flow and steal credit card tokens. To solve: Abuse ORDER BY injection to leak sensitive customer payment info.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Cloud File Storage SQL Injection in GROUP BY Clause\nDescription: The cloud storage system categorizes uploaded files by metadata such as file type or owner ID. The field parameter is inserted into the GROUP BY clause without sanitization. Attackers can perform injections, exploiting MySQL 'Unknown column' errors for blind enumeration. To solve: Exploit GROUP BY SQL injection to retrieve file owner identities.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Cloud File Storage SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The cloud storage system categorizes uploaded files by metadata such as file type or owner ID. The field parameter is inserted into the GROUP BY clause without sanitization. Attackers can perform injections, exploiting MySQL 'Unknown column' errors for blind enumeration. To solve: Exploit GROUP BY SQL injection to retrieve file owner identities.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Financial API SQL Injection in HAVING Clause (PostgreSQL)\nDescription: The financial platform's reporting API filters transactions by user-defined conditions embedded into a HAVING clause. PostgreSQL-specific 'division by zero' errors leak backend behavior when malformed inputs are injected. Attackers can use this flaw to enumerate transaction metadata. To solve: Exploit HAVING clause SQLi to leak customer account details.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Financial API SQL Injection in HAVING Clause (PostgreSQL)\", \"Lab Description\": \"The financial platform's reporting API filters transactions by user-defined conditions embedded into a HAVING clause. PostgreSQL-specific 'division by zero' errors leak backend behavior when malformed inputs are injected. Attackers can use this flaw to enumerate transaction metadata. To solve: Exploit HAVING clause SQLi to leak customer account details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CRM System SQL Injection in ORDER BY Clause\nDescription: The CRM system's client management module allows dynamic sorting by passing user-controlled fields into ORDER BY without validation. Attackers exploit this by injecting malicious field names, using MySQL-specific error behaviors to tune payloads. To solve: Inject ORDER BY SQLi to exfiltrate sensitive client contact information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CRM System SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CRM system's client management module allows dynamic sorting by passing user-controlled fields into ORDER BY without validation. Attackers exploit this by injecting malicious field names, using MySQL-specific error behaviors to tune payloads. To solve: Inject ORDER BY SQLi to exfiltrate sensitive client contact information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Device Dashboard SQL Injection via ORDER BY in API Query\nDescription: The IoT management dashboard exposes a RESTful API for listing devices. The 'sort' parameter is directly injected into an ORDER BY clause. Lack of filtering allows attackers to inject malicious SQL segments. Combined with verbose MySQL errors, this enables pivoting from blind injections to credential leakage. To solve: Perform ORDER BY injection, leak device credentials, and gain dashboard access.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device Dashboard SQL Injection via ORDER BY in API Query\", \"Lab Description\": \"The IoT management dashboard exposes a RESTful API for listing devices. The 'sort' parameter is directly injected into an ORDER BY clause. Lack of filtering allows attackers to inject malicious SQL segments. Combined with verbose MySQL errors, this enables pivoting from blind injections to credential leakage. To solve: Perform ORDER BY injection, leak device credentials, and gain dashboard access.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL API SQL Injection via Field Resolver (MySQL)\nDescription: The GraphQL backend resolves user-provided fields in a dynamic query without sanitization. Attackers can inject SQL fragments through crafted GraphQL queries, pivoting from blind inference to full UNION SELECT extractions. To solve: Inject into GraphQL resolver, leak email addresses from the users table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL API SQL Injection via Field Resolver (MySQL)\", \"Lab Description\": \"The GraphQL backend resolves user-provided fields in a dynamic query without sanitization. Attackers can inject SQL fragments through crafted GraphQL queries, pivoting from blind inference to full UNION SELECT extractions. To solve: Inject into GraphQL resolver, leak email addresses from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking API SOAP Request SQL Injection via Group Filtering\nDescription: The banking web service exposes SOAP APIs for batch transaction analysis. User-defined filters are passed into GROUP BY clauses without sanitization, leading to blind SQLi possibilities. SOAPFault error responses reveal back-end structure during failed injections. To solve: Inject into SOAP filter, enumerate account balances.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API SOAP Request SQL Injection via Group Filtering\", \"Lab Description\": \"The banking web service exposes SOAP APIs for batch transaction analysis. User-defined filters are passed into GROUP BY clauses without sanitization, leading to blind SQLi possibilities. SOAPFault error responses reveal back-end structure during failed injections. To solve: Inject into SOAP filter, enumerate account balances.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Smart Home API SQL Injection via HAVING Clause Enumeration\nDescription: The smart home API uses a user-controlled threshold parameter inside a HAVING clause to filter device activity logs. No input validation allows attackers to exploit HAVING-based blind SQL injection using delayed responses and error leaks. To solve: Extract internal device network IDs through time-based inference.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Smart Home API SQL Injection via HAVING Clause Enumeration\", \"Lab Description\": \"The smart home API uses a user-controlled threshold parameter inside a HAVING clause to filter device activity logs. No input validation allows attackers to exploit HAVING-based blind SQL injection using delayed responses and error leaks. To solve: Extract internal device network IDs through time-based inference.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Search Feature SQL Injection in ORDER BY Field\nDescription: A popular CMS allows users to sort blog posts dynamically. The 'order' field is inserted unsafely into an ORDER BY clause, leading to direct SQL injection. Attackers exploit this to dump administrator credentials and perform privilege escalation. To solve: Exploit ORDER BY SQLi to steal CMS administrator passwords.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Search Feature SQL Injection in ORDER BY Field\", \"Lab Description\": \"A popular CMS allows users to sort blog posts dynamically. The 'order' field is inserted unsafely into an ORDER BY clause, leading to direct SQL injection. Attackers exploit this to dump administrator credentials and perform privilege escalation. To solve: Exploit ORDER BY SQLi to steal CMS administrator passwords.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Device Management API - Basic OOB SQL Injection via Device Name\nDescription: The IoT device registration API fails to sanitize the device name parameter before interpolating it into an SQL INSERT query. An attacker can perform Out-of-Band (OOB) SQL Injection by forcing the server to make DNS lookups to leak sensitive information like database usernames. Solve this lab by exfiltrating the database user through a DNS-based OOB payload.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device Management API - Basic OOB SQL Injection via Device Name\", \"Lab Description\": \"The IoT device registration API fails to sanitize the device name parameter before interpolating it into an SQL INSERT query. An attacker can perform Out-of-Band (OOB) SQL Injection by forcing the server to make DNS lookups to leak sensitive information like database usernames. Solve this lab by exfiltrating the database user through a DNS-based OOB payload.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: E-commerce Platform OAuth - Token Introspection OOB SQL Injection\nDescription: The e-commerce OAuth introspection endpoint is vulnerable to SQL Injection due to unsafe handling of access token input. Attackers can inject payloads that initiate DNS-based OOB data exfiltration during token validation. Solve this lab by forging a malicious token that causes the server to leak the database name over DNS.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Platform OAuth - Token Introspection OOB SQL Injection\", \"Lab Description\": \"The e-commerce OAuth introspection endpoint is vulnerable to SQL Injection due to unsafe handling of access token input. Attackers can inject payloads that initiate DNS-based OOB data exfiltration during token validation. Solve this lab by forging a malicious token that causes the server to leak the database name over DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Education Platform GraphQL API - Advanced Argument OOB SQL Injection\nDescription: The 'userProfile' query in a GraphQL API dynamically builds SQL statements from user input without sanitization. Attackers can exploit this to inject SQL payloads causing OOB DNS interactions, leaking sensitive user credentials. Solve this lab by leaking the adminâ€™s hashed password via an OOB DNS payload injected through GraphQL.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Education Platform GraphQL API - Advanced Argument OOB SQL Injection\", \"Lab Description\": \"The 'userProfile' query in a GraphQL API dynamically builds SQL statements from user input without sanitization. Attackers can exploit this to inject SQL payloads causing OOB DNS interactions, leaking sensitive user credentials. Solve this lab by leaking the adminâ€™s hashed password via an OOB DNS payload injected through GraphQL.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Device Management - OOB SQL Injection via Device Registration\nDescription: An IoT device registration API accepts device names and directly interpolates them into SQL INSERT statements. Attackers can inject payloads triggering DNS lookups or HTTP callbacks to exfiltrate data over OOB channels. To solve: Trigger a DNS exfiltration attack and leak database user info.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device Management - OOB SQL Injection via Device Registration\", \"Lab Description\": \"An IoT device registration API accepts device names and directly interpolates them into SQL INSERT statements. Attackers can inject payloads triggering DNS lookups or HTTP callbacks to exfiltrate data over OOB channels. To solve: Trigger a DNS exfiltration attack and leak database user info.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking OAuth Endpoint - SQL Injection with Access Token Pivot to OOB\nDescription: The OAuth token introspection endpoint constructs SQL queries using unsanitized token IDs. Exploiting this, attackers inject OOB payloads during token validation and exfiltrate sensitive banking data. To solve: Submit a malicious access token to trigger an OOB DNS lookup revealing bank admin credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking OAuth Endpoint - SQL Injection with Access Token Pivot to OOB\", \"Lab Description\": \"The OAuth token introspection endpoint constructs SQL queries using unsanitized token IDs. Exploiting this, attackers inject OOB payloads during token validation and exfiltrate sensitive banking data. To solve: Submit a malicious access token to trigger an OOB DNS lookup revealing bank admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL User Profile API - OOB SQLi via Argument Injection\nDescription: The GraphQL 'userProfile' query dynamically builds SQL queries using user arguments. Attackers craft arguments that trigger DNS callbacks, leaking sensitive fields like password hashes through OOB channels. To solve: Perform GraphQL-based OOB SQL injection and leak the password hash of the admin account.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL User Profile API - OOB SQLi via Argument Injection\", \"Lab Description\": \"The GraphQL 'userProfile' query dynamically builds SQL queries using user arguments. Attackers craft arguments that trigger DNS callbacks, leaking sensitive fields like password hashes through OOB channels. To solve: Perform GraphQL-based OOB SQL injection and leak the password hash of the admin account.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Admin Panel - OOB SQL Injection via File Upload Metadata\nDescription: The CMS's file upload functionality saves metadata like 'title' directly into database queries without validation. Attackers can upload a file with a malicious title triggering OOB SQL queries to leak admin session tokens. To solve: Upload a poisoned file to trigger an OOB attack and capture session tokens.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Admin Panel - OOB SQL Injection via File Upload Metadata\", \"Lab Description\": \"The CMS's file upload functionality saves metadata like 'title' directly into database queries without validation. Attackers can upload a file with a malicious title triggering OOB SQL queries to leak admin session tokens. To solve: Upload a poisoned file to trigger an OOB attack and capture session tokens.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Online Education Platform - OOB SQL Injection via Search Suggestions\nDescription: The online education platform provides dynamic course search suggestions. The search term is inserted unsafely into SQL LIKE queries. Attackers can craft payloads to cause DNS lookups that leak database version and admin emails. To solve: Inject OOB payloads via the search feature to leak sensitive backend details.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Education Platform - OOB SQL Injection via Search Suggestions\", \"Lab Description\": \"The online education platform provides dynamic course search suggestions. The search term is inserted unsafely into SQL LIKE queries. Attackers can craft payloads to cause DNS lookups that leak database version and admin emails. To solve: Inject OOB payloads via the search feature to leak sensitive backend details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - Basic SQL Injection in Account Balance Endpoint\nDescription: The banking portal's account balance endpoint directly inserts user-supplied account IDs into an SQL query without sanitization. Attackers can inject malicious SQL code that causes an OOB DNS request, exfiltrating sensitive data like the database's user credentials. Solve this by crafting a payload that triggers the DNS exfiltration of the database user.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Basic SQL Injection in Account Balance Endpoint\", \"Lab Description\": \"The banking portal's account balance endpoint directly inserts user-supplied account IDs into an SQL query without sanitization. Attackers can inject malicious SQL code that causes an OOB DNS request, exfiltrating sensitive data like the database's user credentials. Solve this by crafting a payload that triggers the DNS exfiltration of the database user.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Transaction History Endpoint\nDescription: The banking API's transaction history endpoint dynamically constructs SQL queries using unvalidated user inputs. Attackers can inject SQL payloads to trigger OOB DNS lookups, potentially leaking sensitive transaction data. Solve this lab by injecting a payload that causes a DNS request to exfiltrate transaction details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Transaction History Endpoint\", \"Lab Description\": \"The banking API's transaction history endpoint dynamically constructs SQL queries using unvalidated user inputs. Attackers can inject SQL payloads to trigger OOB DNS lookups, potentially leaking sensitive transaction data. Solve this lab by injecting a payload that causes a DNS request to exfiltrate transaction details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - Advanced SQL Injection with Account Number Validation\nDescription: The banking portalâ€™s account number validation endpoint improperly sanitizes inputs. Attackers can inject OOB payloads, leading to the exfiltration of sensitive data like the bank's internal email addresses. Solve this lab by injecting a payload that triggers an OOB DNS request and leaks the bankâ€™s internal admin email address.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Advanced SQL Injection with Account Number Validation\", \"Lab Description\": \"The banking portalâ€™s account number validation endpoint improperly sanitizes inputs. Attackers can inject OOB payloads, leading to the exfiltration of sensitive data like the bank's internal email addresses. Solve this lab by injecting a payload that triggers an OOB DNS request and leaks the bankâ€™s internal admin email address.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Login Endpoint\nDescription: The banking portalâ€™s login endpoint improperly handles user inputs in the authentication query. Attackers can inject SQL payloads to bypass authentication, trigger OOB DNS requests, and exfiltrate sensitive user information. Solve this lab by injecting a payload that causes the database to leak the admin password hash through an OOB DNS query.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Login Endpoint\", \"Lab Description\": \"The banking portalâ€™s login endpoint improperly handles user inputs in the authentication query. Attackers can inject SQL payloads to bypass authentication, trigger OOB DNS requests, and exfiltrate sensitive user information. Solve this lab by injecting a payload that causes the database to leak the admin password hash through an OOB DNS query.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Transfer Funds Endpoint\nDescription: The banking APIâ€™s fund transfer endpoint dynamically constructs SQL queries without sanitizing user inputs, allowing attackers to inject payloads. These payloads can be exploited to exfiltrate sensitive information, such as account numbers or balance information, through DNS-based OOB attacks. Solve this lab by injecting a malicious payload to leak database structure and account balances.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Transfer Funds Endpoint\", \"Lab Description\": \"The banking APIâ€™s fund transfer endpoint dynamically constructs SQL queries without sanitizing user inputs, allowing attackers to inject payloads. These payloads can be exploited to exfiltrate sensitive information, such as account numbers or balance information, through DNS-based OOB attacks. Solve this lab by injecting a malicious payload to leak database structure and account balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Application - Advanced SQL Injection in Loan Approval API\nDescription: The banking loan approval API fails to properly sanitize inputs. An attacker can inject complex SQL queries that bypass loan eligibility checks, and then trigger an OOB DNS request to leak sensitive financial data like loan applicant details. Solve this lab by injecting a payload that forces the application to leak internal financial information over DNS.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Application - Advanced SQL Injection in Loan Approval API\", \"Lab Description\": \"The banking loan approval API fails to properly sanitize inputs. An attacker can inject complex SQL queries that bypass loan eligibility checks, and then trigger an OOB DNS request to leak sensitive financial data like loan applicant details. Solve this lab by injecting a payload that forces the application to leak internal financial information over DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Customer Feedback Submission\nDescription: The customer feedback submission endpoint in the banking portal fails to sanitize inputs, allowing for SQL Injection attacks. By injecting SQL payloads, attackers can leak sensitive customer feedback data using DNS-based OOB requests. Solve this by injecting a payload to exfiltrate customer feedback data.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Customer Feedback Submission\", \"Lab Description\": \"The customer feedback submission endpoint in the banking portal fails to sanitize inputs, allowing for SQL Injection attacks. By injecting SQL payloads, attackers can leak sensitive customer feedback data using DNS-based OOB requests. Solve this by injecting a payload to exfiltrate customer feedback data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Details Endpoint\nDescription: The banking API exposes account details through an endpoint that constructs SQL queries directly from user input. Attackers can inject SQL payloads that allow OOB DNS exfiltration of account data. Solve this lab by injecting a payload to leak account details such as balance or transaction history via DNS.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Details Endpoint\", \"Lab Description\": \"The banking API exposes account details through an endpoint that constructs SQL queries directly from user input. Attackers can inject SQL payloads that allow OOB DNS exfiltration of account data. Solve this lab by injecting a payload to leak account details such as balance or transaction history via DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Application - SQL Injection in Fund Transfer Validation\nDescription: The banking application allows users to transfer funds between accounts, but the transaction validation endpoint does not sanitize inputs. By injecting SQL payloads, attackers can cause the application to leak sensitive transaction data using OOB DNS requests. Solve this by injecting a payload that triggers DNS requests containing transaction details.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Application - SQL Injection in Fund Transfer Validation\", \"Lab Description\": \"The banking application allows users to transfer funds between accounts, but the transaction validation endpoint does not sanitize inputs. By injecting SQL payloads, attackers can cause the application to leak sensitive transaction data using OOB DNS requests. Solve this by injecting a payload that triggers DNS requests containing transaction details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Application Search\nDescription: The banking portal allows users to search for loan applications, but it constructs SQL queries based on user input without sanitization. Attackers can inject SQL payloads that result in DNS-based OOB data exfiltration of loan application information. Solve this lab by crafting a payload that leaks loan applicant data.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Application Search\", \"Lab Description\": \"The banking portal allows users to search for loan applications, but it constructs SQL queries based on user input without sanitization. Attackers can inject SQL payloads that result in DNS-based OOB data exfiltration of loan application information. Solve this lab by crafting a payload that leaks loan applicant data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Transaction Logs Retrieval\nDescription: The banking API has an endpoint for retrieving transaction logs, but the endpoint is vulnerable to SQL Injection. Attackers can inject SQL payloads to extract sensitive transaction data, including amounts, account details, and dates, through DNS-based OOB requests. Solve this lab by injecting a payload to leak transaction logs.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Transaction Logs Retrieval\", \"Lab Description\": \"The banking API has an endpoint for retrieving transaction logs, but the endpoint is vulnerable to SQL Injection. Attackers can inject SQL payloads to extract sensitive transaction data, including amounts, account details, and dates, through DNS-based OOB requests. Solve this lab by injecting a payload to leak transaction logs.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Approval System\nDescription: The banking portal contains a loan approval system that fails to sanitize user input in loan application forms. An attacker can inject SQL payloads into the loan amount or borrower ID fields. The attacker can exfiltrate sensitive loan data using OOB DNS requests. The goal is to craft a payload that exfiltrates loan approval data such as loan amounts and borrower names.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Approval System\", \"Lab Description\": \"The banking portal contains a loan approval system that fails to sanitize user input in loan application forms. An attacker can inject SQL payloads into the loan amount or borrower ID fields. The attacker can exfiltrate sensitive loan data using OOB DNS requests. The goal is to craft a payload that exfiltrates loan approval data such as loan amounts and borrower names.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Profile Page\nDescription: The banking portal's user profile page is vulnerable to SQL Injection through an unprotected user ID query. The user ID is used directly in the SQL query to retrieve the profile. Attackers can inject SQL to exfiltrate sensitive user data, such as account details and transaction history, via OOB DNS requests. The challenge is to craft an injection that leaks user profile data.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Profile Page\", \"Lab Description\": \"The banking portal's user profile page is vulnerable to SQL Injection through an unprotected user ID query. The user ID is used directly in the SQL query to retrieve the profile. Attackers can inject SQL to exfiltrate sensitive user data, such as account details and transaction history, via OOB DNS requests. The challenge is to craft an injection that leaks user profile data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The banking portal allows users to view their transaction history, but fails to sanitize inputs. An attacker can inject SQL payloads into the request parameters, exfiltrating sensitive data (such as transaction IDs, amounts, and sender/receiver details) via OOB DNS requests. The task is to inject SQL payloads to exfiltrate the transaction history.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The banking portal allows users to view their transaction history, but fails to sanitize inputs. An attacker can inject SQL payloads into the request parameters, exfiltrating sensitive data (such as transaction IDs, amounts, and sender/receiver details) via OOB DNS requests. The task is to inject SQL payloads to exfiltrate the transaction history.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Balance API\nDescription: The banking API exposes account balance data to users through an unprotected endpoint, where the account number is directly inserted into an SQL query. Attackers can use SQL injection to manipulate the query, causing the server to leak account balance information through DNS-based OOB exfiltration. The challenge is to craft a SQL injection payload to exfiltrate sensitive account balance information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Balance API\", \"Lab Description\": \"The banking API exposes account balance data to users through an unprotected endpoint, where the account number is directly inserted into an SQL query. Attackers can use SQL injection to manipulate the query, causing the server to leak account balance information through DNS-based OOB exfiltration. The challenge is to craft a SQL injection payload to exfiltrate sensitive account balance information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Update Endpoint\nDescription: The banking API has an endpoint for updating user account details, but fails to sanitize inputs. Attackers can inject SQL payloads into the update request, causing the server to leak sensitive information such as account number and user details through DNS-based OOB requests. The goal is to craft a SQL injection payload to leak account data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Update Endpoint\", \"Lab Description\": \"The banking API has an endpoint for updating user account details, but fails to sanitize inputs. Attackers can inject SQL payloads into the update request, causing the server to leak sensitive information such as account number and user details through DNS-based OOB requests. The goal is to craft a SQL injection payload to leak account data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Creation\nDescription: The banking portal allows new users to create accounts, but fails to sanitize input fields, making it vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields. The goal is to inject payloads that exfiltrate sensitive user data, such as newly created account details and passwords, via DNS-based OOB exfiltration.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Creation\", \"Lab Description\": \"The banking portal allows new users to create accounts, but fails to sanitize input fields, making it vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields. The goal is to inject payloads that exfiltrate sensitive user data, such as newly created account details and passwords, via DNS-based OOB exfiltration.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Interest Calculation\nDescription: The banking portal calculates loan interest using parameters submitted via the loan application form. The system is vulnerable to SQL Injection, allowing attackers to modify the query and leak interest rate calculations, loan amounts, and associated user data via OOB DNS requests. The goal is to inject a payload that exposes loan interest rates.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Interest Calculation\", \"Lab Description\": \"The banking portal calculates loan interest using parameters submitted via the loan application form. The system is vulnerable to SQL Injection, allowing attackers to modify the query and leak interest rate calculations, loan amounts, and associated user data via OOB DNS requests. The goal is to inject a payload that exposes loan interest rates.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Login\nDescription: The login page of the banking portal is vulnerable to SQL Injection due to improper handling of user credentials in the SQL query. Attackers can inject payloads into the username and password fields to retrieve sensitive account details or bypass authentication entirely using UNION-based injection. The task is to exploit this vulnerability to exfiltrate account details.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Login\", \"Lab Description\": \"The login page of the banking portal is vulnerable to SQL Injection due to improper handling of user credentials in the SQL query. Attackers can inject payloads into the username and password fields to retrieve sensitive account details or bypass authentication entirely using UNION-based injection. The task is to exploit this vulnerability to exfiltrate account details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Transfer\nDescription: The banking portalâ€™s account transfer feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the transfer amount or recipient account number fields. This vulnerability allows an attacker to steal funds or leak account information. The goal is to craft a payload that exfiltrates transfer data via OOB DNS requests.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Transfer\", \"Lab Description\": \"The banking portalâ€™s account transfer feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the transfer amount or recipient account number fields. This vulnerability allows an attacker to steal funds or leak account information. The goal is to craft a payload that exfiltrates transfer data via OOB DNS requests.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Account Info API\nDescription: The banking API has an endpoint that retrieves user account information, but fails to sanitize inputs. An attacker can inject SQL payloads into the account number field, leading to SQL Injection vulnerabilities. The goal is to exfiltrate sensitive account information, such as balance and transaction history, using OOB DNS exfiltration.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Account Info API\", \"Lab Description\": \"The banking API has an endpoint that retrieves user account information, but fails to sanitize inputs. An attacker can inject SQL payloads into the account number field, leading to SQL Injection vulnerabilities. The goal is to exfiltrate sensitive account information, such as balance and transaction history, using OOB DNS exfiltration.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The banking portal has an endpoint that displays a userâ€™s transaction history based on the user ID. The endpoint is vulnerable to SQL Injection due to improper sanitization of input. An attacker can inject SQL payloads into the user ID parameter to extract sensitive transaction details. The goal is to craft an injection that exfiltrates the entire transaction history of a target account via OOB DNS.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The banking portal has an endpoint that displays a userâ€™s transaction history based on the user ID. The endpoint is vulnerable to SQL Injection due to improper sanitization of input. An attacker can inject SQL payloads into the user ID parameter to extract sensitive transaction details. The goal is to craft an injection that exfiltrates the entire transaction history of a target account via OOB DNS.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Profile Update\nDescription: The profile update form in the banking portal is vulnerable to SQL Injection due to improper input sanitization. The form accepts user inputs like address, phone number, and email, which are directly inserted into a SQL query without sanitization. The goal is to exploit the SQL Injection vulnerability to modify other user profiles or retrieve sensitive data.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Profile Update\", \"Lab Description\": \"The profile update form in the banking portal is vulnerable to SQL Injection due to improper input sanitization. The form accepts user inputs like address, phone number, and email, which are directly inserted into a SQL query without sanitization. The goal is to exploit the SQL Injection vulnerability to modify other user profiles or retrieve sensitive data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking API - SQL Injection in Fund Transfer API\nDescription: The API endpoint responsible for fund transfers is vulnerable to SQL Injection. An attacker can manipulate the source account number and transfer amount parameters in the URL query string to exfiltrate sensitive data or steal funds. The goal is to exploit this vulnerability to steal funds or retrieve sensitive user information.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API - SQL Injection in Fund Transfer API\", \"Lab Description\": \"The API endpoint responsible for fund transfers is vulnerable to SQL Injection. An attacker can manipulate the source account number and transfer amount parameters in the URL query string to exfiltrate sensitive data or steal funds. The goal is to exploit this vulnerability to steal funds or retrieve sensitive user information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Fund Withdrawal\nDescription: The banking portal is vulnerable to SQL Injection in the withdrawal form. The withdrawal amount and account number fields are susceptible to SQL injection, allowing an attacker to exfiltrate account details or modify the withdrawal amount. The goal is to inject a payload that either exfiltrates sensitive information or authorizes a withdrawal from a target account.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Fund Withdrawal\", \"Lab Description\": \"The banking portal is vulnerable to SQL Injection in the withdrawal form. The withdrawal amount and account number fields are susceptible to SQL injection, allowing an attacker to exfiltrate account details or modify the withdrawal amount. The goal is to inject a payload that either exfiltrates sensitive information or authorizes a withdrawal from a target account.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Credit Card Payment\nDescription: The payment form on the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the credit card number field or payment amount field to retrieve sensitive credit card details or bypass payment authentication. The goal is to extract sensitive credit card data using SQL Injection.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Credit Card Payment\", \"Lab Description\": \"The payment form on the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the credit card number field or payment amount field to retrieve sensitive credit card details or bypass payment authentication. The goal is to extract sensitive credit card data using SQL Injection.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Balance Check API\nDescription: The balance check API endpoint is vulnerable to SQL Injection. The user ID parameter is directly passed into the SQL query without proper sanitization. This vulnerability allows attackers to extract sensitive account balance information for any user. The goal is to inject SQL payloads that allow exfiltration of account balance data for multiple users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Balance Check API\", \"Lab Description\": \"The balance check API endpoint is vulnerable to SQL Injection. The user ID parameter is directly passed into the SQL query without proper sanitization. This vulnerability allows attackers to extract sensitive account balance information for any user. The goal is to inject SQL payloads that allow exfiltration of account balance data for multiple users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Application Form\nDescription: The loan application form in the banking portal is vulnerable to SQL Injection. The application allows users to input their loan amount and account number. The lack of input validation allows attackers to inject malicious SQL queries into these fields. The goal is to extract personal information and account details of other users by injecting SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Application Form\", \"Lab Description\": \"The loan application form in the banking portal is vulnerable to SQL Injection. The application allows users to input their loan amount and account number. The lack of input validation allows attackers to inject malicious SQL queries into these fields. The goal is to extract personal information and account details of other users by injecting SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Registration\nDescription: The account registration form is vulnerable to SQL Injection due to improper sanitization of user inputs. The attacker can inject malicious SQL code into fields such as the username or email to bypass account creation logic and retrieve existing account information. The goal is to exfiltrate existing account information through SQL injection in the registration form.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Registration\", \"Lab Description\": \"The account registration form is vulnerable to SQL Injection due to improper sanitization of user inputs. The attacker can inject malicious SQL code into fields such as the username or email to bypass account creation logic and retrieve existing account information. The goal is to exfiltrate existing account information through SQL injection in the registration form.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transfer History\nDescription: The transfer history page on the banking portal is vulnerable to SQL Injection. The page queries transfer records by user ID but does not properly sanitize the user input. An attacker can manipulate the user ID parameter to access another userâ€™s transfer history or exfiltrate data. The goal is to exploit this vulnerability to extract sensitive transfer information of other users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transfer History\", \"Lab Description\": \"The transfer history page on the banking portal is vulnerable to SQL Injection. The page queries transfer records by user ID but does not properly sanitize the user input. An attacker can manipulate the user ID parameter to access another userâ€™s transfer history or exfiltrate data. The goal is to exploit this vulnerability to extract sensitive transfer information of other users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Password Reset API\nDescription: The password reset API is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the email or username parameters, bypassing the intended password reset flow and extracting sensitive user data, such as email addresses and user names. The goal is to retrieve user data and potentially reset the passwords for targeted accounts.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Password Reset API\", \"Lab Description\": \"The password reset API is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the email or username parameters, bypassing the intended password reset flow and extracting sensitive user data, such as email addresses and user names. The goal is to retrieve user data and potentially reset the passwords for targeted accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Authentication\nDescription: The login endpoint is vulnerable to SQL Injection. The application directly injects the username and password parameters into an SQL query without proper sanitization. This flaw allows attackers to bypass authentication by injecting SQL payloads. The goal is to exploit this vulnerability to log in as an admin user without valid credentials.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Authentication\", \"Lab Description\": \"The login endpoint is vulnerable to SQL Injection. The application directly injects the username and password parameters into an SQL query without proper sanitization. This flaw allows attackers to bypass authentication by injecting SQL payloads. The goal is to exploit this vulnerability to log in as an admin user without valid credentials.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transfer Money API\nDescription: The transfer money API in the banking portal is vulnerable to SQL Injection. The amount and account number parameters are directly inserted into the SQL query, making it easy for attackers to manipulate the transaction logic. The goal is to transfer funds to an attacker-controlled account by injecting malicious SQL payloads into the amount or account number fields.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transfer Money API\", \"Lab Description\": \"The transfer money API in the banking portal is vulnerable to SQL Injection. The amount and account number parameters are directly inserted into the SQL query, making it easy for attackers to manipulate the transaction logic. The goal is to transfer funds to an attacker-controlled account by injecting malicious SQL payloads into the amount or account number fields.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Settings\nDescription: The user settings page allows users to update their personal details, but the application is vulnerable to SQL Injection. The settings API updates parameters like the user's email or phone number without sanitizing the input, allowing attackers to manipulate user data. The goal is to extract or modify sensitive user information, such as account numbers, by injecting SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Settings\", \"Lab Description\": \"The user settings page allows users to update their personal details, but the application is vulnerable to SQL Injection. The settings API updates parameters like the user's email or phone number without sanitizing the input, allowing attackers to manipulate user data. The goal is to extract or modify sensitive user information, such as account numbers, by injecting SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin Dashboard\nDescription: The admin dashboard is vulnerable to SQL Injection through a search field used to find transactions by user ID. The application does not validate user inputs, making it possible to inject SQL code into the search query. The goal is to bypass authentication and access sensitive transaction records for any user through SQL injection.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin Dashboard\", \"Lab Description\": \"The admin dashboard is vulnerable to SQL Injection through a search field used to find transactions by user ID. The application does not validate user inputs, making it possible to inject SQL code into the search query. The goal is to bypass authentication and access sensitive transaction records for any user through SQL injection.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction Status Check\nDescription: The transaction status check API is vulnerable to SQL Injection. An attacker can exploit the lack of sanitization in the transaction ID parameter to exfiltrate transaction details from the database. The goal is to use SQL Injection to retrieve the status and details of multiple transactions by injecting malicious payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction Status Check\", \"Lab Description\": \"The transaction status check API is vulnerable to SQL Injection. An attacker can exploit the lack of sanitization in the transaction ID parameter to exfiltrate transaction details from the database. The goal is to use SQL Injection to retrieve the status and details of multiple transactions by injecting malicious payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction Search\nDescription: The transaction search feature is vulnerable to SQL Injection. The search field does not properly sanitize the transaction ID parameter. Attackers can use this vulnerability to extract transaction records from the database. The goal is to use SQL injection to retrieve all transactions made by any user, including sensitive details like account numbers and balances.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction Search\", \"Lab Description\": \"The transaction search feature is vulnerable to SQL Injection. The search field does not properly sanitize the transaction ID parameter. Attackers can use this vulnerability to extract transaction records from the database. The goal is to use SQL injection to retrieve all transactions made by any user, including sensitive details like account numbers and balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Balance Check\nDescription: The account balance check feature in the banking portal is vulnerable to SQL Injection. The parameter used to retrieve the balance is not properly sanitized, allowing attackers to inject SQL payloads. The goal is to retrieve the balance of any user and modify it by injecting malicious SQL commands.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Balance Check\", \"Lab Description\": \"The account balance check feature in the banking portal is vulnerable to SQL Injection. The parameter used to retrieve the balance is not properly sanitized, allowing attackers to inject SQL payloads. The goal is to retrieve the balance of any user and modify it by injecting malicious SQL commands.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Funds Transfer Page\nDescription: The funds transfer page in the banking portal has a SQL Injection vulnerability. The page allows users to transfer funds, but the application directly inserts the amount and recipient account number into the SQL query. Attackers can inject SQL payloads to redirect funds to an attacker-controlled account. The goal is to manipulate the transaction to steal funds.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Funds Transfer Page\", \"Lab Description\": \"The funds transfer page in the banking portal has a SQL Injection vulnerability. The page allows users to transfer funds, but the application directly inserts the amount and recipient account number into the SQL query. Attackers can inject SQL payloads to redirect funds to an attacker-controlled account. The goal is to manipulate the transaction to steal funds.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin View of User Accounts\nDescription: The admin view that lists user accounts is vulnerable to SQL Injection. The admin can search for user accounts by name or ID, but this functionality is not properly sanitized. Attackers can inject SQL payloads into the search field to extract all user details, including account numbers, transaction history, and balances.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin View of User Accounts\", \"Lab Description\": \"The admin view that lists user accounts is vulnerable to SQL Injection. The admin can search for user accounts by name or ID, but this functionality is not properly sanitized. Attackers can inject SQL payloads into the search field to extract all user details, including account numbers, transaction history, and balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Approval API\nDescription: The loan approval API in the banking portal is vulnerable to SQL Injection. The API accepts user inputs like loan amount and ID without proper input validation, allowing attackers to inject SQL payloads. The goal is to manipulate the approval process and grant loans to unauthorized accounts by injecting malicious SQL commands.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Approval API\", \"Lab Description\": \"The loan approval API in the banking portal is vulnerable to SQL Injection. The API accepts user inputs like loan amount and ID without proper input validation, allowing attackers to inject SQL payloads. The goal is to manipulate the approval process and grant loans to unauthorized accounts by injecting malicious SQL commands.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Fund Transfer History\nDescription: The fund transfer history page is vulnerable to SQL Injection. The page retrieves the transfer records of a user based on the user ID parameter, which is not properly sanitized. Attackers can exploit this vulnerability to list all users' transfer records and even inject commands to alter the displayed data.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Fund Transfer History\", \"Lab Description\": \"The fund transfer history page is vulnerable to SQL Injection. The page retrieves the transfer records of a user based on the user ID parameter, which is not properly sanitized. Attackers can exploit this vulnerability to list all users' transfer records and even inject commands to alter the displayed data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Credit Card Info Retrieval\nDescription: The credit card information retrieval feature is vulnerable to SQL Injection. The application retrieves credit card details based on the card number provided by the user. Attackers can inject SQL payloads into the card number field to retrieve all credit card information stored in the database.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Credit Card Info Retrieval\", \"Lab Description\": \"The credit card information retrieval feature is vulnerable to SQL Injection. The application retrieves credit card details based on the card number provided by the user. Attackers can inject SQL payloads into the card number field to retrieve all credit card information stored in the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Profile Update\nDescription: The user profile update page is vulnerable to SQL Injection. Users can update their profile information, but the application fails to properly validate the input fields. Attackers can inject SQL payloads into these fields to manipulate their profile or even gain unauthorized access to other users' profiles.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Profile Update\", \"Lab Description\": \"The user profile update page is vulnerable to SQL Injection. Users can update their profile information, but the application fails to properly validate the input fields. Attackers can inject SQL payloads into these fields to manipulate their profile or even gain unauthorized access to other users' profiles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin Panel\nDescription: The admin panel for managing users is vulnerable to SQL Injection. Admins can search for users by ID or name, but the search functionality does not sanitize inputs. Attackers can use this to extract all user data, including account numbers, balances, and transaction histories.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin Panel\", \"Lab Description\": \"The admin panel for managing users is vulnerable to SQL Injection. Admins can search for users by ID or name, but the search functionality does not sanitize inputs. Attackers can use this to extract all user data, including account numbers, balances, and transaction histories.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Loan Application Form\nDescription: The loan application form is vulnerable to SQL Injection. The form collects user details such as loan amount and personal information, but the application fails to validate these inputs properly. Attackers can inject SQL payloads to manipulate the loan process, allowing them to apply for loans without proper validation.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Loan Application Form\", \"Lab Description\": \"The loan application form is vulnerable to SQL Injection. The form collects user details such as loan amount and personal information, but the application fails to validate these inputs properly. Attackers can inject SQL payloads to manipulate the loan process, allowing them to apply for loans without proper validation.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The transaction history page is vulnerable to SQL Injection. Users can filter their transaction history by date, but the date field is not properly sanitized. Attackers can inject SQL payloads to access other users' transaction data or manipulate the transaction records.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The transaction history page is vulnerable to SQL Injection. Users can filter their transaction history by date, but the date field is not properly sanitized. Attackers can inject SQL payloads to access other users' transaction data or manipulate the transaction records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in User Login\nDescription: The user login form is vulnerable to SQL Injection. The application fails to properly sanitize the username and password fields. Attackers can inject SQL payloads to bypass authentication and gain unauthorized access to users' accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in User Login\", \"Lab Description\": \"The user login form is vulnerable to SQL Injection. The application fails to properly sanitize the username and password fields. Attackers can inject SQL payloads to bypass authentication and gain unauthorized access to users' accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Balance Check\nDescription: The account balance check page is vulnerable to SQL Injection. Users can view their account balance by providing their account number. Attackers can inject SQL payloads to retrieve other users' account balances or modify their own balance.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Balance Check\", \"Lab Description\": \"The account balance check page is vulnerable to SQL Injection. Users can view their account balance by providing their account number. Attackers can inject SQL payloads to retrieve other users' account balances or modify their own balance.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Payment Processing\nDescription: The payment processing page is vulnerable to SQL Injection. The application processes payments based on the amount and user ID parameters, but fails to sanitize the input. Attackers can inject SQL payloads to alter payment amounts or access unauthorized payment records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Payment Processing\", \"Lab Description\": \"The payment processing page is vulnerable to SQL Injection. The application processes payments based on the amount and user ID parameters, but fails to sanitize the input. Attackers can inject SQL payloads to alter payment amounts or access unauthorized payment records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Admin Panel User Management\nDescription: The admin panel for managing user accounts is vulnerable to SQL Injection. Admins can search for users by their ID or username. Attackers can exploit this vulnerability to extract all user information, including usernames, account balances, and transaction histories.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Admin Panel User Management\", \"Lab Description\": \"The admin panel for managing user accounts is vulnerable to SQL Injection. Admins can search for users by their ID or username. Attackers can exploit this vulnerability to extract all user information, including usernames, account balances, and transaction histories.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - Advanced SQL Injection in Transfer Funds\nDescription: The funds transfer feature of the banking portal allows users to transfer funds to other accounts using an account number. However, the application fails to sanitize input properly, allowing for SQL injection attacks. Attackers can bypass authentication, manipulate transfer amounts, and redirect funds to different accounts.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Advanced SQL Injection in Transfer Funds\", \"Lab Description\": \"The funds transfer feature of the banking portal allows users to transfer funds to other accounts using an account number. However, the application fails to sanitize input properly, allowing for SQL injection attacks. Attackers can bypass authentication, manipulate transfer amounts, and redirect funds to different accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in API Authentication\nDescription: The API gateway that handles user authentication is vulnerable to SQL Injection in the login endpoint. Attackers can inject malicious SQL payloads in the username or password fields to bypass authentication and obtain an authentication token, gaining unauthorized access to the API.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in API Authentication\", \"Lab Description\": \"The API gateway that handles user authentication is vulnerable to SQL Injection in the login endpoint. Attackers can inject malicious SQL payloads in the username or password fields to bypass authentication and obtain an authentication token, gaining unauthorized access to the API.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Control Panel\nDescription: The IoT device control panel is vulnerable to SQL Injection. Attackers can exploit this vulnerability by manipulating device IDs in the SQL query, allowing them to control devices that they do not own or view device data from other users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Control Panel\", \"Lab Description\": \"The IoT device control panel is vulnerable to SQL Injection. Attackers can exploit this vulnerability by manipulating device IDs in the SQL query, allowing them to control devices that they do not own or view device data from other users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Blog Post Retrieval\nDescription: The CMS used by the blog site is vulnerable to SQL Injection in the post retrieval functionality. Attackers can inject SQL payloads into the post ID parameter, allowing them to retrieve any post content from the database, including unpublished or private posts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Blog Post Retrieval\", \"Lab Description\": \"The CMS used by the blog site is vulnerable to SQL Injection in the post retrieval functionality. Attackers can inject SQL payloads into the post ID parameter, allowing them to retrieve any post content from the database, including unpublished or private posts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Comment Section\nDescription: The comment section of the CMS blog is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve admin user credentials or other sensitive information stored in the database.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Comment Section\", \"Lab Description\": \"The comment section of the CMS blog is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve admin user credentials or other sensitive information stored in the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Balance Check\nDescription: The banking portal allows users to check their account balance. However, due to improper input validation, attackers can inject SQL queries into the account number field to extract balance information from unauthorized accounts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Balance Check\", \"Lab Description\": \"The banking portal allows users to check their account balance. However, due to improper input validation, attackers can inject SQL queries into the account number field to extract balance information from unauthorized accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Configuration\nDescription: The IoT dashboard allows users to configure their devices. Due to improper input sanitization, an attacker can inject malicious SQL code into the device ID field, gaining control over other users' devices and retrieving sensitive data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Configuration\", \"Lab Description\": \"The IoT dashboard allows users to configure their devices. Due to improper input sanitization, an attacker can inject malicious SQL code into the device ID field, gaining control over other users' devices and retrieving sensitive data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in User Registration\nDescription: The user registration endpoint in the API gateway is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields to bypass registration checks and add malicious accounts to the database.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in User Registration\", \"Lab Description\": \"The user registration endpoint in the API gateway is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields to bypass registration checks and add malicious accounts to the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Search Functionality\nDescription: The CMS search feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the search query, allowing them to bypass filters and retrieve sensitive information from the database, such as user credentials or unpublished content.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Search Functionality\", \"Lab Description\": \"The CMS search feature is vulnerable to SQL Injection. An attacker can inject malicious SQL code into the search query, allowing them to bypass filters and retrieve sensitive information from the database, such as user credentials or unpublished content.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-Commerce Site - SQL Injection in Product Filters\nDescription: The e-commerce site's product filter functionality is vulnerable to SQL Injection. Attackers can inject SQL payloads into the filter parameters, allowing them to retrieve product details, manipulate prices, or bypass product visibility checks.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-Commerce Site - SQL Injection in Product Filters\", \"Lab Description\": \"The e-commerce site's product filter functionality is vulnerable to SQL Injection. Attackers can inject SQL payloads into the filter parameters, allowing them to retrieve product details, manipulate prices, or bypass product visibility checks.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Funds Transfer\nDescription: The funds transfer functionality in the banking portal is vulnerable to SQL Injection. An attacker can inject malicious SQL queries into the account number and amount fields, bypassing validation and transferring funds to unauthorized accounts.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Funds Transfer\", \"Lab Description\": \"The funds transfer functionality in the banking portal is vulnerable to SQL Injection. An attacker can inject malicious SQL queries into the account number and amount fields, bypassing validation and transferring funds to unauthorized accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS - SQL Injection in User Management\nDescription: The CMS has a user management system that allows administrators to add and remove users. Due to improper input sanitization, attackers can inject SQL queries into the user ID or role fields, modifying user privileges or deleting unauthorized accounts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in User Management\", \"Lab Description\": \"The CMS has a user management system that allows administrators to add and remove users. Due to improper input sanitization, attackers can inject SQL queries into the user ID or role fields, modifying user privileges or deleting unauthorized accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in Product Review\nDescription: The product review API in an e-commerce platform is vulnerable to SQL Injection. Attackers can inject malicious SQL queries into the review text or rating fields, allowing them to alter product ratings or view other users' reviews.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in Product Review\", \"Lab Description\": \"The product review API in an e-commerce platform is vulnerable to SQL Injection. Attackers can inject malicious SQL queries into the review text or rating fields, allowing them to alter product ratings or view other users' reviews.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Firmware Upload\nDescription: The IoT dashboard is vulnerable to SQL Injection in the device firmware upload feature. An attacker can inject SQL payloads into the device ID field, potentially compromising multiple devices or extracting firmware data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Firmware Upload\", \"Lab Description\": \"The IoT dashboard is vulnerable to SQL Injection in the device firmware upload feature. An attacker can inject SQL payloads into the device ID field, potentially compromising multiple devices or extracting firmware data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Statements\nDescription: The banking portal allows users to view their account statements. However, due to improper input sanitization, an attacker can inject SQL payloads into the account number field to access other users' statements and perform unauthorized operations.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Statements\", \"Lab Description\": \"The banking portal allows users to view their account statements. However, due to improper input sanitization, an attacker can inject SQL payloads into the account number field to access other users' statements and perform unauthorized operations.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in User Authentication\nDescription: The API gateway in a web application is vulnerable to SQL Injection in the user authentication process. An attacker can bypass the login process by injecting SQL payloads into the username or password fields, allowing access to the system.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in User Authentication\", \"Lab Description\": \"The API gateway in a web application is vulnerable to SQL Injection in the user authentication process. An attacker can bypass the login process by injecting SQL payloads into the username or password fields, allowing access to the system.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS - SQL Injection in Search Function\nDescription: A CMS has a search functionality that allows users to search for posts by title. The search query parameter is not properly sanitized, allowing attackers to inject SQL queries and retrieve sensitive information or manipulate results.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Search Function\", \"Lab Description\": \"A CMS has a search functionality that allows users to search for posts by title. The search query parameter is not properly sanitized, allowing attackers to inject SQL queries and retrieve sensitive information or manipulate results.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Transaction History\nDescription: The transaction history page in the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the transaction ID field, allowing them to view transactions of other users or manipulate transaction data.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The transaction history page in the banking portal is vulnerable to SQL Injection. An attacker can inject SQL payloads into the transaction ID field, allowing them to view transactions of other users or manipulate transaction data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Control Panel\nDescription: The IoT dashboard allows users to control their connected devices. However, the device control panel is vulnerable to SQL Injection. An attacker can inject SQL queries into device ID fields, potentially controlling or compromising IoT devices.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Control Panel\", \"Lab Description\": \"The IoT dashboard allows users to control their connected devices. However, the device control panel is vulnerable to SQL Injection. An attacker can inject SQL queries into device ID fields, potentially controlling or compromising IoT devices.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Transfer Logs\nDescription: The banking portal stores logs of account transfer activities, which are displayed to administrators. Due to insufficient input sanitization, attackers can inject SQL payloads into the transaction ID or user ID fields to manipulate logs and hide unauthorized transactions.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Transfer Logs\", \"Lab Description\": \"The banking portal stores logs of account transfer activities, which are displayed to administrators. Due to insufficient input sanitization, attackers can inject SQL payloads into the transaction ID or user ID fields to manipulate logs and hide unauthorized transactions.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS - SQL Injection in Comment Section\nDescription: The CMS has a comment section where users can leave feedback. However, the system fails to sanitize user input, allowing attackers to inject SQL queries into the comment field. This can lead to the exposure of sensitive data or system manipulation.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS - SQL Injection in Comment Section\", \"Lab Description\": \"The CMS has a comment section where users can leave feedback. However, the system fails to sanitize user input, allowing attackers to inject SQL queries into the comment field. This can lead to the exposure of sensitive data or system manipulation.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Account Login\nDescription: The banking portal's account login functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields, allowing unauthorized access to user accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Account Login\", \"Lab Description\": \"The banking portal's account login functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username or password fields, allowing unauthorized access to user accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API Gateway - SQL Injection in Product Search\nDescription: The product search feature of an e-commerce platform's API gateway is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve product data or access sensitive information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway - SQL Injection in Product Search\", \"Lab Description\": \"The product search feature of an e-commerce platform's API gateway is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve product data or access sensitive information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Fund Transfer\nDescription: The banking portal's fund transfer page is vulnerable to SQL Injection. An attacker can inject SQL queries into the transfer form, allowing unauthorized transactions or the leakage of account balances.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Fund Transfer\", \"Lab Description\": \"The banking portal's fund transfer page is vulnerable to SQL Injection. An attacker can inject SQL queries into the transfer form, allowing unauthorized transactions or the leakage of account balances.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard - SQL Injection in Device Settings\nDescription: The IoT dashboard has a device settings page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into device parameters, allowing them to manipulate device configurations or access sensitive device data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard - SQL Injection in Device Settings\", \"Lab Description\": \"The IoT dashboard has a device settings page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into device parameters, allowing them to manipulate device configurations or access sensitive device data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-commerce Platform - SQL Injection in Login Page\nDescription: The login page of the e-commerce platform is vulnerable to SQL Injection. Attackers can inject SQL payloads into the username or password fields to bypass authentication and gain unauthorized access to accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Platform - SQL Injection in Login Page\", \"Lab Description\": \"The login page of the e-commerce platform is vulnerable to SQL Injection. Attackers can inject SQL payloads into the username or password fields to bypass authentication and gain unauthorized access to accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API - SQL Injection in Search Endpoint\nDescription: An API endpoint used for searching products is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve unauthorized product data or manipulate the search results.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API - SQL Injection in Search Endpoint\", \"Lab Description\": \"An API endpoint used for searching products is vulnerable to SQL Injection. Attackers can inject SQL payloads into the search parameter to retrieve unauthorized product data or manipulate the search results.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - SQL Injection in Balance Check\nDescription: The banking portal has a balance check feature that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the balance check request to retrieve sensitive information like account balances and transaction history.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - SQL Injection in Balance Check\", \"Lab Description\": \"The banking portal has a balance check feature that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the balance check request to retrieve sensitive information like account balances and transaction history.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Admin Panel - SQL Injection in User Management\nDescription: The admin panel of a web application is vulnerable to SQL Injection. The vulnerability exists in the user management section, where the admin can update or delete users. An attacker could manipulate the user data or delete users using SQL injection.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Admin Panel - SQL Injection in User Management\", \"Lab Description\": \"The admin panel of a web application is vulnerable to SQL Injection. The vulnerability exists in the user management section, where the admin can update or delete users. An attacker could manipulate the user data or delete users using SQL injection.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Device - SQL Injection in Device Configuration\nDescription: The IoT device configuration page is vulnerable to SQL Injection. Attackers can inject SQL payloads into configuration settings, allowing them to alter device configurations or retrieve sensitive data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Device - SQL Injection in Device Configuration\", \"Lab Description\": \"The IoT device configuration page is vulnerable to SQL Injection. Attackers can inject SQL payloads into configuration settings, allowing them to alter device configurations or retrieve sensitive data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Content Management System - SQL Injection in Article Comments\nDescription: The article comment section of a CMS is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form, potentially extracting sensitive user information or altering articles.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Content Management System - SQL Injection in Article Comments\", \"Lab Description\": \"The article comment section of a CMS is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form, potentially extracting sensitive user information or altering articles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Cloud Storage - SQL Injection in File Search\nDescription: A cloud storage applicationâ€™s file search feature is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve file metadata or sensitive information, potentially leading to unauthorized access.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Cloud Storage - SQL Injection in File Search\", \"Lab Description\": \"A cloud storage applicationâ€™s file search feature is vulnerable to SQL Injection. Attackers can inject SQL payloads to retrieve file metadata or sensitive information, potentially leading to unauthorized access.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Financial Portal - SQL Injection in Transaction History\nDescription: The financial portal's transaction history page is vulnerable to SQL Injection. Attackers can inject SQL payloads into the transaction ID field to retrieve sensitive transaction information or manipulate transaction records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Financial Portal - SQL Injection in Transaction History\", \"Lab Description\": \"The financial portal's transaction history page is vulnerable to SQL Injection. Attackers can inject SQL payloads into the transaction ID field to retrieve sensitive transaction information or manipulate transaction records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Admin Dashboard - SQL Injection in User Deletion\nDescription: The admin dashboard allows admin users to delete accounts but is vulnerable to SQL Injection. An attacker could exploit this vulnerability to delete or alter user data from the database.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Admin Dashboard - SQL Injection in User Deletion\", \"Lab Description\": \"The admin dashboard allows admin users to delete accounts but is vulnerable to SQL Injection. An attacker could exploit this vulnerability to delete or alter user data from the database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Healthcare Portal - SQL Injection in Patient Records\nDescription: The healthcare portal contains a vulnerable patient record page where an attacker can inject SQL payloads into the patient ID field to retrieve sensitive medical information, such as patient details and diagnoses.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare Portal - SQL Injection in Patient Records\", \"Lab Description\": \"The healthcare portal contains a vulnerable patient record page where an attacker can inject SQL payloads into the patient ID field to retrieve sensitive medical information, such as patient details and diagnoses.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Social Media Platform - SQL Injection in User Profile\nDescription: A social media platform's user profile page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the profile update form, enabling them to extract sensitive user data or modify profile details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Social Media Platform - SQL Injection in User Profile\", \"Lab Description\": \"A social media platform's user profile page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the profile update form, enabling them to extract sensitive user data or modify profile details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Travel Booking Portal - SQL Injection in Booking Details\nDescription: The travel booking portal has a booking details page that is vulnerable to SQL Injection. Attackers can inject SQL payloads into the booking reference field to retrieve confidential booking information such as payment details and travel itinerary.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Travel Booking Portal - SQL Injection in Booking Details\", \"Lab Description\": \"The travel booking portal has a booking details page that is vulnerable to SQL Injection. Attackers can inject SQL payloads into the booking reference field to retrieve confidential booking information such as payment details and travel itinerary.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Inventory Management System - SQL Injection in Item Lookup\nDescription: The inventory management system's item lookup page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the item ID field to retrieve item details or manipulate the inventory database.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory Management System - SQL Injection in Item Lookup\", \"Lab Description\": \"The inventory management system's item lookup page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the item ID field to retrieve item details or manipulate the inventory database.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Forum - SQL Injection in Post Comments\nDescription: The online forum has a comment section where users can post comments. This section is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form to extract user information or modify posts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Forum - SQL Injection in Post Comments\", \"Lab Description\": \"The online forum has a comment section where users can post comments. This section is vulnerable to SQL Injection. Attackers can inject SQL payloads into the comment submission form to extract user information or modify posts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Job Portal - SQL Injection in Job Application\nDescription: The job portal is vulnerable to SQL Injection in the job application form. Attackers can inject SQL payloads into the applicant ID field to retrieve sensitive job application data or modify existing records.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Job Portal - SQL Injection in Job Application\", \"Lab Description\": \"The job portal is vulnerable to SQL Injection in the job application form. Attackers can inject SQL payloads into the applicant ID field to retrieve sensitive job application data or modify existing records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Store - SQL Injection in Product Price Update\nDescription: The online store has a feature to update product prices, but the input field is vulnerable to SQL Injection. Attackers can inject SQL payloads into the price update request to change product prices or extract pricing data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Store - SQL Injection in Product Price Update\", \"Lab Description\": \"The online store has a feature to update product prices, but the input field is vulnerable to SQL Injection. Attackers can inject SQL payloads into the price update request to change product prices or extract pricing data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Online Banking - SQL Injection in Account Balance\nDescription: The online banking application is vulnerable to SQL Injection. An attacker can inject malicious SQL payloads into the account balance query to retrieve sensitive financial data or perform unauthorized transactions.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Banking - SQL Injection in Account Balance\", \"Lab Description\": \"The online banking application is vulnerable to SQL Injection. An attacker can inject malicious SQL payloads into the account balance query to retrieve sensitive financial data or perform unauthorized transactions.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-Commerce Site - SQL Injection in Product Search\nDescription: The e-commerce site's product search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract product details, including prices and descriptions.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-Commerce Site - SQL Injection in Product Search\", \"Lab Description\": \"The e-commerce site's product search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract product details, including prices and descriptions.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Forum - SQL Injection in User Login\nDescription: The online forum's user login form is vulnerable to SQL Injection. An attacker can inject SQL payloads into the login credentials to bypass authentication and gain access to user accounts.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Forum - SQL Injection in User Login\", \"Lab Description\": \"The online forum's user login form is vulnerable to SQL Injection. An attacker can inject SQL payloads into the login credentials to bypass authentication and gain access to user accounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Real Estate Portal - SQL Injection in Property Listings\nDescription: The real estate portal has a search functionality for filtering property listings based on price and location. The search is vulnerable to SQL Injection, which allows attackers to extract property information, including addresses and prices.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Real Estate Portal - SQL Injection in Property Listings\", \"Lab Description\": \"The real estate portal has a search functionality for filtering property listings based on price and location. The search is vulnerable to SQL Injection, which allows attackers to extract property information, including addresses and prices.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Student Portal - SQL Injection in Course Registration\nDescription: The student portal contains a course registration page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the student ID field to manipulate course registrations and extract sensitive student data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Student Portal - SQL Injection in Course Registration\", \"Lab Description\": \"The student portal contains a course registration page that is vulnerable to SQL Injection. An attacker can inject SQL payloads into the student ID field to manipulate course registrations and extract sensitive student data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Admin Dashboard - SQL Injection in Admin Login\nDescription: The admin dashboard's login page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username and password fields to bypass authentication and gain access to the admin interface.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Admin Dashboard - SQL Injection in Admin Login\", \"Lab Description\": \"The admin dashboard's login page is vulnerable to SQL Injection. An attacker can inject SQL payloads into the username and password fields to bypass authentication and gain access to the admin interface.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Online Shopping Cart - SQL Injection in Cart Checkout\nDescription: The online shopping cart system is vulnerable to SQL Injection during checkout. An attacker can inject SQL payloads into the checkout form to extract payment details or modify order information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Shopping Cart - SQL Injection in Cart Checkout\", \"Lab Description\": \"The online shopping cart system is vulnerable to SQL Injection during checkout. An attacker can inject SQL payloads into the checkout form to extract payment details or modify order information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Music Streaming Service - SQL Injection in Playlist Creation\nDescription: The music streaming service's playlist creation form is vulnerable to SQL Injection. Attackers can inject SQL payloads to modify existing playlists or extract sensitive data such as user information and playlist details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Music Streaming Service - SQL Injection in Playlist Creation\", \"Lab Description\": \"The music streaming service's playlist creation form is vulnerable to SQL Injection. Attackers can inject SQL payloads to modify existing playlists or extract sensitive data such as user information and playlist details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Library Management System - SQL Injection in Book Search\nDescription: The library management system's book search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract book details, including author information and publication dates.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Library Management System - SQL Injection in Book Search\", \"Lab Description\": \"The library management system's book search functionality is vulnerable to SQL Injection. An attacker can inject SQL payloads into the search query to extract book details, including author information and publication dates.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Inventory Management System - SQL Injection in Item Search\nDescription: The inventory management system has a vulnerable item search feature. An attacker can inject SQL payloads into the item search field to retrieve sensitive inventory data, such as item prices, quantities, and supplier information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory Management System - SQL Injection in Item Search\", \"Lab Description\": \"The inventory management system has a vulnerable item search feature. An attacker can inject SQL payloads into the item search field to retrieve sensitive inventory data, such as item prices, quantities, and supplier information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Employee Portal - SQL Injection in Salary Query\nDescription: The employee portal allows employees to query their salary details. This query is vulnerable to SQL Injection, which allows attackers to extract salary data for all employees and potentially alter sensitive financial records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Employee Portal - SQL Injection in Salary Query\", \"Lab Description\": \"The employee portal allows employees to query their salary details. This query is vulnerable to SQL Injection, which allows attackers to extract salary data for all employees and potentially alter sensitive financial records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Job Portal - SQL Injection in Job Application\nDescription: The job portal allows users to apply for jobs by submitting their resumes. The job application form is vulnerable to SQL Injection, allowing an attacker to retrieve job applicant data, including resumes, personal information, and job preferences.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Job Portal - SQL Injection in Job Application\", \"Lab Description\": \"The job portal allows users to apply for jobs by submitting their resumes. The job application form is vulnerable to SQL Injection, allowing an attacker to retrieve job applicant data, including resumes, personal information, and job preferences.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Healthcare System - SQL Injection in Patient Record Search\nDescription: The healthcare system's patient record search feature is vulnerable to SQL Injection. An attacker can extract sensitive patient information, including medical history, diagnosis, and treatment records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare System - SQL Injection in Patient Record Search\", \"Lab Description\": \"The healthcare system's patient record search feature is vulnerable to SQL Injection. An attacker can extract sensitive patient information, including medical history, diagnosis, and treatment records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Customer Support Portal - SQL Injection in Ticket Management\nDescription: The customer support portal allows users to submit tickets for technical support. The ticket management system is vulnerable to SQL Injection, which can be exploited to extract sensitive support tickets or modify ticket statuses.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Customer Support Portal - SQL Injection in Ticket Management\", \"Lab Description\": \"The customer support portal allows users to submit tickets for technical support. The ticket management system is vulnerable to SQL Injection, which can be exploited to extract sensitive support tickets or modify ticket statuses.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Hotel Reservation System - SQL Injection in Room Availability Check\nDescription: The hotel reservation system is vulnerable to SQL Injection in the room availability check. An attacker can manipulate the query to extract information on available rooms, their prices, and booking details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Hotel Reservation System - SQL Injection in Room Availability Check\", \"Lab Description\": \"The hotel reservation system is vulnerable to SQL Injection in the room availability check. An attacker can manipulate the query to extract information on available rooms, their prices, and booking details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Event Management System - SQL Injection in Event Registration\nDescription: The event management system's registration form is vulnerable to SQL Injection. An attacker can use SQL injection to manipulate registration details and extract attendee information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Event Management System - SQL Injection in Event Registration\", \"Lab Description\": \"The event management system's registration form is vulnerable to SQL Injection. An attacker can use SQL injection to manipulate registration details and extract attendee information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Auction System - SQL Injection in Bid Submission\nDescription: The online auction system is vulnerable to SQL Injection in the bid submission form. An attacker can inject SQL payloads to retrieve auction details such as highest bid, bidder details, and item information.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Auction System - SQL Injection in Bid Submission\", \"Lab Description\": \"The online auction system is vulnerable to SQL Injection in the bid submission form. An attacker can inject SQL payloads to retrieve auction details such as highest bid, bidder details, and item information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: E-commerce Admin Portal - SQL Injection in Order Management\nDescription: The e-commerce platform's admin portal is vulnerable to SQL Injection when managing customer orders. An attacker who compromises an admin account could extract or modify customer order histories, payment statuses, and shipping details.\nDifficulty: Very Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"E-commerce Admin Portal - SQL Injection in Order Management\", \"Lab Description\": \"The e-commerce platform's admin portal is vulnerable to SQL Injection when managing customer orders. An attacker who compromises an admin account could extract or modify customer order histories, payment statuses, and shipping details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Very Hard\"}"}
{"prompt": "Lab: IoT Management Platform - SQL Injection in Device Configuration\nDescription: The IoT platform for device management has a vulnerable configuration upload feature that accepts SQL queries without proper sanitization. Attackers could extract device configurations, firmware versions, and private device keys.\nDifficulty: Very Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Management Platform - SQL Injection in Device Configuration\", \"Lab Description\": \"The IoT platform for device management has a vulnerable configuration upload feature that accepts SQL queries without proper sanitization. Attackers could extract device configurations, firmware versions, and private device keys.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Very Hard\"}"}
{"prompt": "Lab: Healthcare Portal - SQL Injection in Patient Record Search\nDescription: A healthcare portal allows searching patient records by name. The search functionality is vulnerable to SQL Injection, risking exposure of confidential medical records and insurance information.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare Portal - SQL Injection in Patient Record Search\", \"Lab Description\": \"A healthcare portal allows searching patient records by name. The search functionality is vulnerable to SQL Injection, risking exposure of confidential medical records and insurance information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Online Travel Booking - SQL Injection in Flight Search\nDescription: The flight search functionality in an online travel booking system is vulnerable to SQL Injection, exposing flight reservation details and traveler profiles.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Travel Booking - SQL Injection in Flight Search\", \"Lab Description\": \"The flight search functionality in an online travel booking system is vulnerable to SQL Injection, exposing flight reservation details and traveler profiles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Platform - SQL Injection in Article Management\nDescription: The CMS article editing feature does not sanitize input properly, allowing an attacker to exploit SQL Injection to modify or delete content.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Platform - SQL Injection in Article Management\", \"Lab Description\": \"The CMS article editing feature does not sanitize input properly, allowing an attacker to exploit SQL Injection to modify or delete content.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking App - SQL Injection in Account Balance Retrieval\nDescription: The online banking app allows users to retrieve their account balance but lacks input sanitization, enabling attackers to view other customersâ€™ account information.\nDifficulty: Very Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking App - SQL Injection in Account Balance Retrieval\", \"Lab Description\": \"The online banking app allows users to retrieve their account balance but lacks input sanitization, enabling attackers to view other customersâ€™ account information.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Very Hard\"}"}
{"prompt": "Lab: Online Marketplace - SQL Injection in Category Filter\nDescription: An online marketplace's category filter does not properly validate input, making it susceptible to SQL Injection, leading to exposure of all products and usersâ€™ personal details.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Online Marketplace - SQL Injection in Category Filter\", \"Lab Description\": \"An online marketplace's category filter does not properly validate input, making it susceptible to SQL Injection, leading to exposure of all products and usersâ€™ personal details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Hotel Reservation System - SQL Injection in Booking Lookup\nDescription: The hotel reservation system allows users to check booking status by ID, but the lookup feature is vulnerable to SQL Injection, risking customer booking records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Hotel Reservation System - SQL Injection in Booking Lookup\", \"Lab Description\": \"The hotel reservation system allows users to check booking status by ID, but the lookup feature is vulnerable to SQL Injection, risking customer booking records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Educational Platform - SQL Injection in Exam Result Checker\nDescription: An education portalâ€™s exam result checker lacks input validation, enabling an attacker to perform SQL Injection to retrieve students' scores and grades.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Educational Platform - SQL Injection in Exam Result Checker\", \"Lab Description\": \"An education portalâ€™s exam result checker lacks input validation, enabling an attacker to perform SQL Injection to retrieve students' scores and grades.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Inventory Management System - SQL Injection in Item Update\nDescription: The inventory update feature does not properly sanitize user inputs, allowing SQL Injection to manipulate product inventory and pricing data.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory Management System - SQL Injection in Item Update\", \"Lab Description\": \"The inventory update feature does not properly sanitize user inputs, allowing SQL Injection to manipulate product inventory and pricing data.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Charity Donation Platform - SQL Injection in Donation History\nDescription: The donation history page is vulnerable to SQL Injection, allowing attackers to view donor personal information and donation amounts.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Charity Donation Platform - SQL Injection in Donation History\", \"Lab Description\": \"The donation history page is vulnerable to SQL Injection, allowing attackers to view donor personal information and donation amounts.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Food Delivery App - SQL Injection in Order Tracking\nDescription: Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Food Delivery App - SQL Injection in Order Tracking\", \"Lab Description\": \"Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Food Delivery App - SQL Injection in Order Tracking\nDescription: Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Food Delivery App - SQL Injection in Order Tracking\", \"Lab Description\": \"Order tracking by order ID in a food delivery application is vulnerable to SQL Injection, allowing exposure of customer addresses and order details.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking Portal - Time-Based SQL Injection in Transaction History\nDescription: Transaction history lookup uses raw SQL queries based on the account number without sanitization. The application delays response timing based on injected SQL sleep commands, allowing attackers to infer database contents using blind methods. To solve: extract admin account credentials using time-based SQLi inference.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Time-Based SQL Injection in Transaction History\", \"Lab Description\": \"Transaction history lookup uses raw SQL queries based on the account number without sanitization. The application delays response timing based on injected SQL sleep commands, allowing attackers to infer database contents using blind methods. To solve: extract admin account credentials using time-based SQLi inference.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Management Dashboard - UNION SQL Injection in Device Search\nDescription: A device search function concatenates user input into a SQL ORDER BY clause without validation, leading to UNION-based SQL Injection. Attackers can enumerate all device passwords. To solve: retrieve admin IoT credentials through crafted UNION payloads.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Management Dashboard - UNION SQL Injection in Device Search\", \"Lab Description\": \"A device search function concatenates user input into a SQL ORDER BY clause without validation, leading to UNION-based SQL Injection. Attackers can enumerate all device passwords. To solve: retrieve admin IoT credentials through crafted UNION payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Bank API Gateway - Out-of-Band SQL Injection in Payment Initiation\nDescription: The bank API for initiating payments is vulnerable to Out-of-Band (OOB) SQL Injection by mishandling 'reference_id'. Attackers can trigger DNS callbacks or HTTP exfiltration channels. To solve: perform successful OOB data exfiltration via Burp Collaborator.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank API Gateway - Out-of-Band SQL Injection in Payment Initiation\", \"Lab Description\": \"The bank API for initiating payments is vulnerable to Out-of-Band (OOB) SQL Injection by mishandling 'reference_id'. Attackers can trigger DNS callbacks or HTTP exfiltration channels. To solve: perform successful OOB data exfiltration via Burp Collaborator.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS Admin Panel - Boolean-Based SQL Injection in User Role Verification\nDescription: The CMS checks administrative roles based on unsafe SQL queries using user_id parameters without sanitization. Boolean-based conditions allow attackers to infer admin roles by observing response differences. To solve: enumerate admin accounts through Boolean-based inference.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS Admin Panel - Boolean-Based SQL Injection in User Role Verification\", \"Lab Description\": \"The CMS checks administrative roles based on unsafe SQL queries using user_id parameters without sanitization. Boolean-based conditions allow attackers to infer admin roles by observing response differences. To solve: enumerate admin accounts through Boolean-based inference.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal - Error-Based SQL Injection in User Profile Update\nDescription: Profile update functionality includes SQL error details when invalid input is submitted. Attackers can exploit verbose error messages to extract database structure using error-based SQL Injection. To solve: leak table names and user data using crafted payloads.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal - Error-Based SQL Injection in User Profile Update\", \"Lab Description\": \"Profile update functionality includes SQL error details when invalid input is submitted. Attackers can exploit verbose error messages to extract database structure using error-based SQL Injection. To solve: leak table names and user data using crafted payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Bank Internal Admin Panel - UNION SQL Injection via Department Filter\nDescription: A hidden admin panel for managing bank employees accepts a 'department' filter that is vulnerable to UNION-based SQL Injection. Attackers can retrieve sensitive employee payroll data by injecting UNION payloads through the filter. To solve: leak and extract payroll records.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Internal Admin Panel - UNION SQL Injection via Department Filter\", \"Lab Description\": \"A hidden admin panel for managing bank employees accepts a 'department' filter that is vulnerable to UNION-based SQL Injection. Attackers can retrieve sensitive employee payroll data by injecting UNION payloads through the filter. To solve: leak and extract payroll records.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Mobile Banking App API - Blind SQL Injection in Balance Inquiry\nDescription: The API endpoint '/api/balance' accepts an 'account_id' parameter that is not properly sanitized, leading to Boolean-Blind SQL Injection. Attackers can infer account balances and usernames by triggering true/false conditions. To solve: enumerate the database content using boolean-based inference.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mobile Banking App API - Blind SQL Injection in Balance Inquiry\", \"Lab Description\": \"The API endpoint '/api/balance' accepts an 'account_id' parameter that is not properly sanitized, leading to Boolean-Blind SQL Injection. Attackers can infer account balances and usernames by triggering true/false conditions. To solve: enumerate the database content using boolean-based inference.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Loan Application Portal - Error-Based SQL Injection in Application ID\nDescription: Loan applications are retrievable using an 'application_id' parameter without input validation, exposing error-based SQL Injection. Attackers can force SQL errors that leak backend table names and column data. To solve: retrieve full loan applications and customer credit scores.\nDifficulty: Easy\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Loan Application Portal - Error-Based SQL Injection in Application ID\", \"Lab Description\": \"Loan applications are retrievable using an 'application_id' parameter without input validation, exposing error-based SQL Injection. Attackers can force SQL errors that leak backend table names and column data. To solve: retrieve full loan applications and customer credit scores.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT Payment Reader API - OOB SQL Injection on Device Registration\nDescription: IoT payment readers register to the API by providing 'device_serial' numbers. Improper validation causes Out-of-Band SQL Injection, allowing attackers to exfiltrate data via external DNS servers. To solve: perform successful DNS exfiltration via crafted SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Payment Reader API - OOB SQL Injection on Device Registration\", \"Lab Description\": \"IoT payment readers register to the API by providing 'device_serial' numbers. Improper validation causes Out-of-Band SQL Injection, allowing attackers to exfiltrate data via external DNS servers. To solve: perform successful DNS exfiltration via crafted SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bank Admin Portal - Stacked Query SQL Injection in Batch Payment Processing\nDescription: The batch payment upload feature concatenates unvalidated fields directly into SQL queries. Stacked queries allow attackers to inject malicious statements, leading to privilege escalation or backdoor creation. To solve: inject stacked queries to create a rogue admin account.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Admin Portal - Stacked Query SQL Injection in Batch Payment Processing\", \"Lab Description\": \"The batch payment upload feature concatenates unvalidated fields directly into SQL queries. Stacked queries allow attackers to inject malicious statements, leading to privilege escalation or backdoor creation. To solve: inject stacked queries to create a rogue admin account.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Web Interface - SQL Injection via ORDER BY in Transaction History\nDescription: The transaction history page uses a dynamic 'sort_by' parameter in the ORDER BY clause without proper validation. This allows attackers to manipulate the clause to trigger SQL errors or extract hidden fields. To solve: exploit ORDER BY injection to leak hidden transaction metadata.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Web Interface - SQL Injection via ORDER BY in Transaction History\", \"Lab Description\": \"The transaction history page uses a dynamic 'sort_by' parameter in the ORDER BY clause without proper validation. This allows attackers to manipulate the clause to trigger SQL errors or extract hidden fields. To solve: exploit ORDER BY injection to leak hidden transaction metadata.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Mobile Banking API - SQL Injection via JSON Body in Login Endpoint\nDescription: The login API parses JSON request bodies without sanitizing the 'username' field before embedding into a SQL query. Attackers can exploit this vector to perform JSON-based SQL Injection. To solve: bypass authentication and extract user roles.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Mobile Banking API - SQL Injection via JSON Body in Login Endpoint\", \"Lab Description\": \"The login API parses JSON request bodies without sanitizing the 'username' field before embedding into a SQL query. Attackers can exploit this vector to perform JSON-based SQL Injection. To solve: bypass authentication and extract user roles.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking CMS Panel - Time-Based SQL Injection in User Profile Edit\nDescription: The edit profile form allows updates via a 'user_id' parameter vulnerable to time-based SQL Injection. Attackers can extract admin credentials by observing response delays. To solve: exploit timing side channels to exfiltrate password hashes.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking CMS Panel - Time-Based SQL Injection in User Profile Edit\", \"Lab Description\": \"The edit profile form allows updates via a 'user_id' parameter vulnerable to time-based SQL Injection. Attackers can extract admin credentials by observing response delays. To solve: exploit timing side channels to exfiltrate password hashes.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bank Staff API - SQL Injection in XML-Based Login Service\nDescription: The legacy SOAP-based login API parses XML and injects values directly into SQL without validation. This leads to SQL Injection via XML elements. To solve: extract the database version and active session tokens.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Staff API - SQL Injection in XML-Based Login Service\", \"Lab Description\": \"The legacy SOAP-based login API parses XML and injects values directly into SQL without validation. This leads to SQL Injection via XML elements. To solve: extract the database version and active session tokens.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Bank Admin Scheduler - GROUP BY SQL Injection in Event Aggregation\nDescription: Admin reports group events by user and device type using unfiltered user input. Improper use of GROUP BY enables SQL Injection leading to privilege escalation. To solve: inject payloads into GROUP BY clause to access hidden audit logs.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Admin Scheduler - GROUP BY SQL Injection in Event Aggregation\", \"Lab Description\": \"Admin reports group events by user and device type using unfiltered user input. Improper use of GROUP BY enables SQL Injection leading to privilege escalation. To solve: inject payloads into GROUP BY clause to access hidden audit logs.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Dashboard - Stacked SQL Injection via Currency Conversion Widget\nDescription: The currency converter widget takes an amount and a target currency via query params. Due to improper input sanitation, attackers can inject stacked SQL queries to modify exchange rate tables. To solve: override USD conversion rates to gain financial advantage.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Dashboard - Stacked SQL Injection via Currency Conversion Widget\", \"Lab Description\": \"The currency converter widget takes an amount and a target currency via query params. Due to improper input sanitation, attackers can inject stacked SQL queries to modify exchange rate tables. To solve: override USD conversion rates to gain financial advantage.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Reward API - UNION SQL Injection in Points Redeem System\nDescription: The points redeem system accepts a 'voucher_id' input which is injectable via UNION statements. Exploiting this reveals customer reward balances and account mappings. To solve: dump reward history of top users.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Reward API - UNION SQL Injection in Points Redeem System\", \"Lab Description\": \"The points redeem system accepts a 'voucher_id' input which is injectable via UNION statements. Exploiting this reveals customer reward balances and account mappings. To solve: dump reward history of top users.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Bank Internal File Access - SQL Injection via Filename Search\nDescription: The file search system queries the 'documents' table based on unvalidated 'filename' input. SQL Injection allows attackers to extract file contents and system paths. To solve: retrieve internal configuration files via SQL payloads.\nDifficulty: Hard\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Bank Internal File Access - SQL Injection via Filename Search\", \"Lab Description\": \"The file search system queries the 'documents' table based on unvalidated 'filename' input. SQL Injection allows attackers to extract file contents and system paths. To solve: retrieve internal configuration files via SQL payloads.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Email Export Tool - Boolean SQL Injection in Filter Expression\nDescription: Email export filters use an injectable expression that gets appended to a WHERE clause. Attackers can use Boolean logic to infer email content and attachments. To solve: extract sensitive PDF reports by exploiting Boolean logic.\nDifficulty: Medium\nVuln: SQL Injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Email Export Tool - Boolean SQL Injection in Filter Expression\", \"Lab Description\": \"Email export filters use an injectable expression that gets appended to a WHERE clause. Attackers can use Boolean logic to infer email content and attachments. To solve: extract sensitive PDF reports by exploiting Boolean logic.\", \"Vulnerability name\": \"SQL Injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal stacked SQL injection in search query logging\nDescription: The backend logs every user search to a database without sanitizing input. The application fails to restrict multiple SQL statements in one request, allowing attackers to perform stacked queries. To solve: Inject a payload that adds a new admin user to the database via stacked query execution.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal stacked SQL injection in search query logging\", \"Lab Description\": \"The backend logs every user search to a database without sanitizing input. The application fails to restrict multiple SQL statements in one request, allowing attackers to perform stacked queries. To solve: Inject a payload that adds a new admin user to the database via stacked query execution.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API gateway Boolean-based SQL injection in filter parameter\nDescription: An API accepts filter parameters for sorting transaction data. The SQL query does not properly escape the 'filter' parameter, enabling Boolean-based SQL injection. To solve: Extract the database version using a true/false inference technique.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway Boolean-based SQL injection in filter parameter\", \"Lab Description\": \"An API accepts filter parameters for sorting transaction data. The SQL query does not properly escape the 'filter' parameter, enabling Boolean-based SQL injection. To solve: Extract the database version using a true/false inference technique.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard UNION SQL injection in device filter\nDescription: The IoT dashboard uses a vulnerable SQL statement to filter devices based on type. The 'deviceType' parameter is not sanitized, allowing attackers to inject a UNION query. To solve: Leak admin credentials from the 'users' table via UNION-based injection.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard UNION SQL injection in device filter\", \"Lab Description\": \"The IoT dashboard uses a vulnerable SQL statement to filter devices based on type. The 'deviceType' parameter is not sanitized, allowing attackers to inject a UNION query. To solve: Leak admin credentials from the 'users' table via UNION-based injection.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS comment section out-of-band SQL injection in author metadata\nDescription: The CMS stores commenter metadata and inserts the author value into the database without escaping. The backend firewall suppresses error messages, making exploitation detectable only via out-of-band channels. To solve: Trigger an OOB DNS request via injected SQL.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS comment section out-of-band SQL injection in author metadata\", \"Lab Description\": \"The CMS stores commenter metadata and inserts the author value into the database without escaping. The backend firewall suppresses error messages, making exploitation detectable only via out-of-band channels. To solve: Trigger an OOB DNS request via injected SQL.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking portal SQL injection in account filtering with GROUP BY\nDescription: The backend forms a SQL query grouping accounts by status. It allows raw injection into the GROUP BY clause via user-supplied filters. To solve: Exploit the GROUP BY to inject HAVING clauses and trigger data leakage.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in account filtering with GROUP BY\", \"Lab Description\": \"The backend forms a SQL query grouping accounts by status. It allows raw injection into the GROUP BY clause via user-supplied filters. To solve: Exploit the GROUP BY to inject HAVING clauses and trigger data leakage.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking API SQL injection in nested JSON field\nDescription: The API processes nested JSON payloads and uses the 'account.id' field in a query without sanitization. This allows injection inside JSON bodies. To solve: Inject a payload to retrieve internal configuration data using a UNION SELECT.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking API SQL injection in nested JSON field\", \"Lab Description\": \"The API processes nested JSON payloads and uses the 'account.id' field in a query without sanitization. This allows injection inside JSON bodies. To solve: Inject a payload to retrieve internal configuration data using a UNION SELECT.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL injection in ORDER BY parameter on blog list\nDescription: The blog list uses dynamic ORDER BY values from user input. There is no input whitelist or escaping, allowing injection into the SQL ORDER BY clause. To solve: Leak usernames using error-based payloads via ordering expressions.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL injection in ORDER BY parameter on blog list\", \"Lab Description\": \"The blog list uses dynamic ORDER BY values from user input. There is no input whitelist or escaping, allowing injection into the SQL ORDER BY clause. To solve: Leak usernames using error-based payloads via ordering expressions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT dashboard time-based SQL injection in settings update\nDescription: The dashboard stores device settings submitted via a POST form. The device ID is vulnerable to SQL injection with no error output. To solve: Use time-based payloads to extract the first character of the admin's password.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard time-based SQL injection in settings update\", \"Lab Description\": \"The dashboard stores device settings submitted via a POST form. The device ID is vulnerable to SQL injection with no error output. To solve: Use time-based payloads to extract the first character of the admin's password.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking portal UNION SQL injection in account balance query\nDescription: The banking portal allows users to view their balance by submitting an account number via URL parameters. However, the account number input is directly inserted into an SQL query without proper sanitization, enabling a UNION-based SQL injection attack. To solve: Use UNION to retrieve additional data from the users table and exploit this vulnerability to extract usernames and email addresses.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal UNION SQL injection in account balance query\", \"Lab Description\": \"The banking portal allows users to view their balance by submitting an account number via URL parameters. However, the account number input is directly inserted into an SQL query without proper sanitization, enabling a UNION-based SQL injection attack. To solve: Use UNION to retrieve additional data from the users table and exploit this vulnerability to extract usernames and email addresses.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS POST-based SQL injection in user registration form\nDescription: A Content Management System (CMS) registration form allows users to create accounts by submitting their details. The backend SQL query used to insert these details does not sanitize input, allowing SQL injection attacks through form fields. To solve: Inject malicious SQL to create a new admin user in the systemâ€™s database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS POST-based SQL injection in user registration form\", \"Lab Description\": \"A Content Management System (CMS) registration form allows users to create accounts by submitting their details. The backend SQL query used to insert these details does not sanitize input, allowing SQL injection attacks through form fields. To solve: Inject malicious SQL to create a new admin user in the systemâ€™s database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT device dashboard Blind SQL injection in device ID input\nDescription: The IoT device dashboard accepts a device ID in the URL to fetch device status. The input is not sanitized, leading to a blind SQL injection vulnerability. To solve: Use boolean-based blind SQL injection to infer device status or other sensitive information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT device dashboard Blind SQL injection in device ID input\", \"Lab Description\": \"The IoT device dashboard accepts a device ID in the URL to fetch device status. The input is not sanitized, leading to a blind SQL injection vulnerability. To solve: Use boolean-based blind SQL injection to infer device status or other sensitive information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway SQL injection in POST parameter (nested JSON)\nDescription: The API accepts a nested JSON payload to update device configurations. The 'deviceId' in the JSON is vulnerable to SQL injection. To solve: Craft a nested SQL injection payload to retrieve data from other tables in the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in POST parameter (nested JSON)\", \"Lab Description\": \"The API accepts a nested JSON payload to update device configurations. The 'deviceId' in the JSON is vulnerable to SQL injection. To solve: Craft a nested SQL injection payload to retrieve data from other tables in the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS user profile SQL injection in username parameter\nDescription: A CMS allows users to update their profiles. The 'username' field in the form is vulnerable to SQL injection, leading to potential data leakage. To solve: Inject SQL to retrieve other usersâ€™ usernames and email addresses from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS user profile SQL injection in username parameter\", \"Lab Description\": \"A CMS allows users to update their profiles. The 'username' field in the form is vulnerable to SQL injection, leading to potential data leakage. To solve: Inject SQL to retrieve other usersâ€™ usernames and email addresses from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway SQL injection in query parameter (username)\nDescription: The API gateway accepts a query parameter for user authentication based on the username. This parameter is not sanitized properly, leading to a SQL injection vulnerability. To solve: Use a UNION-based SQL injection to extract data from the users table and retrieve the admin credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in query parameter (username)\", \"Lab Description\": \"The API gateway accepts a query parameter for user authentication based on the username. This parameter is not sanitized properly, leading to a SQL injection vulnerability. To solve: Use a UNION-based SQL injection to extract data from the users table and retrieve the admin credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard Time-based Blind SQL injection in device name\nDescription: The IoT dashboard allows querying of device names through a vulnerable search API. The input is not sanitized, allowing for time-based blind SQL injection. To solve: Use time-based SQL injection to infer device information from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard Time-based Blind SQL injection in device name\", \"Lab Description\": \"The IoT dashboard allows querying of device names through a vulnerable search API. The input is not sanitized, allowing for time-based blind SQL injection. To solve: Use time-based SQL injection to infer device information from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking portal ORDER BY SQL injection in transaction history\nDescription: The banking portal allows users to view transaction histories through the 'order by' query parameter. However, the query does not sanitize the input, allowing an attacker to manipulate the query and gain unauthorized access to sensitive data. To solve: Use an ORDER BY-based SQL injection to enumerate columns and extract data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal ORDER BY SQL injection in transaction history\", \"Lab Description\": \"The banking portal allows users to view transaction histories through the 'order by' query parameter. However, the query does not sanitize the input, allowing an attacker to manipulate the query and gain unauthorized access to sensitive data. To solve: Use an ORDER BY-based SQL injection to enumerate columns and extract data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS product filter SQL injection in product ID\nDescription: The CMS allows users to filter products by ID, but the input is not sanitized. This creates an opportunity for SQL injection. To solve: Inject SQL payloads into the product ID filter to enumerate other products and extract their details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS product filter SQL injection in product ID\", \"Lab Description\": \"The CMS allows users to filter products by ID, but the input is not sanitized. This creates an opportunity for SQL injection. To solve: Inject SQL payloads into the product ID filter to enumerate other products and extract their details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT device control SQL injection in device control endpoint\nDescription: The IoT device control endpoint accepts device ID input via query parameters, which is directly inserted into an SQL query without sanitization. To solve: Exploit this vulnerability using a UNION SQL injection to access sensitive data, such as device configuration and user information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT device control SQL injection in device control endpoint\", \"Lab Description\": \"The IoT device control endpoint accepts device ID input via query parameters, which is directly inserted into an SQL query without sanitization. To solve: Exploit this vulnerability using a UNION SQL injection to access sensitive data, such as device configuration and user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API gateway SQL injection in user search API\nDescription: The API gateway allows admins to search for users by their username. The 'username' field is vulnerable to SQL injection, which can be exploited to extract data. To solve: Use a UNION-based SQL injection to retrieve sensitive user data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in user search API\", \"Lab Description\": \"The API gateway allows admins to search for users by their username. The 'username' field is vulnerable to SQL injection, which can be exploited to extract data. To solve: Use a UNION-based SQL injection to retrieve sensitive user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal HAVING SQL injection in transaction query\nDescription: The banking portal uses a HAVING clause to filter transactions by status. The application does not sanitize input, allowing an attacker to inject malicious SQL. To solve: Use a HAVING clause-based SQL injection to enumerate columns and extract sensitive transaction data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal HAVING SQL injection in transaction query\", \"Lab Description\": \"The banking portal uses a HAVING clause to filter transactions by status. The application does not sanitize input, allowing an attacker to inject malicious SQL. To solve: Use a HAVING clause-based SQL injection to enumerate columns and extract sensitive transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS file upload SQL injection in file name parameter\nDescription: The CMS allows users to upload profile images, but it is vulnerable to SQL injection in the 'fileName' parameter. An attacker can inject SQL into the file name, which is used in a database query. To solve: Exploit the SQL injection vulnerability to extract user data by manipulating the file name parameter.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS file upload SQL injection in file name parameter\", \"Lab Description\": \"The CMS allows users to upload profile images, but it is vulnerable to SQL injection in the 'fileName' parameter. An attacker can inject SQL into the file name, which is used in a database query. To solve: Exploit the SQL injection vulnerability to extract user data by manipulating the file name parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal XSS stored in transaction search\nDescription: The banking portal's transaction search page is vulnerable to stored XSS. An attacker can inject malicious JavaScript into the search query, which will be stored and executed in the response. To solve: Exploit the XSS vulnerability to steal session tokens.\nDifficulty: Medium\nVuln: XSS\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal XSS stored in transaction search\", \"Lab Description\": \"The banking portal's transaction search page is vulnerable to stored XSS. An attacker can inject malicious JavaScript into the search query, which will be stored and executed in the response. To solve: Exploit the XSS vulnerability to steal session tokens.\", \"Vulnerability name\": \"XSS\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard UNION-based SQL injection in device control\nDescription: The IoT dashboard allows device control based on the device ID, but it is vulnerable to SQL injection in the device ID parameter. To solve: Use a UNION-based SQL injection to extract sensitive user information from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard UNION-based SQL injection in device control\", \"Lab Description\": \"The IoT dashboard allows device control based on the device ID, but it is vulnerable to SQL injection in the device ID parameter. To solve: Use a UNION-based SQL injection to extract sensitive user information from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal Boolean-based Blind SQL injection in account balance query\nDescription: The banking portal allows querying of account balances, but it is vulnerable to Boolean-based blind SQL injection. To solve: Use Boolean-based blind SQL injection to infer account balance information by testing for true/false conditions.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal Boolean-based Blind SQL injection in account balance query\", \"Lab Description\": \"The banking portal allows querying of account balances, but it is vulnerable to Boolean-based blind SQL injection. To solve: Use Boolean-based blind SQL injection to infer account balance information by testing for true/false conditions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS search SQL injection in title parameter\nDescription: The CMS search functionality is vulnerable to SQL injection in the title query parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use a UNION-based SQL injection to enumerate columns and extract sensitive information.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS search SQL injection in title parameter\", \"Lab Description\": \"The CMS search functionality is vulnerable to SQL injection in the title query parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use a UNION-based SQL injection to enumerate columns and extract sensitive information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT dashboard Time-based Blind SQL injection in sensor data query\nDescription: The IoT dashboard is vulnerable to time-based blind SQL injection in the sensor data query, allowing an attacker to infer sensor data from the database by observing time delays. To solve: Use time-based blind SQL injection to retrieve sensitive data by introducing delays.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard Time-based Blind SQL injection in sensor data query\", \"Lab Description\": \"The IoT dashboard is vulnerable to time-based blind SQL injection in the sensor data query, allowing an attacker to infer sensor data from the database by observing time delays. To solve: Use time-based blind SQL injection to retrieve sensitive data by introducing delays.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS user authentication SQL injection in password reset endpoint\nDescription: The CMS is vulnerable to SQL injection in the password reset endpoint, where the user ID is used in an SQL query. To solve: Use UNION-based SQL injection to extract user details and bypass the authentication process.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS user authentication SQL injection in password reset endpoint\", \"Lab Description\": \"The CMS is vulnerable to SQL injection in the password reset endpoint, where the user ID is used in an SQL query. To solve: Use UNION-based SQL injection to extract user details and bypass the authentication process.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal UNION SQL injection in fund transfer\nDescription: The banking portal has a fund transfer feature that is vulnerable to UNION-based SQL injection in the transfer amount parameter. To solve: Use a UNION-based SQL injection to extract sensitive banking information from the database, including user details and account balances.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal UNION SQL injection in fund transfer\", \"Lab Description\": \"The banking portal has a fund transfer feature that is vulnerable to UNION-based SQL injection in the transfer amount parameter. To solve: Use a UNION-based SQL injection to extract sensitive banking information from the database, including user details and account balances.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS article editing SQL injection in article ID\nDescription: The CMS article editing functionality uses the article ID in an SQL query without sanitizing the input. This opens the door for SQL injection. To solve: Use SQL injection to modify or delete articles from the CMS by exploiting the vulnerability in the article ID parameter.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS article editing SQL injection in article ID\", \"Lab Description\": \"The CMS article editing functionality uses the article ID in an SQL query without sanitizing the input. This opens the door for SQL injection. To solve: Use SQL injection to modify or delete articles from the CMS by exploiting the vulnerability in the article ID parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway SQL injection in API response data query\nDescription: The API gateway exposes a vulnerable query endpoint that retrieves response data based on user input. To solve: Use SQL injection to access sensitive data from the API database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in API response data query\", \"Lab Description\": \"The API gateway exposes a vulnerable query endpoint that retrieves response data based on user input. To solve: Use SQL injection to access sensitive data from the API database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal ORDER BY SQL injection in transaction history\nDescription: The banking portal transaction history is vulnerable to SQL injection in the 'ORDER BY' clause. An attacker can inject malicious SQL queries into the 'ORDER BY' clause to bypass authentication. To solve: Use UNION-based SQL injection and manipulate the 'ORDER BY' clause to extract sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal ORDER BY SQL injection in transaction history\", \"Lab Description\": \"The banking portal transaction history is vulnerable to SQL injection in the 'ORDER BY' clause. An attacker can inject malicious SQL queries into the 'ORDER BY' clause to bypass authentication. To solve: Use UNION-based SQL injection and manipulate the 'ORDER BY' clause to extract sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS image upload SQL injection in filename parameter\nDescription: The CMS allows image uploads but does not sanitize the filename input. This can lead to SQL injection in the filename parameter. To solve: Use UNION-based SQL injection to extract sensitive database information from the vulnerable filename parameter.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS image upload SQL injection in filename parameter\", \"Lab Description\": \"The CMS allows image uploads but does not sanitize the filename input. This can lead to SQL injection in the filename parameter. To solve: Use UNION-based SQL injection to extract sensitive database information from the vulnerable filename parameter.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking portal GROUP BY SQL injection in account transaction summary\nDescription: The banking portal has a vulnerability in the 'GROUP BY' clause of the account transaction summary query. The vulnerability allows an attacker to manipulate the query and access sensitive data. To solve: Use SQL injection to manipulate the 'GROUP BY' clause and extract account balances and transaction details.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal GROUP BY SQL injection in account transaction summary\", \"Lab Description\": \"The banking portal has a vulnerability in the 'GROUP BY' clause of the account transaction summary query. The vulnerability allows an attacker to manipulate the query and access sensitive data. To solve: Use SQL injection to manipulate the 'GROUP BY' clause and extract account balances and transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway WHERE SQL injection in product details\nDescription: The API gateway endpoint for fetching product details is vulnerable to SQL injection in the product ID parameter. This allows an attacker to extract sensitive information from the database. To solve: Use SQL injection to manipulate the 'WHERE' clause and retrieve product data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway WHERE SQL injection in product details\", \"Lab Description\": \"The API gateway endpoint for fetching product details is vulnerable to SQL injection in the product ID parameter. This allows an attacker to extract sensitive information from the database. To solve: Use SQL injection to manipulate the 'WHERE' clause and retrieve product data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS search functionality SQL injection in keywords parameter\nDescription: The CMS search functionality is vulnerable to SQL injection in the keywords parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use SQL injection to extract sensitive information from the database and enumerate articles.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS search functionality SQL injection in keywords parameter\", \"Lab Description\": \"The CMS search functionality is vulnerable to SQL injection in the keywords parameter. This allows an attacker to inject SQL queries into the search functionality. To solve: Use SQL injection to extract sensitive information from the database and enumerate articles.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Banking portal HAVING SQL injection in account balances\nDescription: The banking portal has a vulnerability in the 'HAVING' clause of the account balance query, allowing an attacker to inject SQL and bypass security mechanisms. To solve: Use SQL injection in the HAVING clause to extract sensitive banking information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal HAVING SQL injection in account balances\", \"Lab Description\": \"The banking portal has a vulnerability in the 'HAVING' clause of the account balance query, allowing an attacker to inject SQL and bypass security mechanisms. To solve: Use SQL injection in the HAVING clause to extract sensitive banking information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS article deletion SQL injection in article ID\nDescription: The CMS has an endpoint for article deletion that is vulnerable to SQL injection in the article ID parameter. An attacker can delete articles or modify the query to retrieve data from the database. To solve: Use SQL injection to delete articles or retrieve sensitive data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS article deletion SQL injection in article ID\", \"Lab Description\": \"The CMS has an endpoint for article deletion that is vulnerable to SQL injection in the article ID parameter. An attacker can delete articles or modify the query to retrieve data from the database. To solve: Use SQL injection to delete articles or retrieve sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT dashboard ORDER BY SQL injection in sensor status query\nDescription: The IoT dashboard is vulnerable to SQL injection in the 'ORDER BY' clause of the sensor status query, allowing an attacker to bypass restrictions and extract sensitive sensor data. To solve: Use SQL injection in the 'ORDER BY' clause to retrieve system status and sensitive sensor data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard ORDER BY SQL injection in sensor status query\", \"Lab Description\": \"The IoT dashboard is vulnerable to SQL injection in the 'ORDER BY' clause of the sensor status query, allowing an attacker to bypass restrictions and extract sensitive sensor data. To solve: Use SQL injection in the 'ORDER BY' clause to retrieve system status and sensitive sensor data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API gateway WHERE SQL injection in user profile\nDescription: The API gateway is vulnerable to SQL injection in the 'WHERE' clause of the user profile query, allowing attackers to extract sensitive user data. The 'user_id' parameter is unsanitized. To solve: Use SQL injection to manipulate the 'WHERE' clause and extract user details.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway WHERE SQL injection in user profile\", \"Lab Description\": \"The API gateway is vulnerable to SQL injection in the 'WHERE' clause of the user profile query, allowing attackers to extract sensitive user data. The 'user_id' parameter is unsanitized. To solve: Use SQL injection to manipulate the 'WHERE' clause and extract user details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal SQL injection in the account balance retrieval\nDescription: The banking portal has an SQL injection vulnerability in the account balance retrieval query, specifically in the 'account_id' parameter. This vulnerability allows attackers to access sensitive account balance information. To solve: Use SQL injection to manipulate the query and extract the account balance.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in the account balance retrieval\", \"Lab Description\": \"The banking portal has an SQL injection vulnerability in the account balance retrieval query, specifically in the 'account_id' parameter. This vulnerability allows attackers to access sensitive account balance information. To solve: Use SQL injection to manipulate the query and extract the account balance.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS comment form SQL injection in comment ID\nDescription: The CMS comment form allows for unsanitized input in the comment ID, making it vulnerable to SQL injection. An attacker can manipulate the comment ID parameter to retrieve or modify comments in the database. To solve: Use SQL injection to extract comment data and manipulate the query.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS comment form SQL injection in comment ID\", \"Lab Description\": \"The CMS comment form allows for unsanitized input in the comment ID, making it vulnerable to SQL injection. An attacker can manipulate the comment ID parameter to retrieve or modify comments in the database. To solve: Use SQL injection to extract comment data and manipulate the query.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: API gateway SQL injection in product details lookup\nDescription: The API gateway has an SQL injection vulnerability in the product details lookup query, specifically in the 'product_id' parameter. An attacker can retrieve sensitive product data by exploiting the vulnerability. To solve: Use SQL injection to manipulate the 'product_id' parameter and retrieve product details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API gateway SQL injection in product details lookup\", \"Lab Description\": \"The API gateway has an SQL injection vulnerability in the product details lookup query, specifically in the 'product_id' parameter. An attacker can retrieve sensitive product data by exploiting the vulnerability. To solve: Use SQL injection to manipulate the 'product_id' parameter and retrieve product details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT dashboard GROUP BY SQL injection in sensor statistics\nDescription: The IoT dashboard is vulnerable to SQL injection in the 'GROUP BY' clause of the sensor statistics query. An attacker can exploit this vulnerability to manipulate the sensor data summary. To solve: Use SQL injection to modify the 'GROUP BY' clause and retrieve sensitive statistics from the sensors database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT dashboard GROUP BY SQL injection in sensor statistics\", \"Lab Description\": \"The IoT dashboard is vulnerable to SQL injection in the 'GROUP BY' clause of the sensor statistics query. An attacker can exploit this vulnerability to manipulate the sensor data summary. To solve: Use SQL injection to modify the 'GROUP BY' clause and retrieve sensitive statistics from the sensors database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking portal SQL injection in account transfer page\nDescription: The banking portal account transfer page is vulnerable to SQL injection in the 'amount' parameter, which is unsanitized. An attacker can exploit this vulnerability to manipulate account transfer operations. To solve: Use SQL injection to bypass the transfer amount validation and retrieve sensitive information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking portal SQL injection in account transfer page\", \"Lab Description\": \"The banking portal account transfer page is vulnerable to SQL injection in the 'amount' parameter, which is unsanitized. An attacker can exploit this vulnerability to manipulate account transfer operations. To solve: Use SQL injection to bypass the transfer amount validation and retrieve sensitive information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Inventory API vulnerable to SQL injection via product lookup\nDescription: SQL injection is possible in the 'product lookup' due to unsanitized input, enabling attackers to extract private records. The application directly interpolates user input into SQL queries. To solve: exploit the injection to access hidden inventory data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Inventory API vulnerable to SQL injection via product lookup\", \"Lab Description\": \"SQL injection is possible in the 'product lookup' due to unsanitized input, enabling attackers to extract private records. The application directly interpolates user input into SQL queries. To solve: exploit the injection to access hidden inventory data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Student portal SQL injection in grade report export\nDescription: The 'grade report export' fails to sanitize input, leading to SQL injection vulnerabilities in key queries. The application builds an export query using unvalidated student IDs. To solve: extract grade data for all students.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Student portal SQL injection in grade report export\", \"Lab Description\": \"The 'grade report export' fails to sanitize input, leading to SQL injection vulnerabilities in key queries. The application builds an export query using unvalidated student IDs. To solve: extract grade data for all students.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Healthcare app SQL injection in prescription history access\nDescription: The 'prescription history access' feature allows input to be injected into an SQL query that retrieves prescription records. The application lacks filtering on patient identifiers. To solve: extract prescription data for another patient.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Healthcare app SQL injection in prescription history access\", \"Lab Description\": \"The 'prescription history access' feature allows input to be injected into an SQL query that retrieves prescription records. The application lacks filtering on patient identifiers. To solve: extract prescription data for another patient.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal's transaction history feature allows users to sort transactions based on various fields. The application directly incorporates user-supplied input into the ORDER BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to retrieve sensitive user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS's analytics feature groups page views by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract administrative user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard's device status report feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive device information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API gateway's request logging feature allows sorting logs based on user-defined fields. The application directly incorporates user input into the ORDER BY clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive API keys.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal's account summary feature groups transactions by user-defined criteria. The application incorporates user input directly into the GROUP BY clause without proper sanitization, leading to a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to retrieve sensitive financial data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS's content analytics feature allows filtering based on user-defined conditions. The application incorporates user input directly into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portalâ€™s loan approval feature allows users to filter loans based on specific criteria. The application integrates user input into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive loan applicant data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portalâ€™s loan approval feature allows users to filter loans based on specific criteria. The application integrates user input into the HAVING clause without validation, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to extract sensitive loan applicant data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMSâ€™s article search feature allows users to sort articles based on various criteria. The application includes unsanitized user input directly into the ORDER BY clause, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive article content and user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMSâ€™s article search feature allows users to sort articles based on various criteria. The application includes unsanitized user input directly into the ORDER BY clause, leading to a SQL injection vulnerability. To solve: Exploit the ORDER BY clause to extract sensitive article content and user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboardâ€™s device statistics feature groups devices based on various user-defined criteria. The application improperly integrates user input into the GROUP BY clause, allowing for SQL injection. To solve: Exploit the GROUP BY clause to retrieve sensitive device information and credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboardâ€™s device statistics feature groups devices based on various user-defined criteria. The application improperly integrates user input into the GROUP BY clause, allowing for SQL injection. To solve: Exploit the GROUP BY clause to retrieve sensitive device information and credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API gateway exposes a feature that allows users to filter requests based on various criteria. The application improperly integrates user input into the HAVING clause, which allows SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive API credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API gateway exposes a feature that allows users to filter requests based on various criteria. The application improperly integrates user input into the HAVING clause, which allows SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive API credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portalâ€™s account search feature allows users to search for accounts based on user-defined parameters. The application integrates user input directly into the HAVING clause without sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive account data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portalâ€™s account search feature allows users to search for accounts based on user-defined parameters. The application integrates user input directly into the HAVING clause without sanitization, leading to a SQL injection vulnerability. To solve: Exploit the HAVING clause to retrieve sensitive account data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMSâ€™s user content filter feature allows users to sort content based on various criteria. The application integrates user input directly into the ORDER BY clause, which leads to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user content and administrative data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMSâ€™s user content filter feature allows users to sort content based on various criteria. The application integrates user input directly into the ORDER BY clause, which leads to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user content and administrative data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard allows filtering devices based on user-defined criteria and uses a HAVING clause to refine device data. Improper input handling allows SQL injection in the HAVING clause. To solve: Exploit the HAVING clause to retrieve device secret credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard allows filtering devices based on user-defined criteria and uses a HAVING clause to refine device data. Improper input handling allows SQL injection in the HAVING clause. To solve: Exploit the HAVING clause to retrieve device secret credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portalâ€™s transaction search feature improperly includes user input into the WHERE clause, allowing for SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive transaction details.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portalâ€™s transaction search feature improperly includes user input into the WHERE clause, allowing for SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive transaction details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMSâ€™s user filter functionality is vulnerable to SQL injection because it improperly integrates user input into the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMSâ€™s user filter functionality is vulnerable to SQL injection because it improperly integrates user input into the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows users to sort devices by various attributes. The application includes unsanitized user input directly into the ORDER BY clause, allowing for SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows users to sort devices by various attributes. The application includes unsanitized user input directly into the ORDER BY clause, allowing for SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in GROUP BY Clause\nDescription: The API gateway allows sorting and grouping of data from various endpoints. Improper handling of user input in the GROUP BY clause creates a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract sensitive API credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The API gateway allows sorting and grouping of data from various endpoints. Improper handling of user input in the GROUP BY clause creates a SQL injection vulnerability. To solve: Exploit the GROUP BY clause to extract sensitive API credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portalâ€™s account balance feature improperly integrates user input into the SELECT clause, allowing for SQL injection. To solve: Exploit the SELECT clause to retrieve sensitive customer information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portalâ€™s account balance feature improperly integrates user input into the SELECT clause, allowing for SQL injection. To solve: Exploit the SELECT clause to retrieve sensitive customer information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMSâ€™s article search feature includes user input directly into the WHERE clause, making it vulnerable to SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive article and user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMSâ€™s article search feature includes user input directly into the WHERE clause, making it vulnerable to SQL injection. To solve: Inject SQL into the WHERE clause to retrieve sensitive article and user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboardâ€™s device filter feature improperly uses user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive device credentials.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboardâ€™s device filter feature improperly uses user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive device credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in WHERE Clause\nDescription: The API gatewayâ€™s query endpoint improperly integrates user input into the WHERE clause, creating an SQL injection vulnerability. To solve: Exploit the WHERE clause to retrieve sensitive API credentials.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in WHERE Clause\", \"Lab Description\": \"The API gatewayâ€™s query endpoint improperly integrates user input into the WHERE clause, creating an SQL injection vulnerability. To solve: Exploit the WHERE clause to retrieve sensitive API credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portalâ€™s transaction sorting feature includes user input in the ORDER BY clause, making it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive transaction data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portalâ€™s transaction sorting feature includes user input in the ORDER BY clause, making it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in JOIN Clause\nDescription: The CMS application joins the articles table with the authors table, but it does not sanitize user input. To solve: Exploit the JOIN clause to extract sensitive data from the authors table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in JOIN Clause\", \"Lab Description\": \"The CMS application joins the articles table with the authors table, but it does not sanitize user input. To solve: Exploit the JOIN clause to extract sensitive data from the authors table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portalâ€™s transaction summary page uses user input in the GROUP BY clause for sorting. To solve: Exploit the GROUP BY clause to retrieve sensitive account information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portalâ€™s transaction summary page uses user input in the GROUP BY clause for sorting. To solve: Exploit the GROUP BY clause to retrieve sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in LIMIT Clause\nDescription: The IoT dashboard improperly includes user input in the LIMIT clause, allowing for SQL injection. To solve: Exploit the LIMIT clause to extract sensitive device data.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in LIMIT Clause\", \"Lab Description\": \"The IoT dashboard improperly includes user input in the LIMIT clause, allowing for SQL injection. To solve: Exploit the LIMIT clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS application allows administrators to add new users through a form, but it does not properly sanitize the input in the INSERT query. To solve: Inject SQL into the INSERT clause to create a new admin user.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS application allows administrators to add new users through a form, but it does not properly sanitize the input in the INSERT query. To solve: Inject SQL into the INSERT clause to create a new admin user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in LIMIT Clause\nDescription: The API Gateway improperly uses user input in the LIMIT clause for paginating API results. To solve: Exploit the LIMIT clause to retrieve sensitive API client data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in LIMIT Clause\", \"Lab Description\": \"The API Gateway improperly uses user input in the LIMIT clause for paginating API results. To solve: Exploit the LIMIT clause to retrieve sensitive API client data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portalâ€™s report generation feature improperly handles user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive user and account information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portalâ€™s report generation feature improperly handles user input in the HAVING clause, allowing SQL injection. To solve: Exploit the HAVING clause to retrieve sensitive user and account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard improperly uses user input in the ORDER BY clause, allowing SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device configuration data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard improperly uses user input in the ORDER BY clause, allowing SQL injection. To solve: Exploit the ORDER BY clause to retrieve sensitive device configuration data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in DELETE Clause\nDescription: The CMS allows administrators to delete posts via user input, but fails to sanitize the input properly, leaving it vulnerable to SQL injection. To solve: Inject SQL into the DELETE clause to remove data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in DELETE Clause\", \"Lab Description\": \"The CMS allows administrators to delete posts via user input, but fails to sanitize the input properly, leaving it vulnerable to SQL injection. To solve: Inject SQL into the DELETE clause to remove data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal filters transactions using user input in the WHERE clause, but does not sanitize it properly. To solve: Exploit the WHERE clause to retrieve sensitive account data from the transactions table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal filters transactions using user input in the WHERE clause, but does not sanitize it properly. To solve: Exploit the WHERE clause to retrieve sensitive account data from the transactions table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API Gateway uses user input in the ORDER BY clause to sort API results, leaving it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user credentials.\nDifficulty: Easy\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API Gateway uses user input in the ORDER BY clause to sort API results, leaving it vulnerable to SQL injection. To solve: Exploit the ORDER BY clause to extract sensitive user credentials.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in LIMIT Clause\nDescription: The IoT dashboard uses user input in the LIMIT clause to paginate results. To solve: Exploit the LIMIT clause to extract device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in LIMIT Clause\", \"Lab Description\": \"The IoT dashboard uses user input in the LIMIT clause to paginate results. To solve: Exploit the LIMIT clause to extract device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in UPDATE Clause\nDescription: The CMS allows administrators to update articles but does not sanitize the input used in the UPDATE clause. To solve: Inject SQL into the UPDATE clause to modify article data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UPDATE Clause\", \"Lab Description\": \"The CMS allows administrators to update articles but does not sanitize the input used in the UPDATE clause. To solve: Inject SQL into the UPDATE clause to modify article data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal uses user input in the HAVING clause of SQL queries to filter transactions. To solve: Exploit the HAVING clause to extract sensitive account information.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal uses user input in the HAVING clause of SQL queries to filter transactions. To solve: Exploit the HAVING clause to extract sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in WHERE Clause\nDescription: The IoT dashboard queries devices based on user input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive device configurations.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in WHERE Clause\", \"Lab Description\": \"The IoT dashboard queries devices based on user input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive device configurations.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows users to submit content for publication, but fails to sanitize input in the INSERT clause. To solve: Inject SQL into the INSERT statement to create a new admin user.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows users to submit content for publication, but fails to sanitize input in the INSERT clause. To solve: Inject SQL into the INSERT statement to create a new admin user.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portal allows users to check their transaction history but fails to sanitize user input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive account data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portal allows users to check their transaction history but fails to sanitize user input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive account data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard uses user input in the GROUP BY clause to group devices by their type. To solve: Exploit the GROUP BY clause to extract sensitive device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard uses user input in the GROUP BY clause to group devices by their type. To solve: Exploit the GROUP BY clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in DELETE Clause\nDescription: The CMS allows users to delete their own content but fails to sanitize the input used in the DELETE clause. To solve: Inject SQL into the DELETE clause to delete other users' content.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in DELETE Clause\", \"Lab Description\": \"The CMS allows users to delete their own content but fails to sanitize the input used in the DELETE clause. To solve: Inject SQL into the DELETE clause to delete other users' content.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in INSERT Clause\nDescription: The API Gateway allows users to add new records but fails to sanitize the input used in the INSERT clause. To solve: Inject SQL into the INSERT statement to add new users to the system.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in INSERT Clause\", \"Lab Description\": \"The API Gateway allows users to add new records but fails to sanitize the input used in the INSERT clause. To solve: Inject SQL into the INSERT statement to add new users to the system.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal allows users to filter transactions using the HAVING clause. To solve: Exploit the HAVING clause to extract sensitive transaction data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions using the HAVING clause. To solve: Exploit the HAVING clause to extract sensitive transaction data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows sorting of device data by user input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows sorting of device data by user input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMS allows administrators to view articles by category using the WHERE clause. To solve: Inject SQL into the WHERE clause to retrieve all articles in the system, including hidden ones.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMS allows administrators to view articles by category using the WHERE clause. To solve: Inject SQL into the WHERE clause to retrieve all articles in the system, including hidden ones.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to filter account balances by grouping. To solve: Exploit the GROUP BY clause to extract sensitive user balance information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to filter account balances by grouping. To solve: Exploit the GROUP BY clause to extract sensitive user balance information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in WHERE Clause\nDescription: The API Gateway allows users to query specific records but fails to sanitize the input in the WHERE clause. To solve: Exploit the WHERE clause to extract user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in WHERE Clause\", \"Lab Description\": \"The API Gateway allows users to query specific records but fails to sanitize the input in the WHERE clause. To solve: Exploit the WHERE clause to extract user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal allows users to sort transactions by date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive account data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal allows users to sort transactions by date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to extract sensitive account data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard uses the HAVING clause to filter devices based on sensor data but fails to sanitize input. To solve: Exploit the HAVING clause to extract sensitive device data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard uses the HAVING clause to filter devices based on sensor data but fails to sanitize input. To solve: Exploit the HAVING clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in UNION Clause\nDescription: The CMS allows users to filter content based on tags but fails to sanitize user input in the UNION clause. To solve: Exploit the UNION clause to extract content-related data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UNION Clause\", \"Lab Description\": \"The CMS allows users to filter content based on tags but fails to sanitize user input in the UNION clause. To solve: Exploit the UNION clause to extract content-related data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows users to query record details but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows users to query record details but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in INSERT Clause\nDescription: The banking portal allows users to add transactions but fails to sanitize input in the INSERT clause. To solve: Inject SQL to add fake transactions.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in INSERT Clause\", \"Lab Description\": \"The banking portal allows users to add transactions but fails to sanitize input in the INSERT clause. To solve: Inject SQL to add fake transactions.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in UPDATE Clause\nDescription: The IoT dashboard allows users to update device status but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in UPDATE Clause\", \"Lab Description\": \"The IoT dashboard allows users to update device status but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in UPDATE Clause\nDescription: The CMS allows administrators to update article details but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify article content.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UPDATE Clause\", \"Lab Description\": \"The CMS allows administrators to update article details but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify article content.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in DELETE Clause\nDescription: The API Gateway allows users to delete specific records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to remove records.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in DELETE Clause\", \"Lab Description\": \"The API Gateway allows users to delete specific records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to remove records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to view transactions grouped by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive account information.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to view transactions grouped by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive account information.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard allows users to filter devices based on their sensor data using the HAVING clause, but input is not sanitized. To solve: Exploit the HAVING clause to extract data about users and devices.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard allows users to filter devices based on their sensor data using the HAVING clause, but input is not sanitized. To solve: Exploit the HAVING clause to extract data about users and devices.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in SELECT Clause\nDescription: The CMS allows filtering of content based on tags but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive content.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in SELECT Clause\", \"Lab Description\": \"The CMS allows filtering of content based on tags but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive content.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in WHERE Clause\nDescription: The API Gateway allows querying records based on filters but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to inject SQL and extract sensitive data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in WHERE Clause\", \"Lab Description\": \"The API Gateway allows querying records based on filters but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to inject SQL and extract sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in DELETE Clause\nDescription: The banking portal allows deletion of transactions but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete specific records.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in DELETE Clause\", \"Lab Description\": \"The banking portal allows deletion of transactions but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete specific records.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in SELECT Clause\nDescription: The IoT dashboard allows querying device information but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive device data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in SELECT Clause\", \"Lab Description\": \"The IoT dashboard allows querying device information but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to extract sensitive device data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows inserting new articles but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add fake articles.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows inserting new articles but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add fake articles.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in UPDATE Clause\nDescription: The API Gateway allows updating user information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user details.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in UPDATE Clause\", \"Lab Description\": \"The API Gateway allows updating user information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user details.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in LIMIT Clause\nDescription: The banking portal allows filtering transactions but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to bypass filtering and extract more data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in LIMIT Clause\", \"Lab Description\": \"The banking portal allows filtering transactions but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to bypass filtering and extract more data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in ORDER BY Clause\nDescription: The banking portal allows sorting transactions by date, but input is not sanitized in the ORDER BY clause. To solve: Exploit the ORDER BY clause to manipulate the query and extract sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The banking portal allows sorting transactions by date, but input is not sanitized in the ORDER BY clause. To solve: Exploit the ORDER BY clause to manipulate the query and extract sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in INSERT Clause\nDescription: The IoT dashboard allows users to add devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the device database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in INSERT Clause\", \"Lab Description\": \"The IoT dashboard allows users to add devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the device database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMS allows filtering of articles but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive content from the articles database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMS allows filtering of articles but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to extract sensitive content from the articles database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in INSERT Clause\nDescription: The API Gateway allows adding new records but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add arbitrary data into the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in INSERT Clause\", \"Lab Description\": \"The API Gateway allows adding new records but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to add arbitrary data into the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portal allows filtering transactions by account type but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portal allows filtering transactions by account type but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in JOIN Clause\nDescription: The CMS allows displaying user comments on articles but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to extract user data from the 'users' table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in JOIN Clause\", \"Lab Description\": \"The CMS allows displaying user comments on articles but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to extract user data from the 'users' table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in DELETE Clause\nDescription: The API Gateway allows deleting records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete critical records from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in DELETE Clause\", \"Lab Description\": \"The API Gateway allows deleting records but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete critical records from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in GROUP BY Clause\nDescription: The IoT dashboard allows users to view device status grouped by categories but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive information from the devices table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The IoT dashboard allows users to view device status grouped by categories but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to extract sensitive information from the devices table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in LIMIT Clause\nDescription: The banking portal allows limiting the number of transactions displayed but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to extract sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in LIMIT Clause\", \"Lab Description\": \"The banking portal allows limiting the number of transactions displayed but fails to sanitize input in the LIMIT clause. To solve: Exploit the LIMIT clause to extract sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in INSERT Clause\nDescription: The IoT dashboard allows adding new devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the devices table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in INSERT Clause\", \"Lab Description\": \"The IoT dashboard allows adding new devices but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the devices table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in JOIN Clause\nDescription: The API Gateway allows querying joined data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve additional sensitive data from other tables.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in JOIN Clause\", \"Lab Description\": \"The API Gateway allows querying joined data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve additional sensitive data from other tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS allows categorizing articles by author but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS allows categorizing articles by author but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in DELETE Clause\nDescription: The IoT dashboard allows deleting devices but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete arbitrary devices from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in DELETE Clause\", \"Lab Description\": \"The IoT dashboard allows deleting devices but fails to sanitize input in the DELETE clause. To solve: Exploit the DELETE clause to delete arbitrary devices from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in SELECT Clause\nDescription: The banking portal allows viewing transactions by account number but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in SELECT Clause\", \"Lab Description\": \"The banking portal allows viewing transactions by account number but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMS allows sorting articles by publication date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMS allows sorting articles by publication date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in UPDATE Clause\nDescription: The API Gateway allows updating user profile information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in UPDATE Clause\", \"Lab Description\": \"The API Gateway allows updating user profile information but fails to sanitize input in the UPDATE clause. To solve: Exploit the UPDATE clause to modify user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal allows filtering transactions by type but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal allows filtering transactions by type but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in WHERE Clause\nDescription: The IoT dashboard allows users to view device status based on device ID but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from other tables.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in WHERE Clause\", \"Lab Description\": \"The IoT dashboard allows users to view device status based on device ID but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from other tables.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows admins to add new categories but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the categories table.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows admins to add new categories but fails to sanitize input in the INSERT clause. To solve: Exploit the INSERT clause to insert malicious data into the categories table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows querying users by email but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows querying users by email but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in HAVING Clause\nDescription: The banking portal allows filtering transactions by date but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in HAVING Clause\", \"Lab Description\": \"The banking portal allows filtering transactions by date but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in JOIN Clause\nDescription: The IoT dashboard allows joining device information with user data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in JOIN Clause\", \"Lab Description\": \"The IoT dashboard allows joining device information with user data but fails to sanitize input in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in WHERE Clause\nDescription: The CMS allows querying articles by author but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in WHERE Clause\", \"Lab Description\": \"The CMS allows querying articles by author but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in ORDER BY Clause\nDescription: The API Gateway allows ordering users by registration date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve additional sensitive data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The API Gateway allows ordering users by registration date but fails to sanitize input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve additional sensitive data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in UNION SELECT\nDescription: The banking portal allows filtering user transactions but fails to sanitize input in the UNION SELECT clause. To solve: Exploit the UNION SELECT clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in UNION SELECT\", \"Lab Description\": \"The banking portal allows filtering user transactions but fails to sanitize input in the UNION SELECT clause. To solve: Exploit the UNION SELECT clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in GROUP BY Clause\nDescription: The CMS allows grouping articles by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The CMS allows grouping articles by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal allows users to query their transaction history by date, but the query is vulnerable in the WHERE clause. To solve: Exploit the WHERE clause to extract unauthorized information from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal allows users to query their transaction history by date, but the query is vulnerable in the WHERE clause. To solve: Exploit the WHERE clause to extract unauthorized information from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in DELETE Clause\nDescription: The CMS allows admins to delete posts by post ID but fails to sanitize the input. To solve: Exploit the DELETE clause to remove posts or insert malicious data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in DELETE Clause\", \"Lab Description\": \"The CMS allows admins to delete posts by post ID but fails to sanitize the input. To solve: Exploit the DELETE clause to remove posts or insert malicious data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows querying user details by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the users table.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows querying user details by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the users table.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to group transactions by type but fails to sanitize the input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to group transactions by type but fails to sanitize the input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows sorting devices by name but fails to sanitize the input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows sorting devices by name but fails to sanitize the input in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in JOIN Clause\nDescription: The CMS allows fetching articles with their associated authors but fails to sanitize the JOIN clause input. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in JOIN Clause\", \"Lab Description\": \"The CMS allows fetching articles with their associated authors but fails to sanitize the JOIN clause input. To solve: Exploit the JOIN clause to retrieve unauthorized user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API Gateway allows users to filter transactions by amount, but it fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API Gateway allows users to filter transactions by amount, but it fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve additional sensitive data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in INSERT Clause\nDescription: The CMS allows users to submit comments but fails to sanitize input during the INSERT operation. To solve: Exploit the INSERT clause to execute arbitrary SQL queries.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in INSERT Clause\", \"Lab Description\": \"The CMS allows users to submit comments but fails to sanitize input during the INSERT operation. To solve: Exploit the INSERT clause to execute arbitrary SQL queries.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in LIKE Clause\nDescription: The banking portal allows users to search transactions by description but fails to sanitize input in the LIKE clause. To solve: Exploit the LIKE clause to retrieve unauthorized data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in LIKE Clause\", \"Lab Description\": \"The banking portal allows users to search transactions by description but fails to sanitize input in the LIKE clause. To solve: Exploit the LIKE clause to retrieve unauthorized data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in AND Clause\nDescription: The banking portal allows users to filter transactions by status, but the query is vulnerable in the AND clause. To solve: Exploit the AND clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in AND Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions by status, but the query is vulnerable in the AND clause. To solve: Exploit the AND clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in UNION Clause\nDescription: The CMS allows users to search posts by keyword, but the query is vulnerable in the UNION clause. To solve: Exploit the UNION clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in UNION Clause\", \"Lab Description\": \"The CMS allows users to search posts by keyword, but the query is vulnerable in the UNION clause. To solve: Exploit the UNION clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in GROUP BY Clause\nDescription: The API Gateway allows users to filter products by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The API Gateway allows users to filter products by category but fails to sanitize input in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in LIMIT Clause\nDescription: The IoT dashboard allows users to view a list of devices with a limit on the number of devices shown, but the query is vulnerable in the LIMIT clause. To solve: Exploit the LIMIT clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in LIMIT Clause\", \"Lab Description\": \"The IoT dashboard allows users to view a list of devices with a limit on the number of devices shown, but the query is vulnerable in the LIMIT clause. To solve: Exploit the LIMIT clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows querying users by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows querying users by email but fails to sanitize the input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve sensitive user data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: CMS SQL Injection in HAVING Clause\nDescription: The CMS allows filtering articles by tag but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in HAVING Clause\", \"Lab Description\": \"The CMS allows filtering articles by tag but fails to sanitize input in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in ORDER BY Clause\nDescription: The IoT dashboard allows users to sort devices by name, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized user data.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The IoT dashboard allows users to sort devices by name, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal allows users to filter transactions by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in HAVING Clause\nDescription: The API Gateway allows users to filter products by price range, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in HAVING Clause\", \"Lab Description\": \"The API Gateway allows users to filter products by price range, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve sensitive user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in WHERE Clause\nDescription: The banking portal allows users to filter account details by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve sensitive data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in WHERE Clause\", \"Lab Description\": \"The banking portal allows users to filter account details by account number, but fails to sanitize input in the WHERE clause. To solve: Exploit the WHERE clause to retrieve sensitive data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: API Gateway SQL Injection in JOIN Clause\nDescription: The API Gateway allows filtering users by role, but the query is vulnerable in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in JOIN Clause\", \"Lab Description\": \"The API Gateway allows filtering users by role, but the query is vulnerable in the JOIN clause. To solve: Exploit the JOIN clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: CMS SQL Injection in ORDER BY Clause\nDescription: The CMS allows users to sort articles by date, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"CMS SQL Injection in ORDER BY Clause\", \"Lab Description\": \"The CMS allows users to sort articles by date, but the query is vulnerable in the ORDER BY clause. To solve: Exploit the ORDER BY clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Banking Portal SQL Injection in GROUP BY Clause\nDescription: The banking portal allows users to filter transactions by month, but the query is vulnerable in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve unauthorized data from the database.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Banking Portal SQL Injection in GROUP BY Clause\", \"Lab Description\": \"The banking portal allows users to filter transactions by month, but the query is vulnerable in the GROUP BY clause. To solve: Exploit the GROUP BY clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: IoT Dashboard SQL Injection in HAVING Clause\nDescription: The IoT dashboard allows users to filter devices by status, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized user data.\nDifficulty: Hard\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"IoT Dashboard SQL Injection in HAVING Clause\", \"Lab Description\": \"The IoT dashboard allows users to filter devices by status, but the query is vulnerable in the HAVING clause. To solve: Exploit the HAVING clause to retrieve unauthorized user data.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: API Gateway SQL Injection in SELECT Clause\nDescription: The API Gateway allows filtering products by name, but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve unauthorized data from the database.\nDifficulty: Medium\nVuln: SQL injection\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"API Gateway SQL Injection in SELECT Clause\", \"Lab Description\": \"The API Gateway allows filtering products by name, but fails to sanitize input in the SELECT clause. To solve: Exploit the SELECT clause to retrieve unauthorized data from the database.\", \"Vulnerability name\": \"SQL injection\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: This lab's OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by manipulating the redirect flow to your attacker server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"This lab's OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by manipulating the redirect flow to your attacker server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation\nDescription: This lab's GraphQL endpoint allows session fixation attacks through a vulnerable mutation. The application assigns session tokens based on client-provided values. To solve: fixate a session token and trick an admin into using it to gain privileged access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation\", \"Lab Description\": \"This lab's GraphQL endpoint allows session fixation attacks through a vulnerable mutation. The application assigns session tokens based on client-provided values. To solve: fixate a session token and trick an admin into using it to gain privileged access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: This lab's JWT verification microservice improperly validates the kid header parameter. The application allows directory traversal in the key file lookup. To solve: forge a valid admin token by forcing the server to use your malicious public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"This lab's JWT verification microservice improperly validates the kid header parameter. The application allows directory traversal in the key file lookup. To solve: forge a valid admin token by forcing the server to use your malicious public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session swapping via GraphQL batch mutation\nDescription: This lab's GraphQL endpoint processes batch mutations with session state conflicts. The application fails to isolate session contexts between parallel operations. To solve: execute a batch mutation that swaps your session ID with an admin's active session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session swapping via GraphQL batch mutation\", \"Lab Description\": \"This lab's GraphQL endpoint processes batch mutations with session state conflicts. The application fails to isolate session contexts between parallel operations. To solve: execute a batch mutation that swaps your session ID with an admin's active session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via insecure PKCE implementation\nDescription: This lab's OAuth flow implements PKCE security incorrectly. The application fails to bind the code_verifier to the authorization request. To solve: intercept an authorization code and redeem it without knowing the original code_challenge.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via insecure PKCE implementation\", \"Lab Description\": \"This lab's OAuth flow implements PKCE security incorrectly. The application fails to bind the code_verifier to the authorization request. To solve: intercept an authorization code and redeem it without knowing the original code_challenge.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature stripping via HTTP method tampering in REST API\nDescription: This lab's JWT validation endpoint is vulnerable to HTTP method manipulation. The application fails to verify signatures on HEAD requests while still returning privileged data. To solve: extract admin credentials by bypassing signature validation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping via HTTP method tampering in REST API\", \"Lab Description\": \"This lab's JWT validation endpoint is vulnerable to HTTP method manipulation. The application fails to verify signatures on HEAD requests while still returning privileged data. To solve: extract admin credentials by bypassing signature validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA authentication\nDescription: This lab's Single Page Application implements OAuth with overly permissive CORS headers. The application exposes access tokens to arbitrary origins through insecure response headers. To solve: craft a malicious website that steals OAuth tokens through cross-origin requests.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA authentication\", \"Lab Description\": \"This lab's Single Page Application implements OAuth with overly permissive CORS headers. The application exposes access tokens to arbitrary origins through insecure response headers. To solve: craft a malicious website that steals OAuth tokens through cross-origin requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation through GraphQL websocket subscriptions\nDescription: This lab's GraphQL over WebSocket implementation is vulnerable to session fixation during subscription initialization. The application accepts session identifiers from unauthenticated websocket connections. To solve: establish a websocket connection with a fixed session ID and trick an admin into using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through GraphQL websocket subscriptions\", \"Lab Description\": \"This lab's GraphQL over WebSocket implementation is vulnerable to session fixation during subscription initialization. The application accepts session identifiers from unauthenticated websocket connections. To solve: establish a websocket connection with a fixed session ID and trick an admin into using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON parsing in REST API\nDescription: This lab's JWT implementation improperly handles nested JSON objects in claims. The application fails to validate claim structures when using the 'none' algorithm. To solve: escalate privileges by injecting nested admin claims into a valid token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON parsing in REST API\", \"Lab Description\": \"This lab's JWT implementation improperly handles nested JSON objects in claims. The application fails to validate claim structures when using the 'none' algorithm. To solve: escalate privileges by injecting nested admin claims into a valid token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via state parameter reflection\nDescription: This lab's OAuth implementation reflects the state parameter without validation. The application echoes the state value in the redirect URL after authentication. To solve: craft a malicious state value that executes XSS when reflected to steal tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via state parameter reflection\", \"Lab Description\": \"This lab's OAuth implementation reflects the state parameter without validation. The application echoes the state value in the redirect URL after authentication. To solve: craft a malicious state value that executes XSS when reflected to steal tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 header compression in REST API\nDescription: This lab's session management is vulnerable to HPACK compression attacks in HTTP/2. The application accepts session IDs from compressed headers without proper validation. To solve: fixate a session ID by manipulating header compression and trick an admin into using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 header compression in REST API\", \"Lab Description\": \"This lab's session management is vulnerable to HPACK compression attacks in HTTP/2. The application accepts session IDs from compressed headers without proper validation. To solve: fixate a session ID by manipulating header compression and trick an admin into using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via JWK header injection in REST API\nDescription: This lab's JWT implementation is vulnerable to algorithm confusion attacks through JWK header injection. The application verifies tokens using different algorithms based on the provided JWK header. To solve: forge a valid admin token by forcing the server to use a public key you control.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via JWK header injection in REST API\", \"Lab Description\": \"This lab's JWT implementation is vulnerable to algorithm confusion attacks through JWK header injection. The application verifies tokens using different algorithms based on the provided JWK header. To solve: forge a valid admin token by forcing the server to use a public key you control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via OpenID configuration hijacking\nDescription: This lab's OAuth implementation dynamically loads OpenID configuration from an unverified location. The application follows redirects when fetching the OpenID configuration. To solve: hijack the configuration endpoint to point to your malicious server and steal authorization codes.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via OpenID configuration hijacking\", \"Lab Description\": \"This lab's OAuth implementation dynamically loads OpenID configuration from an unverified location. The application follows redirects when fetching the OpenID configuration. To solve: hijack the configuration endpoint to point to your malicious server and steal authorization codes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket connection ID reuse\nDescription: This lab's real-time API assigns session tokens based on WebSocket connection IDs. The application reuses connection IDs when connections are dropped unexpectedly. To solve: force a connection drop and predict the next connection ID to fixate a session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket connection ID reuse\", \"Lab Description\": \"This lab's real-time API assigns session tokens based on WebSocket connection IDs. The application reuses connection IDs when connections are dropped unexpectedly. To solve: force a connection drop and predict the next connection ID to fixate a session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key injection via x5u header in microservice authentication\nDescription: This lab's JWT validation service improperly processes x5u headers that reference external X.509 certificates. The application fails to validate certificate sources when verifying signatures. To solve: forge an admin token by injecting your own certificate chain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key injection via x5u header in microservice authentication\", \"Lab Description\": \"This lab's JWT validation service improperly processes x5u headers that reference external X.509 certificates. The application fails to validate certificate sources when verifying signatures. To solve: forge an admin token by injecting your own certificate chain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe in response_mode=form_post\nDescription: This lab's OAuth implementation uses response_mode=form_post with insufficient frame busting. The application renders the token submission form in a way that allows iframe embedding. To solve: create a malicious page that loads the OAuth callback in an iframe to intercept the token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe in response_mode=form_post\", \"Lab Description\": \"This lab's OAuth implementation uses response_mode=form_post with insufficient frame busting. The application renders the token submission form in a way that allows iframe embedding. To solve: create a malicious page that loads the OAuth callback in an iframe to intercept the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 trailer headers in REST API\nDescription: This lab's session management is vulnerable to trailer header injection in HTTP/2. The application processes Set-Cookie headers from trailers after the request body. To solve: craft a request with malicious trailer headers to fixate a session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 trailer headers in REST API\", \"Lab Description\": \"This lab's session management is vulnerable to trailer header injection in HTTP/2. The application processes Set-Cookie headers from trailers after the request body. To solve: craft a request with malicious trailer headers to fixate a session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when alg:none is specified. To solve: forge a valid admin token by modifying your JWT without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when alg:none is specified. To solve: forge a valid admin token by modifying your JWT without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by intercepting the authorization flow and modifying the redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth token by intercepting the authorization flow and modifying the redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in GraphQL authentication endpoint\nDescription: The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate tokens after login. To solve: fixate a session token on victim then trigger authentication to gain access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in GraphQL authentication endpoint\", \"Lab Description\": \"The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate tokens after login. To solve: fixate a session token on victim then trigger authentication to gain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification microservice improperly validates the kid (key ID) header parameter. The application allows directory traversal in key file lookup. To solve: forge a valid admin token by manipulating the kid header to reference a predictable local file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification microservice improperly validates the kid (key ID) header parameter. The application allows directory traversal in key file lookup. To solve: forge a valid admin token by manipulating the kid header to reference a predictable local file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state parameter\nDescription: The OAuth implementation fails to properly validate the state parameter between requests. The application associates tokens with the wrong session if state changes mid-flow. To solve: intercept the OAuth flow and swap the state parameter to hijack another user's token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state parameter\", \"Lab Description\": \"The OAuth implementation fails to properly validate the state parameter between requests. The application associates tokens with the wrong session if state changes mid-flow. To solve: intercept the OAuth flow and swap the state parameter to hijack another user's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session prediction via insecure cookie generation\nDescription: The application uses predictable session cookie generation based on timestamps. The cookie can be brute-forced by enumerating possible time values. To solve: predict an active admin session cookie by analyzing the cookie generation pattern.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session prediction via insecure cookie generation\", \"Lab Description\": \"The application uses predictable session cookie generation based on timestamps. The cookie can be brute-forced by enumerating possible time values. To solve: predict an active admin session cookie by analyzing the cookie generation pattern.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers. The application fails to verify the source of public keys. To solve: forge a valid admin token by hosting a malicious JWKS endpoint and injecting your public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers. The application fails to verify the source of public keys. To solve: forge a valid admin token by hosting a malicious JWKS endpoint and injecting your public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via insecure PKCE implementation\nDescription: The OAuth provider fails to properly validate Proof Key for Code Exchange (PKCE) parameters. The application accepts authorization codes without matching code verifiers. To solve: steal an authorization code and exchange it for a token without knowing the original code_verifier.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via insecure PKCE implementation\", \"Lab Description\": \"The OAuth provider fails to properly validate Proof Key for Code Exchange (PKCE) parameters. The application accepts authorization codes without matching code verifiers. To solve: steal an authorization code and exchange it for a token without knowing the original code_verifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via subdomain cookie scope\nDescription: The application sets session cookies with overly broad domain scope (.example.com). The cookie can be fixed across subdomains. To solve: obtain a session cookie from a vulnerable subdomain and reuse it on the target application.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via subdomain cookie scope\", \"Lab Description\": \"The application sets session cookies with overly broad domain scope (.example.com). The cookie can be fixed across subdomains. To solve: obtain a session cookie from a vulnerable subdomain and reuse it on the target application.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header SSRF in microservice authentication\nDescription: The JWT validation service blindly trusts x5u header certificates from external URLs. The application fails to sanitize certificate fetch requests. To solve: forge an admin token by hosting a malicious X.509 certificate and exploiting SSRF in the certificate fetching process.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header SSRF in microservice authentication\", \"Lab Description\": \"The JWT validation service blindly trusts x5u header certificates from external URLs. The application fails to sanitize certificate fetch requests. To solve: forge an admin token by hosting a malicious X.509 certificate and exploiting SSRF in the certificate fetching process.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure fragment redirect\nDescription: The OAuth implementation leaks access tokens in URL fragments during redirects. The application fails to properly handle the response_type=token flow. To solve: intercept the redirect and extract the token from the fragment before the client-side JavaScript processes it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure fragment redirect\", \"Lab Description\": \"The OAuth implementation leaks access tokens in URL fragments during redirects. The application fails to properly handle the response_type=token flow. To solve: intercept the redirect and extract the token from the fragment before the client-side JavaScript processes it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking via WebSocket authentication bypass\nDescription: The application authenticates WebSocket connections using predictable session tokens. The WebSocket endpoint fails to validate token origin. To solve: predict or intercept a WebSocket session token and hijack an active session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via WebSocket authentication bypass\", \"Lab Description\": \"The application authenticates WebSocket connections using predictable session tokens. The WebSocket endpoint fails to validate token origin. To solve: predict or intercept a WebSocket session token and hijack an active session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none exploitation in REST API authentication\nDescription: The application uses JSON Web Tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an administrative JWT by removing the signature and modifying claims.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none exploitation in REST API authentication\", \"Lab Description\": \"The application uses JSON Web Tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an administrative JWT by removing the signature and modifying claims.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri in social login\nDescription: The application's OAuth implementation fails to validate redirect_uri parameters properly, allowing authorization code interception. The vulnerable flow leaks tokens to attacker-controlled domains. To solve: steal authorization code by manipulating redirect_uri and exchange it for access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri in social login\", \"Lab Description\": \"The application's OAuth implementation fails to validate redirect_uri parameters properly, allowing authorization code interception. The vulnerable flow leaks tokens to attacker-controlled domains. To solve: steal authorization code by manipulating redirect_uri and exchange it for access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unsafe session regeneration in GraphQL endpoint\nDescription: The application's GraphQL API maintains sessions after password changes without proper invalidation. The vulnerable mutation allows maintaining active sessions post-authentication changes. To solve: fixate session on victim account before password change, then reuse session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unsafe session regeneration in GraphQL endpoint\", \"Lab Description\": \"The application's GraphQL API maintains sessions after password changes without proper invalidation. The vulnerable mutation allows maintaining active sessions post-authentication changes. To solve: fixate session on victim account before password change, then reuse session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The application's JWT validation improperly uses user-controlled kid header to load verification keys from filesystem. The vulnerable implementation allows directory traversal via kid parameter. To solve: forge admin token by forcing system to use attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly uses user-controlled kid header to load verification keys from filesystem. The vulnerable implementation allows directory traversal via kid parameter. To solve: forge admin token by forcing system to use attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session hijacking via WebSocket connection hijack\nDescription: The application's WebSocket handshake fails to validate session transition from HTTP to WS protocol. The vulnerable implementation accepts existing HTTP cookies without re-authentication. To solve: hijack active session by intercepting WebSocket upgrade request.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via WebSocket connection hijack\", \"Lab Description\": \"The application's WebSocket handshake fails to validate session transition from HTTP to WS protocol. The vulnerable implementation accepts existing HTTP cookies without re-authentication. To solve: hijack active session by intercepting WebSocket upgrade request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state parameter\nDescription: The application's OAuth flow fails to properly validate state parameter between requests. The vulnerable implementation allows swapping authorization codes between clients. To solve: intercept victim's auth code and associate it with attacker's session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state parameter\", \"Lab Description\": \"The application's OAuth flow fails to properly validate state parameter between requests. The vulnerable implementation allows swapping authorization codes between clients. To solve: intercept victim's auth code and associate it with attacker's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion attack in REST API authentication\nDescription: The application's JWT implementation fails to validate the algorithm specified in the token header against the server's expected algorithm. The vulnerable endpoint accepts RS256-signed tokens when configured for HS256. To solve: forge a valid JWT by converting public key to HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in REST API authentication\", \"Lab Description\": \"The application's JWT implementation fails to validate the algorithm specified in the token header against the server's expected algorithm. The vulnerable endpoint accepts RS256-signed tokens when configured for HS256. To solve: forge a valid JWT by converting public key to HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation race condition\nDescription: The application's GraphQL mutation for session generation contains a race condition when multiple requests are sent simultaneously. The vulnerable implementation allows session tokens to remain valid after password changes. To solve: fixate session token during password reset and maintain access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation race condition\", \"Lab Description\": \"The application's GraphQL mutation for session generation contains a race condition when multiple requests are sent simultaneously. The vulnerable implementation allows session tokens to remain valid after password changes. To solve: fixate session token during password reset and maintain access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via verbose error messages\nDescription: The application's OAuth token endpoint leaks sensitive information through detailed error responses. The vulnerable implementation reveals valid tokens in error messages during race conditions. To solve: trigger token leakage through concurrent requests and harvest valid tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via verbose error messages\", \"Lab Description\": \"The application's OAuth token endpoint leaks sensitive information through detailed error responses. The vulnerable implementation reveals valid tokens in error messages during race conditions. To solve: trigger token leakage through concurrent requests and harvest valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim injection via unverified header parameters in REST API\nDescription: The application's JWT validation fails to verify all header parameters while processing tokens. The vulnerable implementation allows injecting custom claims through unverified header parameters. To solve: escalate privileges by injecting admin claims through custom headers.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via unverified header parameters in REST API\", \"Lab Description\": \"The application's JWT validation fails to verify all header parameters while processing tokens. The vulnerable implementation allows injecting custom claims through unverified header parameters. To solve: escalate privileges by injecting admin claims through custom headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket subprotocol negotiation\nDescription: The application's WebSocket implementation assigns sessions during subprotocol negotiation without proper validation. The vulnerable handshake process allows session fixation through crafted subprotocol headers. To solve: fixate session ID during WS connection and hijack authenticated session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket subprotocol negotiation\", \"Lab Description\": \"The application's WebSocket implementation assigns sessions during subprotocol negotiation without proper validation. The vulnerable handshake process allows session fixation through crafted subprotocol headers. To solve: fixate session ID during WS connection and hijack authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure PKCE implementation\nDescription: The application's OAuth PKCE flow fails to properly validate code verifier against code challenge. The vulnerable implementation allows bypassing PKCE protection through parameter manipulation. To solve: steal authorization code by intercepting and replaying requests with modified parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure PKCE implementation\", \"Lab Description\": \"The application's OAuth PKCE flow fails to properly validate code verifier against code challenge. The vulnerable implementation allows bypassing PKCE protection through parameter manipulation. To solve: steal authorization code by intercepting and replaying requests with modified parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an admin token by modifying your JWT without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT implementation fails to validate the algorithm properly. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge an admin token by modifying your JWT without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: This lab's OAuth implementation fails to validate redirect URIs properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth code from the victim user and exchange it for an access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"This lab's OAuth implementation fails to validate redirect URIs properly. The application leaks authorization codes to arbitrary domains. To solve: steal an OAuth code from the victim user and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation\nDescription: This lab's GraphQL endpoint allows setting arbitrary session IDs through a mutation. The application doesn't regenerate session IDs after authentication. To solve: fixate a session ID and trick an admin into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation\", \"Lab Description\": \"This lab's GraphQL endpoint allows setting arbitrary session IDs through a mutation. The application doesn't regenerate session IDs after authentication. To solve: fixate a session ID and trick an admin into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: This lab's JWT validation improperly processes the kid header, allowing path traversal to arbitrary verification keys. The application blindly trusts the kid parameter when loading verification keys. To solve: forge a valid admin token by forcing the system to use a predictable public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"This lab's JWT validation improperly processes the kid header, allowing path traversal to arbitrary verification keys. The application blindly trusts the kid parameter when loading verification keys. To solve: forge a valid admin token by forcing the system to use a predictable public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session swapping via concurrent SOAP requests\nDescription: This lab's SOAP API maintains session state improperly during concurrent requests. The application processes authentication and session updates asynchronously. To solve: perform a race condition attack to swap a low-privilege session with an admin session before authorization checks complete.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session swapping via concurrent SOAP requests\", \"Lab Description\": \"This lab's SOAP API maintains session state improperly during concurrent requests. The application processes authentication and session updates asynchronously. To solve: perform a race condition attack to swap a low-privilege session with an admin session before authorization checks complete.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure PKCE implementation\nDescription: This lab's OAuth flow implements PKCE security incorrectly by not verifying the code_challenge method. The application accepts arbitrary code_verifier values after authorization. To solve: intercept the authorization code and redeem it with a brute-forced code_verifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure PKCE implementation\", \"Lab Description\": \"This lab's OAuth flow implements PKCE security incorrectly by not verifying the code_challenge method. The application accepts arbitrary code_verifier values after authorization. To solve: intercept the authorization code and redeem it with a brute-forced code_verifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: This lab's JWT implementation trusts arbitrary jku (JWK Set URL) headers for key verification. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWK Set and forge an admin token by forcing the server to use your public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"This lab's JWT implementation trusts arbitrary jku (JWK Set URL) headers for key verification. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWK Set and forge an admin token by forcing the server to use your public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session token leakage via GraphQL introspection\nDescription: This lab's GraphQL endpoint has introspection enabled and leaks session tokens through error messages. The application improperly handles authentication errors in the GraphQL resolver. To solve: extract valid session tokens from verbose error responses and hijack an admin session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session token leakage via GraphQL introspection\", \"Lab Description\": \"This lab's GraphQL endpoint has introspection enabled and leaks session tokens through error messages. The application improperly handles authentication errors in the GraphQL resolver. To solve: extract valid session tokens from verbose error responses and hijack an admin session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token theft via open redirect with fragment\nDescription: This lab's OAuth implementation is vulnerable to token leakage through an open redirect that preserves URL fragments. The application passes access tokens in the fragment during redirects but doesn't validate the target domain. To solve: craft a malicious redirect URL that captures the token fragment.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via open redirect with fragment\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable to token leakage through an open redirect that preserves URL fragments. The application passes access tokens in the fragment during redirects but doesn't validate the target domain. To solve: craft a malicious redirect URL that captures the token fragment.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: This lab's WebSocket implementation assigns session tokens during the handshake process without proper validation. The application accepts arbitrary session tokens in the WS upgrade request headers. To solve: fixate a session token and trick an admin into authenticating with it via WebSocket communication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"This lab's WebSocket implementation assigns session tokens during the handshake process without proper validation. The application accepts arbitrary session tokens in the WS upgrade request headers. To solve: fixate a session token and trick an admin into authenticating with it via WebSocket communication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT timestamp manipulation via nbf claim\nDescription: This lab's JWT validation improperly handles the 'nbf' (not before) claim when the server clock is skewed. The application fails to verify the timestamp against a trusted time source. To solve: forge a token with a future nbf claim and exploit clock drift to gain premature access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT timestamp manipulation via nbf claim\", \"Lab Description\": \"This lab's JWT validation improperly handles the 'nbf' (not before) claim when the server clock is skewed. The application fails to verify the timestamp against a trusted time source. To solve: forge a token with a future nbf claim and exploit clock drift to gain premature access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via mixed content\nDescription: This lab's OAuth implementation serves token responses over HTTP when initiated from HTTPS pages. The application fails to enforce strict transport security for token endpoints. To solve: perform a MITM attack to intercept tokens when victims visit mixed-content pages.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via mixed content\", \"Lab Description\": \"This lab's OAuth implementation serves token responses over HTTP when initiated from HTTPS pages. The application fails to enforce strict transport security for token endpoints. To solve: perform a MITM attack to intercept tokens when victims visit mixed-content pages.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering due to lack of signature validation\nDescription: This application's authentication mechanism uses JSON Web Tokens (JWTs) to manage user sessions. However, the backend fails to validate the signature of the JWT during decoding. The application trusts the payload content blindly. To solve: craft a tampered JWT to escalate from a regular user to admin and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering due to lack of signature validation\", \"Lab Description\": \"This application's authentication mechanism uses JSON Web Tokens (JWTs) to manage user sessions. However, the backend fails to validate the signature of the JWT during decoding. The application trusts the payload content blindly. To solve: craft a tampered JWT to escalate from a regular user to admin and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in URL\nDescription: This application uses a custom session ID passed via the URL as a GET parameter. The backend sets the session without validating ownership, enabling an attacker to force a session ID on a victim before login. To solve: fix a session for Carlos, trick him into logging in, then reuse the session ID to hijack his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in URL\", \"Lab Description\": \"This application uses a custom session ID passed via the URL as a GET parameter. The backend sets the session without validating ownership, enabling an attacker to force a session ID on a victim before login. To solve: fix a session for Carlos, trick him into logging in, then reuse the session ID to hijack his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion leads to authentication bypass\nDescription: The application uses JWTs for session management but accepts both RS256 and HS256 algorithms interchangeably. The backend uses RS256 with a public key to validate tokens, but it fails to enforce the algorithm type. The application naively uses the public key as a secret when validating HS256 tokens. To solve: craft a forged JWT to log in as the administrator user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion leads to authentication bypass\", \"Lab Description\": \"The application uses JWTs for session management but accepts both RS256 and HS256 algorithms interchangeably. The backend uses RS256 with a public key to validate tokens, but it fails to enforce the algorithm type. The application naively uses the public key as a secret when validating HS256 tokens. To solve: craft a forged JWT to log in as the administrator user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect URI validation allows token theft\nDescription: This lab simulates a vulnerable OAuth 2.0 implicit grant implementation where the redirect URI is weakly validated using substring matching. An attacker can register a malicious endpoint with a similar domain and capture access tokens. To solve: hijack the victimâ€™s OAuth access token and access their private dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI validation allows token theft\", \"Lab Description\": \"This lab simulates a vulnerable OAuth 2.0 implicit grant implementation where the redirect URI is weakly validated using substring matching. An attacker can register a malicious endpoint with a similar domain and capture access tokens. To solve: hijack the victimâ€™s OAuth access token and access their private dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation vulnerability in login endpoint\nDescription: The application assigns a session ID before authentication and fails to regenerate it after login. An attacker can set a session ID for a victim and wait for them to log in. To solve: fixate a session for the victim, log in with it, and access their profile page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The application assigns a session ID before authentication and fails to regenerate it after login. An attacker can set a session ID for a victim and wait for them to log in. To solve: fixate a session for the victim, log in with it, and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in Authorization header\nDescription: The application uses JWTs for session management but incorrectly accepts tokens with 'alg':'none'. The vulnerable Express middleware does not verify the JWT signature properly when the 'none' algorithm is provided. The application accepts any token with a valid payload and no signature. To solve: forge a valid token impersonating the user 'carlos' and access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs for session management but incorrectly accepts tokens with 'alg':'none'. The vulnerable Express middleware does not verify the JWT signature properly when the 'none' algorithm is provided. The application accepts any token with a valid payload and no signature. To solve: forge a valid token impersonating the user 'carlos' and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration leaks token via referrer header\nDescription: This OAuth-enabled app uses the implicit flow for authentication, where access tokens are returned in the URL fragment. However, it fails to sanitize or block third-party redirects that leak the access token via the Referer header. To solve: extract the victim's token by abusing an open redirect and access their account using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaks token via referrer header\", \"Lab Description\": \"This OAuth-enabled app uses the implicit flow for authentication, where access tokens are returned in the URL fragment. However, it fails to sanitize or block third-party redirects that leak the access token via the Referer header. To solve: extract the victim's token by abusing an open redirect and access their account using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login response\nDescription: This application assigns a fixed session ID before login and reuses it even after authentication, allowing session fixation. An attacker can send a victim a pre-established session and later hijack it once they log in. To solve: fixate a session ID, have the victim authenticate using it, then access their account using the same ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login response\", \"Lab Description\": \"This application assigns a fixed session ID before login and reuses it even after authentication, allowing session fixation. An attacker can send a victim a pre-established session and later hijack it once they log in. To solve: fixate a session ID, have the victim authenticate using it, then access their account using the same ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token none algorithm bypass in stateless authentication\nDescription: The stateless JWT-based authentication mechanism fails to validate the algorithm specified in the JWT header. The application accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge a token to access the admin's account dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token none algorithm bypass in stateless authentication\", \"Lab Description\": \"The stateless JWT-based authentication mechanism fails to validate the algorithm specified in the JWT header. The application accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge a token to access the admin's account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: The login process does not generate a new session identifier after authentication. This allows an attacker to fix a session for a victim before they log in. To solve: log in as Carlos using a session fixation attack.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The login process does not generate a new session identifier after authentication. This allows an attacker to fix a session for a victim before they log in. To solve: log in as Carlos using a session fixation attack.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access tokens via redirect URI manipulation\nDescription: The application uses an OAuth 2.0 provider to log users in. The 'redirect_uri' parameter is not properly validated, allowing attackers to capture tokens by injecting malicious URLs. To solve: steal Carlosâ€™s access token using an open redirect exploit.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access tokens via redirect URI manipulation\", \"Lab Description\": \"The application uses an OAuth 2.0 provider to log users in. The 'redirect_uri' parameter is not properly validated, allowing attackers to capture tokens by injecting malicious URLs. To solve: steal Carlosâ€™s access token using an open redirect exploit.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token tampering in Authorization header\nDescription: The backend uses a stateless JWT-based authentication mechanism, but it fails to validate the token's signature. The application blindly trusts the header and payload claims of the JWT token. To solve: Forge an admin-level token and access the /admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering in Authorization header\", \"Lab Description\": \"The backend uses a stateless JWT-based authentication mechanism, but it fails to validate the token's signature. The application blindly trusts the header and payload claims of the JWT token. To solve: Forge an admin-level token and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in token exchange\nDescription: The application uses OAuth 2.0 to authenticate users via a third-party provider. However, it incorrectly trusts the client-provided access token without verifying it with the OAuth server. To solve: Use a token from your own OAuth account and impersonate Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in token exchange\", \"Lab Description\": \"The application uses OAuth 2.0 to authenticate users via a third-party provider. However, it incorrectly trusts the client-provided access token without verifying it with the OAuth server. To solve: Use a token from your own OAuth account and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login endpoint\nDescription: The application issues session identifiers before authentication and fails to regenerate them upon successful login. An attacker can set a known session ID, trick a victim into using it, and take over their session post-login. To solve: Fix a session ID and hijack Carlos's session after he logs in.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login endpoint\", \"Lab Description\": \"The application issues session identifiers before authentication and fails to regenerate them upon successful login. An attacker can set a known session ID, trick a victim into using it, and take over their session post-login. To solve: Fix a session ID and hijack Carlos's session after he logs in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth session fixation via predictable redirect URI\nDescription: The application integrates a third-party OAuth provider for authentication. However, it fails to validate the `state` parameter during the OAuth flow and reuses a fixed session value across users. The application establishes a session cookie before authentication completion. To solve: force Carlos to log in through a manipulated link and hijack his session to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth session fixation via predictable redirect URI\", \"Lab Description\": \"The application integrates a third-party OAuth provider for authentication. However, it fails to validate the `state` parameter during the OAuth flow and reuses a fixed session value across users. The application establishes a session cookie before authentication completion. To solve: force Carlos to log in through a manipulated link and hijack his session to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token tampering via algorithm confusion in token verification logic\nDescription: The server accepts JWTs for authentication and incorrectly supports multiple algorithms for signature verification. It uses a public RSA key but also accepts `alg=HS256`, allowing attackers to forge tokens by abusing algorithm confusion. To solve: log in as Carlos by crafting a malicious JWT using `HS256` and the server's public key as the HMAC secret.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering via algorithm confusion in token verification logic\", \"Lab Description\": \"The server accepts JWTs for authentication and incorrectly supports multiple algorithms for signature verification. It uses a public RSA key but also accepts `alg=HS256`, allowing attackers to forge tokens by abusing algorithm confusion. To solve: log in as Carlos by crafting a malicious JWT using `HS256` and the server's public key as the HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session ID leakage through verbose error logging\nDescription: The application logs errors and includes session IDs in stack traces and debug outputs. When a malformed request is sent, the session ID of the logged-in user is exposed via `/logs`. To solve: extract Carlosâ€™s session ID from the logs and reuse it to impersonate him and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session ID leakage through verbose error logging\", \"Lab Description\": \"The application logs errors and includes session IDs in stack traces and debug outputs. When a malformed request is sent, the session ID of the logged-in user is exposed via `/logs`. To solve: extract Carlosâ€™s session ID from the logs and reuse it to impersonate him and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login endpoint\nDescription: This application's session management logic does not regenerate session tokens upon login, allowing session fixation attacks. The application accepts session tokens passed in cookies and maintains them post-authentication without validation. To solve: Hijack Carlos's session using a pre-set session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login endpoint\", \"Lab Description\": \"This application's session management logic does not regenerate session tokens upon login, allowing session fixation attacks. The application accepts session tokens passed in cookies and maintains them post-authentication without validation. To solve: Hijack Carlos's session using a pre-set session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature bypass via algorithm confusion\nDescription: This application's JWT implementation accepts tokens signed using either HMAC or RSA, but fails to enforce algorithm restrictions securely. The application uses an insecure library that trusts the alg header from the user. To solve: Forge a valid JWT with alg=none to access Carlos's admin page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via algorithm confusion\", \"Lab Description\": \"This application's JWT implementation accepts tokens signed using either HMAC or RSA, but fails to enforce algorithm restrictions securely. The application uses an insecure library that trusts the alg header from the user. To solve: Forge a valid JWT with alg=none to access Carlos's admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access token via redirect\nDescription: This application uses OAuth 2.0 for login but does not validate the redirect_uri properly, allowing attackers to leak access tokens to external sites. The application supports login via third-party OAuth providers and accepts dynamic redirect URIs. To solve: Leak Carlos's OAuth token to your controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access token via redirect\", \"Lab Description\": \"This application uses OAuth 2.0 for login but does not validate the redirect_uri properly, allowing attackers to leak access tokens to external sites. The application supports login via third-party OAuth providers and accepts dynamic redirect URIs. To solve: Leak Carlos's OAuth token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature verification bypass in API Gateway\nDescription: The application uses JWTs for API authentication but improperly trusts the `alg` field without enforcing the expected signing algorithm. The application accepts tokens signed with 'none'. To solve: Forge a JWT to impersonate the admin user and access the admin dashboard endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass in API Gateway\", \"Lab Description\": \"The application uses JWTs for API authentication but improperly trusts the `alg` field without enforcing the expected signing algorithm. The application accepts tokens signed with 'none'. To solve: Forge a JWT to impersonate the admin user and access the admin dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth open redirect and token hijack in third-party flow\nDescription: The application integrates with a third-party OAuth provider but fails to validate the redirect_uri parameter. Attackers can craft a malicious link to steal access tokens. To solve: Capture Carlos's OAuth token and access his profile using the stolen token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect and token hijack in third-party flow\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but fails to validate the redirect_uri parameter. Attackers can craft a malicious link to steal access tokens. To solve: Capture Carlos's OAuth token and access his profile using the stolen token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login workflow with predictable session ID\nDescription: The application does not regenerate session tokens upon login. This allows attackers to set a session ID before authentication and hijack the session post-login. To solve: Fixate a session for Carlos, then reuse it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login workflow with predictable session ID\", \"Lab Description\": \"The application does not regenerate session tokens upon login. This allows attackers to set a session ID before authentication and hijack the session post-login. To solve: Fixate a session for Carlos, then reuse it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session identifier in cookie\nDescription: This lab demonstrates a session fixation vulnerability where session identifiers are accepted from the user. The application does not regenerate session tokens upon login. To solve: Fix a session ID, force the victim to authenticate using that session, and access their My account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session identifier in cookie\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability where session identifiers are accepted from the user. The application does not regenerate session tokens upon login. To solve: Fix a session ID, force the victim to authenticate using that session, and access their My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering using 'alg':'none' bypass\nDescription: The application uses JWT for user authentication but fails to validate the signature when the algorithm is set to 'none'. The backend incorrectly trusts JWT tokens regardless of signature when alg is 'none'. To solve: Forge an admin JWT and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'alg':'none' bypass\", \"Lab Description\": \"The application uses JWT for user authentication but fails to validate the signature when the algorithm is set to 'none'. The backend incorrectly trusts JWT tokens regardless of signature when alg is 'none'. To solve: Forge an admin JWT and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allowing code injection via open redirect\nDescription: The application uses a third-party OAuth provider for authentication but lacks proper redirect_uri validation. An attacker can inject a malicious redirect URI to intercept the authorization code. To solve: Capture a valid authorization code issued to the victim and use it to log in as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing code injection via open redirect\", \"Lab Description\": \"The application uses a third-party OAuth provider for authentication but lacks proper redirect_uri validation. An attacker can inject a malicious redirect URI to intercept the authorization code. To solve: Capture a valid authorization code issued to the victim and use it to log in as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via none algorithm in login API\nDescription: The application uses JSON Web Tokens (JWT) for session management but improperly validates the token's signature algorithm. The login endpoint issues a signed JWT that includes user roles. However, the server accepts tokens with 'alg':'none' without signature verification. To solve: escalate privileges by tampering with the JWT and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via none algorithm in login API\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management but improperly validates the token's signature algorithm. The login endpoint issues a signed JWT that includes user roles. However, the server accepts tokens with 'alg':'none' without signature verification. To solve: escalate privileges by tampering with the JWT and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via static session ID assignment\nDescription: The application assigns session identifiers before authentication and fails to regenerate the session ID after login. This allows an attacker to fix a known session ID and force a victim to use it, enabling full session hijacking after login. To solve: log the victim in using the fixed session and access their profile page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via static session ID assignment\", \"Lab Description\": \"The application assigns session identifiers before authentication and fails to regenerate the session ID after login. This allows an attacker to fix a known session ID and force a victim to use it, enabling full session hijacking after login. To solve: log the victim in using the fixed session and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allowing token reuse across clients\nDescription: The app integrates with an external OAuth provider but does not restrict token audience. As a result, access tokens issued for one client (mobile app) can be reused on the web client. To solve: intercept a token issued to another client and reuse it on the vulnerable web interface to access user info.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allowing token reuse across clients\", \"Lab Description\": \"The app integrates with an external OAuth provider but does not restrict token audience. As a result, access tokens issued for one client (mobile app) can be reused on the web client. To solve: intercept a token issued to another client and reuse it on the vulnerable web interface to access user info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion in authorization header\nDescription: The application implements JWT-based authentication using the RS256 algorithm, but fails to properly validate the algorithm header, allowing algorithm substitution attacks. The application accepts JWT tokens in the Authorization header to access protected resources. To solve: forge a valid JWT token with admin privileges and access the /admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authorization header\", \"Lab Description\": \"The application implements JWT-based authentication using the RS256 algorithm, but fails to properly validate the algorithm header, allowing algorithm substitution attacks. The application accepts JWT tokens in the Authorization header to access protected resources. To solve: forge a valid JWT token with admin privileges and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unvalidated session token reuse\nDescription: The application sets a session cookie before login but fails to generate a new session upon authentication, making it vulnerable to session fixation. The session ID is stored in a cookie named 'sessionid'. To solve: fix a session before login, force the victim to log in, and reuse their session to access their account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session token reuse\", \"Lab Description\": \"The application sets a session cookie before login but fails to generate a new session upon authentication, making it vulnerable to session fixation. The session ID is stored in a cookie named 'sessionid'. To solve: fix a session before login, force the victim to log in, and reuse their session to access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow token leak via referrer header\nDescription: The application uses the OAuth 2.0 implicit grant flow for authentication but redirects users to a third-party domain while retaining the access token in the URL fragment. This results in the token being leaked via the Referer header. To solve: steal the victim's access token and use it to retrieve their profile information.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leak via referrer header\", \"Lab Description\": \"The application uses the OAuth 2.0 implicit grant flow for authentication but redirects users to a third-party domain while retaining the access token in the URL fragment. This results in the token being leaked via the Referer header. To solve: steal the victim's access token and use it to retrieve their profile information.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Flow\nDescription: The application uses a custom session mechanism without regenerating session IDs after login. The application issues a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID, get the victim to use it, then hijack their session to access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"The application uses a custom session mechanism without regenerating session IDs after login. The application issues a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID, get the victim to use it, then hijack their session to access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering using 'none' Algorithm\nDescription: The application trusts JWTs signed with the 'none' algorithm and does not validate their integrity. The JWT is used for session authentication. To solve: Forge an admin token with 'none' as algorithm and escalate privileges.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering using 'none' Algorithm\", \"Lab Description\": \"The application trusts JWTs signed with the 'none' algorithm and does not validate their integrity. The JWT is used for session authentication. To solve: Forge an admin token with 'none' as algorithm and escalate privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Token Exchange Flow\nDescription: The application integrates with an OAuth provider but does not validate the audience (aud) field in the ID token. This allows a malicious app to reuse a token issued for another client. To solve: Use an ID token issued to another client to access protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Token Exchange Flow\", \"Lab Description\": \"The application integrates with an OAuth provider but does not validate the audience (aud) field in the ID token. This allows a malicious app to reuse a token issued for another client. To solve: Use an ID token issued to another client to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Cookie-Based Login Flow\nDescription: The application fails to regenerate session identifiers upon successful login. As a result, an attacker can set a session ID before authentication and reuse it post-login. The application assigns session IDs via cookies before authentication, and fails to issue a new one after. To solve: log in as Carlos using a session fixation attack.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Cookie-Based Login Flow\", \"Lab Description\": \"The application fails to regenerate session identifiers upon successful login. As a result, an attacker can set a session ID before authentication and reuse it post-login. The application assigns session IDs via cookies before authentication, and fails to issue a new one after. To solve: log in as Carlos using a session fixation attack.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in Authorization Header\nDescription: The application uses JWTs for session management but fails to validate the algorithm properly. It accepts unsigned tokens if the 'alg' is set to 'none'. To solve: forge a JWT for Carlos and access the protected account page without knowing the secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in Authorization Header\", \"Lab Description\": \"The application uses JWTs for session management but fails to validate the algorithm properly. It accepts unsigned tokens if the 'alg' is set to 'none'. To solve: forge a JWT for Carlos and access the protected account page without knowing the secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Token Leakage in Redirect URI\nDescription: The application uses OAuth with an implicit grant flow that leaks access tokens via a redirection URI susceptible to open redirect. This allows attackers to harvest tokens if the user authorizes the app. To solve: steal Carlos's OAuth token and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Token Leakage in Redirect URI\", \"Lab Description\": \"The application uses OAuth with an implicit grant flow that leaks access tokens via a redirection URI susceptible to open redirect. This allows attackers to harvest tokens if the user authorizes the app. To solve: steal Carlos's OAuth token and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth login session fixation in third-party auth flow\nDescription: The OAuth login implementation in this app fails to issue a new session ID after authentication. The application reuses session cookies from unauthenticated requests. To solve: force a victim to authenticate with a session you control and gain access to their authenticated session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth login session fixation in third-party auth flow\", \"Lab Description\": \"The OAuth login implementation in this app fails to issue a new session ID after authentication. The application reuses session cookies from unauthenticated requests. To solve: force a victim to authenticate with a session you control and gain access to their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via 'alg=none'\nDescription: The server trusts JWTs without properly verifying their signature when the algorithm is set to 'none'. The application decodes and accepts tokens without validation. To solve: craft a JWT with admin privileges using 'alg':'none' and access the admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'alg=none'\", \"Lab Description\": \"The server trusts JWTs without properly verifying their signature when the algorithm is set to 'none'. The application decodes and accepts tokens without validation. To solve: craft a JWT with admin privileges using 'alg':'none' and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Blind session hijacking via verbose error leakage\nDescription: The application exposes detailed error logs that include session identifiers when unexpected input is provided. The error handler returns stack traces with sensitive tokens. To solve: force a 500 error, extract another user's session ID from the error, and use it to impersonate them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Blind session hijacking via verbose error leakage\", \"Lab Description\": \"The application exposes detailed error logs that include session identifiers when unexpected input is provided. The error handler returns stack traces with sensitive tokens. To solve: force a 500 error, extract another user's session ID from the error, and use it to impersonate them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature validation bypass in authorization middleware\nDescription: The backend uses a custom JWT verification logic with a flawed secret check. The application uses the token to grant access to protected admin APIs. However, it fails to properly validate the token signature. To solve: craft a tampered JWT that grants admin access and view the protected admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature validation bypass in authorization middleware\", \"Lab Description\": \"The backend uses a custom JWT verification logic with a flawed secret check. The application uses the token to grant access to protected admin APIs. However, it fails to properly validate the token signature. To solve: craft a tampered JWT that grants admin access and view the protected admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration allows token reuse from different client\nDescription: The OAuth implementation does not validate the client ID or redirect URI properly. The attacker can reuse a legitimate token issued for another application to gain unauthorized access. To solve: obtain a valid OAuth token and use it to impersonate Carlos by accessing the /me endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows token reuse from different client\", \"Lab Description\": \"The OAuth implementation does not validate the client ID or redirect URI properly. The attacker can reuse a legitimate token issued for another application to gain unauthorized access. To solve: obtain a valid OAuth token and use it to impersonate Carlos by accessing the /me endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login token reuse in cookie\nDescription: The application accepts a session ID in a GET parameter and reflects it back into a Set-Cookie response during login. It does not regenerate the session on login, enabling session fixation. To solve: force a victim to use a known session ID and take over their session after login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login token reuse in cookie\", \"Lab Description\": \"The application accepts a session ID in a GET parameter and reflects it back into a Set-Cookie response during login. It does not regenerate the session on login, enabling session fixation. To solve: force a victim to use a known session ID and take over their session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth session fixation in authorization endpoint\nDescription: The application improperly handles session tokens during the OAuth authorization flow. It allows pre-setting session cookies before the victim logs in, resulting in a session fixation attack. The application accepts a `session_id` from an attacker-controlled domain. To solve: hijack Carlos's session after they authorize the app and access their account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth session fixation in authorization endpoint\", \"Lab Description\": \"The application improperly handles session tokens during the OAuth authorization flow. It allows pre-setting session cookies before the victim logs in, resulting in a session fixation attack. The application accepts a `session_id` from an attacker-controlled domain. To solve: hijack Carlos's session after they authorize the app and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm\nDescription: The app uses JWT tokens to manage sessions but does not validate the algorithm specified in the header. It trusts tokens signed with 'none', allowing attackers to forge valid tokens. To solve: forge a JWT for the user 'carlos' and access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm\", \"Lab Description\": \"The app uses JWT tokens to manage sessions but does not validate the algorithm specified in the header. It trusts tokens signed with 'none', allowing attackers to forge valid tokens. To solve: forge a JWT for the user 'carlos' and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth open redirect and token leakage\nDescription: The OAuth integration with a third-party identity provider allows open redirect URLs and token leakage via the redirect_uri parameter. The app does not validate the redirect URI properly, allowing attackers to intercept tokens. To solve: capture an OAuth access token belonging to Carlos and use it to access his protected resource.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect and token leakage\", \"Lab Description\": \"The OAuth integration with a third-party identity provider allows open redirect URLs and token leakage via the redirect_uri parameter. The app does not validate the redirect URI properly, allowing attackers to intercept tokens. To solve: capture an OAuth access token belonging to Carlos and use it to access his protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Cookie-based session fixation vulnerability in login flow\nDescription: The application implements session handling using a fixed session ID stored in a cookie, but it fails to regenerate the session ID upon successful login. The application reuses the session cookie across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing their session ID pre-login and accessing their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Cookie-based session fixation vulnerability in login flow\", \"Lab Description\": \"The application implements session handling using a fixed session ID stored in a cookie, but it fails to regenerate the session ID upon successful login. The application reuses the session cookie across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing their session ID pre-login and accessing their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering vulnerability in authorization header\nDescription: The application uses JSON Web Tokens (JWT) for session validation but fails to validate the algorithm field properly. It accepts tokens signed with 'none' algorithm, allowing attackers to forge tokens without a valid signature. To solve: forge a JWT to impersonate Carlos and access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in authorization header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session validation but fails to validate the algorithm field properly. It accepts tokens signed with 'none' algorithm, allowing attackers to forge tokens without a valid signature. To solve: forge a JWT to impersonate Carlos and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect vulnerability in redirect_uri parameter\nDescription: The application integrates with a third-party OAuth provider for login but does not validate the 'redirect_uri' parameter. An attacker can manipulate the redirect URL to leak the access token to their domain. To solve: steal Carlos's OAuth token by crafting a malicious redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect vulnerability in redirect_uri parameter\", \"Lab Description\": \"The application integrates with a third-party OAuth provider for login but does not validate the 'redirect_uri' parameter. An attacker can manipulate the redirect URL to leak the access token to their domain. To solve: steal Carlos's OAuth token by crafting a malicious redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable token in login URL\nDescription: The application uses a session token passed via the URL. It fails to invalidate pre-authentication tokens during login. This allows attackers to fix a session and hijack it post-login. The application maintains the same session identifier before and after successful authentication. To solve: Hijack Carlos's session after forcing him to log in with a fixed token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable token in login URL\", \"Lab Description\": \"The application uses a session token passed via the URL. It fails to invalidate pre-authentication tokens during login. This allows attackers to fix a session and hijack it post-login. The application maintains the same session identifier before and after successful authentication. To solve: Hijack Carlos's session after forcing him to log in with a fixed token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass using 'none' algorithm\nDescription: The application uses a JSON Web Token (JWT) to manage sessions. It accepts tokens signed with the 'none' algorithm and skips signature verification, allowing attackers to forge tokens. To solve: Modify a JWT to impersonate the admin user and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass using 'none' algorithm\", \"Lab Description\": \"The application uses a JSON Web Token (JWT) to manage sessions. It accepts tokens signed with the 'none' algorithm and skips signature verification, allowing attackers to forge tokens. To solve: Modify a JWT to impersonate the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri\nDescription: The application integrates with a third-party OAuth provider. It fails to validate the redirect_uri strictly, allowing attackers to inject their own malicious redirect. The attacker can steal the authorization code and redeem it for an access token. To solve: Hijack the OAuth flow and log in as the victim user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri\", \"Lab Description\": \"The application integrates with a third-party OAuth provider. It fails to validate the redirect_uri strictly, allowing attackers to inject their own malicious redirect. The attacker can steal the authorization code and redeem it for an access token. To solve: Hijack the OAuth flow and log in as the victim user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Persistent Session Fixation in Login Flow\nDescription: This lab demonstrates a session fixation vulnerability within the authentication process. The application maintains the same session ID across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing a known session ID prior to login, then access his My Account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Persistent Session Fixation in Login Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability within the authentication process. The application maintains the same session ID across unauthenticated and authenticated states. To solve: hijack Carlos's session by fixing a known session ID prior to login, then access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering with 'none' algorithm exploit\nDescription: This lab uses JWT for session management but does not properly enforce signature verification. The server accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge an unsigned JWT with the username 'carlos' and access his My Account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering with 'none' algorithm exploit\", \"Lab Description\": \"This lab uses JWT for session management but does not properly enforce signature verification. The server accepts unsigned tokens if the algorithm is set to 'none'. To solve: forge an unsigned JWT with the username 'carlos' and access his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Redirect URI Manipulation\nDescription: This lab uses OAuth 2.0 for third-party login. The application fails to validate the redirect_uri properly. This allows redirection to an attacker-controlled page after login. To solve: intercept the OAuth flow, modify the redirect URI, and capture Carlos's access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation\", \"Lab Description\": \"This lab uses OAuth 2.0 for third-party login. The application fails to validate the redirect_uri properly. This allows redirection to an attacker-controlled page after login. To solve: intercept the OAuth flow, modify the redirect URI, and capture Carlos's access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via leaked secret in error logs\nDescription: The application uses JWT for session management but leaks the signing secret via verbose error messages. A malformed JWT results in a signed error that reveals the secret. The application accepts manipulated JWTs if they are correctly signed. To solve: Forge an admin JWT token and access the /admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via leaked secret in error logs\", \"Lab Description\": \"The application uses JWT for session management but leaks the signing secret via verbose error messages. A malformed JWT results in a signed error that reveals the secret. The application accepts manipulated JWTs if they are correctly signed. To solve: Forge an admin JWT token and access the /admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in callback\nDescription: The application uses a third-party OAuth provider to log in users. However, the redirect_uri parameter is not strictly validated, allowing attackers to inject their own callback endpoints. This enables account takeover via token theft. To solve: Intercept the OAuth code and use it to access Carlos's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in callback\", \"Lab Description\": \"The application uses a third-party OAuth provider to log in users. However, the redirect_uri parameter is not strictly validated, allowing attackers to inject their own callback endpoints. This enables account takeover via token theft. To solve: Intercept the OAuth code and use it to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The application assigns a session ID in a cookie before authentication and does not regenerate it upon login. Attackers can force a known session ID on victims, then log in using that ID themselves. To solve: Fixate a session, force Carlos to use it, and then access his account via the same ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application assigns a session ID in a cookie before authentication and does not regenerate it upon login. Attackers can force a known session ID on victims, then log in using that ID themselves. To solve: Fixate a session, force Carlos to use it, and then access his account via the same ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Tampered JWT leads to admin privilege escalation\nDescription: The application uses JSON Web Tokens (JWTs) to manage authentication and access control. The server uses the 'none' algorithm to verify tokens but does not enforce proper signature validation. The application trusts the user-supplied JWT without verifying its integrity. To solve: Modify your own JWT to escalate to the admin role and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Tampered JWT leads to admin privilege escalation\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) to manage authentication and access control. The server uses the 'none' algorithm to verify tokens but does not enforce proper signature validation. The application trusts the user-supplied JWT without verifying its integrity. To solve: Modify your own JWT to escalate to the admin role and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration leads to account takeover via third-party redirect\nDescription: The application implements OAuth login but fails to validate the 'redirect_uri' and 'state' parameters. It is possible to manipulate the OAuth flow to bind an attacker-controlled third-party account to the victimâ€™s session. To solve: Trick the system into linking your OAuth identity to Carlos's account, then access his dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leads to account takeover via third-party redirect\", \"Lab Description\": \"The application implements OAuth login but fails to validate the 'redirect_uri' and 'state' parameters. It is possible to manipulate the OAuth flow to bind an attacker-controlled third-party account to the victimâ€™s session. To solve: Trick the system into linking your OAuth identity to Carlos's account, then access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: The application uses predictable session IDs and does not invalidate the session token after login. This allows an attacker to set a session ID before victim login and later hijack the session. To solve: Fixate the session ID before Carlos logs in, then reuse that session ID to access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"The application uses predictable session IDs and does not invalidate the session token after login. This allows an attacker to set a session ID before victim login and later hijack the session. To solve: Fixate the session ID before Carlos logs in, then reuse that session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via cookie injection in login workflow\nDescription: The application does not invalidate user sessions upon authentication. Instead, it continues using any pre-authenticated session identifier, even if it was injected beforehand. The application uses cookie-based sessions without regeneration upon login. To solve: Hijack a session by fixing a session ID before victim login and access Carlos's account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via cookie injection in login workflow\", \"Lab Description\": \"The application does not invalidate user sessions upon authentication. Instead, it continues using any pre-authenticated session identifier, even if it was injected beforehand. The application uses cookie-based sessions without regeneration upon login. To solve: Hijack a session by fixing a session ID before victim login and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm exploit in Authorization header\nDescription: The backend uses JWT tokens for stateless authentication, but fails to enforce a valid algorithm for signature verification. If a token is submitted with the 'alg' field set to 'none', the backend accepts it without validating the signature. To solve: Forge a valid token for Carlos using the 'none' algorithm and access his protected resource.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm exploit in Authorization header\", \"Lab Description\": \"The backend uses JWT tokens for stateless authentication, but fails to enforce a valid algorithm for signature verification. If a token is submitted with the 'alg' field set to 'none', the backend accepts it without validating the signature. To solve: Forge a valid token for Carlos using the 'none' algorithm and access his protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit grant token leakage via referrer\nDescription: This lab implements OAuth 2.0 using the implicit grant flow. Access tokens are returned in the URL fragment, but a redirect leads to a third-party domain which leaks the token via the Referer header. To solve: Extract Carlosâ€™s access token from a leaked Referer and use it to access his data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit grant token leakage via referrer\", \"Lab Description\": \"This lab implements OAuth 2.0 using the implicit grant flow. Access tokens are returned in the URL fragment, but a redirect leads to a third-party domain which leaks the token via the Referer header. To solve: Extract Carlosâ€™s access token from a leaked Referer and use it to access his data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm exploit in session verification\nDescription: The application uses JWTs to manage authenticated sessions, but it incorrectly allows tokens with the 'alg':'none' header to be accepted as valid. The application verifies tokens without validating the signature when 'none' is specified. To solve: forge a valid session token for the user 'admin' and access the admin dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm exploit in session verification\", \"Lab Description\": \"The application uses JWTs to manage authenticated sessions, but it incorrectly allows tokens with the 'alg':'none' header to be accepted as valid. The application verifies tokens without validating the signature when 'none' is specified. To solve: forge a valid session token for the user 'admin' and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: This application does not regenerate session cookies after login. An attacker can set a session ID before login and trick the victim into logging in with it, allowing session fixation. To solve: fixate Carlos's session and access their profile using the same session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"This application does not regenerate session cookies after login. An attacker can set a session ID before login and trick the victim into logging in with it, allowing session fixation. To solve: fixate Carlos's session and access their profile using the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referrer header in implicit flow\nDescription: The app implements OAuth using the implicit grant type and returns access tokens in the URL fragment. Due to misconfigured redirects, tokens are leaked through the referrer header when loading external resources. To solve: capture an access token for the victim and use it to access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referrer header in implicit flow\", \"Lab Description\": \"The app implements OAuth using the implicit grant type and returns access tokens in the URL fragment. Due to misconfigured redirects, tokens are leaked through the referrer header when loading external resources. To solve: capture an access token for the victim and use it to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via alg=none in REST API login\nDescription: The application uses JWTs to manage user sessions, but incorrectly allows the use of the 'none' algorithm. The `/api/login` endpoint accepts a username and password, returning a signed JWT. However, the server fails to validate the JWT signature properly when `alg` is set to `none`. The application treats the payload as valid without verifying the signature. To solve: forge a JWT that grants access to Carlosâ€™s account using the `alg=none` technique.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via alg=none in REST API login\", \"Lab Description\": \"The application uses JWTs to manage user sessions, but incorrectly allows the use of the 'none' algorithm. The `/api/login` endpoint accepts a username and password, returning a signed JWT. However, the server fails to validate the JWT signature properly when `alg` is set to `none`. The application treats the payload as valid without verifying the signature. To solve: forge a JWT that grants access to Carlosâ€™s account using the `alg=none` technique.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access token via redirect\nDescription: The application integrates a third-party OAuth provider for login using the `response_type=token` flow. However, it redirects the full access token to a third-party endpoint using an insecure redirect URI. This allows an attacker to intercept tokens by registering a malicious domain. To solve: craft a redirect URI pointing to a server you control and extract Carlosâ€™s access token upon login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access token via redirect\", \"Lab Description\": \"The application integrates a third-party OAuth provider for login using the `response_type=token` flow. However, it redirects the full access token to a third-party endpoint using an insecure redirect URI. This allows an attacker to intercept tokens by registering a malicious domain. To solve: craft a redirect URI pointing to a server you control and extract Carlosâ€™s access token upon login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in GraphQL login\nDescription: This application exposes a GraphQL endpoint for user authentication. Upon visiting the site, a fixed session cookie is assigned regardless of user identity. The server does not invalidate or regenerate the session after login, allowing a malicious user to predetermine a victim's session ID. To solve: predefine Carlosâ€™s session ID, get him to log in using it, then hijack the session and access his dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in GraphQL login\", \"Lab Description\": \"This application exposes a GraphQL endpoint for user authentication. Upon visiting the site, a fixed session cookie is assigned regardless of user identity. The server does not invalidate or regenerate the session after login, allowing a malicious user to predetermine a victim's session ID. To solve: predefine Carlosâ€™s session ID, get him to log in using it, then hijack the session and access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in OAuth flow\nDescription: The application uses OAuth for third-party login integration, but it fails to regenerate the session identifier after authentication. The application stores session tokens in cookies without proper rotation. To solve: Fixate your own session ID before login, then coerce the victim (Carlos) to authenticate via OAuth and capture their session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in OAuth flow\", \"Lab Description\": \"The application uses OAuth for third-party login integration, but it fails to regenerate the session identifier after authentication. The application stores session tokens in cookies without proper rotation. To solve: Fixate your own session ID before login, then coerce the victim (Carlos) to authenticate via OAuth and capture their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via algorithm confusion\nDescription: This lab implements JWT-based authentication using the 'HS256' algorithm. However, the server fails to validate the token's algorithm field. To solve the lab, forge a JWT using the 'none' algorithm and access Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via algorithm confusion\", \"Lab Description\": \"This lab implements JWT-based authentication using the 'HS256' algorithm. However, the server fails to validate the token's algorithm field. To solve the lab, forge a JWT using the 'none' algorithm and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Multi-step credential stuffing with email discovery\nDescription: This lab simulates a login form that leaks registered emails through the password reset feature. The login system does not implement account lockout, allowing credential stuffing attacks. To solve the lab, enumerate Carlos's email, then brute-force his password and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Multi-step credential stuffing with email discovery\", \"Lab Description\": \"This lab simulates a login form that leaks registered emails through the password reset feature. The login system does not implement account lockout, allowing credential stuffing attacks. To solve the lab, enumerate Carlos's email, then brute-force his password and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in stateless API\nDescription: The stateless REST API uses JSON Web Tokens (JWTs) for authentication but fails to validate the 'alg' field correctly. The backend trusts the token header and doesn't enforce algorithm restrictions. The application decodes JWTs without verifying the signature if the algorithm is set to 'none'. To solve: Forge a valid admin token and access the /admin-dashboard endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in stateless API\", \"Lab Description\": \"The stateless REST API uses JSON Web Tokens (JWTs) for authentication but fails to validate the 'alg' field correctly. The backend trusts the token header and doesn't enforce algorithm restrictions. The application decodes JWTs without verifying the signature if the algorithm is set to 'none'. To solve: Forge a valid admin token and access the /admin-dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via unregenerated session ID after login\nDescription: This web application accepts a user-provided session ID via the Cookie header. Upon successful login, the server does not regenerate the session ID, enabling session fixation. To solve: Fixate Carlosâ€™s session ID before he logs in, then use that session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unregenerated session ID after login\", \"Lab Description\": \"This web application accepts a user-provided session ID via the Cookie header. Upon successful login, the server does not regenerate the session ID, enabling session fixation. To solve: Fixate Carlosâ€™s session ID before he logs in, then use that session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking access_token to referrer\nDescription: This application uses OAuth for login with an external provider but fails to correctly isolate the access_token from insecure referrer leaks. When redirected after authentication, the token is included in the URL fragment which gets exposed in referrer headers. To solve: Harvest Carlos's OAuth token and use it to impersonate him via the API.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking access_token to referrer\", \"Lab Description\": \"This application uses OAuth for login with an external provider but fails to correctly isolate the access_token from insecure referrer leaks. When redirected after authentication, the token is included in the URL fragment which gets exposed in referrer headers. To solve: Harvest Carlos's OAuth token and use it to impersonate him via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion attack in Authorization header\nDescription: This lab uses JWTs for stateless session handling and verifies tokens in the Authorization header using the 'alg' field. The server trusts the algorithm declared in the JWT itself. The application uses asymmetric signing (RS256) but fails to enforce key verification. To solve: forge a valid JWT that grants admin privileges by exploiting the algorithm confusion.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion attack in Authorization header\", \"Lab Description\": \"This lab uses JWTs for stateless session handling and verifies tokens in the Authorization header using the 'alg' field. The server trusts the algorithm declared in the JWT itself. The application uses asymmetric signing (RS256) but fails to enforce key verification. To solve: forge a valid JWT that grants admin privileges by exploiting the algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri validation\nDescription: The application allows users to authenticate via a third-party OAuth provider. However, it improperly validates the redirect_uri parameter, making it susceptible to open redirect-based token leakage. To solve: intercept the OAuth flow and steal an authorization code intended for another user, then exchange it for an access token and log in as that user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation\", \"Lab Description\": \"The application allows users to authenticate via a third-party OAuth provider. However, it improperly validates the redirect_uri parameter, making it susceptible to open redirect-based token leakage. To solve: intercept the OAuth flow and steal an authorization code intended for another user, then exchange it for an access token and log in as that user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in URL\nDescription: The application accepts session identifiers via URL query parameters and fails to regenerate them on successful login. An attacker can force a known session ID and trick a user into authenticating with it. To solve: fixate a known session ID and hijack the victimâ€™s session after login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in URL\", \"Lab Description\": \"The application accepts session identifiers via URL query parameters and fails to regenerate them on successful login. An attacker can force a known session ID and trick a user into authenticating with it. To solve: fixate a known session ID and hijack the victimâ€™s session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion in token validation\nDescription: This lab's JWT-based authentication mechanism is vulnerable due to algorithm confusion. The server mistakenly trusts the algorithm value specified in the token header without verification. The application accepts tokens signed with 'none' and allows user impersonation. To solve: forge a JWT to impersonate the user 'admin' and access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token validation\", \"Lab Description\": \"This lab's JWT-based authentication mechanism is vulnerable due to algorithm confusion. The server mistakenly trusts the algorithm value specified in the token header without verification. The application accepts tokens signed with 'none' and allows user impersonation. To solve: forge a JWT to impersonate the user 'admin' and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID\nDescription: This lab's session management system is vulnerable to session fixation due to predictable session IDs being accepted after login. The server issues session IDs before authentication and fails to rotate them upon login. To solve: set a session ID, trick a user into logging in, then reuse that session to access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"This lab's session management system is vulnerable to session fixation due to predictable session IDs being accepted after login. The server issues session IDs before authentication and fails to rotate them upon login. To solve: set a session ID, trick a user into logging in, then reuse that session to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow token theft via redirect URI manipulation\nDescription: This lab uses OAuth's implicit grant type and suffers from a poorly validated redirect_uri parameter. The application incorrectly trusts any redirect_uri under the application's subdomain. To solve: inject a malicious redirect_uri that leaks the victimâ€™s access_token to your server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token theft via redirect URI manipulation\", \"Lab Description\": \"This lab uses OAuth's implicit grant type and suffers from a poorly validated redirect_uri parameter. The application incorrectly trusts any redirect_uri under the application's subdomain. To solve: inject a malicious redirect_uri that leaks the victimâ€™s access_token to your server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in API Gateway\nDescription: This lab simulates a Node.js-based API protected by JWT tokens. However, the server fails to validate the signing algorithm and blindly trusts the 'alg' header. The application accepts tokens with the 'none' algorithm and treats them as valid. To solve the lab, craft a JWT with 'none' as the algorithm and access Carlos's protected resource endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in API Gateway\", \"Lab Description\": \"This lab simulates a Node.js-based API protected by JWT tokens. However, the server fails to validate the signing algorithm and blindly trusts the 'alg' header. The application accepts tokens with the 'none' algorithm and treats them as valid. To solve the lab, craft a JWT with 'none' as the algorithm and access Carlos's protected resource endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via referer header\nDescription: The application implements OAuth 2.0 with an implicit grant flow. It redirects users with access tokens embedded in the URL fragment. However, the fragment is reflected into a third-party analytics script URL via a vulnerable referer header. To solve the lab, leak Carlos's token to your attacker server by triggering a login and capturing the referer.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header\", \"Lab Description\": \"The application implements OAuth 2.0 with an implicit grant flow. It redirects users with access tokens embedded in the URL fragment. However, the fragment is reflected into a third-party analytics script URL via a vulnerable referer header. To solve the lab, leak Carlos's token to your attacker server by triggering a login and capturing the referer.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login response\nDescription: The application issues session IDs before user authentication and fails to regenerate them after login. This allows an attacker to fix a known session ID, get a victim to log in using it, and hijack the session. To solve the lab, log in as Carlos using a fixed session and retrieve his account data from the dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login response\", \"Lab Description\": \"The application issues session IDs before user authentication and fails to regenerate them after login. This allows an attacker to fix a known session ID, get a victim to log in using it, and hijack the session. To solve the lab, log in as Carlos using a fixed session and retrieve his account data from the dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation via Predictable Token in OAuth Flow\nDescription: The OAuth login flow is improperly designed, allowing an attacker to fix the session identifier of a victim before authentication. The application accepts a static session ID from a GET parameter during the authorization phase, which persists after login. To solve: hijack Carlos's session by setting a fixed session ID before they authenticate and then reuse it to access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Token in OAuth Flow\", \"Lab Description\": \"The OAuth login flow is improperly designed, allowing an attacker to fix the session identifier of a victim before authentication. The application accepts a static session ID from a GET parameter during the authorization phase, which persists after login. To solve: hijack Carlos's session by setting a fixed session ID before they authenticate and then reuse it to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Exploitation in Token Verification\nDescription: This lab's JWT-based authentication system incorrectly allows tokens signed with the 'none' algorithm to bypass signature verification. The application fails to enforce algorithm restrictions during verification. To solve: forge a JWT token impersonating Carlos by crafting a token with 'alg: none'.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Exploitation in Token Verification\", \"Lab Description\": \"This lab's JWT-based authentication system incorrectly allows tokens signed with the 'none' algorithm to bypass signature verification. The application fails to enforce algorithm restrictions during verification. To solve: forge a JWT token impersonating Carlos by crafting a token with 'alg: none'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Broken Redirect in OAuth Callback Enables Token Theft\nDescription: The OAuth flow includes an open redirect vulnerability at the callback endpoint, allowing an attacker to steal the authorization code. The application uses an insecure redirect URI provided in the query string without validating its domain. To solve: hijack Carlosâ€™s login OAuth flow, extract the code, and use it to gain access to his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Broken Redirect in OAuth Callback Enables Token Theft\", \"Lab Description\": \"The OAuth flow includes an open redirect vulnerability at the callback endpoint, allowing an attacker to steal the authorization code. The application uses an insecure redirect URI provided in the query string without validating its domain. To solve: hijack Carlosâ€™s login OAuth flow, extract the code, and use it to gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature spoofing via 'none' algorithm in login API\nDescription: This lab implements stateless session management using JSON Web Tokens (JWT). The login endpoint generates a signed token that is used to authenticate subsequent requests. However, the application improperly allows the use of the 'none' algorithm. To solve: Forge a JWT token with 'alg':'none' and access Carlos's account without knowing his password.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature spoofing via 'none' algorithm in login API\", \"Lab Description\": \"This lab implements stateless session management using JSON Web Tokens (JWT). The login endpoint generates a signed token that is used to authenticate subsequent requests. However, the application improperly allows the use of the 'none' algorithm. To solve: Forge a JWT token with 'alg':'none' and access Carlos's account without knowing his password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: This lab's login system is vulnerable to session fixation because it fails to generate a new session identifier upon successful authentication. Attackers can set their own session ID and trick the victim into using it. To solve: Fix a session ID for Carlos before login, then access his account after he logs in using that ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"This lab's login system is vulnerable to session fixation because it fails to generate a new session identifier upon successful authentication. Attackers can set their own session ID and trick the victim into using it. To solve: Fix a session ID for Carlos before login, then access his account after he logs in using that ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration with open redirect and trust leak\nDescription: This OAuth login flow is misconfigured and trusts any redirect_uri parameter, allowing an attacker to steal authorization codes. The application blindly trusts the redirect_uri without validation. To solve: Steal Carlos's OAuth authorization code by crafting a malicious redirect_uri.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and trust leak\", \"Lab Description\": \"This OAuth login flow is misconfigured and trusts any redirect_uri parameter, allowing an attacker to steal authorization codes. The application blindly trusts the redirect_uri without validation. To solve: Steal Carlos's OAuth authorization code by crafting a malicious redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via 'none' algorithm in API token validation\nDescription: The application's authentication is handled via a JWT token passed in the Authorization header. The server accepts unsigned JWT tokens when the `alg` is set to 'none'. The application trusts the token's payload without signature verification. To solve: craft a forged JWT for user 'admin' and access the protected /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via 'none' algorithm in API token validation\", \"Lab Description\": \"The application's authentication is handled via a JWT token passed in the Authorization header. The server accepts unsigned JWT tokens when the `alg` is set to 'none'. The application trusts the token's payload without signature verification. To solve: craft a forged JWT for user 'admin' and access the protected /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri parameter\nDescription: The application uses OAuth 2.0 for user authentication. It trusts the 'redirect_uri' parameter without validating it against a whitelist. This allows an attacker to redirect the authorization code to their own domain and complete the OAuth flow. To solve: hijack an OAuth session and access the victimâ€™s account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri parameter\", \"Lab Description\": \"The application uses OAuth 2.0 for user authentication. It trusts the 'redirect_uri' parameter without validating it against a whitelist. This allows an attacker to redirect the authorization code to their own domain and complete the OAuth flow. To solve: hijack an OAuth session and access the victimâ€™s account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via static session ID assignment in login handler\nDescription: The application assigns a static session ID based on the username during login. An attacker can preset this ID for a victim before login. To solve: set a valid session ID for 'carlos' before he logs in, then hijack the session and access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via static session ID assignment in login handler\", \"Lab Description\": \"The application assigns a static session ID based on the username during login. An attacker can preset this ID for a victim before login. To solve: set a valid session ID for 'carlos' before he logs in, then hijack the session and access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID reuse\nDescription: The application reuses the same session ID across unauthenticated and authenticated states. When a user logs in, the existing session is not invalidated. This behavior allows session fixation. To solve: Fixate the session of the victim user Carlos and access his account after forcing a login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID reuse\", \"Lab Description\": \"The application reuses the same session ID across unauthenticated and authenticated states. When a user logs in, the existing session is not invalidated. This behavior allows session fixation. To solve: Fixate the session of the victim user Carlos and access his account after forcing a login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via 'none' algorithm attack\nDescription: The application uses JSON Web Tokens (JWT) for authentication, but fails to validate the algorithm in the JWT header. The application accepts tokens signed with 'none' algorithm, allowing attackers to forge arbitrary tokens. To solve: Forge a valid JWT token as admin using 'none' algorithm and access the /admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm attack\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for authentication, but fails to validate the algorithm in the JWT header. The application accepts tokens signed with 'none' algorithm, allowing attackers to forge arbitrary tokens. To solve: Forge a valid JWT token as admin using 'none' algorithm and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration exploiting open redirect\nDescription: The application uses OAuth for third-party login but trusts any redirect URI without validation. This enables attackers to manipulate the redirect_uri parameter to capture tokens. To solve: Abuse the redirect URI to intercept Carlos's access token and use it to access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration exploiting open redirect\", \"Lab Description\": \"The application uses OAuth for third-party login but trusts any redirect URI without validation. This enables attackers to manipulate the redirect_uri parameter to capture tokens. To solve: Abuse the redirect URI to intercept Carlos's access token and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Predictable Token Injection in OAuth Flow\nDescription: The OAuth implementation in this application mishandles session tokens when delegating login to third-party providers. The session identifier is not regenerated upon successful login. The application accepts a session token from unauthenticated users and continues using it post-authentication. To solve: fixate Carlos's session ID prior to login, then hijack his session after he logs in using the third-party flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Predictable Token Injection in OAuth Flow\", \"Lab Description\": \"The OAuth implementation in this application mishandles session tokens when delegating login to third-party providers. The session identifier is not regenerated upon successful login. The application accepts a session token from unauthenticated users and continues using it post-authentication. To solve: fixate Carlos's session ID prior to login, then hijack his session after he logs in using the third-party flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Token Forgery via None Algorithm Exploit\nDescription: This application uses JWT tokens to authenticate users but fails to verify the algorithm securely. If the algorithm field is set to 'none', the backend skips signature validation entirely. To solve: forge a JWT token for user 'carlos' by changing the algorithm to 'none' and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Token Forgery via None Algorithm Exploit\", \"Lab Description\": \"This application uses JWT tokens to authenticate users but fails to verify the algorithm securely. If the algorithm field is set to 'none', the backend skips signature validation entirely. To solve: forge a JWT token for user 'carlos' by changing the algorithm to 'none' and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA Bypass via Password Reset Flow\nDescription: This application's MFA enforcement fails during the password reset flow. After a password reset, users are logged in without triggering 2FA enforcement. To solve: trigger a password reset for Carlos, set a new password, then access his account page without MFA challenge.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA Bypass via Password Reset Flow\", \"Lab Description\": \"This application's MFA enforcement fails during the password reset flow. After a password reset, users are logged in without triggering 2FA enforcement. To solve: trigger a password reset for Carlos, set a new password, then access his account page without MFA challenge.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion vulnerability in API-based login\nDescription: This lab uses JWTs to manage user sessions via a stateless REST API. The backend fails to enforce strict algorithm verification, allowing attackers to tamper with the token header and payload to bypass authentication. The application verifies tokens but trusts user-supplied algorithm types. To solve: forge a token that grants access to the admin dashboard without knowing the secret key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in API-based login\", \"Lab Description\": \"This lab uses JWTs to manage user sessions via a stateless REST API. The backend fails to enforce strict algorithm verification, allowing attackers to tamper with the token header and payload to bypass authentication. The application verifies tokens but trusts user-supplied algorithm types. To solve: forge a token that grants access to the admin dashboard without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login redirect logic\nDescription: This lab uses cookies to manage sessions. Upon login, the session ID is preserved if already present. An attacker can exploit this by sharing a pre-set session cookie with a victim and then logging in with that same session. To solve: fix a session with a victim, then hijack their authenticated session after they log in.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login redirect logic\", \"Lab Description\": \"This lab uses cookies to manage sessions. Upon login, the session ID is preserved if already present. An attacker can exploit this by sharing a pre-set session cookie with a victim and then logging in with that same session. To solve: fix a session with a victim, then hijack their authenticated session after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth open redirect in callback endpoint\nDescription: This lab uses a third-party OAuth provider for user authentication. The callback endpoint is vulnerable to an open redirect allowing an attacker to intercept tokens. To solve: manipulate the redirect_uri to leak the authorization code to an attacker-controlled server and use it to impersonate the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in callback endpoint\", \"Lab Description\": \"This lab uses a third-party OAuth provider for user authentication. The callback endpoint is vulnerable to an open redirect allowing an attacker to intercept tokens. To solve: manipulate the redirect_uri to leak the authorization code to an attacker-controlled server and use it to impersonate the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'alg' field tampering to bypass signature validation\nDescription: This lab's authentication system uses JWTs for session management. The server is misconfigured to trust JWTs even when the 'alg' field is set to 'none'. The application does not properly validate the integrity of the JWT. To solve: tamper with the JWT to impersonate the user 'carlos' and access their account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'alg' field tampering to bypass signature validation\", \"Lab Description\": \"This lab's authentication system uses JWTs for session management. The server is misconfigured to trust JWTs even when the 'alg' field is set to 'none'. The application does not properly validate the integrity of the JWT. To solve: tamper with the JWT to impersonate the user 'carlos' and access their account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri\nDescription: This lab has a misconfigured OAuth 2.0 implementation that accepts unvalidated redirect_uris. An attacker can manipulate the redirect flow to obtain a valid authorization code for another user. To solve: steal Carlos's token via redirect_uri manipulation and use it to access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri\", \"Lab Description\": \"This lab has a misconfigured OAuth 2.0 implementation that accepts unvalidated redirect_uris. An attacker can manipulate the redirect flow to obtain a valid authorization code for another user. To solve: steal Carlos's token via redirect_uri manipulation and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation through predictable session ID generation\nDescription: This labâ€™s login system accepts user-supplied session IDs, and the session ID generation is weak and predictable. The application reuses the session ID if set before login. To solve: fix a known session ID before Carlos logs in and hijack his session afterward.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through predictable session ID generation\", \"Lab Description\": \"This labâ€™s login system accepts user-supplied session IDs, and the session ID generation is weak and predictable. The application reuses the session ID if set before login. To solve: fix a known session ID before Carlos logs in and hijack his session afterward.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Login Without Session Renewal\nDescription: This lab demonstrates a session fixation vulnerability in which the session ID remains unchanged after a successful login. The application does not regenerate the session identifier during authentication. To solve: Fixate a session on the victim and log in as Carlos by reusing the same session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Login Without Session Renewal\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in which the session ID remains unchanged after a successful login. The application does not regenerate the session identifier during authentication. To solve: Fixate a session on the victim and log in as Carlos by reusing the same session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Signature Forgery via Error Leak in Token Validation\nDescription: The backend uses JWTs for session management, but it discloses the secret key via verbose stack traces when given a malformed token. The application fails to suppress internal verification errors. To solve: Forge a JWT as Carlos and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Signature Forgery via Error Leak in Token Validation\", \"Lab Description\": \"The backend uses JWTs for session management, but it discloses the secret key via verbose stack traces when given a malformed token. The application fails to suppress internal verification errors. To solve: Forge a JWT as Carlos and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Open Redirect in OAuth Flow\nDescription: This OAuth-based login mechanism fails to properly validate the redirect_uri parameter. The application allows an arbitrary domain to receive tokens. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth code, then exchange it for an access token and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Open Redirect in OAuth Flow\", \"Lab Description\": \"This OAuth-based login mechanism fails to properly validate the redirect_uri parameter. The application allows an arbitrary domain to receive tokens. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth code, then exchange it for an access token and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in cookie-based login system\nDescription: The application uses session tokens to track users post-login but does not regenerate them after successful authentication. This allows attackers to fixate a known session ID. The application accepts a session cookie pre-authentication and reuses it post-login without renewal. To solve: force a victim to authenticate under an attacker-supplied session and hijack their session to access their profile.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in cookie-based login system\", \"Lab Description\": \"The application uses session tokens to track users post-login but does not regenerate them after successful authentication. This allows attackers to fixate a known session ID. The application accepts a session cookie pre-authentication and reuses it post-login without renewal. To solve: force a victim to authenticate under an attacker-supplied session and hijack their session to access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm\nDescription: This application uses JWTs for authentication. However, it incorrectly trusts tokens with the 'alg' header set to 'none' and does not verify the signature. This allows an attacker to forge arbitrary tokens. To solve: craft a JWT granting access to the 'admin' user and access their profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm\", \"Lab Description\": \"This application uses JWTs for authentication. However, it incorrectly trusts tokens with the 'alg' header set to 'none' and does not verify the signature. This allows an attacker to forge arbitrary tokens. To solve: craft a JWT granting access to the 'admin' user and access their profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect in redirect_uri parameter\nDescription: This OAuth implementation fails to validate the redirect_uri properly during authorization. Attackers can manipulate the redirect_uri to hijack authorization codes. The application whitelists any subdomain and doesn't enforce exact matching. To solve: intercept a user's OAuth flow and steal the authorization code to log in as them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in redirect_uri parameter\", \"Lab Description\": \"This OAuth implementation fails to validate the redirect_uri properly during authorization. Attackers can manipulate the redirect_uri to hijack authorization codes. The application whitelists any subdomain and doesn't enforce exact matching. To solve: intercept a user's OAuth flow and steal the authorization code to log in as them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in OAuth Authorization Flow\nDescription: This lab demonstrates a session fixation vulnerability during OAuth login using the Authorization Code grant type. The application mistakenly trusts the session cookie issued before OAuth verification is complete. The application fails to bind the session cookie to the OAuth authorization code flow. To solve: exploit the session fixation to log in as Carlos by abusing the OAuth login flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in OAuth Authorization Flow\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability during OAuth login using the Authorization Code grant type. The application mistakenly trusts the session cookie issued before OAuth verification is complete. The application fails to bind the session cookie to the OAuth authorization code flow. To solve: exploit the session fixation to log in as Carlos by abusing the OAuth login flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL Authorization Header\nDescription: This lab simulates an insecure JWT implementation within a GraphQL API that incorrectly allows tokens using the 'none' algorithm. The backend uses the Authorization Bearer token to authenticate users but skips verification if the algorithm is set to 'none'. To solve: forge a JWT with 'alg: none' and impersonate Carlos to access his profile.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL Authorization Header\", \"Lab Description\": \"This lab simulates an insecure JWT implementation within a GraphQL API that incorrectly allows tokens using the 'none' algorithm. The backend uses the Authorization Bearer token to authenticate users but skips verification if the algorithm is set to 'none'. To solve: forge a JWT with 'alg: none' and impersonate Carlos to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA Bypass via Debug Parameter Injection in REST API\nDescription: This labâ€™s REST-based login system includes a hidden debug parameter that allows bypassing the MFA challenge. When the debug=true parameter is set in the second-phase login POST request, the backend skips the MFA verification logic entirely. To solve: login as Carlos using the known password and bypass the MFA code requirement using the debug injection.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA Bypass via Debug Parameter Injection in REST API\", \"Lab Description\": \"This labâ€™s REST-based login system includes a hidden debug parameter that allows bypassing the MFA challenge. When the debug=true parameter is set in the second-phase login POST request, the backend skips the MFA verification logic entirely. To solve: login as Carlos using the known password and bypass the MFA code requirement using the debug injection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via insecure Set-Cookie logic in login response\nDescription: This lab's session management implementation is vulnerable to session fixation due to insecure handling of Set-Cookie during authentication. The application reuses a user-supplied session token without regeneration after login. To solve: hijack a victim session using a pre-authenticated session ID and access Carlos's account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure Set-Cookie logic in login response\", \"Lab Description\": \"This lab's session management implementation is vulnerable to session fixation due to insecure handling of Set-Cookie during authentication. The application reuses a user-supplied session token without regeneration after login. To solve: hijack a victim session using a pre-authenticated session ID and access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion leads to signature bypass\nDescription: The app uses JWTs for authentication and fails to verify the algorithm properly, allowing an attacker to change the token's algorithm to 'none' to bypass signature verification. The application decodes and trusts any token if it passes decoding. To solve: forge a JWT token for carlos with 'none' alg and access /dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion leads to signature bypass\", \"Lab Description\": \"The app uses JWTs for authentication and fails to verify the algorithm properly, allowing an attacker to change the token's algorithm to 'none' to bypass signature verification. The application decodes and trusts any token if it passes decoding. To solve: forge a JWT token for carlos with 'none' alg and access /dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration allows token stealing via redirect\nDescription: This lab simulates a misconfigured OAuth implicit flow that reflects access tokens in the URL fragment. An attacker can inject a malicious redirect_uri to leak the token to an external site. To solve: steal Carlos's OAuth access token and use it to access his /user/settings page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration allows token stealing via redirect\", \"Lab Description\": \"This lab simulates a misconfigured OAuth implicit flow that reflects access tokens in the URL fragment. An attacker can inject a malicious redirect_uri to leak the token to an external site. To solve: steal Carlos's OAuth access token and use it to access his /user/settings page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Authentication Bypass in Authorization Header\nDescription: The application's authentication mechanism relies on JWTs passed in the Authorization header. However, the server fails to properly validate the signing algorithm. The application accepts tokens signed with 'alg':'none', bypassing signature verification. To solve: gain access to Carlos's account using a forged token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass in Authorization Header\", \"Lab Description\": \"The application's authentication mechanism relies on JWTs passed in the Authorization header. However, the server fails to properly validate the signing algorithm. The application accepts tokens signed with 'alg':'none', bypassing signature verification. To solve: gain access to Carlos's account using a forged token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in Cookie Handling\nDescription: The application assigns a session cookie to anonymous users but fails to rotate it after login. This allows an attacker to fix a victim's session beforehand and hijack their account once they log in. To solve: log in as Carlos using a pre-assigned session cookie.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Cookie Handling\", \"Lab Description\": \"The application assigns a session cookie to anonymous users but fails to rotate it after login. This allows an attacker to fix a victim's session beforehand and hijack their account once they log in. To solve: log in as Carlos using a pre-assigned session cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI\nDescription: The OAuth flow used by the application is improperly configured to allow open redirect URIs. This enables attackers to intercept access tokens by specifying their own domain. To solve: capture Carlosâ€™s OAuth access token and use it to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI\", \"Lab Description\": \"The OAuth flow used by the application is improperly configured to allow open redirect URIs. This enables attackers to intercept access tokens by specifying their own domain. To solve: capture Carlosâ€™s OAuth access token and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT-based authentication system fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT-based authentication system fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: This lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage to attacker-controlled domains. The application generates OAuth tokens after successful authentication. To solve: steal a valid OAuth token by manipulating the redirect flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"This lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage to attacker-controlled domains. The application generates OAuth tokens after successful authentication. To solve: steal a valid OAuth token by manipulating the redirect flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via insecure session regeneration in GraphQL endpoint\nDescription: This lab's GraphQL API fails to properly regenerate session tokens after authentication, allowing session fixation attacks. The application maintains the same session ID pre- and post-login. To solve: fixate a session on a victim's browser and gain access when they authenticate.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure session regeneration in GraphQL endpoint\", \"Lab Description\": \"This lab's GraphQL API fails to properly regenerate session tokens after authentication, allowing session fixation attacks. The application maintains the same session ID pre- and post-login. To solve: fixate a session on a victim's browser and gain access when they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in REST API authentication\nDescription: This lab's JWT validation improperly uses the kid header to load verification keys from the filesystem without proper sanitization. The application blindly trusts the kid parameter when selecting verification keys. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in REST API authentication\", \"Lab Description\": \"This lab's JWT validation improperly uses the kid header to load verification keys from the filesystem without proper sanitization. The application blindly trusts the kid parameter when selecting verification keys. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via state parameter reflection\nDescription: This lab's OAuth implementation fails to validate the state parameter between requests, allowing token hijacking. The application reflects the state parameter from the authorization request to the callback without validation. To solve: intercept an OAuth flow and steal a victim's token by predicting the state value.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via state parameter reflection\", \"Lab Description\": \"This lab's OAuth implementation fails to validate the state parameter between requests, allowing token hijacking. The application reflects the state parameter from the authorization request to the callback without validation. To solve: intercept an OAuth flow and steal a victim's token by predicting the state value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL introspection leaks\nDescription: This lab's GraphQL endpoint exposes session management functionality through introspection, allowing attackers to fixate sessions. The application's GraphQL schema reveals mutation fields for session handling without proper access controls. To solve: use introspection to discover session mutations and fixate a session on a victim's browser.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL introspection leaks\", \"Lab Description\": \"This lab's GraphQL endpoint exposes session management functionality through introspection, allowing attackers to fixate sessions. The application's GraphQL schema reveals mutation fields for session handling without proper access controls. To solve: use introspection to discover session mutations and fixate a session on a victim's browser.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature stripping in microservice authentication\nDescription: This lab's microservice architecture fails to properly validate JWT signatures across services. The frontend service accepts unsigned tokens when forwarded from internal services. To solve: bypass authentication by stripping the signature from a valid JWT and injecting it into internal service calls.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping in microservice authentication\", \"Lab Description\": \"This lab's microservice architecture fails to properly validate JWT signatures across services. The frontend service accepts unsigned tokens when forwarded from internal services. To solve: bypass authentication by stripping the signature from a valid JWT and injecting it into internal service calls.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure PKCE implementation\nDescription: This lab's OAuth implementation uses Proof Key for Code Exchange (PKCE) incorrectly, allowing authorization code interception. The application fails to validate the code_verifier properly during token exchange. To solve: intercept an authorization code and exchange it for a token without the original code_verifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure PKCE implementation\", \"Lab Description\": \"This lab's OAuth implementation uses Proof Key for Code Exchange (PKCE) incorrectly, allowing authorization code interception. The application fails to validate the code_verifier properly during token exchange. To solve: intercept an authorization code and exchange it for a token without the original code_verifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: This lab's WebSocket implementation creates sessions during the HTTP handshake without proper validation. The application assigns session identifiers before authentication is complete. To solve: fixate a session during the WebSocket handshake and hijack it after victim authentication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"This lab's WebSocket implementation creates sessions during the HTTP handshake without proper validation. The application assigns session identifiers before authentication is complete. To solve: fixate a session during the WebSocket handshake and hijack it after victim authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT-based authentication fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT-based authentication fails to properly validate token signatures. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query injection in user search functionality\nDescription: The lab's GraphQL endpoint improperly sanitizes user input in search queries. The application exposes sensitive fields through introspection. To solve: extract all user credentials via a single malicious GraphQL query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query injection in user search functionality\", \"Lab Description\": \"The lab's GraphQL endpoint improperly sanitizes user input in search queries. The application exposes sensitive fields through introspection. To solve: extract all user credentials via a single malicious GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect\nDescription: The lab's OAuth implementation fails to validate redirect URIs, allowing token interception. The application uses implicit flow with improper state validation. To solve: steal an OAuth token and authenticate as another user.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect\", \"Lab Description\": \"The lab's OAuth implementation fails to validate redirect URIs, allowing token interception. The application uses implicit flow with improper state validation. To solve: steal an OAuth token and authenticate as another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured redirect_uri\nDescription: The OAuth implementation leaks authorization codes through open redirects. The application fails to validate redirect_uri against pre-registered URIs. To solve: steal an OAuth token by manipulating the redirect flow to a controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured redirect_uri\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through open redirects. The application fails to validate redirect_uri against pre-registered URIs. To solve: steal an OAuth token by manipulating the redirect flow to a controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in GraphQL authentication endpoint\nDescription: The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate session tokens after login. To solve: fixate a session token on victim's browser then capture their authenticated session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in GraphQL authentication endpoint\", \"Lab Description\": \"The GraphQL API assigns session tokens before authentication is complete. The application doesn't regenerate session tokens after login. To solve: fixate a session token on victim's browser then capture their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none exploitation in REST API authentication\nDescription: The application uses JSON Web Tokens for session management but fails to properly validate the signature. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT to escalate privileges to admin without valid credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none exploitation in REST API authentication\", \"Lab Description\": \"The application uses JSON Web Tokens for session management but fails to properly validate the signature. The vulnerable endpoint accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT to escalate privileges to admin without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL batching attack in user enumeration endpoint\nDescription: The GraphQL API implements authentication checks inefficiently, allowing batch queries to bypass rate limiting. The /graphql endpoint processes multiple authentication attempts in a single request. To solve: perform credential stuffing with 100+ combinations in one HTTP request to discover valid credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack in user enumeration endpoint\", \"Lab Description\": \"The GraphQL API implements authentication checks inefficiently, allowing batch queries to bypass rate limiting. The /graphql endpoint processes multiple authentication attempts in a single request. To solve: perform credential stuffing with 100+ combinations in one HTTP request to discover valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect in authorization flow\nDescription: The OAuth 2.0 implementation fails to validate redirect_uri parameters, allowing attackers to intercept authorization codes. The vulnerable /oauth/authorize endpoint accepts arbitrary redirect destinations. To solve: construct malicious redirect URI to capture victim's token after they authenticate.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect in authorization flow\", \"Lab Description\": \"The OAuth 2.0 implementation fails to validate redirect_uri parameters, allowing attackers to intercept authorization codes. The vulnerable /oauth/authorize endpoint accepts arbitrary redirect destinations. To solve: construct malicious redirect URI to capture victim's token after they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via XSS in JWT generation endpoint\nDescription: The application's JWT generation endpoint reflects user-controlled input without proper encoding. The vulnerable /api/jwt/generate endpoint echoes back the username in JWT claims when debug mode is active. To solve: chain stored XSS with session fixation to hijack admin session tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in JWT generation endpoint\", \"Lab Description\": \"The application's JWT generation endpoint reflects user-controlled input without proper encoding. The vulnerable /api/jwt/generate endpoint echoes back the username in JWT claims when debug mode is active. To solve: chain stored XSS with session fixation to hijack admin session tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in identity provider\nDescription: The OAuth provider's CORS policy allows arbitrary origins to access token endpoints. The vulnerable /oauth/token endpoint responds with Access-Control-Allow-Origin: * headers. To solve: craft malicious JavaScript to retrieve victim's OAuth tokens cross-origin.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in identity provider\", \"Lab Description\": \"The OAuth provider's CORS policy allows arbitrary origins to access token endpoints. The vulnerable /oauth/token endpoint responds with Access-Control-Allow-Origin: * headers. To solve: craft malicious JavaScript to retrieve victim's OAuth tokens cross-origin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification service blindly trusts the kid header to load verification keys. The vulnerable /verify endpoint allows directory traversal in kid parameter. To solve: manipulate kid header to point to attacker-controlled key file and forge valid tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification service blindly trusts the kid header to load verification keys. The vulnerable /verify endpoint allows directory traversal in kid parameter. To solve: manipulate kid header to point to attacker-controlled key file and forge valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers without proper verification. The vulnerable /api/validate endpoint processes tokens with externally specified verification keys. To solve: host malicious JWK set and forge admin token with manipulated jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation endpoint trusts arbitrary jku (JSON Key URL) headers without proper verification. The vulnerable /api/validate endpoint processes tokens with externally specified verification keys. To solve: host malicious JWK set and forge admin token with manipulated jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state parameter validation\nDescription: The OAuth implementation fails to properly validate state parameters during token exchange. The vulnerable /oauth/callback endpoint processes authorization codes without verifying bound state values. To solve: intercept victim's OAuth flow and swap their authorization code for an access token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state parameter validation\", \"Lab Description\": \"The OAuth implementation fails to properly validate state parameters during token exchange. The vulnerable /oauth/callback endpoint processes authorization codes without verifying bound state values. To solve: intercept victim's OAuth flow and swap their authorization code for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via insecure session migration after login\nDescription: The application maintains pre-authentication session IDs post-login without regeneration. The vulnerable /login endpoint accepts existing session cookies after authentication. To solve: fixate session on victim's browser then trigger authentication to hijack their logged-in session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure session migration after login\", \"Lab Description\": \"The application maintains pre-authentication session IDs post-login without regeneration. The vulnerable /login endpoint accepts existing session cookies after authentication. To solve: fixate session on victim's browser then trigger authentication to hijack their logged-in session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation vulnerability in login endpoint\nDescription: The login mechanism assigns a session identifier before verifying credentials. This allows an attacker to fixate a session for a victim. The application reuses the session token issued prior to authentication. To solve: hijack a session by forcing a victim to authenticate using a session token you control, then access their My account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login endpoint\", \"Lab Description\": \"The login mechanism assigns a session identifier before verifying credentials. This allows an attacker to fixate a session for a victim. The application reuses the session token issued prior to authentication. To solve: hijack a session by forcing a victim to authenticate using a session token you control, then access their My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering vulnerability in API authorization header\nDescription: The backend accepts JWTs signed with the 'none' algorithm. This exposes the application to JWT tampering where the payload can be altered without a valid signature. To solve: tamper with the token to elevate privileges and access the /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in API authorization header\", \"Lab Description\": \"The backend accepts JWTs signed with the 'none' algorithm. This exposes the application to JWT tampering where the payload can be altered without a valid signature. To solve: tamper with the token to elevate privileges and access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage in redirect URI through Referer header\nDescription: The OAuth implementation uses the implicit grant type and sends tokens in the URL fragment. When redirected to an insecure third-party page, the Referer header leaks the token. To solve: extract an access token leaked via the Referer header and use it to access a protected /profile endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage in redirect URI through Referer header\", \"Lab Description\": \"The OAuth implementation uses the implicit grant type and sends tokens in the URL fragment. When redirected to an insecure third-party page, the Referer header leaks the token. To solve: extract an access token leaked via the Referer header and use it to access a protected /profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login handler logic\nDescription: This application fails to regenerate session identifiers during login. If an attacker can trick a user into logging in with a known session ID, they can later hijack that session. The application allows unauthenticated session identifiers to persist after login. To solve: Hijack Carlos's session by fixing the session ID before login and accessing his My account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login handler logic\", \"Lab Description\": \"This application fails to regenerate session identifiers during login. If an attacker can trick a user into logging in with a known session ID, they can later hijack that session. The application allows unauthenticated session identifiers to persist after login. To solve: Hijack Carlos's session by fixing the session ID before login and accessing his My account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via 'alg: none' flaw\nDescription: This lab uses JSON Web Tokens to authenticate users but improperly trusts the 'alg' field in the token header. If the server accepts tokens signed with 'alg': 'none', an attacker can forge arbitrary tokens. To solve: Forge a JWT for the admin user and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via 'alg: none' flaw\", \"Lab Description\": \"This lab uses JSON Web Tokens to authenticate users but improperly trusts the 'alg' field in the token header. If the server accepts tokens signed with 'alg': 'none', an attacker can forge arbitrary tokens. To solve: Forge a JWT for the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirection misuse in authorization flow\nDescription: The OAuth integration in this application incorrectly trusts the 'redirect_uri' parameter without proper validation. An attacker can manipulate this to obtain authorization codes meant for other clients. To solve: Capture a valid OAuth code issued to Carlos and use it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirection misuse in authorization flow\", \"Lab Description\": \"The OAuth integration in this application incorrectly trusts the 'redirect_uri' parameter without proper validation. An attacker can manipulate this to obtain authorization codes meant for other clients. To solve: Capture a valid OAuth code issued to Carlos and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'none' algorithm bypass in Authorization Header\nDescription: This lab uses stateless JWTs to manage user sessions and relies on the `alg` claim for cryptographic validation. The application fails to enforce signature verification when the 'alg' value is set to 'none'. The application trusts the header contents without validating a signature. To solve: Forge a valid admin token and access the /admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'none' algorithm bypass in Authorization Header\", \"Lab Description\": \"This lab uses stateless JWTs to manage user sessions and relies on the `alg` claim for cryptographic validation. The application fails to enforce signature verification when the 'alg' value is set to 'none'. The application trusts the header contents without validating a signature. To solve: Forge a valid admin token and access the /admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Open redirect in OAuth login flow enables account takeover\nDescription: The app allows login using an OAuth provider and accepts any `redirect_uri` value passed during the initial auth request. This weak validation allows redirection of access tokens to attacker-controlled domains. To solve: Steal an OAuth token and access the victim's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Open redirect in OAuth login flow enables account takeover\", \"Lab Description\": \"The app allows login using an OAuth provider and accepts any `redirect_uri` value passed during the initial auth request. This weak validation allows redirection of access tokens to attacker-controlled domains. To solve: Steal an OAuth token and access the victim's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unrotated session ID after login\nDescription: This application assigns a session ID prior to authentication but does not issue a new session ID upon successful login. This allows an attacker to set a session ID for a victim and then log in with it, hijacking the session. To solve: Fixate a session and hijack Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unrotated session ID after login\", \"Lab Description\": \"This application assigns a session ID prior to authentication but does not issue a new session ID upon successful login. This allows an attacker to set a session ID for a victim and then log in with it, hijacking the session. To solve: Fixate a session and hijack Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Authentication Bypass in Authorization Header\nDescription: The application uses JWT tokens for user authentication but fails to validate the token's signing algorithm properly. It trusts tokens where the 'alg' field is set to 'none', allowing attackers to forge tokens without a valid signature. The application grants access to user-specific endpoints solely based on the decoded token. To solve: Forge a valid admin-level token and access the /admin page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Authentication Bypass in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens for user authentication but fails to validate the token's signing algorithm properly. It trusts tokens where the 'alg' field is set to 'none', allowing attackers to forge tokens without a valid signature. The application grants access to user-specific endpoints solely based on the decoded token. To solve: Forge a valid admin-level token and access the /admin page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation via URL Parameter in Cookie Assignment\nDescription: The application improperly assigns session identifiers based on a user-controlled query parameter. When a session ID is passed in the URL, the server uses it without validation, allowing attackers to pre-define the victim's session ID. To solve: Fix a session ID for Carlos before login, then log in with his credentials and hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via URL Parameter in Cookie Assignment\", \"Lab Description\": \"The application improperly assigns session identifiers based on a user-controlled query parameter. When a session ID is passed in the URL, the server uses it without validation, allowing attackers to pre-define the victim's session ID. To solve: Fix a session ID for Carlos before login, then log in with his credentials and hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Authorization Code Interception in OAuth Redirect Endpoint\nDescription: The OAuth implementation is vulnerable due to an open redirect flaw in the redirect_uri parameter. Attackers can hijack the authorization code by forcing a victim to authenticate and redirect the code to a malicious domain. To solve: Intercept Carlosâ€™s OAuth code and exchange it for an access token to access /user-info.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception in OAuth Redirect Endpoint\", \"Lab Description\": \"The OAuth implementation is vulnerable due to an open redirect flaw in the redirect_uri parameter. Attackers can hijack the authorization code by forcing a victim to authenticate and redirect the code to a malicious domain. To solve: Intercept Carlosâ€™s OAuth code and exchange it for an access token to access /user-info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion in authorization middleware\nDescription: The application's authorization middleware incorrectly trusts the JWT 'alg' header value, allowing attackers to manipulate the signing algorithm. The application uses asymmetric RSA public key verification by default, but if the JWT's header is altered to use 'HS256', the server uses the public key as the HMAC secret. To solve: Forge a JWT for admin user and access their profile endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in authorization middleware\", \"Lab Description\": \"The application's authorization middleware incorrectly trusts the JWT 'alg' header value, allowing attackers to manipulate the signing algorithm. The application uses asymmetric RSA public key verification by default, but if the JWT's header is altered to use 'HS256', the server uses the public key as the HMAC secret. To solve: Forge a JWT for admin user and access their profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration in redirect URI\nDescription: The application improperly validates redirect URIs during OAuth implicit flow, allowing an attacker to craft a malicious URL that steals the access token. The application accepts wildcard subdomains without proper origin validation. To solve: Capture a valid token via redirect hijack and access protected user info.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in redirect URI\", \"Lab Description\": \"The application improperly validates redirect URIs during OAuth implicit flow, allowing an attacker to craft a malicious URL that steals the access token. The application accepts wildcard subdomains without proper origin validation. To solve: Capture a valid token via redirect hijack and access protected user info.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable token in login endpoint\nDescription: This application assigns a session token before authentication and does not regenerate it upon login. The token is predictable and can be reused by an attacker. To solve: Fixate Carlos's session by injecting a known session ID before they log in, then use that session to access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable token in login endpoint\", \"Lab Description\": \"This application assigns a session token before authentication and does not regenerate it upon login. The token is predictable and can be reused by an attacker. To solve: Fixate Carlos's session by injecting a known session ID before they log in, then use that session to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion in token verification endpoint\nDescription: This lab features a JSON Web Token (JWT)-based authentication mechanism where the server incorrectly trusts the 'alg' field in the token. The application verifies tokens using HMAC and exposes a `/jwt-check` API for verification. To solve: forge a valid token to access Carlos's protected account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification endpoint\", \"Lab Description\": \"This lab features a JSON Web Token (JWT)-based authentication mechanism where the server incorrectly trusts the 'alg' field in the token. The application verifies tokens using HMAC and exposes a `/jwt-check` API for verification. To solve: forge a valid token to access Carlos's protected account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow token leakage via referer header\nDescription: This lab implements OAuth 2.0 with an implicit grant flow. Upon successful login, the access token is included in the URL fragment. A third-party analytics script captures this fragment due to an insecure redirect URI. To solve: extract the access token issued to Carlos by monitoring outbound requests.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referer header\", \"Lab Description\": \"This lab implements OAuth 2.0 with an implicit grant flow. Upon successful login, the access token is included in the URL fragment. A third-party analytics script captures this fragment due to an insecure redirect URI. To solve: extract the access token issued to Carlos by monitoring outbound requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login flow\nDescription: This lab uses a custom session management system where session IDs are issued before login and stored in cookies. The application does not regenerate the session ID upon authentication. To solve: fix your own session ID, trick Carlos into logging in with it, then reuse the same session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login flow\", \"Lab Description\": \"This lab uses a custom session management system where session IDs are issued before login and stored in cookies. The application does not regenerate the session ID upon authentication. To solve: fix your own session ID, trick Carlos into logging in with it, then reuse the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in login flow with static token parameter\nDescription: The login mechanism of this web application accepts an optional session token via a query parameter. This token is reused after login without being regenerated. The application stores session tokens in cookies without validating their origin. To solve: Fixate a session token prior to login and hijack the session after authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in login flow with static token parameter\", \"Lab Description\": \"The login mechanism of this web application accepts an optional session token via a query parameter. This token is reused after login without being regenerated. The application stores session tokens in cookies without validating their origin. To solve: Fixate a session token prior to login and hijack the session after authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via alg=none in token verification middleware\nDescription: The backend verifies JWTs but does not enforce strict algorithm checks. It accepts tokens signed with 'none', allowing an attacker to forge tokens without a secret key. To solve: Forge a JWT for the admin user using alg=none and gain access to the protected /admin area.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via alg=none in token verification middleware\", \"Lab Description\": \"The backend verifies JWTs but does not enforce strict algorithm checks. It accepts tokens signed with 'none', allowing an attacker to forge tokens without a secret key. To solve: Forge a JWT for the admin user using alg=none and gain access to the protected /admin area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect via manipulated redirect_uri parameter\nDescription: The OAuth 2.0 implementation does not validate redirect_uri strictly, allowing an attacker to redirect authorization codes to their own domain. To solve: Manipulate the redirect_uri parameter to intercept an OAuth code and gain access as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect via manipulated redirect_uri parameter\", \"Lab Description\": \"The OAuth 2.0 implementation does not validate redirect_uri strictly, allowing an attacker to redirect authorization codes to their own domain. To solve: Manipulate the redirect_uri parameter to intercept an OAuth code and gain access as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login workflow via URL parameter\nDescription: The application fails to regenerate session tokens upon successful login. Instead, it allows user-supplied session IDs via the URL. An attacker can predefine a session ID, share it with a victim, and later take over the session post-login. The application reflects session identifiers in the URL without validation. To solve: hijack Carlos's session by forcing him to authenticate using an attacker-defined session ID and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login workflow via URL parameter\", \"Lab Description\": \"The application fails to regenerate session tokens upon successful login. Instead, it allows user-supplied session IDs via the URL. An attacker can predefine a session ID, share it with a victim, and later take over the session post-login. The application reflects session identifiers in the URL without validation. To solve: hijack Carlos's session by forcing him to authenticate using an attacker-defined session ID and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT token tampering via algorithm confusion in Authorization header\nDescription: The application uses JWTs for session authentication, but fails to enforce signature verification when the `alg` field is set to 'none'. It accepts unsigned tokens if the `alg` header is manipulated. The application trusts decoded claims blindly without validating token integrity. To solve: craft a JWT with 'none' algorithm and escalate privileges to impersonate Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering via algorithm confusion in Authorization header\", \"Lab Description\": \"The application uses JWTs for session authentication, but fails to enforce signature verification when the `alg` field is set to 'none'. It accepts unsigned tokens if the `alg` header is manipulated. The application trusts decoded claims blindly without validating token integrity. To solve: craft a JWT with 'none' algorithm and escalate privileges to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect in redirect_uri parameter allows account takeover\nDescription: The OAuth flow implemented in this application fails to validate the `redirect_uri` parameter strictly. An attacker can manipulate this parameter to point to a domain they control and steal the authorization code. The application exchanges this code for tokens without verifying the origin. To solve: intercept Carlos's authorization code and use it to access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in redirect_uri parameter allows account takeover\", \"Lab Description\": \"The OAuth flow implemented in this application fails to validate the `redirect_uri` parameter strictly. An attacker can manipulate this parameter to point to a domain they control and steal the authorization code. The application exchanges this code for tokens without verifying the origin. To solve: intercept Carlos's authorization code and use it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via 'none' algorithm in API authorization\nDescription: The application uses JSON Web Tokens (JWT) to authorize access to its internal API. However, it accepts tokens with the 'alg' field set to 'none', bypassing signature verification. The application trusts any JWT with a valid payload and does not validate its signature. To solve: Forge a JWT that impersonates the user 'carlos' and access the /api/account endpoint to retrieve their account information.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via 'none' algorithm in API authorization\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) to authorize access to its internal API. However, it accepts tokens with the 'alg' field set to 'none', bypassing signature verification. The application trusts any JWT with a valid payload and does not validate its signature. To solve: Forge a JWT that impersonates the user 'carlos' and access the /api/account endpoint to retrieve their account information.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration\nDescription: This lab integrates with an OAuth 2.0 provider using the implicit grant flow. However, it fails to validate the access token or issuer properly. The access_token is directly used as an authentication mechanism without validation. To solve: Obtain a forged access token for the victim 'carlos' and use it to log in via the /auth/callback endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration\", \"Lab Description\": \"This lab integrates with an OAuth 2.0 provider using the implicit grant flow. However, it fails to validate the access token or issuer properly. The access_token is directly used as an authentication mechanism without validation. To solve: Obtain a forged access token for the victim 'carlos' and use it to log in via the /auth/callback endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect_uri manipulation leading to account takeover\nDescription: The application uses OAuth to delegate authentication to a third-party provider but improperly validates the redirect_uri parameter. The application fails to strictly match or validate trusted domains. To solve: hijack the OAuth flow and gain access to Carlosâ€™s account using a crafted redirect_uri.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect_uri manipulation leading to account takeover\", \"Lab Description\": \"The application uses OAuth to delegate authentication to a third-party provider but improperly validates the redirect_uri parameter. The application fails to strictly match or validate trusted domains. To solve: hijack the OAuth flow and gain access to Carlosâ€™s account using a crafted redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion vulnerability\nDescription: The application uses JWTs for session handling and accepts unsigned tokens due to improper algorithm enforcement. The backend uses a vulnerable JWT library that accepts 'alg':'none'. To solve: forge an unsigned JWT to impersonate Carlos and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability\", \"Lab Description\": \"The application uses JWTs for session handling and accepts unsigned tokens due to improper algorithm enforcement. The backend uses a vulnerable JWT library that accepts 'alg':'none'. To solve: forge an unsigned JWT to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation using insecure token handling\nDescription: The application allows setting the session ID via URL query parameter. The server does not invalidate or regenerate the session after login. To solve: fix a session ID before login and trick Carlos into using it, then hijack his session post-login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation using insecure token handling\", \"Lab Description\": \"The application allows setting the session ID via URL query parameter. The server does not invalidate or regenerate the session after login. To solve: fix a session ID before login and trick Carlos into using it, then hijack his session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm manipulation in API auth header\nDescription: The application uses a JWT token for authentication, accepting the token from an Authorization: Bearer header. The backend insecurely supports the 'none' algorithm in JWT validation, allowing the signature to be bypassed. To solve: forge a token that grants admin access without knowing the original signing key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm manipulation in API auth header\", \"Lab Description\": \"The application uses a JWT token for authentication, accepting the token from an Authorization: Bearer header. The backend insecurely supports the 'none' algorithm in JWT validation, allowing the signature to be bypassed. To solve: forge a token that grants admin access without knowing the original signing key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit grant token leakage via Referer\nDescription: The application implements an OAuth 2.0 implicit grant flow that directly exposes access tokens in the URL fragment. When third-party JavaScript is loaded on redirect URIs, these tokens are leaked via Referer headers. To solve: extract an access token belonging to Carlos using Referer header leakage and reuse it to access protected resources.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit grant token leakage via Referer\", \"Lab Description\": \"The application implements an OAuth 2.0 implicit grant flow that directly exposes access tokens in the URL fragment. When third-party JavaScript is loaded on redirect URIs, these tokens are leaked via Referer headers. To solve: extract an access token belonging to Carlos using Referer header leakage and reuse it to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session tokens in login response\nDescription: The application sets a session cookie in a GET /set-session endpoint before login. The token is reused after successful login without regeneration. An attacker can fix a session ID and force the victim to authenticate within it. To solve: fix a session ID and log in as Carlos within that session to hijack the login state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session tokens in login response\", \"Lab Description\": \"The application sets a session cookie in a GET /set-session endpoint before login. The token is reused after successful login without regeneration. An attacker can fix a session ID and force the victim to authenticate within it. To solve: fix a session ID and log in as Carlos within that session to hijack the login state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The login mechanism fails to assign a new session token after authentication. The application reuses the session token set prior to login. To solve: fixate a session for the victim user, log them in using social engineering or automation, then access their account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The login mechanism fails to assign a new session token after authentication. The application reuses the session token set prior to login. To solve: fixate a session for the victim user, log them in using social engineering or automation, then access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT tampering via algorithm confusion vulnerability in token validation\nDescription: The server accepts and trusts JWTs with the `alg` header set to `none`, allowing unsigned tokens to be accepted. The application trusts the payload without validating its integrity. To solve: craft a forged JWT token impersonating Carlos and use it to access /my-account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion vulnerability in token validation\", \"Lab Description\": \"The server accepts and trusts JWTs with the `alg` header set to `none`, allowing unsigned tokens to be accepted. The application trusts the payload without validating its integrity. To solve: craft a forged JWT token impersonating Carlos and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token manipulation in third-party login integration\nDescription: The application integrates with an OAuth provider but does not properly validate the `access_token` or `id_token` audience and issuer. It only parses the token payload to extract the email. To solve: forge a valid-looking token for Carlos with a fake OAuth issuer and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token manipulation in third-party login integration\", \"Lab Description\": \"The application integrates with an OAuth provider but does not properly validate the `access_token` or `id_token` audience and issuer. It only parses the token payload to extract the email. To solve: forge a valid-looking token for Carlos with a fake OAuth issuer and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login flow\nDescription: This labâ€™s login mechanism is vulnerable to session fixation. The application does not assign a new session identifier upon successful login. As a result, an attacker can set a session ID before login and reuse it. To solve the lab, gain access to Carlos's account using a pre-established session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login flow\", \"Lab Description\": \"This labâ€™s login mechanism is vulnerable to session fixation. The application does not assign a new session identifier upon successful login. As a result, an attacker can set a session ID before login and reuse it. To solve the lab, gain access to Carlos's account using a pre-established session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm\nDescription: The application uses JWT for authentication but fails to validate the token signature algorithm correctly. If the algorithm is changed to 'none', the server accepts the token as valid without verification. To solve the lab, forge a valid JWT for Carlos and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm\", \"Lab Description\": \"The application uses JWT for authentication but fails to validate the token signature algorithm correctly. If the algorithm is changed to 'none', the server accepts the token as valid without verification. To solve the lab, forge a valid JWT for Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation\nDescription: The OAuth implementation accepts arbitrary redirect URIs without proper whitelisting, allowing an attacker to intercept tokens. This can be abused to steal Carlos's OAuth access token. To solve the lab, leak his token and use it to access his account data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"The OAuth implementation accepts arbitrary redirect URIs without proper whitelisting, allowing an attacker to intercept tokens. This can be abused to steal Carlos's OAuth access token. To solve the lab, leak his token and use it to access his account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The application does not invalidate or regenerate the session ID upon successful login. This enables an attacker to fix a session for a victim prior to authentication. The application reuses existing session tokens across user privilege states. To solve: Hijack Carlos's session after setting it yourself and gaining access to /my-account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application does not invalidate or regenerate the session ID upon successful login. This enables an attacker to fix a session for a victim prior to authentication. The application reuses existing session tokens across user privilege states. To solve: Hijack Carlos's session after setting it yourself and gaining access to /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via 'none' algorithm in token verification\nDescription: The application accepts JWT tokens for authentication and does not properly enforce algorithm constraints. It accepts unsigned tokens by trusting the 'none' algorithm. To solve: Modify your token to impersonate Carlos and access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via 'none' algorithm in token verification\", \"Lab Description\": \"The application accepts JWT tokens for authentication and does not properly enforce algorithm constraints. It accepts unsigned tokens by trusting the 'none' algorithm. To solve: Modify your token to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect vulnerability in redirect_uri parameter\nDescription: The application improperly validates redirect URIs during OAuth flows, allowing an attacker to redirect tokens to arbitrary domains. The `redirect_uri` parameter is partially whitelisted, but allows open redirects via parameter manipulation. To solve: Steal Carlosâ€™s OAuth token and access his protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect vulnerability in redirect_uri parameter\", \"Lab Description\": \"The application improperly validates redirect URIs during OAuth flows, allowing an attacker to redirect tokens to arbitrary domains. The `redirect_uri` parameter is partially whitelisted, but allows open redirects via parameter manipulation. To solve: Steal Carlosâ€™s OAuth token and access his protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering using 'none' algorithm in login token verification\nDescription: This lab's login system is vulnerable due to insecure JWT handling. The application accepts the 'alg' value from the header without verification. An attacker can tamper with the token's payload and set the 'alg' to 'none' to forge authentication. To solve: forge a valid JWT for user 'carlos' and access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering using 'none' algorithm in login token verification\", \"Lab Description\": \"This lab's login system is vulnerable due to insecure JWT handling. The application accepts the 'alg' value from the header without verification. An attacker can tamper with the token's payload and set the 'alg' to 'none' to forge authentication. To solve: forge a valid JWT for user 'carlos' and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in session ID issued on login via Set-Cookie header\nDescription: This application allows session fixation through predictable session tokens. The server issues session IDs in a predictable manner and does not regenerate them after successful login. To solve: fix a session ID for 'carlos' before he logs in, and then reuse it to access his account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in session ID issued on login via Set-Cookie header\", \"Lab Description\": \"This application allows session fixation through predictable session tokens. The server issues session IDs in a predictable manner and does not regenerate them after successful login. To solve: fix a session ID for 'carlos' before he logs in, and then reuse it to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri parameter\nDescription: This lab demonstrates an OAuth 2.0 misconfiguration where the `redirect_uri` parameter is insufficiently validated, allowing attackers to steal authorization codes. To solve: capture a valid OAuth code for 'carlos' using a malicious redirect URI and exchange it for a token to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri parameter\", \"Lab Description\": \"This lab demonstrates an OAuth 2.0 misconfiguration where the `redirect_uri` parameter is insufficiently validated, allowing attackers to steal authorization codes. To solve: capture a valid OAuth code for 'carlos' using a malicious redirect URI and exchange it for a token to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in login flow\nDescription: The application improperly handles session tokens during login. Instead of rotating the session ID after authentication, it preserves the existing token. The application allows an attacker to fix a session ID before the victim logs in. To solve: hijack Carlos's session using a fixed session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in login flow\", \"Lab Description\": \"The application improperly handles session tokens during login. Instead of rotating the session ID after authentication, it preserves the existing token. The application allows an attacker to fix a session ID before the victim logs in. To solve: hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT none algorithm bypass in access tokens\nDescription: The application uses JWT tokens for authorization but does not properly verify the signing algorithm. By setting the algorithm to 'none', attackers can forge valid tokens without the secret key. To solve: access Carlos's account page using a tampered JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in access tokens\", \"Lab Description\": \"The application uses JWT tokens for authorization but does not properly verify the signing algorithm. By setting the algorithm to 'none', attackers can forge valid tokens without the secret key. To solve: access Carlos's account page using a tampered JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth open redirect in callback URL\nDescription: The OAuth implementation fails to properly validate redirect URIs. Attackers can inject arbitrary URLs to steal authorization codes or tokens. To solve: hijack Carlosâ€™s OAuth flow by injecting a malicious redirect URI to capture his access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth open redirect in callback URL\", \"Lab Description\": \"The OAuth implementation fails to properly validate redirect URIs. Attackers can inject arbitrary URLs to steal authorization codes or tokens. To solve: hijack Carlosâ€™s OAuth flow by injecting a malicious redirect URI to capture his access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Stay logged in cookie brute-force vulnerability in login mechanism\nDescription: The application's 'Stay logged in' feature uses a predictable session cookie format. Upon successful login, the server issues a persistent cookie without strong randomness or HMAC validation. To solve: Brute-force a valid session cookie to impersonate Carlos and access his account page.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Stay logged in cookie brute-force vulnerability in login mechanism\", \"Lab Description\": \"The application's 'Stay logged in' feature uses a predictable session cookie format. Upon successful login, the server issues a persistent cookie without strong randomness or HMAC validation. To solve: Brute-force a valid session cookie to impersonate Carlos and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT signature validation bypass via 'none' algorithm in authentication token\nDescription: The application uses JWT for session management but fails to properly validate the token signature when the 'alg' field is set to 'none'. To solve: Forge a valid-looking token granting admin access and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature validation bypass via 'none' algorithm in authentication token\", \"Lab Description\": \"The application uses JWT for session management but fails to properly validate the token signature when the 'alg' field is set to 'none'. To solve: Forge a valid-looking token granting admin access and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth authorization code interception in redirect_uri misconfiguration\nDescription: The application uses OAuth for login, but the redirect_uri parameter is not properly validated, allowing attackers to intercept authorization codes. To solve: Intercept an authorization code for Carlos by injecting your own redirect URI and gain access to their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth authorization code interception in redirect_uri misconfiguration\", \"Lab Description\": \"The application uses OAuth for login, but the redirect_uri parameter is not properly validated, allowing attackers to intercept authorization codes. To solve: Intercept an authorization code for Carlos by injecting your own redirect URI and gain access to their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation vulnerability in login process\nDescription: The session management mechanism allows the session identifier to be set via a query parameter before login. The application fails to regenerate a new session ID after successful authentication, allowing attackers to fixate a session ID and impersonate a user after they log in. To solve: hijack Carlos's session after forcing him to log in via a session you control.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login process\", \"Lab Description\": \"The session management mechanism allows the session identifier to be set via a query parameter before login. The application fails to regenerate a new session ID after successful authentication, allowing attackers to fixate a session ID and impersonate a user after they log in. To solve: hijack Carlos's session after forcing him to log in via a session you control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering vulnerability in Authorization Header\nDescription: The application uses JSON Web Tokens (JWTs) for session management but fails to properly validate the signature algorithm. The backend accepts tokens using the 'none' algorithm, allowing an attacker to forge arbitrary tokens without a signature. To solve: tamper with the JWT to impersonate Carlos.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization Header\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management but fails to properly validate the signature algorithm. The backend accepts tokens using the 'none' algorithm, allowing an attacker to forge arbitrary tokens without a signature. To solve: tamper with the JWT to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation in login flow\nDescription: The application implements OAuth for third-party authentication but fails to validate the redirect_uri parameter against a whitelist. This allows an attacker to abuse the login process and capture authorization codes or tokens. To solve: redirect the victim to a malicious callback, extract the token, and impersonate them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in login flow\", \"Lab Description\": \"The application implements OAuth for third-party authentication but fails to validate the redirect_uri parameter against a whitelist. This allows an attacker to abuse the login process and capture authorization codes or tokens. To solve: redirect the victim to a malicious callback, extract the token, and impersonate them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login flow in session middleware\nDescription: The application fails to regenerate the session ID after login, allowing an attacker to fix a session before authentication. The session ID remains unchanged after login, enabling session hijacking. To solve: hijack Carlosâ€™s session using a fixed session ID to access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login flow in session middleware\", \"Lab Description\": \"The application fails to regenerate the session ID after login, allowing an attacker to fix a session before authentication. The session ID remains unchanged after login, enabling session hijacking. To solve: hijack Carlosâ€™s session using a fixed session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature verification bypass using none algorithm in Authorization header\nDescription: The app uses JWT for session management but fails to validate the 'alg' claim properly. It accepts unsigned tokens when 'alg' is set to 'none'. To solve: forge a valid token for Carlos without signing it, and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass using none algorithm in Authorization header\", \"Lab Description\": \"The app uses JWT for session management but fails to validate the 'alg' claim properly. It accepts unsigned tokens when 'alg' is set to 'none'. To solve: forge a valid token for Carlos without signing it, and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation in OAuth provider callback\nDescription: The application integrates OAuth login via a third-party provider but improperly validates redirect URIs. It allows open redirection using the `redirect_uri` parameter. To solve: manipulate the `redirect_uri` to hijack the access token and access Carlos's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation in OAuth provider callback\", \"Lab Description\": \"The application integrates OAuth login via a third-party provider but improperly validates redirect URIs. It allows open redirection using the `redirect_uri` parameter. To solve: manipulate the `redirect_uri` to hijack the access token and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation vulnerability in login flow\nDescription: The login process does not regenerate session identifiers after authentication. The application issues a session cookie before login, and the same session is reused post-authentication. This allows an attacker to fixate a session ID and trick a user into authenticating with it. To solve: hijack Carlos's session using a fixed session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in login flow\", \"Lab Description\": \"The login process does not regenerate session identifiers after authentication. The application issues a session cookie before login, and the same session is reused post-authentication. This allows an attacker to fixate a session ID and trick a user into authenticating with it. To solve: hijack Carlos's session using a fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering vulnerability in authentication header\nDescription: The application uses JWTs for authentication, but fails to verify the token signature when the algorithm is set to 'none'. This allows attackers to forge a valid token without needing the secret key. To solve: forge a token with 'none' algorithm to impersonate Carlos and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in authentication header\", \"Lab Description\": \"The application uses JWTs for authentication, but fails to verify the token signature when the algorithm is set to 'none'. This allows attackers to forge a valid token without needing the secret key. To solve: forge a token with 'none' algorithm to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Open redirect vulnerability in OAuth callback endpoint\nDescription: The OAuth flow accepts arbitrary redirect_uri values without strict validation. This allows attackers to capture tokens or force victim logins on attacker-controlled domains. To solve: craft a redirect_uri that steals Carlos's OAuth token and gain access to his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Open redirect vulnerability in OAuth callback endpoint\", \"Lab Description\": \"The OAuth flow accepts arbitrary redirect_uri values without strict validation. This allows attackers to capture tokens or force victim logins on attacker-controlled domains. To solve: craft a redirect_uri that steals Carlos's OAuth token and gain access to his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature verification bypass via 'none' algorithm in token validation logic\nDescription: The application uses JWTs for session management but fails to properly verify the token's signature. Specifically, it accepts tokens with the 'none' algorithm without validating their integrity. This flaw allows attackers to forge tokens and impersonate other users. To solve: Forge a JWT for the 'admin' user and access the admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass via 'none' algorithm in token validation logic\", \"Lab Description\": \"The application uses JWTs for session management but fails to properly verify the token's signature. Specifically, it accepts tokens with the 'none' algorithm without validating their integrity. This flaw allows attackers to forge tokens and impersonate other users. To solve: Forge a JWT for the 'admin' user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth 2.0 misconfiguration in redirect URI validation\nDescription: The application integrates with a third-party OAuth provider for authentication. However, it fails to properly validate the 'redirect_uri' parameter during the OAuth flow, allowing attackers to manipulate it and capture authorization codes meant for other users. To solve: Exploit the misconfiguration to obtain an access token for the 'admin' user and access the admin dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth 2.0 misconfiguration in redirect URI validation\", \"Lab Description\": \"The application integrates with a third-party OAuth provider for authentication. However, it fails to properly validate the 'redirect_uri' parameter during the OAuth flow, allowing attackers to manipulate it and capture authorization codes meant for other users. To solve: Exploit the misconfiguration to obtain an access token for the 'admin' user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session IDs in session management\nDescription: The application assigns session IDs in a predictable manner and does not regenerate them upon user login. This flaw allows attackers to set a known session ID for a victim and hijack their session after they log in. To solve: Set a known session ID, trick the victim into logging in, and use the same session ID to access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session IDs in session management\", \"Lab Description\": \"The application assigns session IDs in a predictable manner and does not regenerate them upon user login. This flaw allows attackers to set a known session ID for a victim and hijack their session after they log in. To solve: Set a known session ID, trick the victim into logging in, and use the same session ID to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a modified JWT with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query batching attack in user enumeration\nDescription: The GraphQL endpoint processes batched queries sequentially without rate limiting. The application leaks timing differences in error responses. To solve: identify valid usernames through differential response analysis using batched authentication attempts.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query batching attack in user enumeration\", \"Lab Description\": \"The GraphQL endpoint processes batched queries sequentially without rate limiting. The application leaks timing differences in error responses. To solve: identify valid usernames through differential response analysis using batched authentication attempts.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through insecure redirect_uri\nDescription: The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to attacker-controlled domains. To solve: intercept the OAuth flow and redirect the authorization code to your exploit server.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through insecure redirect_uri\", \"Lab Description\": \"The OAuth implementation fails to validate redirect_uri parameters properly. The application leaks authorization codes to attacker-controlled domains. To solve: intercept the OAuth flow and redirect the authorization code to your exploit server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via pre-set Session-ID in OAuth callback\nDescription: The OAuth implementation sets predictable session IDs before authentication. The application maintains the same session after privilege elevation. To solve: fixate a session ID before authentication and reuse it post-OAuth flow to gain admin access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via pre-set Session-ID in OAuth callback\", \"Lab Description\": \"The OAuth implementation sets predictable session IDs before authentication. The application maintains the same session after privilege elevation. To solve: fixate a session ID before authentication and reuse it post-OAuth flow to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification uses kid header to load keys from filesystem without proper sanitization. The application's debug endpoint leaks key paths. To solve: craft a JWT with kid pointing to known public key file and sign with corresponding private key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification uses kid header to load keys from filesystem without proper sanitization. The application's debug endpoint leaks key paths. To solve: craft a JWT with kid pointing to known public key file and sign with corresponding private key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass through state parameter manipulation in SAML flow\nDescription: The SAML implementation improperly validates state parameters during MFA initiation. The application skips MFA when receiving crafted state values. To solve: intercept SAML response and modify state parameter to known bypass value.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass through state parameter manipulation in SAML flow\", \"Lab Description\": \"The SAML implementation improperly validates state parameters during MFA initiation. The application skips MFA when receiving crafted state values. To solve: intercept SAML response and modify state parameter to known bypass value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation improperly trusts the jku header to fetch verification keys. The application doesn't restrict allowed domains for key URLs. To solve: host a malicious public key and craft a JWT pointing to it with admin claims.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation improperly trusts the jku header to fetch verification keys. The application doesn't restrict allowed domains for key URLs. To solve: host a malicious public key and craft a JWT pointing to it with admin claims.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through open redirect in mobile client\nDescription: The mobile OAuth flow fails to validate redirect URIs properly when handling deep links. The application leaks access tokens to arbitrary domains via 302 redirects. To solve: chain an open redirect with the OAuth callback to intercept the token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through open redirect in mobile client\", \"Lab Description\": \"The mobile OAuth flow fails to validate redirect URIs properly when handling deep links. The application leaks access tokens to arbitrary domains via 302 redirects. To solve: chain an open redirect with the OAuth callback to intercept the token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking through WebSocket authentication bypass\nDescription: The WebSocket upgrade request reuses HTTP session cookies without revalidation. The application maintains WebSocket connections after session expiration. To solve: hijack active WebSocket connection by replaying captured cookie during upgrade.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking through WebSocket authentication bypass\", \"Lab Description\": \"The WebSocket upgrade request reuses HTTP session cookies without revalidation. The application maintains WebSocket connections after session expiration. To solve: hijack active WebSocket connection by replaying captured cookie during upgrade.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON parsing flaw\nDescription: The JWT verification improperly handles nested JSON structures in claims. The application's deep object merging overwrites security controls. To solve: inject admin privileges through crafted nested claims in a valid JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON parsing flaw\", \"Lab Description\": \"The JWT verification improperly handles nested JSON structures in claims. The application's deep object merging overwrites security controls. To solve: inject admin privileges through crafted nested claims in a valid JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping through parameter pollution\nDescription: The OAuth token exchange endpoint is vulnerable to HTTP parameter pollution. The application uses the first token parameter while logging the last. To solve: swap tokens during the exchange flow to gain elevated privileges.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping through parameter pollution\", \"Lab Description\": \"The OAuth token exchange endpoint is vulnerable to HTTP parameter pollution. The application uses the first token parameter while logging the last. To solve: swap tokens during the exchange flow to gain elevated privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through GraphQL batch query caching\nDescription: The GraphQL endpoint caches session tokens improperly when processing batch queries. The application reuses the first valid session for subsequent operations. To solve: fixate session through batch query and hijack victim's authenticated state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through GraphQL batch query caching\", \"Lab Description\": \"The GraphQL endpoint caches session tokens improperly when processing batch queries. The application reuses the first valid session for subsequent operations. To solve: fixate session through batch query and hijack victim's authenticated state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via leaked debug endpoint\nDescription: The application exposes a debug endpoint that leaks the public key used for JWT verification. The JWT implementation is vulnerable to algorithm confusion attacks. To solve: obtain the public key, craft an HS256-signed token with admin claims, and bypass authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via leaked debug endpoint\", \"Lab Description\": \"The application exposes a debug endpoint that leaks the public key used for JWT verification. The JWT implementation is vulnerable to algorithm confusion attacks. To solve: obtain the public key, craft an HS256-signed token with admin claims, and bypass authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA\nDescription: The OAuth implementation in the Single Page Application has overly permissive CORS headers. The application leaks access tokens to arbitrary origins through XHR requests. To solve: craft a malicious page that steals OAuth tokens via CORS and uses them to access protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA\", \"Lab Description\": \"The OAuth implementation in the Single Page Application has overly permissive CORS headers. The application leaks access tokens to arbitrary origins through XHR requests. To solve: craft a malicious page that steals OAuth tokens via CORS and uses them to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake parameter injection\nDescription: The WebSocket upgrade process improperly handles session identifiers passed as URL parameters. The application accepts WebSocket session IDs through query strings without validation. To solve: fixate a session ID through crafted WebSocket URL and hijack victim's authenticated connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake parameter injection\", \"Lab Description\": \"The WebSocket upgrade process improperly handles session identifiers passed as URL parameters. The application accepts WebSocket session IDs through query strings without validation. To solve: fixate a session ID through crafted WebSocket URL and hijack victim's authenticated connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering vulnerability in Authorization Header\nDescription: The application uses JWT tokens for API authorization, but the server fails to validate token signatures properly. The token's algorithm is set to 'none', and the backend fails to enforce cryptographic verification. To solve: forge a valid JWT to access the admin resource and retrieve sensitive user data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering vulnerability in Authorization Header\", \"Lab Description\": \"The application uses JWT tokens for API authorization, but the server fails to validate token signatures properly. The token's algorithm is set to 'none', and the backend fails to enforce cryptographic verification. To solve: forge a valid JWT to access the admin resource and retrieve sensitive user data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The web app reuses pre-login session IDs after authentication, without regenerating them. An attacker can pre-set a known session ID and then trick a victim into logging in using that same ID. To solve: hijack Carlos's session by setting a fixed session ID before login and access his account page post-authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The web app reuses pre-login session IDs after authentication, without regenerating them. An attacker can pre-set a known session ID and then trick a victim into logging in using that same ID. To solve: hijack Carlos's session by setting a fixed session ID before login and access his account page post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth redirect_uri misconfiguration in OAuth callback endpoint\nDescription: The OAuth implementation lacks strict validation of the redirect_uri parameter, allowing open redirect-based session hijacking. The application trusts any domain containing the correct base string. To solve: craft a malicious authorization URL that captures a valid OAuth token for Carlosâ€™s session.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect_uri misconfiguration in OAuth callback endpoint\", \"Lab Description\": \"The OAuth implementation lacks strict validation of the redirect_uri parameter, allowing open redirect-based session hijacking. The application trusts any domain containing the correct base string. To solve: craft a malicious authorization URL that captures a valid OAuth token for Carlosâ€™s session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT authentication bypass via 'none' algorithm in Authorization header\nDescription: The backend uses JWTs for session management and relies on the 'alg' field of the JWT to determine verification logic. The server is misconfigured to accept unsigned tokens by trusting the 'none' algorithm. The application grants access to authenticated endpoints based solely on the decoded payload. To solve: craft a tampered token to access Carlos's account by bypassing signature verification.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm in Authorization header\", \"Lab Description\": \"The backend uses JWTs for session management and relies on the 'alg' field of the JWT to determine verification logic. The server is misconfigured to accept unsigned tokens by trusting the 'none' algorithm. The application grants access to authenticated endpoints based solely on the decoded payload. To solve: craft a tampered token to access Carlos's account by bypassing signature verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in cookie-based authentication on login route\nDescription: This application uses a fixed `sessionID` value that is issued prior to authentication and is not regenerated upon login. The session ID is accepted from the client and trusted server-side, leading to session fixation. To solve: pre-fixate a session ID and trick the server into accepting it as Carlosâ€™s session after login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in cookie-based authentication on login route\", \"Lab Description\": \"This application uses a fixed `sessionID` value that is issued prior to authentication and is not regenerated upon login. The session ID is accepted from the client and trusted server-side, leading to session fixation. To solve: pre-fixate a session ID and trick the server into accepting it as Carlosâ€™s session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri trust chain\nDescription: This application integrates a third-party OAuth provider. However, it fails to validate the redirect_uri parameter correctly, allowing an attacker to supply an arbitrary value. This allows leaking the access token to an attacker-controlled domain. To solve: exploit the misconfigured OAuth flow and extract the access_token for Carlosâ€™s account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri trust chain\", \"Lab Description\": \"This application integrates a third-party OAuth provider. However, it fails to validate the redirect_uri parameter correctly, allowing an attacker to supply an arbitrary value. This allows leaking the access token to an attacker-controlled domain. To solve: exploit the misconfigured OAuth flow and extract the access_token for Carlosâ€™s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via algorithm confusion in Authorization header\nDescription: This lab's API uses JWTs for authentication, but fails to enforce algorithm verification properly. The application accepts the 'alg' field in the token header without validating it against a whitelist. An attacker can modify the token's algorithm to 'none' and forge authentication tokens. The application uses these tokens for REST API access to protected resources. To solve: forge a valid admin token using algorithm tampering to access the /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion in Authorization header\", \"Lab Description\": \"This lab's API uses JWTs for authentication, but fails to enforce algorithm verification properly. The application accepts the 'alg' field in the token header without validating it against a whitelist. An attacker can modify the token's algorithm to 'none' and forge authentication tokens. The application uses these tokens for REST API access to protected resources. To solve: forge a valid admin token using algorithm tampering to access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow hijack via open redirect in redirect_uri\nDescription: This lab simulates a web application using OAuth 2.0 for authentication through a third-party provider. The application improperly validates redirect URIs, allowing arbitrary open redirect manipulation. An attacker can poison the redirect_uri parameter to capture a victim's access token. To solve: craft a malicious OAuth URL to leak Carlos's token and use it to access the protected resource.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow hijack via open redirect in redirect_uri\", \"Lab Description\": \"This lab simulates a web application using OAuth 2.0 for authentication through a third-party provider. The application improperly validates redirect URIs, allowing arbitrary open redirect manipulation. An attacker can poison the redirect_uri parameter to capture a victim's access token. To solve: craft a malicious OAuth URL to leak Carlos's token and use it to access the protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow via preset session cookie\nDescription: This lab's login process reuses the session ID that was initially assigned before authentication. The application fails to regenerate a session upon successful login, allowing session fixation. An attacker can pre-assign a session ID to a victim and hijack the session after login. To solve: fixate Carlosâ€™s session ID, then reuse it to access his /dashboard page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow via preset session cookie\", \"Lab Description\": \"This lab's login process reuses the session ID that was initially assigned before authentication. The application fails to regenerate a session upon successful login, allowing session fixation. An attacker can pre-assign a session ID to a victim and hijack the session after login. To solve: fixate Carlosâ€™s session ID, then reuse it to access his /dashboard page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass using 'none' algorithm in authentication middleware\nDescription: The application uses JWTs for session management but does not validate the signature algorithm securely. The token is decoded without verifying the signature if the 'alg' field is set to 'none'. The application blindly trusts unsigned JWTs. To solve: Forge a valid admin session by tampering with the JWT payload.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass using 'none' algorithm in authentication middleware\", \"Lab Description\": \"The application uses JWTs for session management but does not validate the signature algorithm securely. The token is decoded without verifying the signature if the 'alg' field is set to 'none'. The application blindly trusts unsigned JWTs. To solve: Forge a valid admin session by tampering with the JWT payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in login flow using pre-authenticated session IDs\nDescription: The application does not regenerate session tokens upon successful login, allowing an attacker to pre-assign a session to the victim. The attacker forces the victim to authenticate using a known session ID. To solve: Fix a session ID for Carlos, get him to log in, and reuse that session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login flow using pre-authenticated session IDs\", \"Lab Description\": \"The application does not regenerate session tokens upon successful login, allowing an attacker to pre-assign a session to the victim. The attacker forces the victim to authenticate using a known session ID. To solve: Fix a session ID for Carlos, get him to log in, and reuse that session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit grant token leakage via referrer\nDescription: The application uses OAuth2 Implicit Grant flow with the access token exposed in the URL fragment. Due to improper redirect URI configuration, the token leaks through referrer headers when redirected to third-party content. To solve: Capture Carlos's access token from a leaked referrer and use it to access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit grant token leakage via referrer\", \"Lab Description\": \"The application uses OAuth2 Implicit Grant flow with the access token exposed in the URL fragment. Due to improper redirect URI configuration, the token leaks through referrer headers when redirected to third-party content. To solve: Capture Carlos's access token from a leaked referrer and use it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering Authentication bypass in API endpoint\nDescription: The backend API uses JWTs to authenticate users, but fails to properly verify the signing algorithm. The application trusts the 'alg' value in the token header and skips verification if it's set to 'none'. To solve: Access the admin endpoint using a forged token that impersonates the user 'carlos'.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering Authentication bypass in API endpoint\", \"Lab Description\": \"The backend API uses JWTs to authenticate users, but fails to properly verify the signing algorithm. The application trusts the 'alg' value in the token header and skips verification if it's set to 'none'. To solve: Access the admin endpoint using a forged token that impersonates the user 'carlos'.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The session management mechanism reuses a client-supplied session ID even after successful authentication. The application does not regenerate session tokens upon login. To solve: Inject a known session ID and get the victim (Carlos) to log in using that ID, then hijack the session and access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The session management mechanism reuses a client-supplied session ID even after successful authentication. The application does not regenerate session tokens upon login. To solve: Inject a known session ID and get the victim (Carlos) to log in using that ID, then hijack the session and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect URI\nDescription: The OAuth implementation fails to validate the redirect URI strictly, allowing open redirection and leakage of the authorization code. An attacker can inject a malicious URI with their own domain. To solve: Intercept the OAuth code for Carlos and exchange it for an access token to access the /api/userinfo endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect URI\", \"Lab Description\": \"The OAuth implementation fails to validate the redirect URI strictly, allowing open redirection and leakage of the authorization code. An attacker can inject a malicious URI with their own domain. To solve: Intercept the OAuth code for Carlos and exchange it for an access token to access the /api/userinfo endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'none' algorithm authentication bypass in login API\nDescription: This lab uses JSON Web Tokens (JWTs) to manage user sessions. The backend fails to validate the `alg` field properly, accepting unsigned tokens when `alg` is set to `none`. The application returns a JWT after login and uses it for accessing protected endpoints. To solve: tamper with the JWT to impersonate Carlos and access his account without valid credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'none' algorithm authentication bypass in login API\", \"Lab Description\": \"This lab uses JSON Web Tokens (JWTs) to manage user sessions. The backend fails to validate the `alg` field properly, accepting unsigned tokens when `alg` is set to `none`. The application returns a JWT after login and uses it for accessing protected endpoints. To solve: tamper with the JWT to impersonate Carlos and access his account without valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in login flow via GET parameter\nDescription: This lab implements session management using a custom session ID passed as a URL parameter and stored as a cookie. However, the session is not regenerated after login, making it vulnerable to session fixation. To solve: set a session ID for Carlos before login and hijack his session after he authenticates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login flow via GET parameter\", \"Lab Description\": \"This lab implements session management using a custom session ID passed as a URL parameter and stored as a cookie. However, the session is not regenerated after login, making it vulnerable to session fixation. To solve: set a session ID for Carlos before login and hijack his session after he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token reuse due to lack of client binding\nDescription: This lab involves an OAuth flow where the access token is not bound to a specific client application. A malicious actor can reuse a token issued to one client on another. The application does not validate the `aud` or `client_id`. To solve: reuse an access token issued to your app to impersonate Carlos on the victim app.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token reuse due to lack of client binding\", \"Lab Description\": \"This lab involves an OAuth flow where the access token is not bound to a specific client application. A malicious actor can reuse a token issued to one client on another. The application does not validate the `aud` or `client_id`. To solve: reuse an access token issued to your app to impersonate Carlos on the victim app.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login flow\nDescription: The application initializes a session ID before user authentication and fails to regenerate it after login. The session ID remains fixed, allowing an attacker to hijack authenticated sessions. The application trusts any valid session ID. To solve: Hijack Carlos's authenticated session by forcing him to reuse your crafted session ID.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login flow\", \"Lab Description\": \"The application initializes a session ID before user authentication and fails to regenerate it after login. The session ID remains fixed, allowing an attacker to hijack authenticated sessions. The application trusts any valid session ID. To solve: Hijack Carlos's authenticated session by forcing him to reuse your crafted session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature verification bypass using 'none' algorithm\nDescription: This application uses JWT for session management but fails to validate the signature algorithm securely. If the 'alg' field in the JWT header is set to 'none', the server skips signature verification. To solve: Forge a JWT with 'alg':'none' and escalate privileges to access Carlos's account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature verification bypass using 'none' algorithm\", \"Lab Description\": \"This application uses JWT for session management but fails to validate the signature algorithm securely. If the 'alg' field in the JWT header is set to 'none', the server skips signature verification. To solve: Forge a JWT with 'alg':'none' and escalate privileges to access Carlos's account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leak in redirect_uri via fragment mismanagement\nDescription: The app uses OAuth2 with implicit flow for third-party login. It misuses the redirect_uri allowing an attacker to inject a malicious domain. The access token is returned in the fragment portion of the URI and can be exfiltrated. To solve: Extract Carlos's token by crafting a redirect_uri to a domain under your control.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leak in redirect_uri via fragment mismanagement\", \"Lab Description\": \"The app uses OAuth2 with implicit flow for third-party login. It misuses the redirect_uri allowing an attacker to inject a malicious domain. The access token is returned in the fragment portion of the URI and can be exfiltrated. To solve: Extract Carlos's token by crafting a redirect_uri to a domain under your control.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion vulnerability in login authentication\nDescription: The application uses JWT for authentication and is vulnerable due to insecure algorithm handling. It accepts tokens signed with 'none' algorithm if the header is tampered. The application does not verify the integrity of the JWT properly, allowing attackers to forge tokens. To solve: forge a valid token to impersonate the user 'admin' and access their dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion vulnerability in login authentication\", \"Lab Description\": \"The application uses JWT for authentication and is vulnerable due to insecure algorithm handling. It accepts tokens signed with 'none' algorithm if the header is tampered. The application does not verify the integrity of the JWT properly, allowing attackers to forge tokens. To solve: forge a valid token to impersonate the user 'admin' and access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in third-party redirect\nDescription: The application uses OAuth for login via a third-party provider, but after authentication, it leaks the access token through the Referer header when redirecting to a third-party domain. This token can be captured by any attacker-controlled site in the redirect chain. To solve: capture Carlos's access token and use it to access their profile endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in third-party redirect\", \"Lab Description\": \"The application uses OAuth for login via a third-party provider, but after authentication, it leaks the access token through the Referer header when redirecting to a third-party domain. This token can be captured by any attacker-controlled site in the redirect chain. To solve: capture Carlos's access token and use it to access their profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login redirect\nDescription: This application initializes a session before login and uses the same session ID post-login. If an attacker can set a session ID for a victim before they log in, the attacker can hijack the session. To solve: force Carlos to use a session ID you control, then log in as Carlos and access his profile with your fixed session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login redirect\", \"Lab Description\": \"This application initializes a session before login and uses the same session ID post-login. If an attacker can set a session ID for a victim before they log in, the attacker can hijack the session. To solve: force Carlos to use a session ID you control, then log in as Carlos and access his profile with your fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature none algorithm tampering in session authentication\nDescription: The application uses JWT tokens to manage session state, but fails to validate the token signature algorithm properly. The backend accepts 'none' as a valid algorithm, bypassing token integrity verification. To solve: Forge a valid JWT token for the user 'carlos' and access his account page without needing credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature none algorithm tampering in session authentication\", \"Lab Description\": \"The application uses JWT tokens to manage session state, but fails to validate the token signature algorithm properly. The backend accepts 'none' as a valid algorithm, bypassing token integrity verification. To solve: Forge a valid JWT token for the user 'carlos' and access his account page without needing credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration with implicit grant leaking tokens via redirect\nDescription: The application uses OAuth with the implicit flow and incorrectly allows redirect URIs to be manipulated, causing access tokens to be leaked to third-party domains. To solve: Capture Carlosâ€™s access token and use it to access his protected profile page via the API.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with implicit grant leaking tokens via redirect\", \"Lab Description\": \"The application uses OAuth with the implicit flow and incorrectly allows redirect URIs to be manipulated, causing access tokens to be leaked to third-party domains. To solve: Capture Carlosâ€™s access token and use it to access his protected profile page via the API.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unvalidated session token reuse\nDescription: The login endpoint fails to issue a new session identifier upon successful authentication, allowing an attacker to pre-define a session ID and force it onto a victim. To solve: Fixate Carlos's session ID, get him to log in using it, and hijack the session by accessing his My Account page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session token reuse\", \"Lab Description\": \"The login endpoint fails to issue a new session identifier upon successful authentication, allowing an attacker to pre-define a session ID and force it onto a victim. To solve: Fixate Carlos's session ID, get him to log in using it, and hijack the session by accessing his My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allows session fixation attack in login flow\nDescription: The application implements OAuth 2.0 for third-party authentication, but fails to regenerate the session ID after login. An attacker can fixate a session ID and force the victim to authenticate with it. The application reuses the original session after OAuth login. To solve: Hijack Carlosâ€™s session by initiating login via a pre-fixed session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows session fixation attack in login flow\", \"Lab Description\": \"The application implements OAuth 2.0 for third-party authentication, but fails to regenerate the session ID after login. An attacker can fixate a session ID and force the victim to authenticate with it. The application reuses the original session after OAuth login. To solve: Hijack Carlosâ€™s session by initiating login via a pre-fixed session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token tampering with 'none' algorithm in Authorization header\nDescription: The application uses JWTs to control access to user accounts. It does not validate the algorithm field when decoding JWTs. Exploiting this, attackers can replace the token algorithm with 'none' and forge admin tokens. To solve: Modify the token to impersonate Carlos and access /my-account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token tampering with 'none' algorithm in Authorization header\", \"Lab Description\": \"The application uses JWTs to control access to user accounts. It does not validate the algorithm field when decoding JWTs. Exploiting this, attackers can replace the token algorithm with 'none' and forge admin tokens. To solve: Modify the token to impersonate Carlos and access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Verbose logging leaks API key allowing unauthorized REST API access\nDescription: The REST API backend logs full request headers including Authorization. The verbose debug output is exposed publicly via /logs endpoint. The attacker can extract Carlosâ€™s API key from logs and reuse it for privilege escalation. To solve: Extract and reuse Carlosâ€™s key to access restricted resource.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Verbose logging leaks API key allowing unauthorized REST API access\", \"Lab Description\": \"The REST API backend logs full request headers including Authorization. The verbose debug output is exposed publicly via /logs endpoint. The attacker can extract Carlosâ€™s API key from logs and reuse it for privilege escalation. To solve: Extract and reuse Carlosâ€™s key to access restricted resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: REST-based Session Fixation in Login Flow\nDescription: This lab's REST API implements insecure session handling that enables session fixation. The application generates a session ID before login, which is then reused post-authentication. To solve: Hijack a valid user session after fixing the session identifier in the victim's browser.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"REST-based Session Fixation in Login Flow\", \"Lab Description\": \"This lab's REST API implements insecure session handling that enables session fixation. The application generates a session ID before login, which is then reused post-authentication. To solve: Hijack a valid user session after fixing the session identifier in the victim's browser.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Authentication Bypass via None Algorithm\nDescription: This lab uses JWTs for API authentication but improperly supports the `none` algorithm. This allows an attacker to forge a valid token without signing it. To solve: Generate a forged JWT for the admin user and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via None Algorithm\", \"Lab Description\": \"This lab uses JWTs for API authentication but improperly supports the `none` algorithm. This allows an attacker to forge a valid token without signing it. To solve: Generate a forged JWT for the admin user and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Redirection Misconfiguration in Authorization Server\nDescription: This lab demonstrates an insecure OAuth implementation where the redirect URI is not properly validated. The attacker can intercept the authorization code and exchange it for a token. To solve: Hijack Carlosâ€™s OAuth token by injecting a malicious redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirection Misconfiguration in Authorization Server\", \"Lab Description\": \"This lab demonstrates an insecure OAuth implementation where the redirect URI is not properly validated. The attacker can intercept the authorization code and exchange it for a token. To solve: Hijack Carlosâ€™s OAuth token by injecting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Algorithm Confusion in Token Verification\nDescription: The application uses JSON Web Tokens (JWTs) for session management but improperly handles the 'alg' field in the token header. Instead of verifying the signature with a secret key, it trusts tokens with 'none' as the algorithm and accepts them without verification. The application grants access if a valid token for 'carlos' is submitted. To solve: Forge a token with alg set to 'none' and impersonate Carlos.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Algorithm Confusion in Token Verification\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management but improperly handles the 'alg' field in the token header. Instead of verifying the signature with a secret key, it trusts tokens with 'none' as the algorithm and accepts them without verification. The application grants access if a valid token for 'carlos' is submitted. To solve: Forge a token with alg set to 'none' and impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in Login Endpoint\nDescription: This application generates a session cookie before login and doesn't renew it post-authentication. This allows an attacker to pre-set a valid session cookie and trick a victim into authenticating using that session. The attacker can then hijack the session to gain access. To solve: Fixate Carlos's session ID, make him log in, then use the same session to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Endpoint\", \"Lab Description\": \"This application generates a session cookie before login and doesn't renew it post-authentication. This allows an attacker to pre-set a valid session cookie and trick a victim into authenticating using that session. The attacker can then hijack the session to gain access. To solve: Fixate Carlos's session ID, make him log in, then use the same session to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI Validation\nDescription: The application uses OAuth 2.0 for authentication, but its redirect_uri parameter validation is flawed. It accepts subdomain-based open redirect patterns, allowing attackers to steal authorization codes. To solve: Construct a malicious redirect_uri that leads to a domain you control, extract Carlos's authorization code, and complete the OAuth login flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Validation\", \"Lab Description\": \"The application uses OAuth 2.0 for authentication, but its redirect_uri parameter validation is flawed. It accepts subdomain-based open redirect patterns, allowing attackers to steal authorization codes. To solve: Construct a malicious redirect_uri that leads to a domain you control, extract Carlos's authorization code, and complete the OAuth login flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature bypass via algorithm confusion in login API\nDescription: The application uses JSON Web Tokens (JWT) for session management but fails to enforce secure verification of token signatures. The login endpoint signs JWTs with HMAC using a shared secret, but the backend accepts 'none' as the algorithm, bypassing signature validation entirely. To solve: Forge a valid JWT that grants access to Carlosâ€™s account without needing valid credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature bypass via algorithm confusion in login API\", \"Lab Description\": \"The application uses JSON Web Tokens (JWT) for session management but fails to enforce secure verification of token signatures. The login endpoint signs JWTs with HMAC using a shared secret, but the backend accepts 'none' as the algorithm, bypassing signature validation entirely. To solve: Forge a valid JWT that grants access to Carlosâ€™s account without needing valid credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable session ID\nDescription: The application issues session cookies using a sequential session ID pattern during unauthenticated visits. Upon login, the session ID is not regenerated. An attacker can set a victimâ€™s session ID ahead of login and hijack the authenticated session. To solve: Fix Carlosâ€™s session ID before he logs in, then hijack his session after he authenticates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID\", \"Lab Description\": \"The application issues session cookies using a sequential session ID pattern during unauthenticated visits. Upon login, the session ID is not regenerated. An attacker can set a victimâ€™s session ID ahead of login and hijack the authenticated session. To solve: Fix Carlosâ€™s session ID before he logs in, then hijack his session after he authenticates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration leading to open redirect trust abuse\nDescription: The application uses a third-party OAuth provider to handle login via redirects. The redirect_uri is not validated securely, allowing attackers to inject arbitrary URLs and harvest authorization codes. To solve: Trick the OAuth flow to leak Carlosâ€™s token and use it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leading to open redirect trust abuse\", \"Lab Description\": \"The application uses a third-party OAuth provider to handle login via redirects. The redirect_uri is not validated securely, allowing attackers to inject arbitrary URLs and harvest authorization codes. To solve: Trick the OAuth flow to leak Carlosâ€™s token and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering via algorithm confusion\nDescription: This lab's login system uses JWTs for session management and accepts unsigned tokens due to a flawed algorithm check. The application fails to validate the algorithm used in the JWT header. To solve: Forge a JWT token that grants access to Carlos's account using algorithm confusion.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via algorithm confusion\", \"Lab Description\": \"This lab's login system uses JWTs for session management and accepts unsigned tokens due to a flawed algorithm check. The application fails to validate the algorithm used in the JWT header. To solve: Forge a JWT token that grants access to Carlos's account using algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via insecure session handling\nDescription: This lab's session management system is vulnerable to session fixation. It reuses session IDs across login flows and does not regenerate tokens upon authentication. The application accepts pre-assigned session cookies before login. To solve: Fixate a session and force Carlos to use it, then access /my-account with the same session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure session handling\", \"Lab Description\": \"This lab's session management system is vulnerable to session fixation. It reuses session IDs across login flows and does not regenerate tokens upon authentication. The application accepts pre-assigned session cookies before login. To solve: Fixate a session and force Carlos to use it, then access /my-account with the same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth redirect manipulation leading to account takeover\nDescription: This lab's OAuth flow contains an open redirect flaw on the redirect_uri parameter. The application trusts user-supplied redirect URIs without proper validation, enabling account takeover via third-party OAuth provider token reuse. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth token and use it to access /my-account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect manipulation leading to account takeover\", \"Lab Description\": \"This lab's OAuth flow contains an open redirect flaw on the redirect_uri parameter. The application trusts user-supplied redirect URIs without proper validation, enabling account takeover via third-party OAuth provider token reuse. To solve: Manipulate the redirect URI to capture Carlosâ€™s OAuth token and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation leads to MFA bypass\nDescription: The application incorrectly allows session identifiers to persist across authentication states, including 2FA. Once a valid user completes login, the session ID issued before 2FA is reused without validation. The application trusts the existing session cookie to grant full access after 2FA step, without re-verifying ownership. To solve: Use session fixation to access Carlos's account without completing MFA.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation leads to MFA bypass\", \"Lab Description\": \"The application incorrectly allows session identifiers to persist across authentication states, including 2FA. Once a valid user completes login, the session ID issued before 2FA is reused without validation. The application trusts the existing session cookie to grant full access after 2FA step, without re-verifying ownership. To solve: Use session fixation to access Carlos's account without completing MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via 'none' algorithm\nDescription: The application uses JWT tokens for session management but fails to validate the cryptographic algorithm used. If the 'alg' field in the JWT header is set to 'none', the application accepts unsigned tokens. To solve: Forge a JWT token with 'none' algorithm to impersonate Carlos and access the protected account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via 'none' algorithm\", \"Lab Description\": \"The application uses JWT tokens for session management but fails to validate the cryptographic algorithm used. If the 'alg' field in the JWT header is set to 'none', the application accepts unsigned tokens. To solve: Forge a JWT token with 'none' algorithm to impersonate Carlos and access the protected account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect\nDescription: This lab demonstrates an OAuth misconfiguration where the 'redirect_uri' parameter is not properly validated during the authorization flow. The application allows arbitrary redirect URIs, enabling token theft via open redirection. To solve: Intercept Carlos's OAuth authorization and redirect the token to your own server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect\", \"Lab Description\": \"This lab demonstrates an OAuth misconfiguration where the 'redirect_uri' parameter is not properly validated during the authorization flow. The application allows arbitrary redirect URIs, enabling token theft via open redirection. To solve: Intercept Carlos's OAuth authorization and redirect the token to your own server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT token none algorithm bypass in API auth flow\nDescription: This lab's REST API uses JWT tokens for authentication. The server does not validate the JWT signature when the algorithm is set to 'none'. The application processes JWTs without verifying the integrity of the claims. To solve: forge a JWT for the user 'carlos' and access the protected API endpoint /api/account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT token none algorithm bypass in API auth flow\", \"Lab Description\": \"This lab's REST API uses JWT tokens for authentication. The server does not validate the JWT signature when the algorithm is set to 'none'. The application processes JWTs without verifying the integrity of the claims. To solve: forge a JWT for the user 'carlos' and access the protected API endpoint /api/account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via predictable token reuse\nDescription: The application uses session tokens in URL parameters and fails to regenerate the session upon authentication. An attacker can fix a session identifier and trick the victim into logging in with it, gaining access to their authenticated session. To solve: hijack Carlosâ€™s session by pre-setting a known session token before login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable token reuse\", \"Lab Description\": \"The application uses session tokens in URL parameters and fails to regenerate the session upon authentication. An attacker can fix a session identifier and trick the victim into logging in with it, gaining access to their authenticated session. To solve: hijack Carlosâ€™s session by pre-setting a known session token before login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration with open redirect and no state parameter\nDescription: This lab demonstrates an OAuth implementation that fails to validate the 'state' parameter, exposing it to CSRF and token theft via open redirection. The application blindly trusts the redirect URI and leaks access tokens. To solve: craft a malicious authorization request that sends Carlosâ€™s token to your controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and no state parameter\", \"Lab Description\": \"This lab demonstrates an OAuth implementation that fails to validate the 'state' parameter, exposing it to CSRF and token theft via open redirection. The application blindly trusts the redirect URI and leaks access tokens. To solve: craft a malicious authorization request that sends Carlosâ€™s token to your controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion in token verification endpoint\nDescription: This lab implements a stateless authentication mechanism using JSON Web Tokens (JWTs). However, the server is vulnerable to an algorithm confusion flaw due to improper handling of the JWT 'alg' field. The application accepts tokens signed using both 'HS256' and 'RS256', using a single public key to verify all incoming tokens. To solve the lab, forge a valid admin token and access the administrative panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in token verification endpoint\", \"Lab Description\": \"This lab implements a stateless authentication mechanism using JSON Web Tokens (JWTs). However, the server is vulnerable to an algorithm confusion flaw due to improper handling of the JWT 'alg' field. The application accepts tokens signed using both 'HS256' and 'RS256', using a single public key to verify all incoming tokens. To solve the lab, forge a valid admin token and access the administrative panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via insecure cookie reassignment\nDescription: This lab's session management is flawed. The application does not regenerate the session ID upon successful login, allowing an attacker to fix the victim's session ID prior to authentication. The application accepts a session ID as a query parameter and reflects it into a cookie. To solve the lab, fix a session ID for Carlos and trick him into logging in, then use the same session ID to access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via insecure cookie reassignment\", \"Lab Description\": \"This lab's session management is flawed. The application does not regenerate the session ID upon successful login, allowing an attacker to fix the victim's session ID prior to authentication. The application accepts a session ID as a query parameter and reflects it into a cookie. To solve the lab, fix a session ID for Carlos and trick him into logging in, then use the same session ID to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow token leakage via referrer header\nDescription: This lab demonstrates how improper use of the OAuth 2.0 implicit flow results in access token leakage via the HTTP Referer header. The vulnerable application redirects users with an access token in the URL fragment. An attacker-controlled site can trick authenticated users into visiting a resource which leaks the token in the Referer header. To solve the lab, steal Carlos's access token and access the /private-data endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow token leakage via referrer header\", \"Lab Description\": \"This lab demonstrates how improper use of the OAuth 2.0 implicit flow results in access token leakage via the HTTP Referer header. The vulnerable application redirects users with an access token in the URL fragment. An attacker-controlled site can trick authenticated users into visiting a resource which leaks the token in the Referer header. To solve the lab, steal Carlos's access token and access the /private-data endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm bypass in REST API login flow\nDescription: The application uses JSON Web Tokens (JWTs) to manage sessions and validate authenticated users via a RESTful login API. However, it incorrectly accepts the 'none' algorithm in JWTs, allowing token forgery. The application trusts the JWT payload without signature verification when 'alg' is set to 'none'. To solve: Forge a JWT for the user carlos and access their account page using the tampered token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in REST API login flow\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) to manage sessions and validate authenticated users via a RESTful login API. However, it incorrectly accepts the 'none' algorithm in JWTs, allowing token forgery. The application trusts the JWT payload without signature verification when 'alg' is set to 'none'. To solve: Forge a JWT for the user carlos and access their account page using the tampered token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth redirect URI manipulation\nDescription: This application uses OAuth2 for third-party login, but fails to properly validate redirect URIs. It accepts user-controlled input in the redirect_uri parameter during the authorization flow. To solve: Trick the OAuth provider to send an access token to your controlled domain, then use the token to gain access to Carlosâ€™s account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth redirect URI manipulation\", \"Lab Description\": \"This application uses OAuth2 for third-party login, but fails to properly validate redirect URIs. It accepts user-controlled input in the redirect_uri parameter during the authorization flow. To solve: Trick the OAuth provider to send an access token to your controlled domain, then use the token to gain access to Carlosâ€™s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via predictable session ID in login response\nDescription: The application assigns session IDs before login and fails to regenerate them upon successful authentication. An attacker can predetermine a session and then trick a user into authenticating with it. To solve: Set a fixed session ID for Carlos before he logs in, then hijack the session to access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via predictable session ID in login response\", \"Lab Description\": \"The application assigns session IDs before login and fails to regenerate them upon successful authentication. An attacker can predetermine a session and then trick a user into authenticating with it. To solve: Set a fixed session ID for Carlos before he logs in, then hijack the session to access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Secret Key Brute-Force in Authorization Header\nDescription: This lab uses JWT tokens for stateless authentication but fails to use a secure secret key. The token is signed with a guessable value, making it vulnerable to brute-force attacks. The application verifies the signature using a hardcoded secret and grants access based on the 'admin' claim. To solve: Forge a valid JWT token with 'admin':true and access the /admin endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Secret Key Brute-Force in Authorization Header\", \"Lab Description\": \"This lab uses JWT tokens for stateless authentication but fails to use a secure secret key. The token is signed with a guessable value, making it vulnerable to brute-force attacks. The application verifies the signature using a hardcoded secret and grants access based on the 'admin' claim. To solve: Forge a valid JWT token with 'admin':true and access the /admin endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation via Weak Token Binding\nDescription: The application assigns a session cookie before login and fails to regenerate it after authentication. Attackers can set a known session ID and trick the victim into logging in with it. To solve: Fix a session ID, trick the victim to log in, then reuse the session ID to access /my-account as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Weak Token Binding\", \"Lab Description\": \"The application assigns a session cookie before login and fails to regenerate it after authentication. Attackers can set a known session ID and trick the victim into logging in with it. To solve: Fix a session ID, trick the victim to log in, then reuse the session ID to access /my-account as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Implicit Flow Token Theft via Referer Leak\nDescription: This lab uses OAuth 2.0 implicit flow to obtain access tokens via redirects. The redirection target page leaks the access token in the Referer header. To solve: Intercept the redirect and steal the token using a malicious third-party page, then access /oauth/user-info as the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Theft via Referer Leak\", \"Lab Description\": \"This lab uses OAuth 2.0 implicit flow to obtain access tokens via redirects. The redirection target page leaks the access token in the Referer header. To solve: Intercept the redirect and steal the token using a malicious third-party page, then access /oauth/user-info as the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature 'none' bypass in Authorization header\nDescription: The application uses JWT tokens for authentication but does not validate the token's signature algorithm properly. It allows an attacker to manipulate the JWT by setting the `alg` header to 'none'. The application accepts unsigned tokens. To solve: forge a JWT with `alg: none` to access Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature 'none' bypass in Authorization header\", \"Lab Description\": \"The application uses JWT tokens for authentication but does not validate the token's signature algorithm properly. It allows an attacker to manipulate the JWT by setting the `alg` header to 'none'. The application accepts unsigned tokens. To solve: forge a JWT with `alg: none` to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in pre-login cookie assignment\nDescription: This application sets a session ID cookie before authentication. Upon login, it reuses the existing session instead of regenerating it, allowing session fixation attacks. To solve: fix a session, get Carlos to log in using it, then hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in pre-login cookie assignment\", \"Lab Description\": \"This application sets a session ID cookie before authentication. Upon login, it reuses the existing session instead of regenerating it, allowing session fixation attacks. To solve: fix a session, get Carlos to log in using it, then hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via redirect URI manipulation\nDescription: The app implements OAuth login but does not properly validate redirect URIs during token exchange. An attacker can manipulate the redirect_uri parameter to capture tokens. To solve: leak Carlosâ€™s token using a crafted malicious redirect_uri.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect URI manipulation\", \"Lab Description\": \"The app implements OAuth login but does not properly validate redirect URIs during token exchange. An attacker can manipulate the redirect_uri parameter to capture tokens. To solve: leak Carlosâ€™s token using a crafted malicious redirect_uri.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg field is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg field is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL introspection query exposing authentication fields\nDescription: The GraphQL endpoint has introspection enabled, revealing sensitive authentication fields and mutations. The application exposes password reset functionality through undocumented GraphQL mutations. To solve: exploit the exposed mutation to reset the admin password.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL introspection query exposing authentication fields\", \"Lab Description\": \"The GraphQL endpoint has introspection enabled, revealing sensitive authentication fields and mutations. The application exposes password reset functionality through undocumented GraphQL mutations. To solve: exploit the exposed mutation to reset the admin password.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through open redirect\nDescription: The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URLs during OAuth token exchange. To solve: steal an OAuth token by tricking a user into authenticating through your malicious redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through open redirect\", \"Lab Description\": \"The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URLs during OAuth token exchange. To solve: steal an OAuth token by tricking a user into authenticating through your malicious redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in SOAP API authentication\nDescription: The lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application accepts pre-defined session IDs during login without proper validation. To solve: fixate a session ID and trick an admin into authenticating with it to gain privileged access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SOAP API authentication\", \"Lab Description\": \"The lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application accepts pre-defined session IDs during login without proper validation. To solve: fixate a session ID and trick an admin into authenticating with it to gain privileged access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in REST microservice\nDescription: The JWT validation service is vulnerable to key path traversal via the kid header parameter. The application uses the kid value to load verification keys without sanitization. To solve: craft a JWT that forces the server to use a predictable public key for verification.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in REST microservice\", \"Lab Description\": \"The JWT validation service is vulnerable to key path traversal via the kid header parameter. The application uses the kid value to load verification keys without sanitization. To solve: craft a JWT that forces the server to use a predictable public key for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage through verbose error messages\nDescription: The OAuth token endpoint leaks sensitive information through detailed error responses. The application reveals valid tokens in error messages when malformed requests are sent. To solve: extract a valid OAuth token by analyzing error responses and use it to access protected resources.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through verbose error messages\", \"Lab Description\": \"The OAuth token endpoint leaks sensitive information through detailed error responses. The application reveals valid tokens in error messages when malformed requests are sent. To solve: extract a valid OAuth token by analyzing error responses and use it to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT role escalation via unsigned JWKS endpoint\nDescription: The application's JSON Web Key Set (JWKS) endpoint returns unsigned public keys that can be manipulated to forge admin tokens. The application [fails to validate key signatures during JWT verification]. To solve: [craft a valid JWT with admin privileges by injecting a malicious key into the JWKS response].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT role escalation via unsigned JWKS endpoint\", \"Lab Description\": \"The application's JSON Web Key Set (JWKS) endpoint returns unsigned public keys that can be manipulated to forge admin tokens. The application [fails to validate key signatures during JWT verification]. To solve: [craft a valid JWT with admin privileges by injecting a malicious key into the JWKS response].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping through parameter pollution\nDescription: The OAuth 2.0 implementation is vulnerable to access token substitution via duplicate parameter injection. The application [processes multiple token parameters inconsistently]. To solve: [steal an admin access token by injecting duplicate token parameters in the authorization flow].\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping through parameter pollution\", \"Lab Description\": \"The OAuth 2.0 implementation is vulnerable to access token substitution via duplicate parameter injection. The application [processes multiple token parameters inconsistently]. To solve: [steal an admin access token by injecting duplicate token parameters in the authorization flow].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking through GraphQL batch query abuse\nDescription: The GraphQL endpoint processes batch operations with inconsistent session handling. The application [executes multiple mutations in a single request while maintaining session state]. To solve: [hijack an admin session by injecting session ID into batch mutation operation].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking through GraphQL batch query abuse\", \"Lab Description\": \"The GraphQL endpoint processes batch operations with inconsistent session handling. The application [executes multiple mutations in a single request while maintaining session state]. To solve: [hijack an admin session by injecting session ID into batch mutation operation].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT public key injection via x5u header\nDescription: The JWT validation service trusts arbitrary x5u header URLs to fetch verification certificates. The application [fails to validate certificate chain authenticity when processing x5u headers]. To solve: [forge a valid admin token by injecting a malicious x5u URL pointing to attacker-controlled X.509 certificate].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key injection via x5u header\", \"Lab Description\": \"The JWT validation service trusts arbitrary x5u header URLs to fetch verification certificates. The application [fails to validate certificate chain authenticity when processing x5u headers]. To solve: [forge a valid admin token by injecting a malicious x5u URL pointing to attacker-controlled X.509 certificate].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token replay through state parameter injection\nDescription: The OAuth implementation fails to validate state parameter binding during token redemption. The application [accepts previously used authorization codes when accompanied by a new state parameter]. To solve: [intercept an authorization code and replay it with a forged state parameter to obtain fresh access tokens].\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token replay through state parameter injection\", \"Lab Description\": \"The OAuth implementation fails to validate state parameter binding during token redemption. The application [accepts previously used authorization codes when accompanied by a new state parameter]. To solve: [intercept an authorization code and replay it with a forged state parameter to obtain fresh access tokens].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through WebSocket handshake hijacking\nDescription: The WebSocket authentication handshake accepts arbitrary session identifiers. The application [assigns privileged sessions based on unvalidated WS-Session headers during WebSocket upgrades]. To solve: [fixate a privileged session ID through WebSocket handshake manipulation and hijack admin access].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through WebSocket handshake hijacking\", \"Lab Description\": \"The WebSocket authentication handshake accepts arbitrary session identifiers. The application [assigns privileged sessions based on unvalidated WS-Session headers during WebSocket upgrades]. To solve: [fixate a privileged session ID through WebSocket handshake manipulation and hijack admin access].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via jwk header injection\nDescription: The JWT validation endpoint is vulnerable to algorithm confusion attacks through JWK header injection. The application [trusts client-provided JWK headers when verifying tokens signed with symmetric keys]. To solve: [forge a valid admin token by injecting a malicious JWK header and signing with the public key as if it were HMAC].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via jwk header injection\", \"Lab Description\": \"The JWT validation endpoint is vulnerable to algorithm confusion attacks through JWK header injection. The application [trusts client-provided JWK headers when verifying tokens signed with symmetric keys]. To solve: [forge a valid admin token by injecting a malicious JWK header and signing with the public key as if it were HMAC].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through misconfigured CORS\nDescription: The OAuth token endpoint has overly permissive CORS headers, allowing token theft from malicious sites. The application [exposes access tokens through CORS-enabled responses without proper origin validation]. To solve: [craft a cross-domain request to steal OAuth tokens and use them to access protected resources].\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through misconfigured CORS\", \"Lab Description\": \"The OAuth token endpoint has overly permissive CORS headers, allowing token theft from malicious sites. The application [exposes access tokens through CORS-enabled responses without proper origin validation]. To solve: [craft a cross-domain request to steal OAuth tokens and use them to access protected resources].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through HTTP/2 header compression\nDescription: The application's HTTP/2 implementation leaks session IDs through header compression side channels. The application [assigns session IDs before authentication and maintains them through HPACK compression contexts]. To solve: [analyze HPACK compression ratios to fixate and hijack privileged sessions].\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through HTTP/2 header compression\", \"Lab Description\": \"The application's HTTP/2 implementation leaks session IDs through header compression side channels. The application [assigns session IDs before authentication and maintains them through HPACK compression contexts]. To solve: [analyze HPACK compression ratios to fixate and hijack privileged sessions].\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's JWT-based authentication fails to validate the algorithm properly. The application accepts unsigned tokens when the 'alg' header is set to 'none'. To solve: craft a modified JWT to gain admin access without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's JWT-based authentication fails to validate the algorithm properly. The application accepts unsigned tokens when the 'alg' header is set to 'none'. To solve: craft a modified JWT to gain admin access without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured callback in SPA\nDescription: The OAuth implementation leaks authorization codes through URL fragments in single-page applications. The application fails to validate the redirect_uri properly. To solve: intercept the OAuth flow and steal the victim's token through an open redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured callback in SPA\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through URL fragments in single-page applications. The application fails to validate the redirect_uri properly. To solve: intercept the OAuth flow and steal the victim's token through an open redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batching attack against authentication rate limiting\nDescription: The GraphQL endpoint processes batched queries without proper rate limiting checks. The application fails to count each authentication attempt separately in a batch. To solve: bypass login attempt restrictions using query batching to brute-force credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack against authentication rate limiting\", \"Lab Description\": \"The GraphQL endpoint processes batched queries without proper rate limiting checks. The application fails to count each authentication attempt separately in a batch. To solve: bypass login attempt restrictions using query batching to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via XSS in OAuth callback handler\nDescription: The OAuth implementation suffers from session fixation combined with DOM-based XSS in the callback handler. The application fails to regenerate session tokens after OAuth flow completion. To solve: chain XSS with session fixation to hijack an admin session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in OAuth callback handler\", \"Lab Description\": \"The OAuth implementation suffers from session fixation combined with DOM-based XSS in the callback handler. The application fails to regenerate session tokens after OAuth flow completion. To solve: chain XSS with session fixation to hijack an admin session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT verification uses the kid header to load verification keys without proper sanitization. The application allows directory traversal in key file paths. To solve: craft a JWT signed with a predictable local file's contents to gain admin access.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT verification uses the kid header to load verification keys without proper sanitization. The application allows directory traversal in key file paths. To solve: craft a JWT signed with a predictable local file's contents to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification state\nDescription: The multi-factor authentication suffers from a race condition where the verification state isn't properly synchronized. The application uses a global variable to track MFA status. To solve: send parallel requests to bypass MFA by winning the race condition.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification state\", \"Lab Description\": \"The multi-factor authentication suffers from a race condition where the verification state isn't properly synchronized. The application uses a global variable to track MFA status. To solve: send parallel requests to bypass MFA by winning the race condition.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation improperly trusts the jku header to fetch verification keys from external URLs. The application fails to validate the jku domain. To solve: host a malicious JWKS file and craft a JWT that forces the server to use your public key for verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation improperly trusts the jku header to fetch verification keys from external URLs. The application fails to validate the jku domain. To solve: host a malicious JWKS file and craft a JWT that forces the server to use your public key for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure custom URI scheme\nDescription: The mobile OAuth implementation uses insecure custom URI schemes for redirects, allowing token interception. The application fails to validate redirect URIs properly. To solve: register a malicious URI handler and intercept tokens from deep links.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure custom URI scheme\", \"Lab Description\": \"The mobile OAuth implementation uses insecure custom URI schemes for redirects, allowing token interception. The application fails to validate redirect URIs properly. To solve: register a malicious URI handler and intercept tokens from deep links.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket authentication handshake\nDescription: The WebSocket upgrade process accepts existing session IDs without regeneration. The application authenticates WebSocket connections using cookies without proper session rotation. To solve: fixate session via HTTP then upgrade to WebSocket with same session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket authentication handshake\", \"Lab Description\": \"The WebSocket upgrade process accepts existing session IDs without regeneration. The application authenticates WebSocket connections using cookies without proper session rotation. To solve: fixate session via HTTP then upgrade to WebSocket with same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT role escalation via nested token injection\nDescription: The JWT implementation improperly processes nested JSON structures in token claims. The application fails to properly sanitize nested objects in the JWT payload. To solve: craft a JWT with nested role objects to escalate privileges to admin.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT role escalation via nested token injection\", \"Lab Description\": \"The JWT implementation improperly processes nested JSON structures in token claims. The application fails to properly sanitize nested objects in the JWT payload. To solve: craft a JWT with nested role objects to escalate privileges to admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via state parameter reflection\nDescription: The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain state server-side. To solve: craft a malicious link that captures victim's OAuth tokens via reflected state.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via state parameter reflection\", \"Lab Description\": \"The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain state server-side. To solve: craft a malicious link that captures victim's OAuth tokens via reflected state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL WebSocket connection\nDescription: The GraphQL subscription endpoint accepts existing session cookies for WebSocket connections without regeneration. The application fails to rotate session identifiers during WebSocket upgrade. To solve: fixate session via HTTP then establish GraphQL subscription with same session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL WebSocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint accepts existing session cookies for WebSocket connections without regeneration. The application fails to rotate session identifiers during WebSocket upgrade. To solve: fixate session via HTTP then establish GraphQL subscription with same session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via x5u header injection\nDescription: The JWT implementation trusts x5u header to fetch verification certificates without proper validation. The application fails to verify the certificate chain when switching from HMAC to RSA. To solve: host a malicious certificate and force the server to verify tokens using your public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via x5u header injection\", \"Lab Description\": \"The JWT implementation trusts x5u header to fetch verification certificates without proper validation. The application fails to verify the certificate chain when switching from HMAC to RSA. To solve: host a malicious certificate and force the server to verify tokens using your public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via insecure postMessage handler\nDescription: The OAuth popup implementation uses postMessage without proper origin validation. The application fails to verify the message source when processing OAuth tokens. To solve: craft a malicious page that intercepts tokens via postMessage event listeners.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure postMessage handler\", \"Lab Description\": \"The OAuth popup implementation uses postMessage without proper origin validation. The application fails to verify the message source when processing OAuth tokens. To solve: craft a malicious page that intercepts tokens via postMessage event listeners.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 Server Push headers\nDescription: The HTTP/2 implementation pushes session cookies without proper validation. The application assigns session IDs during resource push before authentication. To solve: intercept HTTP/2 push stream to fixate session then authenticate with known credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 Server Push headers\", \"Lab Description\": \"The HTTP/2 implementation pushes session cookies without proper validation. The application assigns session IDs during resource push before authentication. To solve: intercept HTTP/2 push stream to fixate session then authenticate with known credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"This lab's JWT implementation fails to properly verify the token signature. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query abuse in user profile API\nDescription: This lab's GraphQL endpoint exposes sensitive user information through introspection and lacks proper rate limiting. The application allows unlimited query depth that can lead to data leakage. To solve: extract all user credentials through a crafted GraphQL query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query abuse in user profile API\", \"Lab Description\": \"This lab's GraphQL endpoint exposes sensitive user information through introspection and lacks proper rate limiting. The application allows unlimited query depth that can lead to data leakage. To solve: extract all user credentials through a crafted GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through open redirect\nDescription: This lab's OAuth implementation is vulnerable to token leakage through an open redirect in the callback URL. The application fails to validate redirect URIs properly. To solve: steal an OAuth token by tricking a user into visiting a malicious link.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through open redirect\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable to token leakage through an open redirect in the callback URL. The application fails to validate redirect URIs properly. To solve: steal an OAuth token by tricking a user into visiting a malicious link.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in SOAP API authentication\nDescription: This lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application assigns session tokens before authentication and doesn't regenerate them after login. To solve: fixate a session token on victim's browser and hijack their authenticated session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SOAP API authentication\", \"Lab Description\": \"This lab's SOAP-based authentication system is vulnerable to session fixation attacks. The application assigns session tokens before authentication and doesn't regenerate them after login. To solve: fixate a session token on victim's browser and hijack their authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice architecture\nDescription: This lab's JWT verification microservice is vulnerable to key path traversal through the kid header parameter. The application uses the kid value to load verification keys without proper sanitization. To solve: craft a JWT token that forces the server to use a predictable public key file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice architecture\", \"Lab Description\": \"This lab's JWT verification microservice is vulnerable to key path traversal through the kid header parameter. The application uses the kid value to load verification keys without proper sanitization. To solve: craft a JWT token that forces the server to use a predictable public key file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through verbose error messages\nDescription: This lab's OAuth implementation leaks sensitive information through verbose error messages. The application reveals access tokens in stack traces during failed token validation. To solve: trigger error conditions to extract valid tokens from other users.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through verbose error messages\", \"Lab Description\": \"This lab's OAuth implementation leaks sensitive information through verbose error messages. The application reveals access tokens in stack traces during failed token validation. To solve: trigger error conditions to extract valid tokens from other users.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT role escalation via unsigned key confusion\nDescription: This lab's JWT implementation fails to verify the signing algorithm when processing tokens. The application accepts unsigned tokens when expecting RS256-signed ones. To solve: craft a token with admin privileges by exploiting algorithm confusion.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT role escalation via unsigned key confusion\", \"Lab Description\": \"This lab's JWT implementation fails to verify the signing algorithm when processing tokens. The application accepts unsigned tokens when expecting RS256-signed ones. To solve: craft a token with admin privileges by exploiting algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through state parameter reflection\nDescription: This lab's OAuth flow reflects the state parameter in the URL fragment after redirection. The application fails to validate that the returned state matches the original. To solve: intercept the OAuth flow and modify the state to leak the access token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through state parameter reflection\", \"Lab Description\": \"This lab's OAuth flow reflects the state parameter in the URL fragment after redirection. The application fails to validate that the returned state matches the original. To solve: intercept the OAuth flow and modify the state to leak the access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation through GraphQL WebSocket connection\nDescription: This lab's GraphQL subscription endpoint assigns session tokens over WebSocket before authentication. The application fails to regenerate tokens after login. To solve: establish a WebSocket connection to fixate a session token, then authenticate to hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through GraphQL WebSocket connection\", \"Lab Description\": \"This lab's GraphQL subscription endpoint assigns session tokens over WebSocket before authentication. The application fails to regenerate tokens after login. To solve: establish a WebSocket connection to fixate a session token, then authenticate to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON objects\nDescription: This lab's JWT processing incorrectly handles nested JSON objects in claims. The application fails to properly validate claim structures when verifying tokens. To solve: inject a nested 'admin' claim to escalate privileges.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON objects\", \"Lab Description\": \"This lab's JWT processing incorrectly handles nested JSON objects in claims. The application fails to properly validate claim structures when verifying tokens. To solve: inject a nested 'admin' claim to escalate privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping through parameter pollution\nDescription: This lab's OAuth implementation is vulnerable to HTTP parameter pollution during token exchange. The application processes multiple token parameters inconsistently. To solve: inject a second token parameter to swap privileges.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping through parameter pollution\", \"Lab Description\": \"This lab's OAuth implementation is vulnerable to HTTP parameter pollution during token exchange. The application processes multiple token parameters inconsistently. To solve: inject a second token parameter to swap privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session token leakage through GraphQL batch requests\nDescription: This lab's GraphQL endpoint processes batch requests sequentially while maintaining session state. The application leaks session tokens between requests in a batch. To solve: craft a batch query that leaks another user's session token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session token leakage through GraphQL batch requests\", \"Lab Description\": \"This lab's GraphQL endpoint processes batch requests sequentially while maintaining session state. The application leaks session tokens between requests in a batch. To solve: craft a batch query that leaks another user's session token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT header parameter injection via URI fragments\nDescription: This lab's JWT implementation incorrectly processes URI fragments in the kid header parameter. The application fetches verification keys from untrusted locations when special characters are used. To solve: inject a malicious key URI to forge admin tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT header parameter injection via URI fragments\", \"Lab Description\": \"This lab's JWT implementation incorrectly processes URI fragments in the kid header parameter. The application fetches verification keys from untrusted locations when special characters are used. To solve: inject a malicious key URI to forge admin tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via iframe timing attack\nDescription: This lab's OAuth implementation leaks token validity through iframe response times. The application processes valid tokens slower due to database lookups. To solve: measure iframe load times to brute-force active tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via iframe timing attack\", \"Lab Description\": \"This lab's OAuth implementation leaks token validity through iframe response times. The application processes valid tokens slower due to database lookups. To solve: measure iframe load times to brute-force active tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation through WebSocket subprotocol negotiation\nDescription: This lab's WebSocket implementation assigns sessions during subprotocol negotiation. The application fails to regenerate session tokens after authentication. To solve: fixate a session during WS handshake then authenticate to hijack.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation through WebSocket subprotocol negotiation\", \"Lab Description\": \"This lab's WebSocket implementation assigns sessions during subprotocol negotiation. The application fails to regenerate session tokens after authentication. To solve: fixate a session during WS handshake then authenticate to hijack.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: REST API JWT role escalation via unverified header injection\nDescription: The REST API endpoint validates JWT tokens but fails to verify custom headers. The application blindly trusts X-Role headers when present. To solve: craft a request combining a low-privilege JWT with a malicious X-Role header to gain admin access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"REST API JWT role escalation via unverified header injection\", \"Lab Description\": \"The REST API endpoint validates JWT tokens but fails to verify custom headers. The application blindly trusts X-Role headers when present. To solve: craft a request combining a low-privilege JWT with a malicious X-Role header to gain admin access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token hijacking via state parameter reflection\nDescription: The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain server-side state. To solve: intercept the OAuth flow and modify the state parameter to hijack another user's session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via state parameter reflection\", \"Lab Description\": \"The OAuth implementation reflects the state parameter without validation in the redirect URL. The application fails to maintain server-side state. To solve: intercept the OAuth flow and modify the state parameter to hijack another user's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batched query authentication bypass\nDescription: The GraphQL endpoint processes batched queries sequentially without proper authorization checks between operations. The application fails to validate query interdependencies. To solve: craft a batched query that combines an authentication mutation with a privileged query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batched query authentication bypass\", \"Lab Description\": \"The GraphQL endpoint processes batched queries sequentially without proper authorization checks between operations. The application fails to validate query interdependencies. To solve: craft a batched query that combines an authentication mutation with a privileged query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via JSONP callback parameter\nDescription: The application sets session cookies through a JSONP endpoint that reflects callback parameters. The vulnerable implementation allows session fixation attacks. To solve: craft a malicious page that fixes a session ID for the victim then triggers authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JSONP callback parameter\", \"Lab Description\": \"The application sets session cookies through a JSONP endpoint that reflects callback parameters. The vulnerable implementation allows session fixation attacks. To solve: craft a malicious page that fixes a session ID for the victim then triggers authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT verification accepts arbitrary jku (JWK Set URL) headers without validation. The application fails to whitelist trusted key servers. To solve: host a malicious JWK Set and craft a token signed with your own key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT verification accepts arbitrary jku (JWK Set URL) headers without validation. The application fails to whitelist trusted key servers. To solve: host a malicious JWK Set and craft a token signed with your own key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Forwarded-Host header\nDescription: The password reset functionality uses the Host header to generate reset links without proper validation. The application trusts X-Forwarded-Host headers. To solve: poison the reset link generation to send tokens to an attacker-controlled domain.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Forwarded-Host header\", \"Lab Description\": \"The password reset functionality uses the Host header to generate reset links without proper validation. The application trusts X-Forwarded-Host headers. To solve: poison the reset link generation to send tokens to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification state\nDescription: The multi-factor authentication flow has a race condition between verification and session state update. The application uses eventual consistency for MFA status. To solve: send parallel requests to bypass MFA before state propagation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification state\", \"Lab Description\": \"The multi-factor authentication flow has a race condition between verification and session state update. The application uses eventual consistency for MFA status. To solve: send parallel requests to bypass MFA before state propagation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Credential stuffing via case-insensitive password comparison\nDescription: The login endpoint performs case-insensitive password comparison. The application fails to normalize input before hashing. To solve: exploit the case-insensitive check to reduce password entropy for brute-forcing.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-insensitive password comparison\", \"Lab Description\": \"The login endpoint performs case-insensitive password comparison. The application fails to normalize input before hashing. To solve: exploit the case-insensitive check to reduce password entropy for brute-forcing.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in Node.js authentication middleware\nDescription: The lab's JWT authentication implementation accepts unsigned tokens when alg:none is specified. The application fails to validate token signatures properly. To solve: forge a valid admin token by exploiting the alg:none vulnerability.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in Node.js authentication middleware\", \"Lab Description\": \"The lab's JWT authentication implementation accepts unsigned tokens when alg:none is specified. The application fails to validate token signatures properly. To solve: forge a valid admin token by exploiting the alg:none vulnerability.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via open redirect in callback endpoint\nDescription: The OAuth implementation leaks access tokens through an unvalidated redirect parameter in the callback endpoint. The application fails to check redirect URLs against a whitelist. To solve: steal the OAuth token by forcing it to be sent to an attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via open redirect in callback endpoint\", \"Lab Description\": \"The OAuth implementation leaks access tokens through an unvalidated redirect parameter in the callback endpoint. The application fails to check redirect URLs against a whitelist. To solve: steal the OAuth token by forcing it to be sent to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unprotected session regeneration\nDescription: The application assigns session IDs before authentication and doesn't regenerate them after login. The vulnerable behavior allows session fixation attacks. To solve: fixate a session ID on victim's browser then wait for them to authenticate.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unprotected session regeneration\", \"Lab Description\": \"The application assigns session IDs before authentication and doesn't regenerate them after login. The vulnerable behavior allows session fixation attacks. To solve: fixate a session ID on victim's browser then wait for them to authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL introspection leads to unauthorized data access\nDescription: The GraphQL endpoint has introspection enabled, exposing sensitive schema information. The application doesn't implement proper authorization checks. To solve: extract hidden mutations through introspection then execute privileged operations.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL introspection leads to unauthorized data access\", \"Lab Description\": \"The GraphQL endpoint has introspection enabled, exposing sensitive schema information. The application doesn't implement proper authorization checks. To solve: extract hidden mutations through introspection then execute privileged operations.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The multi-factor authentication flow can be bypassed by modifying the status parameter. The application trusts client-side state for authentication decisions. To solve: intercept and modify the MFA verification request to bypass the check.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow can be bypassed by modifying the status parameter. The application trusts client-side state for authentication decisions. To solve: intercept and modify the MFA verification request to bypass the check.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via weak rate limiting on login\nDescription: The login endpoint has insufficient rate limiting, allowing credential stuffing attacks. The application doesn't implement proper account lockout mechanisms. To solve: perform a credential stuffing attack using known password lists.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via weak rate limiting on login\", \"Lab Description\": \"The login endpoint has insufficient rate limiting, allowing credential stuffing attacks. The application doesn't implement proper account lockout mechanisms. To solve: perform a credential stuffing attack using known password lists.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SOAP API authentication bypass via XML comments\nDescription: The SOAP endpoint processes XML comments as part of the authentication logic. The application's XML parser improperly handles comments in authentication elements. To solve: bypass authentication by injecting comments in the SOAP body.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SOAP API authentication bypass via XML comments\", \"Lab Description\": \"The SOAP endpoint processes XML comments as part of the authentication logic. The application's XML parser improperly handles comments in authentication elements. To solve: bypass authentication by injecting comments in the SOAP body.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The lab's authentication system uses JWT tokens with improper signature validation. The application fails to verify the token signature when the alg header is set to 'none'. To solve: craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query batching authentication bypass\nDescription: The lab's GraphQL endpoint is vulnerable to query batching attacks that can bypass rate limiting on authentication attempts. The application processes batched queries sequentially without proper session checks. To solve: craft a batch query that simultaneously tests multiple credentials while appearing as a single request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query batching authentication bypass\", \"Lab Description\": \"The lab's GraphQL endpoint is vulnerable to query batching attacks that can bypass rate limiting on authentication attempts. The application processes batched queries sequentially without proper session checks. To solve: craft a batch query that simultaneously tests multiple credentials while appearing as a single request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through insecure redirect_uri\nDescription: The lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage. The application generates OAuth tokens before validating the redirect URI. To solve: intercept the OAuth flow and modify the redirect_uri to point to your attacker server to capture the authorization code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through insecure redirect_uri\", \"Lab Description\": \"The lab's OAuth implementation fails to properly validate redirect_uri parameters, allowing token leakage. The application generates OAuth tokens before validating the redirect URI. To solve: intercept the OAuth flow and modify the redirect_uri to point to your attacker server to capture the authorization code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via XSS in JWT token endpoint\nDescription: The lab's JWT generation endpoint is vulnerable to XSS injection in custom claims, allowing session fixation attacks. The application fails to sanitize user-controlled input when generating tokens. To solve: craft a malicious JWT that executes XSS when decoded by the admin panel, then fixate this token as the admin's session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in JWT token endpoint\", \"Lab Description\": \"The lab's JWT generation endpoint is vulnerable to XSS injection in custom claims, allowing session fixation attacks. The application fails to sanitize user-controlled input when generating tokens. To solve: craft a malicious JWT that executes XSS when decoded by the admin panel, then fixate this token as the admin's session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through misconfigured CORS in REST API\nDescription: The lab's OAuth implementation has overly permissive CORS headers, allowing token leakage to arbitrary domains. The application returns Access-Control-Allow-Credentials: true with wildcard origins. To solve: craft a malicious web page that steals OAuth tokens through credentialed CORS requests.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through misconfigured CORS in REST API\", \"Lab Description\": \"The lab's OAuth implementation has overly permissive CORS headers, allowing token leakage to arbitrary domains. The application returns Access-Control-Allow-Credentials: true with wildcard origins. To solve: craft a malicious web page that steals OAuth tokens through credentialed CORS requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT key confusion attack through exposed JWKS endpoint\nDescription: The lab's authentication system exposes a JWKS endpoint with leaked RSA private key parameters while accepting HS256-signed tokens. The application fails to validate the signing algorithm properly. To solve: convert the public key to HMAC secret, then craft an admin token signed with the converted key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT key confusion attack through exposed JWKS endpoint\", \"Lab Description\": \"The lab's authentication system exposes a JWKS endpoint with leaked RSA private key parameters while accepting HS256-signed tokens. The application fails to validate the signing algorithm properly. To solve: convert the public key to HMAC secret, then craft an admin token signed with the converted key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The lab's JWT validation microservice is vulnerable to key path traversal through the kid header. The application uses user-controlled kid values to load verification keys without proper sanitization. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The lab's JWT validation microservice is vulnerable to key path traversal through the kid header. The application uses user-controlled kid values to load verification keys without proper sanitization. To solve: craft a JWT that forces the server to use a predictable public key file for verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth state parameter CSRF with open redirect\nDescription: The lab's OAuth implementation fails to validate state parameters properly while having an open redirect vulnerability. The application accepts arbitrary redirect_uri values and doesn't store state parameters server-side. To solve: craft a malicious link that captures victim tokens through CSRF and open redirect chaining.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth state parameter CSRF with open redirect\", \"Lab Description\": \"The lab's OAuth implementation fails to validate state parameters properly while having an open redirect vulnerability. The application accepts arbitrary redirect_uri values and doesn't store state parameters server-side. To solve: craft a malicious link that captures victim tokens through CSRF and open redirect chaining.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session swapping via concurrent login race condition\nDescription: The lab's session management system is vulnerable to race conditions during concurrent login attempts. The application generates session tokens before validating credentials, allowing session swapping between users. To solve: perform concurrent login attempts to swap a low-privilege session with an admin session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session swapping via concurrent login race condition\", \"Lab Description\": \"The lab's session management system is vulnerable to race conditions during concurrent login attempts. The application generates session tokens before validating credentials, allowing session swapping between users. To solve: perform concurrent login attempts to swap a low-privilege session with an admin session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via pre-authentication session fixation\nDescription: The lab's multi-factor authentication creates authenticated sessions before MFA completion. The application assigns session cookies during username/password validation but doesn't invalidate them if MFA fails. To solve: fixate a pre-MFA session and brute-force the verification code while maintaining the session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via pre-authentication session fixation\", \"Lab Description\": \"The lab's multi-factor authentication creates authenticated sessions before MFA completion. The application assigns session cookies during username/password validation but doesn't invalidate them if MFA fails. To solve: fixate a pre-MFA session and brute-force the verification code while maintaining the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim injection via GraphQL introspection\nDescription: The lab's GraphQL endpoint exposes JWT generation through introspection while failing to validate nested claims. The application processes arbitrary claim injection through nested query parameters. To solve: craft a GraphQL query that injects admin privileges into a self-generated JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via GraphQL introspection\", \"Lab Description\": \"The lab's GraphQL endpoint exposes JWT generation through introspection while failing to validate nested claims. The application processes arbitrary claim injection through nested query parameters. To solve: craft a GraphQL query that injects admin privileges into a self-generated JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through WebSocket handshake\nDescription: The lab's OAuth implementation leaks tokens during WebSocket upgrades by including them in clear text. The application fails to strip authentication headers during protocol switching. To solve: intercept the WebSocket handshake to harvest active OAuth tokens from other users.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through WebSocket handshake\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens during WebSocket upgrades by including them in clear text. The application fails to strip authentication headers during protocol switching. To solve: intercept the WebSocket handshake to harvest active OAuth tokens from other users.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via malformed SAML assertion\nDescription: The lab's SAML implementation accepts unsigned assertions in certain conditions. The application fails to properly validate XML signatures when receiving malformed NameID elements. To solve: craft a SAML response with a malformed NameID to fixate a session for any user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via malformed SAML assertion\", \"Lab Description\": \"The lab's SAML implementation accepts unsigned assertions in certain conditions. The application fails to properly validate XML signatures when receiving malformed NameID elements. To solve: craft a SAML response with a malformed NameID to fixate a session for any user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter injection\nDescription: The lab's MFA verification accepts state parameters that modify the target account. The application fails to validate state consistency between initiation and completion. To solve: inject a target username in the state parameter during MFA initiation to bypass verification for that account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter injection\", \"Lab Description\": \"The lab's MFA verification accepts state parameters that modify the target account. The application fails to validate state consistency between initiation and completion. To solve: inject a target username in the state parameter during MFA initiation to bypass verification for that account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm downgrade via HTTP/2 request smuggling\nDescription: The lab's JWT validation is vulnerable to algorithm downgrade attacks when processing HTTP/2 requests. The application fails to properly validate the alg header when requests are smuggled through HTTP/2 connection coalescing. To solve: craft an HTTP/2 request that smuggles a JWT with none algorithm while appearing as a valid RS256 token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm downgrade via HTTP/2 request smuggling\", \"Lab Description\": \"The lab's JWT validation is vulnerable to algorithm downgrade attacks when processing HTTP/2 requests. The application fails to properly validate the alg header when requests are smuggled through HTTP/2 connection coalescing. To solve: craft an HTTP/2 request that smuggles a JWT with none algorithm while appearing as a valid RS256 token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking through DNS rebinding\nDescription: The lab's OAuth implementation is vulnerable to DNS rebinding attacks during token redemption. The application fails to validate the Host header against the redirect_uri domain during token exchange. To solve: create a malicious site that performs DNS rebinding to capture OAuth tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking through DNS rebinding\", \"Lab Description\": \"The lab's OAuth implementation is vulnerable to DNS rebinding attacks during token redemption. The application fails to validate the Host header against the redirect_uri domain during token exchange. To solve: create a malicious site that performs DNS rebinding to capture OAuth tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebRTC ICE candidate leakage\nDescription: The lab's WebRTC implementation leaks session tokens through ICE candidate messages. The application includes session cookies in STUN/TURN authentication and fails to filter them from ICE candidate responses. To solve: intercept WebRTC negotiation to harvest session tokens from ICE candidates.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebRTC ICE candidate leakage\", \"Lab Description\": \"The lab's WebRTC implementation leaks session tokens through ICE candidate messages. The application includes session cookies in STUN/TURN authentication and fails to filter them from ICE candidate responses. To solve: intercept WebRTC negotiation to harvest session tokens from ICE candidates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via WebSocket session inheritance\nDescription: The lab's MFA verification inherits WebSocket sessions from pre-authentication connections. The application associates MFA state with WebSocket connections rather than HTTP sessions. To solve: establish a WebSocket connection before authentication, complete MFA on a different channel, then reuse the WebSocket connection.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebSocket session inheritance\", \"Lab Description\": \"The lab's MFA verification inherits WebSocket sessions from pre-authentication connections. The application associates MFA state with WebSocket connections rather than HTTP sessions. To solve: establish a WebSocket connection before authentication, complete MFA on a different channel, then reuse the WebSocket connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim smuggling via HTTP/2 pseudo-headers\nDescription: The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 pseudo-header manipulation. The application fails to properly validate the :path pseudo-header when extracting claims, allowing duplicate claims in different header contexts. To solve: craft an HTTP/2 request that smuggles conflicting claims through pseudo-header manipulation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim smuggling via HTTP/2 pseudo-headers\", \"Lab Description\": \"The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 pseudo-header manipulation. The application fails to properly validate the :path pseudo-header when extracting claims, allowing duplicate claims in different header contexts. To solve: craft an HTTP/2 request that smuggles conflicting claims through pseudo-header manipulation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage through DNS-over-HTTPS cache poisoning\nDescription: The lab's OAuth implementation is vulnerable to DNS cache poisoning via DNS-over-HTTPS (DoH) that leads to token leakage. The application uses DoH for redirect_uri validation but fails to properly cache responses, allowing redirection to attacker-controlled domains. To solve: poison the DoH cache to redirect OAuth tokens to a malicious domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage through DNS-over-HTTPS cache poisoning\", \"Lab Description\": \"The lab's OAuth implementation is vulnerable to DNS cache poisoning via DNS-over-HTTPS (DoH) that leads to token leakage. The application uses DoH for redirect_uri validation but fails to properly cache responses, allowing redirection to attacker-controlled domains. To solve: poison the DoH cache to redirect OAuth tokens to a malicious domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebTransport session IDs\nDescription: The lab's WebTransport implementation uses predictable session IDs that can be fixated before authentication. The application generates session tokens based on client-provided Session-ID headers without proper validation. To solve: predict and fixate a WebTransport session ID before authentication, then hijack the session after login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport session IDs\", \"Lab Description\": \"The lab's WebTransport implementation uses predictable session IDs that can be fixated before authentication. The application generates session tokens based on client-provided Session-ID headers without proper validation. To solve: predict and fixate a WebTransport session ID before authentication, then hijack the session after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via QUIC connection migration\nDescription: The lab's MFA verification is vulnerable to bypass through QUIC connection migration. The application associates MFA state with QUIC connection IDs rather than authentication tokens. To solve: initiate MFA verification, then migrate QUIC connection to bypass verification while maintaining authenticated state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via QUIC connection migration\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through QUIC connection migration. The application associates MFA state with QUIC connection IDs rather than authentication tokens. To solve: initiate MFA verification, then migrate QUIC connection to bypass verification while maintaining authenticated state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm substitution via HTTP/3 connection migration\nDescription: The lab's JWT validation is vulnerable to algorithm substitution when connections migrate between HTTP/3 and HTTP/2. The application fails to maintain consistent algorithm validation during protocol transitions. To solve: initiate authentication over HTTP/3, migrate to HTTP/2 mid-session, and substitute the algorithm header to bypass validation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm substitution via HTTP/3 connection migration\", \"Lab Description\": \"The lab's JWT validation is vulnerable to algorithm substitution when connections migrate between HTTP/3 and HTTP/2. The application fails to maintain consistent algorithm validation during protocol transitions. To solve: initiate authentication over HTTP/3, migrate to HTTP/2 mid-session, and substitute the algorithm header to bypass validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via WebSocket subprotocol negotiation\nDescription: The lab's OAuth implementation leaks tokens during WebSocket subprotocol negotiation. The application includes OAuth tokens in Sec-WebSocket-Protocol headers when negotiating subprotocols. To solve: intercept WebSocket handshake, manipulate subprotocol negotiation to capture tokens, and reuse them for API access.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via WebSocket subprotocol negotiation\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens during WebSocket subprotocol negotiation. The application includes OAuth tokens in Sec-WebSocket-Protocol headers when negotiating subprotocols. To solve: intercept WebSocket handshake, manipulate subprotocol negotiation to capture tokens, and reuse them for API access.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP Trailers header injection\nDescription: The lab's session management is vulnerable to fixation through HTTP Trailers headers. The application processes session cookies from trailing headers after the main headers, allowing session override. To solve: craft a request with malicious session in Trailers header that overrides legitimate session after authentication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP Trailers header injection\", \"Lab Description\": \"The lab's session management is vulnerable to fixation through HTTP Trailers headers. The application processes session cookies from trailing headers after the main headers, allowing session override. To solve: craft a request with malicious session in Trailers header that overrides legitimate session after authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via WebTransport datagram fragmentation\nDescription: The lab's MFA verification is vulnerable to bypass through WebTransport datagram fragmentation. The application fails to properly reassemble fragmented MFA codes sent over unreliable datagram channels. To solve: fragment MFA verification packets to trigger partial validation and bypass full code requirement.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebTransport datagram fragmentation\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through WebTransport datagram fragmentation. The application fails to properly reassemble fragmented MFA codes sent over unreliable datagram channels. To solve: fragment MFA verification packets to trigger partial validation and bypass full code requirement.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT claim smuggling via HTTP/2 trailer headers\nDescription: The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 trailer headers. The application processes trailer headers after initial JWT validation, allowing additional claims to be injected. To solve: craft an HTTP/2 request with malicious claims in trailer headers that override original JWT claims after validation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim smuggling via HTTP/2 trailer headers\", \"Lab Description\": \"The lab's JWT processing is vulnerable to claim smuggling through HTTP/2 trailer headers. The application processes trailer headers after initial JWT validation, allowing additional claims to be injected. To solve: craft an HTTP/2 request with malicious claims in trailer headers that override original JWT claims after validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via HTTP/3 connection migration\nDescription: The lab's OAuth implementation leaks tokens during HTTP/3 connection migration. The application fails to properly clear authentication state when connections migrate between networks. To solve: initiate OAuth flow on one network, force connection migration, and capture tokens from the new connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via HTTP/3 connection migration\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens during HTTP/3 connection migration. The application fails to properly clear authentication state when connections migrate between networks. To solve: initiate OAuth flow on one network, force connection migration, and capture tokens from the new connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket subprotocol downgrade\nDescription: The lab's WebSocket implementation is vulnerable to session fixation through subprotocol downgrade attacks. The application maintains session state when downgrading from secure to insecure subprotocols. To solve: establish WebSocket with secure subprotocol, force downgrade, and fixate session identifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket subprotocol downgrade\", \"Lab Description\": \"The lab's WebSocket implementation is vulnerable to session fixation through subprotocol downgrade attacks. The application maintains session state when downgrading from secure to insecure subprotocols. To solve: establish WebSocket with secure subprotocol, force downgrade, and fixate session identifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via HTTP/3 connection coalescing\nDescription: The lab's JWT validation is vulnerable to algorithm confusion when HTTP/3 connections coalesce. The application fails to properly isolate cryptographic contexts when multiple hosts share an IP address. To solve: craft a JWT that appears as RS256 when validated by Host A but becomes HS256 when processed by Host B on the same IP.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via HTTP/3 connection coalescing\", \"Lab Description\": \"The lab's JWT validation is vulnerable to algorithm confusion when HTTP/3 connections coalesce. The application fails to properly isolate cryptographic contexts when multiple hosts share an IP address. To solve: craft a JWT that appears as RS256 when validated by Host A but becomes HS256 when processed by Host B on the same IP.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via HTTP/2 PRIORITY_UPDATE frames\nDescription: The lab's OAuth implementation leaks tokens in HTTP/2 PRIORITY_UPDATE frame metadata. The application includes sensitive tokens in stream priority weight calculations. To solve: manipulate stream dependencies to force token leakage in connection state updates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via HTTP/2 PRIORITY_UPDATE frames\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens in HTTP/2 PRIORITY_UPDATE frame metadata. The application includes sensitive tokens in stream priority weight calculations. To solve: manipulate stream dependencies to force token leakage in connection state updates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via HTTP Trailers in gRPC streaming\nDescription: The lab's MFA verification is vulnerable to bypass through gRPC streaming trailer manipulation. The application processes MFA verification status in trailers but fails to validate them against the stream body. To solve: send valid MFA code in stream messages but override verification status in trailers.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP Trailers in gRPC streaming\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through gRPC streaming trailer manipulation. The application processes MFA verification status in trailers but fails to validate them against the stream body. To solve: send valid MFA code in stream messages but override verification status in trailers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT validation bypass via HTTP/2 CONTINUATION frame injection\nDescription: The lab's JWT validation is vulnerable to header splitting through HTTP/2 CONTINUATION frames. The application fails to properly reconstruct headers split across multiple CONTINUATION frames, allowing JWT claims to be smuggled. To solve: craft a request with malicious JWT claims in CONTINUATION frames that override the original token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT validation bypass via HTTP/2 CONTINUATION frame injection\", \"Lab Description\": \"The lab's JWT validation is vulnerable to header splitting through HTTP/2 CONTINUATION frames. The application fails to properly reconstruct headers split across multiple CONTINUATION frames, allowing JWT claims to be smuggled. To solve: craft a request with malicious JWT claims in CONTINUATION frames that override the original token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via HTTP/3 GREASE frames\nDescription: The lab's OAuth implementation leaks tokens in HTTP/3 GREASE frame metadata. The application includes sensitive tokens in reserved frame type processing. To solve: craft GREASE frames that trigger token leakage in connection state updates.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via HTTP/3 GREASE frames\", \"Lab Description\": \"The lab's OAuth implementation leaks tokens in HTTP/3 GREASE frame metadata. The application includes sensitive tokens in reserved frame type processing. To solve: craft GREASE frames that trigger token leakage in connection state updates.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebTransport stream priority inversion\nDescription: The lab's session management is vulnerable to fixation through WebTransport stream priority manipulation. The application associates sessions with stream priorities but fails to validate them on stream recreation. To solve: create high-priority stream, fixate session, then recreate stream with same priority to resume session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport stream priority inversion\", \"Lab Description\": \"The lab's session management is vulnerable to fixation through WebTransport stream priority manipulation. The application associates sessions with stream priorities but fails to validate them on stream recreation. To solve: create high-priority stream, fixate session, then recreate stream with same priority to resume session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via gRPC metadata compression oracle\nDescription: The lab's MFA verification is vulnerable to bypass through gRPC metadata compression analysis. The application leaks verification status through compression ratios of error messages. To solve: analyze compression differences between valid and invalid MFA codes to derive correct code.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via gRPC metadata compression oracle\", \"Lab Description\": \"The lab's MFA verification is vulnerable to bypass through gRPC metadata compression analysis. The application leaks verification status through compression ratios of error messages. To solve: analyze compression differences between valid and invalid MFA codes to derive correct code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The application uses JWT for session management but fails to properly validate the algorithm. The vulnerable endpoint /api/admin accepts unsigned tokens when alg:none is specified. To solve: Forge an administrative JWT without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The application uses JWT for session management but fails to properly validate the algorithm. The vulnerable endpoint /api/admin accepts unsigned tokens when alg:none is specified. To solve: Forge an administrative JWT without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured callback in SPA\nDescription: The single-page application implements OAuth 2.0 with implicit flow but exposes access tokens in browser history due to improper callback handling. The application stores OAuth tokens in URL fragments. To solve: Retrieve victim's access token from browser history and access their profile data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured callback in SPA\", \"Lab Description\": \"The single-page application implements OAuth 2.0 with implicit flow but exposes access tokens in browser history due to improper callback handling. The application stores OAuth tokens in URL fragments. To solve: Retrieve victim's access token from browser history and access their profile data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation\nDescription: The GraphQL API allows session fixation by accepting arbitrary session identifiers through the createSession mutation. The application doesn't regenerate session IDs after authentication. To solve: Fixate a session ID and trick the victim into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation\", \"Lab Description\": \"The GraphQL API allows session fixation by accepting arbitrary session identifiers through the createSession mutation. The application doesn't regenerate session IDs after authentication. To solve: Fixate a session ID and trick the victim into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via state parameter manipulation in SOAP service\nDescription: The SOAP-based authentication service implements MFA but fails to validate the state parameter between steps. The application trusts client-provided state values after MFA verification. To solve: Bypass MFA by manipulating state parameters in the authentication flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter manipulation in SOAP service\", \"Lab Description\": \"The SOAP-based authentication service implements MFA but fails to validate the state parameter between steps. The application trusts client-provided state values after MFA verification. To solve: Bypass MFA by manipulating state parameters in the authentication flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header injection in microservice authentication\nDescription: The microservice architecture uses JWT with kid header pointing to local files for key verification. The application fails to sanitize kid header values, allowing path traversal. To solve: Forge admin JWT by loading arbitrary local files as verification keys.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header injection in microservice authentication\", \"Lab Description\": \"The microservice architecture uses JWT with kid header pointing to local files for key verification. The application fails to sanitize kid header values, allowing path traversal. To solve: Forge admin JWT by loading arbitrary local files as verification keys.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via insecure state validation\nDescription: The OAuth implementation in the React frontend fails to properly validate state parameters during callback. The application trusts client-side state verification, allowing token swapping. To solve: Intercept OAuth flow and replace victim's auth code with your own while maintaining valid state.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via insecure state validation\", \"Lab Description\": \"The OAuth implementation in the React frontend fails to properly validate state parameters during callback. The application trusts client-side state verification, allowing token swapping. To solve: Intercept OAuth flow and replace victim's auth code with your own while maintaining valid state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session token leakage via GraphQL verbose errors\nDescription: The GraphQL endpoint leaks session tokens through verbose error messages when malformed queries are submitted. The application's debug mode remains enabled in production. To solve: Extract valid session tokens from error responses and hijack user sessions.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session token leakage via GraphQL verbose errors\", \"Lab Description\": \"The GraphQL endpoint leaks session tokens through verbose error messages when malformed queries are submitted. The application's debug mode remains enabled in production. To solve: Extract valid session tokens from error responses and hijack user sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: MFA bypass via race condition in REST API\nDescription: The MFA verification endpoint suffers from a race condition where the first valid code disables verification for subsequent requests. The application fails to implement proper transaction locking. To solve: Send parallel requests with valid and invalid codes to bypass MFA protection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in REST API\", \"Lab Description\": \"The MFA verification endpoint suffers from a race condition where the first valid code disables verification for subsequent requests. The application fails to implement proper transaction locking. To solve: Send parallel requests with valid and invalid codes to bypass MFA protection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature stripping via header injection in REST API\nDescription: The API endpoint /admin/panel uses JWT authentication but fails to validate signature when custom headers are injected. The application processes unsigned tokens if x-algorithm header is present. To solve: Gain admin access by stripping JWT signature while maintaining valid payload.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping via header injection in REST API\", \"Lab Description\": \"The API endpoint /admin/panel uses JWT authentication but fails to validate signature when custom headers are injected. The application processes unsigned tokens if x-algorithm header is present. To solve: Gain admin access by stripping JWT signature while maintaining valid payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via insecure redirect_uri validation\nDescription: The OAuth implementation fails to properly validate redirect_uri parameters, allowing tokens to be leaked to attacker-controlled domains. The application doesn't verify exact match of registered callback URLs. To solve: Steal authorization code by modifying redirect_uri to point to malicious server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via insecure redirect_uri validation\", \"Lab Description\": \"The OAuth implementation fails to properly validate redirect_uri parameters, allowing tokens to be leaked to attacker-controlled domains. The application doesn't verify exact match of registered callback URLs. To solve: Steal authorization code by modifying redirect_uri to point to malicious server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint over websockets accepts arbitrary session IDs during connection initialization. The application doesn't regenerate session IDs after authentication. To solve: Fixate session ID through websocket connection and hijack authenticated session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint over websockets accepts arbitrary session IDs during connection initialization. The application doesn't regenerate session IDs after authentication. To solve: Fixate session ID through websocket connection and hijack authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via time-limited code reuse\nDescription: The MFA implementation allows previously used codes to remain valid for short time windows after being consumed. The application fails to immediately invalidate used codes. To solve: Intercept valid MFA code and reuse it within the allowed time frame.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-limited code reuse\", \"Lab Description\": \"The MFA implementation allows previously used codes to remain valid for short time windows after being consumed. The application fails to immediately invalidate used codes. To solve: Intercept valid MFA code and reuse it within the allowed time frame.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via exposed public key in REST API\nDescription: The API exposes its public key at /jwks.json endpoint but fails to properly validate JWT algorithm. The application accepts RS256-signed tokens when configured for HS256. To solve: Forge admin token by signing with public key as HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via exposed public key in REST API\", \"Lab Description\": \"The API exposes its public key at /jwks.json endpoint but fails to properly validate JWT algorithm. The application accepts RS256-signed tokens when configured for HS256. To solve: Forge admin token by signing with public key as HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure PKCE implementation\nDescription: The OAuth flow uses PKCE but fails to properly validate code_verifier. The application doesn't enforce code_challenge_method matching. To solve: Bypass PKCE protection by omitting code_verifier parameter during token exchange.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure PKCE implementation\", \"Lab Description\": \"The OAuth flow uses PKCE but fails to properly validate code_verifier. The application doesn't enforce code_challenge_method matching. To solve: Bypass PKCE protection by omitting code_verifier parameter during token exchange.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 connection coalescing\nDescription: The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 connection coalescing\", \"Lab Description\": \"The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter tampering in SOAP API\nDescription: The SOAP-based MFA verification trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Modify state parameter to bypass MFA after initial authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter tampering in SOAP API\", \"Lab Description\": \"The SOAP-based MFA verification trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Modify state parameter to bypass MFA after initial authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via key confusion in microservice architecture\nDescription: The microservice authentication gateway accepts both HS256 and RS256 tokens but fails to properly validate key material. The application exposes public keys via /.well-known/jwks.json endpoint. To solve: Forge admin token by signing with public key as HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via key confusion in microservice architecture\", \"Lab Description\": \"The microservice authentication gateway accepts both HS256 and RS256 tokens but fails to properly validate key material. The application exposes public keys via /.well-known/jwks.json endpoint. To solve: Forge admin token by signing with public key as HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via open redirect in mobile app deep linking\nDescription: The mobile app's OAuth implementation accepts arbitrary redirect URIs in the deep link handler. The application fails to validate redirect_uri against allowlist when processing authorization codes. To solve: Steal authorization code by intercepting deep link with attacker-controlled redirect URI.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via open redirect in mobile app deep linking\", \"Lab Description\": \"The mobile app's OAuth implementation accepts arbitrary redirect URIs in the deep link handler. The application fails to validate redirect_uri against allowlist when processing authorization codes. To solve: Steal authorization code by intercepting deep link with attacker-controlled redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket connection ID reuse\nDescription: The real-time application assigns session tokens during WebSocket connection establishment. The server reuses session IDs for reconnecting clients with same connection ID. To solve: Fixate session ID by forcing victim to reuse your WebSocket connection parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket connection ID reuse\", \"Lab Description\": \"The real-time application assigns session tokens during WebSocket connection establishment. The server reuses session IDs for reconnecting clients with same connection ID. To solve: Fixate session ID by forcing victim to reuse your WebSocket connection parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via time-of-check to time-of-use race condition\nDescription: The MFA verification endpoint has a race window between code validation and session marking. The application doesn't use atomic operations for MFA state transitions. To solve: Send parallel requests to bypass MFA by exploiting the race condition.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-of-check to time-of-use race condition\", \"Lab Description\": \"The MFA verification endpoint has a race window between code validation and session marking. The application doesn't use atomic operations for MFA state transitions. To solve: Send parallel requests to bypass MFA by exploiting the race condition.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via header injection in API gateway\nDescription: The API gateway validates JWT tokens but fails to properly sanitize header values. The application processes unsigned tokens when x-verify-algorithm header is present. To solve: Gain admin access by stripping JWT signature while injecting custom verification header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via header injection in API gateway\", \"Lab Description\": \"The API gateway validates JWT tokens but fails to properly sanitize header values. The application processes unsigned tokens when x-verify-algorithm header is present. To solve: Gain admin access by stripping JWT signature while injecting custom verification header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA\nDescription: The single-page application implements OAuth with overly permissive CORS headers. The API endpoints allow arbitrary origins and include credentials in responses. To solve: Retrieve access token by making cross-origin requests from malicious site.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA\", \"Lab Description\": \"The single-page application implements OAuth with overly permissive CORS headers. The API endpoints allow arbitrary origins and include credentials in responses. To solve: Retrieve access token by making cross-origin requests from malicious site.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 connection coalescing\nDescription: The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 connection coalescing\", \"Lab Description\": \"The application assigns session IDs during HTTP/2 connection establishment. The server reuses session IDs for coalesced connections to same origin. To solve: Fixate session ID by forcing victim to reuse your connection parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter manipulation in REST API\nDescription: The MFA verification endpoint trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Bypass MFA by modifying state parameter to match initial request value.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter manipulation in REST API\", \"Lab Description\": \"The MFA verification endpoint trusts client-provided state parameters. The application doesn't validate state between authentication steps. To solve: Bypass MFA by modifying state parameter to match initial request value.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API authentication\nDescription: The application uses JWT for session management but fails to validate the algorithm properly. The vulnerable endpoint accepts unsigned tokens when alg:none is specified. To solve: craft a valid JWT with alg:none and escalate privileges to admin.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API authentication\", \"Lab Description\": \"The application uses JWT for session management but fails to validate the algorithm properly. The vulnerable endpoint accepts unsigned tokens when alg:none is specified. To solve: craft a valid JWT with alg:none and escalate privileges to admin.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured callback in SPA\nDescription: The OAuth implementation leaks access tokens through verbose error messages when invalid callback URLs are provided. The application fails to validate redirect URIs properly. To solve: exploit the token leakage to gain access to another user's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured callback in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through verbose error messages when invalid callback URLs are provided. The application fails to validate redirect URIs properly. To solve: exploit the token leakage to gain access to another user's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL mutation in user authentication\nDescription: The GraphQL API allows setting arbitrary session IDs during login through a vulnerable mutation. The application doesn't regenerate session tokens after authentication. To solve: fixate a session ID and trick a victim into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL mutation in user authentication\", \"Lab Description\": \"The GraphQL API allows setting arbitrary session IDs during login through a vulnerable mutation. The application doesn't regenerate session tokens after authentication. To solve: fixate a session ID and trick a victim into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass through race condition in SOAP API\nDescription: The SOAP-based authentication service is vulnerable to race conditions during MFA verification. The application doesn't properly lock the account during verification attempts. To solve: exploit the race window to bypass MFA by sending parallel requests.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass through race condition in SOAP API\", \"Lab Description\": \"The SOAP-based authentication service is vulnerable to race conditions during MFA verification. The application doesn't properly lock the account during verification attempts. To solve: exploit the race window to bypass MFA by sending parallel requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header injection in microservice authentication\nDescription: The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service reads verification keys from filesystem based on untrusted kid value. To solve: forge admin token by injecting path to attacker-controlled key file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service reads verification keys from filesystem based on untrusted kid value. To solve: forge admin token by injecting path to attacker-controlled key file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via state parameter tampering\nDescription: The OAuth implementation fails to validate state parameter consistency between requests, allowing token swapping attacks. The vulnerable flow leaks tokens in frontend JavaScript. To solve: intercept victim's OAuth flow and swap tokens using modified state parameter.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via state parameter tampering\", \"Lab Description\": \"The OAuth implementation fails to validate state parameter consistency between requests, allowing token swapping attacks. The vulnerable flow leaks tokens in frontend JavaScript. To solve: intercept victim's OAuth flow and swap tokens using modified state parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint assigns sessions based on initial WebSocket connection parameters. The application doesn't regenerate session IDs after authentication. To solve: establish WebSocket connection with fixed session ID and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint assigns sessions based on initial WebSocket connection parameters. The application doesn't regenerate session IDs after authentication. To solve: establish WebSocket connection with fixed session ID and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via HTTP verb tampering in REST API\nDescription: The MFA verification endpoint fails to properly validate HTTP methods, allowing bypass via verb tampering. The vulnerable API accepts GET requests for actions requiring POST. To solve: bypass MFA by converting POST request to GET with parameters in query string.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP verb tampering in REST API\", \"Lab Description\": \"The MFA verification endpoint fails to properly validate HTTP methods, allowing bypass via verb tampering. The vulnerable API accepts GET requests for actions requiring POST. To solve: bypass MFA by converting POST request to GET with parameters in query string.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header injection in federated authentication\nDescription: The application's JWT validation improperly processes x5u header, allowing arbitrary certificate URL specification. The vulnerable endpoint fetches verification certificates from attacker-controlled locations. To solve: forge admin token by hosting malicious certificate and injecting URL in x5u header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header injection in federated authentication\", \"Lab Description\": \"The application's JWT validation improperly processes x5u header, allowing arbitrary certificate URL specification. The vulnerable endpoint fetches verification certificates from attacker-controlled locations. To solve: forge admin token by hosting malicious certificate and injecting URL in x5u header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS in SPA\nDescription: The OAuth implementation leaks access tokens through overly permissive CORS headers. The vulnerable endpoint includes tokens in responses to cross-origin requests. To solve: craft malicious page that retrieves victim's token via JavaScript fetch request.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through overly permissive CORS headers. The vulnerable endpoint includes tokens in responses to cross-origin requests. To solve: craft malicious page that retrieves victim's token via JavaScript fetch request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 header injection\nDescription: The application assigns sessions based on HTTP/2 pseudo-headers without proper validation. The vulnerable server processes :path header as session identifier. To solve: establish connection with malicious :path header and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 header injection\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 pseudo-headers without proper validation. The vulnerable server processes :path header as session identifier. To solve: establish connection with malicious :path header and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via case-sensitive endpoint in REST API\nDescription: The MFA verification endpoint is case-sensitive while the authentication service is not. The vulnerable API accepts different case variations for the same endpoint. To solve: bypass MFA by changing endpoint case while maintaining valid session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via case-sensitive endpoint in REST API\", \"Lab Description\": \"The MFA verification endpoint is case-sensitive while the authentication service is not. The vulnerable API accepts different case variations for the same endpoint. To solve: bypass MFA by changing endpoint case while maintaining valid session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT jku header injection in microservice authentication\nDescription: The application's JWT validation improperly validates the jku header parameter, allowing arbitrary JWKS endpoint specification. The vulnerable service fetches verification keys from untrusted locations. To solve: forge admin token by hosting malicious JWKS endpoint and injecting URL in jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT jku header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly validates the jku header parameter, allowing arbitrary JWKS endpoint specification. The vulnerable service fetches verification keys from untrusted locations. To solve: forge admin token by hosting malicious JWKS endpoint and injecting URL in jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure redirect_uri validation\nDescription: The OAuth implementation fails to properly validate redirect_uri parameters against whitelisted domains. The vulnerable flow allows token delivery to attacker-controlled endpoints. To solve: intercept authorization code and modify redirect_uri to capture tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure redirect_uri validation\", \"Lab Description\": \"The OAuth implementation fails to properly validate redirect_uri parameters against whitelisted domains. The vulnerable flow allows token delivery to attacker-controlled endpoints. To solve: intercept authorization code and modify redirect_uri to capture tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket subprotocol negotiation\nDescription: The application assigns sessions based on WebSocket subprotocol headers without proper validation. The vulnerable server uses Sec-WebSocket-Protocol header as session identifier. To solve: establish WebSocket connection with malicious subprotocol and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket subprotocol negotiation\", \"Lab Description\": \"The application assigns sessions based on WebSocket subprotocol headers without proper validation. The vulnerable server uses Sec-WebSocket-Protocol header as session identifier. To solve: establish WebSocket connection with malicious subprotocol and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via HTTP method confusion in REST API\nDescription: The MFA verification endpoint fails to enforce proper HTTP method restrictions. The vulnerable API accepts GET requests for actions requiring POST when using X-HTTP-Method-Override header. To solve: bypass MFA by converting request method while maintaining parameters.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP method confusion in REST API\", \"Lab Description\": \"The MFA verification endpoint fails to enforce proper HTTP method restrictions. The vulnerable API accepts GET requests for actions requiring POST when using X-HTTP-Method-Override header. To solve: bypass MFA by converting request method while maintaining parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm downgrade in API gateway authentication\nDescription: The API gateway fails to enforce JWT algorithm restrictions, allowing attackers to downgrade from RS256 to HS256. The vulnerable endpoint accepts HMAC-signed tokens while expecting RSA. To solve: forge admin token by re-signing with HMAC using public key as secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm downgrade in API gateway authentication\", \"Lab Description\": \"The API gateway fails to enforce JWT algorithm restrictions, allowing attackers to downgrade from RS256 to HS256. The vulnerable endpoint accepts HMAC-signed tokens while expecting RSA. To solve: forge admin token by re-signing with HMAC using public key as secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in SPA\nDescription: The OAuth implementation leaks access tokens through referer headers when loading external resources. The vulnerable SPA includes tokens in requests to third-party domains. To solve: create malicious page that forces token leakage via image tag.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through referer headers when loading external resources. The vulnerable SPA includes tokens in requests to third-party domains. To solve: create malicious page that forces token leakage via image tag.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL batch query\nDescription: The GraphQL endpoint assigns sessions based on batch operation IDs without proper validation. The vulnerable server uses operation names as session identifiers. To solve: craft batch query with fixed operation ID and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL batch query\", \"Lab Description\": \"The GraphQL endpoint assigns sessions based on batch operation IDs without proper validation. The vulnerable server uses operation names as session identifiers. To solve: craft batch query with fixed operation ID and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON parameter pollution in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON parameter pollution. The vulnerable API processes duplicate keys inconsistently. To solve: bypass MFA by injecting duplicate verified parameter with conflicting values.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON parameter pollution in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON parameter pollution. The vulnerable API processes duplicate keys inconsistently. To solve: bypass MFA by injecting duplicate verified parameter with conflicting values.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5c header injection in microservice authentication\nDescription: The application's JWT validation improperly processes x5c header certificates, allowing arbitrary certificate injection. The vulnerable endpoint trusts any certificate provided in the x5c header. To solve: forge admin token by injecting attacker-controlled certificate in x5c header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5c header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly processes x5c header certificates, allowing arbitrary certificate injection. The vulnerable endpoint trusts any certificate provided in the x5c header. To solve: forge admin token by injecting attacker-controlled certificate in x5c header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via open redirect in SPA\nDescription: The OAuth implementation contains an open redirect vulnerability that leaks access tokens. The vulnerable endpoint redirects to attacker-controlled domains with tokens in URL fragments. To solve: craft malicious redirect URL to capture victim's token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via open redirect in SPA\", \"Lab Description\": \"The OAuth implementation contains an open redirect vulnerability that leaks access tokens. The vulnerable endpoint redirects to attacker-controlled domains with tokens in URL fragments. To solve: craft malicious redirect URL to capture victim's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 trailer headers\nDescription: The application assigns sessions based on HTTP/2 trailer headers without validation. The vulnerable server processes session-id trailer header as authentication token. To solve: establish connection with malicious trailer header and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 trailer headers\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 trailer headers without validation. The vulnerable server processes session-id trailer header as authentication token. To solve: establish connection with malicious trailer header and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON array wrapping in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON array wrapping. The vulnerable API processes the first element when arrays are provided. To solve: bypass MFA by wrapping parameters in arrays.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON array wrapping in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON array wrapping. The vulnerable API processes the first element when arrays are provided. To solve: bypass MFA by wrapping parameters in arrays.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT cty header injection in API gateway authentication\nDescription: The API gateway improperly processes JWT content-type (cty) headers, allowing content type confusion attacks. The vulnerable endpoint executes JWTs with content-type 'text/xml' as XML documents. To solve: forge admin token by setting cty header to 'text/xml' and injecting XML payload.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT cty header injection in API gateway authentication\", \"Lab Description\": \"The API gateway improperly processes JWT content-type (cty) headers, allowing content type confusion attacks. The vulnerable endpoint executes JWTs with content-type 'text/xml' as XML documents. To solve: forge admin token by setting cty header to 'text/xml' and injecting XML payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebSocket subprotocol negotiation\nDescription: The OAuth implementation leaks access tokens through WebSocket subprotocol headers during connection upgrades. The vulnerable endpoint includes tokens in Sec-WebSocket-Protocol headers. To solve: establish WebSocket connection and capture token from subprotocol negotiation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebSocket subprotocol negotiation\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebSocket subprotocol headers during connection upgrades. The vulnerable endpoint includes tokens in Sec-WebSocket-Protocol headers. To solve: establish WebSocket connection and capture token from subprotocol negotiation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 QUIC transport parameters\nDescription: The application assigns sessions based on HTTP/3 QUIC transport parameters without validation. The vulnerable server uses initial_max_streams_bidi parameter as session identifier. To solve: establish QUIC connection with malicious transport parameter and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 QUIC transport parameters\", \"Lab Description\": \"The application assigns sessions based on HTTP/3 QUIC transport parameters without validation. The vulnerable server uses initial_max_streams_bidi parameter as session identifier. To solve: establish QUIC connection with malicious transport parameter and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON comment injection in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON comment injection. The vulnerable API parser processes comments in JSON payloads. To solve: bypass MFA by injecting commented-out verified parameter.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON comment injection in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON comment injection. The vulnerable API parser processes comments in JSON payloads. To solve: bypass MFA by injecting commented-out verified parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT typ header injection in microservice authentication\nDescription: The application's JWT validation improperly processes the typ header parameter, allowing type confusion attacks. The vulnerable endpoint accepts JWTs with typ 'xml' as XML documents. To solve: forge admin token by setting typ header to 'xml' and injecting XML payload.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT typ header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly processes the typ header parameter, allowing type confusion attacks. The vulnerable endpoint accepts JWTs with typ 'xml' as XML documents. To solve: forge admin token by setting typ header to 'xml' and injecting XML payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token theft via DNS rebinding in SPA\nDescription: The OAuth implementation is vulnerable to DNS rebinding attacks through improperly validated redirect URIs. The vulnerable endpoint accepts IP addresses that can be rebound to attacker-controlled servers. To solve: exploit DNS rebinding to capture victim's token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token theft via DNS rebinding in SPA\", \"Lab Description\": \"The OAuth implementation is vulnerable to DNS rebinding attacks through improperly validated redirect URIs. The vulnerable endpoint accepts IP addresses that can be rebound to attacker-controlled servers. To solve: exploit DNS rebinding to capture victim's token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 PRIORITY frames\nDescription: The application assigns sessions based on HTTP/2 PRIORITY frame stream dependencies. The vulnerable server uses stream dependency IDs as session identifiers. To solve: establish connection with malicious PRIORITY frame and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 PRIORITY frames\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 PRIORITY frame stream dependencies. The vulnerable server uses stream dependency IDs as session identifiers. To solve: establish connection with malicious PRIORITY frame and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON numeric overflow in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON numeric overflow. The vulnerable API fails to properly validate large numeric codes. To solve: bypass MFA by submitting max integer value as verification code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON numeric overflow in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON numeric overflow. The vulnerable API fails to properly validate large numeric codes. To solve: bypass MFA by submitting max integer value as verification code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header SSRF in API gateway authentication\nDescription: The API gateway's JWT validation improperly processes x5u headers, allowing Server-Side Request Forgery (SSRF) attacks. The vulnerable endpoint fetches verification certificates from URLs specified in x5u headers without proper validation. To solve: forge admin token by hosting malicious certificate and injecting internal URL in x5u header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header SSRF in API gateway authentication\", \"Lab Description\": \"The API gateway's JWT validation improperly processes x5u headers, allowing Server-Side Request Forgery (SSRF) attacks. The vulnerable endpoint fetches verification certificates from URLs specified in x5u headers without proper validation. To solve: forge admin token by hosting malicious certificate and injecting internal URL in x5u header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebTransport session initiation\nDescription: The OAuth implementation leaks access tokens through WebTransport session initiation headers. The vulnerable endpoint includes tokens in session initiation metadata. To solve: establish WebTransport connection and capture token from session headers.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebTransport session initiation\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebTransport session initiation headers. The vulnerable endpoint includes tokens in session initiation metadata. To solve: establish WebTransport connection and capture token from session headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 SETTINGS parameters\nDescription: The application assigns sessions based on HTTP/3 SETTINGS frame parameters without validation. The vulnerable server uses MAX_FIELD_SECTION_SIZE parameter as session identifier. To solve: establish QUIC connection with malicious SETTINGS parameter and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 SETTINGS parameters\", \"Lab Description\": \"The application assigns sessions based on HTTP/3 SETTINGS frame parameters without validation. The vulnerable server uses MAX_FIELD_SECTION_SIZE parameter as session identifier. To solve: establish QUIC connection with malicious SETTINGS parameter and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON BigInt poisoning in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON BigInt poisoning. The vulnerable API fails to properly validate BigInt numeric codes. To solve: bypass MFA by submitting extremely large BigInt value as verification code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON BigInt poisoning in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON BigInt poisoning. The vulnerable API fails to properly validate BigInt numeric codes. To solve: bypass MFA by submitting extremely large BigInt value as verification code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5t parameter injection in microservice authentication\nDescription: The application's JWT validation improperly processes x5t (certificate thumbprint) parameters, allowing certificate spoofing. The vulnerable endpoint accepts any certificate matching the thumbprint in the JWT header. To solve: forge admin token by generating certificate with matching thumbprint and injecting into JWT header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5t parameter injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly processes x5t (certificate thumbprint) parameters, allowing certificate spoofing. The vulnerable endpoint accepts any certificate matching the thumbprint in the JWT header. To solve: forge admin token by generating certificate with matching thumbprint and injecting into JWT header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebRTC data channels\nDescription: The OAuth implementation leaks access tokens through WebRTC data channel establishment. The vulnerable endpoint includes tokens in SDP offers. To solve: establish WebRTC connection and capture token from SDP negotiation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebRTC data channels\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebRTC data channel establishment. The vulnerable endpoint includes tokens in SDP offers. To solve: establish WebRTC connection and capture token from SDP negotiation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 ALTSVC frames\nDescription: The application assigns sessions based on HTTP/2 ALTSVC frame parameters without validation. The vulnerable server uses alternative service identifiers as session tokens. To solve: establish connection with malicious ALTSVC frame and trick victim into authenticating.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 ALTSVC frames\", \"Lab Description\": \"The application assigns sessions based on HTTP/2 ALTSVC frame parameters without validation. The vulnerable server uses alternative service identifiers as session tokens. To solve: establish connection with malicious ALTSVC frame and trick victim into authenticating.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via JSON prototype pollution in REST API\nDescription: The MFA verification endpoint is vulnerable to JSON prototype pollution. The vulnerable API fails to properly sanitize nested objects. To solve: bypass MFA by polluting Object prototype with verified property.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via JSON prototype pollution in REST API\", \"Lab Description\": \"The MFA verification endpoint is vulnerable to JSON prototype pollution. The vulnerable API fails to properly sanitize nested objects. To solve: bypass MFA by polluting Object prototype with verified property.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT alg:none vulnerability in REST API authentication\nDescription: The application uses JWT tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when 'alg:none' is specified. To solve: Craft a valid JWT token with admin privileges without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none vulnerability in REST API authentication\", \"Lab Description\": \"The application uses JWT tokens with improper signature validation. The vulnerable endpoint accepts unsigned tokens when 'alg:none' is specified. To solve: Craft a valid JWT token with admin privileges without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in social login\nDescription: The application's OAuth implementation leaks access tokens through referer headers when loading external resources. To solve: Capture the leaked token and use it to authenticate as another user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in social login\", \"Lab Description\": \"The application's OAuth implementation leaks access tokens through referer headers when loading external resources. To solve: Capture the leaked token and use it to authenticate as another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via login CSRF in GraphQL endpoint\nDescription: The GraphQL API assigns session tokens before authentication is complete. To solve: Fixate a session token and force a victim to authenticate with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via login CSRF in GraphQL endpoint\", \"Lab Description\": \"The GraphQL API assigns session tokens before authentication is complete. To solve: Fixate a session token and force a victim to authenticate with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The application checks MFA status via client-side parameter that can be manipulated. To solve: Bypass MFA by modifying the status parameter after partial authentication.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The application checks MFA status via client-side parameter that can be manipulated. To solve: Bypass MFA by modifying the status parameter after partial authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via insecure API rate limiting\nDescription: The login API has inconsistent rate limiting allowing credential stuffing attacks. To solve: Bypass rate limits using header manipulation and common credentials.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via insecure API rate limiting\", \"Lab Description\": \"The login API has inconsistent rate limiting allowing credential stuffing attacks. To solve: Bypass rate limits using header manipulation and common credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session hijacking via subdomain cookie scope\nDescription: The application sets session cookies to parent domain allowing subdomain takeover. To solve: Exploit overly permissive cookie scope to hijack sessions across subdomains.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via subdomain cookie scope\", \"Lab Description\": \"The application sets session cookies to parent domain allowing subdomain takeover. To solve: Exploit overly permissive cookie scope to hijack sessions across subdomains.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT kid header injection in microservice authentication\nDescription: The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service [trusts kid header without sanitization]. To solve: Forge a valid admin token by exploiting the kid parameter to load a predictable secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header injection in microservice authentication\", \"Lab Description\": \"The application's JWT validation improperly handles the kid header parameter, allowing arbitrary file path injection. The vulnerable service [trusts kid header without sanitization]. To solve: Forge a valid admin token by exploiting the kid parameter to load a predictable secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via state parameter tampering\nDescription: The OAuth implementation fails to validate state parameters properly during token exchange. The application [maintains session state through unprotected cookies]. To solve: Hijack another user's OAuth flow by intercepting and modifying state parameters.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via state parameter tampering\", \"Lab Description\": \"The OAuth implementation fails to validate state parameters properly during token exchange. The application [maintains session state through unprotected cookies]. To solve: Hijack another user's OAuth flow by intercepting and modifying state parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses WS connections for multiple operations]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses WS connections for multiple operations]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification API\nDescription: The MFA verification endpoint suffers from a race condition when handling concurrent requests. The application [uses non-atomic operations for verification status]. To solve: Send parallel requests to bypass MFA by exploiting timing window between verification and status update.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification API\", \"Lab Description\": \"The MFA verification endpoint suffers from a race condition when handling concurrent requests. The application [uses non-atomic operations for verification status]. To solve: Send parallel requests to bypass MFA by exploiting timing window between verification and status update.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via JSONP authentication endpoint\nDescription: The legacy JSONP authentication endpoint lacks rate limiting and proper CORS headers. The application [exposes user enumeration through subtle response differences]. To solve: Perform credential stuffing attack via JSONP callbacks to bypass same-origin policy.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via JSONP authentication endpoint\", \"Lab Description\": \"The legacy JSONP authentication endpoint lacks rate limiting and proper CORS headers. The application [exposes user enumeration through subtle response differences]. To solve: Perform credential stuffing attack via JSONP callbacks to bypass same-origin policy.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation improperly trusts the jku header to fetch verification keys from external sources. The application [fails to validate jku domains]. To solve: Forge admin token by hosting malicious JWKS file and injecting your jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation improperly trusts the jku header to fetch verification keys from external sources. The application [fails to validate jku domains]. To solve: Forge admin token by hosting malicious JWKS file and injecting your jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via XSS in OAuth redirect_uri parameter\nDescription: The OAuth implementation allows arbitrary redirect_uri values and reflects session tokens in URL fragments. The application [stores session tokens client-side]. To solve: Chain XSS in redirect_uri with session fixation to hijack user sessions.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via XSS in OAuth redirect_uri parameter\", \"Lab Description\": \"The OAuth implementation allows arbitrary redirect_uri values and reflects session tokens in URL fragments. The application [stores session tokens client-side]. To solve: Chain XSS in redirect_uri with session fixation to hijack user sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via HTTP method tampering on verification endpoint\nDescription: The MFA verification endpoint fails to enforce proper HTTP method validation. The application [processes GET and POST identically]. To solve: Bypass MFA by converting POST verification to GET request with parameters in query string.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via HTTP method tampering on verification endpoint\", \"Lab Description\": \"The MFA verification endpoint fails to enforce proper HTTP method validation. The application [processes GET and POST identically]. To solve: Bypass MFA by converting POST verification to GET request with parameters in query string.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via case-sensitive password comparison\nDescription: The authentication endpoint performs case-sensitive password comparison against lowercase stored values. The application [stores passwords in lowercase]. To solve: Perform credential stuffing attack using lowercase variants of known password leaks.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-sensitive password comparison\", \"Lab Description\": \"The authentication endpoint performs case-sensitive password comparison against lowercase stored values. The application [stores passwords in lowercase]. To solve: Perform credential stuffing attack using lowercase variants of known password leaks.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking via GraphQL batch query IDOR\nDescription: The GraphQL endpoint processes batch queries with shared authentication context. The application [reuses session for all queries in batch]. To solve: Inject unauthorized queries alongside legitimate ones in batch request to access other users' data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via GraphQL batch query IDOR\", \"Lab Description\": \"The GraphQL endpoint processes batch queries with shared authentication context. The application [reuses session for all queries in batch]. To solve: Inject unauthorized queries alongside legitimate ones in batch request to access other users' data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT brute-force via weak HS256 secret in debug endpoint\nDescription: The debug endpoint leaks JWT verification secrets through verbose error messages. The application [exposes secret in HMAC-SHA256 validation failures]. To solve: Extract weak secret from error response and forge admin token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT brute-force via weak HS256 secret in debug endpoint\", \"Lab Description\": \"The debug endpoint leaks JWT verification secrets through verbose error messages. The application [exposes secret in HMAC-SHA256 validation failures]. To solve: Extract weak secret from error response and forge admin token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via asymmetric to symmetric substitution\nDescription: The JWT implementation accepts both asymmetric and symmetric algorithms but fails to validate the signing method consistently. The application [treats RS256 as HS256 when key is embedded]. To solve: Convert public key to symmetric secret and forge valid tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via asymmetric to symmetric substitution\", \"Lab Description\": \"The JWT implementation accepts both asymmetric and symmetric algorithms but fails to validate the signing method consistently. The application [treats RS256 as HS256 when key is embedded]. To solve: Convert public key to symmetric secret and forge valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe CSP bypass\nDescription: The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe CSP bypass\", \"Lab Description\": \"The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake parameter injection\nDescription: The WebSocket connection assigns session tokens based on unvalidated handshake parameters. The application [trusts ws:// URL parameters for session binding]. To solve: Inject session token through crafted WebSocket URL and force victim to authenticate.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake parameter injection\", \"Lab Description\": \"The WebSocket connection assigns session tokens based on unvalidated handshake parameters. The application [trusts ws:// URL parameters for session binding]. To solve: Inject session token through crafted WebSocket URL and force victim to authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via time-based one-time password prediction\nDescription: The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable MFA seeds based on username]. To solve: Calculate valid TOTP codes by reverse-engineering the seed generation algorithm.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-based one-time password prediction\", \"Lab Description\": \"The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable MFA seeds based on username]. To solve: Calculate valid TOTP codes by reverse-engineering the seed generation algorithm.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via case-insensitive username matching\nDescription: The authentication endpoint performs case-insensitive username comparison but case-sensitive password checks. The application [stores usernames in lowercase but preserves case in passwords]. To solve: Perform credential stuffing with case-varied usernames against known password lists.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-insensitive username matching\", \"Lab Description\": \"The authentication endpoint performs case-insensitive username comparison but case-sensitive password checks. The application [stores usernames in lowercase but preserves case in passwords]. To solve: Perform credential stuffing with case-varied usernames against known password lists.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT key injection via jwk header parameter\nDescription: The JWT validation improperly processes embedded jwk headers in tokens. The application [trusts self-signed keys without verification]. To solve: Inject malicious RSA public key in jwk header and sign token with corresponding private key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT key injection via jwk header parameter\", \"Lab Description\": \"The JWT validation improperly processes embedded jwk headers in tokens. The application [trusts self-signed keys without verification]. To solve: Inject malicious RSA public key in jwk header and sign token with corresponding private key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect\nDescription: The OAuth implementation allows arbitrary redirect_uri values through an open redirect vulnerability. The application [leaks tokens in URL fragments]. To solve: Chain open redirect with token leakage to steal authentication tokens.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect\", \"Lab Description\": \"The OAuth implementation allows arbitrary redirect_uri values through an open redirect vulnerability. The application [leaks tokens in URL fragments]. To solve: Chain open redirect with token leakage to steal authentication tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket subscriptions\nDescription: The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses connection IDs as session tokens]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket subscriptions\", \"Lab Description\": \"The GraphQL subscription endpoint assigns session tokens over websockets before authentication. The application [reuses connection IDs as session tokens]. To solve: Establish websocket connection, fixate session ID, and force victim to authenticate over same connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via status code manipulation\nDescription: The MFA verification endpoint relies on client-side status code interpretation. The application [processes failed verifications as successes]. To solve: Intercept and modify status code from 403 to 200 to bypass MFA.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status code manipulation\", \"Lab Description\": \"The MFA verification endpoint relies on client-side status code interpretation. The application [processes failed verifications as successes]. To solve: Intercept and modify status code from 403 to 200 to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via password reset timing attack\nDescription: The password reset endpoint leaks account existence through response timing. The application [takes longer to respond for valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with known passwords.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via password reset timing attack\", \"Lab Description\": \"The password reset endpoint leaks account existence through response timing. The application [takes longer to respond for valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with known passwords.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session hijacking via JWT cross-service replay\nDescription: The same JWT secret is used across multiple microservices. The application [shares verification keys between services]. To solve: Capture low-privilege token from one service and replay it to privileged endpoints in another service.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session hijacking via JWT cross-service replay\", \"Lab Description\": \"The same JWT secret is used across multiple microservices. The application [shares verification keys between services]. To solve: Capture low-privilege token from one service and replay it to privileged endpoints in another service.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT authentication bypass via empty signature\nDescription: The JWT validation fails when encountering tokens with empty signatures. The application [incorrectly processes unsigned tokens as valid]. To solve: Remove the signature portion from a valid JWT while keeping the header and payload intact to bypass authentication.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via empty signature\", \"Lab Description\": \"The JWT validation fails when encountering tokens with empty signatures. The application [incorrectly processes unsigned tokens as valid]. To solve: Remove the signature portion from a valid JWT while keeping the header and payload intact to bypass authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via misconfigured CORS\nDescription: The OAuth token endpoint has overly permissive CORS headers. The application [exposes tokens to arbitrary origins]. To solve: Craft malicious JavaScript to retrieve tokens cross-origin and exfiltrate them to an attacker-controlled server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via misconfigured CORS\", \"Lab Description\": \"The OAuth token endpoint has overly permissive CORS headers. The application [exposes tokens to arbitrary origins]. To solve: Craft malicious JavaScript to retrieve tokens cross-origin and exfiltrate them to an attacker-controlled server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via JSON Web Encryption\nDescription: The application uses JWE tokens for session management but fails to validate key ownership. The application [accepts encrypted tokens with attacker-controlled keys]. To solve: Generate new encryption key pair, create JWE token with victim's session data, and fixate session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JSON Web Encryption\", \"Lab Description\": \"The application uses JWE tokens for session management but fails to validate key ownership. The application [accepts encrypted tokens with attacker-controlled keys]. To solve: Generate new encryption key pair, create JWE token with victim's session data, and fixate session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via parallel session exploitation\nDescription: The MFA verification doesn't invalidate existing sessions after completion. The application [allows multiple concurrent sessions]. To solve: Maintain authenticated session while completing MFA in different browser to bypass verification requirement.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via parallel session exploitation\", \"Lab Description\": \"The MFA verification doesn't invalidate existing sessions after completion. The application [allows multiple concurrent sessions]. To solve: Maintain authenticated session while completing MFA in different browser to bypass verification requirement.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via key confusion attack\nDescription: The JWT implementation accepts both symmetric and asymmetric algorithms but fails to properly validate key types. The application [treats public keys as HMAC secrets]. To solve: Exploit algorithm confusion to forge valid tokens by signing with the public key as an HMAC secret.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via key confusion attack\", \"Lab Description\": \"The JWT implementation accepts both symmetric and asymmetric algorithms but fails to properly validate key types. The application [treats public keys as HMAC secrets]. To solve: Exploit algorithm confusion to forge valid tokens by signing with the public key as an HMAC secret.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via referer header leakage\nDescription: The OAuth implementation leaks access tokens through referer headers when loading external resources. The application [includes tokens in GET parameters]. To solve: Craft malicious page that triggers resource loading to capture tokens through referer headers.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via referer header leakage\", \"Lab Description\": \"The OAuth implementation leaks access tokens through referer headers when loading external resources. The application [includes tokens in GET parameters]. To solve: Craft malicious page that triggers resource loading to capture tokens through referer headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 request smuggling\nDescription: The application's HTTP/2 implementation improperly processes session cookies across multiplexed streams. The application [assigns sessions based on first request's headers]. To solve: Craft HTTP/2 requests to fixate session cookie across multiple connections.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 request smuggling\", \"Lab Description\": \"The application's HTTP/2 implementation improperly processes session cookies across multiplexed streams. The application [assigns sessions based on first request's headers]. To solve: Craft HTTP/2 requests to fixate session cookie across multiple connections.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via response manipulation\nDescription: The MFA verification relies on client-side validation of success responses. The application [processes all 200 responses as successful]. To solve: Intercept and modify failed verification responses to appear successful.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via response manipulation\", \"Lab Description\": \"The MFA verification relies on client-side validation of success responses. The application [processes all 200 responses as successful]. To solve: Intercept and modify failed verification responses to appear successful.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via password reset timing attack\nDescription: The password reset endpoint leaks account existence through response timing. The application [takes longer to process valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with common passwords.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via password reset timing attack\", \"Lab Description\": \"The password reset endpoint leaks account existence through response timing. The application [takes longer to process valid accounts]. To solve: Perform timing attack to enumerate valid accounts then credential stuff with common passwords.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via null signature attack\nDescription: The JWT validation fails to properly handle tokens with null bytes in the signature. The application [incorrectly validates truncated signatures]. To solve: Craft a token with null bytes in the signature to bypass validation while maintaining valid header and payload.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via null signature attack\", \"Lab Description\": \"The JWT validation fails to properly handle tokens with null bytes in the signature. The application [incorrectly validates truncated signatures]. To solve: Craft a token with null bytes in the signature to bypass validation while maintaining valid header and payload.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebSocket subprotocol negotiation\nDescription: The OAuth implementation leaks tokens during WebSocket subprotocol handshake. The application [includes sensitive tokens in Sec-WebSocket-Protocol headers]. To solve: Intercept WebSocket connections and extract tokens from handshake headers.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebSocket subprotocol negotiation\", \"Lab Description\": \"The OAuth implementation leaks tokens during WebSocket subprotocol handshake. The application [includes sensitive tokens in Sec-WebSocket-Protocol headers]. To solve: Intercept WebSocket connections and extract tokens from handshake headers.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 connection migration\nDescription: The HTTP/3 implementation assigns session tokens based on QUIC connection IDs. The application [reuses session state across migrated connections]. To solve: Fixate session by forcing connection migration before authentication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 connection migration\", \"Lab Description\": \"The HTTP/3 implementation assigns session tokens based on QUIC connection IDs. The application [reuses session state across migrated connections]. To solve: Fixate session by forcing connection migration before authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via WebAuthn replay attack\nDescription: The WebAuthn implementation fails to validate challenge nonces properly. The application [accepts reused authentication assertions]. To solve: Capture valid WebAuthn assertion and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebAuthn replay attack\", \"Lab Description\": \"The WebAuthn implementation fails to validate challenge nonces properly. The application [accepts reused authentication assertions]. To solve: Capture valid WebAuthn assertion and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via case-sensitive cookie parsing\nDescription: The authentication system processes cookies with case-sensitive inconsistencies. The application [treats 'Session' and 'session' as different cookies]. To solve: Perform credential stuffing with case-varied cookie names to bypass authentication.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-sensitive cookie parsing\", \"Lab Description\": \"The authentication system processes cookies with case-sensitive inconsistencies. The application [treats 'Session' and 'session' as different cookies]. To solve: Perform credential stuffing with case-varied cookie names to bypass authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT authentication bypass via key ID confusion\nDescription: The JWT implementation incorrectly processes key IDs from untrusted sources. The application [uses kid header to select verification keys without proper validation]. To solve: Inject malicious kid header pointing to attacker-controlled key to forge valid tokens.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via key ID confusion\", \"Lab Description\": \"The JWT implementation incorrectly processes key IDs from untrusted sources. The application [uses kid header to select verification keys without proper validation]. To solve: Inject malicious kid header pointing to attacker-controlled key to forge valid tokens.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via iframe CSP bypass\nDescription: The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via iframe CSP bypass\", \"Lab Description\": \"The OAuth token endpoint is embedded in iframes with overly permissive CSP headers. The application [leaks tokens through postMessage events]. To solve: Craft malicious page that extracts tokens via iframe CSP bypass.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 stream prioritization\nDescription: The HTTP/2 implementation assigns sessions based on stream dependencies. The application [reuses session state across dependent streams]. To solve: Craft HTTP/2 requests with malicious stream dependencies to fixate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 stream prioritization\", \"Lab Description\": \"The HTTP/2 implementation assigns sessions based on stream dependencies. The application [reuses session state across dependent streams]. To solve: Craft HTTP/2 requests with malicious stream dependencies to fixate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via TOTP prediction\nDescription: The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable OTP sequences]. To solve: Capture multiple OTPs and reverse-engineer the generation algorithm to predict valid codes.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via TOTP prediction\", \"Lab Description\": \"The TOTP implementation uses insufficient entropy in seed generation. The application [generates predictable OTP sequences]. To solve: Capture multiple OTPs and reverse-engineer the generation algorithm to predict valid codes.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT authentication bypass via header parameter injection\nDescription: The JWT implementation fails to properly sanitize header parameters before verification. The application [processes malicious x5u header values as valid certificate URLs]. To solve: Inject x5u header pointing to attacker-controlled certificate to bypass signature validation.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass via header parameter injection\", \"Lab Description\": \"The JWT implementation fails to properly sanitize header parameters before verification. The application [processes malicious x5u header values as valid certificate URLs]. To solve: Inject x5u header pointing to attacker-controlled certificate to bypass signature validation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via DNS prefetch\nDescription: The OAuth implementation includes tokens in external resource URLs that trigger DNS prefetching. The application [leaks tokens through DNS lookups]. To solve: Craft malicious page with resource links containing tokens to capture them via DNS exfiltration.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via DNS prefetch\", \"Lab Description\": \"The OAuth implementation includes tokens in external resource URLs that trigger DNS prefetching. The application [leaks tokens through DNS lookups]. To solve: Craft malicious page with resource links containing tokens to capture them via DNS exfiltration.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebTransport session IDs\nDescription: The WebTransport implementation assigns session tokens before authentication. The application [uses connection IDs as session tokens]. To solve: Establish WebTransport connection, fixate session ID, and force victim to authenticate over same connection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport session IDs\", \"Lab Description\": \"The WebTransport implementation assigns session tokens before authentication. The application [uses connection IDs as session tokens]. To solve: Establish WebTransport connection, fixate session ID, and force victim to authenticate over same connection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter tampering\nDescription: The MFA verification relies on client-supplied state parameters. The application [trusts state parameters without server-side validation]. To solve: Modify state parameter to bypass verification after initial MFA challenge.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter tampering\", \"Lab Description\": \"The MFA verification relies on client-supplied state parameters. The application [trusts state parameters without server-side validation]. To solve: Modify state parameter to bypass verification after initial MFA challenge.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Credential stuffing via HTTP/3 connection reuse\nDescription: The authentication system reuses HTTP/3 connections for multiple requests. The application [maintains session state across requests on same connection]. To solve: Perform credential stuffing by reusing established connections to bypass rate limits.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via HTTP/3 connection reuse\", \"Lab Description\": \"The authentication system reuses HTTP/3 connections for multiple requests. The application [maintains session state across requests on same connection]. To solve: Perform credential stuffing by reusing established connections to bypass rate limits.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm switching vulnerability in REST API\nDescription: The lab's authentication system uses JWTs with flawed algorithm validation. The application accepts unsigned tokens when the algorithm is switched to 'none'. To solve: forge a valid JWT for the admin user by exploiting algorithm confusion.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm switching vulnerability in REST API\", \"Lab Description\": \"The lab's authentication system uses JWTs with flawed algorithm validation. The application accepts unsigned tokens when the algorithm is switched to 'none'. To solve: forge a valid JWT for the admin user by exploiting algorithm confusion.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via referer header in SPA\nDescription: The OAuth implementation leaks authorization codes through referer headers when loading external resources. The application doesn't validate the redirect_uri properly. To solve: steal an OAuth token by intercepting the referer header and gain access to the victim's data.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via referer header in SPA\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through referer headers when loading external resources. The application doesn't validate the redirect_uri properly. To solve: steal an OAuth token by intercepting the referer header and gain access to the victim's data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batching attack on auth mutation\nDescription: The GraphQL endpoint processes authentication mutations in batches without rate limiting. The application fails to track login attempts across batched requests. To solve: perform a credential stuffing attack by sending 1000 password guesses in a single GraphQL batch request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack on auth mutation\", \"Lab Description\": \"The GraphQL endpoint processes authentication mutations in batches without rate limiting. The application fails to track login attempts across batched requests. To solve: perform a credential stuffing attack by sending 1000 password guesses in a single GraphQL batch request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via pre-authenticated JWT in SOAP API\nDescription: The SOAP-based authentication service issues JWTs before email verification is complete. The application doesn't invalidate pre-verification tokens after verification. To solve: fixate a session by obtaining a pre-verification token, completing verification, then using the original token to access the account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via pre-authenticated JWT in SOAP API\", \"Lab Description\": \"The SOAP-based authentication service issues JWTs before email verification is complete. The application doesn't invalidate pre-verification tokens after verification. To solve: fixate a session by obtaining a pre-verification token, completing verification, then using the original token to access the account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The multi-factor authentication flow can be bypassed by manipulating the status parameter in the verification request. The application fails to validate the MFA completion state server-side. To solve: intercept the MFA verification process and modify the status parameter to 'verified' before the code is validated.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow can be bypassed by manipulating the status parameter in the verification request. The application fails to validate the MFA completion state server-side. To solve: intercept the MFA verification process and modify the status parameter to 'verified' before the code is validated.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice authentication\nDescription: The JWT validation service vulnerable to key path traversal via kid header. The application loads verification keys from filesystem without sanitization. To solve: forge admin token by forcing system to use public key from predictable location.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice authentication\", \"Lab Description\": \"The JWT validation service vulnerable to key path traversal via kid header. The application loads verification keys from filesystem without sanitization. To solve: forge admin token by forcing system to use public key from predictable location.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth state parameter CSRF in social login flow\nDescription: The OAuth implementation fails to validate state parameter in callback handler. The application accepts any state value after initial redirect. To solve: craft malicious link that authenticates victim to attacker's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth state parameter CSRF in social login flow\", \"Lab Description\": \"The OAuth implementation fails to validate state parameter in callback handler. The application accepts any state value after initial redirect. To solve: craft malicious link that authenticates victim to attacker's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via JSONP callback parameter\nDescription: The JSONP endpoint leaks session tokens through callback parameter reflection. The application embeds sensitive data in JavaScript responses. To solve: fixate victim's session by crafting malicious JSONP request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JSONP callback parameter\", \"Lab Description\": \"The JSONP endpoint leaks session tokens through callback parameter reflection. The application embeds sensitive data in JavaScript responses. To solve: fixate victim's session by crafting malicious JSONP request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Forwarded-Host\nDescription: The password reset functionality trusts X-Forwarded-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Forwarded-Host\", \"Lab Description\": \"The password reset functionality trusts X-Forwarded-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT x5u header SSRF in banking API\nDescription: The JWT validation vulnerable to SSRF via x5u header fetching external certificates. The application processes x5u URLs without proper validation. To solve: forge admin token by forcing server to fetch verification certificate from attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT x5u header SSRF in banking API\", \"Lab Description\": \"The JWT validation vulnerable to SSRF via x5u header fetching external certificates. The application processes x5u URLs without proper validation. To solve: forge admin token by forcing server to fetch verification certificate from attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via parameter pollution\nDescription: The OAuth token endpoint vulnerable to parameter pollution in redirect_uri. The application processes multiple redirect_uri parameters inconsistently. To solve: steal authorization code by injecting secondary redirect_uri pointing to attacker server.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via parameter pollution\", \"Lab Description\": \"The OAuth token endpoint vulnerable to parameter pollution in redirect_uri. The application processes multiple redirect_uri parameters inconsistently. To solve: steal authorization code by injecting secondary redirect_uri pointing to attacker server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: The WebSocket connection assigns sessions based on handshake headers. The application reuses existing session cookies without regeneration. To solve: fixate victim's session by forcing WebSocket connection with predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"The WebSocket connection assigns sessions based on handshake headers. The application reuses existing session cookies without regeneration. To solve: fixate victim's session by forcing WebSocket connection with predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via Host header\nDescription: The password reset functionality trusts dynamic Host header for link generation. The application doesn't validate host against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via Host header\", \"Lab Description\": \"The password reset functionality trusts dynamic Host header for link generation. The application doesn't validate host against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via x5c header injection\nDescription: The JWT validation accepts arbitrary x5c headers containing embedded certificates. The application doesn't verify certificate chain. To solve: forge admin token by embedding attacker-generated certificate in x5c header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via x5c header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary x5c headers containing embedded certificates. The application doesn't verify certificate chain. To solve: forge admin token by embedding attacker-generated certificate in x5c header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT typ header injection in healthcare API\nDescription: The JWT validation vulnerable to algorithm confusion via typ header manipulation. The application processes tokens with typ=None without proper verification. To solve: forge admin token by switching algorithm to none and removing signature.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT typ header injection in healthcare API\", \"Lab Description\": \"The JWT validation vulnerable to algorithm confusion via typ header manipulation. The application processes tokens with typ=None without proper verification. To solve: forge admin token by switching algorithm to none and removing signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via iframe in SPA\nDescription: The OAuth implementation leaks access tokens through postMessage in embedded iframes. The application doesn't validate message origins in token callbacks. To solve: steal OAuth token by crafting malicious page that intercepts postMessage communications.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through postMessage in embedded iframes. The application doesn't validate message origins in token callbacks. To solve: steal OAuth token by crafting malicious page that intercepts postMessage communications.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket initialization\nDescription: The GraphQL subscription endpoint assigns sessions during websocket connection. The application reuses session cookies from HTTP requests without regeneration. To solve: fixate victim's session by forcing websocket connection with predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket initialization\", \"Lab Description\": \"The GraphQL subscription endpoint assigns sessions during websocket connection. The application reuses session cookies from HTTP requests without regeneration. To solve: fixate victim's session by forcing websocket connection with predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Original-Host header\nDescription: The password reset functionality trusts X-Original-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Original-Host header\", \"Lab Description\": \"The password reset functionality trusts X-Original-Host header for link generation. The application doesn't validate host headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jwk header injection\nDescription: The JWT validation accepts arbitrary jwk headers containing embedded keys. The application doesn't verify key provenance. To solve: forge admin token by embedding attacker-generated public key in jwk header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jwk header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary jwk headers containing embedded keys. The application doesn't verify key provenance. To solve: forge admin token by embedding attacker-generated public key in jwk header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT cty header injection in banking API\nDescription: The JWT validation vulnerable to content type confusion via cty header manipulation. The application processes tokens with cty=text/plain without signature verification. To solve: forge admin token by switching content type and removing signature.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT cty header injection in banking API\", \"Lab Description\": \"The JWT validation vulnerable to content type confusion via cty header manipulation. The application processes tokens with cty=text/plain without signature verification. To solve: forge admin token by switching content type and removing signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebSocket in SPA\nDescription: The OAuth implementation leaks access tokens through WebSocket connection parameters. The application embeds tokens in WebSocket URLs without validation. To solve: steal OAuth token by intercepting WebSocket initialization requests.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebSocket in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebSocket connection parameters. The application embeds tokens in WebSocket URLs without validation. To solve: steal OAuth token by intercepting WebSocket initialization requests.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 push promise\nDescription: The HTTP/2 server pushes session cookies via push promises without proper validation. The application accepts pushed cookies from unauthorized sources. To solve: fixate victim's session by injecting malicious push promises containing predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 push promise\", \"Lab Description\": \"The HTTP/2 server pushes session cookies via push promises without proper validation. The application accepts pushed cookies from unauthorized sources. To solve: fixate victim's session by injecting malicious push promises containing predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Rewrite-URL header\nDescription: The password reset functionality trusts X-Rewrite-URL header for link generation. The application doesn't validate rewrite headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Rewrite-URL header\", \"Lab Description\": \"The password reset functionality trusts X-Rewrite-URL header for link generation. The application doesn't validate rewrite headers against allowed domains. To solve: poison reset link to point to attacker server and capture token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via x5t header injection\nDescription: The JWT validation accepts arbitrary x5t headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing certificate thumbprint in x5t header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via x5t header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary x5t headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing certificate thumbprint in x5t header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg=none bypass in healthcare API\nDescription: The JWT validation accepts unsigned tokens when alg=none is specified in the header. The application fails to properly validate token signatures. To solve: forge an admin token by setting algorithm to none and removing the signature.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg=none bypass in healthcare API\", \"Lab Description\": \"The JWT validation accepts unsigned tokens when alg=none is specified in the header. The application fails to properly validate token signatures. To solve: forge an admin token by setting algorithm to none and removing the signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via Referer header\nDescription: The OAuth implementation leaks authorization codes through Referer headers when loading external resources. The application fails to strip sensitive tokens from Referer headers. To solve: steal an OAuth token by forcing a request to an attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via Referer header\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through Referer headers when loading external resources. The application fails to strip sensitive tokens from Referer headers. To solve: steal an OAuth token by forcing a request to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via GraphQL websocket connection\nDescription: The GraphQL subscription endpoint assigns sessions during websocket initialization without proper validation. The application reuses session IDs from connection parameters. To solve: fixate a victim's session by forcing them to connect with a predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via GraphQL websocket connection\", \"Lab Description\": \"The GraphQL subscription endpoint assigns sessions during websocket initialization without proper validation. The application reuses session IDs from connection parameters. To solve: fixate a victim's session by forcing them to connect with a predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Forwarded-Prefix\nDescription: The password reset functionality trusts X-Forwarded-Prefix header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison the reset link to point to an attacker-controlled domain.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Forwarded-Prefix\", \"Lab Description\": \"The password reset functionality trusts X-Forwarded-Prefix header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison the reset link to point to an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header\nDescription: The JWT validation accepts arbitrary jku headers pointing to external public keys. The application doesn't verify the key server's authenticity. To solve: forge an admin token by hosting a malicious public key and referencing it in the jku header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header\", \"Lab Description\": \"The JWT validation accepts arbitrary jku headers pointing to external public keys. The application doesn't verify the key server's authenticity. To solve: forge an admin token by hosting a malicious public key and referencing it in the jku header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT cnf claim injection in healthcare API\nDescription: The JWT validation vulnerable to key confusion via cnf claim manipulation. The application processes cnf claims without proper verification of key ownership. To solve: forge admin token by injecting malicious cnf claim pointing to attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT cnf claim injection in healthcare API\", \"Lab Description\": \"The JWT validation vulnerable to key confusion via cnf claim manipulation. The application processes cnf claims without proper verification of key ownership. To solve: forge admin token by injecting malicious cnf claim pointing to attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebRTC in SPA\nDescription: The OAuth implementation leaks access tokens through WebRTC ICE candidates. The application embeds tokens in STUN/TURN server credentials without proper sanitization. To solve: steal OAuth token by intercepting WebRTC negotiation messages.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebRTC in SPA\", \"Lab Description\": \"The OAuth implementation leaks access tokens through WebRTC ICE candidates. The application embeds tokens in STUN/TURN server credentials without proper sanitization. To solve: steal OAuth token by intercepting WebRTC negotiation messages.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 early data\nDescription: The HTTP/3 server accepts session cookies in early data (0-RTT) without proper validation. The application reuses session IDs from previous connections. To solve: fixate victim's session by forcing 0-RTT request with predetermined session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 early data\", \"Lab Description\": \"The HTTP/3 server accepts session cookies in early data (0-RTT) without proper validation. The application reuses session IDs from previous connections. To solve: fixate victim's session by forcing 0-RTT request with predetermined session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Password reset poisoning via X-Original-URL header\nDescription: The password reset functionality trusts X-Original-URL header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison reset link to point to attacker-controlled domain.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Password reset poisoning via X-Original-URL header\", \"Lab Description\": \"The password reset functionality trusts X-Original-URL header for link generation without validation. The application constructs reset links using untrusted headers. To solve: poison reset link to point to attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via x5t#S256 header injection\nDescription: The JWT validation accepts arbitrary x5t#S256 headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing SHA-256 certificate thumbprint in x5t#S256 header.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via x5t#S256 header injection\", \"Lab Description\": \"The JWT validation accepts arbitrary x5t#S256 headers containing certificate thumbprints. The application doesn't verify certificate chain integrity. To solve: forge admin token by spoofing SHA-256 certificate thumbprint in x5t#S256 header.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API\nDescription: The lab's authentication system uses JWTs with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for admin user by exploiting signature verification flaws.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API\", \"Lab Description\": \"The lab's authentication system uses JWTs with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for admin user by exploiting signature verification flaws.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via open redirect\nDescription: The OAuth implementation leaks authorization codes through unvalidated redirect URLs. The application fails to verify redirect_uri against whitelisted domains. To solve: steal an OAuth token by chaining an open redirect with the OAuth flow.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via open redirect\", \"Lab Description\": \"The OAuth implementation leaks authorization codes through unvalidated redirect URLs. The application fails to verify redirect_uri against whitelisted domains. To solve: steal an OAuth token by chaining an open redirect with the OAuth flow.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL batching attack on auth endpoint\nDescription: The GraphQL API allows query batching that bypasses rate limiting on authentication attempts. The application processes batched queries sequentially without cumulative rate checks. To solve: brute-force credentials by sending 100 login attempts in a single batch request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL batching attack on auth endpoint\", \"Lab Description\": \"The GraphQL API allows query batching that bypasses rate limiting on authentication attempts. The application processes batched queries sequentially without cumulative rate checks. To solve: brute-force credentials by sending 100 login attempts in a single batch request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via subdomain cookie scope\nDescription: The application sets session cookies without proper domain restrictions, allowing fixation attacks across subdomains. The vulnerable component accepts pre-set session IDs from untrusted subdomains. To solve: fix a session cookie on a subdomain then trick the victim into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via subdomain cookie scope\", \"Lab Description\": \"The application sets session cookies without proper domain restrictions, allowing fixation attacks across subdomains. The vulnerable component accepts pre-set session IDs from untrusted subdomains. To solve: fix a session cookie on a subdomain then trick the victim into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via state parameter manipulation\nDescription: The multi-factor authentication flow relies on client-side state validation. The application fails to verify server-side that the same device completes both authentication steps. To solve: initiate MFA on attacker device then complete on victim device by copying state parameters.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow relies on client-side state validation. The application fails to verify server-side that the same device completes both authentication steps. To solve: initiate MFA on attacker device then complete on victim device by copying state parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice auth\nDescription: The JWT validation service improperly processes kid header values, allowing local file inclusion. The application blindly trusts the kid parameter to load verification keys. To solve: forge a valid admin token by forcing the system to use a predictable local file as the verification key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice auth\", \"Lab Description\": \"The JWT validation service improperly processes kid header values, allowing local file inclusion. The application blindly trusts the kid parameter to load verification keys. To solve: forge a valid admin token by forcing the system to use a predictable local file as the verification key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token swapping via state parameter injection\nDescription: The OAuth implementation fails to properly bind state parameters to session contexts. The application accepts valid tokens with mismatched state values. To solve: intercept another user's OAuth flow and swap their authorization code into your session while maintaining your original state parameter.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token swapping via state parameter injection\", \"Lab Description\": \"The OAuth implementation fails to properly bind state parameters to session contexts. The application accepts valid tokens with mismatched state values. To solve: intercept another user's OAuth flow and swap their authorization code into your session while maintaining your original state parameter.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session prediction via JTI collision in JWT revocation\nDescription: The JWT revocation system uses predictable jti claims that can be brute-forced. The application fails to properly randomize unique token identifiers. To solve: predict valid jti values for active sessions and bypass token revocation checks.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session prediction via JTI collision in JWT revocation\", \"Lab Description\": \"The JWT revocation system uses predictable jti claims that can be brute-forced. The application fails to properly randomize unique token identifiers. To solve: predict valid jti values for active sessions and bypass token revocation checks.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via race condition in verification state\nDescription: The multi-factor authentication system has a race window between verification and session update. The application checks MFA status without proper synchronization. To solve: send parallel requests to exploit the time gap between verification and session marking.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition in verification state\", \"Lab Description\": \"The multi-factor authentication system has a race window between verification and session update. The application checks MFA status without proper synchronization. To solve: send parallel requests to exploit the time gap between verification and session marking.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Credential stuffing via HTTP verb tampering on auth endpoint\nDescription: The authentication endpoint processes credentials differently based on HTTP methods. The application fails to properly validate credentials on HEAD requests while still returning valid session cookies. To solve: perform credential stuffing attacks using HEAD requests to bypass rate limiting.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via HTTP verb tampering on auth endpoint\", \"Lab Description\": \"The authentication endpoint processes credentials differently based on HTTP methods. The application fails to properly validate credentials on HEAD requests while still returning valid session cookies. To solve: perform credential stuffing attacks using HEAD requests to bypass rate limiting.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT claim injection via nested JSON objects\nDescription: The JWT parser incorrectly processes nested JSON objects in claims, allowing privilege escalation. The application fails to properly validate claim structures when performing authorization checks. To solve: inject nested role objects to bypass admin checks while maintaining valid signature.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT claim injection via nested JSON objects\", \"Lab Description\": \"The JWT parser incorrectly processes nested JSON objects in claims, allowing privilege escalation. The application fails to properly validate claim structures when performing authorization checks. To solve: inject nested role objects to bypass admin checks while maintaining valid signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe CSP bypass\nDescription: The OAuth implementation leaks tokens through insecure iframe communication that bypasses CSP protections. The application fails to properly validate message origins in postMessage handlers. To solve: craft malicious page that extracts tokens via iframe contentWindow communication.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe CSP bypass\", \"Lab Description\": \"The OAuth implementation leaks tokens through insecure iframe communication that bypasses CSP protections. The application fails to properly validate message origins in postMessage handlers. To solve: craft malicious page that extracts tokens via iframe contentWindow communication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: The application establishes sessions through WebSocket connections before authentication. The WebSocket handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WS connection then authenticate to hijack the session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"The application establishes sessions through WebSocket connections before authentication. The WebSocket handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WS connection then authenticate to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via time-limited backup code reuse\nDescription: The multi-factor authentication system improperly validates backup codes, allowing unlimited reuse within the expiration window. The application fails to track used backup codes in real-time. To solve: intercept valid backup code and reuse it before server-side invalidation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via time-limited backup code reuse\", \"Lab Description\": \"The multi-factor authentication system improperly validates backup codes, allowing unlimited reuse within the expiration window. The application fails to track used backup codes in real-time. To solve: intercept valid backup code and reuse it before server-side invalidation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via case-insensitive password comparison\nDescription: The authentication system performs case-insensitive password comparison, reducing effective password entropy. The application converts all passwords to lowercase before comparison. To solve: perform credential stuffing with case variations of known passwords.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via case-insensitive password comparison\", \"Lab Description\": \"The authentication system performs case-insensitive password comparison, reducing effective password entropy. The application converts all passwords to lowercase before comparison. To solve: perform credential stuffing with case variations of known passwords.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT public key substitution via jwk header injection\nDescription: The JWT validation endpoint improperly processes jwk header parameters, allowing attackers to specify their own verification keys. The application fails to validate the origin of supplied keys. To solve: forge a valid admin token by injecting a malicious jwk header with attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jwk header injection\", \"Lab Description\": \"The JWT validation endpoint improperly processes jwk header parameters, allowing attackers to specify their own verification keys. The application fails to validate the origin of supplied keys. To solve: forge a valid admin token by injecting a malicious jwk header with attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via insecure redirect_uri wildcards\nDescription: The OAuth implementation accepts overly permissive redirect_uri values containing wildcards, allowing token interception. The application fails to properly validate redirect URLs against registered patterns. To solve: steal authorization codes by registering malicious callback endpoint matching wildcard pattern.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via insecure redirect_uri wildcards\", \"Lab Description\": \"The OAuth implementation accepts overly permissive redirect_uri values containing wildcards, allowing token interception. The application fails to properly validate redirect URLs against registered patterns. To solve: steal authorization codes by registering malicious callback endpoint matching wildcard pattern.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 header compression\nDescription: The application assigns session IDs based on HTTP/2 header values that can be manipulated through compression contexts. The server fails to reset compression contexts between connections. To solve: fixate session ID by manipulating HPACK header compression state.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 header compression\", \"Lab Description\": \"The application assigns session IDs based on HTTP/2 header values that can be manipulated through compression contexts. The server fails to reset compression contexts between connections. To solve: fixate session ID by manipulating HPACK header compression state.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via state parameter reflection\nDescription: The multi-factor authentication flow reflects unvalidated state parameters in successful responses. The application fails to maintain server-side state validation. To solve: bypass MFA by injecting arbitrary state parameters that get reflected back after verification.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via state parameter reflection\", \"Lab Description\": \"The multi-factor authentication flow reflects unvalidated state parameters in successful responses. The application fails to maintain server-side state validation. To solve: bypass MFA by injecting arbitrary state parameters that get reflected back after verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via password hash timing leak\nDescription: The authentication system leaks valid usernames through password hash comparison timing differences. The application uses insecure string comparison for password hashes. To solve: enumerate valid users via timing attacks then perform targeted credential stuffing.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via password hash timing leak\", \"Lab Description\": \"The authentication system leaks valid usernames through password hash comparison timing differences. The application uses insecure string comparison for password hashes. To solve: enumerate valid users via timing attacks then perform targeted credential stuffing.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm confusion via x5u header injection\nDescription: The JWT validation endpoint improperly processes x5u header parameters, allowing algorithm confusion attacks. The application fails to validate certificate chain when loading verification keys from URLs. To solve: forge a valid admin token by injecting malicious x5u header pointing to attacker-controlled public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via x5u header injection\", \"Lab Description\": \"The JWT validation endpoint improperly processes x5u header parameters, allowing algorithm confusion attacks. The application fails to validate certificate chain when loading verification keys from URLs. To solve: forge a valid admin token by injecting malicious x5u header pointing to attacker-controlled public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe referrer policy\nDescription: The OAuth implementation leaks tokens through insecure iframe referrer policies. The application fails to set proper referrer policies on iframe elements containing sensitive tokens. To solve: exfiltrate OAuth tokens by crafting malicious page that reads iframe document.referrer.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe referrer policy\", \"Lab Description\": \"The OAuth implementation leaks tokens through insecure iframe referrer policies. The application fails to set proper referrer policies on iframe elements containing sensitive tokens. To solve: exfiltrate OAuth tokens by crafting malicious page that reads iframe document.referrer.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebTransport protocol\nDescription: The application establishes sessions through WebTransport connections before authentication. The WebTransport handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WebTransport connection then authenticate to hijack the session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebTransport protocol\", \"Lab Description\": \"The application establishes sessions through WebTransport connections before authentication. The WebTransport handshake accepts attacker-provided session identifiers. To solve: fixate session ID during WebTransport connection then authenticate to hijack the session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via biometric replay\nDescription: The multi-factor authentication system accepts replayed biometric verification data. The application fails to implement proper anti-replay protections for biometric authentication. To solve: intercept valid biometric data during authentication and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via biometric replay\", \"Lab Description\": \"The multi-factor authentication system accepts replayed biometric verification data. The application fails to implement proper anti-replay protections for biometric authentication. To solve: intercept valid biometric data during authentication and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via HTTP/3 connection reuse\nDescription: The authentication system improperly reuses HTTP/3 connections for different users. The application fails to properly isolate connection contexts between authentication attempts. To solve: perform credential stuffing by reusing established HTTP/3 connection across multiple authentication attempts.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via HTTP/3 connection reuse\", \"Lab Description\": \"The authentication system improperly reuses HTTP/3 connections for different users. The application fails to properly isolate connection contexts between authentication attempts. To solve: perform credential stuffing by reusing established HTTP/3 connection across multiple authentication attempts.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT alg:none bypass in REST API\nDescription: The lab's authentication system uses JSON Web Tokens with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for the admin user by exploiting this vulnerability.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT alg:none bypass in REST API\", \"Lab Description\": \"The lab's authentication system uses JSON Web Tokens with improper signature validation. The application accepts unsigned tokens when the alg header is set to 'none'. To solve: forge a valid JWT for the admin user by exploiting this vulnerability.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: GraphQL query depth exploitation\nDescription: The GraphQL endpoint lacks proper depth limiting controls, allowing recursive queries that can lead to denial of service or data leakage. The application processes nested queries without restrictions. To solve: craft a recursive query to extract all user data from the database.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL query depth exploitation\", \"Lab Description\": \"The GraphQL endpoint lacks proper depth limiting controls, allowing recursive queries that can lead to denial of service or data leakage. The application processes nested queries without restrictions. To solve: craft a recursive query to extract all user data from the database.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via open redirect\nDescription: The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URIs during token exchange. To solve: steal an OAuth token by crafting a malicious redirect URI and use it to authenticate as another user.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via open redirect\", \"Lab Description\": \"The OAuth implementation has an open redirect vulnerability in the callback URL validation. The application fails to properly validate redirect URIs during token exchange. To solve: steal an OAuth token by crafting a malicious redirect URI and use it to authenticate as another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via JWT in URL fragment\nDescription: The application sets JWT tokens from URL fragments without proper validation, allowing session fixation attacks. The vulnerable endpoint accepts tokens from untrusted sources. To solve: craft a URL with a fixed session token and trick a user into authenticating with it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via JWT in URL fragment\", \"Lab Description\": \"The application sets JWT tokens from URL fragments without proper validation, allowing session fixation attacks. The vulnerable endpoint accepts tokens from untrusted sources. To solve: craft a URL with a fixed session token and trick a user into authenticating with it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via status parameter manipulation\nDescription: The multi-factor authentication flow relies on client-side status parameters that can be manipulated. The application fails to verify MFA completion server-side before granting access. To solve: bypass MFA by modifying the authentication status parameter after initial login.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via status parameter manipulation\", \"Lab Description\": \"The multi-factor authentication flow relies on client-side status parameters that can be manipulated. The application fails to verify MFA completion server-side before granting access. To solve: bypass MFA by modifying the authentication status parameter after initial login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT kid header path traversal in microservice architecture\nDescription: The JWT validation service improperly processes the kid header, allowing path traversal to load arbitrary verification keys. The application trusts unsigned tokens when key loading fails. To solve: forge a valid admin token by forcing the system to use a predictable key file.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT kid header path traversal in microservice architecture\", \"Lab Description\": \"The JWT validation service improperly processes the kid header, allowing path traversal to load arbitrary verification keys. The application trusts unsigned tokens when key loading fails. To solve: forge a valid admin token by forcing the system to use a predictable key file.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth state parameter CSRF with JSONP callback\nDescription: The OAuth implementation accepts state parameters via JSONP callbacks, enabling CSRF attacks. The application fails to validate the state parameter origin during token exchange. To solve: craft a malicious site that steals OAuth tokens via automatic callback execution.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth state parameter CSRF with JSONP callback\", \"Lab Description\": \"The OAuth implementation accepts state parameters via JSONP callbacks, enabling CSRF attacks. The application fails to validate the state parameter origin during token exchange. To solve: craft a malicious site that steals OAuth tokens via automatic callback execution.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via WebSocket handshake\nDescription: The WebSocket connection handshake accepts arbitrary session identifiers, allowing session fixation attacks. The application reuses HTTP session tokens for WebSocket authentication without regeneration. To solve: establish a WebSocket connection with a fixed session ID and trick a user into adopting it.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via WebSocket handshake\", \"Lab Description\": \"The WebSocket connection handshake accepts arbitrary session identifiers, allowing session fixation attacks. The application reuses HTTP session tokens for WebSocket authentication without regeneration. To solve: establish a WebSocket connection with a fixed session ID and trick a user into adopting it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: MFA bypass via race condition\nDescription: The multi-factor authentication endpoint is vulnerable to race conditions during verification state checks. The application uses non-atomic operations to update MFA status. To solve: send parallel verification requests to bypass MFA before the state is finalized.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via race condition\", \"Lab Description\": \"The multi-factor authentication endpoint is vulnerable to race conditions during verification state checks. The application uses non-atomic operations to update MFA status. To solve: send parallel verification requests to bypass MFA before the state is finalized.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL batch queries\nDescription: The GraphQL endpoint allows unlimited batch authentication attempts in a single request. The application fails to implement rate limiting on batched operations. To solve: craft a batch query testing 100+ credential pairs against the login mutation.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL batch queries\", \"Lab Description\": \"The GraphQL endpoint allows unlimited batch authentication attempts in a single request. The application fails to implement rate limiting on batched operations. To solve: craft a batch query testing 100+ credential pairs against the login mutation.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT public key substitution via jku header injection\nDescription: The JWT validation endpoint improperly trusts the jku header to fetch verification keys from external domains. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWKS file and forge admin tokens by injecting your jku endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT public key substitution via jku header injection\", \"Lab Description\": \"The JWT validation endpoint improperly trusts the jku header to fetch verification keys from external domains. The application fails to validate the jku domain against an allowlist. To solve: host a malicious JWKS file and forge admin tokens by injecting your jku endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via iframe CSP bypass\nDescription: The OAuth callback page embeds user-sensitive tokens in URL fragments while having overly permissive CSP headers. The application fails to strip tokens from history.pushState calls. To solve: craft a malicious page that exfiltrates tokens via CSP-bypassed iframe techniques.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via iframe CSP bypass\", \"Lab Description\": \"The OAuth callback page embeds user-sensitive tokens in URL fragments while having overly permissive CSP headers. The application fails to strip tokens from history.pushState calls. To solve: craft a malicious page that exfiltrates tokens via CSP-bypassed iframe techniques.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/2 trailer headers\nDescription: The application processes session identifiers from HTTP/2 trailer headers after main headers, allowing session fixation. The server fails to validate trailer header timing. To solve: craft HTTP/2 requests with malicious session IDs in trailers to override legitimate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/2 trailer headers\", \"Lab Description\": \"The application processes session identifiers from HTTP/2 trailer headers after main headers, allowing session fixation. The server fails to validate trailer header timing. To solve: craft HTTP/2 requests with malicious session IDs in trailers to override legitimate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via WebAuthn replay\nDescription: The WebAuthn implementation fails to properly validate challenge nonces, allowing authentication replay attacks. The server accepts previously used assertion signatures. To solve: intercept a valid WebAuthn assertion and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via WebAuthn replay\", \"Lab Description\": \"The WebAuthn implementation fails to properly validate challenge nonces, allowing authentication replay attacks. The server accepts previously used assertion signatures. To solve: intercept a valid WebAuthn assertion and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL aliases\nDescription: The GraphQL endpoint allows unlimited authentication attempts using query aliases in a single request. The application fails to rate limit aliased operations. To solve: craft a single query with 100+ aliased login attempts to brute-force credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL aliases\", \"Lab Description\": \"The GraphQL endpoint allows unlimited authentication attempts using query aliases in a single request. The application fails to rate limit aliased operations. To solve: craft a single query with 100+ aliased login attempts to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature stripping via nested JSON parser\nDescription: The JWT validation service improperly processes nested JSON structures in token claims, allowing signature verification bypass. The application fails to validate the complete token structure when encountering nested objects. To solve: craft a JWT with nested claims that bypasses signature verification while maintaining admin privileges.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature stripping via nested JSON parser\", \"Lab Description\": \"The JWT validation service improperly processes nested JSON structures in token claims, allowing signature verification bypass. The application fails to validate the complete token structure when encountering nested objects. To solve: craft a JWT with nested claims that bypasses signature verification while maintaining admin privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijacking via dangling callback parameters\nDescription: The OAuth implementation retains callback parameters in client-side storage after authentication, allowing token theft via DOM-based XSS. The application fails to clear sensitive OAuth state from browser storage post-authentication. To solve: craft a malicious page that extracts OAuth tokens from residual callback parameters.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijacking via dangling callback parameters\", \"Lab Description\": \"The OAuth implementation retains callback parameters in client-side storage after authentication, allowing token theft via DOM-based XSS. The application fails to clear sensitive OAuth state from browser storage post-authentication. To solve: craft a malicious page that extracts OAuth tokens from residual callback parameters.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via HTTP/3 early data\nDescription: The application accepts session identifiers in HTTP/3 early data (0-RTT) before TLS handshake completion, allowing session fixation. The server fails to validate session creation timing. To solve: craft HTTP/3 requests with malicious session IDs in early data to override legitimate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via HTTP/3 early data\", \"Lab Description\": \"The application accepts session identifiers in HTTP/3 early data (0-RTT) before TLS handshake completion, allowing session fixation. The server fails to validate session creation timing. To solve: craft HTTP/3 requests with malicious session IDs in early data to override legitimate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via biometric replay\nDescription: The biometric authentication endpoint accepts previously recorded biometric data, allowing replay attacks. The server fails to validate liveness indicators in biometric submissions. To solve: intercept a valid biometric authentication and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via biometric replay\", \"Lab Description\": \"The biometric authentication endpoint accepts previously recorded biometric data, allowing replay attacks. The server fails to validate liveness indicators in biometric submissions. To solve: intercept a valid biometric authentication and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL directive overloading\nDescription: The GraphQL endpoint allows unlimited authentication attempts using query directives in a single request. The application fails to rate limit directive-processed operations. To solve: craft a single query with 100+ directive-modified login attempts to brute-force credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL directive overloading\", \"Lab Description\": \"The GraphQL endpoint allows unlimited authentication attempts using query directives in a single request. The application fails to rate limit directive-processed operations. To solve: craft a single query with 100+ directive-modified login attempts to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT algorithm confusion via key wrapping\nDescription: The JWT endpoint accepts wrapped encryption keys in the header, allowing algorithm confusion attacks. The application fails to validate key wrapping parameters against the specified algorithm. To solve: craft a token with mismatched algorithm declarations to bypass signature verification.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion via key wrapping\", \"Lab Description\": \"The JWT endpoint accepts wrapped encryption keys in the header, allowing algorithm confusion attacks. The application fails to validate key wrapping parameters against the specified algorithm. To solve: craft a token with mismatched algorithm declarations to bypass signature verification.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token leakage via WebTransport session\nDescription: The OAuth implementation stores tokens in WebTransport session state, which persists across origins. The application fails to isolate session storage between domains. To solve: craft a malicious page that accesses the victim's OAuth tokens via WebTransport session inheritance.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via WebTransport session\", \"Lab Description\": \"The OAuth implementation stores tokens in WebTransport session state, which persists across origins. The application fails to isolate session storage between domains. To solve: craft a malicious page that accesses the victim's OAuth tokens via WebTransport session inheritance.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via QUIC connection IDs\nDescription: The application assigns session identifiers based on QUIC connection IDs, which can be predicted. The server fails to use cryptographic randomness for session ID generation. To solve: craft QUIC packets with predetermined connection IDs to fixate sessions.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via QUIC connection IDs\", \"Lab Description\": \"The application assigns session identifiers based on QUIC connection IDs, which can be predicted. The server fails to use cryptographic randomness for session ID generation. To solve: craft QUIC packets with predetermined connection IDs to fixate sessions.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via FIDO2 assertion replay\nDescription: The FIDO2 implementation fails to validate assertion counters, allowing replay attacks. The server accepts previously used authenticator assertions. To solve: intercept a valid FIDO2 assertion and replay it to bypass MFA.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via FIDO2 assertion replay\", \"Lab Description\": \"The FIDO2 implementation fails to validate assertion counters, allowing replay attacks. The server accepts previously used authenticator assertions. To solve: intercept a valid FIDO2 assertion and replay it to bypass MFA.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Credential stuffing via GraphQL @defer directives\nDescription: The GraphQL endpoint processes @defer directives sequentially, allowing unlimited authentication attempts. The application fails to rate limit deferred operations. To solve: craft a query with 100+ deferred login attempts to brute-force credentials.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Credential stuffing via GraphQL @defer directives\", \"Lab Description\": \"The GraphQL endpoint processes @defer directives sequentially, allowing unlimited authentication attempts. The application fails to rate limit deferred operations. To solve: craft a query with 100+ deferred login attempts to brute-force credentials.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering in SOAP-based authentication\nDescription: The authentication system of this app uses JSON Web Tokens (JWTs) for session management via a SOAP API. The backend trusts the 'alg' header in JWTs without enforcing validation. The application decodes the JWT using the algorithm specified in the token header without verifying the signature. To solve: Forge an administrator token and access the admin dashboard endpoint using the SOAP login endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering in SOAP-based authentication\", \"Lab Description\": \"The authentication system of this app uses JSON Web Tokens (JWTs) for session management via a SOAP API. The backend trusts the 'alg' header in JWTs without enforcing validation. The application decodes the JWT using the algorithm specified in the token header without verifying the signature. To solve: Forge an administrator token and access the admin dashboard endpoint using the SOAP login endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in REST-based login\nDescription: This REST API authenticates users by issuing a session cookie. However, it does not invalidate or regenerate the session ID upon successful login. The application accepts a user-supplied session ID via a query parameter and binds it to a user after login. To solve: Fix a session for a victim and use it to hijack their session post-login.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in REST-based login\", \"Lab Description\": \"This REST API authenticates users by issuing a session cookie. However, it does not invalidate or regenerate the session ID upon successful login. The application accepts a user-supplied session ID via a query parameter and binds it to a user after login. To solve: Fix a session for a victim and use it to hijack their session post-login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in third-party login\nDescription: This application allows third-party OAuth login via a vulnerable endpoint that accepts the `redirect_uri` parameter from the user without validation. The application trusts the `email` claim from the OAuth provider without verifying its source. To solve: Exploit the misconfiguration to impersonate the victim via a forged email claim and access their account dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in third-party login\", \"Lab Description\": \"This application allows third-party OAuth login via a vulnerable endpoint that accepts the `redirect_uri` parameter from the user without validation. The application trusts the `email` claim from the OAuth provider without verifying its source. To solve: Exploit the misconfiguration to impersonate the victim via a forged email claim and access their account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Redirection Flow\nDescription: This lab's login flow is vulnerable to session fixation due to improper session regeneration. The application uses a session cookie that is preserved across unauthenticated and authenticated states. To solve: hijack Carlos's authenticated session using a fixed session ID and access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Redirection Flow\", \"Lab Description\": \"This lab's login flow is vulnerable to session fixation due to improper session regeneration. The application uses a session cookie that is preserved across unauthenticated and authenticated states. To solve: hijack Carlos's authenticated session using a fixed session ID and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in GraphQL API Authentication\nDescription: This application uses JWT tokens to authorize users through its GraphQL login mutation. The backend fails to verify the `alg` field properly, allowing a `none` algorithm attack. To solve: forge a JWT to impersonate Carlos and access the admin dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in GraphQL API Authentication\", \"Lab Description\": \"This application uses JWT tokens to authorize users through its GraphQL login mutation. The backend fails to verify the `alg` field properly, allowing a `none` algorithm attack. To solve: forge a JWT to impersonate Carlos and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI Handling\nDescription: This app implements OAuth login using a third-party provider but fails to validate redirect URIs securely. The misconfiguration allows stealing authorization codes via open redirect abuse. To solve: capture Carlosâ€™s OAuth code and use it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Handling\", \"Lab Description\": \"This app implements OAuth login using a third-party provider but fails to validate redirect URIs securely. The misconfiguration allows stealing authorization codes via open redirect abuse. To solve: capture Carlosâ€™s OAuth code and use it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature algorithm confusion in login endpoint\nDescription: The login endpoint of this REST API accepts JWTs for session validation. However, due to misconfigured signature verification, the server improperly accepts unsigned tokens when 'alg' is set to 'none'. The application trusts this token without verifying its signature. To solve: Forge a valid JWT for the admin user and access their account page without knowing the secret key.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature algorithm confusion in login endpoint\", \"Lab Description\": \"The login endpoint of this REST API accepts JWTs for session validation. However, due to misconfigured signature verification, the server improperly accepts unsigned tokens when 'alg' is set to 'none'. The application trusts this token without verifying its signature. To solve: Forge a valid JWT for the admin user and access their account page without knowing the secret key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via cookie reuse in login flow\nDescription: This application sets a session cookie before user authentication, but fails to rotate it post-login. This allows a malicious actor to fix a session ID and later force the victim to use it, enabling full session hijack. To solve: Fix a session ID for Carlos and hijack his session using it.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via cookie reuse in login flow\", \"Lab Description\": \"This application sets a session cookie before user authentication, but fails to rotate it post-login. This allows a malicious actor to fix a session ID and later force the victim to use it, enabling full session hijack. To solve: Fix a session ID for Carlos and hijack his session using it.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration allows account takeover via unvalidated redirect URI\nDescription: This app uses OAuth to authenticate users with a third-party provider. Due to misconfigured redirect URI validation, an attacker can manipulate the redirect_uri parameter to send the authorization code to their own server. To solve: Intercept and steal Carlos's OAuth authorization code and exchange it to access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration allows account takeover via unvalidated redirect URI\", \"Lab Description\": \"This app uses OAuth to authenticate users with a third-party provider. Due to misconfigured redirect URI validation, an attacker can manipulate the redirect_uri parameter to send the authorization code to their own server. To solve: Intercept and steal Carlos's OAuth authorization code and exchange it to access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm bypass in GraphQL mutation\nDescription: The application uses JWT for session management, embedded in a GraphQL mutation API. Due to improper validation of the JWT 'alg' field, an attacker can sign tokens using the 'none' algorithm. The application fails to validate the algorithm properly and trusts any unsigned token. To solve: forge a JWT to impersonate the admin and retrieve their account data.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm bypass in GraphQL mutation\", \"Lab Description\": \"The application uses JWT for session management, embedded in a GraphQL mutation API. Due to improper validation of the JWT 'alg' field, an attacker can sign tokens using the 'none' algorithm. The application fails to validate the algorithm properly and trusts any unsigned token. To solve: forge a JWT to impersonate the admin and retrieve their account data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation via OAuth state reuse\nDescription: The application uses OAuth for SSO login but does not properly validate the OAuth 'state' parameter. This makes it vulnerable to session fixation. The attacker can initiate an OAuth flow and trick the victim into logging in with the attacker's session. To solve: hijack a session and access the victim's dashboard.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via OAuth state reuse\", \"Lab Description\": \"The application uses OAuth for SSO login but does not properly validate the OAuth 'state' parameter. This makes it vulnerable to session fixation. The attacker can initiate an OAuth flow and trick the victim into logging in with the attacker's session. To solve: hijack a session and access the victim's dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: SOAP API session fixation via Set-Cookie override\nDescription: The application uses a SOAP API for authentication and sets session cookies during login. A flaw allows overriding the session identifier via a crafted Set-Cookie header, leading to session fixation. To solve: fix a session for the victim and access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SOAP API session fixation via Set-Cookie override\", \"Lab Description\": \"The application uses a SOAP API for authentication and sets session cookies during login. A flaw allows overriding the session identifier via a crafted Set-Cookie header, leading to session fixation. To solve: fix a session for the victim and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in SOAP Login API\nDescription: The SOAP-based authentication system incorrectly maintains session identifiers across users. The application sets a session cookie during the initial request and does not regenerate it post-login. To solve: Hijack a victim's authenticated session by fixing a known session ID before login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in SOAP Login API\", \"Lab Description\": \"The SOAP-based authentication system incorrectly maintains session identifiers across users. The application sets a session cookie during the initial request and does not regenerate it post-login. To solve: Hijack a victim's authenticated session by fixing a known session ID before login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT signature none algorithm tampering\nDescription: The REST API uses JWT for authentication but does not validate the signature algorithm correctly. The backend accepts tokens with the `alg` header set to `none` and skips signature verification. To solve: Forge an administrative token and access the admin panel.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature none algorithm tampering\", \"Lab Description\": \"The REST API uses JWT for authentication but does not validate the signature algorithm correctly. The backend accepts tokens with the `alg` header set to `none` and skips signature verification. To solve: Forge an administrative token and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration with open redirect and implicit flow\nDescription: The OAuth integration uses the implicit flow without validating redirect URIs properly. This allows token interception via an attacker-controlled domain. To solve: Trick the victim into authorizing on your redirect URI, capture their token, and access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration with open redirect and implicit flow\", \"Lab Description\": \"The OAuth integration uses the implicit flow without validating redirect URIs properly. This allows token interception via an attacker-controlled domain. To solve: Trick the victim into authorizing on your redirect URI, capture their token, and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Pre-Auth Token Reuse in Login Flow\nDescription: The application mishandles session identifiers during the authentication process. It fails to regenerate session IDs upon login, allowing session fixation attacks. The application uses a fixed session cookie across unauthenticated and authenticated states. To solve: Hijack Carlos's session by fixing the session ID before they log in, then access their My Account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Pre-Auth Token Reuse in Login Flow\", \"Lab Description\": \"The application mishandles session identifiers during the authentication process. It fails to regenerate session IDs upon login, allowing session fixation attacks. The application uses a fixed session cookie across unauthenticated and authenticated states. To solve: Hijack Carlos's session by fixing the session ID before they log in, then access their My Account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Key Confusion via Algorithm Downgrade in GraphQL API\nDescription: The app uses JWTs to authorize GraphQL requests but does not enforce strict algorithm checking, accepting tokens signed with 'none'. This allows algorithm confusion where the attacker forges a token using 'none' to impersonate users. To solve: Access the sensitive data node for Carlos by forging a valid-looking JWT.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Key Confusion via Algorithm Downgrade in GraphQL API\", \"Lab Description\": \"The app uses JWTs to authorize GraphQL requests but does not enforce strict algorithm checking, accepting tokens signed with 'none'. This allows algorithm confusion where the attacker forges a token using 'none' to impersonate users. To solve: Access the sensitive data node for Carlos by forging a valid-looking JWT.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Authorization Code Interception via Open Redirect\nDescription: The application integrates with a third-party OAuth provider but lacks validation on the redirect_uri parameter, enabling open redirect attacks. This allows intercepting the authorization code during OAuth login. To solve: Steal Carlos's OAuth authorization code and use it to log in as Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception via Open Redirect\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but lacks validation on the redirect_uri parameter, enabling open redirect attacks. This allows intercepting the authorization code during OAuth login. To solve: Steal Carlos's OAuth authorization code and use it to log in as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Redirection Mechanism\nDescription: The application incorrectly allows pre-authenticated session IDs to persist through login. An attacker can fix a session ID for a victim and hijack the session post-login. The application accepts session IDs via URL query parameters and uses them post-login. To solve: hijack Carlosâ€™s session by fixing a session ID and accessing his account page after login.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Redirection Mechanism\", \"Lab Description\": \"The application incorrectly allows pre-authenticated session IDs to persist through login. An attacker can fix a session ID for a victim and hijack the session post-login. The application accepts session IDs via URL query parameters and uses them post-login. To solve: hijack Carlosâ€™s session by fixing a session ID and accessing his account page after login.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in GraphQL Authorization Header\nDescription: This GraphQL-based API uses JWT for user authentication, but improperly accepts tokens signed with 'alg':'none'. This allows attackers to forge arbitrary tokens. The vulnerable middleware fails to verify the signature when alg=none. To solve: forge an admin JWT and query the adminGraph.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in GraphQL Authorization Header\", \"Lab Description\": \"This GraphQL-based API uses JWT for user authentication, but improperly accepts tokens signed with 'alg':'none'. This allows attackers to forge arbitrary tokens. The vulnerable middleware fails to verify the signature when alg=none. To solve: forge an admin JWT and query the adminGraph.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Redirect URI Handling\nDescription: The application integrates with a third-party OAuth provider but improperly validates the redirect_uri parameter. An attacker can manipulate this parameter to intercept OAuth tokens. The system allows open redirect behavior with a whitelisted domain suffix only. To solve: capture Carlosâ€™s OAuth code via redirect hijack and access his account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Redirect URI Handling\", \"Lab Description\": \"The application integrates with a third-party OAuth provider but improperly validates the redirect_uri parameter. An attacker can manipulate this parameter to intercept OAuth tokens. The system allows open redirect behavior with a whitelisted domain suffix only. To solve: capture Carlosâ€™s OAuth code via redirect hijack and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in SAML SSO login flow\nDescription: This lab simulates a vulnerable Single Sign-On (SSO) integration using SAML. Due to poor session handling during the pre-authentication phase, attackers can fix a session ID before login. The application reuses the existing session after successful SAML login without regenerating a new session ID. To solve: Hijack Carlosâ€™s account session using a pre-fixed session ID.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SAML SSO login flow\", \"Lab Description\": \"This lab simulates a vulnerable Single Sign-On (SSO) integration using SAML. Due to poor session handling during the pre-authentication phase, attackers can fix a session ID before login. The application reuses the existing session after successful SAML login without regenerating a new session ID. To solve: Hijack Carlosâ€™s account session using a pre-fixed session ID.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT none algorithm authentication bypass\nDescription: The application uses JSON Web Tokens (JWTs) for session management. However, the token verification logic does not enforce algorithm validation, allowing an attacker to forge tokens using 'alg: none'. To solve: Forge a valid JWT with admin privileges and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT none algorithm authentication bypass\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. However, the token verification logic does not enforce algorithm validation, allowing an attacker to forge tokens using 'alg: none'. To solve: Forge a valid JWT with admin privileges and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration leaking authorization code to attacker\nDescription: The application uses OAuth for user authentication. It incorrectly allows redirection to arbitrary domains, including those under attacker control. This redirection vulnerability enables the attacker to intercept the authorization code. To solve: Capture Carlosâ€™s authorization code using a malicious redirect URI and exchange it for an access token.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration leaking authorization code to attacker\", \"Lab Description\": \"The application uses OAuth for user authentication. It incorrectly allows redirection to arbitrary domains, including those under attacker control. This redirection vulnerability enables the attacker to intercept the authorization code. To solve: Capture Carlosâ€™s authorization code using a malicious redirect URI and exchange it for an access token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST-based login endpoint\nDescription: The application's login mechanism is vulnerable to session fixation due to session ID reuse. The application does not regenerate the session ID upon successful login. To solve: Fixate the victimâ€™s session ID before they log in, then hijack their session and access their profile page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST-based login endpoint\", \"Lab Description\": \"The application's login mechanism is vulnerable to session fixation due to session ID reuse. The application does not regenerate the session ID upon successful login. To solve: Fixate the victimâ€™s session ID before they log in, then hijack their session and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT 'none' algorithm authentication bypass in GraphQL API\nDescription: The GraphQL login API accepts JWT tokens with 'none' algorithm and skips signature verification. To solve: Forge a JWT with alg=none to impersonate Carlos and access the /graphql profile query.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT 'none' algorithm authentication bypass in GraphQL API\", \"Lab Description\": \"The GraphQL login API accepts JWT tokens with 'none' algorithm and skips signature verification. To solve: Forge a JWT with alg=none to impersonate Carlos and access the /graphql profile query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth token leakage via redirect URI in SOAP-based client\nDescription: The application uses OAuth implicit flow and allows arbitrary redirect URIs. This leads to token leakage when attackers inject malicious redirect URIs. To solve: Extract the victim's access token via a crafted OAuth authorization link, then use it to call a SOAP action on behalf of Carlos.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token leakage via redirect URI in SOAP-based client\", \"Lab Description\": \"The application uses OAuth implicit flow and allows arbitrary redirect URIs. This leads to token leakage when attackers inject malicious redirect URIs. To solve: Extract the victim's access token via a crafted OAuth authorization link, then use it to call a SOAP action on behalf of Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in GraphQL Login Mutation\nDescription: The GraphQL API login endpoint uses a fixed session ID before authentication, allowing session fixation. The application accepts a `sessionid` cookie that is issued before login and preserved after authentication. To solve: Hijack a victim's session by predefining a session ID, tricking them into using it, and authenticating as them.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in GraphQL Login Mutation\", \"Lab Description\": \"The GraphQL API login endpoint uses a fixed session ID before authentication, allowing session fixation. The application accepts a `sessionid` cookie that is issued before login and preserved after authentication. To solve: Hijack a victim's session by predefining a session ID, tricking them into using it, and authenticating as them.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Authentication Bypass via 'none' Algorithm in REST API\nDescription: The application uses JWT tokens for user sessions, but fails to validate the `alg` field. The server accepts JWTs with `alg: none`, allowing unsigned tokens. To solve: Forge a JWT token for the user `carlos` and access the protected profile endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via 'none' Algorithm in REST API\", \"Lab Description\": \"The application uses JWT tokens for user sessions, but fails to validate the `alg` field. The server accepts JWTs with `alg: none`, allowing unsigned tokens. To solve: Forge a JWT token for the user `carlos` and access the protected profile endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Implicit Flow Misconfiguration in SOAP API\nDescription: The app uses an OAuth implicit flow but fails to validate the `aud` (audience) parameter. Attackers can supply their own token intended for a different client ID to gain access. To solve: Forge an access token using a public OAuth tool and access the SOAP profile service.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Misconfiguration in SOAP API\", \"Lab Description\": \"The app uses an OAuth implicit flow but fails to validate the `aud` (audience) parameter. Attackers can supply their own token intended for a different client ID to gain access. To solve: Forge an access token using a public OAuth tool and access the SOAP profile service.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session fixation vulnerability in login response headers\nDescription: The application issues a session identifier before login and does not regenerate it upon successful authentication. The session ID remains constant, allowing fixation attacks. The application stores sessions using cookies. To solve: hijack Carlos's session by fixing a known session ID and using it after they log in.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login response headers\", \"Lab Description\": \"The application issues a session identifier before login and does not regenerate it upon successful authentication. The session ID remains constant, allowing fixation attacks. The application stores sessions using cookies. To solve: hijack Carlos's session by fixing a known session ID and using it after they log in.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in implicit grant redirect\nDescription: The application uses OAuth 2.0 for third-party authentication but accepts arbitrary redirect URIs without validation. Attackers can hijack tokens using a crafted malicious redirect. To solve: intercept Carlosâ€™s OAuth token using a poisoned redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in implicit grant redirect\", \"Lab Description\": \"The application uses OAuth 2.0 for third-party authentication but accepts arbitrary redirect URIs without validation. Attackers can hijack tokens using a crafted malicious redirect. To solve: intercept Carlosâ€™s OAuth token using a poisoned redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Cookie Injection in REST API\nDescription: This lab demonstrates a session fixation vulnerability in a RESTful login system. The backend accepts user-supplied session tokens without regenerating them after authentication. The application reflects session tokens provided in requests, and fails to assign a new one on login. To solve: fixate Carlosâ€™s session, then access his account using the pre-established session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in REST API\", \"Lab Description\": \"This lab demonstrates a session fixation vulnerability in a RESTful login system. The backend accepts user-supplied session tokens without regenerating them after authentication. The application reflects session tokens provided in requests, and fails to assign a new one on login. To solve: fixate Carlosâ€™s session, then access his account using the pre-established session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Tampering in GraphQL API\nDescription: This lab exposes a JWT tampering flaw via the 'none' algorithm in a GraphQL-based authentication endpoint. The JWT is accepted without signature verification when alg=none is used. To solve: Forge a JWT token as 'admin' and access the sensitive adminGraph endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in GraphQL API\", \"Lab Description\": \"This lab exposes a JWT tampering flaw via the 'none' algorithm in a GraphQL-based authentication endpoint. The JWT is accepted without signature verification when alg=none is used. To solve: Forge a JWT token as 'admin' and access the sensitive adminGraph endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Implicit Flow Token Leak via Redirect Manipulation in SOAP Endpoint\nDescription: The application uses OAuth implicit flow and allows arbitrary redirect URIs, exposing access tokens via fragment identifiers to untrusted domains. The SOAP authentication callback endpoint reflects redirect URLs without validation. To solve: Capture Carlos's access token by crafting a malicious redirect URI.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Leak via Redirect Manipulation in SOAP Endpoint\", \"Lab Description\": \"The application uses OAuth implicit flow and allows arbitrary redirect URIs, exposing access tokens via fragment identifiers to untrusted domains. The SOAP authentication callback endpoint reflects redirect URLs without validation. To solve: Capture Carlos's access token by crafting a malicious redirect URI.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Reused Auth Token in SOAP API\nDescription: The application's SOAP-based login system fails to issue new session identifiers upon re-authentication. The application retains the initial session ID for subsequent logins. To solve: exploit session fixation to gain access to the victim's session by tricking them into logging in with a fixed session identifier.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Reused Auth Token in SOAP API\", \"Lab Description\": \"The application's SOAP-based login system fails to issue new session identifiers upon re-authentication. The application retains the initial session ID for subsequent logins. To solve: exploit session fixation to gain access to the victim's session by tricking them into logging in with a fixed session identifier.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Signature Confusion in Authorization Header\nDescription: The application uses a JWKS endpoint to validate JWTs but does not validate the 'kid' field properly. This allows attackers to supply a custom public key and forge tokens. To solve: forge an admin token by injecting a manipulated 'kid' field and supplying your own matching public key.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Signature Confusion in Authorization Header\", \"Lab Description\": \"The application uses a JWKS endpoint to validate JWTs but does not validate the 'kid' field properly. This allows attackers to supply a custom public key and forge tokens. To solve: forge an admin token by injecting a manipulated 'kid' field and supplying your own matching public key.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration via Open Redirect in Redirect URI\nDescription: The application allows arbitrary redirect URIs after OAuth login. This misconfiguration can be abused to steal access tokens. To solve: capture a valid access token for the victim by injecting a malicious redirect_uri that sends the token to your server.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration via Open Redirect in Redirect URI\", \"Lab Description\": \"The application allows arbitrary redirect URIs after OAuth login. This misconfiguration can be abused to steal access tokens. To solve: capture a valid access token for the victim by injecting a malicious redirect_uri that sends the token to your server.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST API login flow\nDescription: This lab's session management is vulnerable to session fixation through insecure handling of session cookies during login. The application sets a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID and force Carlos to authenticate using the attacker-defined session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST API login flow\", \"Lab Description\": \"This lab's session management is vulnerable to session fixation through insecure handling of session cookies during login. The application sets a session cookie before authentication and reuses it post-login without regeneration. To solve: Fixate a session ID and force Carlos to authenticate using the attacker-defined session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via alg=none in GraphQL authentication\nDescription: The GraphQL login endpoint returns a JWT that is improperly validated. The server does not enforce signature verification when the alg field is set to 'none'. To solve: Modify a valid JWT to impersonate Carlos by removing the signature and setting alg to none.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via alg=none in GraphQL authentication\", \"Lab Description\": \"The GraphQL login endpoint returns a JWT that is improperly validated. The server does not enforce signature verification when the alg field is set to 'none'. To solve: Modify a valid JWT to impersonate Carlos by removing the signature and setting alg to none.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Misconfiguration in redirect URI validation\nDescription: The application implements OAuth implicit flow but fails to strictly validate redirect URIs. An attacker can hijack tokens by manipulating the redirect URI to point to a domain they control. To solve: Capture the access token issued for Carlos by hijacking the redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in redirect URI validation\", \"Lab Description\": \"The application implements OAuth implicit flow but fails to strictly validate redirect URIs. An attacker can hijack tokens by manipulating the redirect URI to point to a domain they control. To solve: Capture the access token issued for Carlos by hijacking the redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in SOAP API login flow\nDescription: This lab demonstrates session fixation via SOAP-based authentication. The application reuses an existing session ID after login instead of generating a new one. This allows attackers to fix a session ID before victim login. The SOAP API accepts session tokens via HTTP headers, and the server provides overly verbose XML errors on failed authentication. To solve: fix a session ID, force the victim to authenticate into it, and access their profile page.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in SOAP API login flow\", \"Lab Description\": \"This lab demonstrates session fixation via SOAP-based authentication. The application reuses an existing session ID after login instead of generating a new one. This allows attackers to fix a session ID before victim login. The SOAP API accepts session tokens via HTTP headers, and the server provides overly verbose XML errors on failed authentication. To solve: fix a session ID, force the victim to authenticate into it, and access their profile page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Authentication Bypass via 'none' algorithm in REST API\nDescription: The lab uses JWTs for REST API authentication but does not properly verify the token signature algorithm. The server accepts tokens with 'alg':'none' and does not enforce a secret check. To solve: forge a JWT with 'none' algorithm to impersonate Carlos and access the /api/userinfo endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via 'none' algorithm in REST API\", \"Lab Description\": \"The lab uses JWTs for REST API authentication but does not properly verify the token signature algorithm. The server accepts tokens with 'alg':'none' and does not enforce a secret check. To solve: forge a JWT with 'none' algorithm to impersonate Carlos and access the /api/userinfo endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Code Interception in GraphQL Login Flow\nDescription: The application implements login via OAuth in a GraphQL mutation using the authorization code grant. However, the client doesn't bind the authorization code to the session. An attacker can intercept the code and redeem it on their session to hijack the victim's login. To solve: intercept Carlos's OAuth code and redeem it via GraphQL to impersonate him.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Code Interception in GraphQL Login Flow\", \"Lab Description\": \"The application implements login via OAuth in a GraphQL mutation using the authorization code grant. However, the client doesn't bind the authorization code to the session. An attacker can intercept the code and redeem it on their session to hijack the victim's login. To solve: intercept Carlos's OAuth code and redeem it via GraphQL to impersonate him.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session fixation in SOAP login handler\nDescription: The application's SOAP-based login mechanism does not regenerate session tokens after authentication. The application accepts externally provided session tokens via a JSESSIONID cookie. This allows an attacker to fixate a session ID for a victim prior to authentication. To solve: fixate a session and hijack Carlos's authenticated session using a shared SOAP login channel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in SOAP login handler\", \"Lab Description\": \"The application's SOAP-based login mechanism does not regenerate session tokens after authentication. The application accepts externally provided session tokens via a JSESSIONID cookie. This allows an attacker to fixate a session ID for a victim prior to authentication. To solve: fixate a session and hijack Carlos's authenticated session using a shared SOAP login channel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm tampering in GraphQL login\nDescription: The application uses JWTs signed with HS256 but accepts unsigned JWTs due to improper algorithm checks. The login mutation accepts a token returned in the login response and trusts it without re-verification. To solve: manipulate the JWT's alg claim and gain access to Carlos's protected GraphQL data.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm tampering in GraphQL login\", \"Lab Description\": \"The application uses JWTs signed with HS256 but accepts unsigned JWTs due to improper algorithm checks. The login mutation accepts a token returned in the login response and trusts it without re-verification. To solve: manipulate the JWT's alg claim and gain access to Carlos's protected GraphQL data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth access token leakage in Referer header\nDescription: The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth access token leakage in Referer header\", \"Lab Description\": \"The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: OAuth access token leakage in Referer header\nDescription: The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth access token leakage in Referer header\", \"Lab Description\": \"The application integrates OAuth for login and redirects the user to a third-party site after authentication. However, the OAuth access token is included in the redirect URL, which is then leaked via the Referer header. To solve: intercept the leaked token from the Referer header and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session Fixation via SOAP login flow in Session Management\nDescription: The application processes login sessions through a SOAP-based authentication handler. It fails to regenerate session identifiers upon successful login. The server accepts session IDs via the JSESSIONID cookie and binds them to accounts without invalidation. To solve: fixate a session ID before login and use it to hijack Carlosâ€™s session post-authentication.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via SOAP login flow in Session Management\", \"Lab Description\": \"The application processes login sessions through a SOAP-based authentication handler. It fails to regenerate session identifiers upon successful login. The server accepts session IDs via the JSESSIONID cookie and binds them to accounts without invalidation. To solve: fixate a session ID before login and use it to hijack Carlosâ€™s session post-authentication.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT algorithm confusion in Authorization header in Bearer Token Authentication\nDescription: The API accepts JWT tokens using the Authorization header. It trusts the 'alg' field in the token without verifying if a valid signature is provided. This flaw allows switching from HS256 to 'none' algorithm, effectively bypassing signature validation. To solve: forge a token granting admin access and retrieve Carlosâ€™s profile data.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm confusion in Authorization header in Bearer Token Authentication\", \"Lab Description\": \"The API accepts JWT tokens using the Authorization header. It trusts the 'alg' field in the token without verifying if a valid signature is provided. This flaw allows switching from HS256 to 'none' algorithm, effectively bypassing signature validation. To solve: forge a token granting admin access and retrieve Carlosâ€™s profile data.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth 2.0 token leakage in redirect_uri parameter via Authorization Code Flow\nDescription: The app uses OAuth 2.0 Authorization Code flow for third-party authentication. It fails to validate exact matching of redirect_uri during code-to-token exchange, enabling token hijacking by supplying a malicious redirect URI on callback. To solve: steal Carlosâ€™s access token using an attacker-controlled domain.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth 2.0 token leakage in redirect_uri parameter via Authorization Code Flow\", \"Lab Description\": \"The app uses OAuth 2.0 Authorization Code flow for third-party authentication. It fails to validate exact matching of redirect_uri during code-to-token exchange, enabling token hijacking by supplying a malicious redirect URI on callback. To solve: steal Carlosâ€™s access token using an attacker-controlled domain.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST login flow\nDescription: This application improperly handles session identifiers during the login process. A fixed session cookie provided before authentication is retained after successful login. The application binds authenticated sessions to pre-login identifiers, allowing attackers to force users to authenticate into attacker-controlled sessions. To solve: hijack Carlos's session and access his account dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST login flow\", \"Lab Description\": \"This application improperly handles session identifiers during the login process. A fixed session cookie provided before authentication is retained after successful login. The application binds authenticated sessions to pre-login identifiers, allowing attackers to force users to authenticate into attacker-controlled sessions. To solve: hijack Carlos's session and access his account dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None algorithm bypass in GraphQL login mutation\nDescription: The GraphQL login mutation issues a JWT for session management but fails to enforce signature validation when the 'alg' header is set to 'none'. This misconfiguration allows an attacker to forge arbitrary tokens without knowing the secret key. To solve: forge a JWT for Carlos and access the /graphql me query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None algorithm bypass in GraphQL login mutation\", \"Lab Description\": \"The GraphQL login mutation issues a JWT for session management but fails to enforce signature validation when the 'alg' header is set to 'none'. This misconfiguration allows an attacker to forge arbitrary tokens without knowing the secret key. To solve: forge a JWT for Carlos and access the /graphql me query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect\nDescription: The OAuth flow implemented in the app allows open redirect on the 'redirect_uri' parameter during authorization, enabling attackers to capture tokens issued for other users. To solve: intercept the authorization code for Carlos by crafting a redirect to an attacker-controlled domain, then exchange it for a token and access Carlos's profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect\", \"Lab Description\": \"The OAuth flow implemented in the app allows open redirect on the 'redirect_uri' parameter during authorization, enabling attackers to capture tokens issued for other users. To solve: intercept the authorization code for Carlos by crafting a redirect to an attacker-controlled domain, then exchange it for a token and access Carlos's profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in Login Flow\nDescription: The application fails to invalidate pre-authentication session tokens during login. The application generates a session token upon initial visit and reuses it after login without regenerating it. This allows a malicious user to fix a session ID before the victim logs in. To solve: hijack Carlos's session by fixing a session ID before he authenticates and access his account page.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Login Flow\", \"Lab Description\": \"The application fails to invalidate pre-authentication session tokens during login. The application generates a session token upon initial visit and reuses it after login without regenerating it. This allows a malicious user to fix a session ID before the victim logs in. To solve: hijack Carlos's session by fixing a session ID before he authenticates and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT Tampering in Token Validation\nDescription: The application's login API uses JWTs for authentication but fails to verify the token signature correctly when the 'alg' header is modified. The application accepts unsigned JWTs when the 'alg' is set to 'none'. To solve: tamper with a JWT to escalate privileges and access the admin panel.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in Token Validation\", \"Lab Description\": \"The application's login API uses JWTs for authentication but fails to verify the token signature correctly when the 'alg' header is modified. The application accepts unsigned JWTs when the 'alg' is set to 'none'. To solve: tamper with a JWT to escalate privileges and access the admin panel.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT tampering in Bearer token authentication\nDescription: The application uses stateless JWT-based Bearer tokens for user authentication and authorizes access based on the embedded role claim. The server does not validate the JWT signature properly. To solve: Forge a valid-looking token granting admin access and retrieve the flag from the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering in Bearer token authentication\", \"Lab Description\": \"The application uses stateless JWT-based Bearer tokens for user authentication and authorizes access based on the embedded role claim. The server does not validate the JWT signature properly. To solve: Forge a valid-looking token granting admin access and retrieve the flag from the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session fixation in GraphQL login flow\nDescription: The application uses GraphQL for authentication but fails to issue new session cookies on successful login, allowing session fixation. To solve: Fixate a session ID before login, then authenticate as a privileged user using that session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in GraphQL login flow\", \"Lab Description\": \"The application uses GraphQL for authentication but fails to issue new session cookies on successful login, allowing session fixation. To solve: Fixate a session ID before login, then authenticate as a privileged user using that session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration leaking access tokens\nDescription: The app uses OAuth 2.0 implicit grant for third-party login but exposes access tokens in the URL fragment (#) and reflects them in HTTP responses. To solve: Capture and replay a leaked token to access a protected resource.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration leaking access tokens\", \"Lab Description\": \"The app uses OAuth 2.0 implicit grant for third-party login but exposes access tokens in the URL fragment (#) and reflects them in HTTP responses. To solve: Capture and replay a leaked token to access a protected resource.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session mismanagement in SOAP login API\nDescription: This SOAP-based authentication system exposes session IDs in the SOAP response and accepts reused session tokens. To solve: Reuse an intercepted session ID from a privileged user to access their account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session mismanagement in SOAP login API\", \"Lab Description\": \"This SOAP-based authentication system exposes session IDs in the SOAP response and accepts reused session tokens. To solve: Reuse an intercepted session ID from a privileged user to access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation in login redirect handler\nDescription: The session token is assigned before user authentication and not regenerated upon login. This allows session fixation. The application reuses session tokens post-login, enabling an attacker to set a session for the victim. To solve: Fix a session ID and log in as Carlos to access his dashboard.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation in login redirect handler\", \"Lab Description\": \"The session token is assigned before user authentication and not regenerated upon login. This allows session fixation. The application reuses session tokens post-login, enabling an attacker to set a session for the victim. To solve: Fix a session ID and log in as Carlos to access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT authentication bypass using 'none' algorithm\nDescription: The app uses JWTs for stateless authentication. It does not verify the algorithm used in the token header, allowing attackers to forge tokens by setting the alg field to 'none'. To solve: Access the protected /admin panel as user Carlos without a valid signature.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT authentication bypass using 'none' algorithm\", \"Lab Description\": \"The app uses JWTs for stateless authentication. It does not verify the algorithm used in the token header, allowing attackers to forge tokens by setting the alg field to 'none'. To solve: Access the protected /admin panel as user Carlos without a valid signature.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration via open redirect in redirect_uri\nDescription: The app integrates third-party OAuth for authentication. It incorrectly validates the redirect_uri, allowing attackers to inject malicious URLs that leak access tokens. To solve: Leak Carlosâ€™s access token to your server and access his protected profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration via open redirect in redirect_uri\", \"Lab Description\": \"The app integrates third-party OAuth for authentication. It incorrectly validates the redirect_uri, allowing attackers to inject malicious URLs that leak access tokens. To solve: Leak Carlosâ€™s access token to your server and access his protected profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT algorithm manipulation vulnerability in login API\nDescription: The application uses JSON Web Tokens (JWTs) for session management. It incorrectly trusts the `alg` field in JWT headers without verifying against a server-side whitelist. The backend accepts tokens signed with HMAC even though RS256 is intended. The application exposes its public key. To solve: Gain unauthorized access to the admin panel using a forged JWT by exploiting the algorithm confusion bug.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT algorithm manipulation vulnerability in login API\", \"Lab Description\": \"The application uses JSON Web Tokens (JWTs) for session management. It incorrectly trusts the `alg` field in JWT headers without verifying against a server-side whitelist. The backend accepts tokens signed with HMAC even though RS256 is intended. The application exposes its public key. To solve: Gain unauthorized access to the admin panel using a forged JWT by exploiting the algorithm confusion bug.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation vulnerability in login session handler\nDescription: This application assigns a session cookie prior to login and fails to regenerate it post-authentication. The same session ID remains active across login transitions. To solve: Fixate a session before login, lure a victim to use it, and then hijack their session once they authenticate.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation vulnerability in login session handler\", \"Lab Description\": \"This application assigns a session cookie prior to login and fails to regenerate it post-authentication. The same session ID remains active across login transitions. To solve: Fixate a session before login, lure a victim to use it, and then hijack their session once they authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri validation\nDescription: The application uses OAuth2 implicit flow with a poorly validated redirect_uri parameter. It allows any domain starting with https://trusted.com. The application also reflects access tokens in URL fragments. To solve: Trick the OAuth provider into redirecting the access token to an attacker-controlled domain using an open redirect embedded in a subdomain of https://trusted.com.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri validation\", \"Lab Description\": \"The application uses OAuth2 implicit flow with a poorly validated redirect_uri parameter. It allows any domain starting with https://trusted.com. The application also reflects access tokens in URL fragments. To solve: Trick the OAuth provider into redirecting the access token to an attacker-controlled domain using an open redirect embedded in a subdomain of https://trusted.com.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation vulnerability in REST login endpoint\nDescription: This lab demonstrates a session fixation flaw in a RESTful authentication flow. The application issues session cookies before login, and fails to re-issue them upon authentication. This allows an attacker to predefine a session ID and force a victim to use it. To solve: log in as Carlos by fixing the session ID in advance and hijacking his authenticated session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation vulnerability in REST login endpoint\", \"Lab Description\": \"This lab demonstrates a session fixation flaw in a RESTful authentication flow. The application issues session cookies before login, and fails to re-issue them upon authentication. This allows an attacker to predefine a session ID and force a victim to use it. To solve: log in as Carlos by fixing the session ID in advance and hijacking his authenticated session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering via alg=None in GraphQL-based login\nDescription: This lab simulates a vulnerable GraphQL login where JWTs are not validated correctly. The backend fails to verify the 'alg' parameter in the token header, allowing tampering. To solve: create a JWT token with 'alg' set to 'none' and access Carlos's account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering via alg=None in GraphQL-based login\", \"Lab Description\": \"This lab simulates a vulnerable GraphQL login where JWTs are not validated correctly. The backend fails to verify the 'alg' parameter in the token header, allowing tampering. To solve: create a JWT token with 'alg' set to 'none' and access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth misconfiguration in REST token exchange endpoint\nDescription: This lab uses a flawed OAuth token exchange where the client ID is not verified against the redirect URI. An attacker can use a trusted client ID but redirect to their own URI and gain access. To solve: obtain an access token for Carlos by modifying the OAuth request.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in REST token exchange endpoint\", \"Lab Description\": \"This lab uses a flawed OAuth token exchange where the client ID is not verified against the redirect URI. An attacker can use a trusted client ID but redirect to their own URI and gain access. To solve: obtain an access token for Carlos by modifying the OAuth request.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: MFA bypass via reused token in SOAP authentication flow\nDescription: This SOAP-based login system allows bypassing MFA if a previously issued token is reused. The server does not invalidate tokens after successful login, allowing attackers to replay captured tokens. To solve: reuse a captured MFA token to access Carlos's account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"MFA bypass via reused token in SOAP authentication flow\", \"Lab Description\": \"This SOAP-based login system allows bypassing MFA if a previously issued token is reused. The server does not invalidate tokens after successful login, allowing attackers to replay captured tokens. To solve: reuse a captured MFA token to access Carlos's account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Predictable Session Fixation in REST Authentication Flow\nDescription: The login endpoint sets a session ID based on a user-supplied value. If an attacker can predefine the session ID, they can fix a session for a victim prior to login. The application trusts the session without checking session ownership. To solve: hijack a valid user's session using fixation to access their dashboard.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Predictable Session Fixation in REST Authentication Flow\", \"Lab Description\": \"The login endpoint sets a session ID based on a user-supplied value. If an attacker can predefine the session ID, they can fix a session for a victim prior to login. The application trusts the session without checking session ownership. To solve: hijack a valid user's session using fixation to access their dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL API\nDescription: The application uses JWT for authentication in a GraphQL API, but improperly validates the algorithm field. The backend accepts tokens with 'alg':'none' and skips verification. To solve: forge a JWT token impersonating the admin user and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL API\", \"Lab Description\": \"The application uses JWT for authentication in a GraphQL API, but improperly validates the algorithm field. The backend accepts tokens with 'alg':'none' and skips verification. To solve: forge a JWT token impersonating the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Authorization Code Interception and Token Substitution\nDescription: This app integrates with an external OAuth provider but does not verify that the access token returned belongs to the initiating user. It trusts any access token blindly. To solve: intercept a leaked authorization code and exchange it to impersonate another user.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Authorization Code Interception and Token Substitution\", \"Lab Description\": \"This app integrates with an external OAuth provider but does not verify that the access token returned belongs to the initiating user. It trusts any access token blindly. To solve: intercept a leaked authorization code and exchange it to impersonate another user.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Cookie Injection in REST API Login\nDescription: The REST-based login endpoint is vulnerable to session fixation due to insecure session regeneration. The application reuses the session identifier after successful login, allowing an attacker to predetermine the victim's session ID. To solve: Fixate a session ID, trick the victim to log in using it, and access their authenticated area.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in REST API Login\", \"Lab Description\": \"The REST-based login endpoint is vulnerable to session fixation due to insecure session regeneration. The application reuses the session identifier after successful login, allowing an attacker to predetermine the victim's session ID. To solve: Fixate a session ID, trick the victim to log in using it, and access their authenticated area.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Tampering via None Algorithm in GraphQL Auth Header\nDescription: The GraphQL API uses JWT for authentication but improperly validates the algorithm in the JWT header. The application accepts tokens signed with 'none', allowing tampering without a signature. To solve: Modify a valid token and access the admin dashboard with elevated privileges.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering via None Algorithm in GraphQL Auth Header\", \"Lab Description\": \"The GraphQL API uses JWT for authentication but improperly validates the algorithm in the JWT header. The application accepts tokens signed with 'none', allowing tampering without a signature. To solve: Modify a valid token and access the admin dashboard with elevated privileges.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Misconfiguration via Open Redirect in SOAP SSO Flow\nDescription: The SOAP-based SSO service fails to validate the redirect_uri in OAuth flows. The attacker can manipulate the redirect URI to capture access tokens. To solve: Exploit the redirect URI flaw to leak Carlosâ€™s token and access the My Account page as Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration via Open Redirect in SOAP SSO Flow\", \"Lab Description\": \"The SOAP-based SSO service fails to validate the redirect_uri in OAuth flows. The attacker can manipulate the redirect URI to capture access tokens. To solve: Exploit the redirect URI flaw to leak Carlosâ€™s token and access the My Account page as Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in GraphQL Authentication Flow\nDescription: This application's GraphQL-based login mutation uses a predictable session token before user authentication, which is not regenerated after login. The application accepts a session token passed via a cookie. To solve: hijack Carlosâ€™s session using a fixed token and access the /account endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in GraphQL Authentication Flow\", \"Lab Description\": \"This application's GraphQL-based login mutation uses a predictable session token before user authentication, which is not regenerated after login. The application accepts a session token passed via a cookie. To solve: hijack Carlosâ€™s session using a fixed token and access the /account endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Bypass via None Algorithm in REST Login Flow\nDescription: The REST login system uses JWTs for session authentication but fails to validate the algorithm used. The server accepts tokens signed with 'none' algorithm and does not verify the signature. To solve: craft a fake JWT token impersonating Carlos and access the protected /dashboard endpoint.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Bypass via None Algorithm in REST Login Flow\", \"Lab Description\": \"The REST login system uses JWTs for session authentication but fails to validate the algorithm used. The server accepts tokens signed with 'none' algorithm and does not verify the signature. To solve: craft a fake JWT token impersonating Carlos and access the protected /dashboard endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Redirect URI Manipulation in Authorization Server\nDescription: This application integrates OAuth with a third-party provider but fails to validate exact redirect URIs. An attacker can manipulate the redirect_uri to capture authorization codes. To solve: intercept an OAuth authorization code issued to Carlos and redeem it to access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation in Authorization Server\", \"Lab Description\": \"This application integrates OAuth with a third-party provider but fails to validate exact redirect URIs. An attacker can manipulate the redirect_uri to capture authorization codes. To solve: intercept an OAuth authorization code issued to Carlos and redeem it to access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: GraphQL JWT claim manipulation in token-based authentication\nDescription: The application uses JWT-based authentication within its GraphQL API. JWT tokens are signed using a symmetric secret that can be brute-forced. The application does not verify claims properly during GraphQL authorization. To solve: Gain admin access and query sensitive user data through GraphQL introspection.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"GraphQL JWT claim manipulation in token-based authentication\", \"Lab Description\": \"The application uses JWT-based authentication within its GraphQL API. JWT tokens are signed using a symmetric secret that can be brute-forced. The application does not verify claims properly during GraphQL authorization. To solve: Gain admin access and query sensitive user data through GraphQL introspection.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session fixation via unvalidated session token reuse in REST login\nDescription: The REST-based login system fails to invalidate old session tokens after successful login. Attacker can fix a known session ID and trick victim into using it. To solve: Fix a session ID, perform login with victim credentials, and access their account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session token reuse in REST login\", \"Lab Description\": \"The REST-based login system fails to invalidate old session tokens after successful login. Attacker can fix a known session ID and trick victim into using it. To solve: Fix a session ID, perform login with victim credentials, and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth implicit flow misconfiguration in third-party login integration\nDescription: The app uses OAuth implicit grant flow to log users in via a third-party provider. The redirect URI is vulnerable to open redirect abuse and the state parameter is not validated. To solve: Steal an access token from a victim user using a malicious redirect.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth implicit flow misconfiguration in third-party login integration\", \"Lab Description\": \"The app uses OAuth implicit grant flow to log users in via a third-party provider. The redirect URI is vulnerable to open redirect abuse and the state parameter is not validated. To solve: Steal an access token from a victim user using a malicious redirect.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via SOAP Login Token Mismanagement in Legacy Auth Service\nDescription: The application uses a legacy SOAP-based authentication API that improperly binds session tokens before credential verification. The application generates a session cookie as soon as the login page loads, and this session is not invalidated after a successful login. To solve: Fixate a session ID before login, use it to authenticate as the victim, and access their private profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via SOAP Login Token Mismanagement in Legacy Auth Service\", \"Lab Description\": \"The application uses a legacy SOAP-based authentication API that improperly binds session tokens before credential verification. The application generates a session cookie as soon as the login page loads, and this session is not invalidated after a successful login. To solve: Fixate a session ID before login, use it to authenticate as the victim, and access their private profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT Authentication Bypass via 'none' Algorithm in GraphQL Login\nDescription: This application uses JWTs for user session management via GraphQL login mutation. The backend fails to validate the algorithm field of the JWT. To solve: Tamper with a valid JWT and forge one using 'none' algorithm to impersonate the admin user and access the admin dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Authentication Bypass via 'none' Algorithm in GraphQL Login\", \"Lab Description\": \"This application uses JWTs for user session management via GraphQL login mutation. The backend fails to validate the algorithm field of the JWT. To solve: Tamper with a valid JWT and forge one using 'none' algorithm to impersonate the admin user and access the admin dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Implicit Flow Token Theft via Redirect URI Manipulation in Login Flow\nDescription: The application uses an implicit OAuth flow and accepts user-defined redirect URIs without proper validation. The access token is leaked via the URI fragment. To solve: Inject a malicious redirect URI to steal the access token of the victim and access their account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Implicit Flow Token Theft via Redirect URI Manipulation in Login Flow\", \"Lab Description\": \"The application uses an implicit OAuth flow and accepts user-defined redirect URIs without proper validation. The access token is leaked via the URI fragment. To solve: Inject a malicious redirect URI to steal the access token of the victim and access their account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session fixation via unvalidated session reuse in SOAP login endpoint\nDescription: The application's SOAP-based login mechanism incorrectly reuses session identifiers without regenerating them upon authentication. The session ID can be pre-set and persists across login boundaries. The application stores session tokens before authentication and promotes them post-login without invalidation. To solve: Hijack a victim's session by planting a known session ID and force them to authenticate.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session fixation via unvalidated session reuse in SOAP login endpoint\", \"Lab Description\": \"The application's SOAP-based login mechanism incorrectly reuses session identifiers without regenerating them upon authentication. The session ID can be pre-set and persists across login boundaries. The application stores session tokens before authentication and promotes them post-login without invalidation. To solve: Hijack a victim's session by planting a known session ID and force them to authenticate.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT signature confusion with none algorithm in GraphQL login\nDescription: The application uses a JWT token for authentication and accepts tokens passed via a GraphQL mutation. The backend does not enforce algorithm constraints, allowing a forged token using the `none` algorithm. The application accepts unsigned tokens if the header specifies 'alg':'none'. To solve: Forge a valid token for the user 'carlos' and access the GraphQL-protected dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT signature confusion with none algorithm in GraphQL login\", \"Lab Description\": \"The application uses a JWT token for authentication and accepts tokens passed via a GraphQL mutation. The backend does not enforce algorithm constraints, allowing a forged token using the `none` algorithm. The application accepts unsigned tokens if the header specifies 'alg':'none'. To solve: Forge a valid token for the user 'carlos' and access the GraphQL-protected dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth client misconfiguration leads to token reuse\nDescription: The application relies on a third-party OAuth 2.0 provider for authentication. However, it reuses access tokens across clients without verifying the `aud` or `client_id` fields. This enables attackers to use access tokens from other apps to impersonate users. To solve: Acquire a valid OAuth token from your test app and reuse it on this site to gain access to Carlosâ€™s account.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth client misconfiguration leads to token reuse\", \"Lab Description\": \"The application relies on a third-party OAuth 2.0 provider for authentication. However, it reuses access tokens across clients without verifying the `aud` or `client_id` fields. This enables attackers to use access tokens from other apps to impersonate users. To solve: Acquire a valid OAuth token from your test app and reuse it on this site to gain access to Carlosâ€™s account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation via Cookie Injection in OAuth Callback Handler\nDescription: This lab's OAuth callback implementation is vulnerable to session fixation. The application does not regenerate the session upon login via OAuth. Instead, it continues using any pre-authentication session value. To solve: Fixate a session ID, then log in as the victim via OAuth, and hijack their session using the fixed cookie.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation via Cookie Injection in OAuth Callback Handler\", \"Lab Description\": \"This lab's OAuth callback implementation is vulnerable to session fixation. The application does not regenerate the session upon login via OAuth. Instead, it continues using any pre-authentication session value. To solve: Fixate a session ID, then log in as the victim via OAuth, and hijack their session using the fixed cookie.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL Login API\nDescription: This lab uses JSON Web Tokens to protect user sessions. However, the backend incorrectly allows tokens signed with the 'none' algorithm. To solve: Forge a JWT with 'alg':'none' and impersonate the victim user to access their GraphQL profile.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL Login API\", \"Lab Description\": \"This lab uses JSON Web Tokens to protect user sessions. However, the backend incorrectly allows tokens signed with the 'none' algorithm. To solve: Forge a JWT with 'alg':'none' and impersonate the victim user to access their GraphQL profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: SOAP API Key Leakage via Verbose Debugging in MFA Bypass\nDescription: This lab uses a SOAP API for multi-factor authentication. The application logs sensitive API keys in verbose mode. By inducing an error during MFA verification, an attacker can leak the victimâ€™s API key. To solve: Trigger the debug message, extract the key, and bypass MFA for the victim.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"SOAP API Key Leakage via Verbose Debugging in MFA Bypass\", \"Lab Description\": \"This lab uses a SOAP API for multi-factor authentication. The application logs sensitive API keys in verbose mode. By inducing an error during MFA verification, an attacker can leak the victimâ€™s API key. To solve: Trigger the debug message, extract the key, and bypass MFA for the victim.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in REST API session management\nDescription: The application uses predictable session tokens stored in a REST cookie without invalidation upon login. The vulnerable login process does not reset the session token after authentication. To solve: Fixate a session and hijack Carlos's authenticated session using the same token.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in REST API session management\", \"Lab Description\": \"The application uses predictable session tokens stored in a REST cookie without invalidation upon login. The vulnerable login process does not reset the session token after authentication. To solve: Fixate a session and hijack Carlos's authenticated session using the same token.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Bypass in GraphQL auth mutation\nDescription: The application uses JWT to protect a GraphQL mutation-based login but accepts the 'none' algorithm for tokens. To solve: Forge a valid token by removing the signature and gain access to the admin GraphQL endpoint.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Bypass in GraphQL auth mutation\", \"Lab Description\": \"The application uses JWT to protect a GraphQL mutation-based login but accepts the 'none' algorithm for tokens. To solve: Forge a valid token by removing the signature and gain access to the admin GraphQL endpoint.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth token hijack via open redirect URI\nDescription: The application uses OAuth 2.0 for authentication, but the token redirect URI is improperly validated. This allows attackers to hijack access tokens. To solve: Craft a redirect URI to leak Carlos's token and use it to access protected resources.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth token hijack via open redirect URI\", \"Lab Description\": \"The application uses OAuth 2.0 for authentication, but the token redirect URI is improperly validated. This allows attackers to hijack access tokens. To solve: Craft a redirect URI to leak Carlos's token and use it to access protected resources.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: 2FA bypass via duplicate parameters in SOAP login request\nDescription: A SOAP-based login API expects a 2FA code, but fails when multiple <2faCode> elements are submitted. The first one is ignored, and the second is trusted. To solve: Inject duplicate 2FA parameters and force authentication without a valid code.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"2FA bypass via duplicate parameters in SOAP login request\", \"Lab Description\": \"A SOAP-based login API expects a 2FA code, but fails when multiple <2faCode> elements are submitted. The first one is ignored, and the second is trusted. To solve: Inject duplicate 2FA parameters and force authentication without a valid code.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: Session Fixation in legacy SOAP endpoint\nDescription: The application uses a legacy SOAP authentication endpoint vulnerable to session fixation. The session ID can be preset and is accepted post-login. The application does not regenerate session tokens upon authentication. To solve: fix a session ID, authenticate as Carlos, and access his dashboard.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in legacy SOAP endpoint\", \"Lab Description\": \"The application uses a legacy SOAP authentication endpoint vulnerable to session fixation. The session ID can be preset and is accepted post-login. The application does not regenerate session tokens upon authentication. To solve: fix a session ID, authenticate as Carlos, and access his dashboard.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT tampering in GraphQL login resolver\nDescription: The GraphQL login resolver issues JWT tokens signed with the 'none' algorithm when 'alg' is tampered in the header. The backend uses a misconfigured JWT library that does not enforce algorithm validation. To solve: craft a JWT with 'alg':'none', impersonate Carlos, and access /profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT tampering in GraphQL login resolver\", \"Lab Description\": \"The GraphQL login resolver issues JWT tokens signed with the 'none' algorithm when 'alg' is tampered in the header. The backend uses a misconfigured JWT library that does not enforce algorithm validation. To solve: craft a JWT with 'alg':'none', impersonate Carlos, and access /profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth misconfiguration in redirect_uri\nDescription: The application implements OAuth Implicit Grant but fails to validate redirect_uri strictly. It allows open redirect injection, enabling token capture. To solve: trick the auth server to redirect Carlos's token to your server and access his profile.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth misconfiguration in redirect_uri\", \"Lab Description\": \"The application implements OAuth Implicit Grant but fails to validate redirect_uri strictly. It allows open redirect injection, enabling token capture. To solve: trick the auth server to redirect Carlos's token to your server and access his profile.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session ID leakage in verbose debug logs\nDescription: The application exposes internal debug logs via a REST endpoint. These logs contain session tokens in plaintext due to poor log filtering. To solve: extract Carlosâ€™s session ID from logs and use it to access /my-account.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session ID leakage in verbose debug logs\", \"Lab Description\": \"The application exposes internal debug logs via a REST endpoint. These logs contain session tokens in plaintext due to poor log filtering. To solve: extract Carlosâ€™s session ID from logs and use it to access /my-account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: Session Fixation in Legacy Cookie Management via REST Login\nDescription: The application uses legacy cookie-based session management without proper regeneration of session identifiers after login. The session cookie is issued pre-authentication and persists after login without changes. To solve: Fixate a session ID pre-login, then log in as the victim using that ID to hijack their session.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in Legacy Cookie Management via REST Login\", \"Lab Description\": \"The application uses legacy cookie-based session management without proper regeneration of session identifiers after login. The session cookie is issued pre-authentication and persists after login without changes. To solve: Fixate a session ID pre-login, then log in as the victim using that ID to hijack their session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: JWT None Algorithm Tampering in GraphQL Login Token\nDescription: The application uses JWTs for authentication with user-supplied tokens via Authorization headers. The token signature verification logic fails to enforce a valid signing algorithm. To solve: Forge a JWT using 'alg':'none' and impersonate the victim by submitting it to a protected GraphQL query.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT None Algorithm Tampering in GraphQL Login Token\", \"Lab Description\": \"The application uses JWTs for authentication with user-supplied tokens via Authorization headers. The token signature verification logic fails to enforce a valid signing algorithm. To solve: Forge a JWT using 'alg':'none' and impersonate the victim by submitting it to a protected GraphQL query.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: OAuth Redirect URI Manipulation in REST Authorization Flow\nDescription: The application integrates OAuth for login via a third-party provider. However, the redirect_uri parameter is not properly validated during the authorization flow. To solve: Manipulate the redirect_uri to point to an attacker-controlled page and capture the authorization code to impersonate Carlos.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Redirect URI Manipulation in REST Authorization Flow\", \"Lab Description\": \"The application integrates OAuth for login via a third-party provider. However, the redirect_uri parameter is not properly validated during the authorization flow. To solve: Manipulate the redirect_uri to point to an attacker-controlled page and capture the authorization code to impersonate Carlos.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
{"prompt": "Lab: Session Fixation in SOAP-based Login Endpoint\nDescription: This lab's SOAP-based login API suffers from a session fixation vulnerability due to insecure session token handling. The application assigns a session ID before user authentication and does not renew it after login, allowing attackers to hijack user sessions. To solve: hijack Carlos's session and access his account page.\nDifficulty: Easy\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"Session Fixation in SOAP-based Login Endpoint\", \"Lab Description\": \"This lab's SOAP-based login API suffers from a session fixation vulnerability due to insecure session token handling. The application assigns a session ID before user authentication and does not renew it after login, allowing attackers to hijack user sessions. To solve: hijack Carlos's session and access his account page.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Easy\"}"}
{"prompt": "Lab: JWT Tampering in GraphQL Login Token Handling\nDescription: The application's GraphQL login system uses JWTs for session management but fails to validate the algorithm securely. The JWT library accepts tokens signed with 'alg':'none', allowing an attacker to forge tokens. To solve: forge a valid JWT to impersonate Carlos and access his account.\nDifficulty: Medium\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"JWT Tampering in GraphQL Login Token Handling\", \"Lab Description\": \"The application's GraphQL login system uses JWTs for session management but fails to validate the algorithm securely. The JWT library accepts tokens signed with 'alg':'none', allowing an attacker to forge tokens. To solve: forge a valid JWT to impersonate Carlos and access his account.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Medium\"}"}
{"prompt": "Lab: OAuth Misconfiguration in Authorization Code Flow\nDescription: The application uses OAuth with an external provider, but the authorization code is not properly bound to the client ID. This allows attackers to inject a stolen code into the REST /oauth-callback endpoint. To solve: perform an authorization code injection to hijack Carlos's OAuth session.\nDifficulty: Hard\nVuln: Authentication\n\nWrite concise step-by-step instructions that demonstrate the vulnerability and guide a student to exploit it safely in a sandbox environment.", "target": "{\"Lab scenario\": \"OAuth Misconfiguration in Authorization Code Flow\", \"Lab Description\": \"The application uses OAuth with an external provider, but the authorization code is not properly bound to the client ID. This allows attackers to inject a stolen code into the REST /oauth-callback endpoint. To solve: perform an authorization code injection to hijack Carlos's OAuth session.\", \"Vulnerability name\": \"Authentication\", \"Difficulty Level\": \"Hard\"}"}
