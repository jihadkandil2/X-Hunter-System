
{
  "name": "SQL",
  "labs": [
   {
        "labScenario": "Session fixation via predictable session ID in URL",
        "labDescription": "This application uses a custom session ID passed via the URL as a GET parameter. The backend sets the session without validating ownership, enabling an attacker to force a session ID on a victim before login. To solve: fix a session for Carlos, trick him into logging in, then reuse the session ID to hijack his account.",
        "labLevel": "Hard",
        "SolutionSteps": [
            "Use Burp Suite to generate a new session by visiting /login?session_id=attacker123.",
            "Copy the generated login URL and craft a phishing link targeting Carlos with the fixed session_id.",
            "Assume Carlos logs in with the provided session ID, which remains active.",
            "After login, reuse the same session_id=attacker123 from a different browser using Postman to access /my-account.",
            "Confirm session hijack by accessing Carlosâ€™s account page or seeing personalized information."
        ],
        "vulnerabilityName": "Authentication",
        "srcCode": "const express = require('express'); const app = express(); const bodyParser = require('body-parser'); app.use(bodyParser.urlencoded({ extended: false })); const sessions = {}; const users = [{ username: 'carlos', password: 'letmein' }]; app.get('/login', (req, res) => { const sid = req.query.session_id; if (!sid) return res.send('No session ID provided'); sessions[sid] = null; res.send('<form action=\"/auth?session_id=' + sid + '\" method=\"POST\"><input name=\"username\"><input name=\"password\"><button>Login</button></form>'); }); app.post('/auth', (req, res) => { const { username, password } = req.body; const sid = req.query.session_id; const user = users.find(u => u.username === username && u.password === password); if (user && sid) { sessions[sid] = user.username; res.redirect('/my-account?session_id=' + sid); } else { res.send('Invalid'); } }); app.get('/my-account', (req, res) => { const sid = req.query.session_id; if (sessions[sid]) { res.send('Welcome back, ' + sessions[sid]); } else { res.send('Access denied'); } }); app.listen(4000, () => console.log('Session Fixation Lab running'));",
        "payloads": [
            "http://victim-site.com/login?session_id=attacker123",
            "http://victim-site.com/my-account?session_id=attacker123"
        ]
    }
   ]
}