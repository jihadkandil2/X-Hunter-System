"Generate [number] unique cybersecurity lab entries in JSON format following this exact structure. Focus on creating diverse solution paths that match specific vulnerability exploitation contexts:

{
    \"Lab scenario\": \"[Application Context] [Vulnerability Type] in [Vulnerability Location]\",
    \"Lab Description\": \"[Detailed technical explanation of vulnerable component and exploitation constraints] The application [specific vulnerable behavior]. To solve: [clear exploitation goal requiring multi-step analysis(successfull criteria)].\",
    \"Difficulty Level\": \"[Appropriate Difficulty of that lab]\",
    \"Solution Steps\": [
        \"[Tool-Assisted Reconnaissance Step]\",
        \"[Vulnerability Validation Technique]\",
        \"[Payload Crafting/Injection Method]\", 
        \"[Exploitation Refinement Process]\",
        \"[Verification/Post-Exploitation Action]\"
    ],
    \"Vulnerability name\": \"[SQL injection|Cross-site scripting|Authentication]\",
    \"srcCode\": \"[Language-specific vulnerable code snippet]\" 
}

Key Requirements:
1. Solution Steps Must:
   - Use real tools (Burp Suite, sqlmap, OWASP ZAP, Postman)
   - Include specific payload variations:
     • SQLi: Boolean-based, time-based, UNION, out-of-band
     • XSS: Stored/DOM/Reflected variants with modern bypasses
     • Auth: JWT flaws, OAuth misconfigurations, credential stuffing
   - Follow logical exploit progression:
     1. Vulnerability identification
     2. Proof-of-concept development
     3. Full exploitation
     4. System compromise
     5. Cleanup/obfuscation

2. Contextual Alignment:
   - Application Types: Variations of (E-commerce, Social Media, Banking, Healthcare, Blog, Banking portal, IoT dashboard, CMS, API gateway) 
   - Vulnerability Locations:
     • SQLi: ORDER BY clauses, GROUP BY, HAVING conditions
     • XSS: PDF generators, HTTP headers, WebSocket messages
     • Auth: MFA bypass, session fixation, JWT tampering

3. Code Snippet Guidelines:
   - Include vulnerable patterns in Node.js, Python Flask, PHP Laravel
   - Show secure code commented out as contrast
   - Add vulnerable debugging features (error leakage, verbose logging)

4. Difficulty Scaling:
   - Easy: Direct injections with clear feedback
   - Medium: Requires parameter manipulation/chaining
   - Hard: Blind exploitation needing inference/automation

Example Authentication Flaw Entry:
{
    \"Lab scenario\": \"Banking portal session fixation vulnerability\",
    \"Lab Description\": \"The application assigns session cookies during unauthenticated visits and maintains them post-login. Attackers can pre-set session IDs to hijack authenticated sessions.\nTo solve: Fixate a session cookie and capture user credentials.\",
    \"Difficulty Level\": \"Hard\",
    \"Solution Steps\": [
        \"1. Intercept anonymous GET /banking/login request",
        \"2. Inject Set-Cookie: sessionid=ATTACKER_SESSION via Repeater\",
        \"3. Generate phishing link with fixed session parameter\",
        \"4. Monitor server logs for sessionid=ATTACKER_SESSION usage\",
        \"5. Replay authenticated requests with captured session\" 
    ],
    \"Vulnerability name\": \"Authentication\",
    \"srcCode\": \"// Vulnerable session initiation (Python Flask)\n@app.route('/login')\ndef login():\n    resp = make_response(render_template('login.html'))\n    if not request.cookies.get('sessionid'):\n        resp.set_cookie('sessionid', generate_weak_id()) # Fixed value\n    return resp\" 
}

Generate entries with:
- 40% SQLi (split: 50% union-based, 30% boolean-blind, 20% time-based)
- 35% XSS (split: 40% DOM-based, 40% stored, 20% mutation events)
- 25% Auth (split: 60% session management, 30% JWT, 10% OAuth)
- Progressive difficulty chains within vulnerability types
- Real-world bypass techniques (e.g., polyglot XSS, SQLi filter evasion)
- Mixed HTTP methods/API formats (GraphQL, REST, SOAP)"