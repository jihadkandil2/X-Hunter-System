[
    {
        "Lab scenario": "Exploiting Ruby deserialization using a documented gadget chain",
        "Lab Description": "This lab uses a serialization-based session mechanism and the Ruby on Rails framework. There are documented exploits that enable remote code execution via a gadget chain in this framework.\nTo solve the lab, find a documented exploit and adapt it to create a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos's home directory.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
         "src code": "const express = require('express');\nconst serialize = require('node-serialize');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\n// Vulnerable session endpoint using insecure deserialization\napp.post('/session', (req, res) => {\n  const serializedData = req.body.session;\n  try {\n    // Insecure deserialization: directly unserialize the provided session data\n    const sessionObj = serialize.unserialize(serializedData);\n    res.send(`Welcome, ${sessionObj.username}! Your session is active.`);\n  } catch (err) {\n    res.status(400).send('Invalid session data.');\n  }\n});\n\n// Default route\napp.get('/', (req, res) => {\n  res.send('Server is running. Use POST /session to test insecure deserialization.');\n});\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Developing a custom gadget chain for Java deserialization",
        "Lab Description": "This lab uses a serialization-based session mechanism. If you can construct a suitable gadget chain, you can exploit this lab's insecure deserialization to obtain the administrator's password.\nTo solve the lab, gain access to the source code and use it to construct a gadget chain to obtain the administrator's password. Then, log in as the administrator and delete carlos.\nYou can log in to your own account using the following credentials: wiener:peter\nNote that solving this lab requires basic familiarity with another topic that we've covered on the Web Security Academy.",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
        "src code": "const express = require('express');\nconst serialize = require('node-serialize');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\n// Vulnerable session endpoint using insecure deserialization\napp.post('/session', (req, res) => {\n  const serializedData = req.body.session;\n  try {\n    // Insecure deserialization: directly unserialize the provided session data\n    const sessionObj = serialize.unserialize(serializedData);\n    res.send(`Welcome, ${sessionObj.username}! Your session is active.`);\n  } catch (err) {\n    res.status(400).send('Invalid session data.');\n  }\n});\n\n// Default route\napp.get('/', (req, res) => {\n  res.send('Server is running. Use POST /session to test insecure deserialization.');\n});\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Developing a custom gadget chain for PHP deserialization",
        "Lab Description": "This lab uses a serialization-based session mechanism. By deploying a custom gadget chain, you can exploit its insecure deserialization to achieve remote code execution. To solve the lab, delete the morale.txt file from Carlos's home directory.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
        "src code": "const express = require('express');\nconst serialize = require('node-serialize');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\n// Vulnerable session endpoint using insecure deserialization\napp.post('/session', (req, res) => {\n  const serializedData = req.body.session;\n  try {\n    // Insecure deserialization: directly unserialize the provided session data\n    const sessionObj = serialize.unserialize(serializedData);\n    res.send(`Welcome, ${sessionObj.username}! Your session is active.`);\n  } catch (err) {\n    res.status(400).send('Invalid session data.');\n  }\n});\n\n// Default route\napp.get('/', (req, res) => {\n  res.send('Server is running. Use POST /session to test insecure deserialization.');\n});\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Using PHAR deserialization to deploy a custom gadget chain",
        "Lab Description": "This lab does not explicitly use deserialization. However, if you combine PHAR deserialization with other advanced hacking techniques, you can still achieve remote code execution via a custom gadget chain.\nTo solve the lab, delete the morale.txt file from Carlos's home directory.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "src code": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// Default route\napp.get('/', (req, res) => {\n  res.send('Server is running. Try accessing /debug to view the SECRET_KEY.');\n});\n\n// Route to display the SECRET_KEY\napp.get('/debug', (req, res) => {\n  const secretKey = process.env.SECRET_KEY || 'SECRET_KEY not set';\n  res.send(`SECRET_KEY: ${secretKey}`);\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});",
        "lab level": "Hard"
      },
      {
        "Lab scenario": "Modifying serialized objects",
        "Lab Description": "This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// Setup session middleware (simulating a PHP serialization-based session mechanism)\napp.use(session({\n  secret: 'insecure_deserialization_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated user database\nconst users = {\n  \"wiener\": { password: \"peter\", role: \"user\" },\n  \"carlos\": { password: \"carlospass\", role: \"user\" },\n  \"admin\": { password: \"adminpass\", role: \"admin\" }\n};\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Modifying Serialized Objects Lab</h1>\n    <p>This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation.</p>\n    <p>To solve the lab, edit the serialized object in your session cookie to impersonate an administrator account and then delete the user carlos.</p>\n    <p>Log in using credentials: <strong>wiener</strong> / <strong>peter</strong>.</p>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Login page route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] && users[username].password === password) {\n    const sessionData = JSON.stringify({ user: username, role: users[username].role });\n    res.cookie('sessionData', sessionData, { httpOnly: false });\n    res.send(`Logged in as ${username}. <a href=\"/session\">View Session</a> | <a href=\"/admin\">Admin Panel</a>`);\n  } else {\n    res.send('Invalid credentials.');\n  }\n});\n\n// Endpoint to view current session data\napp.get('/session', (req, res) => {\n  res.send(`<h1>Session Data</h1><pre>${req.cookies.sessionData || 'No session data.'}</pre>`);\n});\n\n// Admin panel: accessible only if sessionData indicates admin role\napp.get('/admin', (req, res) => {\n  const sessionData = req.cookies.sessionData;\n  if (!sessionData) return res.send('Not logged in.');\n  try {\n    const data = JSON.parse(sessionData);\n    if (data.role === 'admin') {\n      res.send(`\n        <h1>Admin Panel</h1>\n        <p>Welcome, admin!</p>\n        <form method=\"POST\" action=\"/admin/delete-carlos\">\n          <button type=\"submit\">Delete User Carlos</button>\n        </form>\n      `);\n    } else {\n      res.send('Access Denied. You must be an admin to access this page.');\n    }\n  } catch (e) {\n    res.send('Invalid session data.');\n  }\n});\n\n// Admin endpoint to delete user carlos\napp.post('/admin/delete-carlos', (req, res) => {\n  if (users['carlos']) {\n    delete users['carlos'];\n    res.send('User carlos has been deleted.');\n  } else {\n    res.send('User carlos does not exist.');\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Lab running on http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Modifying serialized data types",
        "Lab Description": "This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result. To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// Setup session middleware (simulating a PHP serialization-based session mechanism)\napp.use(session({\n  secret: 'insecure_deserialization_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated user database\nconst users = {\n  \"wiener\": { password: \"peter\", role: \"user\" },\n  \"carlos\": { password: \"carlospass\", role: \"user\" },\n  \"admin\": { password: \"adminpass\", role: \"admin\" }\n};\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Modifying Serialized Data Types Lab</h1>\n    <p>This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass.</p>\n    <p>To solve the lab, edit the serialized object in your session cookie to impersonate an administrator account and then delete the user carlos.</p>\n    <p>Log in using credentials: <strong>wiener</strong> / <strong>peter</strong>.</p>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Login page route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] && users[username].password === password) {\n    const sessionData = JSON.stringify({ user: username, role: users[username].role });\n    res.cookie('sessionData', sessionData, { httpOnly: false });\n    res.send(`Logged in as ${username}. <a href=\"/session\">View Session</a> | <a href=\"/admin\">Admin Panel</a>`);\n  } else {\n    res.send('Invalid credentials.');\n  }\n});\n\n// Endpoint to view current session data\napp.get('/session', (req, res) => {\n  res.send(`<h1>Session Data</h1><pre>${req.cookies.sessionData || 'No session data.'}</pre>`);\n});\n\n// Admin panel: accessible only if sessionData has role 'admin'\napp.get('/admin', (req, res) => {\n  const sessionData = req.cookies.sessionData;\n  if (!sessionData) return res.send('Not logged in.');\n  try {\n    const data = JSON.parse(sessionData);\n    if (data.role === 'admin') {\n      res.send(`\n        <h1>Admin Panel</h1>\n        <p>Welcome, admin!</p>\n        <form method=\"POST\" action=\"/admin/delete-carlos\">\n          <button type=\"submit\">Delete User Carlos</button>\n        </form>\n      `);\n    } else {\n      res.send('Access Denied. You must be an admin to access this page.');\n    }\n  } catch (e) {\n    res.send('Invalid session data.');\n  }\n});\n\n// Admin endpoint to delete user carlos\napp.post('/admin/delete-carlos', (req, res) => {\n  if (users['carlos']) {\n    delete users['carlos'];\n    res.send('User carlos has been deleted.');\n  } else {\n    res.send('User carlos does not exist.');\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Lab running on http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Using application functionality to exploit insecure deserialization",
        "Lab Description": "This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object. To solve the lab, edit the serialized object in the session cookie and use it to delete the morale.txt file from Carlos's home directory.\nYou can log in to your own account using the following credentials: wiener:peter\nYou also have access to a backup account: gregg:rosebud",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// Setup session middleware (simulating a PHP serialization-based session mechanism)\napp.use(session({\n  secret: 'insecure_deserialization_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Setup a simulated \"Carlos home\" directory with a morale.txt file\nconst carlosHome = path.join(__dirname, 'carlos_home');\nif (!fs.existsSync(carlosHome)) {\n  fs.mkdirSync(carlosHome);\n}\nconst moraleFile = path.join(carlosHome, 'morale.txt');\nif (!fs.existsSync(moraleFile)) {\n  fs.writeFileSync(moraleFile, 'Morale text content');\n}\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Arbitrary Object Injection Lab</h1>\n    <p>This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection due to insecure deserialization.</p>\n    <p>To solve the lab, create and inject a malicious serialized object that deletes the <code>morale.txt</code> file from Carlos's home directory.</p>\n    <p>Log in using credentials: <strong>wiener</strong> / <strong>peter</strong>.</p>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Login page route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    const sessionData = JSON.stringify({ user: username, command: \"echo Safe\" });\n    res.cookie(\"sessionData\", sessionData, { httpOnly: false });\n    res.send(`Logged in as ${username}. <a href=\"/process-session\">Process Session</a>`);\n  } else {\n    res.send(\"Invalid credentials.\");\n  }\n});\n\n// Optional: GET route to view current session data\napp.get('/process-session', (req, res) => {\n  const sessionData = req.cookies.sessionData;\n  if (!sessionData) {\n    return res.send(\"No session data found. Please log in.\");\n  }\n  res.send(`\n    <h1>Session Data</h1>\n    <pre>${sessionData}</pre>\n    <p>You can modify this cookie in your browser's developer tools and then visit /deserialize to trigger deserialization.</p>\n    <p><a href=\"/deserialize\">Go to Deserialize Endpoint</a></p>\n  `);\n});\n\n// GET route for /deserialize: display a form for payload submission\napp.get('/deserialize', (req, res) => {\n  if (!req.cookies.sessionData) {\n    return res.send(\"Please log in first.\");\n  }\n  res.send(`\n    <h1>Submit Deserialization Payload</h1>\n    <form method=\"POST\" action=\"/deserialize\">\n      <label for=\"payload\">Payload (raw serialized object):</label><br><br>\n      <textarea id=\"payload\" name=\"payload\" rows=\"6\" cols=\"50\" placeholder='{ \"command\": \"echo Exploit executed\" }'></textarea><br><br>\n      <button type=\"submit\">Submit Payload</button>\n    </form>\n  `);\n});\n\n// Vulnerable endpoint: insecure deserialization using eval\napp.post('/deserialize', (req, res) => {\n  if (!req.cookies.sessionData) {\n    return res.send(\"Please log in first.\");\n  }\n  const payload = req.body.payload;\n  try {\n    const deserialized = eval('(' + payload + ')');\n    if (deserialized && deserialized.command) {\n      exec(deserialized.command, (error, stdout, stderr) => {\n        if (error) {\n          console.error(\"Error executing command:\", error.message);\n          return res.status(500).send(\"Command execution error: \" + error.message);\n        }\n        res.send(`Command executed successfully: ${stdout}`);\n      });\n    } else {\n      res.send(\"No command found in payload.\");\n    }\n  } catch (e) {\n    res.send(\"Deserialization error: \" + e.message);\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Lab running on http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Arbitrary object injection in PHP",
        "Lab Description": "This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result. To solve the lab, create and inject a malicious serialized object to delete the morale.txt file from Carlos's home directory. You will need to obtain source code access to solve this lab.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "lab level": "Hard",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// Setup session middleware\napp.use(session({\n  secret: 'insecure_deserialization_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Setup a simulated \"Carlos home\" directory with a morale.txt file\nconst carlosHome = path.join(__dirname, 'carlos_home');\nif (!fs.existsSync(carlosHome)) {\n  fs.mkdirSync(carlosHome);\n}\nconst moraleFile = path.join(carlosHome, 'morale.txt');\nif (!fs.existsSync(moraleFile)) {\n  fs.writeFileSync(moraleFile, 'Morale text content');\n}\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Arbitrary Object Injection Lab</h1>\n    <p>This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection due to insecure deserialization.</p>\n    <p>To solve the lab, create and inject a malicious serialized object that deletes the <code>morale.txt</code> file from Carlos's home directory.</p>\n    <p>Log in using credentials: <strong>wiener</strong> / <strong>peter</strong>.</p>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Login page route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`Welcome, ${username}! <a href=\"/deserialize\">Go to Deserialize Endpoint</a>`);\n  } else {\n    res.send(\"Invalid credentials.\");\n  }\n});\n\n// GET route for /deserialize (payload submission form)\napp.get('/deserialize', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  res.send(`\n    <h1>Submit Deserialization Payload</h1>\n    <form method=\"POST\" action=\"/deserialize\">\n      <label for=\"payload\">Payload (raw serialized object):</label><br><br>\n      <textarea id=\"payload\" name=\"payload\" rows=\"6\" cols=\"50\" placeholder='{ \"command\": \"echo Exploit executed\" }'></textarea><br><br>\n      <button type=\"submit\">Submit Payload</button>\n    </form>\n  `);\n});\n\n// Vulnerable deserialization endpoint\napp.post('/deserialize', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  const payload = req.body.payload;\n  try {\n    const deserialized = eval('(' + payload + ')');\n    if (deserialized && deserialized.command) {\n      exec(deserialized.command, (error, stdout, stderr) => {\n        if (error) {\n          console.error(\"Error executing command:\", error.message);\n          return res.status(500).send(\"Command execution error: \" + error.message);\n        }\n        res.send(`Command executed successfully: ${stdout}`);\n      });\n    } else {\n      res.send(\"No command found in payload.\");\n    }\n  } catch (e) {\n    res.send(\"Deserialization error: \" + e.message);\n  }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Exploiting Java deserialization with Apache Commons",
        "Lab Description": "This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don't have source code access, you can still exploit this lab using pre-built gadget chains.\nTo solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos's home directory.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization",
        "Lab Level": "Easy",
        "src code": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Middleware to simulate authentication\napp.use((req, res, next) => {\n    req.user = { username: 'wiener' }; // Simulated logged-in user\n    next();\n});\n\n// Route to serve the debug page\napp.get('/debug', (req, res) => {\n    if (req.user && req.user.username === 'wiener') {\n        res.send(`\n            <h1>Debug Page</h1>\n            <p>SECRET_KEY: ${process.env.SECRET_KEY}</p>\n        `);\n    } else {\n        res.status(403).send('Forbidden');\n    }\n});\n\n// Home route\napp.get('/', (req, res) => {\n    res.send('Welcome to the Express App!');\n});\n\napp.listen(port, () => {\n    console.log(`App listening at http://localhost:${port}`);\n});"
      },
      {
        "Lab scenario": "Exploiting PHP deserialization with a pre-built gadget chain",
        "Lab Description": "This lab has a serialization-based session mechanism that uses a signed cookie. It also uses a common PHP framework. Although you don't have source code access, you can still exploit this lab's insecure deserialization using pre-built gadget chains.\nTo solve the lab, identify the target framework then use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, work out how to generate a valid signed cookie containing your malicious object. Finally, pass this into the website to delete the morale.txt file from Carlos's home directory.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Insecure deserialization"
      }
]