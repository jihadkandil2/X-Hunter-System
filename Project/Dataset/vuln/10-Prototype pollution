[
    {
        "Lab scenario": "Client-side prototype pollution via browser APIs",
        "Lab Description": "This lab is vulnerable to DOM XSS via client-side prototype pollution. The website's developers have noticed a potential gadget and attempted to patch it. However, you can bypass the measures they've taken.\nTo solve the lab:\nYou can solve this lab manually in your browser, or use DOM Invader to help you.\nThis lab is based on real-world vulnerabilities discovered by PortSwigger Research. For more details, check out Widespread prototype pollution gadgets by Gareth Heyes.",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
        "src code": "const express = require('express'); const app = express(); app.use(express.static('public')); app.get('/simulate', (req, res) => { const input = req.query.payload; try { const payloadObj = JSON.parse(input); if (payloadObj.__proto__) { res.send('Potential prototype pollution detected!'); } else { res.send('Payload received safely.'); } } catch (err) { res.status(400).send('Invalid input.'); } }); const PORT = 3000; app.listen(PORT, () => { console.log(`Server running at http://localhost:3000`); });"
      },
      {
        "Lab scenario": "DOM XSS via client-side prototype pollution",
        "Lab Description": "This lab is vulnerable to DOM XSS via client-side prototype pollution. To solve the lab:\nYou can solve this lab manually in your browser, or use DOM Invader to help you.",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
         "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\nconst db = new sqlite3.Database(':memory:');\n\n// Create tables\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)\");\n  db.run(\"INSERT INTO users (username, password) VALUES ('admin', 'admin123')\");\n});\n\napp.get('/', (req, res) => {\n  res.send('<h1>DOM XSS via Prototype Pollution</h1><p>Test by manipulating object properties via malicious inputs.</p>');\n});\n\napp.post('/pollute', (req, res) => {\n  const userInput = req.body;\n  if (userInput.__proto__) {\n    Object.setPrototypeOf({}, userInput);\n  }\n  res.send('Potential prototype pollution detected!');\n});\n\napp.listen(3000, () => {\n  console.log('Lab running at http://localhost:3000');\n});"
      },
      {
        "Lab scenario": "DOM XSS via an alternative prototype pollution vector",
        "Lab Description": "This lab is vulnerable to DOM XSS via client-side prototype pollution. To solve the lab:\nYou can solve this lab manually in your browser, or use DOM Invader to help you.",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
        "src code": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('DOM XSS via Prototype Pollution Lab');\n});\n\napp.listen(3000, () => {\n  console.log('Lab running on http://localhost:3000');\n});"
      },
      {
        "Lab scenario": "Client-side prototype pollution via flawed sanitization",
        "Lab Description": "This lab is vulnerable to DOM XSS via client-side prototype pollution. Although the developers have implemented measures to prevent prototype pollution, these can be easily bypassed.\nTo solve the lab:",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
        "src code": "const express = require('express'); const app = express(); app.use(express.json()); app.post('/pollute', (req, res) => { const input = req.body; try { if (input.hasOwnProperty('__proto__')) { res.send('Potential prototype pollution detected!'); } else { res.send('Payload processed safely.'); } } catch (err) { res.status(400).send('Invalid input.'); } }); const PORT = 3000; app.listen(PORT, () => { console.log(`Server running at http://localhost:3000`); });"
      },
      {
        "Lab scenario": "Client-side prototype pollution in third-party libraries",
        "Lab Description": "This lab is vulnerable to DOM XSS via client-side prototype pollution. This is due to a gadget in a third-party library, which is easy to miss due to the minified source code. Although it's technically possible to solve this lab manually, we recommend using DOM Invader as this will save you a considerable amount of time and effort.\nTo solve the lab:\nThis lab is based on real-world vulnerabilities discovered by PortSwigger Research. For more details, check out Widespread prototype pollution gadgets by Gareth Heyes.",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
        "src code": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Prototype Pollution Lab');\n});\n\napp.listen(3000, () => {\n  console.log('Lab running on http://localhost:3000');\n});"
      },
      {
        "Lab scenario": "Privilege escalation via server-side prototype pollution",
        "Lab Description": "This lab is built on Node.js and the Express framework. It is vulnerable to server-side prototype pollution because it unsafely merges user-controllable input into a server-side JavaScript object. This is simple to detect because any polluted properties inherited via the prototype chain are visible in an HTTP response.\nTo solve the lab:\nYou can log in to your own account with the following credentials: wiener:peter",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
        "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); let userRoles = { wiener: 'user' }; app.post('/login', (req, res) => { const { username, password } = req.body; if (username === 'wiener' && password === 'peter') { const responseObj = {}; Object.assign(responseObj, req.body); if (responseObj.__proto__ && responseObj.__proto__.role === 'admin') { res.send('Privilege escalation detected! You have admin rights.'); } else { res.send('Welcome, you have user access.'); } } else { res.status(401).send('Invalid credentials.'); } }); app.listen(3000, () => { console.log('Lab running at http://localhost:3000'); });"
      },
      {
        "Lab scenario": "Detecting server-side prototype pollution without polluted property reflection",
        "Lab Description": "This lab is built on Node.js and the Express framework. It is vulnerable to server-side prototype pollution because it unsafely merges user-controllable input into a server-side JavaScript object.\nTo solve the lab, confirm the vulnerability by polluting Object.prototype in a way that triggers a noticeable but non-destructive change in the server's behavior. As this lab is designed to help you practice non-destructive detection techniques, you don't need to progress to exploitation.\nYou can log in to your own account with the following credentials: wiener:peter",
        "Vulnerability name": "Prototype pollution",
        "lab level": "Medium",
          "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'prototype_detection_lab_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// For detection, set a default property on Object.prototype\nif (Object.prototype.message === undefined) {\n  Object.prototype.message = \"Server is safe\";\n}\n\n// Login page route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`Welcome, ${username}! <a href=\"/admin\">Go to Admin Panel</a> | <a href=\"/check\">Check Server Message</a>`);\n  } else {\n    res.send(\"Invalid credentials.\");\n  }\n});\n\n// Vulnerable update endpoint to merge user input into Object.prototype\napp.post('/update', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  const payload = req.body.payload;\n  try {\n    const userInput = JSON.parse(payload);\n    if (userInput.__proto__) {\n      Object.assign(Object.prototype, userInput.__proto__);\n    } else {\n      Object.assign(Object.prototype, userInput);\n    }\n    res.send(\"Configuration updated successfully.\");\n  } catch (e) {\n    res.send(\"Invalid JSON payload.\");\n  }\n});\n\n// Endpoint to check the effect of prototype pollution\napp.get('/check', (req, res) => {\n  res.send(`<h1>Server Message: ${{}.message}</h1>`);\n});\n\n// Root route with instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Prototype Pollution Detection Lab</h1>\n    <p>This lab demonstrates a vulnerability where unsafely merging user input into Object.prototype can change the default behavior.</p>\n    <ul>\n      <li>Log in using: <strong>wiener</strong> / <strong>peter</strong></li>\n      <li>Submit a payload to <code>/update</code> that pollutes Object.prototype. For example: <code>{ \"__proto__\": { \"message\": \"Polluted!\" } }</code></li>\n      <li>Then visit <code>/check</code> to see if the server message changes from \"Server is safe\" to \"Polluted!\"</li>\n      <li><a href=\"/login\">Login Here</a></li>\n    </ul>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Bypassing flawed input filters for server-side prototype pollution",
        "Lab Description": "This lab is built on Node.js and the Express framework. It is vulnerable to server-side prototype pollution because it unsafely merges user-controllable input into a server-side JavaScript object.\nTo solve the lab:\nYou can log in to your own account with the following credentials: wiener:peter",
        "Vulnerability name": "Prototype pollution",
          "lab level": "Hard",
            "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst { exec } = require('child_process');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'prototype_pollution_lab_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Basic user database\nconst users = {\n  \"wiener\": { password: \"peter\", role: \"admin\" },\n  \"carlos\": { password: \"carlospass\", role: \"user\" }\n};\n\n// Login page route\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] && users[username].password === password) {\n    req.session.user = username;\n    res.send(`Welcome, ${username}! <a href=\"/admin\">Go to Admin Panel</a>`);\n  } else {\n    res.send(\"Invalid credentials.\");\n  }\n});\n\n// Admin panel route\napp.get('/admin', (req, res) => {\n  if (!req.session.user || users[req.session.user].role !== 'admin') {\n    return res.send(\"Access Denied.\");\n  }\n  res.send(`\n    <h1>Admin Panel</h1>\n    <p>You have admin privileges.</p>\n    <form method=\"POST\" action=\"/admin/update-config\">\n      <label for=\"config\">Update Config (JSON):</label><br>\n      <input type=\"text\" id=\"config\" name=\"config\" placeholder='e.g., { \"command\": \"rm -rf /home/carlos\" }'><br><br>\n      <button type=\"submit\">Update Config and Execute</button>\n    </form>\n    <p>Hint: The input filter blocks \"__proto__\". Use alternative key names to bypass it.</p>\n  `);\n});\n\n// Vulnerable endpoint: unsafely merge user input into a config object\napp.post('/admin/update-config', (req, res) => {\n  if (!req.session.user || users[req.session.user].role !== 'admin') {\n    return res.send(\"Access Denied.\");\n  }\n  let config = { command: \"echo Safe\" };\n  const userInput = req.body.config;\n  if (userInput.includes(\"__proto__\")) {\n    return res.send(\"Input not allowed.\");\n  }\n  try {\n    const userConfig = JSON.parse(userInput);\n    Object.assign(config, userConfig);\n  } catch (e) {\n    return res.send(\"Invalid input format.\");\n  }\n  exec(config.command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(\"Error executing command:\", error.message);\n      return res.status(500).send(\"Command execution error: \" + error.message);\n    }\n    res.send(`Command executed: ${stdout}`);\n  });\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Prototype Pollution Lab - Bypassing Flawed Input Filters</h1>\n    <p>This lab demonstrates a vulnerability in which unsanitized merging of user input into a configuration object allows prototype pollution.</p>\n    <ul>\n      <li>Log in using: <strong>wiener</strong> / <strong>peter</strong></li>\n      <li>Access the Admin Panel at <a href=\"/admin\">/admin</a> to update the configuration.</li>\n      <li>Bypass the input filter (which blocks \"__proto__\") using alternative key names.</li>\n      <li>For example, update the config to set a dangerous command (e.g., <code>rm -rf /home/carlos</code>).</li>\n    </ul>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Remote code execution via server-side prototype pollution",
        "Lab Description": "This lab is built on Node.js and the Express framework. It is vulnerable to server-side prototype pollution because it unsafely merges user-controllable input into a server-side JavaScript object.\nDue to the configuration of the server, it's possible to pollute Object.prototype in such a way that you can inject arbitrary system commands that are subsequently executed on the server.\nTo solve the lab:\nIn this lab, you already have escalated privileges, giving you access to admin functionality. You can log in to your own account with the following credentials: wiener:peter",
        "Vulnerability name": "Prototype pollution",
          "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst { spawn } = require('child_process');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Vulnerable merge function\nconst deepMerge = (target, source) => {\n  for (const key in source) {\n    if (typeof target[key] === 'object' && typeof source[key] === 'object') {\n      deepMerge(target[key], source[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n\n// Root route with UI\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Prototype Pollution Lab</h1>\n    <form action=\"/login\" method=\"POST\">\n      <input type=\"text\" name=\"username\" placeholder=\"Username\">\n      <input type=\"password\" name=\"password\" placeholder=\"Password\">\n      <button>Login</button>\n    </form>\n    <h2>Admin Action</h2>\n    <form onsubmit=\"sendAdminPayload(event)\">\n      <input type=\"text\" id=\"payload\" placeholder='{\"__proto__\": {...}}'>\n      <button>Submit</button>\n    </form>\n    <script>\n      function sendAdminPayload(e) {\n        e.preventDefault();\n        const payload = document.getElementById('payload').value;\n        fetch('/admin', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ config: JSON.parse(payload) })\n        })\n        .then(res => res.text())\n        .then(data => alert(data));\n      }\n    </script>\n  `);\n});\n\n// Vulnerable admin endpoint\napp.post('/admin', (req, res) => {\n  const userConfig = req.body.config || {};\n  const baseConfig = { debugMode: false };\n  \n  const mergedConfig = deepMerge({}, baseConfig);\n  deepMerge(mergedConfig, userConfig);\n\n  spawn('node', ['server.js'], {\n    env: mergedConfig.environment || {}\n  });\n\n  res.send('Admin action performed');\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    res.send('Logged in');\n  } else {\n    res.status(401).send('Login failed');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Lab running on http://localhost:3000');\n});",
      "lab level": "hard"
      }
    ,
  {
    "Lab scenario": "Exfiltrating sensitive data via server-side prototype pollution",
    "Lab Description": "This lab is built on Node.js and the Express framework. It is vulnerable to server-side prototype pollution because it unsafely merges user-controllable input into a server-side JavaScript object. Due to the configuration of the server, it's possible to pollute Object.prototype in such a way that you can inject arbitrary system commands that are subsequently executed on the server. To solve the lab: In this lab, you already have escalated privileges, giving you access to admin functionality. You can log in to your own account with the following credentials: wiener:peter",
    "Vulnerability name": "Prototype pollution",
    "lab level": "Hard",
    "src code": "const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); const users = [{ username: 'wiener', password: 'peter', isAdmin: true }]; const secretData = 'Sensitive data: 12345'; app.post('/login', (req, res) => { const { username, password } = req.body; const user = users.find(u => u.username === username && u.password === password); if (user) { res.json({ message: `Welcome, ${username}`, isAdmin: user.isAdmin }); } else { res.status(401).json({ error: 'Invalid credentials' }); } }); app.get('/secret', (req, res) => { res.json({ secret: secretData }); }); app.post('/pollute', (req, res) => { const userInput = req.body; const obj = {}; Object.assign(obj, userInput); if (obj.systemCommand) { const { exec } = require('child_process'); exec(obj.systemCommand, (error, stdout, stderr) => { if (error) { res.status(500).json({ error: stderr }); } else { res.json({ message: 'Command executed successfully', result: stdout }); } }); } else { res.json({ message: 'Object polluted successfully', obj }); } }); const PORT = 4000; app.listen(PORT, () => console.log(`Prototype Pollution Lab running on http://localhost:${PORT}`));"
  }
]