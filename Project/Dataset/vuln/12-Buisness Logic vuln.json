[
   
    {
        "Lab scenario": "Excessive trust in client-side controls",
        "Lab Description": "This lab doesn't adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a \"Lightweight l33t leather jacket\".\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities"
    }
    ,
    {"finished ones:" :"#####################################Completed#############################################################################"} 
    ,
    {
        "Lab scenario": "High-level logic vulnerability",
        "Lab Description": "This lab doesn't adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a \"Lightweight l33t leather jacket\".\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst db = new sqlite3.Database(':memory:');\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)\");\n  db.run(\"INSERT INTO users (username, password) VALUES ('wiener', 'peter')\");\n  db.run(\"CREATE TABLE products (id INTEGER PRIMARY KEY, name TEXT, price INTEGER)\");\n  db.run(\"INSERT INTO products (name, price) VALUES ('Lightweight l33t leather jacket', 500)\");\n});\napp.post('/purchase', (req, res) => {\n  const price = req.body.price;\n  const query = `SELECT * FROM products WHERE price = '${price}'`;\n  db.all(query, [], (err, rows) => {\n    if (rows.length > 0) {\n      res.send(\"Purchase successful\");\n    } else {\n      res.send(\"Invalid price\");\n    }\n  });\n});\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Inconsistent security controls",
        "Lab Description": "This lab's flawed logic allows arbitrary users to access administrative functionality that should only be available to company employees. To solve the lab, access the admin panel and delete the user carlos.",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst db = new sqlite3.Database(':memory:');\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, role TEXT)\");\n  db.run(\"INSERT INTO users (username, role) VALUES ('admin', 'admin')\");\n  db.run(\"INSERT INTO users (username, role) VALUES ('carlos', 'user')\");\n});\napp.get('/admin', (req, res) => {\n  if (req.query.username) {\n    res.send(\"Welcome to the admin panel!\");\n  } else {\n    res.send(\"Access denied.\");\n  }\n});\napp.post('/delete-user', (req, res) => {\n  const username = req.body.username;\n  db.run(`DELETE FROM users WHERE username = '${username}'`);\n  res.send(`User ${username} deleted.`);\n});\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Flawed enforcement of business rules",
        "Lab Description": "This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a \"Lightweight l33t leather jacket\".\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst db = new sqlite3.Database(':memory:');\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, balance INTEGER)\");\n  db.run(\"INSERT INTO users (username, password, balance) VALUES ('wiener', 'peter', 100)\");\n  db.run(\"CREATE TABLE products (id INTEGER PRIMARY KEY, name TEXT, price INTEGER)\");\n  db.run(\"INSERT INTO products (name, price) VALUES ('Lightweight l33t leather jacket', 500)\");\n});\napp.post('/purchase', (req, res) => {\n  const username = req.body.username;\n  const product = req.body.product;\n  db.get(`SELECT balance FROM users WHERE username = '${username}'`, (err, user) => {\n    if (user) {\n      db.get(`SELECT price FROM products WHERE name = '${product}'`, (err, product) => {\n        if (product) {\n          db.run(`UPDATE users SET balance = balance - ${product.price} WHERE username = '${username}'`);\n          res.send(\"Purchase successful\");\n        } else {\n          res.send(\"Product not found\");\n        }\n      });\n    } else {\n      res.send(\"User not found\");\n    }\n  });\n});\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Low-level logic flaw",
        "Lab Description": "This lab doesn't adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a \"Lightweight l33t leather jacket\".\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "easy",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst db = new sqlite3.Database(':memory:');\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, balance INTEGER)\");\n  db.run(\"INSERT INTO users (username, password, balance) VALUES ('wiener', 'peter', 100)\");\n  db.run(\"CREATE TABLE products (id INTEGER PRIMARY KEY, name TEXT, price INTEGER)\");\n  db.run(\"INSERT INTO products (name, price) VALUES ('Lightweight l33t leather jacket', 500)\");\n});\napp.post('/purchase', (req, res) => {\n  const username = req.body.username;\n  const product = req.body.product;\n  const price = req.body.price;\n  db.get(`SELECT balance FROM users WHERE username = '${username}'`, (err, user) => {\n    if (user) {\n      db.run(`UPDATE users SET balance = balance - ${price} WHERE username = '${username}'`);\n      res.send(\"Purchase successful\");\n    } else {\n      res.send(\"User not found\");\n    }\n  });\n});\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Inconsistent handling of exceptional input",
        "Lab Description": "This lab doesn't adequately validate user input. You can exploit a logic flaw in its account registration process to gain access to administrative functionality. To solve the lab, access the admin panel and delete the user carlos.",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst db = new sqlite3.Database(':memory:');\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, role TEXT)\");\n  db.run(\"INSERT INTO users (username, password, role) VALUES ('admin', 'adminpass', 'admin')\");\n  db.run(\"INSERT INTO users (username, password, role) VALUES ('carlos', 'userpass', 'user')\");\n});\napp.post('/register', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const role = req.body.role || 'user';\n  db.run(`INSERT INTO users (username, password, role) VALUES ('${username}', '${password}', '${role}')`);\n  res.send(\"Registration successful\");\n});\napp.get('/admin', (req, res) => {\n  if (req.query.user === 'admin') {\n    res.send(\"Welcome to the admin panel\");\n  } else {\n    res.send(\"Access denied\");\n  }\n});\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Weak isolation on dual-use endpoint",
        "Lab Description": "This lab makes a flawed assumption about the user's privilege level based on their input. As a result, you can exploit the logic of its account management features to gain access to arbitrary users' accounts. To solve the lab, access the administrator account and delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst db = new sqlite3.Database(':memory:');\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, role TEXT)\");\n  db.run(\"INSERT INTO users (username, password, role) VALUES ('admin', 'adminpass', 'admin')\");\n  db.run(\"INSERT INTO users (username, password, role) VALUES ('carlos', 'userpass', 'user')\");\n  db.run(\"INSERT INTO users (username, password, role) VALUES ('wiener', 'peter', 'user')\");\n});\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin') {\n    res.send(\"Welcome Admin\");\n  } else {\n    res.send(`Welcome ${username}`);\n  }\n});\napp.get('/account', (req, res) => {\n  const user = req.query.user;\n  res.send(`Account details for ${user}`);\n});\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Insufficient workflow validation",
        "Lab Description": "This lab makes flawed assumptions about the sequence of events in the purchasing workflow. To solve the lab, exploit this flaw to buy a \"Lightweight l33t leather jacket\".\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "app.post('/purchase', (req, res) => { const user = req.body.user; db.get(\"SELECT balance FROM users WHERE username = ?\", [user], (err, row) => { if (row.balance >= 1337) { db.run(\"UPDATE users SET balance = balance - 1337 WHERE username = ?\", [user]); res.send(\"Purchase successful\"); } else { res.send(\"Insufficient funds\"); } }); });"
      },
      {
        "Lab scenario": "Authentication bypass via flawed state machine",
        "Lab Description": "This lab makes flawed assumptions about the sequence of events in the login process. To solve the lab, exploit this flaw to bypass the lab's authentication, access the admin interface, and delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code":"const express = require('express');const bodyParser = require('body-parser');const app = express();app.use(bodyParser.urlencoded({ extended: true }));let sessions = {};app.post('/login', (req, res) => {  const { username, password } = req.body;  if (username === 'wiener' && password === 'peter') {    sessions[username] = { authenticated: false };    return res.send('Login initialized, please confirm your session.');  }  res.send('Invalid credentials');});app.get('/confirm', (req, res) => {  const username = 'wiener';  if (sessions[username]) {    sessions[username].authenticated = true;    return res.send('Session confirmed. You are now logged in.');  }  res.send('Invalid session');});app.get('/admin', (req, res) => {  if (sessions['wiener'] && sessions['wiener'].authenticated) {    return res.send('Admin access granted. Delete carlos here.');  }  res.send('Access denied');});app.listen(3000, () => console.log('Lab running on http://localhost:3000'));"
      },
      {
        "Lab scenario": "Infinite money logic flaw",
        "Lab Description": "This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a \"Lightweight l33t leather jacket\".\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "app.post('/purchase', (req, res) => {\n  const { item, price } = req.body;\n  const query = `UPDATE users SET balance = balance - ${price} WHERE username = '${req.user}'`;\n  db.run(query, function(err) {\n    if (err) {\n      res.status(500).send(\"Transaction error.\");\n    } else {\n      res.send(\"Purchase successful.\");\n    }\n  });\n});"
      },
      {
        "Lab scenario": "Authentication bypass via encryption oracle",
        "Lab Description": "This lab contains a logic flaw that exposes an encryption oracle to users. To solve the lab, exploit this flaw to gain access to the admin panel and delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "hard",
        "src code": "app.post('/decrypt', (req, res) => {\n  const { ciphertext } = req.body;\n  try {\n    const plaintext = decryptFunction(ciphertext); // Vulnerable function\n    res.send({ plaintext });\n  } catch (error) {\n    res.status(400).send('Invalid input');\n  }\n});"
      } , 
      {
        "Lab scenario": "Bypassing access controls using email address parsing discrepancies",
        "Lab Description": "This lab validates email addresses to prevent attackers from registering addresses from unauthorized domains. There is a parser discrepancy in the validation logic and library used to parse email addresses.\nTo solve the lab, exploit this flaw to register an account and delete carlos.",
        "Vulnerability name": "Business logic vulnerabilities",
        "lab level": "medium",
        "src code": "app.post('/register', (req, res) => {\n  const { email, password } = req.body;\n  if (!email.includes('@trusted.com')) {\n    return res.status(400).send('Unauthorized domain');\n  }\n  db.run(\"INSERT INTO users (email, password) VALUES (?, ?)\", [email, password], (err) => {\n    if (err) {\n      return res.status(500).send('Error registering user');\n    }\n    res.send('Registration successful');\n  });\n});"
      }
]