[
  {
    "Lab scenario": "Unprotected admin functionality",
    "Lab Description": "This lab has an unprotected admin panel.\nSolve the lab by deleting the user carlos.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "easy",
    "src code": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet users = [{ username: 'carlos' }, { username: 'admin' }];\n\napp.get('/admin', (req, res) => {\n  res.json(users);\n});\n\napp.delete('/admin/delete', (req, res) => {\n  const { username } = req.body;\n  users = users.filter(user => user.username !== username);\n  res.send(`Deleted user: ${username}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
  },
  {
    "Lab scenario": "Unprotected admin functionality with unpredictable URL",
    "Lab Description": "This lab has an unprotected admin panel. It's located at an unpredictable location, but the location is disclosed somewhere in the application.\nSolve the lab by accessing the admin panel, and using it to delete the user carlos.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet users = [{ username: 'carlos' }, { username: 'admin' }];\nconst hiddenAdminPath = '/hidden-admin-12345';\n\napp.get('/help', (req, res) => {\n  res.send(`For admin access, visit: ${hiddenAdminPath}`);\n});\n\napp.get(hiddenAdminPath, (req, res) => {\n  res.json(users);\n});\n\napp.delete(`${hiddenAdminPath}/delete`, (req, res) => {\n  const { username } = req.body;\n  users = users.filter(user => user.username !== username);\n  res.send(`Deleted user: ${username}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
  },
  {
    "Lab scenario": "User role controlled by request parameter",
    "Lab Description": "This lab has an admin panel at /admin, which identifies administrators using a forgeable cookie.\nSolve the lab by accessing the admin panel and using it to delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\napp.use(express.json());\napp.use(cookieParser());\n\nlet users = [{ username: 'carlos' }, { username: 'admin' }];\nconst validUsers = { 'wiener': 'peter', 'admin': 'admin123' };\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (validUsers[username] === password) {\n    res.cookie('role', username === 'admin' ? 'admin' : 'user');\n    res.send('Logged in successfully.');\n  } else {\n    res.status(401).send('Invalid credentials.');\n  }\n});\n\napp.get('/admin', (req, res) => {\n  if (req.cookies.role === 'admin') {\n    res.json(users);\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\napp.delete('/admin/delete', (req, res) => {\n  if (req.cookies.role === 'admin') {\n    const { username } = req.body;\n    users = users.filter(user => user.username !== username);\n    res.send(`Deleted user: ${username}`);\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
  },
  {
    "Lab scenario": "User role can be modified in user profile",
    "Lab Description": "This lab has an admin panel at /admin. It's only accessible to logged-in users with a roleid of 2.\nSolve the lab by accessing the admin panel and using it to delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express=require('express'),sqlite3=require('sqlite3').verbose(),bodyParser=require('body-parser'),cookieParser=require('cookie-parser'),app=express();app.use(bodyParser.urlencoded({extended:true}));app.use(cookieParser());const db=new sqlite3.Database(':memory:');db.serialize(()=>{db.run('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, roleid INTEGER)');db.run('INSERT INTO users (username, password, roleid) VALUES ('administrator', 'admin123', 2)');db.run('INSERT INTO users (username, password, roleid) VALUES ('wiener', 'peter', 1)');db.run('INSERT INTO users (username, password, roleid) VALUES ('carlos', 'carlos123', 1)');});app.post('/login',(req,res)=>{const{username,password}=req.body;const query=`SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;db.get(query,[],(err,user)=>{if(err)return res.status(500).send('Error occurred.');if(!user)return res.send('Invalid credentials.');res.cookie('role',user.roleid);res.send(`Welcome, ${username}!`);});});app.post('/update-role',(req,res)=>{const newRole=req.body.roleid;res.cookie('role',newRole);res.send('Role updated successfully.');});app.get('/admin',(req,res)=>{const role=req.cookies.role;if(role==='2'){res.send('<h1>Admin Panel</h1><p>Delete user: carlos</p>');}else{res.status(403).send('Access Denied.');}});const PORT=3000;app.listen(PORT,()=>{console.log(`Lab running on http://localhost:${PORT}`);});"
  },
  {
    "Lab scenario": "User ID controlled by request parameter",
    "Lab Description": "This lab has a horizontal privilege escalation vulnerability on the user account page.\nTo solve the lab, obtain the API key for the user carlos and submit it as the solution.\nYou can log in to your own account using the following credentials: wiener:peter",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express=require('express'),sqlite3=require('sqlite3').verbose(),bodyParser=require('body-parser'),app=express();app.use(bodyParser.urlencoded({extended:true}));const db=new sqlite3.Database(':memory:');db.serialize(()=>{db.run('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, api_key TEXT)');db.run('INSERT INTO users (id, username, password, api_key) VALUES (1, 'wiener', 'peter', 'abc123')');db.run('INSERT INTO users (id, username, password, api_key) VALUES (2, 'carlos', 'secret', 'stolen_key')');});app.post('/login',(req,res)=>{const{username,password}=req.body;const query=`SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;db.get(query,[],(err,row)=>{if(err){res.status(500).send('Login error.');}else if(row){res.json({message:'Login successful',user:row});}else{res.status(401).send('Invalid credentials.');}});});app.get('/account',(req,res)=>{const userId=req.query.id;const query=`SELECT * FROM users WHERE id = '${userId}'`;db.get(query,[],(err,row)=>{if(err){res.status(500).send('Error retrieving account info.');}else{res.json(row);}});});const PORT=3000;app.listen(PORT,()=>{console.log(`Lab running on http://localhost:${PORT}`);});"
  },
  {
    "Lab scenario": "User ID controlled by request parameter, with unpredictable user IDs",
    "Lab Description": "This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with GUIDs.\nTo solve the lab, find the GUID for carlos, then submit his API key as the solution.\nYou can log in to your own account using the following credentials: wiener:peter",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "hard",
    "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst { v4: uuidv4 } = require('uuid');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\nconst db = new sqlite3.Database(':memory:');\n\ndb.serialize(() => {\n  db.run(\"CREATE TABLE users (guid TEXT PRIMARY KEY, username TEXT, password TEXT, api_key TEXT)\");\n  db.run(\"INSERT INTO users (guid, username, password, api_key) VALUES ('\" + uuidv4() + \"', 'wiener', 'peter', 'abc123')\");\n  db.run(\"INSERT INTO users (guid, username, password, api_key) VALUES ('\" + uuidv4() + \"', 'carlos', 'secret', 'stolen_key')\");\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;\n  db.get(query, [], (err, row) => {\n    if (err) {\n      res.status(500).send('Login error.');\n    } else if (row) {\n      res.json({ message: 'Login successful', user: row });\n    } else {\n      res.status(401).send('Invalid credentials.');\n    }\n  });\n});\n\napp.get('/account', (req, res) => {\n  const guid = req.query.guid;\n  const query = `SELECT * FROM users WHERE guid = '${guid}'`;\n  db.get(query, [], (err, row) => {\n    if (err) {\n      res.status(500).send('Error retrieving account info.');\n    } else {\n      res.json(row);\n    }\n  });\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
  },
  {
    "Lab scenario": "User ID controlled by request parameter with data leakage in redirect",
    "Lab Description": "This lab contains an access control vulnerability where sensitive information is leaked in the body of a redirect response.\nTo solve the lab, obtain the API key for the user carlos and submit it as the solution.\nYou can log in to your own account using the following credentials: wiener:peter",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express=require('express'),sqlite3=require('sqlite3').verbose(),bodyParser=require('body-parser'),app=express();app.use(bodyParser.urlencoded({extended:true}));const db=new sqlite3.Database(':memory:');db.serialize(()=>{db.run('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, api_key TEXT)');db.run('INSERT INTO users (username, password, api_key) VALUES ('administrator', 'admin123', 'admin-key-123')');db.run('INSERT INTO users (username, password, api_key) VALUES ('wiener', 'peter', 'user-key-456')');db.run('INSERT INTO users (username, password, api_key) VALUES ('carlos', 'secret', 'carlos-key-789')');});app.get('/redirect',(req,res)=>{const userId=req.query.id;db.get('SELECT api_key FROM users WHERE id = ?',[userId],(err,row)=>{if(row){res.redirect(302,`/account?api_key=${row.api_key}`);}else{res.send('User not found');}});});app.get('/account',(req,res)=>{const apiKey=req.query.api_key;res.send(`Your API Key: ${apiKey}`);});const PORT=3000;app.listen(PORT,()=>{console.log(`Lab running on http://localhost:${PORT}`);});"
  },
  {
    "Lab scenario": "User ID controlled by request parameter with password disclosure",
    "Lab Description": "This lab has user account page that contains the current user's existing password, prefilled in a masked input.\nTo solve the lab, retrieve the administrator's password, then use it to delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst users = { '1': { username: 'administrator', password: 'admin123' }, '2': { username: 'carlos', password: 'secret' } };\napp.get('/account', (req, res) => {\n  const userId = req.query.id;\n  if (users[userId]) {\n    res.send(`<input type='password' value='${users[userId].password}' />`);\n  } else {\n    res.send('User not found');\n  }\n});\napp.listen(3000, () => console.log('Lab running on http://localhost:3000'));"
  },
  {
    "Lab scenario": "Insecure direct object references",
    "Lab Description": "This lab stores user chat logs directly on the server's file system, and retrieves them using static URLs.\nSolve the lab by finding the password for the user carlos, and logging into their account.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\napp.get('/logs/:username', (req, res) => {\n  const filePath = path.join(__dirname, 'logs', req.params.username + '.txt');\n  if (fs.existsSync(filePath)) {\n    res.send(fs.readFileSync(filePath, 'utf8'));\n  } else {\n    res.send('Log not found');\n  }\n});\napp.listen(3000, () => console.log('Lab running on http://localhost:3000'));"
  },
  {
    "Lab scenario": "URL-based access control can be circumvented",
    "Lab Description": "This website has an unauthenticated admin panel at /admin, but a front-end system has been configured to block external access to that path. However, the back-end application is built on a framework that supports the X-Original-URL header.\nTo solve the lab, access the admin panel and delete the user carlos.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "hard",
    "src code": "const express = require('express');\nconst app = express();\napp.use((req, res, next) => {\n  const url = req.headers['x-original-url'] || req.url;\n  if (url === '/admin') {\n    res.send('<h1>Admin Panel</h1><p><a href=\"/delete/carlos\">Delete Carlos</a></p>');\n  } else {\n    next();\n  }\n});\napp.get('/delete/:user', (req, res) => {\n  res.send(`<h1>User ${req.params.user} deleted</h1>`);\n});\napp.listen(3000, () => console.log('Lab running on http://localhost:3000'));"
  },
  {
    "Lab scenario": "Method-based access control can be circumvented",
    "Lab Description": "This lab implements access controls based partly on the HTTP method of requests. You can familiarize yourself with the admin panel by logging in using the credentials administrator:admin.\nTo solve the lab, log in using the credentials wiener:peter and exploit the flawed access controls to promote yourself to become an administrator.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst users = { 'administrator': 'admin', 'wiener': 'peter' };\napp.post('/login', (req, res) => {\n  if (users[req.body.username] === req.body.password) {\n    res.send(`<h1>Welcome, ${req.body.username}</h1><p><a href='/admin'>Admin Panel</a></p>`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\napp.get('/admin', (req, res) => {\n  res.send('<h1>Admin Panel</h1><form action=\"/admin/promote\" method=\"POST\"><button type=\"submit\">Promote User</button></form>');\n});\napp.post('/admin/promote', (req, res) => {\n  res.send('Only administrators can perform this action');\n});\napp.put('/admin/promote', (req, res) => {\n  res.send('<h1>User promoted to administrator</h1>');\n});\napp.listen(3000, () => console.log('Lab running on http://localhost:3000'));"
  },
  {
    "Lab scenario": "Multi-step process with no access control on one step",
    "Lab Description": "This lab has an admin panel with a flawed multi-step process for changing a user's role. You can familiarize yourself with the admin panel by logging in using the credentials administrator:admin.\nTo solve the lab, log in using the credentials wiener:peter and exploit the flawed access controls to promote yourself to become an administrator.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express=require('express'),bodyParser=require('body-parser'),session=require('express-session'),app=express();app.use(bodyParser.urlencoded({extended:true}));app.use(session({secret:'secret',resave:false,saveUninitialized:true}));const users={administrator:{password:'admin',role:'admin'},wiener:{password:'peter',role:'user'}};app.post('/login',(req,res)=>{if(users[req.body.username]&&users[req.body.username].password===req.body.password){req.session.user=req.body.username;req.session.role=users[req.body.username].role;res.send(`<h1>Welcome, ${req.body.username}</h1><p><a href='/admin'>Admin Panel</a></p>`);}else{res.status(401).send('Invalid credentials');}});app.get('/admin',(req,res)=>{if(req.session.role!=='admin')return res.status(403).send('Access denied');res.send('<h1>Admin Panel</h1><form action=\"/admin/select-user\" method=\"POST\"><input type=\"text\" name=\"user\"><button type=\"submit\">Select User</button></form>');});app.post('/admin/select-user',(req,res)=>{req.session.selectedUser=req.body.user;res.send('<h1>Select a role</h1><form action=\"/admin/set-role\" method=\"POST\"><input type=\"text\" name=\"role\"><button type=\"submit\">Change Role</button></form>');});app.post('/admin/set-role',(req,res)=>{users[req.session.selectedUser].role=req.body.role;if(req.session.selectedUser===req.session.user){req.session.role=req.body.role;}res.send('<h1>Role updated</h1>');});app.listen(3000,()=>console.log('Lab running on http://localhost:3000'));"
  },
  {
    "Lab scenario": "Referer-based access control",
    "Lab Description": "This lab controls access to certain admin functionality based on the Referer header. You can familiarize yourself with the admin panel by logging in using the credentials administrator:admin.\nTo solve the lab, log in using the credentials wiener:peter and exploit the flawed access controls to promote yourself to become an administrator.",
    "Vulnerability name": "Access control vulnerabilities",
    "lab level": "medium",
    "src code": "const express=require('express'),session=require('express-session'),bodyParser=require('body-parser'),app=express();app.use(bodyParser.urlencoded({extended:true}));app.use(session({secret:'secret',resave:false,saveUninitialized:true}));const users={wiener:{password:'peter',role:'user'},administrator:{password:'admin',role:'admin'}};app.post('/login',(req,res)=>{const{username,password}=req.body;if(users[username]&&users[username].password===password){req.session.user=username;req.session.role=users[username].role;res.send(`<h1>Welcome, ${username}</h1>`);}else{res.send(\"Invalid credentials.\");}});app.post('/admin/set-role',(req,res)=>{if(req.headers.referer&&req.headers.referer.includes('/admin')){users[req.session.user].role=req.body.role;req.session.role=req.body.role;res.send('<h1>Role updated</h1>');}else{res.status(403).send('Access denied');}});app.get('/admin',(req,res)=>{if(req.session.role==='admin'){res.send('<h1>Admin Panel</h1>');}else{res.status(403).send('Access denied');}});app.listen(3000,()=>console.log('Lab running on http://localhost:3000'));"
  }
]