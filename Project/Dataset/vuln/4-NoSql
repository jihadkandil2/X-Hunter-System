[
    {
        "Lab scenario": "Detecting NoSQL injection",
        "Lab Description": "The product category filter for this lab is powered by a MongoDB NoSQL database. It is vulnerable to NoSQL injection.\nTo solve the lab, perform a NoSQL injection attack that causes the application to display unreleased products.",
        "Vulnerability name": "NoSQL injection",
         "lab level": "Medium",
         "src code": "const express = require('express');\nconst app = express();\n\napp.get('/products', (req, res) => {\n  let injectedCategory;\n  try {\n    injectedCategory = JSON.parse(req.query.category);\n  } catch (err) {\n    injectedCategory = req.query.category;\n  }\n  \n  const products = [\n    { id: 1, name: 'Product A', category: 'Gifts', released: true },\n    { id: 2, name: 'Product B', category: 'Electronics', released: true },\n    { id: 3, name: 'Secret Product', category: 'Gifts', released: false }\n  ];\n  \n  let result;\n  // Normal behavior: only show released products matching the category\n  if (typeof injectedCategory === 'string') {\n    result = products.filter(p => p.category === injectedCategory && p.released === true);\n  } else if (typeof injectedCategory === 'object' && injectedCategory.$ne !== undefined) {\n    // Vulnerable behavior: bypass the 'released' filter to show unreleased products\n    result = products.filter(p => p.category !== injectedCategory.$ne);\n  } else {\n    result = [];\n  }\n  \n  res.send(result);\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});"
    
      },
      {
        "Lab scenario": "Exploiting NoSQL operator injection to bypass authentication",
        "Lab Description": "The login functionality for this lab is powered by a MongoDB NoSQL database. It is vulnerable to NoSQL injection using MongoDB operators.\nTo solve the lab, log into the application as the administrator user.\nYou can log in to your own account using the following credentials: wiener:peter.",
        "Vulnerability name": "NoSQL injection",
        "lab level": "Medium",
      "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.json());\n\n// Simulated MongoDB \"database\"\nconst users = [\n  { username: 'administrator', password: 'admin123' },\n  { username: 'wiener', password: 'peter' }\n];\n\n// Root route to prevent \"Cannot GET /\" error\napp.get('/', (req, res) => {\n  res.send('<h1>Welcome to the NoSQL Injection Lab</h1><p>Use the <code>/login</code> endpoint with a POST request.</p>');\n});\n\n// Vulnerable login route: NoSQL Injection\napp.post('/login', (req, res) => {\n  let query = req.body;\n  \n  let user = users.find(u => {\n    return Object.keys(query).every(key => {\n      if (typeof query[key] === 'object' && query[key].$ne !== undefined) {\n        return u[key] != query[key].$ne;\n      } else {\n        return u[key] === query[key];\n      }\n    });\n  });\n\n  if (user) {\n    res.send(`Welcome, ${user.username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});"
      },
      {
        "Lab scenario": "Exploiting NoSQL injection to extract data",
        "Lab Description": "The user lookup functionality for this lab is powered by a MongoDB NoSQL database. It is vulnerable to NoSQL injection.\nTo solve the lab, extract the password for the administrator user, then log in to their account.\nYou can log in to your own account using the following credentials: wiener:peter.",
        "Vulnerability name": "NoSQL injection",
        "src code": "const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// MongoDB connection\nmongoose.connect('mongodb://localhost:27017/nosql_extract', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// User schema\nconst UserSchema = new mongoose.Schema({\n  username: { type: String, unique: true },\n  password: String,\n  role: String\n});\nconst User = mongoose.model('User', UserSchema);\n\n// Initialize DB\nasync function initializeDB() {\n  await User.deleteMany({});\n  await User.create([\n    { username: 'administrator', password: 'p@ssw0rd!SECRET123', role: 'admin' },\n    { username: 'carlos', password: 'qwertyuiop', role: 'user' },\n    { username: 'wiener', password: 'peter', role: 'user' }\n  ]);\n}\ninitializeDB();\n\n// Vulnerable login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  \n  User.findOne({\n    username: username,\n    password: password\n  })\n  .then(user => {\n    if (user) {\n      res.send(`Logged in as ${user.username}`);\n    } else {\n      res.status(401).send('Invalid credentials');\n    }\n  })\n  .catch(err => res.status(500).send('Error'));\n});\n\n// Frontend\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>NoSQL Password Extraction Lab</h1>\n    <form action=\"/login\" method=\"POST\">\n      <input type=\"text\" name=\"username\" placeholder=\"Username\">\n      <input type=\"password\" name=\"password\" placeholder=\"Password\">\n      <button>Login</button>\n    </form>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log('Lab running on http://localhost:3000');\n});",
      "lab level": "hard"
      },
      {
        "Lab scenario": "Exploiting NoSQL operator injection to extract unknown fields",
        "Lab Description": "The user lookup functionality for this lab is powered by a MongoDB NoSQL database. It is vulnerable to NoSQL injection.\nTo solve the lab, log in as carlos.",
        "Vulnerability name": "NoSQL injection",
        "src code": "const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// MongoDB connection\nmongoose.connect('mongodb://localhost:27017/nosql_lab', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// User schema\nconst UserSchema = new mongoose.Schema({\n  username: String,\n  password: String,\n  role: String\n});\nconst User = mongoose.model('User', UserSchema);\n\n// Initialize DB\nasync function initializeDB() {\n  await User.deleteMany({});\n  await User.create([\n    { username: 'carlos', password: 's3cr3t', role: 'user' },\n    { username: 'wiener', password: 'peter', role: 'user' }\n  ]);\n}\ninitializeDB();\n\n// Vulnerable login endpoint\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  \n  // NoSQL injection vulnerability\n  User.findOne({\n    username: username,\n    password: password\n  })\n  .then(user => {\n    if (user) {\n      res.send(`Logged in as ${user.username}`);\n    } else {\n      res.status(401).send('Invalid credentials');\n    }\n  })\n  .catch(err => res.status(500).send('Error'));\n});\n\n// Debug endpoint (hidden)\napp.get('/debug/users', async (req, res) => {\n  const users = await User.find({});\n  res.json(users);\n});\n\n// Root route\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>NoSQL Injection Lab</h1>\n    <form action=\"/login\" method=\"POST\">\n      <input type=\"text\" name=\"username\" placeholder=\"Username\">\n      <input type=\"password\" name=\"password\" placeholder=\"Password\">\n      <button>Login</button>\n    </form>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log('Lab running on http://localhost:3000');\n});",  
      "lab level": "medium"  
      }
]