[
    {
        "Lab scenario": "Exploiting server-side parameter pollution in a REST URL",
        "Lab Description": "To solve the lab, log in as the administrator and delete carlos.",
        "Vulnerability name": "API testing",
         "lab level": "Hard",
         "src code": "const express = require('express');\nconst app = express();\n\n// Simulated user database\nconst users = [\n  { id: 1, username: 'administrator', role: 'admin' },\n  { id: 2, username: 'carlos', role: 'user' },\n  { id: 3, username: 'wiener', role: 'user' }\n];\n\n// Vulnerable route: deletes a user based on the polluted URL parameter\napp.delete('/api/users/:username', (req, res) => {\n  const pollutedUsername = req.params.username;\n  const targetUser = users.find(u => u.username === pollutedUsername);\n  if (targetUser) {\n    res.send(`User ${pollutedUsername} deleted.`);\n  } else {\n    res.status(404).send('User not found.');\n  }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});"
    }
    ,
     {
        "Lab scenario": "Exploiting an API endpoint using documentation",
        "Lab Description": "To solve the lab, find the exposed API documentation and delete carlos. You can log in to your own account using the following credentials: wiener:peter.",
        "Vulnerability name": "API testing",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nlet users = [\n  { id: 1, username: 'administrator', role: 'admin' },\n  { id: 2, username: 'carlos', role: 'user' },\n  { id: 3, username: 'wiener', role: 'user' }\n];\n\n// Hidden API documentation endpoint\napp.get('/docs', (req, res) => {\n  res.send(`\n    <h1>Internal API Docs</h1>\n    <h2>Delete User</h2>\n    <pre>DELETE /api/users\nHeaders:\n  X-API-Key: 7d8f9e0a1b2c3d4e5f6a7b8c9d0e1f2\nBody:\n  { \"username\": \"target_user\" }</pre>\n  `);\n});\n\n// Vulnerable API endpoint\napp.delete('/api/users', (req, res) => {\n  const apiKey = req.headers['x-api-key'];\n  const targetUser = req.body.username;\n\n  if (apiKey === '7d8f9e0a1b2c3d4e5f6a7b8c9d0e1f2') {\n    users = users.filter(u => u.username !== targetUser);\n    res.send(`${targetUser} deleted successfully`);\n  } else {\n    res.status(403).send('Invalid API key');\n  }\n});\n\n// Visible interface\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>API Docs Lab</h1>\n    <a href=\"/login\">Login</a>\n  `);\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    res.send('Logged in as wiener');\n  } else {\n    res.status(401).send('Login failed');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Lab running on http://localhost:3000');\n});",
       "lab level": "medium"
    
      },
      {
        "Lab scenario": "Exploiting server-side parameter pollution in a query string",
        "Lab Description": "To solve the lab, log in as the administrator and delete carlos.",
        "Vulnerability name": "API testing",
         "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\nlet users = [\n  { username: 'administrator', password: 'secret', role: 'admin' },\n  { username: 'carlos', password: 'password123', role: 'user' },\n  { username: 'wiener', password: 'peter', role: 'user' }\n];\n\n// Vulnerable login endpoint\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  \n  // Server uses last parameter if duplicates exist\n  const user = users.find(u => u.username === username && u.password === password);\n  \n  if (user) {\n    res.send(`Logged in as ${username} (${user.role})`);\n  } else {\n    res.status(401).send('Login failed');\n  }\n});\n\n// Vulnerable delete endpoint\napp.post('/delete', (req, res) => {\n  const targetUser = req.body.user;\n  const isAdmin = req.body.role === 'admin'; // Vulnerable to parameter pollution\n  \n  if (isAdmin) {\n    users = users.filter(u => u.username !== targetUser);\n    res.send(`${targetUser} deleted successfully`);\n  } else {\n    res.status(403).send('Admin privileges required');\n  }\n});\n\n// Root route with instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Parameter Pollution Lab</h1>\n    <h2>Login Form</h2>\n    <form action=\"/login\" method=\"POST\">\n      <input type=\"text\" name=\"username\" placeholder=\"Username\">\n      <input type=\"password\" name=\"password\" placeholder=\"Password\">\n      <button type=\"submit\">Login</button>\n    </form>\n    <h2>Delete User</h2>\n    <form action=\"/delete\" method=\"POST\">\n      <input type=\"text\" name=\"user\" placeholder=\"Username to delete\">\n      <button type=\"submit\">Delete</button>\n    </form>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});",
       "lab level": "medium"
      },
      {
        "Lab scenario": "Finding and exploiting an unused API endpoint",
        "Lab Description": "To solve the lab, exploit a hidden API endpoint to buy a Lightweight l33t Leather Jacket. You can log in to your own account using the following credentials: wiener:peter.",
        "Vulnerability name": "API testing",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nlet products = [\n  { id: 1, name: 'Lightweight l33t Leather Jacket', price: 1000, available: false }\n];\n\n// Visible routes\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>E-Commerce Lab</h1>\n    <a href=\"/login\">Login</a><br>\n    <a href=\"/products\">View Products</a>\n  `);\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\n// Hidden vulnerable endpoint\napp.post('/api/admin/update-product', (req, res) => {\n  const { productId, available } = req.body;\n  const product = products.find(p => p.id === productId);\n  if (product) {\n    product.available = available;\n    res.send('Product updated');\n  } else {\n    res.status(404).send('Product not found');\n  }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});",
      "lab level": "medium"
      },
      {
        "Lab scenario": "Exploiting a mass assignment vulnerability",
        "Lab Description": "To solve the lab, find and exploit a mass assignment vulnerability to buy a Lightweight l33t Leather Jacket. You can log in to your own account using the following credentials: wiener:peter.",
        "Vulnerability name": "API testing",
         "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nlet products = [\n  { id: 1, name: 'Lightweight l33t Leather Jacket', price: 100, available: false }\n];\n\n// Root route\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Mass Assignment Lab</h1>\n    <p>Send a POST request to /buy with a JSON payload to exploit the vulnerability.</p>\n    <p>Example payload: {\"id\": 2, \"name\": \"Hacked Jacket\", \"price\": 0, \"available\": true}</p>\n  `);\n});\n\n// Vulnerable route\napp.post('/buy', (req, res) => {\n  const product = req.body;\n  products.push(product);\n  res.send(`Product purchased: ${JSON.stringify(product)}`);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});",
      "lab level": "Medium"
      }
]