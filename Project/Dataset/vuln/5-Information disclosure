[   
    
      {
        "Lab scenario": "Authentication bypass via information disclosure",
        "Lab Description": "This lab's administration interface has an authentication bypass vulnerability, but it is impractical to exploit without knowledge of a custom HTTP header used by the front-end.\nTo solve the lab, obtain the header name then use it to bypass the lab's authentication. Access the admin interface and delete the user carlos.\nYou can log in to your own account using the following credentials: wiener:peter",
        "Vulnerability name": "Information disclosure"
      },
      {
        "Lab scenario": "Information disclosure in version control history",
        "Lab Description": "This lab discloses sensitive information via its version control history. To solve the lab, obtain the password for the administrator user then log in and delete the user carlos.",
        "Vulnerability name": "Information disclosure"
      },
    {
        "Lab scenario": "Information disclosure in error messages",
        "Lab Description": "This lab's verbose error messages reveal that it is using a vulnerable version of a third-party framework. To solve the lab, obtain and submit the version number of this framework.",
        "Vulnerability name": "Information disclosure",
        "lab level": "Easy",
        "src code": "const express = require('express');\nconst app = express();\n\n// Endpoint that intentionally triggers an error with a verbose message\napp.get('/error', (req, res, next) => {\n  // Simulate an error that discloses a vulnerable framework version\n  const error = new Error(\"Vulnerable framework detected: VulnerableFramework v1.2.3\");\n  next(error);\n});\n\n// Error-handling middleware to display verbose error messages\napp.use((err, req, res, next) => {\n  res.status(500).send(`\n    <h1>Error Occurred</h1>\n    <pre>${err.stack}</pre>\n  `);\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Information Disclosure via Error Messages Lab</h1>\n    <p>This lab intentionally triggers a verbose error message that reveals the version number of a vulnerable third-party framework.</p>\n    <p>To solve the lab, visit the error page at: <code>/error</code> and extract the framework version from the error message.</p>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Information disclosure on debug page",
        "Lab Description": "This lab contains a debug page that discloses sensitive information about the application. To solve the lab, obtain and submit the SECRET_KEY environment variable.",
        "Vulnerability name": "Information disclosure",
        "lab level": "Easy",
    
        "src code": "const express = require('express');\nconst app = express();\n\n// Debug endpoint that discloses the SECRET_KEY environment variable\napp.get('/debug', (req, res) => {\n  const secretKey = process.env.SECRET_KEY || 'default_secret';\n  res.send(`SECRET_KEY: ${secretKey}`);\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Debug Information Disclosure Lab</h1>\n    <p>This lab contains a debug page that discloses sensitive information about the application.</p>\n    <p>To solve the lab, obtain and submit the SECRET_KEY environment variable.</p>\n    <p>Access the debug page at: <a href=\"/debug\">/debug</a></p>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
    
      },
      {
        "Lab scenario": "Source code disclosure via backup files",
        "Lab Description": "This lab leaks its source code via backup files in a hidden directory. To solve the lab, identify and submit the database password, which is hard-coded in the leaked source code.",
        "Vulnerability name": "Information disclosure",
        "lab level": "Easy",
        "src code": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\n\n// Vulnerable route: Exposes backup source code from a hidden directory\napp.get('/.backup/code.txt', (req, res) => {\n  // Simulated leaked source code that contains a hard-coded database password\n  const leakedSource = `\n    // Backup source code file\n    const dbPassword = 'supersecret'; // The database password\n    function connectDatabase() {\n      // connection logic here...\n    }\n    module.exports = { connectDatabase };\n  `;\n  res.type('text/plain');\n  res.send(leakedSource);\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Information Disclosure Lab</h1>\n    <p>This lab leaks its source code via backup files in a hidden directory.</p>\n    <p>To solve the lab, identify and submit the database password hard-coded in the leaked source code.</p>\n    <p>Try accessing the backup file at: <a href=\"/.backup/code.txt\">/.backup/code.txt</a></p>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
    
      }
]