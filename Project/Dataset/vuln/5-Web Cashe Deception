[
    {
        "Lab scenario": "Exploiting path mapping for web cache deception",
        "Lab Description": "To solve the lab, find the API key for the user carlos. You can log in to your own account using the following credentials: wiener:peter.",
        "Vulnerability name": "Web cache deception",
        "lab level": "Medium",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'lab_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated cache using a vulnerable path mapping\nlet cache = {};\n\nfunction mapPathToCacheKey(path) {\n  return path.trim().replace(/\\/+$/, '');\n}\n\n// Login page\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Vulnerable login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`\n      <h1>Welcome, ${username}!</h1>\n      <p>You are now logged in.</p>\n      <p><a href=\"/secret\">Access Secret</a></p>\n    `);\n  } else {\n    res.send(\"Invalid credentials. Please try again.\");\n  }\n});\n\n// Vulnerable secret route\napp.get('/secret', (req, res) => {\n  const cacheKey = mapPathToCacheKey(req.originalUrl);\n  if (cache[cacheKey]) {\n    res.send(`<h1>Cached API Key</h1><p>${cache[cacheKey]}</p>`);\n  } else {\n    const apiKey = 'carlos-secret-api-key';\n    cache[cacheKey] = apiKey;\n    res.send(`<h1>API Key Generated</h1><p>${apiKey}</p>`);\n  }\n});\n\n// Root route with instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Web Cache Deception Lab - Exploiting Path Mapping</h1>\n    <p>This lab demonstrates a vulnerability due to improper normalization of URL path delimiters.</p>\n    <ul>\n      <li>Log in using: <strong>wiener</strong> / <strong>peter</strong></li>\n      <li>After login, access <code>/secret</code> and try modifying the URL (e.g., add extra slashes) to bypass normalization.</li>\n      <li><a href=\"/login\">Login Here</a></li>\n    </ul>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      
      },
      {
        "Lab scenario": "Exploiting path delimiters for web cache deception",
        "Lab Description": "To solve the lab, find the API key for the user carlos. You can log in to your own account using the following credentials: wiener:peter.\nWe have provided a list of possible delimiter characters to help you solve the lab: Web cache deception lab delimiter list.",
        "Vulnerability name": "Web cache deception",
        "lab level": "Medium",
          "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'lab_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated cache using the raw URL as key (vulnerable to path delimiter manipulation)\nlet cache = {\n  carlosApiKey: 'initial-origin-api-key'\n};\n\n// Login page\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Vulnerable login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`\n      <h1>Welcome, ${username}!</h1>\n      <p>You are now logged in.</p>\n      <p><a href=\"/secret\">Access Secret</a></p>\n      <p>Hint: Modify URL delimiters (e.g., extra slashes) to bypass cache normalization.</p>\n    `);\n  } else {\n    res.send(\"Invalid credentials. Please try again.\");\n  }\n});\n\n// Vulnerable route: returns sensitive API key based on raw URL (cache key)\napp.get('/secret', (req, res) => {\n  const cacheKey = req.originalUrl;\n  if (cache[cacheKey]) {\n    res.send(`<h1>Cached API Key</h1><p>${cache[cacheKey]}</p>`);\n  } else {\n    const apiKey = 'carlos-secret-api-key';\n    cache[cacheKey] = apiKey;\n    res.send(`<h1>API Key Generated</h1><p>${apiKey}</p>`);\n  }\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Web Cache Deception Lab - Exploiting Path Delimiters</h1>\n    <p>This lab demonstrates a vulnerability due to improper normalization of URL path delimiters.</p>\n    <ul>\n      <li>Log in using: <strong>wiener</strong> / <strong>peter</strong></li>\n      <li>After login, access <code>/secret</code> and experiment by modifying the URL delimiters.</li>\n      <li><a href=\"/login\">Login Here</a></li>\n    </ul>\n  `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Exploiting origin server normalization for web cache deception",
        "Lab Description": "To solve the lab, find the API key for the user carlos. You can log in to your own account using the following credentials: wiener:peter.\nWe have provided a list of possible delimiter characters to help you solve the lab: Web cache deception lab delimiter list.",
        "Vulnerability name": "Web cache deception",
        "lab level": "Medium",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'lab_origin_secret',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated origin server cache for API key (vulnerable to cache deception)\nlet originCache = {\n  carlosApiKey: 'initial-origin-api-key'\n};\n\n// Login page\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Vulnerable login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`\n      <h1>Welcome, ${username}!</h1>\n      <p>You are now logged in.</p>\n      <p><a href=\"/update-api-key\">Update API Key</a></p>\n      <p><a href=\"/api-key\">View API Key for carlos</a></p>\n    `);\n  } else {\n    res.send(\"Invalid credentials. Please try again.\");\n  }\n});\n\n// Page to update API key (vulnerable endpoint)\napp.get('/update-api-key', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  res.send(`\n    <h1>Update API Key (Origin Server)</h1>\n    <form method=\"POST\" action=\"/update-api-key\">\n      <label for=\"apikey\">New API Key for carlos:</label><br><br>\n      <input type=\"text\" id=\"apikey\" name=\"apikey\"><br><br>\n      <button type=\"submit\">Update API Key</button>\n    </form>\n    <p>Hint: Use various delimiter characters if needed.</p>\n  `);\n});\n\n// Vulnerable update route for API key\napp.post('/update-api-key', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  const newApiKey = req.body.apikey;\n  originCache.carlosApiKey = newApiKey;\n  res.send(`API Key for carlos updated to: ${newApiKey}. <a href=\"/api-key\">View API Key</a>`);\n});\n\n// Endpoint to view the cached API key for carlos\napp.get('/api-key', (req, res) => {\n  res.send(`<h1>API Key for carlos</h1><p>${originCache.carlosApiKey}</p>`);\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Web Cache Deception Lab - Exploiting Origin Server Normalization</h1>\n    <p>This lab demonstrates a web cache deception vulnerability due to inadequate normalization on the origin server.</p>\n    <ul>\n      <li>Log in using the credentials: <strong>wiener</strong> / <strong>peter</strong></li>\n      <li>Go to <a href=\"/update-api-key\">Update API Key</a> to change the API key for carlos.</li>\n      <li>Then, view the result at <a href=\"/api-key\">View API Key</a></li>\n      <li>Hint: Use various delimiter characters as provided in the lab instructions.</li>\n    </ul>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Start the server\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      
      },
      {
        "Lab scenario": "Exploiting cache server normalization for web cache deception",
        "Lab Description": "To solve the lab, find the API key for the user carlos. You can log in to your own account using the following credentials: wiener:peter.\nWe have provided a list of possible delimiter characters to help you solve the lab: Web cache deception lab delimiter list.",
        "Vulnerability name": "Web cache deception",
        "lab level": "Medium",
        "src code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'lab_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated in-memory cache to mimic exact-match cache normalization\nlet cache = {\n  carlosApiKey: 'initial-api-key'\n};\n\n// Login page\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Vulnerable login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`\n      <h1>Welcome, ${username}!</h1>\n      <p>You are now logged in.</p>\n      <p><a href=\"/update-api-key\">Update API Key</a></p>\n      <p><a href=\"/api-key\">View API Key for carlos</a></p>\n    `);\n  } else {\n    res.send(\"Invalid credentials. Please try again.\");\n  }\n});\n\n// Vulnerable route to update API key\napp.get('/update-api-key', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  res.send(`\n    <h1>Update API Key</h1>\n    <form method=\"POST\" action=\"/update-api-key\">\n      <label for=\"apikey\">New API Key for carlos:</label><br><br>\n      <input type=\"text\" id=\"apikey\" name=\"apikey\"><br><br>\n      <button type=\"submit\">Update API Key</button>\n    </form>\n    <p>Hint: Use various delimiter characters if needed.</p>\n  `);\n});\n\n// Vulnerable update-email POST route\napp.post('/update-api-key', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  const newApiKey = req.body.apikey;\n  cache.carlosApiKey = newApiKey;\n  res.send(`API Key for carlos updated to: ${newApiKey}. <a href=\"/api-key\">View API Key</a>`);\n});\n\n// Endpoint to view the cached API key for carlos\napp.get('/api-key', (req, res) => {\n  res.send(`<h1>API Key for carlos</h1><p>${cache.carlosApiKey}</p>`);\n});\n\n// Root route with lab instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Web Cache Deception Lab - API Key Retrieval</h1>\n    <p>This lab demonstrates a web cache deception vulnerability caused by exact-match cache normalization.</p>\n    <ul>\n      <li>Log in using the credentials: <strong>wiener</strong> / <strong>peter</strong></li>\n      <li>Go to <a href=\"/update-api-key\">Update API Key</a> to change the API key for carlos.</li>\n      <li>Then, view the result at <a href=\"/api-key\">View API Key</a></li>\n      <li>Hint: Use various delimiter characters as provided in the lab instructions.</li>\n    </ul>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Start the server\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      },
      {
        "Lab scenario": "Exploiting exact-match cache rules for web cache deception",
        "Lab Description": "To solve the lab, change the email address for the user administrator. You can log in to your own account using the following credentials: wiener:peter.\nWe have provided a list of possible delimiter characters to help you solve the lab: Web cache deception lab delimiter list.",
        "Vulnerability name": "Web cache deception",
        "lab level": "Medium",
        "src code": "const express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(session({\n  secret: 'lab_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Simulated in-memory cache to mimic exact-match cache behavior\nlet cache = {\n  adminEmail: 'admin@example.com'\n};\n\n// Login page\napp.get('/login', (req, res) => {\n  res.send(`\n    <h1>Login</h1>\n    <form method=\"POST\" action=\"/login\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n});\n\n// Vulnerable login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'wiener' && password === 'peter') {\n    req.session.user = username;\n    res.send(`\n      <h1>Welcome, ${username}!</h1>\n      <p>You are now logged in.</p>\n      <p><a href=\"/update-email\">Update Admin Email</a></p>\n      <p><a href=\"/admin-email\">View Admin Email</a></p>\n    `);\n  } else {\n    res.send(\"Invalid credentials. Please try again.\");\n  }\n});\n\n// Vulnerable route to update admin email\napp.get('/update-email', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  res.send(`\n    <h1>Update Admin Email</h1>\n    <form method=\"POST\" action=\"/update-email\">\n      <label for=\"email\">New Admin Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\"><br><br>\n      <button type=\"submit\">Update Email</button>\n    </form>\n    <p>Hint: Use various delimiter characters if needed.</p>\n  `);\n});\n\n// Vulnerable update-email POST route\napp.post('/update-email', (req, res) => {\n  if (!req.session.user) {\n    return res.send(\"Please log in first.\");\n  }\n  const newEmail = req.body.email;\n  cache.adminEmail = newEmail;\n  res.send(`Admin email updated to: ${newEmail}. <a href=\"/admin-email\">View Admin Email</a>`);\n});\n\n// Route to view the cached admin email\napp.get('/admin-email', (req, res) => {\n  res.send(`<h1>Administrator Email</h1><p>${cache.adminEmail}</p>`);\n});\n\n// Root route with instructions\napp.get('/', (req, res) => {\n  res.send(`\n    <h1>Web Cache Deception Lab</h1>\n    <p>This lab demonstrates a web cache deception vulnerability caused by exact-match cache rules.</p>\n    <p>To solve the lab, change the email address for the administrator user.</p>\n    <p>You can log in using the credentials: <strong>wiener</strong> / <strong>peter</strong></p>\n    <p>Hint: Use various delimiter characters as provided in the lab instructions.</p>\n    <p><a href=\"/login\">Login Here</a></p>\n  `);\n});\n\n// Start the server\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Lab running on http://localhost:${PORT}`);\n});"
      }
]